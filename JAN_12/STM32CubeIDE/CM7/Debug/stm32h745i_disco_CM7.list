
stm32h745i_disco_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024340  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ee4  080245e0  080245e0  000345e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontSearchFlashSection 00000018  080264c4  080264c4  000364c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080264dc  080264dc  00064078  2**0
                  CONTENTS
  5 .ARM          00000000  080264dc  080264dc  00064078  2**0
                  CONTENTS
  6 .preinit_array 00000000  080264dc  080264dc  00064078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000014  080264dc  080264dc  000364dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000008  080264f0  080264f0  000364f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         0000012c  24000000  080264f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b0ac  2400012c  08026624  0004012c  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2400b1d8  08026624  0004b1d8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00064078  2**0
                  CONTENTS, READONLY
 13 FontFlashSection 000001a8  90000000  90000000  00050000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 TextFlashSection 00000010  900001a8  900001a8  000501a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 ExtFlashSection 00013ec0  900001b8  900001b8  000501b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 .debug_info   000ae99e  00000000  00000000  000640a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00013f79  00000000  00000000  00112a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004448  00000000  00000000  001269c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00003f30  00000000  00000000  0012ae08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000406d1  00000000  00000000  0012ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004f934  00000000  00000000  0016f409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001b6c66  00000000  00000000  001bed3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  003759a3  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000129c8  00000000  00000000  00375a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080245c8 	.word	0x080245c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	080245c8 	.word	0x080245c8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Boot_Mode_Sequence_0 */
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000386:	f000 fbb1 	bl	8000aec <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800038a:	4b65      	ldr	r3, [pc, #404]	; (8000520 <main+0x1a0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000392:	2b00      	cmp	r3, #0
 8000394:	d11b      	bne.n	80003ce <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000396:	f3bf 8f4f 	dsb	sy
}
 800039a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800039c:	f3bf 8f6f 	isb	sy
}
 80003a0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80003a2:	4b5f      	ldr	r3, [pc, #380]	; (8000520 <main+0x1a0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80003aa:	f3bf 8f4f 	dsb	sy
}
 80003ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003b0:	f3bf 8f6f 	isb	sy
}
 80003b4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80003b6:	4b5a      	ldr	r3, [pc, #360]	; (8000520 <main+0x1a0>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a59      	ldr	r2, [pc, #356]	; (8000520 <main+0x1a0>)
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80003c2:	f3bf 8f4f 	dsb	sy
}
 80003c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80003c8:	f3bf 8f6f 	isb	sy
}
 80003cc:	e000      	b.n	80003d0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80003ce:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80003d0:	4b53      	ldr	r3, [pc, #332]	; (8000520 <main+0x1a0>)
 80003d2:	695b      	ldr	r3, [r3, #20]
 80003d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d138      	bne.n	800044e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80003dc:	4b50      	ldr	r3, [pc, #320]	; (8000520 <main+0x1a0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80003e4:	f3bf 8f4f 	dsb	sy
}
 80003e8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80003ea:	4b4d      	ldr	r3, [pc, #308]	; (8000520 <main+0x1a0>)
 80003ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80003f0:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80003f2:	693b      	ldr	r3, [r7, #16]
 80003f4:	0b5b      	lsrs	r3, r3, #13
 80003f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80003fa:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80003fc:	693b      	ldr	r3, [r7, #16]
 80003fe:	08db      	lsrs	r3, r3, #3
 8000400:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000404:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800040e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000410:	68ba      	ldr	r2, [r7, #8]
 8000412:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000414:	4942      	ldr	r1, [pc, #264]	; (8000520 <main+0x1a0>)
 8000416:	4313      	orrs	r3, r2
 8000418:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	60ba      	str	r2, [r7, #8]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ef      	bne.n	8000406 <main+0x86>
    } while(sets-- != 0U);
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	1e5a      	subs	r2, r3, #1
 800042a:	60fa      	str	r2, [r7, #12]
 800042c:	2b00      	cmp	r3, #0
 800042e:	d1e5      	bne.n	80003fc <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000430:	f3bf 8f4f 	dsb	sy
}
 8000434:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000436:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <main+0x1a0>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a39      	ldr	r2, [pc, #228]	; (8000520 <main+0x1a0>)
 800043c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000440:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000442:	f3bf 8f4f 	dsb	sy
}
 8000446:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000448:	f3bf 8f6f 	isb	sy
}
 800044c:	e000      	b.n	8000450 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800044e:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000454:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000456:	bf00      	nop
 8000458:	4b32      	ldr	r3, [pc, #200]	; (8000524 <main+0x1a4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d004      	beq.n	800046e <main+0xee>
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	1e5a      	subs	r2, r3, #1
 8000468:	617a      	str	r2, [r7, #20]
 800046a:	2b00      	cmp	r3, #0
 800046c:	dcf4      	bgt.n	8000458 <main+0xd8>
  if ( timeout < 0 )
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	2b00      	cmp	r3, #0
 8000472:	da01      	bge.n	8000478 <main+0xf8>
  {
  Error_Handler();
 8000474:	f000 fb84 	bl	8000b80 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000478:	f00c fa9a 	bl	800c9b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047c:	f000 f860 	bl	8000540 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000480:	4b28      	ldr	r3, [pc, #160]	; (8000524 <main+0x1a4>)
 8000482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000486:	4a27      	ldr	r2, [pc, #156]	; (8000524 <main+0x1a4>)
 8000488:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800048c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <main+0x1a4>)
 8000492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800049e:	2000      	movs	r0, #0
 80004a0:	f00d f9c8 	bl	800d834 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004a4:	2100      	movs	r1, #0
 80004a6:	2000      	movs	r0, #0
 80004a8:	f00d f9de 	bl	800d868 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b0:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004b2:	bf00      	nop
 80004b4:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <main+0x1a4>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d104      	bne.n	80004ca <main+0x14a>
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	1e5a      	subs	r2, r3, #1
 80004c4:	617a      	str	r2, [r7, #20]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	dcf4      	bgt.n	80004b4 <main+0x134>
if ( timeout < 0 )
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	da01      	bge.n	80004d4 <main+0x154>
{
Error_Handler();
 80004d0:	f000 fb56 	bl	8000b80 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 fa0a 	bl	80008ec <MX_GPIO_Init>
  MX_QUADSPI_Init();
 80004d8:	f000 f984 	bl	80007e4 <MX_QUADSPI_Init>
  MX_FMC_Init();
 80004dc:	f000 f9b0 	bl	8000840 <MX_FMC_Init>
  MX_LTDC_Init();
 80004e0:	f000 f8fc 	bl	80006dc <MX_LTDC_Init>
  MX_CRC_Init();
 80004e4:	f000 f8ba 	bl	800065c <MX_CRC_Init>
  MX_DMA2D_Init();
 80004e8:	f000 f8da 	bl	80006a0 <MX_DMA2D_Init>
  MX_TouchGFX_Init();
 80004ec:	f001 f90c 	bl	8001708 <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80004f0:	f001 f903 	bl	80016fa <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f4:	f006 fa3c 	bl	8006970 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004f8:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <main+0x1a8>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <main+0x1ac>)
 80004fe:	f006 fa81 	bl	8006a04 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <main+0x1b0>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of TouchGFXTask */
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <main+0x1b4>)
 800050a:	2100      	movs	r1, #0
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <main+0x1b8>)
 800050e:	f006 fa79 	bl	8006a04 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a09      	ldr	r2, [pc, #36]	; (800053c <main+0x1bc>)
 8000516:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000518:	f006 fa4e 	bl	80069b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051c:	e7fe      	b.n	800051c <main+0x19c>
 800051e:	bf00      	nop
 8000520:	e000ed00 	.word	0xe000ed00
 8000524:	58024400 	.word	0x58024400
 8000528:	08025260 	.word	0x08025260
 800052c:	08000add 	.word	0x08000add
 8000530:	240002fc 	.word	0x240002fc
 8000534:	08025284 	.word	0x08025284
 8000538:	08001715 	.word	0x08001715
 800053c:	24000300 	.word	0x24000300

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b09c      	sub	sp, #112	; 0x70
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800054a:	224c      	movs	r2, #76	; 0x4c
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f023 f8a4 	bl	802369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	1d3b      	adds	r3, r7, #4
 8000556:	2220      	movs	r2, #32
 8000558:	2100      	movs	r1, #0
 800055a:	4618      	mov	r0, r3
 800055c:	f023 f89e 	bl	802369c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000560:	2004      	movs	r0, #4
 8000562:	f00e fceb 	bl	800ef3c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
 800056a:	4b39      	ldr	r3, [pc, #228]	; (8000650 <SystemClock_Config+0x110>)
 800056c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800056e:	4a38      	ldr	r2, [pc, #224]	; (8000650 <SystemClock_Config+0x110>)
 8000570:	f023 0301 	bic.w	r3, r3, #1
 8000574:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000576:	4b36      	ldr	r3, [pc, #216]	; (8000650 <SystemClock_Config+0x110>)
 8000578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	603b      	str	r3, [r7, #0]
 8000580:	4b34      	ldr	r3, [pc, #208]	; (8000654 <SystemClock_Config+0x114>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a33      	ldr	r2, [pc, #204]	; (8000654 <SystemClock_Config+0x114>)
 8000586:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b31      	ldr	r3, [pc, #196]	; (8000654 <SystemClock_Config+0x114>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000598:	bf00      	nop
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <SystemClock_Config+0x114>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005a6:	d1f8      	bne.n	800059a <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80005a8:	4b2b      	ldr	r3, [pc, #172]	; (8000658 <SystemClock_Config+0x118>)
 80005aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ac:	f023 0303 	bic.w	r3, r3, #3
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <SystemClock_Config+0x118>)
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005b8:	2303      	movs	r3, #3
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c6:	2340      	movs	r3, #64	; 0x40
 80005c8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005d2:	2305      	movs	r3, #5
 80005d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80005d6:	23a0      	movs	r3, #160	; 0xa0
 80005d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005de:	2304      	movs	r3, #4
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005e2:	2302      	movs	r3, #2
 80005e4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e6:	2308      	movs	r3, #8
 80005e8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00f fbdc 	bl	800fdb4 <HAL_RCC_OscConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 fabd 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000606:	233f      	movs	r3, #63	; 0x3f
 8000608:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060a:	2303      	movs	r3, #3
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000612:	2308      	movs	r3, #8
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000616:	2340      	movs	r3, #64	; 0x40
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800061a:	2340      	movs	r3, #64	; 0x40
 800061c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000622:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000624:	2340      	movs	r3, #64	; 0x40
 8000626:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f010 f81b 	bl	8010668 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000638:	f000 faa2 	bl	8000b80 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800063c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000640:	2100      	movs	r1, #0
 8000642:	2000      	movs	r0, #0
 8000644:	f010 f9c6 	bl	80109d4 <HAL_RCC_MCOConfig>
}
 8000648:	bf00      	nop
 800064a:	3770      	adds	r7, #112	; 0x70
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	58000400 	.word	0x58000400
 8000654:	58024800 	.word	0x58024800
 8000658:	58024400 	.word	0x58024400

0800065c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <MX_CRC_Init+0x3c>)
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <MX_CRC_Init+0x40>)
 8000664:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_CRC_Init+0x3c>)
 8000668:	2200      	movs	r2, #0
 800066a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <MX_CRC_Init+0x3c>)
 800066e:	2200      	movs	r2, #0
 8000670:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000672:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_CRC_Init+0x3c>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MX_CRC_Init+0x3c>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800067e:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_CRC_Init+0x3c>)
 8000680:	2201      	movs	r2, #1
 8000682:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	; (8000698 <MX_CRC_Init+0x3c>)
 8000686:	f00c fb89 	bl	800cd9c <HAL_CRC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000690:	f000 fa76 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	24000148 	.word	0x24000148
 800069c:	58024c00 	.word	0x58024c00

080006a0 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006a4:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_DMA2D_Init+0x34>)
 80006a6:	4a0c      	ldr	r2, [pc, #48]	; (80006d8 <MX_DMA2D_Init+0x38>)
 80006a8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_R2M;
 80006aa:	4b0a      	ldr	r3, [pc, #40]	; (80006d4 <MX_DMA2D_Init+0x34>)
 80006ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006b0:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_DMA2D_Init+0x34>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_DMA2D_Init+0x34>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_DMA2D_Init+0x34>)
 80006c0:	f00c fc56 	bl	800cf70 <HAL_DMA2D_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_DMA2D_Init+0x2e>
  {
    Error_Handler();
 80006ca:	f000 fa59 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2400016c 	.word	0x2400016c
 80006d8:	52001000 	.word	0x52001000

080006dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08e      	sub	sp, #56	; 0x38
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */
  initLtdcClocks();
 80006e2:	f000 fa53 	bl	8000b8c <initLtdcClocks>
  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	2234      	movs	r2, #52	; 0x34
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f022 ffd5 	bl	802369c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80006f2:	4b3a      	ldr	r3, [pc, #232]	; (80007dc <MX_LTDC_Init+0x100>)
 80006f4:	4a3a      	ldr	r2, [pc, #232]	; (80007e0 <MX_LTDC_Init+0x104>)
 80006f6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <MX_LTDC_Init+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80006fe:	4b37      	ldr	r3, [pc, #220]	; (80007dc <MX_LTDC_Init+0x100>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <MX_LTDC_Init+0x100>)
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800070a:	4b34      	ldr	r3, [pc, #208]	; (80007dc <MX_LTDC_Init+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <MX_LTDC_Init+0x100>)
 8000712:	2228      	movs	r2, #40	; 0x28
 8000714:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000716:	4b31      	ldr	r3, [pc, #196]	; (80007dc <MX_LTDC_Init+0x100>)
 8000718:	2209      	movs	r2, #9
 800071a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800071c:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <MX_LTDC_Init+0x100>)
 800071e:	2235      	movs	r2, #53	; 0x35
 8000720:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000722:	4b2e      	ldr	r3, [pc, #184]	; (80007dc <MX_LTDC_Init+0x100>)
 8000724:	220b      	movs	r2, #11
 8000726:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <MX_LTDC_Init+0x100>)
 800072a:	f240 2215 	movw	r2, #533	; 0x215
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000730:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_LTDC_Init+0x100>)
 8000732:	f240 121b 	movw	r2, #283	; 0x11b
 8000736:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000738:	4b28      	ldr	r3, [pc, #160]	; (80007dc <MX_LTDC_Init+0x100>)
 800073a:	f240 2235 	movw	r2, #565	; 0x235
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_LTDC_Init+0x100>)
 8000742:	f240 121d 	movw	r2, #285	; 0x11d
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <MX_LTDC_Init+0x100>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000750:	4b22      	ldr	r3, [pc, #136]	; (80007dc <MX_LTDC_Init+0x100>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000758:	4b20      	ldr	r3, [pc, #128]	; (80007dc <MX_LTDC_Init+0x100>)
 800075a:	2200      	movs	r2, #0
 800075c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000760:	481e      	ldr	r0, [pc, #120]	; (80007dc <MX_LTDC_Init+0x100>)
 8000762:	f00d feef 	bl	800e544 <HAL_LTDC_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_LTDC_Init+0x94>
  {
    Error_Handler();
 800076c:	f000 fa08 	bl	8000b80 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000774:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000778:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800077e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000782:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000784:	2302      	movs	r3, #2
 8000786:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000788:	23ff      	movs	r3, #255	; 0xff
 800078a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000794:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000796:	2305      	movs	r3, #5
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 800079a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 800079e:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80007a0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80007a6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	2200      	movs	r2, #0
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_LTDC_Init+0x100>)
 80007c6:	f00e f845 	bl	800e854 <HAL_LTDC_ConfigLayer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_LTDC_Init+0xf8>
  {
    Error_Handler();
 80007d0:	f000 f9d6 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3738      	adds	r7, #56	; 0x38
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	240001d4 	.word	0x240001d4
 80007e0:	50001000 	.word	0x50001000

080007e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <MX_QUADSPI_Init+0x50>)
 80007ea:	4a13      	ldr	r2, [pc, #76]	; (8000838 <MX_QUADSPI_Init+0x54>)
 80007ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_QUADSPI_Init+0x50>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <MX_QUADSPI_Init+0x50>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <MX_QUADSPI_Init+0x50>)
 80007fc:	2210      	movs	r2, #16
 80007fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 26;
 8000800:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <MX_QUADSPI_Init+0x50>)
 8000802:	221a      	movs	r2, #26
 8000804:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_3_CYCLE;
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <MX_QUADSPI_Init+0x50>)
 8000808:	f44f 7200 	mov.w	r2, #512	; 0x200
 800080c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800080e:	4b09      	ldr	r3, [pc, #36]	; (8000834 <MX_QUADSPI_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <MX_QUADSPI_Init+0x50>)
 8000816:	2240      	movs	r2, #64	; 0x40
 8000818:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800081a:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_QUADSPI_Init+0x50>)
 800081c:	f00e fbe8 	bl	800eff0 <HAL_QSPI_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_QUADSPI_Init+0x46>
  {
    Error_Handler();
 8000826:	f000 f9ab 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */
  initBspQuadSpi(&Error_Handler);
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_QUADSPI_Init+0x58>)
 800082c:	f000 fa22 	bl	8000c74 <initBspQuadSpi>
  /* USER CODE END QUADSPI_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2400027c 	.word	0x2400027c
 8000838:	52005000 	.word	0x52005000
 800083c:	08000b81 	.word	0x08000b81

08000840 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b088      	sub	sp, #32
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000846:	1d3b      	adds	r3, r7, #4
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
 8000854:	615a      	str	r2, [r3, #20]
 8000856:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8000858:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_FMC_Init+0xa0>)
 800085a:	4a22      	ldr	r2, [pc, #136]	; (80008e4 <MX_FMC_Init+0xa4>)
 800085c:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000860:	2201      	movs	r2, #1
 8000862:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000864:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_FMC_Init+0xa0>)
 800086c:	2204      	movs	r2, #4
 800086e:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000870:	4b1b      	ldr	r3, [pc, #108]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000872:	2210      	movs	r2, #16
 8000874:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000878:	2240      	movs	r2, #64	; 0x40
 800087a:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_FMC_Init+0xa0>)
 800087e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000882:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_FMC_Init+0xa0>)
 800088c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000890:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_FMC_Init+0xa0>)
 8000894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_FMC_Init+0xa0>)
 800089c:	2200      	movs	r2, #0
 800089e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80008a4:	2306      	movs	r3, #6
 80008a6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80008a8:	2304      	movs	r3, #4
 80008aa:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 80008ac:	2306      	movs	r3, #6
 80008ae:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 80008b0:	2302      	movs	r3, #2
 80008b2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_FMC_Init+0xa0>)
 80008c2:	f011 fbb3 	bl	801202c <HAL_SDRAM_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80008cc:	f000 f958 	bl	8000b80 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
  initBspSdRam(&Error_Handler);
 80008d0:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_FMC_Init+0xa8>)
 80008d2:	f000 f9f0 	bl	8000cb6 <initBspSdRam>
  /* USER CODE END FMC_Init 2 */
}
 80008d6:	bf00      	nop
 80008d8:	3720      	adds	r7, #32
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	240002c8 	.word	0x240002c8
 80008e4:	52004140 	.word	0x52004140
 80008e8:	08000b81 	.word	0x08000b81

080008ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	; 0x40
 80008f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000902:	4b72      	ldr	r3, [pc, #456]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000908:	4a70      	ldr	r2, [pc, #448]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800090a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000912:	4b6e      	ldr	r3, [pc, #440]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
 800091e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000920:	4b6a      	ldr	r3, [pc, #424]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000926:	4a69      	ldr	r2, [pc, #420]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800092c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000930:	4b66      	ldr	r3, [pc, #408]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800093a:	627b      	str	r3, [r7, #36]	; 0x24
 800093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800093e:	4b63      	ldr	r3, [pc, #396]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000944:	4a61      	ldr	r2, [pc, #388]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800094e:	4b5f      	ldr	r3, [pc, #380]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000958:	623b      	str	r3, [r7, #32]
 800095a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800095c:	4b5b      	ldr	r3, [pc, #364]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a5a      	ldr	r2, [pc, #360]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000964:	f043 0310 	orr.w	r3, r3, #16
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b57      	ldr	r3, [pc, #348]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0310 	and.w	r3, r3, #16
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b54      	ldr	r3, [pc, #336]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b50      	ldr	r3, [pc, #320]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	61bb      	str	r3, [r7, #24]
 8000996:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000998:	4b4c      	ldr	r3, [pc, #304]	; (8000acc <MX_GPIO_Init+0x1e0>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a4b      	ldr	r2, [pc, #300]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b48      	ldr	r3, [pc, #288]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b45      	ldr	r3, [pc, #276]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a43      	ldr	r2, [pc, #268]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b3d      	ldr	r3, [pc, #244]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009da:	4a3c      	ldr	r2, [pc, #240]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009e4:	4b39      	ldr	r3, [pc, #228]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009f2:	4b36      	ldr	r3, [pc, #216]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	4a34      	ldr	r2, [pc, #208]	; (8000acc <MX_GPIO_Init+0x1e0>)
 80009fa:	f043 0320 	orr.w	r3, r3, #32
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a02:	4b32      	ldr	r3, [pc, #200]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a20:	4b2a      	ldr	r3, [pc, #168]	; (8000acc <MX_GPIO_Init+0x1e0>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VSYNC_FREQ_Pin|RENDER_TIME_Pin, GPIO_PIN_RESET);
 8000a2e:	2200      	movs	r2, #0
 8000a30:	21c0      	movs	r1, #192	; 0xc0
 8000a32:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <MX_GPIO_Init+0x1e4>)
 8000a34:	f00c feca 	bl	800d7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, GPIO_PIN_RESET);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2108      	movs	r1, #8
 8000a3c:	4825      	ldr	r0, [pc, #148]	; (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000a3e:	f00c fec5 	bl	800d7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4824      	ldr	r0, [pc, #144]	; (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000a48:	f00c fec0 	bl	800d7cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VSYNC_FREQ_Pin RENDER_TIME_Pin */
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin|RENDER_TIME_Pin;
 8000a4c:	23c0      	movs	r3, #192	; 0xc0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a60:	4619      	mov	r1, r3
 8000a62:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <MX_GPIO_Init+0x1e4>)
 8000a64:	f00c fbf8 	bl	800d258 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a82:	4619      	mov	r1, r3
 8000a84:	4814      	ldr	r0, [pc, #80]	; (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000a86:	f00c fbe7 	bl	800d258 <HAL_GPIO_Init>

  /*Configure GPIO pin : FRAME_RATE_Pin */
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_GPIO_Init+0x1e8>)
 8000aa2:	f00c fbd9 	bl	800d258 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCU_ACTIVE_Pin */
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
 8000aa6:	2340      	movs	r3, #64	; 0x40
 8000aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000aba:	4619      	mov	r1, r3
 8000abc:	4806      	ldr	r0, [pc, #24]	; (8000ad8 <MX_GPIO_Init+0x1ec>)
 8000abe:	f00c fbcb 	bl	800d258 <HAL_GPIO_Init>

}
 8000ac2:	bf00      	nop
 8000ac4:	3740      	adds	r7, #64	; 0x40
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	58020400 	.word	0x58020400
 8000ad4:	58021800 	.word	0x58021800
 8000ad8:	58020000 	.word	0x58020000

08000adc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f006 f81f 	bl	8006b28 <osDelay>
 8000aea:	e7fb      	b.n	8000ae4 <StartDefaultTask+0x8>

08000aec <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000af2:	463b      	mov	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000afe:	f00c f8d1 	bl	800cca4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b0a:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8000b0e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1MB;
 8000b10:	2313      	movs	r3, #19
 8000b12:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000b14:	2300      	movs	r3, #0
 8000b16:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b30:	463b      	mov	r3, r7
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c f8ee 	bl	800cd14 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x90000000;
 8000b3c:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
 8000b40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b42:	231a      	movs	r3, #26
 8000b44:	723b      	strb	r3, [r7, #8]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f00c f8e3 	bl	800cd14 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b4e:	2004      	movs	r0, #4
 8000b50:	f00c f8c0 	bl	800ccd4 <HAL_MPU_Enable>

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f00b ff5b 	bl	800ca28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40001000 	.word	0x40001000

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <Error_Handler+0x8>
	...

08000b8c <initLtdcClocks>:

/**
 * @brief initLtdcClocks initialize LTDC clocks
 */
void initLtdcClocks(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0
   // enable the LTDC and DMA2D clocks
   __HAL_RCC_LTDC_CLK_ENABLE();
 8000b92:	4b36      	ldr	r3, [pc, #216]	; (8000c6c <initLtdcClocks+0xe0>)
 8000b94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000b98:	4a34      	ldr	r2, [pc, #208]	; (8000c6c <initLtdcClocks+0xe0>)
 8000b9a:	f043 0308 	orr.w	r3, r3, #8
 8000b9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000ba2:	4b32      	ldr	r3, [pc, #200]	; (8000c6c <initLtdcClocks+0xe0>)
 8000ba4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	69bb      	ldr	r3, [r7, #24]

   // enable GPIOs clock
   __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a2d      	ldr	r2, [pc, #180]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
   __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <initLtdcClocks+0xe0>)
 8000be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	693b      	ldr	r3, [r7, #16]
   __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bec:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bfc:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <initLtdcClocks+0xe0>)
 8000bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
   __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	4a16      	ldr	r2, [pc, #88]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c1a:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	68bb      	ldr	r3, [r7, #8]
   __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c28:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <initLtdcClocks+0xe0>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

   // LCD_DISP pin has to be manually controlled
   GPIO_InitTypeDef gpio_init_structure;
   gpio_init_structure.Pin = GPIO_PIN_7;
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	61fb      	str	r3, [r7, #28]
   gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
   HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4806      	ldr	r0, [pc, #24]	; (8000c70 <initLtdcClocks+0xe4>)
 8000c56:	f00c faff 	bl	800d258 <HAL_GPIO_Init>

   // assert display enable LCD_DISP pin
   HAL_GPIO_WritePin(GPIOD, GPIO_PIN_7, GPIO_PIN_SET);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <initLtdcClocks+0xe4>)
 8000c60:	f00c fdb4 	bl	800d7cc <HAL_GPIO_WritePin>
}
 8000c64:	bf00      	nop
 8000c66:	3730      	adds	r7, #48	; 0x30
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020c00 	.word	0x58020c00

08000c74 <initBspQuadSpi>:
/**
 * @brief initBspQuadSpi initialize QSPI via BSP
 * @param error_handler callback to error handler
 */
void initBspQuadSpi(void (*error_handler)())
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
   BSP_QSPI_Init_t init;

   init.InterfaceMode = MT25TL01G_QPI_MODE;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	733b      	strb	r3, [r7, #12]
   init.TransferRate = MT25TL01G_DTR_TRANSFER;
 8000c80:	2301      	movs	r3, #1
 8000c82:	737b      	strb	r3, [r7, #13]
   init.DualFlashMode = MT25TL01G_DUALFLASH_ENABLE;
 8000c84:	2340      	movs	r3, #64	; 0x40
 8000c86:	73bb      	strb	r3, [r7, #14]

   if (BSP_QSPI_Init(0, &init) != BSP_ERROR_NONE)
 8000c88:	f107 030c 	add.w	r3, r7, #12
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f00a fe48 	bl	800b924 <BSP_QSPI_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <initBspQuadSpi+0x2a>
   {
      error_handler();
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4798      	blx	r3
   }

   if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f00a ff1a 	bl	800bad8 <BSP_QSPI_EnableMemoryMappedMode>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <initBspQuadSpi+0x3a>
   {
      error_handler();
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4798      	blx	r3
   }
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <initBspSdRam>:
/**
 * @brief initBspSdRam initialize SDRAM/FMC via BSP
 * @param error_handler callback to error handler
 */
void initBspSdRam(void (*error_handler)())
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	6078      	str	r0, [r7, #4]
   BSP_SDRAM_DeInit(0);
 8000cbe:	2000      	movs	r0, #0
 8000cc0:	f00b fa78 	bl	800c1b4 <BSP_SDRAM_DeInit>

   if (BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f00b fa19 	bl	800c0fc <BSP_SDRAM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <initBspSdRam+0x1e>
   {
      error_handler();
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4798      	blx	r3
   }
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x38>)
 8000ce4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_MspInit+0x38>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_MspInit+0x38>)
 8000cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	210f      	movs	r1, #15
 8000d04:	f06f 0001 	mvn.w	r0, #1
 8000d08:	f00b ff96 	bl	800cc38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <HAL_CRC_MspInit+0x3c>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d10e      	bne.n	8000d48 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_CRC_MspInit+0x40>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <HAL_CRC_MspInit+0x40>)
 8000d32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <HAL_CRC_MspInit+0x40>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	58024c00 	.word	0x58024c00
 8000d58:	58024400 	.word	0x58024400

08000d5c <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <HAL_DMA2D_MspInit+0x48>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d116      	bne.n	8000d9c <HAL_DMA2D_MspInit+0x40>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_DMA2D_MspInit+0x4c>)
 8000d70:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d74:	4a0c      	ldr	r2, [pc, #48]	; (8000da8 <HAL_DMA2D_MspInit+0x4c>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000d7e:	4b0a      	ldr	r3, [pc, #40]	; (8000da8 <HAL_DMA2D_MspInit+0x4c>)
 8000d80:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2105      	movs	r1, #5
 8000d90:	205a      	movs	r0, #90	; 0x5a
 8000d92:	f00b ff51 	bl	800cc38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d96:	205a      	movs	r0, #90	; 0x5a
 8000d98:	f00b ff68 	bl	800cc6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	52001000 	.word	0x52001000
 8000da8:	58024400 	.word	0x58024400

08000dac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b0be      	sub	sp, #248	; 0xf8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc4:	f107 0320 	add.w	r3, r7, #32
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f022 fc65 	bl	802369c <memset>
  if(hltdc->Instance==LTDC)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a69      	ldr	r2, [pc, #420]	; (8000f7c <HAL_LTDC_MspInit+0x1d0>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	f040 80cb 	bne.w	8000f74 <HAL_LTDC_MspInit+0x1c8>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000dde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 8000dea:	2305      	movs	r3, #5
 8000dec:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 160;
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 83;
 8000dfa:	2353      	movs	r3, #83	; 0x53
 8000dfc:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8000dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e02:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f010 f861 	bl	8010ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <HAL_LTDC_MspInit+0x74>
    {
      Error_Handler();
 8000e1c:	f7ff feb0 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000e20:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8000e30:	4b53      	ldr	r3, [pc, #332]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e32:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8000e36:	f003 0308 	and.w	r3, r3, #8
 8000e3a:	61fb      	str	r3, [r7, #28]
 8000e3c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8000e3e:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a4e      	ldr	r2, [pc, #312]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b4c      	ldr	r3, [pc, #304]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e5c:	4b48      	ldr	r3, [pc, #288]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a47      	ldr	r2, [pc, #284]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e80:	4a3f      	ldr	r2, [pc, #252]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8a:	4b3d      	ldr	r3, [pc, #244]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9e:	4a38      	ldr	r2, [pc, #224]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea8:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <HAL_LTDC_MspInit+0x1d4>)
 8000eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000eb6:	23fc      	movs	r3, #252	; 0xfc
 8000eb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ece:	230e      	movs	r3, #14
 8000ed0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000ed4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482a      	ldr	r0, [pc, #168]	; (8000f84 <HAL_LTDC_MspInit+0x1d8>)
 8000edc:	f00c f9bc 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000ee0:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000ee4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000efa:	230e      	movs	r3, #14
 8000efc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f04:	4619      	mov	r1, r3
 8000f06:	4820      	ldr	r0, [pc, #128]	; (8000f88 <HAL_LTDC_MspInit+0x1dc>)
 8000f08:	f00c f9a6 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000f0c:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000f10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f26:	230e      	movs	r3, #14
 8000f28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000f2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <HAL_LTDC_MspInit+0x1e0>)
 8000f34:	f00c f990 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f52:	230e      	movs	r3, #14
 8000f54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <HAL_LTDC_MspInit+0x1e4>)
 8000f60:	f00c f97a 	bl	800d258 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2105      	movs	r1, #5
 8000f68:	2058      	movs	r0, #88	; 0x58
 8000f6a:	f00b fe65 	bl	800cc38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f6e:	2058      	movs	r0, #88	; 0x58
 8000f70:	f00b fe7c 	bl	800cc6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	37f8      	adds	r7, #248	; 0xf8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	50001000 	.word	0x50001000
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58022800 	.word	0x58022800
 8000f88:	58022000 	.word	0x58022000
 8000f8c:	58022400 	.word	0x58022400
 8000f90:	58021c00 	.word	0x58021c00

08000f94 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b0be      	sub	sp, #248	; 0xf8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0320 	add.w	r3, r7, #32
 8000fb0:	22c0      	movs	r2, #192	; 0xc0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f022 fb71 	bl	802369c <memset>
  if(hqspi->Instance==QUADSPI)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a77      	ldr	r2, [pc, #476]	; (800119c <HAL_QSPI_MspInit+0x208>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	f040 80e7 	bne.w	8001194 <HAL_QSPI_MspInit+0x200>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000fc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd6:	f107 0320 	add.w	r3, r7, #32
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00f ff7c 	bl	8010ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000fe6:	f7ff fdcb 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8000fec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000ff0:	4a6b      	ldr	r2, [pc, #428]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8000ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff6:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000ffa:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8000ffc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001004:	61fb      	str	r3, [r7, #28]
 8001006:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001008:	4b65      	ldr	r3, [pc, #404]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100e:	4a64      	ldr	r2, [pc, #400]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001014:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001018:	4b61      	ldr	r3, [pc, #388]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b5e      	ldr	r3, [pc, #376]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102c:	4a5c      	ldr	r2, [pc, #368]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 800102e:	f043 0320 	orr.w	r3, r3, #32
 8001032:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001036:	4b5a      	ldr	r3, [pc, #360]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001044:	4b56      	ldr	r3, [pc, #344]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104a:	4a55      	ldr	r2, [pc, #340]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001054:	4b52      	ldr	r3, [pc, #328]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001062:	4b4f      	ldr	r3, [pc, #316]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	4a4d      	ldr	r2, [pc, #308]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 800106a:	f043 0308 	orr.w	r3, r3, #8
 800106e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_QSPI_MspInit+0x20c>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001080:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800109a:	2309      	movs	r3, #9
 800109c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a4:	4619      	mov	r1, r3
 80010a6:	483f      	ldr	r0, [pc, #252]	; (80011a4 <HAL_QSPI_MspInit+0x210>)
 80010a8:	f00c f8d6 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ac:	2340      	movs	r3, #64	; 0x40
 80010ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80010c4:	230a      	movs	r3, #10
 80010c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010ce:	4619      	mov	r1, r3
 80010d0:	4834      	ldr	r0, [pc, #208]	; (80011a4 <HAL_QSPI_MspInit+0x210>)
 80010d2:	f00c f8c1 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80010d6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ea:	2303      	movs	r3, #3
 80010ec:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010f0:	2309      	movs	r3, #9
 80010f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010fa:	4619      	mov	r1, r3
 80010fc:	482a      	ldr	r0, [pc, #168]	; (80011a8 <HAL_QSPI_MspInit+0x214>)
 80010fe:	f00c f8ab 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001102:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800111c:	230a      	movs	r3, #10
 800111e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001122:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001126:	4619      	mov	r1, r3
 8001128:	481f      	ldr	r0, [pc, #124]	; (80011a8 <HAL_QSPI_MspInit+0x214>)
 800112a:	f00c f895 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800112e:	230c      	movs	r3, #12
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001146:	2309      	movs	r3, #9
 8001148:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800114c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001150:	4619      	mov	r1, r3
 8001152:	4816      	ldr	r0, [pc, #88]	; (80011ac <HAL_QSPI_MspInit+0x218>)
 8001154:	f00c f880 	bl	800d258 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001158:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800115c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001172:	2309      	movs	r3, #9
 8001174:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800117c:	4619      	mov	r1, r3
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_QSPI_MspInit+0x21c>)
 8001180:	f00c f86a 	bl	800d258 <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 5, 0);
 8001184:	2200      	movs	r2, #0
 8001186:	2105      	movs	r1, #5
 8001188:	205c      	movs	r0, #92	; 0x5c
 800118a:	f00b fd55 	bl	800cc38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800118e:	205c      	movs	r0, #92	; 0x5c
 8001190:	f00b fd6c 	bl	800cc6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	37f8      	adds	r7, #248	; 0xf8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	52005000 	.word	0x52005000
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58021800 	.word	0x58021800
 80011a8:	58021400 	.word	0x58021400
 80011ac:	58021c00 	.word	0x58021c00
 80011b0:	58020c00 	.word	0x58020c00

080011b4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0b8      	sub	sp, #224	; 0xe0
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80011ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80011ca:	4b51      	ldr	r3, [pc, #324]	; (8001310 <HAL_FMC_MspInit+0x15c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 8099 	bne.w	8001306 <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 80011d4:	4b4e      	ldr	r3, [pc, #312]	; (8001310 <HAL_FMC_MspInit+0x15c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	22c0      	movs	r2, #192	; 0xc0
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f022 fa5a 	bl	802369c <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80011e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00f fe6b 	bl	8010ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8001208:	f7ff fcba 	bl	8000b80 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800120c:	4b41      	ldr	r3, [pc, #260]	; (8001314 <HAL_FMC_MspInit+0x160>)
 800120e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001212:	4a40      	ldr	r2, [pc, #256]	; (8001314 <HAL_FMC_MspInit+0x160>)
 8001214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001218:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800121c:	4b3d      	ldr	r3, [pc, #244]	; (8001314 <HAL_FMC_MspInit+0x160>)
 800121e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800122a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800122e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001244:	230c      	movs	r3, #12
 8001246:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800124e:	4619      	mov	r1, r3
 8001250:	4831      	ldr	r0, [pc, #196]	; (8001318 <HAL_FMC_MspInit+0x164>)
 8001252:	f00c f801 	bl	800d258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001256:	f248 1333 	movw	r3, #33075	; 0x8133
 800125a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126a:	2303      	movs	r3, #3
 800126c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001270:	230c      	movs	r3, #12
 8001272:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001276:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800127a:	4619      	mov	r1, r3
 800127c:	4827      	ldr	r0, [pc, #156]	; (800131c <HAL_FMC_MspInit+0x168>)
 800127e:	f00b ffeb 	bl	800d258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001282:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800129c:	230c      	movs	r3, #12
 800129e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012a2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012a6:	4619      	mov	r1, r3
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <HAL_FMC_MspInit+0x16c>)
 80012aa:	f00b ffd5 	bl	800d258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80012ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80012b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c8:	230c      	movs	r3, #12
 80012ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012d2:	4619      	mov	r1, r3
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <HAL_FMC_MspInit+0x170>)
 80012d6:	f00b ffbf 	bl	800d258 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012da:	23e0      	movs	r3, #224	; 0xe0
 80012dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012f2:	230c      	movs	r3, #12
 80012f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80012f8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80012fc:	4619      	mov	r1, r3
 80012fe:	480a      	ldr	r0, [pc, #40]	; (8001328 <HAL_FMC_MspInit+0x174>)
 8001300:	f00b ffaa 	bl	800d258 <HAL_GPIO_Init>
 8001304:	e000      	b.n	8001308 <HAL_FMC_MspInit+0x154>
    return;
 8001306:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001308:	37e0      	adds	r7, #224	; 0xe0
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	24000304 	.word	0x24000304
 8001314:	58024400 	.word	0x58024400
 8001318:	58021000 	.word	0x58021000
 800131c:	58021800 	.word	0x58021800
 8001320:	58020c00 	.word	0x58020c00
 8001324:	58021400 	.word	0x58021400
 8001328:	58021c00 	.word	0x58021c00

0800132c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001334:	f7ff ff3e 	bl	80011b4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_FMC_MspDeInit>:

static uint32_t FMC_DeInitialized = 0;

static void HAL_FMC_MspDeInit(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_FMC_MspDeInit+0x58>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d123      	bne.n	8001394 <HAL_FMC_MspDeInit+0x54>
    return;
  }
  FMC_DeInitialized = 1;
 800134c:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_FMC_MspDeInit+0x58>)
 800134e:	2201      	movs	r2, #1
 8001350:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_DISABLE();
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_FMC_MspDeInit+0x5c>)
 8001354:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001358:	4a10      	ldr	r2, [pc, #64]	; (800139c <HAL_FMC_MspDeInit+0x5c>)
 800135a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800135e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001362:	f64f 7183 	movw	r1, #65411	; 0xff83
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <HAL_FMC_MspDeInit+0x60>)
 8001368:	f00c f926 	bl	800d5b8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14);

  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800136c:	f248 1133 	movw	r1, #33075	; 0x8133
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <HAL_FMC_MspDeInit+0x64>)
 8001372:	f00c f921 	bl	800d5b8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_0|GPIO_PIN_1);

  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001376:	f24c 7103 	movw	r1, #50947	; 0xc703
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_FMC_MspDeInit+0x68>)
 800137c:	f00c f91c 	bl	800d5b8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8);

  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001380:	f64f 013f 	movw	r1, #63551	; 0xf83f
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <HAL_FMC_MspDeInit+0x6c>)
 8001386:	f00c f917 	bl	800d5b8 <HAL_GPIO_DeInit>
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11);

  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800138a:	21e0      	movs	r1, #224	; 0xe0
 800138c:	4808      	ldr	r0, [pc, #32]	; (80013b0 <HAL_FMC_MspDeInit+0x70>)
 800138e:	f00c f913 	bl	800d5b8 <HAL_GPIO_DeInit>
 8001392:	e000      	b.n	8001396 <HAL_FMC_MspDeInit+0x56>
    return;
 8001394:	bf00      	nop

  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}
 8001396:	bd80      	pop	{r7, pc}
 8001398:	24000308 	.word	0x24000308
 800139c:	58024400 	.word	0x58024400
 80013a0:	58021000 	.word	0x58021000
 80013a4:	58021800 	.word	0x58021800
 80013a8:	58020c00 	.word	0x58020c00
 80013ac:	58021400 	.word	0x58021400
 80013b0:	58021c00 	.word	0x58021c00

080013b4 <HAL_SDRAM_MspDeInit>:

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspDeInit 0 */

  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
 80013bc:	f7ff ffc0 	bl	8001340 <HAL_FMC_MspDeInit>
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b090      	sub	sp, #64	; 0x40
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b0f      	cmp	r3, #15
 80013d4:	d827      	bhi.n	8001426 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80013d6:	2200      	movs	r2, #0
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	2036      	movs	r0, #54	; 0x36
 80013dc:	f00b fc2c 	bl	800cc38 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013e0:	2036      	movs	r0, #54	; 0x36
 80013e2:	f00b fc43 	bl	800cc6c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80013e6:	4a29      	ldr	r2, [pc, #164]	; (800148c <HAL_InitTick+0xc4>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <HAL_InitTick+0xc8>)
 80013ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_InitTick+0xc8>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013fc:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_InitTick+0xc8>)
 80013fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	60fb      	str	r3, [r7, #12]
 8001408:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800140a:	f107 0210 	add.w	r2, r7, #16
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f00f fd1d 	bl	8010e54 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800141e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001420:	2b00      	cmp	r3, #0
 8001422:	d106      	bne.n	8001432 <HAL_InitTick+0x6a>
 8001424:	e001      	b.n	800142a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e02b      	b.n	8001482 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800142a:	f00f fce7 	bl	8010dfc <HAL_RCC_GetPCLK1Freq>
 800142e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001430:	e004      	b.n	800143c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001432:	f00f fce3 	bl	8010dfc <HAL_RCC_GetPCLK1Freq>
 8001436:	4603      	mov	r3, r0
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800143c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800143e:	4a15      	ldr	r2, [pc, #84]	; (8001494 <HAL_InitTick+0xcc>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9b      	lsrs	r3, r3, #18
 8001446:	3b01      	subs	r3, #1
 8001448:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800144a:	4b13      	ldr	r3, [pc, #76]	; (8001498 <HAL_InitTick+0xd0>)
 800144c:	4a13      	ldr	r2, [pc, #76]	; (800149c <HAL_InitTick+0xd4>)
 800144e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_InitTick+0xd0>)
 8001452:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001456:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001458:	4a0f      	ldr	r2, [pc, #60]	; (8001498 <HAL_InitTick+0xd0>)
 800145a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800145c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_InitTick+0xd0>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001464:	4b0c      	ldr	r3, [pc, #48]	; (8001498 <HAL_InitTick+0xd0>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800146a:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_InitTick+0xd0>)
 800146c:	f010 fe93 	bl	8012196 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d104      	bne.n	8001480 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001476:	4808      	ldr	r0, [pc, #32]	; (8001498 <HAL_InitTick+0xd0>)
 8001478:	f010 feee 	bl	8012258 <HAL_TIM_Base_Start_IT>
 800147c:	4603      	mov	r3, r0
 800147e:	e000      	b.n	8001482 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
}
 8001482:	4618      	mov	r0, r3
 8001484:	3740      	adds	r7, #64	; 0x40
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	24000048 	.word	0x24000048
 8001490:	58024400 	.word	0x58024400
 8001494:	431bde83 	.word	0x431bde83
 8001498:	2400030c 	.word	0x2400030c
 800149c:	40001000 	.word	0x40001000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014d0:	4802      	ldr	r0, [pc, #8]	; (80014dc <TIM6_DAC_IRQHandler+0x10>)
 80014d2:	f010 ff39 	bl	8012348 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2400030c 	.word	0x2400030c

080014e0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <LTDC_IRQHandler+0x10>)
 80014e6:	f00d f8fd 	bl	800e6e4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	240001d4 	.word	0x240001d4

080014f4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA2D_IRQHandler+0x10>)
 80014fa:	f00b fd9d 	bl	800d038 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2400016c 	.word	0x2400016c

08001508 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <QUADSPI_IRQHandler+0x10>)
 800150e:	f00d fde3 	bl	800f0d8 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	2400027c 	.word	0x2400027c

0800151c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	return 1;
 8001520:	2301      	movs	r3, #1
}
 8001522:	4618      	mov	r0, r3
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <_kill>:

int _kill(int pid, int sig)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001536:	f021 ff5d 	bl	80233f4 <__errno>
 800153a:	4603      	mov	r3, r0
 800153c:	2216      	movs	r2, #22
 800153e:	601a      	str	r2, [r3, #0]
	return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <_exit>:

void _exit (int status)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff ffe7 	bl	800152c <_kill>
	while (1) {}		/* Make sure we hang here */
 800155e:	e7fe      	b.n	800155e <_exit+0x12>

08001560 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	e00a      	b.n	8001588 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001572:	f3af 8000 	nop.w
 8001576:	4601      	mov	r1, r0
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	1c5a      	adds	r2, r3, #1
 800157c:	60ba      	str	r2, [r7, #8]
 800157e:	b2ca      	uxtb	r2, r1
 8001580:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	3301      	adds	r3, #1
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	429a      	cmp	r2, r3
 800158e:	dbf0      	blt.n	8001572 <_read+0x12>
	}

return len;
 8001590:	687b      	ldr	r3, [r7, #4]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	60f8      	str	r0, [r7, #12]
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	e009      	b.n	80015c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	1c5a      	adds	r2, r3, #1
 80015b0:	60ba      	str	r2, [r7, #8]
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf1      	blt.n	80015ac <_write+0x12>
	}
	return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_close>:

int _close(int file)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
	return -1;
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015fa:	605a      	str	r2, [r3, #4]
	return 0;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <_isatty>:

int _isatty(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	return 1;
 8001612:	2301      	movs	r3, #1
}
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	return 0;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
	...

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f021 fec2 	bl	80233f4 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24080000 	.word	0x24080000
 800169c:	00001000 	.word	0x00001000
 80016a0:	24000358 	.word	0x24000358
 80016a4:	2400b1d8 	.word	0x2400b1d8

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f008 fd4e 	bl	800a14c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f021 ff9b 	bl	8023610 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7fe fe51 	bl	8000380 <main>
  bx  lr
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e8:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 80016ec:	080264f8 	.word	0x080264f8
  ldr r2, =_sbss
 80016f0:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80016f4:	2400b1d8 	.word	0x2400b1d8

080016f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>

080016fa <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800170c:	f001 fd22 	bl	8003154 <touchgfx_init>
}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}

08001714 <TouchGFX_Task>:

/**
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
 800171c:	f001 fd44 	bl	80031a8 <touchgfx_taskEntry>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
    {
 8001730:	4a04      	ldr	r2, [pc, #16]	; (8001744 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	601a      	str	r2, [r3, #0]
    }
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4618      	mov	r0, r3
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	080252c8 	.word	0x080252c8

08001748 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
    }
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ffe9 	bl	8001728 <_ZN8touchgfx15TouchControllerD1Ev>
 8001756:	2104      	movs	r1, #4
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f021 fdea 	bl	8023332 <_ZdlPvj>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4618      	mov	r0, r3
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}

08001768 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h745i_touchcontroller.hpp"

void STM32TouchController::init()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
    STM32H745ITouchController::init();
 8001770:	f000 fb50 	bl	8001e14 <_ZN25STM32H745ITouchController4initEv>
}
 8001774:	bf00      	nop
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return STM32H745ITouchController::sampleTouch(x, y);
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f000 fb66 	bl	8001e5c <_ZN25STM32H745ITouchController11sampleTouchERlS0_>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_ZN20STM32TouchControllerD1Ev+0x20>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff ffbb 	bl	8001728 <_ZN8touchgfx15TouchControllerD1Ev>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4618      	mov	r0, r3
 80017b6:	3708      	adds	r7, #8
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	080252b0 	.word	0x080252b0

080017c0 <_ZN20STM32TouchControllerD0Ev>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ffe7 	bl	800179c <_ZN20STM32TouchControllerD1Ev>
 80017ce:	2104      	movs	r1, #4
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f021 fdae 	bl	8023332 <_ZdlPvj>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d847      	bhi.n	8001880 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
 80017f0:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 80017f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f6:	bf00      	nop
 80017f8:	08001809 	.word	0x08001809
 80017fc:	08001827 	.word	0x08001827
 8001800:	08001845 	.word	0x08001845
 8001804:	08001863 	.word	0x08001863
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	4a1f      	ldr	r2, [pc, #124]	; (8001888 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	2b00      	cmp	r3, #0
 8001812:	bf0c      	ite	eq
 8001814:	2301      	moveq	r3, #1
 8001816:	2300      	movne	r3, #0
 8001818:	b2db      	uxtb	r3, r3
 800181a:	461a      	mov	r2, r3
 800181c:	2140      	movs	r1, #64	; 0x40
 800181e:	481b      	ldr	r0, [pc, #108]	; (800188c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 8001820:	f00b ffd4 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 8001824:	e02c      	b.n	8001880 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	4a17      	ldr	r2, [pc, #92]	; (8001888 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 800182a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf0c      	ite	eq
 8001832:	2301      	moveq	r3, #1
 8001834:	2300      	movne	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	2180      	movs	r1, #128	; 0x80
 800183c:	4813      	ldr	r0, [pc, #76]	; (800188c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xac>)
 800183e:	f00b ffc5 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 8001842:	e01d      	b.n	8001880 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a10      	ldr	r2, [pc, #64]	; (8001888 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8001848:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	2108      	movs	r1, #8
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb0>)
 800185c:	f00b ffb6 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 8001860:	e00e      	b.n	8001880 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	4a08      	ldr	r2, [pc, #32]	; (8001888 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xa8>)
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	2b00      	cmp	r3, #0
 800186c:	bf0c      	ite	eq
 800186e:	2301      	moveq	r3, #1
 8001870:	2300      	movne	r3, #0
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461a      	mov	r2, r3
 8001876:	2140      	movs	r1, #64	; 0x40
 8001878:	4806      	ldr	r0, [pc, #24]	; (8001894 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xb4>)
 800187a:	f00b ffa7 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 800187e:	bf00      	nop
    }
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	2400035c 	.word	0x2400035c
 800188c:	58020400 	.word	0x58020400
 8001890:	58021800 	.word	0x58021800
 8001894:	58020000 	.word	0x58020000

08001898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	d847      	bhi.n	8001938 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
 80018a8:	a201      	add	r2, pc, #4	; (adr r2, 80018b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018c1 	.word	0x080018c1
 80018b4:	080018df 	.word	0x080018df
 80018b8:	080018fd 	.word	0x080018fd
 80018bc:	0800191b 	.word	0x0800191b
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4a1f      	ldr	r2, [pc, #124]	; (8001940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x38>
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x3a>
 80018d0:	2300      	movs	r3, #0
 80018d2:	461a      	mov	r2, r3
 80018d4:	2140      	movs	r1, #64	; 0x40
 80018d6:	481b      	ldr	r0, [pc, #108]	; (8001944 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80018d8:	f00b ff78 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 80018dc:	e02c      	b.n	8001938 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 80018e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x56>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>
 80018ee:	2300      	movs	r3, #0
 80018f0:	461a      	mov	r2, r3
 80018f2:	2180      	movs	r1, #128	; 0x80
 80018f4:	4813      	ldr	r0, [pc, #76]	; (8001944 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xac>)
 80018f6:	f00b ff69 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 80018fa:	e01d      	b.n	8001938 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 8001900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x74>
 8001908:	2301      	movs	r3, #1
 800190a:	e000      	b.n	800190e <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x76>
 800190c:	2300      	movs	r3, #0
 800190e:	461a      	mov	r2, r3
 8001910:	2108      	movs	r1, #8
 8001912:	480d      	ldr	r0, [pc, #52]	; (8001948 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb0>)
 8001914:	f00b ff5a 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 8001918:	e00e      	b.n	8001938 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa0>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	4a08      	ldr	r2, [pc, #32]	; (8001940 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xa8>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x92>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x94>
 800192a:	2300      	movs	r3, #0
 800192c:	461a      	mov	r2, r3
 800192e:	2140      	movs	r1, #64	; 0x40
 8001930:	4806      	ldr	r0, [pc, #24]	; (800194c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xb4>)
 8001932:	f00b ff4b 	bl	800d7cc <HAL_GPIO_WritePin>
#endif
        break;
 8001936:	bf00      	nop
    }
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	2400035c 	.word	0x2400035c
 8001944:	58020400 	.word	0x58020400
 8001948:	58021800 	.word	0x58021800
 800194c:	58020000 	.word	0x58020000

08001950 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d81f      	bhi.n	80019a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	08001983 	.word	0x08001983
 8001970:	0800198d 	.word	0x0800198d
 8001974:	08001997 	.word	0x08001997
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001978:	2140      	movs	r1, #64	; 0x40
 800197a:	480b      	ldr	r0, [pc, #44]	; (80019a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 800197c:	f00b ff3f 	bl	800d7fe <HAL_GPIO_TogglePin>
#endif
        break;
 8001980:	e00e      	b.n	80019a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001982:	2180      	movs	r1, #128	; 0x80
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x58>)
 8001986:	f00b ff3a 	bl	800d7fe <HAL_GPIO_TogglePin>
#endif
        break;
 800198a:	e009      	b.n	80019a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 800198c:	2108      	movs	r1, #8
 800198e:	4807      	ldr	r0, [pc, #28]	; (80019ac <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x5c>)
 8001990:	f00b ff35 	bl	800d7fe <HAL_GPIO_TogglePin>
#endif
        break;
 8001994:	e004      	b.n	80019a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x50>
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	4805      	ldr	r0, [pc, #20]	; (80019b0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x60>)
 800199a:	f00b ff30 	bl	800d7fe <HAL_GPIO_TogglePin>
#endif
        break;
 800199e:	bf00      	nop
    }
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58020400 	.word	0x58020400
 80019ac:	58021800 	.word	0x58021800
 80019b0:	58020000 	.word	0x58020000

080019b4 <_ZN8touchgfx3HALD1Ev>:
        DISPLAY_ROTATION = rotate0;
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
    }

    /** Finalizes an instance of the HAL class. */
    virtual ~HAL()
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    {
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	601a      	str	r2, [r3, #0]
    }
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	08025d00 	.word	0x08025d00

080019d4 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
    }
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ffe9 	bl	80019b4 <_ZN8touchgfx3HALD1Ev>
 80019e2:	217c      	movs	r1, #124	; 0x7c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f021 fca4 	bl	8023332 <_ZdlPvj>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     *
     * @param  orientation The desired display orientation.
     *
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	70fb      	strb	r3, [r7, #3]
    {
        requestedOrientation = orientation;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
     * @param   width   The width of the framebuffer.
     * @param   height  The height of the framebuffer.
     *
     * @see touchgfx_generic_init
     */
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	803b      	strh	r3, [r7, #0]
    {
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d304      	bcc.n	8001a40 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 8001a36:	4b0b      	ldr	r3, [pc, #44]	; (8001a64 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	883a      	ldrh	r2, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d205      	bcs.n	8001a4c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8001a44:	219e      	movs	r1, #158	; 0x9e
 8001a46:	480a      	ldr	r0, [pc, #40]	; (8001a70 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 8001a48:	f021 fca2 	bl	8023390 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001a4c:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001a52:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8001a54:	883b      	ldrh	r3, [r7, #0]
 8001a56:	8013      	strh	r3, [r2, #0]
    }
 8001a58:	bf00      	nop
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	2400af28 	.word	0x2400af28
 8001a64:	2400af2a 	.word	0x2400af2a
 8001a68:	080245fc 	.word	0x080245fc
 8001a6c:	08024660 	.word	0x08024660
 8001a70:	080246a4 	.word	0x080246a4
 8001a74:	2400af2e 	.word	0x2400af2e
 8001a78:	2400af30 	.word	0x2400af30

08001a7c <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4798      	blx	r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	e000      	b.n	8001aa4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 8001aa2:	2300      	movs	r3, #0
    }
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f011 ffd5 	bl	8013a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	33ac      	adds	r3, #172	; 0xac
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	4798      	blx	r3
    }
 8001ac6:	bf00      	nop
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 8001ace:	b480      	push	{r7}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 8001ad8:	2300      	movs	r3, #0
    }
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d106      	bne.n	8001b0a <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8001afc:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8001afe:	4a10      	ldr	r2, [pc, #64]	; (8001b40 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8001b00:	f240 21d2 	movw	r1, #722	; 0x2d2
 8001b04:	480f      	ldr	r0, [pc, #60]	; (8001b44 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8001b06:	f021 fc43 	bl	8023390 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8001b24:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	338c      	adds	r3, #140	; 0x8c
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6839      	ldr	r1, [r7, #0]
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	4798      	blx	r3
    }
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	080246f8 	.word	0x080246f8
 8001b40:	08024730 	.word	0x08024730
 8001b44:	080246a4 	.word	0x080246a4
 8001b48:	2400af32 	.word	0x2400af32

08001b4c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	683a      	ldr	r2, [r7, #0]
 8001b5a:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b03      	ldr	r3, [pc, #12]	; (8001b78 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 8001b6a:	701a      	strb	r2, [r3, #0]
    }
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	2400af33 	.word	0x2400af33

08001b7c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8001b84:	2300      	movs	r3, #0
    }
 8001b86:	4618      	mov	r0, r3
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d004      	beq.n	8001bb0 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	887a      	ldrh	r2, [r7, #2]
 8001bac:	4610      	mov	r0, r2
 8001bae:	4798      	blx	r3
        }
    }
 8001bb0:	bf00      	nop
 8001bb2:	3708      	adds	r7, #8
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 8001bc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3318      	adds	r3, #24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4610      	mov	r0, r2
 8001be8:	4798      	blx	r3
 8001bea:	4603      	mov	r3, r0
    }
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d011      	beq.n	8001c30 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d11e      	bne.n	8001c52 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c1a:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c20:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 8001c22:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c24:	89bb      	ldrh	r3, [r7, #12]
 8001c26:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001c28:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8001c2e:	e010      	b.n	8001c52 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 8001c30:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00c      	beq.n	8001c52 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c40:	881a      	ldrh	r2, [r3, #0]
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8001c44:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8001c46:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
    }
 8001c52:	bf00      	nop
 8001c54:	3714      	adds	r7, #20
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2400af2c 	.word	0x2400af2c
 8001c64:	2400af2a 	.word	0x2400af2a
 8001c68:	2400af28 	.word	0x2400af28

08001c6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f011 f95a 	bl	8012f30 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8001c7c:	bf00      	nop
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	4a05      	ldr	r2, [pc, #20]	; (8001ca4 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fe8d 	bl	80019b4 <_ZN8touchgfx3HALD1Ev>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	08025650 	.word	0x08025650

08001ca8 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff ffe7 	bl	8001c84 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001cb6:	217c      	movs	r1, #124	; 0x7c
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f021 fb3a 	bl	8023332 <_ZdlPvj>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffca 	bl	8001c6c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fd44 	bl	8003778 <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 8001cf0:	bf00      	nop
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fdda 	bl	80038bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f001 fdd9 	bl	80038d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fde1 	bl	8003904 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	68b9      	ldr	r1, [r7, #8]
 8001d60:	f001 fe28 	bl	80039b4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f001 fd21 	bl	80037c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f001 fd25 	bl	80037e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f001 fd27 	bl	80037fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f001 fd29 	bl	8003818 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_ZN11TouchGFXHALD1Ev+0x20>)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff ff4f 	bl	8001c84 <_ZN20TouchGFXGeneratedHALD1Ev>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	080252e0 	.word	0x080252e0

08001df4 <_ZN11TouchGFXHALD0Ev>:
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffe7 	bl	8001dd0 <_ZN11TouchGFXHALD1Ev>
 8001e02:	217c      	movs	r1, #124	; 0x7c
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f021 fa94 	bl	8023332 <_ZdlPvj>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN25STM32H745ITouchController4initEv>:

/**
 * @brief initializes the touch controller
 */
void STM32H745ITouchController::init()
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
    static const uint32_t width = 480;
    static const uint32_t height = 272;

    TS_Init_t config;
    config.Width = width;
 8001e1a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001e1e:	603b      	str	r3, [r7, #0]
    config.Height = height;
 8001e20:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001e24:	607b      	str	r3, [r7, #4]
    config.Orientation = TS_SWAP_XY;
 8001e26:	2308      	movs	r3, #8
 8001e28:	60bb      	str	r3, [r7, #8]
    config.Accuracy = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]

    if (BSP_TS_Init(0, &config) != BSP_ERROR_NONE)
 8001e2e:	463b      	mov	r3, r7
 8001e30:	4619      	mov	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	f00a fb44 	bl	800c4c0 <BSP_TS_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bf14      	ite	ne
 8001e3e:	2301      	movne	r3, #1
 8001e40:	2300      	moveq	r3, #0
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d103      	bne.n	8001e50 <_ZN25STM32H745ITouchController4initEv+0x3c>
    {
        return;
    }

    _bsp_ts_initialized = true;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <_ZN25STM32H745ITouchController4initEv+0x44>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e000      	b.n	8001e52 <_ZN25STM32H745ITouchController4initEv+0x3e>
        return;
 8001e50:	bf00      	nop
}
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2400036c 	.word	0x2400036c

08001e5c <_ZN25STM32H745ITouchController11sampleTouchERlS0_>:
 * @param x touch x coordinate
 * @param y touch y coordinate
 * @return \c true if a touch event was detected, else \c false
 */
bool STM32H745ITouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
    static TS_State_t state;

    if (!_bsp_ts_initialized)
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x50>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	f083 0301 	eor.w	r3, r3, #1
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x1c>
    {
        return false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e014      	b.n	8001ea2 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    BSP_TS_GetState(0, &state);
 8001e78:	490d      	ldr	r1, [pc, #52]	; (8001eb0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f00a fbdc 	bl	800c638 <BSP_TS_GetState>

    if (!state.TouchDetected)
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x30>
    {
        return false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e00a      	b.n	8001ea2 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x46>
    }

    x = state.TouchX;
 8001e8c:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	601a      	str	r2, [r3, #0]
    y = state.TouchY;
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <_ZN25STM32H745ITouchController11sampleTouchERlS0_+0x54>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	601a      	str	r2, [r3, #0]
    return true;
 8001ea0:	2301      	movs	r3, #1
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	2400036c 	.word	0x2400036c
 8001eb0:	24000370 	.word	0x24000370

08001eb4 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2101      	movs	r1, #1
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f004 fe4e 	bl	8006b5e <osSemaphoreNew>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a0f      	ldr	r2, [pc, #60]	; (8001f04 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001ec6:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8001ec8:	4b0e      	ldr	r3, [pc, #56]	; (8001f04 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d105      	bne.n	8001edc <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ed4:	2128      	movs	r1, #40	; 0x28
 8001ed6:	480e      	ldr	r0, [pc, #56]	; (8001f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001ed8:	f021 fa5a 	bl	8023390 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2104      	movs	r1, #4
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f004 ff5b 	bl	8006d9c <osMessageQueueNew>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	; (8001f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001eea:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8001ef8:	212c      	movs	r1, #44	; 0x2c
 8001efa:	4805      	ldr	r0, [pc, #20]	; (8001f10 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8001efc:	f021 fa48 	bl	8023390 <__assert_func>
}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	2400037c 	.word	0x2400037c
 8001f08:	08024780 	.word	0x08024780
 8001f0c:	080247cc 	.word	0x080247cc
 8001f10:	080247fc 	.word	0x080247fc
 8001f14:	24000380 	.word	0x24000380
 8001f18:	08024860 	.word	0x08024860

08001f1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f004 fea1 	bl	8006c70 <osSemaphoreAcquire>
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2400037c 	.word	0x2400037c

08001f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f004 fee7 	bl	8006d14 <osSemaphoreRelease>
}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	2400037c 	.word	0x2400037c

08001f50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f004 fe88 	bl	8006c70 <osSemaphoreAcquire>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2400037c 	.word	0x2400037c

08001f68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f004 fecf 	bl	8006d14 <osSemaphoreRelease>
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2400037c 	.word	0x2400037c

08001f80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8001f84:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8001f86:	6818      	ldr	r0, [r3, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	4903      	ldr	r1, [pc, #12]	; (8001f9c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8001f8e:	f004 ff79 	bl	8006e84 <osMessageQueuePut>
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	24000380 	.word	0x24000380
 8001f9c:	24000004 	.word	0x24000004

08001fa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	1d39      	adds	r1, r7, #4
 8001fac:	2300      	movs	r3, #0
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f004 ffc8 	bl	8006f44 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8001fb6:	6818      	ldr	r0, [r3, #0]
 8001fb8:	1d39      	adds	r1, r7, #4
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f004 ffc0 	bl	8006f44 <osMessageQueueGet>
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	24000380 	.word	0x24000380

08001fd0 <__NVIC_EnableIRQ>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	db0b      	blt.n	8001ffa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	f003 021f 	and.w	r2, r3, #31
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <__NVIC_EnableIRQ+0x38>)
 8001fea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	2001      	movs	r0, #1
 8001ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	e000e100 	.word	0xe000e100

0800200c <__NVIC_DisableIRQ>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002016:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db12      	blt.n	8002044 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	490a      	ldr	r1, [pc, #40]	; (8002050 <__NVIC_DisableIRQ+0x44>)
 8002026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	3320      	adds	r3, #32
 8002034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002038:	f3bf 8f4f 	dsb	sy
}
 800203c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800203e:	f3bf 8f6f 	isb	sy
}
 8002042:	bf00      	nop
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000e100 	.word	0xe000e100

08002054 <_ZN8touchgfx9colortypeC1Ev>:
 * extract a 24/32-bit color from this type, use the getColor32 function.
 */
struct colortype
{
    /** Default constructor. Creates a black (0) color. */
    colortype()
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
        : color(0)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    {
    }
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_ZNK8touchgfx9colortypecvmEv>:
    /**
     * Cast that converts the given colortype to an uint32_t.
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
    {
        return color;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
    }
 800207c:	4618      	mov	r0, r3
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
    {
 8002090:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
    }
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	08025408 	.word	0x08025408

080020a8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
    }
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffe9 	bl	8002088 <_ZN8touchgfx9DMA_QueueD1Ev>
 80020b6:	2104      	movs	r1, #4
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f021 f93a 	bl	8023332 <_ZdlPvj>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4618      	mov	r0, r3
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3344      	adds	r3, #68	; 0x44
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	4798      	blx	r3
    }
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    {
 80020ec:	4a04      	ldr	r2, [pc, #16]	; (8002100 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	601a      	str	r2, [r3, #0]
    }
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	08025dd8 	.word	0x08025dd8

08002104 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
    }
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffe9 	bl	80020e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8002112:	210c      	movs	r1, #12
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f021 f90c 	bl	8023332 <_ZdlPvj>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 800212e:	4a09      	ldr	r2, [pc, #36]	; (8002154 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	721a      	strb	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	725a      	strb	r2, [r3, #9]
    {
    }
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	08025dd8 	.word	0x08025dd8

08002158 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8002160:	2301      	movs	r3, #1
    }
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3328      	adds	r3, #40	; 0x28
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4610      	mov	r0, r2
 8002182:	4798      	blx	r3
    }
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <_ZN8touchgfx3HAL11getInstanceEv>:
    static HAL* getInstance()
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
        return instance;
 8002190:	4b03      	ldr	r3, [pc, #12]	; (80021a0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
    }
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	2400af34 	.word	0x2400af34

080021a4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3314      	adds	r3, #20
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4610      	mov	r0, r2
 80021bc:	4798      	blx	r3
    }
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <DMA2D_XferCpltCallback>:

extern "C" DMA2D_HandleTypeDef hdma2d;

extern "C" {
    static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
    {
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
        (void)handle; // Unused argument
        HAL::getInstance()->signalDMAInterrupt();
 80021ce:	f7ff ffdd 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7ff ffe5 	bl	80021a4 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
    }
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	330c      	adds	r3, #12
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff ff30 	bl	8002054 <_ZN8touchgfx9colortypeC1Ev>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <_ZN8STM32DMAC1Ev>:
}

STM32DMA::STM32DMA()
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8002208:	687a      	ldr	r2, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330c      	adds	r3, #12
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7ff ff87 	bl	8002124 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8002216:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <_ZN8STM32DMAC1Ev+0x50>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f103 000c 	add.w	r0, r3, #12
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3320      	adds	r3, #32
 8002226:	2260      	movs	r2, #96	; 0x60
 8002228:	4619      	mov	r1, r3
 800222a:	f011 fd55 	bl	8013cd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3320      	adds	r3, #32
 8002232:	245f      	movs	r4, #95	; 0x5f
 8002234:	461d      	mov	r5, r3
 8002236:	2c00      	cmp	r4, #0
 8002238:	db05      	blt.n	8002246 <_ZN8STM32DMAC1Ev+0x46>
 800223a:	4628      	mov	r0, r5
 800223c:	f7ff ffd1 	bl	80021e2 <_ZN8touchgfx6BlitOpC1Ev>
 8002240:	3524      	adds	r5, #36	; 0x24
 8002242:	3c01      	subs	r4, #1
 8002244:	e7f7      	b.n	8002236 <_ZN8STM32DMAC1Ev+0x36>
{
}
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bdb0      	pop	{r4, r5, r7, pc}
 8002250:	080253b8 	.word	0x080253b8

08002254 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	4a09      	ldr	r2, [pc, #36]	; (8002284 <_ZN8STM32DMAD1Ev+0x30>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8002262:	205a      	movs	r0, #90	; 0x5a
 8002264:	f7ff fed2 	bl	800200c <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	330c      	adds	r3, #12
 800226c:	4618      	mov	r0, r3
 800226e:	f000 facb 	bl	8002808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff35 	bl	80020e4 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4618      	mov	r0, r3
 800227e:	3708      	adds	r7, #8
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	080253b8 	.word	0x080253b8

08002288 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
}
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ffdf 	bl	8002254 <_ZN8STM32DMAD1Ev>
 8002296:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f021 f849 	bl	8023332 <_ZdlPvj>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
	...

080022ac <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022ba:	4a11      	ldr	r2, [pc, #68]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80022c4:	4b0e      	ldr	r3, [pc, #56]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 80022d2:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022d8:	f043 0310 	orr.w	r3, r3, #16
 80022dc:	67d3      	str	r3, [r2, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 80022de:	4b08      	ldr	r3, [pc, #32]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022e2:	4a07      	ldr	r2, [pc, #28]	; (8002300 <_ZN8STM32DMA10initializeEv+0x54>)
 80022e4:	f023 0310 	bic.w	r3, r3, #16
 80022e8:	67d3      	str	r3, [r2, #124]	; 0x7c

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <_ZN8STM32DMA10initializeEv+0x58>)
 80022ec:	4a06      	ldr	r2, [pc, #24]	; (8002308 <_ZN8STM32DMA10initializeEv+0x5c>)
 80022ee:	621a      	str	r2, [r3, #32]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
 80022f0:	205a      	movs	r0, #90	; 0x5a
 80022f2:	f7ff fe6d 	bl	8001fd0 <__NVIC_EnableIRQ>
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	58024400 	.word	0x58024400
 8002304:	2400016c 	.word	0x2400016c
 8002308:	080021c7 	.word	0x080021c7

0800230c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	460b      	mov	r3, r1
 8002316:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002318:	2300      	movs	r3, #0
 800231a:	60fb      	str	r3, [r7, #12]

    switch (format)
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b0b      	cmp	r3, #11
 8002320:	d826      	bhi.n	8002370 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8002322:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002365 	.word	0x08002365
 800232c:	0800235f 	.word	0x0800235f
 8002330:	08002359 	.word	0x08002359
 8002334:	08002371 	.word	0x08002371
 8002338:	08002371 	.word	0x08002371
 800233c:	08002371 	.word	0x08002371
 8002340:	08002371 	.word	0x08002371
 8002344:	0800236b 	.word	0x0800236b
 8002348:	0800236b 	.word	0x0800236b
 800234c:	0800236b 	.word	0x0800236b
 8002350:	0800236b 	.word	0x0800236b
 8002354:	0800236b 	.word	0x0800236b
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
        break;
 800235c:	e00e      	b.n	800237c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 800235e:	2301      	movs	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
        break;
 8002362:	e00b      	b.n	800237c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002364:	2302      	movs	r3, #2
 8002366:	60fb      	str	r3, [r7, #12]
        break;
 8002368:	e008      	b.n	800237c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 800236a:	2305      	movs	r3, #5
 800236c:	60fb      	str	r3, [r7, #12]
        break;
 800236e:	e005      	b.n	800237c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8002374:	2166      	movs	r1, #102	; 0x66
 8002376:	4806      	ldr	r0, [pc, #24]	; (8002390 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8002378:	f021 f80a 	bl	8023390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 800237c:	68fb      	ldr	r3, [r7, #12]
}
 800237e:	4618      	mov	r0, r3
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	080248a4 	.word	0x080248a4
 800238c:	080248c0 	.word	0x080248c0
 8002390:	0802490c 	.word	0x0802490c

08002394 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

    switch (format)
 80023a4:	78fb      	ldrb	r3, [r7, #3]
 80023a6:	2b0a      	cmp	r3, #10
 80023a8:	d821      	bhi.n	80023ee <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 80023aa:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 80023ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023b0:	080023e9 	.word	0x080023e9
 80023b4:	080023e3 	.word	0x080023e3
 80023b8:	080023dd 	.word	0x080023dd
 80023bc:	080023ef 	.word	0x080023ef
 80023c0:	080023ef 	.word	0x080023ef
 80023c4:	080023ef 	.word	0x080023ef
 80023c8:	080023ef 	.word	0x080023ef
 80023cc:	080023e3 	.word	0x080023e3
 80023d0:	080023e3 	.word	0x080023e3
 80023d4:	080023e3 	.word	0x080023e3
 80023d8:	080023e3 	.word	0x080023e3
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 80023dc:	2300      	movs	r3, #0
 80023de:	60fb      	str	r3, [r7, #12]
        break;
 80023e0:	e00b      	b.n	80023fa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 80023e2:	2301      	movs	r3, #1
 80023e4:	60fb      	str	r3, [r7, #12]
        break;
 80023e6:	e008      	b.n	80023fa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 80023e8:	2302      	movs	r3, #2
 80023ea:	60fb      	str	r3, [r7, #12]
        break;
 80023ec:	e005      	b.n	80023fa <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 80023ee:	4b05      	ldr	r3, [pc, #20]	; (8002404 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 80023f0:	4a05      	ldr	r2, [pc, #20]	; (8002408 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 80023f2:	2187      	movs	r1, #135	; 0x87
 80023f4:	4805      	ldr	r0, [pc, #20]	; (800240c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 80023f6:	f020 ffcb 	bl	8023390 <__assert_func>
        break;
    }

    return dma2dColorMode;
 80023fa:	68fb      	ldr	r3, [r7, #12]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	3710      	adds	r7, #16
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	080248a4 	.word	0x080248a4
 8002408:	08024970 	.word	0x08024970
 800240c:	0802490c 	.word	0x0802490c

08002410 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_L8
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8002418:	f240 33ef 	movw	r3, #1007	; 0x3ef
}
 800241c:	4618      	mov	r0, r3
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b089      	sub	sp, #36	; 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	7f5b      	ldrb	r3, [r3, #29]
 8002436:	4619      	mov	r1, r3
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff67 	bl	800230c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800243e:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	7f9b      	ldrb	r3, [r3, #30]
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ff60 	bl	800230c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800244c:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	7f9b      	ldrb	r3, [r3, #30]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff9d 	bl	8002394 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 800245a:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	8b5b      	ldrh	r3, [r3, #26]
 8002460:	461a      	mov	r2, r3
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	8a9b      	ldrh	r3, [r3, #20]
 8002466:	1ad2      	subs	r2, r2, r3
 8002468:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration */
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	8b5b      	ldrh	r3, [r3, #26]
 8002470:	461a      	mov	r2, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	8a9b      	ldrh	r3, [r3, #20]
 8002476:	1ad2      	subs	r2, r2, r3
 8002478:	4b8e      	ldr	r3, [pc, #568]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800247a:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	8b1b      	ldrh	r3, [r3, #24]
 8002480:	461a      	mov	r2, r3
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	8a9b      	ldrh	r3, [r3, #20]
 8002486:	1ad2      	subs	r2, r2, r3
 8002488:	4b8a      	ldr	r3, [pc, #552]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800248a:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800248c:	4a89      	ldr	r2, [pc, #548]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	8adb      	ldrh	r3, [r3, #22]
 8002496:	461a      	mov	r2, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	8a9b      	ldrh	r3, [r3, #20]
 800249c:	041b      	lsls	r3, r3, #16
 800249e:	431a      	orrs	r2, r3
 80024a0:	4b84      	ldr	r3, [pc, #528]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	4b80      	ldr	r3, [pc, #512]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80024b2:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024bc:	d036      	beq.n	800252c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x104>
 80024be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024c2:	f200 80e2 	bhi.w	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024ca:	d014      	beq.n	80024f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 80024cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024d0:	f200 80db 	bhi.w	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d059      	beq.n	800258c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x164>
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	f200 80d6 	bhi.w	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024de:	2b40      	cmp	r3, #64	; 0x40
 80024e0:	f000 80be 	beq.w	8002660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	f200 80d0 	bhi.w	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d039      	beq.n	8002562 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13a>
 80024ee:	2b20      	cmp	r3, #32
 80024f0:	f000 80b6 	beq.w	8002660 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x238>
 80024f4:	e0c9      	b.n	800268a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x262>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	7f1b      	ldrb	r3, [r3, #28]
 80024fa:	061b      	lsls	r3, r3, #24
 80024fc:	4619      	mov	r1, r3
 80024fe:	4a6d      	ldr	r2, [pc, #436]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002500:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8002502:	430b      	orrs	r3, r1
 8002504:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	330c      	adds	r3, #12
 800250a:	4c6a      	ldr	r4, [pc, #424]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fdaf 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 8002512:	4603      	mov	r3, r0
 8002514:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002516:	4a67      	ldr	r2, [pc, #412]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	4b64      	ldr	r3, [pc, #400]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002522:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002524:	4b63      	ldr	r3, [pc, #396]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002526:	4a65      	ldr	r2, [pc, #404]	; (80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002528:	601a      	str	r2, [r3, #0]
        break;
 800252a:	e0da      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	7f1b      	ldrb	r3, [r3, #28]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	4619      	mov	r1, r3
 8002534:	4a5f      	ldr	r2, [pc, #380]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002536:	4b62      	ldr	r3, [pc, #392]	; (80026c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8002538:	430b      	orrs	r3, r1
 800253a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	330c      	adds	r3, #12
 8002540:	4c5c      	ldr	r4, [pc, #368]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002542:	4618      	mov	r0, r3
 8002544:	f7ff fd94 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 8002548:	4603      	mov	r3, r0
 800254a:	6223      	str	r3, [r4, #32]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800254c:	4a59      	ldr	r2, [pc, #356]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	691a      	ldr	r2, [r3, #16]
 8002556:	4b57      	ldr	r3, [pc, #348]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002558:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 800255a:	4b56      	ldr	r3, [pc, #344]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800255c:	4a57      	ldr	r2, [pc, #348]	; (80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 800255e:	601a      	str	r2, [r3, #0]
        break;
 8002560:	e0bf      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	7f1b      	ldrb	r3, [r3, #28]
 8002566:	061b      	lsls	r3, r3, #24
 8002568:	461a      	mov	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	4a51      	ldr	r2, [pc, #324]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002576:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002582:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002586:	4a4d      	ldr	r2, [pc, #308]	; (80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002588:	601a      	str	r2, [r3, #0]
        break;
 800258a:	e0aa      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1d1a      	adds	r2, r3, #4
 800259a:	4b46      	ldr	r3, [pc, #280]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800259c:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	7f1b      	ldrb	r3, [r3, #28]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	461a      	mov	r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80025b2:	4a40      	ldr	r2, [pc, #256]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	6253      	str	r3, [r2, #36]	; 0x24

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025be:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d002      	beq.n	80025d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d00d      	beq.n	80025ea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c2>
 80025ce:	e020      	b.n	8002612 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ea>
            {
            case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                /* Write foreground CLUT size and CLUT color mode */
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025d0:	4b38      	ldr	r3, [pc, #224]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	8852      	ldrh	r2, [r2, #2]
 80025dc:	3a01      	subs	r2, #1
 80025de:	0212      	lsls	r2, r2, #8
 80025e0:	4611      	mov	r1, r2
 80025e2:	4a34      	ldr	r2, [pc, #208]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025e4:	430b      	orrs	r3, r1
 80025e6:	61d3      	str	r3, [r2, #28]
                break;
 80025e8:	e01a      	b.n	8002620 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            case Bitmap::CLUT_FORMAT_L8_RGB888:
                if(blitOp.alpha == 255)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7f1b      	ldrb	r3, [r3, #28]
 80025ee:	2bff      	cmp	r3, #255	; 0xff
 80025f0:	d101      	bne.n	80025f6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1ce>
                {
                    blend = false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	77fb      	strb	r3, [r7, #31]
                }
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80025f6:	4b2f      	ldr	r3, [pc, #188]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	4b32      	ldr	r3, [pc, #200]	; (80026c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	8852      	ldrh	r2, [r2, #2]
 8002602:	3a01      	subs	r2, #1
 8002604:	0212      	lsls	r2, r2, #8
 8002606:	4313      	orrs	r3, r2
 8002608:	4a2a      	ldr	r2, [pc, #168]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	61d3      	str	r3, [r2, #28]
                break;
 8002610:	e006      	b.n	8002620 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>

            case Bitmap::CLUT_FORMAT_L8_RGB565:
            default:
                assert(0 && "Unsupported format");
 8002612:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8002614:	4a2d      	ldr	r2, [pc, #180]	; (80026cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8002616:	f240 1111 	movw	r1, #273	; 0x111
 800261a:	482d      	ldr	r0, [pc, #180]	; (80026d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 800261c:	f020 feb8 	bl	8023390 <__assert_func>
                break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	4a23      	ldr	r2, [pc, #140]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002626:	f043 0320 	orr.w	r3, r3, #32
 800262a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 800262c:	4b21      	ldr	r3, [pc, #132]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 0320 	and.w	r3, r3, #32
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21c>
 8002642:	e7f3      	b.n	800262c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x204>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002646:	2210      	movs	r2, #16
 8002648:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 800264a:	7ffb      	ldrb	r3, [r7, #31]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x230>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002650:	4b18      	ldr	r3, [pc, #96]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002652:	4a1a      	ldr	r2, [pc, #104]	; (80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002654:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8002656:	e044      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8002658:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800265a:	4a1e      	ldr	r2, [pc, #120]	; (80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 800265c:	601a      	str	r2, [r3, #0]
        break;
 800265e:	e040      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	7f1b      	ldrb	r3, [r3, #28]
 8002664:	061b      	lsls	r3, r3, #24
 8002666:	461a      	mov	r2, r3
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	4313      	orrs	r3, r2
 800266c:	4a11      	ldr	r2, [pc, #68]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 800266e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002672:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002674:	4a0f      	ldr	r2, [pc, #60]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	6253      	str	r3, [r2, #36]	; 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002680:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8002682:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002684:	4a0d      	ldr	r2, [pc, #52]	; (80026bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8002686:	601a      	str	r2, [r3, #0]
        break;
 8002688:	e02b      	b.n	80026e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ba>
    default: /* BLIT_OP_COPY */
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7f1b      	ldrb	r3, [r3, #28]
 800268e:	061b      	lsls	r3, r3, #24
 8002690:	461a      	mov	r2, r3
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4313      	orrs	r3, r2
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 8002698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800269c:	61d3      	str	r3, [r2, #28]

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7f5a      	ldrb	r2, [r3, #29]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	7f9b      	ldrb	r3, [r3, #30]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d016      	beq.n	80026d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b0>
        {
            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80026aa:	4b02      	ldr	r3, [pc, #8]	; (80026b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 80026ac:	4a09      	ldr	r2, [pc, #36]	; (80026d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80026ae:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80026b0:	e016      	b.n	80026e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b8>
 80026b2:	bf00      	nop
 80026b4:	52001000 	.word	0x52001000
 80026b8:	0002000a 	.word	0x0002000a
 80026bc:	00020201 	.word	0x00020201
 80026c0:	00020009 	.word	0x00020009
 80026c4:	ffff00ef 	.word	0xffff00ef
 80026c8:	080249bc 	.word	0x080249bc
 80026cc:	080249d8 	.word	0x080249d8
 80026d0:	0802490c 	.word	0x0802490c
 80026d4:	00010201 	.word	0x00010201
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c4>)
 80026da:	f240 2201 	movw	r2, #513	; 0x201
 80026de:	601a      	str	r2, [r3, #0]
        break;
 80026e0:	bf00      	nop
    }
}
 80026e2:	bf00      	nop
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	52001000 	.word	0x52001000

080026f0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	7f9b      	ldrb	r3, [r3, #30]
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff fe47 	bl	8002394 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8002706:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002708:	4a3b      	ldr	r2, [pc, #236]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	8adb      	ldrh	r3, [r3, #22]
 8002712:	461a      	mov	r2, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	8a9b      	ldrh	r3, [r3, #20]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	4b36      	ldr	r3, [pc, #216]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800271e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002726:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	8b5b      	ldrh	r3, [r3, #26]
 800272c:	461a      	mov	r2, r3
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	8a9b      	ldrh	r3, [r3, #20]
 8002732:	1ad2      	subs	r2, r2, r3
 8002734:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002736:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d12e      	bne.n	800279e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xae>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	8b5b      	ldrh	r3, [r3, #26]
 8002744:	461a      	mov	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	8a9b      	ldrh	r3, [r3, #20]
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	4b2a      	ldr	r3, [pc, #168]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800274e:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	8b5b      	ldrh	r3, [r3, #26]
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	8a9b      	ldrh	r3, [r3, #20]
 800275a:	1ad2      	subs	r2, r2, r3
 800275c:	4b26      	ldr	r3, [pc, #152]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800275e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002760:	4a25      	ldr	r2, [pc, #148]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6253      	str	r3, [r2, #36]	; 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	7f1b      	ldrb	r3, [r3, #28]
 800276a:	061b      	lsls	r3, r3, #24
 800276c:	4619      	mov	r1, r3
 800276e:	4a22      	ldr	r2, [pc, #136]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002770:	4b22      	ldr	r3, [pc, #136]	; (80027fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>)
 8002772:	430b      	orrs	r3, r1
 8002774:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	330c      	adds	r3, #12
 800277a:	4c1f      	ldr	r4, [pc, #124]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fc77 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 8002782:	4603      	mov	r3, r0
 8002784:	6223      	str	r3, [r4, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	691a      	ldr	r2, [r3, #16]
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 800278c:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	691a      	ldr	r2, [r3, #16]
 8002792:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002794:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002796:	4b18      	ldr	r3, [pc, #96]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 8002798:	4a19      	ldr	r2, [pc, #100]	; (8002800 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x110>)
 800279a:	601a      	str	r2, [r3, #0]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 800279c:	e027      	b.n	80027ee <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfe>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800279e:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	330c      	adds	r3, #12
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fc5e 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0a1b      	lsrs	r3, r3, #8
 80027b8:	f403 4478 	and.w	r4, r3, #63488	; 0xf800
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	330c      	adds	r3, #12
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fc55 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 80027c6:	4603      	mov	r3, r0
 80027c8:	095b      	lsrs	r3, r3, #5
 80027ca:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80027ce:	431c      	orrs	r4, r3
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fc4b 	bl	8002070 <_ZNK8touchgfx9colortypecvmEv>
 80027da:	4603      	mov	r3, r0
 80027dc:	08db      	lsrs	r3, r3, #3
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	4a05      	ldr	r2, [pc, #20]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027e4:	4323      	orrs	r3, r4
 80027e6:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x108>)
 80027ea:	4a06      	ldr	r2, [pc, #24]	; (8002804 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x114>)
 80027ec:	601a      	str	r2, [r3, #0]
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd90      	pop	{r4, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	52001000 	.word	0x52001000
 80027fc:	00010009 	.word	0x00010009
 8002800:	00020201 	.word	0x00020201
 8002804:	00030201 	.word	0x00030201

08002808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	4a05      	ldr	r2, [pc, #20]	; (8002828 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fc35 	bl	8002088 <_ZN8touchgfx9DMA_QueueD1Ev>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4618      	mov	r0, r3
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	08025e28 	.word	0x08025e28

0800282c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ffe7 	bl	8002808 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 800283a:	2114      	movs	r1, #20
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f020 fd78 	bl	8023332 <_ZdlPvj>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	801a      	strh	r2, [r3, #0]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	805a      	strh	r2, [r3, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	809a      	strh	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	80da      	strh	r2, [r3, #6]
    {
    }
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
    }
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2400af90 	.word	0x2400af90

0800289c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    {
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	601a      	str	r2, [r3, #0]
    }
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	0802563c 	.word	0x0802563c

080028bc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
    }
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ffe9 	bl	800289c <_ZN8touchgfx12FontProviderD1Ev>
 80028ca:	2104      	movs	r1, #4
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f020 fd30 	bl	8023332 <_ZdlPvj>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
 80028e8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80028ea:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	60da      	str	r2, [r3, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	611a      	str	r2, [r3, #16]
    {
    }
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	0802562c 	.word	0x0802562c

0800291c <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    {
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	601a      	str	r2, [r3, #0]
    }
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4618      	mov	r0, r3
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	0802562c 	.word	0x0802562c

0800293c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
    }
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff ffe9 	bl	800291c <_ZN8touchgfx7MVPHeapD1Ev>
 800294a:	2114      	movs	r1, #20
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f020 fcf0 	bl	8023332 <_ZdlPvj>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4618      	mov	r0, r3
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr

0800299e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
 80029a6:	460b      	mov	r3, r1
 80029a8:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
    {
    }
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
    {
    }
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
	...

080029e0 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
    {
 80029e8:	4a04      	ldr	r2, [pc, #16]	; (80029fc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
    }
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	08025604 	.word	0x08025604

08002a00 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
    }
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f7ff ffe9 	bl	80029e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002a0e:	2104      	movs	r1, #4
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f020 fc8e 	bl	8023332 <_ZdlPvj>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
    {
 8002a28:	4a04      	ldr	r2, [pc, #16]	; (8002a3c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	601a      	str	r2, [r3, #0]
    }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4618      	mov	r0, r3
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	08025f98 	.word	0x08025f98

08002a40 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    }
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ffe9 	bl	8002a20 <_ZN8touchgfx3LCDD1Ev>
 8002a4e:	2108      	movs	r1, #8
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f020 fc6e 	bl	8023332 <_ZdlPvj>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3708      	adds	r7, #8
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
    {
    }
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8002a9e:	6810      	ldr	r0, [r2, #0]
 8002aa0:	6851      	ldr	r1, [r2, #4]
 8002aa2:	c303      	stmia	r3!, {r0, r1}
    }
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
    {
 8002ab8:	4a04      	ldr	r2, [pc, #16]	; (8002acc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	601a      	str	r2, [r3, #0]
    }
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	080255ec 	.word	0x080255ec

08002ad0 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
    }
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ffe9 	bl	8002ab0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8002ade:	2104      	movs	r1, #4
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f020 fc26 	bl	8023332 <_ZdlPvj>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	801a      	strh	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	805a      	strh	r2, [r3, #2]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	809a      	strh	r2, [r3, #4]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	80da      	strh	r2, [r3, #6]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	811a      	strh	r2, [r3, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	815a      	strh	r2, [r3, #10]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	819a      	strh	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	739a      	strb	r2, [r3, #14]
        {
        }
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ffd5 	bl	8002af0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	829a      	strh	r2, [r3, #20]
    {
    }
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 8002b6a:	4a55      	ldr	r2, [pc, #340]	; (8002cc0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	615a      	str	r2, [r3, #20]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	331c      	adds	r3, #28
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ffcc 	bl	8002b36 <_ZN8touchgfx8GesturesC1Ev>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	64da      	str	r2, [r3, #76]	; 0x4c
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3350      	adds	r3, #80	; 0x50
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fe2f 	bl	800284c <_ZN8touchgfx4RectC1Ev>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	659a      	str	r2, [r3, #88]	; 0x58
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	671a      	str	r2, [r3, #112]	; 0x70
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c7e:	8b3b      	ldrh	r3, [r7, #24]
 8002c80:	8013      	strh	r3, [r2, #0]
 8002c82:	4b11      	ldr	r3, [pc, #68]	; (8002cc8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8002c88:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c8c:	8bbb      	ldrh	r3, [r7, #28]
 8002c8e:	8013      	strh	r3, [r2, #0]
 8002c90:	4b0f      	ldr	r3, [pc, #60]	; (8002cd0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8002c92:	881a      	ldrh	r2, [r3, #0]
 8002c94:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8002c96:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8002c98:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002c9e:	8b3a      	ldrh	r2, [r7, #24]
 8002ca0:	8bbb      	ldrh	r3, [r7, #28]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	bf34      	ite	cc
 8002ca6:	2301      	movcc	r3, #1
 8002ca8:	2300      	movcs	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	461a      	mov	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	08025d00 	.word	0x08025d00
 8002cc4:	2400af34 	.word	0x2400af34
 8002cc8:	2400af28 	.word	0x2400af28
 8002ccc:	2400af2e 	.word	0x2400af2e
 8002cd0:	2400af2a 	.word	0x2400af2a
 8002cd4:	2400af30 	.word	0x2400af30
 8002cd8:	2400af2c 	.word	0x2400af2c

08002cdc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	4a05      	ldr	r2, [pc, #20]	; (8002cfc <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fe77 	bl	80029e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	08025ff0 	.word	0x08025ff0

08002d00 <_ZN8touchgfx11ApplicationD0Ev>:
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffe7 	bl	8002cdc <_ZN8touchgfx11ApplicationD1Ev>
 8002d0e:	f44f 719c 	mov.w	r1, #312	; 0x138
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f020 fb0d 	bl	8023332 <_ZdlPvj>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f804 	bl	8002d38 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8002d30:	bf00      	nop
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d00f      	beq.n	8002d6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	330c      	adds	r3, #12
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	4798      	blx	r3
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4610      	mov	r0, r2
 8002d84:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
	...

08002d98 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff97 	bl	8002cdc <_ZN8touchgfx11ApplicationD1Ev>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	080255a0 	.word	0x080255a0

08002dbc <_ZN8touchgfx14MVPApplicationD0Ev>:
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f7ff ffe7 	bl	8002d98 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002dca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f020 faaf 	bl	8023332 <_ZdlPvj>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	4a08      	ldr	r2, [pc, #32]	; (8002e0c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fb0b 	bl	8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff ffcb 	bl	8002d98 <_ZN8touchgfx14MVPApplicationD1Ev>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	0802553c 	.word	0x0802553c

08002e10 <_ZN23FrontendApplicationBaseD0Ev>:
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ffe1 	bl	8002de0 <_ZN23FrontendApplicationBaseD1Ev>
 8002e1e:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f020 fa85 	bl	8023332 <_ZdlPvj>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f001 f90a 	bl	8004054 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	4a05      	ldr	r2, [pc, #20]	; (8002e68 <_ZN19FrontendApplicationD1Ev+0x20>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ffc1 	bl	8002de0 <_ZN23FrontendApplicationBaseD1Ev>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	080254f0 	.word	0x080254f0

08002e6c <_ZN19FrontendApplicationD0Ev>:
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffe7 	bl	8002e48 <_ZN19FrontendApplicationD1Ev>
 8002e7a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f020 fa57 	bl	8023332 <_ZdlPvj>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fa85 	bl	80063ac <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f011 ff91 	bl	8014dcc <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f001 f8c8 	bl	8004054 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	f7ff fcf9 	bl	80028dc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8002eea:	4a04      	ldr	r2, [pc, #16]	; (8002efc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	601a      	str	r2, [r3, #0]
    {

    }
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	080254dc 	.word	0x080254dc

08002f00 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	4801      	ldr	r0, [pc, #4]	; (8002f0c <__tcf_0+0xc>)
 8002f06:	f000 f959 	bl	80031bc <_ZN12FrontendHeapD1Ev>
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	24000384 	.word	0x24000384

08002f10 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f3bf 8f5b 	dmb	ish
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	bf0c      	ite	eq
 8002f26:	2301      	moveq	r3, #1
 8002f28:	2300      	movne	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d013      	beq.n	8002f58 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f30:	480b      	ldr	r0, [pc, #44]	; (8002f60 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f32:	f020 fa00 	bl	8023336 <__cxa_guard_acquire>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf14      	ite	ne
 8002f3c:	2301      	movne	r3, #1
 8002f3e:	2300      	moveq	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d008      	beq.n	8002f58 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8002f46:	4807      	ldr	r0, [pc, #28]	; (8002f64 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8002f48:	f000 f868 	bl	800301c <_ZN12FrontendHeapC1Ev>
 8002f4c:	4806      	ldr	r0, [pc, #24]	; (8002f68 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8002f4e:	f020 fa3d 	bl	80233cc <atexit>
 8002f52:	4803      	ldr	r0, [pc, #12]	; (8002f60 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8002f54:	f020 f9fb 	bl	802334e <__cxa_guard_release>
        return instance;
 8002f58:	4b02      	ldr	r3, [pc, #8]	; (8002f64 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	240005d8 	.word	0x240005d8
 8002f64:	24000384 	.word	0x24000384
 8002f68:	08002f01 	.word	0x08002f01

08002f6c <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	4a05      	ldr	r2, [pc, #20]	; (8002f8c <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7ff fccd 	bl	800291c <_ZN8touchgfx7MVPHeapD1Ev>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	3708      	adds	r7, #8
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	080254dc 	.word	0x080254dc

08002f90 <_ZN16FrontendHeapBaseD0Ev>:
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ffe7 	bl	8002f6c <_ZN16FrontendHeapBaseD1Ev>
 8002f9e:	2114      	movs	r1, #20
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f020 f9c6 	bl	8023332 <_ZdlPvj>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f00f fd0c 	bl	80129d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fc0:	4a03      	ldr	r2, [pc, #12]	; (8002fd0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	080254a8 	.word	0x080254a8

08002fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f00f fcfa 	bl	80129d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8002fe4:	4a03      	ldr	r2, [pc, #12]	; (8002ff4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4618      	mov	r0, r3
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	08025474 	.word	0x08025474

08002ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4618      	mov	r0, r3
 8003004:	f00f fce8 	bl	80129d8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003008:	4a03      	ldr	r2, [pc, #12]	; (8003018 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	08025440 	.word	0x08025440

0800301c <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b085      	sub	sp, #20
 8003020:	af02      	add	r7, sp, #8
 8003022:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0114 	add.w	r1, r3, #20
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f103 04e4 	add.w	r4, r3, #228	; 0xe4
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	33fc      	adds	r3, #252	; 0xfc
                     app(model, *this)
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	4623      	mov	r3, r4
 8003040:	f7ff ff44 	bl	8002ecc <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <_ZN12FrontendHeapC1Ev+0x80>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3314      	adds	r3, #20
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff ffae 	bl	8002fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	332c      	adds	r3, #44	; 0x2c
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ffbb 	bl	8002fd4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	33e4      	adds	r3, #228	; 0xe4
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ffc8 	bl	8002ff8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	33f8      	adds	r3, #248	; 0xf8
 800306c:	4618      	mov	r0, r3
 800306e:	f003 f98f 	bl	8006390 <_ZN5ModelC1Ev>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f103 00fc 	add.w	r0, r3, #252	; 0xfc
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	33f8      	adds	r3, #248	; 0xf8
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	4619      	mov	r1, r3
 8003080:	f003 f970 	bl	8006364 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	33fc      	adds	r3, #252	; 0xfc
 800308a:	4619      	mov	r1, r3
 800308c:	4610      	mov	r0, r2
 800308e:	f7ff ff10 	bl	8002eb2 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	0802542c 	.word	0x0802542c

080030a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	8bbb      	ldrh	r3, [r7, #28]
 80030b2:	9301      	str	r3, [sp, #4]
 80030b4:	8b3b      	ldrh	r3, [r7, #24]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	f7ff fd4d 	bl	8002b5c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80030c2:	4a04      	ldr	r2, [pc, #16]	; (80030d4 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	601a      	str	r2, [r3, #0]
    }
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	08025650 	.word	0x08025650

080030d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	8bbb      	ldrh	r3, [r7, #28]
 80030ea:	9301      	str	r3, [sp, #4]
 80030ec:	8b3b      	ldrh	r3, [r7, #24]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	68b9      	ldr	r1, [r7, #8]
 80030f6:	f7ff ffd3 	bl	80030a0 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80030fa:	4a04      	ldr	r2, [pc, #16]	; (800310c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	601a      	str	r2, [r3, #0]
    }
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	080252e0 	.word	0x080252e0

08003110 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	4a04      	ldr	r2, [pc, #16]	; (800312c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	080252c8 	.word	0x080252c8

08003130 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f7ff ffe8 	bl	8003110 <_ZN8touchgfx15TouchControllerC1Ev>
 8003140:	4a03      	ldr	r2, [pc, #12]	; (8003150 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	080252b0 	.word	0x080252b0

08003154 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
 8003154:	b590      	push	{r4, r7, lr}
 8003156:	b085      	sub	sp, #20
 8003158:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800315a:	f000 fd55 	bl	8003c08 <_ZN14BitmapDatabase11getInstanceEv>
 800315e:	4604      	mov	r4, r0
 8003160:	f000 fd5c 	bl	8003c1c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003164:	4603      	mov	r3, r0
 8003166:	4619      	mov	r1, r3
 8003168:	2300      	movs	r3, #0
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	2300      	movs	r3, #0
 800316e:	2200      	movs	r2, #0
 8003170:	4620      	mov	r0, r4
 8003172:	f014 faf1 	bl	8017758 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8003176:	4809      	ldr	r0, [pc, #36]	; (800319c <touchgfx_init+0x48>)
 8003178:	f7ff fb80 	bl	800287c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 800317c:	2000      	movs	r0, #0
 800317e:	f003 f85f 	bl	8006240 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8003182:	4807      	ldr	r0, [pc, #28]	; (80031a0 <touchgfx_init+0x4c>)
 8003184:	f014 fa50 	bl	8017628 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8003188:	f7ff fec2 	bl	8002f10 <_ZN12FrontendHeap11getInstanceEv>
 800318c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800318e:	4805      	ldr	r0, [pc, #20]	; (80031a4 <touchgfx_init+0x50>)
 8003190:	f7fe fda6 	bl	8001ce0 <_ZN11TouchGFXHAL10initializeEv>
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bd90      	pop	{r4, r7, pc}
 800319c:	240013f8 	.word	0x240013f8
 80031a0:	24000008 	.word	0x24000008
 80031a4:	240013fc 	.word	0x240013fc

080031a8 <touchgfx_taskEntry>:
void touchgfx_components_init()
{
}

void touchgfx_taskEntry()
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80031ac:	4802      	ldr	r0, [pc, #8]	; (80031b8 <touchgfx_taskEntry+0x10>)
 80031ae:	f00f ff26 	bl	8012ffe <_ZN8touchgfx3HAL9taskEntryEv>
}
 80031b2:	bf00      	nop
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	240013fc 	.word	0x240013fc

080031bc <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	4a0f      	ldr	r2, [pc, #60]	; (8003204 <_ZN12FrontendHeapD1Ev+0x48>)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	33fc      	adds	r3, #252	; 0xfc
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fe3a 	bl	8002e48 <_ZN19FrontendApplicationD1Ev>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	33e4      	adds	r3, #228	; 0xe4
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 f827 	bl	800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	332c      	adds	r3, #44	; 0x2c
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f844 	bl	8003270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3314      	adds	r3, #20
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 f861 	bl	80032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7ff feb9 	bl	8002f6c <_ZN16FrontendHeapBaseD1Ev>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4618      	mov	r0, r3
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	0802542c 	.word	0x0802542c

08003208 <_ZN12FrontendHeapD0Ev>:
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ffd3 	bl	80031bc <_ZN12FrontendHeapD1Ev>
 8003216:	f44f 7115 	mov.w	r1, #596	; 0x254
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f020 f889 	bl	8023332 <_ZdlPvj>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	4a05      	ldr	r2, [pc, #20]	; (800324c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4618      	mov	r0, r3
 800323e:	f00f fbca 	bl	80129d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08025440 	.word	0x08025440

08003250 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f7ff ffe7 	bl	800322c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800325e:	2114      	movs	r1, #20
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f020 f866 	bl	8023332 <_ZdlPvj>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4618      	mov	r0, r3
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	4a05      	ldr	r2, [pc, #20]	; (8003290 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4618      	mov	r0, r3
 8003282:	f00f fba8 	bl	80129d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	08025474 	.word	0x08025474

08003294 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ffe7 	bl	8003270 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032a2:	21b8      	movs	r1, #184	; 0xb8
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f020 f844 	bl	8023332 <_ZdlPvj>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	4a05      	ldr	r2, [pc, #20]	; (80032d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f00f fb86 	bl	80129d6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4618      	mov	r0, r3
 80032ce:	3708      	adds	r7, #8
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	080254a8 	.word	0x080254a8

080032d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ffe7 	bl	80032b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80032e6:	2118      	movs	r1, #24
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f020 f822 	bl	8023332 <_ZdlPvj>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	4a05      	ldr	r2, [pc, #20]	; (8003318 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fac7 	bl	800289c <_ZN8touchgfx12FontProviderD1Ev>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4618      	mov	r0, r3
 8003312:	3708      	adds	r7, #8
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	08025728 	.word	0x08025728

0800331c <_ZN23ApplicationFontProviderD0Ev>:
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffe7 	bl	80032f8 <_ZN23ApplicationFontProviderD1Ev>
 800332a:	2104      	movs	r1, #4
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f020 f800 	bl	8023332 <_ZdlPvj>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	4a05      	ldr	r2, [pc, #20]	; (800335c <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fb67 	bl	8002a20 <_ZN8touchgfx3LCDD1Ev>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	0802639c 	.word	0x0802639c

08003360 <_ZN8touchgfx8LCD16bppD0Ev>:
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f7ff ffe7 	bl	800333c <_ZN8touchgfx8LCD16bppD1Ev>
 800336e:	2178      	movs	r1, #120	; 0x78
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f01f ffde 	bl	8023332 <_ZdlPvj>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <_Z41__static_initialization_and_destruction_0ii>:
 8003380:	b580      	push	{r7, lr}
 8003382:	b084      	sub	sp, #16
 8003384:	af02      	add	r7, sp, #8
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d119      	bne.n	80033c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003396:	4293      	cmp	r3, r2
 8003398:	d114      	bne.n	80033c4 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 800339a:	4818      	ldr	r0, [pc, #96]	; (80033fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800339c:	f7ff fec8 	bl	8003130 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 80033a0:	4817      	ldr	r0, [pc, #92]	; (8003400 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033a2:	f7fe ff2d 	bl	8002200 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 80033a6:	4817      	ldr	r0, [pc, #92]	; (8003404 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033a8:	f017 fad8 	bl	801a95c <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 480, 272);
 80033ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80033b0:	9301      	str	r3, [sp, #4]
 80033b2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	4b10      	ldr	r3, [pc, #64]	; (80033fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033bc:	4910      	ldr	r1, [pc, #64]	; (8003400 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033be:	4812      	ldr	r0, [pc, #72]	; (8003408 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80033c0:	f7ff fe8a 	bl	80030d8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d113      	bne.n	80033f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10e      	bne.n	80033f2 <_Z41__static_initialization_and_destruction_0ii+0x72>
 80033d4:	480c      	ldr	r0, [pc, #48]	; (8003408 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80033d6:	f7fe fcfb 	bl	8001dd0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 80033da:	480c      	ldr	r0, [pc, #48]	; (800340c <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80033dc:	f7ff ff8c 	bl	80032f8 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 80033e0:	4808      	ldr	r0, [pc, #32]	; (8003404 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80033e2:	f7ff ffab 	bl	800333c <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 80033e6:	4806      	ldr	r0, [pc, #24]	; (8003400 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80033e8:	f7fe ff34 	bl	8002254 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 80033ec:	4803      	ldr	r0, [pc, #12]	; (80033fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80033ee:	f7fe f9d5 	bl	800179c <_ZN20STM32TouchControllerD1Ev>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	240005dc 	.word	0x240005dc
 8003400:	240005e0 	.word	0x240005e0
 8003404:	24001380 	.word	0x24001380
 8003408:	240013fc 	.word	0x240013fc
 800340c:	24000008 	.word	0x24000008

08003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	4a05      	ldr	r2, [pc, #20]	; (8003430 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fb45 	bl	8002ab0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4618      	mov	r0, r3
 800342a:	3708      	adds	r7, #8
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	08025588 	.word	0x08025588

08003434 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff ffe7 	bl	8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8003442:	2110      	movs	r1, #16
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f01f ff74 	bl	8023332 <_ZdlPvj>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 800345c:	2301      	movs	r3, #1
    }
 800345e:	4618      	mov	r0, r3
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8003472:	230c      	movs	r3, #12
    }
 8003474:	4618      	mov	r0, r3
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	460b      	mov	r3, r1
 800348a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 800348c:	887a      	ldrh	r2, [r7, #2]
 800348e:	4613      	mov	r3, r2
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	3308      	adds	r3, #8
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	4413      	add	r3, r2
    }
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80034b4:	887a      	ldrh	r2, [r7, #2]
 80034b6:	4613      	mov	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	3308      	adds	r3, #8
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4413      	add	r3, r2
    }
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 80034d8:	2301      	movs	r3, #1
    }
 80034da:	4618      	mov	r0, r3
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 80034e6:	b480      	push	{r7}
 80034e8:	b083      	sub	sp, #12
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80034ee:	23b0      	movs	r3, #176	; 0xb0
    }
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003508:	887b      	ldrh	r3, [r7, #2]
 800350a:	22b0      	movs	r2, #176	; 0xb0
 800350c:	fb02 f303 	mul.w	r3, r2, r3
 8003510:	3308      	adds	r3, #8
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4413      	add	r3, r2
    }
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen3ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 800352e:	887b      	ldrh	r3, [r7, #2]
 8003530:	22b0      	movs	r2, #176	; 0xb0
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	3308      	adds	r3, #8
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	4413      	add	r3, r2
    }
 800353c:	4618      	mov	r0, r3
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8003550:	2301      	movs	r3, #1
    }
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8003566:	2310      	movs	r3, #16
    }
 8003568:	4618      	mov	r0, r3
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8003580:	887b      	ldrh	r3, [r7, #2]
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	3308      	adds	r3, #8
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	4413      	add	r3, r2
    }
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen3PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
 800359e:	460b      	mov	r3, r1
 80035a0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80035a2:	887b      	ldrh	r3, [r7, #2]
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	3308      	adds	r3, #8
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
    }
 80035ac:	4618      	mov	r0, r3
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	68d2      	ldr	r2, [r2, #12]
 80035c8:	1052      	asrs	r2, r2, #1
 80035ca:	1899      	adds	r1, r3, r2
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d102      	bne.n	80035de <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	e00a      	b.n	80035f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68d2      	ldr	r2, [r2, #12]
 80035e6:	1052      	asrs	r2, r2, #1
 80035e8:	4413      	add	r3, r2
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	4413      	add	r3, r2
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4798      	blx	r3
    }
 80035f8:	bf00      	nop
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d010      	beq.n	8003632 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f003 0301 	and.w	r3, r3, #1
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8003628:	2300      	movs	r3, #0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d001      	beq.n	8003632 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8003632:	2300      	movs	r3, #0
    }
 8003634:	4618      	mov	r0, r3
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_GLOBAL__sub_I_touchgfx_init>:
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
 8003644:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003648:	2001      	movs	r0, #1
 800364a:	f7ff fe99 	bl	8003380 <_Z41__static_initialization_and_destruction_0ii>
 800364e:	bd80      	pop	{r7, pc}

08003650 <_GLOBAL__sub_D_touchgfx_init>:
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
 8003654:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003658:	2000      	movs	r0, #0
 800365a:	f7ff fe91 	bl	8003380 <_Z41__static_initialization_and_destruction_0ii>
 800365e:	bd80      	pop	{r7, pc}

08003660 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3320      	adds	r3, #32
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	4798      	blx	r3
    }
 8003674:	bf00      	nop
 8003676:	3708      	adds	r7, #8
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800368a:	3301      	adds	r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <__NVIC_EnableIRQ>:
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	db0b      	blt.n	80036ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036b2:	88fb      	ldrh	r3, [r7, #6]
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4907      	ldr	r1, [pc, #28]	; (80036d8 <__NVIC_EnableIRQ+0x38>)
 80036ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036be:	095b      	lsrs	r3, r3, #5
 80036c0:	2001      	movs	r0, #1
 80036c2:	fa00 f202 	lsl.w	r2, r0, r2
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000e100 	.word	0xe000e100

080036dc <__NVIC_DisableIRQ>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80036e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	db12      	blt.n	8003714 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	490a      	ldr	r1, [pc, #40]	; (8003720 <__NVIC_DisableIRQ+0x44>)
 80036f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80036fa:	095b      	lsrs	r3, r3, #5
 80036fc:	2001      	movs	r0, #1
 80036fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003702:	3320      	adds	r3, #32
 8003704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003708:	f3bf 8f4f 	dsb	sy
}
 800370c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800370e:	f3bf 8f6f 	isb	sy
}
 8003712:	bf00      	nop
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	; (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	; (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4618      	mov	r0, r3
 8003784:	f00f fc29 	bl	8012fda <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003788:	687d      	ldr	r5, [r7, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	3364      	adds	r3, #100	; 0x64
 8003790:	681c      	ldr	r4, [r3, #0]
 8003792:	f011 fc63 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8003796:	4603      	mov	r3, r0
 8003798:	4619      	mov	r1, r3
 800379a:	4628      	mov	r0, r5
 800379c:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)0xD0000000, (void*)0xD0200000, (void*)0);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3388      	adds	r3, #136	; 0x88
 80037a6:	681c      	ldr	r4, [r3, #0]
 80037a8:	2300      	movs	r3, #0
 80037aa:	4a04      	ldr	r2, [pc, #16]	; (80037bc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80037ac:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80037b0:	47a0      	blx	r4
}
 80037b2:	bf00      	nop
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bdb0      	pop	{r4, r5, r7, pc}
 80037ba:	bf00      	nop
 80037bc:	d0200000 	.word	0xd0200000

080037c0 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80037c8:	2109      	movs	r1, #9
 80037ca:	205a      	movs	r0, #90	; 0x5a
 80037cc:	f7ff ffaa 	bl	8003724 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80037d0:	2109      	movs	r1, #9
 80037d2:	2058      	movs	r0, #88	; 0x58
 80037d4:	f7ff ffa6 	bl	8003724 <__NVIC_SetPriority>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80037e8:	205a      	movs	r0, #90	; 0x5a
 80037ea:	f7ff ff59 	bl	80036a0 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80037ee:	2058      	movs	r0, #88	; 0x58
 80037f0:	f7ff ff56 	bl	80036a0 <__NVIC_EnableIRQ>
}
 80037f4:	bf00      	nop
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 8003804:	205a      	movs	r0, #90	; 0x5a
 8003806:	f7ff ff69 	bl	80036dc <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 800380a:	2058      	movs	r0, #88	; 0x58
 800380c:	f7ff ff66 	bl	80036dc <__NVIC_DisableIRQ>
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8003820:	4b11      	ldr	r3, [pc, #68]	; (8003868 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	b29b      	uxth	r3, r3
 8003826:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	4b0e      	ldr	r3, [pc, #56]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8003832:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	b29b      	uxth	r3, r3
 800383a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 8003846:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8003848:	4b08      	ldr	r3, [pc, #32]	; (800386c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 800384a:	881a      	ldrh	r2, [r3, #0]
 800384c:	4b06      	ldr	r3, [pc, #24]	; (8003868 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 800384e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8003850:	4b05      	ldr	r3, [pc, #20]	; (8003868 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003854:	4a04      	ldr	r2, [pc, #16]	; (8003868 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr
 8003868:	50001000 	.word	0x50001000
 800386c:	2400147a 	.word	0x2400147a
 8003870:	2400147c 	.word	0x2400147c

08003874 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4618      	mov	r0, r3
 8003880:	f00f fb92 	bl	8012fa8 <_ZN8touchgfx3HAL10beginFrameEv>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
	...

08003890 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d002      	beq.n	80038a8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 80038a2:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x28>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f00f fb88 	bl	8012fc0 <_ZN8touchgfx3HAL8endFrameEv>
}
 80038b0:	bf00      	nop
 80038b2:	3708      	adds	r7, #8
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	24001478 	.word	0x24001478

080038bc <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80038c4:	4b03      	ldr	r3, [pc, #12]	; (80038d4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	50001084 	.word	0x50001084

080038d8 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80038e2:	4a06      	ldr	r2, [pc, #24]	; (80038fc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80038e8:	4b05      	ldr	r3, [pc, #20]	; (8003900 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	625a      	str	r2, [r3, #36]	; 0x24
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	50001084 	.word	0x50001084
 8003900:	50001000 	.word	0x50001000

08003904 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f00f fb12 	bl	8012f3c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003920:	2b00      	cmp	r3, #0
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d03c      	beq.n	80039a8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xa4>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003930:	2200      	movs	r2, #0
 8003932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003936:	f3bf 8f4f 	dsb	sy
}
 800393a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800393c:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 800393e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003942:	617b      	str	r3, [r7, #20]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	0b5b      	lsrs	r3, r3, #13
 8003948:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800394c:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	08db      	lsrs	r3, r3, #3
 8003952:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003956:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003960:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003966:	4912      	ldr	r1, [pc, #72]	; (80039b0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0xac>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e5a      	subs	r2, r3, #1
 8003972:	60fa      	str	r2, [r7, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d000      	beq.n	8003984 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x80>
      do {
 8003982:	e7e9      	b.n	8003958 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x54>
    } while(sets-- != 0U);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1e5a      	subs	r2, r3, #1
 8003988:	613a      	str	r2, [r7, #16]
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d000      	beq.n	800399a <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x96>
    do {
 8003998:	e7d9      	b.n	800394e <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800399a:	f3bf 8f4f 	dsb	sy
}
 800399e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80039a0:	f3bf 8f6f 	isb	sy
}
 80039a4:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80039a6:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 80039a8:	bf00      	nop
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
 80039c0:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	f00f fc20 	bl	801320e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 80039ce:	4603      	mov	r3, r0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d03c      	beq.n	8003a70 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80039f6:	4b21      	ldr	r3, [pc, #132]	; (8003a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80039fe:	f3bf 8f4f 	dsb	sy
}
 8003a02:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a0a:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	0b5b      	lsrs	r3, r3, #13
 8003a10:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003a14:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a1e:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003a28:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003a2e:	4913      	ldr	r1, [pc, #76]	; (8003a7c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0xa4>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	1e5a      	subs	r2, r3, #1
 8003a3a:	60fa      	str	r2, [r7, #12]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	bf14      	ite	ne
 8003a40:	2301      	movne	r3, #1
 8003a42:	2300      	moveq	r3, #0
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d000      	beq.n	8003a4c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x74>
      do {
 8003a4a:	e7e9      	b.n	8003a20 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x48>
    } while(sets-- != 0U);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1e5a      	subs	r2, r3, #1
 8003a50:	613a      	str	r2, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bf14      	ite	ne
 8003a56:	2301      	movne	r3, #1
 8003a58:	2300      	moveq	r3, #0
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d000      	beq.n	8003a62 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x8a>
    do {
 8003a60:	e7d9      	b.n	8003a16 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003a62:	f3bf 8f4f 	dsb	sy
}
 8003a66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003a68:	f3bf 8f6f 	isb	sy
}
 8003a6c:	bf00      	nop
}
 8003a6e:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003a70:	bf00      	nop
 8003a72:	371c      	adds	r7, #28
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000ed00 	.word	0xe000ed00

08003a80 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003a88:	4b26      	ldr	r3, [pc, #152]	; (8003b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	bf14      	ite	ne
 8003a94:	2301      	movne	r3, #1
 8003a96:	2300      	moveq	r3, #0
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d03c      	beq.n	8003b18 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x98>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003a9e:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003aa6:	f3bf 8f4f 	dsb	sy
}
 8003aaa:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ab2:	617b      	str	r3, [r7, #20]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	0b5b      	lsrs	r3, r3, #13
 8003ab8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003abc:	613b      	str	r3, [r7, #16]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	08db      	lsrs	r3, r3, #3
 8003ac2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac6:	60fb      	str	r3, [r7, #12]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	015a      	lsls	r2, r3, #5
 8003acc:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8003ad0:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003ad6:	4913      	ldr	r1, [pc, #76]	; (8003b24 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0xa4>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	60fa      	str	r2, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	bf14      	ite	ne
 8003ae8:	2301      	movne	r3, #1
 8003aea:	2300      	moveq	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d000      	beq.n	8003af4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x74>
      do {
 8003af2:	e7e9      	b.n	8003ac8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    } while(sets-- != 0U);
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1e5a      	subs	r2, r3, #1
 8003af8:	613a      	str	r2, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	bf14      	ite	ne
 8003afe:	2301      	movne	r3, #1
 8003b00:	2300      	moveq	r3, #0
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d000      	beq.n	8003b0a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x8a>
    do {
 8003b08:	e7d9      	b.n	8003abe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x3e>
  __ASM volatile ("dsb 0xF":::"memory");
 8003b0a:	f3bf 8f4f 	dsb	sy
}
 8003b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003b10:	f3bf 8f6f 	isb	sy
}
 8003b14:	bf00      	nop
}
 8003b16:	bf00      	nop
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003b18:	bf00      	nop
 8003b1a:	371c      	adds	r7, #28
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <HAL_LTDC_LineEventCallback>:

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8003b30:	f7fe fb2c 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	bf0c      	ite	eq
 8003b3a:	2301      	moveq	r3, #1
 8003b3c:	2300      	movne	r3, #0
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d132      	bne.n	8003baa <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_LTDC_LineEventCallback+0x8c>)
 8003b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b48:	4a1b      	ldr	r2, [pc, #108]	; (8003bb8 <HAL_LTDC_LineEventCallback+0x90>)
 8003b4a:	8812      	ldrh	r2, [r2, #0]
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf0c      	ite	eq
 8003b50:	2301      	moveq	r3, #1
 8003b52:	2300      	movne	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d017      	beq.n	8003b8a <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8003b5a:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_LTDC_LineEventCallback+0x94>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f00a feb5 	bl	800e8d0 <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 8003b66:	f7fe fb11 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fd85 	bl	800367c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8003b72:	f7fe fa05 	bl	8001f80 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 8003b76:	f7fe fb09 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f00f ff71 	bl	8013a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fd fe2c 	bl	80017e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8003b88:	e010      	b.n	8003bac <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_LTDC_LineEventCallback+0x90>)
 8003b8c:	881b      	ldrh	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f00a fe9d 	bl	800e8d0 <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 8003b96:	f7fe faf9 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fd5f 	bl	8003660 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f7fd fe78 	bl	8001898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8003ba8:	e000      	b.n	8003bac <HAL_LTDC_LineEventCallback+0x84>
            return;
 8003baa:	bf00      	nop
        }
    }
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	50001000 	.word	0x50001000
 8003bb8:	2400147a 	.word	0x2400147a
 8003bbc:	2400147c 	.word	0x2400147c

08003bc0 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
    switch (typography)
 8003bcc:	887b      	ldrh	r3, [r7, #2]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d010      	beq.n	8003bf4 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	dc13      	bgt.n	8003bfe <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8003bde:	e00e      	b.n	8003bfe <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003be0:	f002 fb8c 	bl	80062fc <_ZN17TypedTextDatabase8getFontsEv>
 8003be4:	4603      	mov	r3, r0
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	e00a      	b.n	8003c00 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003bea:	f002 fb87 	bl	80062fc <_ZN17TypedTextDatabase8getFontsEv>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	e005      	b.n	8003c00 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003bf4:	f002 fb82 	bl	80062fc <_ZN17TypedTextDatabase8getFontsEv>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	e000      	b.n	8003c00 <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 8003bfe:	2300      	movs	r3, #0
    }
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8003c0c:	4b02      	ldr	r3, [pc, #8]	; (8003c18 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	08025734 	.word	0x08025734

08003c1c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8003c20:	2302      	movs	r3, #2
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    {
 8003c34:	4a04      	ldr	r2, [pc, #16]	; (8003c48 <_ZN8touchgfx4FontD1Ev+0x1c>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
    }
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	08025a04 	.word	0x08025a04

08003c4c <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
    }
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff ffe9 	bl	8003c2c <_ZN8touchgfx4FontD1Ev>
 8003c5a:	2110      	movs	r1, #16
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f01f fb68 	bl	8023332 <_ZdlPvj>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003c6c:	b590      	push	{r4, r7, lr}
 8003c6e:	b087      	sub	sp, #28
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 8003c78:	887b      	ldrh	r3, [r7, #2]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	e010      	b.n	8003ca4 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3308      	adds	r3, #8
 8003c90:	681c      	ldr	r4, [r3, #0]
 8003c92:	f107 030f 	add.w	r3, r7, #15
 8003c96:	f107 0210 	add.w	r2, r7, #16
 8003c9a:	8879      	ldrh	r1, [r7, #2]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	47a0      	blx	r4
 8003ca0:	6178      	str	r0, [r7, #20]
        return glyph;
 8003ca2:	697b      	ldr	r3, [r7, #20]
    }
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd90      	pop	{r4, r7, pc}

08003cac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	895b      	ldrh	r3, [r3, #10]
    }
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	899b      	ldrh	r3, [r3, #12]
    }
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	889b      	ldrh	r3, [r3, #4]
    }
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	889a      	ldrh	r2, [r3, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	799b      	ldrb	r3, [r3, #6]
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	b29b      	uxth	r3, r3
    }
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	79db      	ldrb	r3, [r3, #7]
 8003d22:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8003d26:	b2db      	uxtb	r3, r3
    }
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	79db      	ldrb	r3, [r3, #7]
 8003d40:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003d44:	b2db      	uxtb	r3, r3
    }
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	4a05      	ldr	r2, [pc, #20]	; (8003d74 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f7ff ff61 	bl	8003c2c <_ZN8touchgfx4FontD1Ev>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}
 8003d74:	080260a4 	.word	0x080260a4

08003d78 <_ZN8touchgfx9ConstFontD0Ev>:
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b082      	sub	sp, #8
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffe7 	bl	8003d54 <_ZN8touchgfx9ConstFontD1Ev>
 8003d86:	2118      	movs	r1, #24
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f01f fad2 	bl	8023332 <_ZdlPvj>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4618      	mov	r0, r3
 8003d92:	3708      	adds	r7, #8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	4a05      	ldr	r2, [pc, #20]	; (8003db8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ffd3 	bl	8003d54 <_ZN8touchgfx9ConstFontD1Ev>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	080257ac 	.word	0x080257ac

08003dbc <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ffe7 	bl	8003d98 <_ZN8touchgfx13GeneratedFontD1Ev>
 8003dca:	2128      	movs	r1, #40	; 0x28
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f01f fab0 	bl	8023332 <_ZdlPvj>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_ZN8touchgfx3HAL3lcdEv>:
    static LCD& lcd()
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003df8:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <_ZN8touchgfx3HAL3lcdEv+0x22>
 8003e04:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <_ZN8touchgfx3HAL3lcdEv+0x22>
            return *instance->auxiliaryLCD;
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e14:	e002      	b.n	8003e1c <_ZN8touchgfx3HAL3lcdEv+0x28>
        return instance->lcdRef;
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
    }
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	2400af34 	.word	0x2400af34

08003e2c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 8003e34:	4a07      	ldr	r2, [pc, #28]	; (8003e54 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	601a      	str	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	721a      	strb	r2, [r3, #8]
    {
    }
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	08025788 	.word	0x08025788

08003e58 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    {
 8003e60:	4a04      	ldr	r2, [pc, #16]	; (8003e74 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	601a      	str	r2, [r3, #0]
    }
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	08025788 	.word	0x08025788

08003e78 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
    }
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff ffe9 	bl	8003e58 <_ZN8touchgfx10TransitionD1Ev>
 8003e86:	210c      	movs	r1, #12
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f01f fa52 	bl	8023332 <_ZdlPvj>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
    {
    }
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    {
    }
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
    {
    }
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 8003edc:	f011 f8be 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f011 fc60 	bl	80157a8 <_ZN8touchgfx11Application10invalidateEv>
    }
 8003ee8:	bf00      	nop
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	605a      	str	r2, [r3, #4]
    }
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication()
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
          pendingScreenTransitionCallback(0)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f011 f8c2 	bl	80150a0 <_ZN8touchgfx11ApplicationC1Ev>
 8003f1c:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        instance = this;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a04      	ldr	r2, [pc, #16]	; (8003f48 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 8003f36:	6013      	str	r3, [r2, #0]
    }
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	080255a0 	.word	0x080255a0
 8003f48:	2400af80 	.word	0x2400af80

08003f4c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]
    }
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	721a      	strb	r2, [r3, #8]
    }
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	605a      	str	r2, [r3, #4]
    }
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff ffac 	bl	8003f0c <_ZN8touchgfx14MVPApplicationC1Ev>
 8003fb4:	4a12      	ldr	r2, [pc, #72]	; (8004000 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	601a      	str	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 f929 	bl	8004218 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003fd6:	f7fe f8d9 	bl	800218c <_ZN8touchgfx3HAL11getInstanceEv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	3208      	adds	r2, #8
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003fe8:	f7ff ff04 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 8003fec:	4603      	mov	r3, r0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f018 fa9b 	bl	801c52a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	0802553c 	.word	0x0802553c

08004004 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ffe9 	bl	8004004 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	3308      	adds	r3, #8
 8004040:	3208      	adds	r2, #8
 8004042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004046:	e883 0003 	stmia.w	r3, {r0, r1}
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 8004054:	b590      	push	{r4, r7, lr}
 8004056:	b089      	sub	sp, #36	; 0x24
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	f107 0008 	add.w	r0, r7, #8
 800406e:	f107 0318 	add.w	r3, r7, #24
 8004072:	cb0c      	ldmia	r3, {r2, r3}
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	f000 f8eb 	bl	8004250 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800407a:	f107 0308 	add.w	r3, r7, #8
 800407e:	4619      	mov	r1, r3
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff ffcb 	bl	800401c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004086:	f107 0308 	add.w	r3, r7, #8
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f9c0 	bl	8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800409c:	bf00      	nop
 800409e:	3724      	adds	r7, #36	; 0x24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd90      	pop	{r4, r7, pc}
 80040a4:	080040a9 	.word	0x080040a9

080040a8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80040bc:	461a      	mov	r2, r3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4b04      	ldr	r3, [pc, #16]	; (80040d8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 80040ca:	f000 f8f3 	bl	80042b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	2400af74 	.word	0x2400af74
 80040dc:	2400af70 	.word	0x2400af70

080040e0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenNoTransition()
{
 80040e0:	b590      	push	{r4, r7, lr}
 80040e2:	b089      	sub	sp, #36	; 0x24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenNoTransitionImpl);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv+0x50>)
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	2300      	movs	r3, #0
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	f107 0008 	add.w	r0, r7, #8
 80040fa:	f107 0318 	add.w	r3, r7, #24
 80040fe:	cb0c      	ldmia	r3, {r2, r3}
 8004100:	6879      	ldr	r1, [r7, #4]
 8004102:	f000 f8a5 	bl	8004250 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004106:	f107 0308 	add.w	r3, r7, #8
 800410a:	4619      	mov	r1, r3
 800410c:	4620      	mov	r0, r4
 800410e:	f7ff ff85 	bl	800401c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 8004112:	f107 0308 	add.w	r3, r7, #8
 8004116:	4618      	mov	r0, r3
 8004118:	f7ff f97a 	bl	8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 8004128:	bf00      	nop
 800412a:	3724      	adds	r7, #36	; 0x24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}
 8004130:	08004135 	.word	0x08004135

08004134 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenNoTransitionImpl()
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af02      	add	r7, sp, #8
 800413a:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen2View, Screen2Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004148:	461a      	mov	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	4b04      	ldr	r3, [pc, #16]	; (8004164 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x30>)
 8004154:	4804      	ldr	r0, [pc, #16]	; (8004168 <_ZN23FrontendApplicationBase33gotoScreen2ScreenNoTransitionImplEv+0x34>)
 8004156:	f000 f9c7 	bl	80044e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	2400af74 	.word	0x2400af74
 8004168:	2400af70 	.word	0x2400af70

0800416c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>:

// Screen3

void FrontendApplicationBase::gotoScreen3ScreenNoTransition()
{
 800416c:	b590      	push	{r4, r7, lr}
 800416e:	b089      	sub	sp, #36	; 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen3ScreenNoTransitionImpl);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv+0x50>)
 800417c:	61bb      	str	r3, [r7, #24]
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	f107 0008 	add.w	r0, r7, #8
 8004186:	f107 0318 	add.w	r3, r7, #24
 800418a:	cb0c      	ldmia	r3, {r2, r3}
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	f000 f85f 	bl	8004250 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4619      	mov	r1, r3
 8004198:	4620      	mov	r0, r4
 800419a:	f7ff ff3f 	bl	800401c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f934 	bl	8003410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 80041b4:	bf00      	nop
 80041b6:	3724      	adds	r7, #36	; 0x24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd90      	pop	{r4, r7, pc}
 80041bc:	080041c1 	.word	0x080041c1

080041c0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen3ScreenNoTransitionImpl()
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen3View, Screen3Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80041d4:	461a      	mov	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	4b04      	ldr	r3, [pc, #16]	; (80041f0 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x30>)
 80041e0:	4804      	ldr	r0, [pc, #16]	; (80041f4 <_ZN23FrontendApplicationBase33gotoScreen3ScreenNoTransitionImplEv+0x34>)
 80041e2:	f000 fa9b 	bl	800471c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 80041e6:	bf00      	nop
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	2400af74 	.word	0x2400af74
 80041f4:	2400af70 	.word	0x2400af70

080041f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	4a04      	ldr	r2, [pc, #16]	; (8004214 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	080255ec 	.word	0x080255ec

08004218 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback()
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4618      	mov	r0, r3
 8004224:	f7ff ffe8 	bl	80041f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004228:	4a08      	ldr	r2, [pc, #32]	; (800424c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	601a      	str	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	605a      	str	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	60da      	str	r2, [r3, #12]
    }
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	08025588 	.word	0x08025588

08004250 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4639      	mov	r1, r7
 800425c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff ffc8 	bl	80041f8 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 8004268:	4a08      	ldr	r2, [pc, #32]	; (800428c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	605a      	str	r2, [r3, #4]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3308      	adds	r3, #8
 8004278:	463a      	mov	r2, r7
 800427a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800427e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	08025588 	.word	0x08025588

08004290 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4618      	mov	r0, r3
 800429c:	f7ff fdc6 	bl	8003e2c <_ZN8touchgfx10TransitionC1Ev>
 80042a0:	4a03      	ldr	r2, [pc, #12]	; (80042b0 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	601a      	str	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08025764 	.word	0x08025764

080042b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80042b4:	b590      	push	{r4, r7, lr}
 80042b6:	b08f      	sub	sp, #60	; 0x3c
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	607a      	str	r2, [r7, #4]
 80042c0:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	3320      	adds	r3, #32
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4610      	mov	r0, r2
 80042d2:	4798      	blx	r3
 80042d4:	4603      	mov	r3, r0
 80042d6:	2baf      	cmp	r3, #175	; 0xaf
 80042d8:	d805      	bhi.n	80042e6 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 80042da:	4b7e      	ldr	r3, [pc, #504]	; (80044d4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 80042dc:	4a7e      	ldr	r2, [pc, #504]	; (80044d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 80042de:	21a3      	movs	r1, #163	; 0xa3
 80042e0:	487e      	ldr	r0, [pc, #504]	; (80044dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 80042e2:	f01f f855 	bl	8023390 <__assert_func>
 80042e6:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3320      	adds	r3, #32
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4610      	mov	r0, r2
 80042f8:	4798      	blx	r3
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b0f      	cmp	r3, #15
 80042fe:	d805      	bhi.n	800430c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004300:	4b77      	ldr	r3, [pc, #476]	; (80044e0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004302:	4a75      	ldr	r2, [pc, #468]	; (80044d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004304:	21a4      	movs	r1, #164	; 0xa4
 8004306:	4875      	ldr	r0, [pc, #468]	; (80044dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004308:	f01f f842 	bl	8023390 <__assert_func>
 800430c:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3320      	adds	r3, #32
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4610      	mov	r0, r2
 800431e:	4798      	blx	r3
 8004320:	4603      	mov	r3, r0
 8004322:	2b0b      	cmp	r3, #11
 8004324:	d805      	bhi.n	8004332 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 8004326:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004328:	4a6b      	ldr	r2, [pc, #428]	; (80044d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800432a:	21a5      	movs	r1, #165	; 0xa5
 800432c:	486b      	ldr	r0, [pc, #428]	; (80044dc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800432e:	f01f f82f 	bl	8023390 <__assert_func>
 8004332:	bf00      	nop
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004340:	f010 fe8c 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8004344:	4603      	mov	r3, r0
 8004346:	4618      	mov	r0, r3
 8004348:	f010 fe8e 	bl	8015068 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4610      	mov	r0, r2
 8004364:	4798      	blx	r3
    if (*currentTrans)
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800436e:	6a3b      	ldr	r3, [r7, #32]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	6a3b      	ldr	r3, [r7, #32]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4610      	mov	r0, r2
 800437c:	4798      	blx	r3
    if (*currentScreen)
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 8004386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3314      	adds	r3, #20
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4610      	mov	r0, r2
 8004396:	4798      	blx	r3
    if (*currentPresenter)
 8004398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3304      	adds	r3, #4
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4610      	mov	r0, r2
 80043b0:	4798      	blx	r3
    if (*currentScreen)
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d007      	beq.n	80043ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80043ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4610      	mov	r0, r2
 80043c8:	4798      	blx	r3
    if (*currentPresenter)
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3308      	adds	r3, #8
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4610      	mov	r0, r2
 80043e2:	4798      	blx	r3
}
 80043e4:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2100      	movs	r1, #0
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 faaf 	bl	8004950 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 80043f2:	4603      	mov	r3, r0
 80043f4:	4619      	mov	r1, r3
 80043f6:	200c      	movs	r0, #12
 80043f8:	f7ff fcf0 	bl	8003ddc <_ZnwjPv>
 80043fc:	4604      	mov	r4, r0
 80043fe:	4620      	mov	r0, r4
 8004400:	f7ff ff46 	bl	8004290 <_ZN8touchgfx12NoTransitionC1Ev>
 8004404:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2100      	movs	r1, #0
 800440c:	4618      	mov	r0, r3
 800440e:	f000 fab2 	bl	8004976 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 8004412:	4603      	mov	r3, r0
 8004414:	4619      	mov	r1, r3
 8004416:	20b0      	movs	r0, #176	; 0xb0
 8004418:	f7ff fce0 	bl	8003ddc <_ZnwjPv>
 800441c:	4604      	mov	r4, r0
 800441e:	4620      	mov	r0, r4
 8004420:	f002 f8d0 	bl	80065c4 <_ZN11Screen1ViewC1Ev>
 8004424:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2100      	movs	r1, #0
 800442c:	4618      	mov	r0, r3
 800442e:	f000 fab5 	bl	800499c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 8004432:	4603      	mov	r3, r0
 8004434:	4619      	mov	r1, r3
 8004436:	2010      	movs	r0, #16
 8004438:	f7ff fcd0 	bl	8003ddc <_ZnwjPv>
 800443c:	4604      	mov	r4, r0
 800443e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004440:	4620      	mov	r0, r4
 8004442:	f002 f869 	bl	8006518 <_ZN16Screen1PresenterC1ER11Screen1View>
 8004446:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800444c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004452:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004458:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800445a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004462:	3304      	adds	r3, #4
 8004464:	e000      	b.n	8004468 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 8004466:	2300      	movs	r3, #0
 8004468:	4619      	mov	r1, r3
 800446a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800446c:	f7ff fd6e 	bl	8003f4c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 8004470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004472:	3304      	adds	r3, #4
 8004474:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004476:	4618      	mov	r0, r3
 8004478:	f7ff fd83 	bl	8003f82 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004480:	4618      	mov	r0, r3
 8004482:	f000 fa9e 	bl	80049c2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	69f8      	ldr	r0, [r7, #28]
 800449c:	4798      	blx	r3
    newPresenter->activate();
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69b8      	ldr	r0, [r7, #24]
 80044a6:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	69f8      	ldr	r0, [r7, #28]
 80044ac:	f012 f9b4 	bl	8016818 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3310      	adds	r3, #16
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	4798      	blx	r3
    newTransition->invalidate();
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	4798      	blx	r3
}
 80044c8:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	373c      	adds	r7, #60	; 0x3c
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd90      	pop	{r4, r7, pc}
 80044d4:	08024a18 	.word	0x08024a18
 80044d8:	08024aa8 	.word	0x08024aa8
 80044dc:	08024bac 	.word	0x08024bac
 80044e0:	08024c04 	.word	0x08024c04
 80044e4:	08024ca8 	.word	0x08024ca8

080044e8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 80044e8:	b590      	push	{r4, r7, lr}
 80044ea:	b08f      	sub	sp, #60	; 0x3c
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	3320      	adds	r3, #32
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
 8004508:	4603      	mov	r3, r0
 800450a:	2baf      	cmp	r3, #175	; 0xaf
 800450c:	d805      	bhi.n	800451a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800450e:	4b7e      	ldr	r3, [pc, #504]	; (8004708 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004510:	4a7e      	ldr	r2, [pc, #504]	; (800470c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004512:	21a3      	movs	r1, #163	; 0xa3
 8004514:	487e      	ldr	r0, [pc, #504]	; (8004710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004516:	f01e ff3b 	bl	8023390 <__assert_func>
 800451a:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3320      	adds	r3, #32
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4610      	mov	r0, r2
 800452c:	4798      	blx	r3
 800452e:	4603      	mov	r3, r0
 8004530:	2b0f      	cmp	r3, #15
 8004532:	d805      	bhi.n	8004540 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004534:	4b77      	ldr	r3, [pc, #476]	; (8004714 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 8004536:	4a75      	ldr	r2, [pc, #468]	; (800470c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004538:	21a4      	movs	r1, #164	; 0xa4
 800453a:	4875      	ldr	r0, [pc, #468]	; (8004710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800453c:	f01e ff28 	bl	8023390 <__assert_func>
 8004540:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3320      	adds	r3, #32
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4610      	mov	r0, r2
 8004552:	4798      	blx	r3
 8004554:	4603      	mov	r3, r0
 8004556:	2b0b      	cmp	r3, #11
 8004558:	d805      	bhi.n	8004566 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800455a:	4b6f      	ldr	r3, [pc, #444]	; (8004718 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800455c:	4a6b      	ldr	r2, [pc, #428]	; (800470c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800455e:	21a5      	movs	r1, #165	; 0xa5
 8004560:	486b      	ldr	r0, [pc, #428]	; (8004710 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004562:	f01e ff15 	bl	8023390 <__assert_func>
 8004566:	bf00      	nop
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 8004574:	f010 fd72 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8004578:	4603      	mov	r3, r0
 800457a:	4618      	mov	r0, r3
 800457c:	f010 fd74 	bl	8015068 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d008      	beq.n	800459a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	330c      	adds	r3, #12
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4610      	mov	r0, r2
 8004598:	4798      	blx	r3
    if (*currentTrans)
 800459a:	6a3b      	ldr	r3, [r7, #32]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	6a3b      	ldr	r3, [r7, #32]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4610      	mov	r0, r2
 80045b0:	4798      	blx	r3
    if (*currentScreen)
 80045b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d008      	beq.n	80045cc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3314      	adds	r3, #20
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4610      	mov	r0, r2
 80045ca:	4798      	blx	r3
    if (*currentPresenter)
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3304      	adds	r3, #4
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4610      	mov	r0, r2
 80045e4:	4798      	blx	r3
    if (*currentScreen)
 80045e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4610      	mov	r0, r2
 80045fc:	4798      	blx	r3
    if (*currentPresenter)
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4610      	mov	r0, r2
 8004616:	4798      	blx	r3
}
 8004618:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f000 f995 	bl	8004950 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 8004626:	4603      	mov	r3, r0
 8004628:	4619      	mov	r1, r3
 800462a:	200c      	movs	r0, #12
 800462c:	f7ff fbd6 	bl	8003ddc <_ZnwjPv>
 8004630:	4604      	mov	r4, r0
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff fe2c 	bl	8004290 <_ZN8touchgfx12NoTransitionC1Ev>
 8004638:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 f9cc 	bl	80049de <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 8004646:	4603      	mov	r3, r0
 8004648:	4619      	mov	r1, r3
 800464a:	20b0      	movs	r0, #176	; 0xb0
 800464c:	f7ff fbc6 	bl	8003ddc <_ZnwjPv>
 8004650:	4604      	mov	r4, r0
 8004652:	4620      	mov	r0, r4
 8004654:	f002 f86a 	bl	800672c <_ZN11Screen2ViewC1Ev>
 8004658:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2100      	movs	r1, #0
 8004660:	4618      	mov	r0, r3
 8004662:	f000 f9cf 	bl	8004a04 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 8004666:	4603      	mov	r3, r0
 8004668:	4619      	mov	r1, r3
 800466a:	2010      	movs	r0, #16
 800466c:	f7ff fbb6 	bl	8003ddc <_ZnwjPv>
 8004670:	4604      	mov	r4, r0
 8004672:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004674:	4620      	mov	r0, r4
 8004676:	f002 f803 	bl	8006680 <_ZN16Screen2PresenterC1ER11Screen2View>
 800467a:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004680:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004686:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800468c:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 8004694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004696:	3304      	adds	r3, #4
 8004698:	e000      	b.n	800469c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800469a:	2300      	movs	r3, #0
 800469c:	4619      	mov	r1, r3
 800469e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80046a0:	f7ff fc54 	bl	8003f4c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	3304      	adds	r3, #4
 80046a8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff fc69 	bl	8003f82 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80046b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 f9b8 	bl	8004a2a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046c4:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	330c      	adds	r3, #12
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	69f8      	ldr	r0, [r7, #28]
 80046d0:	4798      	blx	r3
    newPresenter->activate();
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	69b8      	ldr	r0, [r7, #24]
 80046da:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 80046dc:	6979      	ldr	r1, [r7, #20]
 80046de:	69f8      	ldr	r0, [r7, #28]
 80046e0:	f012 f89a 	bl	8016818 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	3310      	adds	r3, #16
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6978      	ldr	r0, [r7, #20]
 80046ee:	4798      	blx	r3
    newTransition->invalidate();
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3314      	adds	r3, #20
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	4798      	blx	r3
}
 80046fc:	bf00      	nop
    return newPresenter;
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004700:	4618      	mov	r0, r3
 8004702:	373c      	adds	r7, #60	; 0x3c
 8004704:	46bd      	mov	sp, r7
 8004706:	bd90      	pop	{r4, r7, pc}
 8004708:	08024a18 	.word	0x08024a18
 800470c:	08024d4c 	.word	0x08024d4c
 8004710:	08024bac 	.word	0x08024bac
 8004714:	08024c04 	.word	0x08024c04
 8004718:	08024ca8 	.word	0x08024ca8

0800471c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800471c:	b590      	push	{r4, r7, lr}
 800471e:	b08f      	sub	sp, #60	; 0x3c
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689a      	ldr	r2, [r3, #8]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3320      	adds	r3, #32
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4610      	mov	r0, r2
 800473a:	4798      	blx	r3
 800473c:	4603      	mov	r3, r0
 800473e:	2baf      	cmp	r3, #175	; 0xaf
 8004740:	d805      	bhi.n	800474e <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 8004742:	4b7e      	ldr	r3, [pc, #504]	; (800493c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 8004744:	4a7e      	ldr	r2, [pc, #504]	; (8004940 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004746:	21a3      	movs	r1, #163	; 0xa3
 8004748:	487e      	ldr	r0, [pc, #504]	; (8004944 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800474a:	f01e fe21 	bl	8023390 <__assert_func>
 800474e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3320      	adds	r3, #32
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4610      	mov	r0, r2
 8004760:	4798      	blx	r3
 8004762:	4603      	mov	r3, r0
 8004764:	2b0f      	cmp	r3, #15
 8004766:	d805      	bhi.n	8004774 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 8004768:	4b77      	ldr	r3, [pc, #476]	; (8004948 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800476a:	4a75      	ldr	r2, [pc, #468]	; (8004940 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800476c:	21a4      	movs	r1, #164	; 0xa4
 800476e:	4875      	ldr	r0, [pc, #468]	; (8004944 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004770:	f01e fe0e 	bl	8023390 <__assert_func>
 8004774:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3320      	adds	r3, #32
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4610      	mov	r0, r2
 8004786:	4798      	blx	r3
 8004788:	4603      	mov	r3, r0
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d805      	bhi.n	800479a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800478e:	4b6f      	ldr	r3, [pc, #444]	; (800494c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 8004790:	4a6b      	ldr	r2, [pc, #428]	; (8004940 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 8004792:	21a5      	movs	r1, #165	; 0xa5
 8004794:	486b      	ldr	r0, [pc, #428]	; (8004944 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 8004796:	f01e fdfb 	bl	8023390 <__assert_func>
 800479a:	bf00      	nop
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 80047a8:	f010 fc58 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4618      	mov	r0, r3
 80047b0:	f010 fc5a 	bl	8015068 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 80047b4:	6a3b      	ldr	r3, [r7, #32]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4610      	mov	r0, r2
 80047cc:	4798      	blx	r3
    if (*currentTrans)
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 80047d6:	6a3b      	ldr	r3, [r7, #32]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4610      	mov	r0, r2
 80047e4:	4798      	blx	r3
    if (*currentScreen)
 80047e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d008      	beq.n	8004800 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 80047ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3314      	adds	r3, #20
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4610      	mov	r0, r2
 80047fe:	4798      	blx	r3
    if (*currentPresenter)
 8004800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3304      	adds	r3, #4
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4610      	mov	r0, r2
 8004818:	4798      	blx	r3
    if (*currentScreen)
 800481a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 8004822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4610      	mov	r0, r2
 8004830:	4798      	blx	r3
    if (*currentPresenter)
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d008      	beq.n	800484c <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800483a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
}
 800484c:	bf00      	nop
    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2100      	movs	r1, #0
 8004854:	4618      	mov	r0, r3
 8004856:	f000 f87b 	bl	8004950 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800485a:	4603      	mov	r3, r0
 800485c:	4619      	mov	r1, r3
 800485e:	200c      	movs	r0, #12
 8004860:	f7ff fabc 	bl	8003ddc <_ZnwjPv>
 8004864:	4604      	mov	r4, r0
 8004866:	4620      	mov	r0, r4
 8004868:	f7ff fd12 	bl	8004290 <_ZN8touchgfx12NoTransitionC1Ev>
 800486c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f8e6 	bl	8004a46 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>
 800487a:	4603      	mov	r3, r0
 800487c:	4619      	mov	r1, r3
 800487e:	20b0      	movs	r0, #176	; 0xb0
 8004880:	f7ff faac 	bl	8003ddc <_ZnwjPv>
 8004884:	4604      	mov	r4, r0
 8004886:	4620      	mov	r0, r4
 8004888:	f002 f804 	bl	8006894 <_ZN11Screen3ViewC1Ev>
 800488c:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2100      	movs	r1, #0
 8004894:	4618      	mov	r0, r3
 8004896:	f000 f8e9 	bl	8004a6c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>
 800489a:	4603      	mov	r3, r0
 800489c:	4619      	mov	r1, r3
 800489e:	2010      	movs	r0, #16
 80048a0:	f7ff fa9c 	bl	8003ddc <_ZnwjPv>
 80048a4:	4604      	mov	r4, r0
 80048a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048a8:	4620      	mov	r0, r4
 80048aa:	f001 ff9d 	bl	80067e8 <_ZN16Screen3PresenterC1ER11Screen3View>
 80048ae:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048b4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ba:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048c0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	3304      	adds	r3, #4
 80048cc:	e000      	b.n	80048d0 <_ZN8touchgfx14makeTransitionI11Screen3View16Screen3PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 80048ce:	2300      	movs	r3, #0
 80048d0:	4619      	mov	r1, r3
 80048d2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80048d4:	f7ff fb3a 	bl	8003f4c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 80048d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048da:	3304      	adds	r3, #4
 80048dc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048de:	4618      	mov	r0, r3
 80048e0:	f7ff fb4f 	bl	8003f82 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 f8d2 	bl	8004a92 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f4:	61bb      	str	r3, [r7, #24]
 80048f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f8:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	330c      	adds	r3, #12
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69f8      	ldr	r0, [r7, #28]
 8004904:	4798      	blx	r3
    newPresenter->activate();
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69b8      	ldr	r0, [r7, #24]
 800490e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8004910:	6979      	ldr	r1, [r7, #20]
 8004912:	69f8      	ldr	r0, [r7, #28]
 8004914:	f011 ff80 	bl	8016818 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3310      	adds	r3, #16
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6978      	ldr	r0, [r7, #20]
 8004922:	4798      	blx	r3
    newTransition->invalidate();
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	6978      	ldr	r0, [r7, #20]
 800492e:	4798      	blx	r3
}
 8004930:	bf00      	nop
    return newPresenter;
 8004932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004934:	4618      	mov	r0, r3
 8004936:	373c      	adds	r7, #60	; 0x3c
 8004938:	46bd      	mov	sp, r7
 800493a:	bd90      	pop	{r4, r7, pc}
 800493c:	08024a18 	.word	0x08024a18
 8004940:	08024e50 	.word	0x08024e50
 8004944:	08024bac 	.word	0x08024bac
 8004948:	08024c04 	.word	0x08024c04
 800494c:	08024ca8 	.word	0x08024ca8

08004950 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3324      	adds	r3, #36	; 0x24
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	887a      	ldrh	r2, [r7, #2]
 8004966:	4611      	mov	r1, r2
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4798      	blx	r3
 800496c:	4603      	mov	r3, r0
    }
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 8004976:	b580      	push	{r7, lr}
 8004978:	b082      	sub	sp, #8
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3324      	adds	r3, #36	; 0x24
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	4611      	mov	r1, r2
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	4798      	blx	r3
 8004992:	4603      	mov	r3, r0
    }
 8004994:	4618      	mov	r0, r3
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3324      	adds	r3, #36	; 0x24
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	887a      	ldrh	r2, [r7, #2]
 80049b2:	4611      	mov	r1, r2
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	4798      	blx	r3
 80049b8:	4603      	mov	r3, r0
    }
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3324      	adds	r3, #36	; 0x24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	887a      	ldrh	r2, [r7, #2]
 80049f4:	4611      	mov	r1, r2
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
 80049fa:	4603      	mov	r3, r0
    }
 80049fc:	4618      	mov	r0, r3
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3324      	adds	r3, #36	; 0x24
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	887a      	ldrh	r2, [r7, #2]
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
 8004a20:	4603      	mov	r3, r0
    }
 8004a22:	4618      	mov	r0, r3
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
 8004a32:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	683a      	ldr	r2, [r7, #0]
 8004a38:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <_ZN8touchgfx17AbstractPartition2atI11Screen3ViewEERT_t>:
    T& at(const uint16_t index)
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b082      	sub	sp, #8
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	4798      	blx	r3
 8004a62:	4603      	mov	r3, r0
    }
 8004a64:	4618      	mov	r0, r3
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <_ZN8touchgfx17AbstractPartition2atI16Screen3PresenterEERT_t>:
    T& at(const uint16_t index)
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3324      	adds	r3, #36	; 0x24
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	887a      	ldrh	r2, [r7, #2]
 8004a82:	4611      	mov	r1, r2
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
 8004a88:	4603      	mov	r3, r0
    }
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN8touchgfx4ViewI16Screen3PresenterE4bindERS1_>:
    void bind(T& newPresenter)
 8004a92:	b480      	push	{r7}
 8004a94:	b083      	sub	sp, #12
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	6039      	str	r1, [r7, #0]
        presenter = &newPresenter;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8004aa2:	bf00      	nop
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
	...

08004ab0 <_ZN8touchgfx12NoTransitionD1Ev>:
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	4a05      	ldr	r2, [pc, #20]	; (8004ad0 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7ff f9c9 	bl	8003e58 <_ZN8touchgfx10TransitionD1Ev>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	08025764 	.word	0x08025764

08004ad4 <_ZN8touchgfx12NoTransitionD0Ev>:
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7ff ffe7 	bl	8004ab0 <_ZN8touchgfx12NoTransitionD1Ev>
 8004ae2:	210c      	movs	r1, #12
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f01e fc24 	bl	8023332 <_ZdlPvj>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	4618      	mov	r0, r3
 8004aee:	3708      	adds	r7, #8
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
    }
 8004b00:	4618      	mov	r0, r3
 8004b02:	370c      	adds	r7, #12
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr

08004b0c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 8004b18:	4618      	mov	r0, r3
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b08c      	sub	sp, #48	; 0x30
 8004b28:	af08      	add	r7, sp, #32
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	4611      	mov	r1, r2
 8004b30:	461a      	mov	r2, r3
 8004b32:	460b      	mov	r3, r1
 8004b34:	80fb      	strh	r3, [r7, #6]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	88b9      	ldrh	r1, [r7, #4]
 8004b3e:	88fa      	ldrh	r2, [r7, #6]
 8004b40:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b42:	9306      	str	r3, [sp, #24]
 8004b44:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b46:	9305      	str	r3, [sp, #20]
 8004b48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004b52:	9303      	str	r3, [sp, #12]
 8004b54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b58:	9302      	str	r3, [sp, #8]
 8004b5a:	7f3b      	ldrb	r3, [r7, #28]
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	7e3b      	ldrb	r3, [r7, #24]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	460b      	mov	r3, r1
 8004b64:	68b9      	ldr	r1, [r7, #8]
 8004b66:	f011 fabf 	bl	80160e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b74:	619a      	str	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b7a:	61da      	str	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b80:	621a      	str	r2, [r3, #32]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b86:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	080257ac 	.word	0x080257ac

08004b98 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	889b      	ldrh	r3, [r3, #4]
 8004bac:	0adb      	lsrs	r3, r3, #11
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4413      	add	r3, r2
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b089      	sub	sp, #36	; 0x24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	60f8      	str	r0, [r7, #12]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	607a      	str	r2, [r7, #4]
 8004bd6:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	7b1b      	ldrb	r3, [r3, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	e030      	b.n	8004c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	7b5b      	ldrb	r3, [r3, #13]
 8004bf6:	021b      	lsls	r3, r3, #8
 8004bf8:	b21b      	sxth	r3, r3
 8004bfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004bfe:	b219      	sxth	r1, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	7adb      	ldrb	r3, [r3, #11]
 8004c04:	b21b      	sxth	r3, r3
 8004c06:	430b      	orrs	r3, r1
 8004c08:	b21b      	sxth	r3, r3
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7b1b      	ldrb	r3, [r3, #12]
 8004c16:	837b      	strh	r3, [r7, #26]
 8004c18:	8b7b      	ldrh	r3, [r7, #26]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d015      	beq.n	8004c4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	881b      	ldrh	r3, [r3, #0]
 8004c22:	897a      	ldrh	r2, [r7, #10]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d103      	bne.n	8004c30 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8004c2e:	e00d      	b.n	8004c4c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	897a      	ldrh	r2, [r7, #10]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d306      	bcc.n	8004c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004c3a:	8b7b      	ldrh	r3, [r7, #26]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	837b      	strh	r3, [r7, #26]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	3304      	adds	r3, #4
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	e7e7      	b.n	8004c18 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 8004c48:	bf00      	nop
        }
    }
    return 0;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3724      	adds	r7, #36	; 0x24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
        : color(col)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	601a      	str	r2, [r3, #0]
    }
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	370c      	adds	r7, #12
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	460b      	mov	r3, r1
 8004c80:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	887a      	ldrh	r2, [r7, #2]
 8004c86:	801a      	strh	r2, [r3, #0]
    {
    }
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 8004ca0:	4a14      	ldr	r2, [pc, #80]	; (8004cf4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	3304      	adds	r3, #4
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd fdce 	bl	800284c <_ZN8touchgfx4RectC1Ev>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7fd fdc9 	bl	800284c <_ZN8touchgfx4RectC1Ev>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	619a      	str	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	61da      	str	r2, [r3, #28]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	841a      	strh	r2, [r3, #32]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	845a      	strh	r2, [r3, #34]	; 0x22
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	0802603c 	.word	0x0802603c

08004cf8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
    {
 8004d00:	4a04      	ldr	r2, [pc, #16]	; (8004d14 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	601a      	str	r2, [r3, #0]
    }
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	0802603c 	.word	0x0802603c

08004d18 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    }
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f7ff ffe9 	bl	8004cf8 <_ZN8touchgfx8DrawableD1Ev>
 8004d26:	2128      	movs	r1, #40	; 0x28
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f01e fb02 	bl	8023332 <_ZdlPvj>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4618      	mov	r0, r3
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d005      	beq.n	8004d56 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3314      	adds	r3, #20
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
        }
    }
 8004d56:	bf00      	nop
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8004d66:	2300      	movs	r3, #0
    }
 8004d68:	4618      	mov	r0, r3
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	4608      	mov	r0, r1
 8004d7e:	4611      	mov	r1, r2
 8004d80:	461a      	mov	r2, r3
 8004d82:	4603      	mov	r3, r0
 8004d84:	817b      	strh	r3, [r7, #10]
 8004d86:	460b      	mov	r3, r1
 8004d88:	813b      	strh	r3, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 8004d8e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004d92:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004d96:	4619      	mov	r1, r3
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f000 f82a 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004d9e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8004da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004da6:	4619      	mov	r1, r3
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 f87e 	bl	8004eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 8004dae:	bf00      	nop
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	887a      	ldrh	r2, [r7, #2]
 8004dc6:	809a      	strh	r2, [r3, #4]
    }
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	460b      	mov	r3, r1
 8004dde:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	80da      	strh	r2, [r3, #6]
    }
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b082      	sub	sp, #8
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	807b      	strh	r3, [r7, #2]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3330      	adds	r3, #48	; 0x30
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004e0e:	4611      	mov	r1, r2
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
        setY(y);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3334      	adds	r3, #52	; 0x34
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004e20:	4611      	mov	r1, r2
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	4798      	blx	r3
    }
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	460b      	mov	r3, r1
 8004e38:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	887a      	ldrh	r2, [r7, #2]
 8004e3e:	811a      	strh	r2, [r3, #8]
    }
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	460b      	mov	r3, r1
 8004e56:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	815a      	strh	r2, [r3, #10]
    }
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
    {
    }
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004e9e:	bf00      	nop
 8004ea0:	370c      	adds	r7, #12
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	807b      	strh	r3, [r7, #2]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3338      	adds	r3, #56	; 0x38
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	4798      	blx	r3
        setHeight(height);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	333c      	adds	r3, #60	; 0x3c
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	4798      	blx	r3
    }
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
    {
    }
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	460b      	mov	r3, r1
 8004f1a:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
    {
        return visible;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
 8004f70:	4613      	mov	r3, r2
 8004f72:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3354      	adds	r3, #84	; 0x54
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	8879      	ldrh	r1, [r7, #2]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8004f84:	b292      	uxth	r2, r2
 8004f86:	1a8a      	subs	r2, r1, r2
 8004f88:	b292      	uxth	r2, r2
 8004f8a:	b210      	sxth	r0, r2
 8004f8c:	8839      	ldrh	r1, [r7, #0]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004f94:	b292      	uxth	r2, r2
 8004f96:	1a8a      	subs	r2, r1, r2
 8004f98:	b292      	uxth	r2, r2
 8004f9a:	b212      	sxth	r2, r2
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
    }
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fb8:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fc0:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fc8:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 8004fe2:	68f8      	ldr	r0, [r7, #12]
 8004fe4:	f7ff ffe1 	bl	8004faa <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	601a      	str	r2, [r3, #0]
    }
 8004ff6:	bf00      	nop
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
    {
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	4618      	mov	r0, r3
 8005014:	f000 faf0 	bl	80055f8 <_ZN8touchgfx9ContainerD1Ev>
    }
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	08026138 	.word	0x08026138

08005028 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
    }
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff ffe5 	bl	8005000 <_ZN8touchgfx6ScreenD1Ev>
 8005036:	213c      	movs	r1, #60	; 0x3c
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f01e f97a 	bl	8023332 <_ZdlPvj>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4618      	mov	r0, r3
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
    {
    }
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
    {
    }
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
    {
    }
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
    {
    }
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3304      	adds	r3, #4
 80050be:	6839      	ldr	r1, [r7, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f00d fc9d 	bl	8012a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80050c6:	bf00      	nop
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	60f8      	str	r0, [r7, #12]
 80050d6:	607b      	str	r3, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	817b      	strh	r3, [r7, #10]
 80050dc:	4613      	mov	r3, r2
 80050de:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ff24 	bl	8004f30 <_ZNK8touchgfx8Drawable9isVisibleEv>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	4618      	mov	r0, r3
 80050f2:	f7ff ff2a 	bl	8004f4a <_ZNK8touchgfx8Drawable11isTouchableEv>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	601a      	str	r2, [r3, #0]
        }
    }
 800510c:	bf00      	nop
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fdba 	bl	8004c98 <_ZN8touchgfx8DrawableC1Ev>
 8005124:	4a03      	ldr	r2, [pc, #12]	; (8005134 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	0802589c 	.word	0x0802589c

08005138 <_ZN8touchgfx6WidgetD1Ev>:
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	4a05      	ldr	r2, [pc, #20]	; (8005158 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4618      	mov	r0, r3
 800514a:	f7ff fdd5 	bl	8004cf8 <_ZN8touchgfx8DrawableD1Ev>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	0802589c 	.word	0x0802589c

0800515c <_ZN8touchgfx6WidgetD0Ev>:
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7ff ffe7 	bl	8005138 <_ZN8touchgfx6WidgetD1Ev>
 800516a:	2128      	movs	r1, #40	; 0x28
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f01e f8e0 	bl	8023332 <_ZdlPvj>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4618      	mov	r0, r3
 8005188:	2326      	movs	r3, #38	; 0x26
 800518a:	461a      	mov	r2, r3
 800518c:	2100      	movs	r1, #0
 800518e:	f01e fa85 	bl	802369c <memset>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4618      	mov	r0, r3
 8005196:	f7ff ffbd 	bl	8005114 <_ZN8touchgfx6WidgetC1Ev>
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	22ff      	movs	r2, #255	; 0xff
 80051a4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3328      	adds	r3, #40	; 0x28
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f7ff fd52 	bl	8004c58 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4618      	mov	r0, r3
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	08025ebc 	.word	0x08025ebc

080051c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 80051d4:	bf00      	nop
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4618      	mov	r0, r3
 80051ec:	2326      	movs	r3, #38	; 0x26
 80051ee:	461a      	mov	r2, r3
 80051f0:	2100      	movs	r1, #0
 80051f2:	f01e fa53 	bl	802369c <memset>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff ff8b 	bl	8005114 <_ZN8touchgfx6WidgetC1Ev>
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	601a      	str	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	629a      	str	r2, [r3, #40]	; 0x28
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2101      	movs	r1, #1
 8005216:	4618      	mov	r0, r3
 8005218:	f7ff fe7a 	bl	8004f10 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4618      	mov	r0, r3
 8005220:	3708      	adds	r7, #8
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	08025e4c 	.word	0x08025e4c

0800522c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	4a05      	ldr	r2, [pc, #20]	; (8005268 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	601a      	str	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4618      	mov	r0, r3
 800525a:	f7ff ff6d 	bl	8005138 <_ZN8touchgfx6WidgetD1Ev>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	08025e4c 	.word	0x08025e4c

0800526c <_ZN8touchgfx14AbstractButtonD0Ev>:
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f7ff ffe7 	bl	8005248 <_ZN8touchgfx14AbstractButtonD1Ev>
 800527a:	2130      	movs	r1, #48	; 0x30
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f01e f858 	bl	8023332 <_ZdlPvj>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ffa2 	bl	80051e0 <_ZN8touchgfx14AbstractButtonC1Ev>
 800529c:	4a0c      	ldr	r2, [pc, #48]	; (80052d0 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	332e      	adds	r3, #46	; 0x2e
 80052a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fce3 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3330      	adds	r3, #48	; 0x30
 80052b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff fcdc 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	22ff      	movs	r2, #255	; 0xff
 80052c2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4618      	mov	r0, r3
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	08025f24 	.word	0x08025f24

080052d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	601a      	str	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff fe8b 	bl	8005000 <_ZN8touchgfx6ScreenD1Ev>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4618      	mov	r0, r3
 80052ee:	3708      	adds	r7, #8
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	08025850 	.word	0x08025850

080052f8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f7ff ffe7 	bl	80052d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 8005306:	2140      	movs	r1, #64	; 0x40
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f01e f812 	bl	8023332 <_ZdlPvj>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	4a0d      	ldr	r2, [pc, #52]	; (8005358 <_ZN15Screen1ViewBaseD1Ev+0x40>)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	33a0      	adds	r3, #160	; 0xa0
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f942 	bl	80055b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	336c      	adds	r3, #108	; 0x6c
 8005334:	4618      	mov	r0, r3
 8005336:	f000 f9a3 	bl	8005680 <_ZN8touchgfx6ButtonD1Ev>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3340      	adds	r3, #64	; 0x40
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f97c 	bl	800563c <_ZN8touchgfx3BoxD1Ev>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4618      	mov	r0, r3
 8005348:	f7ff ffc4 	bl	80052d4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08025804 	.word	0x08025804

0800535c <_ZN15Screen1ViewBaseD0Ev>:
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff ffd7 	bl	8005318 <_ZN15Screen1ViewBaseD1Ev>
 800536a:	21b0      	movs	r1, #176	; 0xb0
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f01d ffe0 	bl	8023332 <_ZdlPvj>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <_ZN15Screen1ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005384:	f00f fe6a 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8005388:	4603      	mov	r3, r0
    }
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b08b      	sub	sp, #44	; 0x2c
 8005398:	af02      	add	r7, sp, #8
 800539a:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4618      	mov	r0, r3
 80053a0:	f000 f8a2 	bl	80054e8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 80053a4:	4a3e      	ldr	r2, [pc, #248]	; (80054a0 <_ZN15Screen1ViewBaseC1Ev+0x10c>)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3340      	adds	r3, #64	; 0x40
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fee4 	bl	800517c <_ZN8touchgfx3BoxC1Ev>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	336c      	adds	r3, #108	; 0x6c
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ff67 	bl	800528c <_ZN8touchgfx6ButtonC1Ev>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 80053c4:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <_ZN15Screen1ViewBaseC1Ev+0x110>)
 80053c6:	60bb      	str	r3, [r7, #8]
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	cb0c      	ldmia	r3, {r2, r3}
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	f000 f8ae 	bl	8005534 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80053de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80053e8:	2200      	movs	r2, #0
 80053ea:	2100      	movs	r1, #0
 80053ec:	f7ff fcc2 	bl	8004d74 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	2300      	movs	r3, #0
 80053fc:	77bb      	strb	r3, [r7, #30]
 80053fe:	2300      	movs	r3, #0
 8005400:	777b      	strb	r3, [r7, #29]
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8005402:	7ffb      	ldrb	r3, [r7, #31]
 8005404:	041b      	lsls	r3, r3, #16
 8005406:	461a      	mov	r2, r3
 8005408:	7fbb      	ldrb	r3, [r7, #30]
 800540a:	021b      	lsls	r3, r3, #8
 800540c:	431a      	orrs	r2, r3
 800540e:	7f7b      	ldrb	r3, [r7, #29]
 8005410:	4313      	orrs	r3, r2
 8005412:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005416:	f107 0318 	add.w	r3, r7, #24
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fc1b 	bl	8004c58 <_ZN8touchgfx9colortypeC1Em>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	4619      	mov	r1, r3
 8005426:	4620      	mov	r0, r4
 8005428:	f7ff fecc 	bl	80051c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(0, 0);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	336c      	adds	r3, #108	; 0x6c
 8005430:	2200      	movs	r2, #0
 8005432:	2100      	movs	r1, #0
 8005434:	4618      	mov	r0, r3
 8005436:	f7ff fcdc 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005440:	f107 0310 	add.w	r3, r7, #16
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff fc15 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 800544c:	f107 0314 	add.w	r3, r7, #20
 8005450:	2101      	movs	r1, #1
 8005452:	4618      	mov	r0, r3
 8005454:	f7ff fc0f 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 8005458:	f107 0214 	add.w	r2, r7, #20
 800545c:	f107 0310 	add.w	r3, r7, #16
 8005460:	4619      	mov	r1, r3
 8005462:	4620      	mov	r0, r4
 8005464:	f00e fcb0 	bl	8013dc8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	33a0      	adds	r3, #160	; 0xa0
 8005472:	4619      	mov	r1, r3
 8005474:	4610      	mov	r0, r2
 8005476:	f7ff fed9 	bl	800522c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3340      	adds	r3, #64	; 0x40
 8005480:	4619      	mov	r1, r3
 8005482:	4610      	mov	r0, r2
 8005484:	f7ff fe14 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	336c      	adds	r3, #108	; 0x6c
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f7ff fe0d 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4618      	mov	r0, r3
 800549a:	3724      	adds	r7, #36	; 0x24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd90      	pop	{r4, r7, pc}
 80054a0:	08025804 	.word	0x08025804
 80054a4:	080054bd 	.word	0x080054bd

080054a8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 80054a8:	b480      	push	{r7}
 80054aa:	b083      	sub	sp, #12
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]

}
 80054b0:	bf00      	nop
 80054b2:	370c      	adds	r7, #12
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr

080054bc <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	336c      	adds	r3, #108	; 0x6c
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d106      	bne.n	80054de <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen2
        //Go to Screen2 with no screen transition
        application().gotoScreen2ScreenNoTransition();
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f7ff ff53 	bl	800537c <_ZN15Screen1ViewBase11applicationEv>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4618      	mov	r0, r3
 80054da:	f7fe fe01 	bl	80040e0 <_ZN23FrontendApplicationBase29gotoScreen2ScreenNoTransitionEv>
    }
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
        : presenter(0)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f010 ffe4 	bl	80164c0 <_ZN8touchgfx6ScreenC1Ev>
 80054f8:	4a05      	ldr	r2, [pc, #20]	; (8005510 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	601a      	str	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4618      	mov	r0, r3
 8005508:	3708      	adds	r7, #8
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
 800550e:	bf00      	nop
 8005510:	08025850 	.word	0x08025850

08005514 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	4a04      	ldr	r2, [pc, #16]	; (8005530 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	08025884 	.word	0x08025884

08005534 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	4639      	mov	r1, r7
 8005540:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff ffe4 	bl	8005514 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800554c:	4a08      	ldr	r2, [pc, #32]	; (8005570 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	605a      	str	r2, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	3308      	adds	r3, #8
 800555c:	463a      	mov	r2, r7
 800555e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005562:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	08025838 	.word	0x08025838

08005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
    }
 800557c:	4a04      	ldr	r2, [pc, #16]	; (8005590 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4618      	mov	r0, r3
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	08025884 	.word	0x08025884

08005594 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
    }
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ffe9 	bl	8005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80055a2:	2104      	movs	r1, #4
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f01d fec4 	bl	8023332 <_ZdlPvj>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4618      	mov	r0, r3
 80055c6:	f7ff ffd5 	bl	8005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	08025838 	.word	0x08025838

080055d8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ffe7 	bl	80055b4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80055e6:	2110      	movs	r1, #16
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f01d fea2 	bl	8023332 <_ZdlPvj>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	4a05      	ldr	r2, [pc, #20]	; (8005618 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4618      	mov	r0, r3
 800560a:	f7ff fb75 	bl	8004cf8 <_ZN8touchgfx8DrawableD1Ev>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	08025c64 	.word	0x08025c64

0800561c <_ZN8touchgfx9ContainerD0Ev>:
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ffe7 	bl	80055f8 <_ZN8touchgfx9ContainerD1Ev>
 800562a:	212c      	movs	r1, #44	; 0x2c
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f01d fe80 	bl	8023332 <_ZdlPvj>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	4a05      	ldr	r2, [pc, #20]	; (800565c <_ZN8touchgfx3BoxD1Ev+0x20>)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff fd73 	bl	8005138 <_ZN8touchgfx6WidgetD1Ev>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	08025ebc 	.word	0x08025ebc

08005660 <_ZN8touchgfx3BoxD0Ev>:
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ffe7 	bl	800563c <_ZN8touchgfx3BoxD1Ev>
 800566e:	212c      	movs	r1, #44	; 0x2c
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f01d fe5e 	bl	8023332 <_ZdlPvj>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	4a05      	ldr	r2, [pc, #20]	; (80056a0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff fdd9 	bl	8005248 <_ZN8touchgfx14AbstractButtonD1Ev>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	08025f24 	.word	0x08025f24

080056a4 <_ZN8touchgfx6ButtonD0Ev>:
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ffe7 	bl	8005680 <_ZN8touchgfx6ButtonD1Ev>
 80056b2:	2134      	movs	r1, #52	; 0x34
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f01d fe3c 	bl	8023332 <_ZdlPvj>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68d2      	ldr	r2, [r2, #12]
 80056d6:	1052      	asrs	r2, r2, #1
 80056d8:	1898      	adds	r0, r3, r2
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d102      	bne.n	80056ec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	e00a      	b.n	8005702 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	68d2      	ldr	r2, [r2, #12]
 80056f4:	1052      	asrs	r2, r2, #1
 80056f6:	4413      	add	r3, r2
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6892      	ldr	r2, [r2, #8]
 80056fe:	4413      	add	r3, r2
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6839      	ldr	r1, [r7, #0]
 8005704:	4798      	blx	r3
    }
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d010      	beq.n	8005740 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d107      	bne.n	8005736 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005736:	2300      	movs	r3, #0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d001      	beq.n	8005740 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005740:	2300      	movs	r3, #0
    }
 8005742:	4618      	mov	r0, r3
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
	...

08005750 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	4a05      	ldr	r2, [pc, #20]	; (8005770 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	f7ff fc4d 	bl	8005000 <_ZN8touchgfx6ScreenD1Ev>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4618      	mov	r0, r3
 800576a:	3708      	adds	r7, #8
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}
 8005770:	08025950 	.word	0x08025950

08005774 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ffe7 	bl	8005750 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 8005782:	2140      	movs	r1, #64	; 0x40
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f01d fdd4 	bl	8023332 <_ZdlPvj>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	4a0d      	ldr	r2, [pc, #52]	; (80057d4 <_ZN15Screen2ViewBaseD1Ev+0x40>)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	33a0      	adds	r3, #160	; 0xa0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f912 	bl	80059d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	336c      	adds	r3, #108	; 0x6c
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff ff65 	bl	8005680 <_ZN8touchgfx6ButtonD1Ev>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	3340      	adds	r3, #64	; 0x40
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff ff3e 	bl	800563c <_ZN8touchgfx3BoxD1Ev>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7ff ffc4 	bl	8005750 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4618      	mov	r0, r3
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	08025904 	.word	0x08025904

080057d8 <_ZN15Screen2ViewBaseD0Ev>:
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7ff ffd7 	bl	8005794 <_ZN15Screen2ViewBaseD1Ev>
 80057e6:	21b0      	movs	r1, #176	; 0xb0
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f01d fda2 	bl	8023332 <_ZdlPvj>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <_ZN15Screen2ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005800:	f00f fc2c 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8005804:	4603      	mov	r3, r0
    }
 8005806:	4618      	mov	r0, r3
 8005808:	3708      	adds	r7, #8
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
	...

08005810 <_ZN15Screen2ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen2ViewBase::Screen2ViewBase() :
 8005810:	b590      	push	{r4, r7, lr}
 8005812:	b08b      	sub	sp, #44	; 0x2c
 8005814:	af02      	add	r7, sp, #8
 8005816:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8a2 	bl	8005964 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 8005820:	4a3e      	ldr	r2, [pc, #248]	; (800591c <_ZN15Screen2ViewBaseC1Ev+0x10c>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	3340      	adds	r3, #64	; 0x40
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff fca6 	bl	800517c <_ZN8touchgfx3BoxC1Ev>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	336c      	adds	r3, #108	; 0x6c
 8005834:	4618      	mov	r0, r3
 8005836:	f7ff fd29 	bl	800528c <_ZN8touchgfx6ButtonC1Ev>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005840:	4b37      	ldr	r3, [pc, #220]	; (8005920 <_ZN15Screen2ViewBaseC1Ev+0x110>)
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	f107 0308 	add.w	r3, r7, #8
 800584c:	cb0c      	ldmia	r3, {r2, r3}
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	f000 f89e 	bl	8005990 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800585a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005864:	2200      	movs	r2, #0
 8005866:	2100      	movs	r1, #0
 8005868:	f7ff fa84 	bl	8004d74 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005872:	2300      	movs	r3, #0
 8005874:	77fb      	strb	r3, [r7, #31]
 8005876:	2300      	movs	r3, #0
 8005878:	77bb      	strb	r3, [r7, #30]
 800587a:	2300      	movs	r3, #0
 800587c:	777b      	strb	r3, [r7, #29]
 800587e:	7ffb      	ldrb	r3, [r7, #31]
 8005880:	041b      	lsls	r3, r3, #16
 8005882:	461a      	mov	r2, r3
 8005884:	7fbb      	ldrb	r3, [r7, #30]
 8005886:	021b      	lsls	r3, r3, #8
 8005888:	431a      	orrs	r2, r3
 800588a:	7f7b      	ldrb	r3, [r7, #29]
 800588c:	4313      	orrs	r3, r2
 800588e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005892:	f107 0318 	add.w	r3, r7, #24
 8005896:	4611      	mov	r1, r2
 8005898:	4618      	mov	r0, r3
 800589a:	f7ff f9dd 	bl	8004c58 <_ZN8touchgfx9colortypeC1Em>
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	4619      	mov	r1, r3
 80058a2:	4620      	mov	r0, r4
 80058a4:	f7ff fc8e 	bl	80051c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(155, 106);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	336c      	adds	r3, #108	; 0x6c
 80058ac:	226a      	movs	r2, #106	; 0x6a
 80058ae:	219b      	movs	r1, #155	; 0x9b
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fa9e 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 80058bc:	f107 0310 	add.w	r3, r7, #16
 80058c0:	2100      	movs	r1, #0
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7ff f9d7 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff f9d1 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 80058d4:	f107 0214 	add.w	r2, r7, #20
 80058d8:	f107 0310 	add.w	r3, r7, #16
 80058dc:	4619      	mov	r1, r3
 80058de:	4620      	mov	r0, r4
 80058e0:	f00e fa72 	bl	8013dc8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	33a0      	adds	r3, #160	; 0xa0
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f7ff fc9b 	bl	800522c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	3340      	adds	r3, #64	; 0x40
 80058fc:	4619      	mov	r1, r3
 80058fe:	4610      	mov	r0, r2
 8005900:	f7ff fbd6 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	336c      	adds	r3, #108	; 0x6c
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7ff fbcf 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4618      	mov	r0, r3
 8005916:	3724      	adds	r7, #36	; 0x24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd90      	pop	{r4, r7, pc}
 800591c:	08025904 	.word	0x08025904
 8005920:	08005939 	.word	0x08005939

08005924 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]

}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	336c      	adds	r3, #108	; 0x6c
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d106      	bne.n	800595a <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen3
        //Go to Screen3 with no screen transition
        application().gotoScreen3ScreenNoTransition();
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f7ff ff53 	bl	80057f8 <_ZN15Screen2ViewBase11applicationEv>
 8005952:	4603      	mov	r3, r0
 8005954:	4618      	mov	r0, r3
 8005956:	f7fe fc09 	bl	800416c <_ZN23FrontendApplicationBase29gotoScreen3ScreenNoTransitionEv>
    }
}
 800595a:	bf00      	nop
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
	...

08005964 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View()
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4618      	mov	r0, r3
 8005970:	f010 fda6 	bl	80164c0 <_ZN8touchgfx6ScreenC1Ev>
 8005974:	4a05      	ldr	r2, [pc, #20]	; (800598c <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop
 800598c:	08025950 	.word	0x08025950

08005990 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	4639      	mov	r1, r7
 800599c:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f7ff fdb6 	bl	8005514 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 80059a8:	4a08      	ldr	r2, [pc, #32]	; (80059cc <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	601a      	str	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	605a      	str	r2, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	3308      	adds	r3, #8
 80059b8:	463a      	mov	r2, r7
 80059ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80059be:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	08025938 	.word	0x08025938

080059d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	4a05      	ldr	r2, [pc, #20]	; (80059f0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fdc7 	bl	8005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4618      	mov	r0, r3
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	08025938 	.word	0x08025938

080059f4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7ff ffe7 	bl	80059d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005a02:	2110      	movs	r1, #16
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f01d fc94 	bl	8023332 <_ZdlPvj>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68d2      	ldr	r2, [r2, #12]
 8005a26:	1052      	asrs	r2, r2, #1
 8005a28:	1898      	adds	r0, r3, r2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d102      	bne.n	8005a3c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	e00a      	b.n	8005a52 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	68d2      	ldr	r2, [r2, #12]
 8005a44:	1052      	asrs	r2, r2, #1
 8005a46:	4413      	add	r3, r2
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6892      	ldr	r2, [r2, #8]
 8005a4e:	4413      	add	r3, r2
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	4798      	blx	r3
    }
 8005a56:	bf00      	nop
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d010      	beq.n	8005a90 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d107      	bne.n	8005a86 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d001      	beq.n	8005a90 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005a90:	2300      	movs	r3, #0
    }
 8005a92:	4618      	mov	r0, r3
 8005a94:	370c      	adds	r7, #12
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
	...

08005aa0 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>:
class View : public Screen
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	4a05      	ldr	r2, [pc, #20]	; (8005ac0 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev+0x20>)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff faa5 	bl	8005000 <_ZN8touchgfx6ScreenD1Ev>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	080259d0 	.word	0x080259d0

08005ac4 <_ZN8touchgfx4ViewI16Screen3PresenterED0Ev>:
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ffe7 	bl	8005aa0 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8005ad2:	2140      	movs	r1, #64	; 0x40
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f01d fc2c 	bl	8023332 <_ZdlPvj>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4618      	mov	r0, r3
 8005ade:	3708      	adds	r7, #8
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <_ZN15Screen3ViewBaseD1Ev>:

class Screen3ViewBase : public touchgfx::View<Screen3Presenter>
{
public:
    Screen3ViewBase();
    virtual ~Screen3ViewBase() {}
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	4a0d      	ldr	r2, [pc, #52]	; (8005b24 <_ZN15Screen3ViewBaseD1Ev+0x40>)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	601a      	str	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	33a0      	adds	r3, #160	; 0xa0
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f914 	bl	8005d24 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	336c      	adds	r3, #108	; 0x6c
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7ff fdbd 	bl	8005680 <_ZN8touchgfx6ButtonD1Ev>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	3340      	adds	r3, #64	; 0x40
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fd96 	bl	800563c <_ZN8touchgfx3BoxD1Ev>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff ffc4 	bl	8005aa0 <_ZN8touchgfx4ViewI16Screen3PresenterED1Ev>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08025984 	.word	0x08025984

08005b28 <_ZN15Screen3ViewBaseD0Ev>:
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f7ff ffd7 	bl	8005ae4 <_ZN15Screen3ViewBaseD1Ev>
 8005b36:	21b0      	movs	r1, #176	; 0xb0
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f01d fbfa 	bl	8023332 <_ZdlPvj>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <_ZN15Screen3ViewBase11applicationEv>:
    virtual void setupScreen();

protected:
    FrontendApplication& application() {
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
 8005b50:	f00f fa84 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8005b54:	4603      	mov	r3, r0
    }
 8005b56:	4618      	mov	r0, r3
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <_ZN15Screen3ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen3_screen/Screen3ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <BitmapDatabase.hpp>

Screen3ViewBase::Screen3ViewBase() :
 8005b60:	b590      	push	{r4, r7, lr}
 8005b62:	b08b      	sub	sp, #44	; 0x2c
 8005b64:	af02      	add	r7, sp, #8
 8005b66:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen3ViewBase::buttonCallbackHandler)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f8a4 	bl	8005cb8 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>
 8005b70:	4a3f      	ldr	r2, [pc, #252]	; (8005c70 <_ZN15Screen3ViewBaseC1Ev+0x110>)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3340      	adds	r3, #64	; 0x40
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff fafe 	bl	800517c <_ZN8touchgfx3BoxC1Ev>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	336c      	adds	r3, #108	; 0x6c
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff fb81 	bl	800528c <_ZN8touchgfx6ButtonC1Ev>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8005b90:	4b38      	ldr	r3, [pc, #224]	; (8005c74 <_ZN15Screen3ViewBaseC1Ev+0x114>)
 8005b92:	60bb      	str	r3, [r7, #8]
 8005b94:	2300      	movs	r3, #0
 8005b96:	60fb      	str	r3, [r7, #12]
 8005b98:	f107 0308 	add.w	r3, r7, #8
 8005b9c:	cb0c      	ldmia	r3, {r2, r3}
 8005b9e:	6879      	ldr	r1, [r7, #4]
 8005ba0:	f000 f8a0 	bl	8005ce4 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{

    __background.setPosition(0, 0, 480, 272);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8005baa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2100      	movs	r1, #0
 8005bb8:	f7ff f8dc 	bl	8004d74 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	77bb      	strb	r3, [r7, #30]
 8005bca:	2300      	movs	r3, #0
 8005bcc:	777b      	strb	r3, [r7, #29]
 8005bce:	7ffb      	ldrb	r3, [r7, #31]
 8005bd0:	041b      	lsls	r3, r3, #16
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	7fbb      	ldrb	r3, [r7, #30]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	7f7b      	ldrb	r3, [r7, #29]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8005be2:	f107 0318 	add.w	r3, r7, #24
 8005be6:	4611      	mov	r1, r2
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff f835 	bl	8004c58 <_ZN8touchgfx9colortypeC1Em>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	4619      	mov	r1, r3
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f7ff fae6 	bl	80051c4 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button1.setXY(304, 212);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	336c      	adds	r3, #108	; 0x6c
 8005bfc:	22d4      	movs	r2, #212	; 0xd4
 8005bfe:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7ff f8f5 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8005c0e:	f107 0310 	add.w	r3, r7, #16
 8005c12:	2100      	movs	r1, #0
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7ff f82e 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 8005c1a:	f107 0314 	add.w	r3, r7, #20
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff f828 	bl	8004c76 <_ZN8touchgfx6BitmapC1Et>
 8005c26:	f107 0214 	add.w	r2, r7, #20
 8005c2a:	f107 0310 	add.w	r3, r7, #16
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4620      	mov	r0, r4
 8005c32:	f00e f8c9 	bl	8013dc8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button1.setAction(buttonCallback);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	33a0      	adds	r3, #160	; 0xa0
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7ff faf2 	bl	800522c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(__background);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3340      	adds	r3, #64	; 0x40
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7ff fa2d 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button1);
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	336c      	adds	r3, #108	; 0x6c
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7ff fa26 	bl	80050b0 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4618      	mov	r0, r3
 8005c68:	3724      	adds	r7, #36	; 0x24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	08025984 	.word	0x08025984
 8005c74:	08005c8d 	.word	0x08005c8d

08005c78 <_ZN15Screen3ViewBase11setupScreenEv>:

void Screen3ViewBase::setupScreen()
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]

}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen3ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
    if (&src == &button1)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	336c      	adds	r3, #108	; 0x6c
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d106      	bne.n	8005cae <_ZN15Screen3ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction1
        //When button1 clicked change screen to Screen1
        //Go to Screen1 with no screen transition
        application().gotoScreen1ScreenNoTransition();
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff ff51 	bl	8005b48 <_ZN15Screen3ViewBase11applicationEv>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe f9d3 	bl	8004054 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
	...

08005cb8 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev>:
    View()
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f010 fbfc 	bl	80164c0 <_ZN8touchgfx6ScreenC1Ev>
 8005cc8:	4a05      	ldr	r2, [pc, #20]	; (8005ce0 <_ZN8touchgfx4ViewI16Screen3PresenterEC1Ev+0x28>)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	080259d0 	.word	0x080259d0

08005ce4 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	4639      	mov	r1, r7
 8005cf0:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fc0c 	bl	8005514 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 8005cfc:	4a08      	ldr	r2, [pc, #32]	; (8005d20 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	605a      	str	r2, [r3, #4]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	463a      	mov	r2, r7
 8005d0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	080259b8 	.word	0x080259b8

08005d24 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b082      	sub	sp, #8
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	4a05      	ldr	r2, [pc, #20]	; (8005d44 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7ff fc1d 	bl	8005574 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	080259b8 	.word	0x080259b8

08005d48 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f7ff ffe7 	bl	8005d24 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 8005d56:	2110      	movs	r1, #16
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f01d faea 	bl	8023332 <_ZdlPvj>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4618      	mov	r0, r3
 8005d62:	3708      	adds	r7, #8
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68d2      	ldr	r2, [r2, #12]
 8005d7a:	1052      	asrs	r2, r2, #1
 8005d7c:	1898      	adds	r0, r3, r2
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d102      	bne.n	8005d90 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	e00a      	b.n	8005da6 <_ZN8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68d2      	ldr	r2, [r2, #12]
 8005d98:	1052      	asrs	r2, r2, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6892      	ldr	r2, [r2, #8]
 8005da2:	4413      	add	r3, r2
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	4798      	blx	r3
    }
 8005daa:	bf00      	nop
 8005dac:	3708      	adds	r7, #8
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}

08005db2 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d107      	bne.n	8005dda <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d101      	bne.n	8005dda <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d001      	beq.n	8005de4 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 8005de0:	2301      	movs	r3, #1
 8005de2:	e000      	b.n	8005de6 <_ZNK8touchgfx8CallbackI15Screen3ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 8005de4:	2300      	movs	r3, #0
    }
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__tcf_0+0xc>)
 8005dfa:	f7fd ffcd 	bl	8003d98 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	24001480 	.word	0x24001480

08005e04 <_Z23getFont_verdana_10_4bppv>:
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	; 0x30
 8005e08:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8005e0a:	4b1f      	ldr	r3, [pc, #124]	; (8005e88 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	f3bf 8f5b 	dmb	ish
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bf0c      	ite	eq
 8005e1c:	2301      	moveq	r3, #1
 8005e1e:	2300      	movne	r3, #0
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02c      	beq.n	8005e80 <_Z23getFont_verdana_10_4bppv+0x7c>
 8005e26:	4818      	ldr	r0, [pc, #96]	; (8005e88 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005e28:	f01d fa85 	bl	8023336 <__cxa_guard_acquire>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d021      	beq.n	8005e80 <_Z23getFont_verdana_10_4bppv+0x7c>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	930a      	str	r3, [sp, #40]	; 0x28
 8005e40:	2300      	movs	r3, #0
 8005e42:	9309      	str	r3, [sp, #36]	; 0x24
 8005e44:	2300      	movs	r3, #0
 8005e46:	9308      	str	r3, [sp, #32]
 8005e48:	233f      	movs	r3, #63	; 0x3f
 8005e4a:	9307      	str	r3, [sp, #28]
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	; (8005e8c <_Z23getFont_verdana_10_4bppv+0x88>)
 8005e4e:	9306      	str	r3, [sp, #24]
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <_Z23getFont_verdana_10_4bppv+0x8c>)
 8005e52:	9305      	str	r3, [sp, #20]
 8005e54:	2300      	movs	r3, #0
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	2300      	movs	r3, #0
 8005e5a:	9303      	str	r3, [sp, #12]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	9302      	str	r3, [sp, #8]
 8005e60:	2304      	movs	r3, #4
 8005e62:	9301      	str	r3, [sp, #4]
 8005e64:	2300      	movs	r3, #0
 8005e66:	9300      	str	r3, [sp, #0]
 8005e68:	230a      	movs	r3, #10
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4909      	ldr	r1, [pc, #36]	; (8005e94 <_Z23getFont_verdana_10_4bppv+0x90>)
 8005e6e:	480a      	ldr	r0, [pc, #40]	; (8005e98 <_Z23getFont_verdana_10_4bppv+0x94>)
 8005e70:	f7fe fe58 	bl	8004b24 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005e74:	4809      	ldr	r0, [pc, #36]	; (8005e9c <_Z23getFont_verdana_10_4bppv+0x98>)
 8005e76:	f01d faa9 	bl	80233cc <atexit>
 8005e7a:	4803      	ldr	r0, [pc, #12]	; (8005e88 <_Z23getFont_verdana_10_4bppv+0x84>)
 8005e7c:	f01d fa67 	bl	802334e <__cxa_guard_release>
    return verdana_10_4bpp;
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	240014a8 	.word	0x240014a8
 8005e8c:	080264c4 	.word	0x080264c4
 8005e90:	080264d0 	.word	0x080264d0
 8005e94:	90000178 	.word	0x90000178
 8005e98:	24001480 	.word	0x24001480
 8005e9c:	08005df5 	.word	0x08005df5

08005ea0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	4801      	ldr	r0, [pc, #4]	; (8005eac <__tcf_0+0xc>)
 8005ea6:	f7fd ff77 	bl	8003d98 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	240014ac 	.word	0x240014ac

08005eb0 <_Z23getFont_verdana_20_4bppv>:
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08c      	sub	sp, #48	; 0x30
 8005eb4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8005eb6:	4b1f      	ldr	r3, [pc, #124]	; (8005f34 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f3bf 8f5b 	dmb	ish
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d02c      	beq.n	8005f2c <_Z23getFont_verdana_20_4bppv+0x7c>
 8005ed2:	4818      	ldr	r0, [pc, #96]	; (8005f34 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005ed4:	f01d fa2f 	bl	8023336 <__cxa_guard_acquire>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d021      	beq.n	8005f2c <_Z23getFont_verdana_20_4bppv+0x7c>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	930a      	str	r3, [sp, #40]	; 0x28
 8005eec:	2300      	movs	r3, #0
 8005eee:	9309      	str	r3, [sp, #36]	; 0x24
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9308      	str	r3, [sp, #32]
 8005ef4:	233f      	movs	r3, #63	; 0x3f
 8005ef6:	9307      	str	r3, [sp, #28]
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <_Z23getFont_verdana_20_4bppv+0x88>)
 8005efa:	9306      	str	r3, [sp, #24]
 8005efc:	4b0f      	ldr	r3, [pc, #60]	; (8005f3c <_Z23getFont_verdana_20_4bppv+0x8c>)
 8005efe:	9305      	str	r3, [sp, #20]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	2300      	movs	r3, #0
 8005f06:	9303      	str	r3, [sp, #12]
 8005f08:	2301      	movs	r3, #1
 8005f0a:	9302      	str	r3, [sp, #8]
 8005f0c:	2304      	movs	r3, #4
 8005f0e:	9301      	str	r3, [sp, #4]
 8005f10:	2300      	movs	r3, #0
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	2314      	movs	r3, #20
 8005f16:	2201      	movs	r2, #1
 8005f18:	4909      	ldr	r1, [pc, #36]	; (8005f40 <_Z23getFont_verdana_20_4bppv+0x90>)
 8005f1a:	480a      	ldr	r0, [pc, #40]	; (8005f44 <_Z23getFont_verdana_20_4bppv+0x94>)
 8005f1c:	f7fe fe02 	bl	8004b24 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005f20:	4809      	ldr	r0, [pc, #36]	; (8005f48 <_Z23getFont_verdana_20_4bppv+0x98>)
 8005f22:	f01d fa53 	bl	80233cc <atexit>
 8005f26:	4803      	ldr	r0, [pc, #12]	; (8005f34 <_Z23getFont_verdana_20_4bppv+0x84>)
 8005f28:	f01d fa11 	bl	802334e <__cxa_guard_release>
    return verdana_20_4bpp;
 8005f2c:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <_Z23getFont_verdana_20_4bppv+0x94>)
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	240014d4 	.word	0x240014d4
 8005f38:	080264c8 	.word	0x080264c8
 8005f3c:	080264d4 	.word	0x080264d4
 8005f40:	90000188 	.word	0x90000188
 8005f44:	240014ac 	.word	0x240014ac
 8005f48:	08005ea1 	.word	0x08005ea1

08005f4c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	4801      	ldr	r0, [pc, #4]	; (8005f58 <__tcf_0+0xc>)
 8005f52:	f7fd ff21 	bl	8003d98 <_ZN8touchgfx13GeneratedFontD1Ev>
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	240014d8 	.word	0x240014d8

08005f5c <_Z23getFont_verdana_40_4bppv>:
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	; 0x30
 8005f60:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8005f62:	4b1f      	ldr	r3, [pc, #124]	; (8005fe0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	f3bf 8f5b 	dmb	ish
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	bf0c      	ite	eq
 8005f74:	2301      	moveq	r3, #1
 8005f76:	2300      	movne	r3, #0
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d02c      	beq.n	8005fd8 <_Z23getFont_verdana_40_4bppv+0x7c>
 8005f7e:	4818      	ldr	r0, [pc, #96]	; (8005fe0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005f80:	f01d f9d9 	bl	8023336 <__cxa_guard_acquire>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d021      	beq.n	8005fd8 <_Z23getFont_verdana_40_4bppv+0x7c>
 8005f94:	2300      	movs	r3, #0
 8005f96:	930a      	str	r3, [sp, #40]	; 0x28
 8005f98:	2300      	movs	r3, #0
 8005f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9308      	str	r3, [sp, #32]
 8005fa0:	233f      	movs	r3, #63	; 0x3f
 8005fa2:	9307      	str	r3, [sp, #28]
 8005fa4:	4b0f      	ldr	r3, [pc, #60]	; (8005fe4 <_Z23getFont_verdana_40_4bppv+0x88>)
 8005fa6:	9306      	str	r3, [sp, #24]
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <_Z23getFont_verdana_40_4bppv+0x8c>)
 8005faa:	9305      	str	r3, [sp, #20]
 8005fac:	2300      	movs	r3, #0
 8005fae:	9304      	str	r3, [sp, #16]
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	9303      	str	r3, [sp, #12]
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	9302      	str	r3, [sp, #8]
 8005fb8:	2304      	movs	r3, #4
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	2328      	movs	r3, #40	; 0x28
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4909      	ldr	r1, [pc, #36]	; (8005fec <_Z23getFont_verdana_40_4bppv+0x90>)
 8005fc6:	480a      	ldr	r0, [pc, #40]	; (8005ff0 <_Z23getFont_verdana_40_4bppv+0x94>)
 8005fc8:	f7fe fdac 	bl	8004b24 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8005fcc:	4809      	ldr	r0, [pc, #36]	; (8005ff4 <_Z23getFont_verdana_40_4bppv+0x98>)
 8005fce:	f01d f9fd 	bl	80233cc <atexit>
 8005fd2:	4803      	ldr	r0, [pc, #12]	; (8005fe0 <_Z23getFont_verdana_40_4bppv+0x84>)
 8005fd4:	f01d f9bb 	bl	802334e <__cxa_guard_release>
    return verdana_40_4bpp;
 8005fd8:	4b05      	ldr	r3, [pc, #20]	; (8005ff0 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	24001500 	.word	0x24001500
 8005fe4:	080264cc 	.word	0x080264cc
 8005fe8:	080264d8 	.word	0x080264d8
 8005fec:	90000198 	.word	0x90000198
 8005ff0:	240014d8 	.word	0x240014d8
 8005ff4:	08005f4d 	.word	0x08005f4d

08005ff8 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	460b      	mov	r3, r1
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8006006:	2300      	movs	r3, #0
    }
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800601c:	2300      	movs	r3, #0
    }
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8006032:	2300      	movs	r3, #0
    }
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 800604e:	4a07      	ldr	r2, [pc, #28]	; (800606c <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6013      	str	r3, [r2, #0]
        fonts = f;
 8006054:	4a06      	ldr	r2, [pc, #24]	; (8006070 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800605a:	4a06      	ldr	r2, [pc, #24]	; (8006074 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800605c:	88fb      	ldrh	r3, [r7, #6]
 800605e:	8013      	strh	r3, [r2, #0]
    }
 8006060:	bf00      	nop
 8006062:	3714      	adds	r7, #20
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	2400af84 	.word	0x2400af84
 8006070:	2400af8c 	.word	0x2400af8c
 8006074:	2400af88 	.word	0x2400af88

08006078 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8006078:	b40e      	push	{r1, r2, r3}
 800607a:	b580      	push	{r7, lr}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8006082:	f107 0320 	add.w	r3, r7, #32
 8006086:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	69fa      	ldr	r2, [r7, #28]
 800608c:	2100      	movs	r1, #0
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f00f fe5a 	bl	8015d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8006094:	4603      	mov	r3, r0
 8006096:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8006098:	89fb      	ldrh	r3, [r7, #14]
}
 800609a:	4618      	mov	r0, r3
 800609c:	3714      	adds	r7, #20
 800609e:	46bd      	mov	sp, r7
 80060a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060a4:	b003      	add	sp, #12
 80060a6:	4770      	bx	lr

080060a8 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 80060a8:	b40c      	push	{r2, r3}
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	460b      	mov	r3, r1
 80060b4:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 80060b6:	f107 031c 	add.w	r3, r7, #28
 80060ba:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 80060bc:	78f9      	ldrb	r1, [r7, #3]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f00f fe40 	bl	8015d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 80060c8:	4603      	mov	r3, r0
 80060ca:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 80060cc:	89fb      	ldrh	r3, [r7, #14]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060d8:	b002      	add	sp, #8
 80060da:	4770      	bx	lr

080060dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	; 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	460b      	mov	r3, r1
 80060e6:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d016      	beq.n	800611e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	3322      	adds	r3, #34	; 0x22
 80060f4:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 80060f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f8:	8adb      	ldrh	r3, [r3, #22]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d105      	bne.n	800610a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 80060fe:	4b43      	ldr	r3, [pc, #268]	; (800620c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8006100:	4a43      	ldr	r2, [pc, #268]	; (8006210 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006102:	21c0      	movs	r1, #192	; 0xc0
 8006104:	4843      	ldr	r0, [pc, #268]	; (8006214 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006106:	f01d f943 	bl	8023390 <__assert_func>
            return buffer[pos];
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	8a9b      	ldrh	r3, [r3, #20]
 800610e:	461a      	mov	r2, r3
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d06a      	beq.n	80061fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f011 f843 	bl	80171b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	3322      	adds	r3, #34	; 0x22
 800612e:	623b      	str	r3, [r7, #32]
 8006130:	2301      	movs	r3, #1
 8006132:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	8adb      	ldrh	r3, [r3, #22]
 8006138:	8bfa      	ldrh	r2, [r7, #30]
 800613a:	429a      	cmp	r2, r3
 800613c:	d305      	bcc.n	800614a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800613e:	4b36      	ldr	r3, [pc, #216]	; (8006218 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8006140:	4a36      	ldr	r2, [pc, #216]	; (800621c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8006142:	21c5      	movs	r1, #197	; 0xc5
 8006144:	4833      	ldr	r0, [pc, #204]	; (8006214 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006146:	f01d f923 	bl	8023390 <__assert_func>
            const uint16_t index = pos + offset;
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	8a9a      	ldrh	r2, [r3, #20]
 800614e:	8bfb      	ldrh	r3, [r7, #30]
 8006150:	4413      	add	r3, r2
 8006152:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8006154:	8bbb      	ldrh	r3, [r7, #28]
 8006156:	2b09      	cmp	r3, #9
 8006158:	d801      	bhi.n	800615e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800615a:	8bbb      	ldrh	r3, [r7, #28]
 800615c:	e001      	b.n	8006162 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800615e:	8bbb      	ldrh	r3, [r7, #28]
 8006160:	3b0a      	subs	r3, #10
 8006162:	6a3a      	ldr	r2, [r7, #32]
 8006164:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006168:	f640 123f 	movw	r2, #2367	; 0x93f
 800616c:	4293      	cmp	r3, r2
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d03f      	beq.n	80061fa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3322      	adds	r3, #34	; 0x22
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	3222      	adds	r2, #34	; 0x22
 8006182:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	8ad2      	ldrh	r2, [r2, #22]
 8006188:	2a00      	cmp	r2, #0
 800618a:	d105      	bne.n	8006198 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800618c:	4b1f      	ldr	r3, [pc, #124]	; (800620c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8006190:	21c0      	movs	r1, #192	; 0xc0
 8006192:	4820      	ldr	r0, [pc, #128]	; (8006214 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8006194:	f01d f8fc 	bl	8023390 <__assert_func>
            return buffer[pos];
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	8a92      	ldrh	r2, [r2, #20]
 800619c:	4611      	mov	r1, r2
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	4613      	mov	r3, r2
 80061a8:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	8adb      	ldrh	r3, [r3, #22]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d806      	bhi.n	80061c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 80061b2:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 80061b4:	4a1b      	ldr	r2, [pc, #108]	; (8006224 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 80061b6:	f240 110d 	movw	r1, #269	; 0x10d
 80061ba:	4816      	ldr	r0, [pc, #88]	; (8006214 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 80061bc:	f01d f8e8 	bl	8023390 <__assert_func>
            const uint16_t index = pos + 1;
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	8a9b      	ldrh	r3, [r3, #20]
 80061c4:	3301      	adds	r3, #1
 80061c6:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 80061c8:	89bb      	ldrh	r3, [r7, #12]
 80061ca:	2b09      	cmp	r3, #9
 80061cc:	d801      	bhi.n	80061d2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 80061ce:	89bb      	ldrh	r3, [r7, #12]
 80061d0:	e000      	b.n	80061d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 80061d2:	2300      	movs	r3, #0
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	89f9      	ldrh	r1, [r7, #14]
 80061d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 80061dc:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3322      	adds	r3, #34	; 0x22
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	f640 133f 	movw	r3, #2367	; 0x93f
 80061e8:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	8a9b      	ldrh	r3, [r3, #20]
 80061ee:	4619      	mov	r1, r3
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	8afa      	ldrh	r2, [r7, #22]
 80061f4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 80061f8:	bf00      	nop
        }
    }
    return getNextChar();
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f010 feda 	bl	8016fb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8006200:	4603      	mov	r3, r0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3728      	adds	r7, #40	; 0x28
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	08024f54 	.word	0x08024f54
 8006210:	08024f60 	.word	0x08024f60
 8006214:	0802500c 	.word	0x0802500c
 8006218:	08025064 	.word	0x08025064
 800621c:	08025074 	.word	0x08025074
 8006220:	08025148 	.word	0x08025148
 8006224:	08025154 	.word	0x08025154

08006228 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f010 fe88 	bl	8016f46 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8006236:	bf00      	nop
 8006238:	3708      	adds	r7, #8
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
	...

08006240 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8006240:	b590      	push	{r4, r7, lr}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	4603      	mov	r3, r0
 8006248:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800624a:	2300      	movs	r3, #0
 800624c:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800624e:	88fb      	ldrh	r3, [r7, #6]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d127      	bne.n	80062a4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d016      	beq.n	800628e <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8006260:	88fb      	ldrh	r3, [r7, #6]
 8006262:	4a1b      	ldr	r2, [pc, #108]	; (80062d0 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8006264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006268:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	4413      	add	r3, r2
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006274:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	4a16      	ldr	r2, [pc, #88]	; (80062d8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006280:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	689b      	ldr	r3, [r3, #8]
 8006286:	68ba      	ldr	r2, [r7, #8]
 8006288:	4413      	add	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	e00a      	b.n	80062a4 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800628e:	4b11      	ldr	r3, [pc, #68]	; (80062d4 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8006290:	4a12      	ldr	r2, [pc, #72]	; (80062dc <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8006292:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8006294:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8006298:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800629a:	88fb      	ldrh	r3, [r7, #6]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800629e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a2:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00d      	beq.n	80062c6 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80062aa:	4a0f      	ldr	r2, [pc, #60]	; (80062e8 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80062b0:	f000 f824 	bl	80062fc <_ZN17TypedTextDatabase8getFontsEv>
 80062b4:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80062b6:	f000 f819 	bl	80062ec <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80062ba:	4603      	mov	r3, r0
 80062bc:	461a      	mov	r2, r3
 80062be:	4621      	mov	r1, r4
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f7ff febd 	bl	8006040 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd90      	pop	{r4, r7, pc}
 80062ce:	bf00      	nop
 80062d0:	24001504 	.word	0x24001504
 80062d4:	2400150c 	.word	0x2400150c
 80062d8:	24001510 	.word	0x24001510
 80062dc:	900001ac 	.word	0x900001ac
 80062e0:	900001a8 	.word	0x900001a8
 80062e4:	900001b4 	.word	0x900001b4
 80062e8:	24001508 	.word	0x24001508

080062ec <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
    return 0;
 80062f0:	2300      	movs	r3, #0
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8006300:	4b02      	ldr	r3, [pc, #8]	; (800630c <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 8006302:	4618      	mov	r0, r3
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr
 800630c:	24001514 	.word	0x24001514

08006310 <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8006310:	b580      	push	{r7, lr}
 8006312:	b082      	sub	sp, #8
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d113      	bne.n	8006348 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006326:	4293      	cmp	r3, r2
 8006328:	d10e      	bne.n	8006348 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800632a:	f7ff fdc1 	bl	8005eb0 <_Z23getFont_verdana_20_4bppv>
 800632e:	4603      	mov	r3, r0
};
 8006330:	4a07      	ldr	r2, [pc, #28]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006332:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 8006334:	f7ff fe12 	bl	8005f5c <_Z23getFont_verdana_40_4bppv>
 8006338:	4603      	mov	r3, r0
};
 800633a:	4a05      	ldr	r2, [pc, #20]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800633c:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800633e:	f7ff fd61 	bl	8005e04 <_Z23getFont_verdana_10_4bppv>
 8006342:	4603      	mov	r3, r0
};
 8006344:	4a02      	ldr	r2, [pc, #8]	; (8006350 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006346:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	24001514 	.word	0x24001514

08006354 <_GLOBAL__sub_I_touchgfx_fonts>:
 8006354:	b580      	push	{r7, lr}
 8006356:	af00      	add	r7, sp, #0
 8006358:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800635c:	2001      	movs	r0, #1
 800635e:	f7ff ffd7 	bl	8006310 <_Z41__static_initialization_and_destruction_0ii>
 8006362:	bd80      	pop	{r7, pc}

08006364 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	4618      	mov	r0, r3
 8006378:	f7fd fe12 	bl	8003fa0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800637c:	4a03      	ldr	r2, [pc, #12]	; (800638c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	601a      	str	r2, [r3, #0]
{

}
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4618      	mov	r0, r3
 8006386:	3710      	adds	r7, #16
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	080254f0 	.word	0x080254f0

08006390 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]
{

}
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <_ZN5Model4tickEv>:

void Model::tick()
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]

}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
    {
    }
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
    {
    }
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
    {
 80063f0:	4a04      	ldr	r2, [pc, #16]	; (8006404 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	601a      	str	r2, [r3, #0]
    }
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	08025a90 	.word	0x08025a90

08006408 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
    }
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f7ff ffe9 	bl	80063e8 <_ZN8touchgfx9PresenterD1Ev>
 8006416:	2104      	movs	r1, #4
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f01c ff8a 	bl	8023332 <_ZdlPvj>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
    {
 8006430:	4a04      	ldr	r2, [pc, #16]	; (8006444 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	601a      	str	r2, [r3, #0]
    }
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4618      	mov	r0, r3
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	08025a90 	.word	0x08025a90

08006448 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	4a06      	ldr	r2, [pc, #24]	; (800646c <_ZN13ModelListenerC1Ev+0x24>)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	605a      	str	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4618      	mov	r0, r3
 8006460:	370c      	adds	r7, #12
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	08025a80 	.word	0x08025a80

08006470 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	4a04      	ldr	r2, [pc, #16]	; (800648c <_ZN13ModelListenerD1Ev+0x1c>)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4618      	mov	r0, r3
 8006482:	370c      	adds	r7, #12
 8006484:	46bd      	mov	sp, r7
 8006486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648a:	4770      	bx	lr
 800648c:	08025a80 	.word	0x08025a80

08006490 <_ZN13ModelListenerD0Ev>:
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ffe9 	bl	8006470 <_ZN13ModelListenerD1Ev>
 800649e:	2108      	movs	r1, #8
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f01c ff46 	bl	8023332 <_ZdlPvj>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	4a09      	ldr	r2, [pc, #36]	; (80064e0 <_ZN16Screen1PresenterD1Ev+0x30>)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <_ZN16Screen1PresenterD1Ev+0x34>)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	605a      	str	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7ff ffd1 	bl	8006470 <_ZN13ModelListenerD1Ev>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4618      	mov	r0, r3
 80064d2:	f7ff ff89 	bl	80063e8 <_ZN8touchgfx9PresenterD1Ev>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	08025a58 	.word	0x08025a58
 80064e4:	08025a70 	.word	0x08025a70

080064e8 <_ZThn4_N16Screen1PresenterD1Ev>:
 80064e8:	f1a0 0004 	sub.w	r0, r0, #4
 80064ec:	e7e0      	b.n	80064b0 <_ZN16Screen1PresenterD1Ev>
 80064ee:	bf00      	nop

080064f0 <_ZN16Screen1PresenterD0Ev>:
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ffd9 	bl	80064b0 <_ZN16Screen1PresenterD1Ev>
 80064fe:	2110      	movs	r1, #16
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f01c ff16 	bl	8023332 <_ZdlPvj>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4618      	mov	r0, r3
 800650a:	3708      	adds	r7, #8
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <_ZThn4_N16Screen1PresenterD0Ev>:
 8006510:	f1a0 0004 	sub.w	r0, r0, #4
 8006514:	e7ec      	b.n	80064f0 <_ZN16Screen1PresenterD0Ev>
	...

08006518 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
    : view(v)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ff7f 	bl	8006428 <_ZN8touchgfx9PresenterC1Ev>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	3304      	adds	r3, #4
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff ff8a 	bl	8006448 <_ZN13ModelListenerC1Ev>
 8006534:	4a06      	ldr	r2, [pc, #24]	; (8006550 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	4a06      	ldr	r2, [pc, #24]	; (8006554 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	605a      	str	r2, [r3, #4]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	60da      	str	r2, [r3, #12]
{

}
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4618      	mov	r0, r3
 800654a:	3708      	adds	r7, #8
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	08025a58 	.word	0x08025a58
 8006554:	08025a70 	.word	0x08025a70

08006558 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]

}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]

}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 8006580:	b580      	push	{r7, lr}
 8006582:	b082      	sub	sp, #8
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <_ZN11Screen1ViewD1Ev+0x20>)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	601a      	str	r2, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fec1 	bl	8005318 <_ZN15Screen1ViewBaseD1Ev>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4618      	mov	r0, r3
 800659a:	3708      	adds	r7, #8
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	08025aa8 	.word	0x08025aa8

080065a4 <_ZN11Screen1ViewD0Ev>:
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff ffe7 	bl	8006580 <_ZN11Screen1ViewD1Ev>
 80065b2:	21b0      	movs	r1, #176	; 0xb0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f01c febc 	bl	8023332 <_ZdlPvj>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fee0 	bl	8005394 <_ZN15Screen1ViewBaseC1Ev>
 80065d4:	4a03      	ldr	r2, [pc, #12]	; (80065e4 <_ZN11Screen1ViewC1Ev+0x20>)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
{

}
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	08025aa8 	.word	0x08025aa8

080065e8 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fe ff58 	bl	80054a8 <_ZN15Screen1ViewBase11setupScreenEv>
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe fd30 	bl	8005070 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006610:	bf00      	nop
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <_ZN16Screen2PresenterD1Ev+0x30>)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	4a09      	ldr	r2, [pc, #36]	; (800664c <_ZN16Screen2PresenterD1Ev+0x34>)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	3304      	adds	r3, #4
 8006630:	4618      	mov	r0, r3
 8006632:	f7ff ff1d 	bl	8006470 <_ZN13ModelListenerD1Ev>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fed5 	bl	80063e8 <_ZN8touchgfx9PresenterD1Ev>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	08025adc 	.word	0x08025adc
 800664c:	08025af4 	.word	0x08025af4

08006650 <_ZThn4_N16Screen2PresenterD1Ev>:
 8006650:	f1a0 0004 	sub.w	r0, r0, #4
 8006654:	e7e0      	b.n	8006618 <_ZN16Screen2PresenterD1Ev>
 8006656:	bf00      	nop

08006658 <_ZN16Screen2PresenterD0Ev>:
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f7ff ffd9 	bl	8006618 <_ZN16Screen2PresenterD1Ev>
 8006666:	2110      	movs	r1, #16
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f01c fe62 	bl	8023332 <_ZdlPvj>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <_ZThn4_N16Screen2PresenterD0Ev>:
 8006678:	f1a0 0004 	sub.w	r0, r0, #4
 800667c:	e7ec      	b.n	8006658 <_ZN16Screen2PresenterD0Ev>
	...

08006680 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
    : view(v)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4618      	mov	r0, r3
 800668e:	f7ff fecb 	bl	8006428 <_ZN8touchgfx9PresenterC1Ev>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3304      	adds	r3, #4
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff fed6 	bl	8006448 <_ZN13ModelListenerC1Ev>
 800669c:	4a06      	ldr	r2, [pc, #24]	; (80066b8 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	4a06      	ldr	r2, [pc, #24]	; (80066bc <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	60da      	str	r2, [r3, #12]
{

}
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	08025adc 	.word	0x08025adc
 80066bc:	08025af4 	.word	0x08025af4

080066c0 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]

}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]

}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	4a05      	ldr	r2, [pc, #20]	; (8006708 <_ZN11Screen2ViewD1Ev+0x20>)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f7ff f84b 	bl	8005794 <_ZN15Screen2ViewBaseD1Ev>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4618      	mov	r0, r3
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	08025b04 	.word	0x08025b04

0800670c <_ZN11Screen2ViewD0Ev>:
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff ffe7 	bl	80066e8 <_ZN11Screen2ViewD1Ev>
 800671a:	21b0      	movs	r1, #176	; 0xb0
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f01c fe08 	bl	8023332 <_ZdlPvj>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <_ZN11Screen2ViewC1Ev>:
#include <gui/screen2_screen/Screen2View.hpp>

Screen2View::Screen2View()
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4618      	mov	r0, r3
 8006738:	f7ff f86a 	bl	8005810 <_ZN15Screen2ViewBaseC1Ev>
 800673c:	4a03      	ldr	r2, [pc, #12]	; (800674c <_ZN11Screen2ViewC1Ev+0x20>)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	601a      	str	r2, [r3, #0]
{

}
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4618      	mov	r0, r3
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	08025b04 	.word	0x08025b04

08006750 <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	f7ff f8e2 	bl	8005924 <_ZN15Screen2ViewBase11setupScreenEv>
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4618      	mov	r0, r3
 8006774:	f7fe fc7c 	bl	8005070 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <_ZN16Screen3PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen3Presenter() {};
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	4a09      	ldr	r2, [pc, #36]	; (80067b0 <_ZN16Screen3PresenterD1Ev+0x30>)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	4a09      	ldr	r2, [pc, #36]	; (80067b4 <_ZN16Screen3PresenterD1Ev+0x34>)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	605a      	str	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	4618      	mov	r0, r3
 800679a:	f7ff fe69 	bl	8006470 <_ZN13ModelListenerD1Ev>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fe21 	bl	80063e8 <_ZN8touchgfx9PresenterD1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	08025b38 	.word	0x08025b38
 80067b4:	08025b50 	.word	0x08025b50

080067b8 <_ZThn4_N16Screen3PresenterD1Ev>:
 80067b8:	f1a0 0004 	sub.w	r0, r0, #4
 80067bc:	e7e0      	b.n	8006780 <_ZN16Screen3PresenterD1Ev>
 80067be:	bf00      	nop

080067c0 <_ZN16Screen3PresenterD0Ev>:
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ffd9 	bl	8006780 <_ZN16Screen3PresenterD1Ev>
 80067ce:	2110      	movs	r1, #16
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f01c fdae 	bl	8023332 <_ZdlPvj>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4618      	mov	r0, r3
 80067da:	3708      	adds	r7, #8
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <_ZThn4_N16Screen3PresenterD0Ev>:
 80067e0:	f1a0 0004 	sub.w	r0, r0, #4
 80067e4:	e7ec      	b.n	80067c0 <_ZN16Screen3PresenterD0Ev>
	...

080067e8 <_ZN16Screen3PresenterC1ER11Screen3View>:
#include <gui/screen3_screen/Screen3View.hpp>
#include <gui/screen3_screen/Screen3Presenter.hpp>

Screen3Presenter::Screen3Presenter(Screen3View& v)
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
    : view(v)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff fe17 	bl	8006428 <_ZN8touchgfx9PresenterC1Ev>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4618      	mov	r0, r3
 8006800:	f7ff fe22 	bl	8006448 <_ZN13ModelListenerC1Ev>
 8006804:	4a06      	ldr	r2, [pc, #24]	; (8006820 <_ZN16Screen3PresenterC1ER11Screen3View+0x38>)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	601a      	str	r2, [r3, #0]
 800680a:	4a06      	ldr	r2, [pc, #24]	; (8006824 <_ZN16Screen3PresenterC1ER11Screen3View+0x3c>)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	605a      	str	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	60da      	str	r2, [r3, #12]
{

}
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}
 8006820:	08025b38 	.word	0x08025b38
 8006824:	08025b50 	.word	0x08025b50

08006828 <_ZN16Screen3Presenter8activateEv>:

void Screen3Presenter::activate()
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <_ZN16Screen3Presenter10deactivateEv>:

void Screen3Presenter::deactivate()
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]

}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <_ZN11Screen3ViewD1Ev>:

class Screen3View : public Screen3ViewBase
{
public:
    Screen3View();
    virtual ~Screen3View() {}
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	4a05      	ldr	r2, [pc, #20]	; (8006870 <_ZN11Screen3ViewD1Ev+0x20>)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	f7ff f93f 	bl	8005ae4 <_ZN15Screen3ViewBaseD1Ev>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	08025b60 	.word	0x08025b60

08006874 <_ZN11Screen3ViewD0Ev>:
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f7ff ffe7 	bl	8006850 <_ZN11Screen3ViewD1Ev>
 8006882:	21b0      	movs	r1, #176	; 0xb0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f01c fd54 	bl	8023332 <_ZdlPvj>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_ZN11Screen3ViewC1Ev>:
#include <gui/screen3_screen/Screen3View.hpp>

Screen3View::Screen3View()
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff f95e 	bl	8005b60 <_ZN15Screen3ViewBaseC1Ev>
 80068a4:	4a03      	ldr	r2, [pc, #12]	; (80068b4 <_ZN11Screen3ViewC1Ev+0x20>)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	601a      	str	r2, [r3, #0]
{

}
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08025b60 	.word	0x08025b60

080068b8 <_ZN11Screen3View11setupScreenEv>:

void Screen3View::setupScreen()
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::setupScreen();
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7ff f9d8 	bl	8005c78 <_ZN15Screen3ViewBase11setupScreenEv>
}
 80068c8:	bf00      	nop
 80068ca:	3708      	adds	r7, #8
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <_ZN11Screen3View14tearDownScreenEv>:

void Screen3View::tearDownScreen()
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
    Screen3ViewBase::tearDownScreen();
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7fe fbc8 	bl	8005070 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <__NVIC_SetPriority>:
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	4603      	mov	r3, r0
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	db0a      	blt.n	8006912 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	490c      	ldr	r1, [pc, #48]	; (8006934 <__NVIC_SetPriority+0x4c>)
 8006902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006906:	0112      	lsls	r2, r2, #4
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	440b      	add	r3, r1
 800690c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006910:	e00a      	b.n	8006928 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	b2da      	uxtb	r2, r3
 8006916:	4908      	ldr	r1, [pc, #32]	; (8006938 <__NVIC_SetPriority+0x50>)
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	3b04      	subs	r3, #4
 8006920:	0112      	lsls	r2, r2, #4
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	440b      	add	r3, r1
 8006926:	761a      	strb	r2, [r3, #24]
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	e000e100 	.word	0xe000e100
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006940:	4b05      	ldr	r3, [pc, #20]	; (8006958 <SysTick_Handler+0x1c>)
 8006942:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006944:	f002 fed6 	bl	80096f4 <xTaskGetSchedulerState>
 8006948:	4603      	mov	r3, r0
 800694a:	2b01      	cmp	r3, #1
 800694c:	d001      	beq.n	8006952 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800694e:	f000 ffeb 	bl	8007928 <xPortSysTickHandler>
  }
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	e000e010 	.word	0xe000e010

0800695c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006960:	2100      	movs	r1, #0
 8006962:	f06f 0004 	mvn.w	r0, #4
 8006966:	f7ff ffbf 	bl	80068e8 <__NVIC_SetPriority>
#endif
}
 800696a:	bf00      	nop
 800696c:	bd80      	pop	{r7, pc}
	...

08006970 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006976:	f3ef 8305 	mrs	r3, IPSR
 800697a:	603b      	str	r3, [r7, #0]
  return(result);
 800697c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800697e:	2b00      	cmp	r3, #0
 8006980:	d003      	beq.n	800698a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006982:	f06f 0305 	mvn.w	r3, #5
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	e00c      	b.n	80069a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <osKernelInitialize+0x44>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d105      	bne.n	800699e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <osKernelInitialize+0x44>)
 8006994:	2201      	movs	r2, #1
 8006996:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006998:	2300      	movs	r3, #0
 800699a:	607b      	str	r3, [r7, #4]
 800699c:	e002      	b.n	80069a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800699e:	f04f 33ff 	mov.w	r3, #4294967295
 80069a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069a4:	687b      	ldr	r3, [r7, #4]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	24001520 	.word	0x24001520

080069b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069be:	f3ef 8305 	mrs	r3, IPSR
 80069c2:	603b      	str	r3, [r7, #0]
  return(result);
 80069c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80069ca:	f06f 0305 	mvn.w	r3, #5
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	e010      	b.n	80069f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <osKernelStart+0x48>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d109      	bne.n	80069ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80069da:	f7ff ffbf 	bl	800695c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80069de:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <osKernelStart+0x48>)
 80069e0:	2202      	movs	r2, #2
 80069e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80069e4:	f002 fa2a 	bl	8008e3c <vTaskStartScheduler>
      stat = osOK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	607b      	str	r3, [r7, #4]
 80069ec:	e002      	b.n	80069f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80069ee:	f04f 33ff 	mov.w	r3, #4294967295
 80069f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80069f4:	687b      	ldr	r3, [r7, #4]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	bf00      	nop
 8006a00:	24001520 	.word	0x24001520

08006a04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	; 0x38
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006a10:	2300      	movs	r3, #0
 8006a12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a14:	f3ef 8305 	mrs	r3, IPSR
 8006a18:	617b      	str	r3, [r7, #20]
  return(result);
 8006a1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d17e      	bne.n	8006b1e <osThreadNew+0x11a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d07b      	beq.n	8006b1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006a26:	2380      	movs	r3, #128	; 0x80
 8006a28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006a2a:	2318      	movs	r3, #24
 8006a2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006a32:	f04f 33ff 	mov.w	r3, #4294967295
 8006a36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d045      	beq.n	8006aca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d002      	beq.n	8006a4c <osThreadNew+0x48>
        name = attr->name;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d002      	beq.n	8006a5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d008      	beq.n	8006a72 <osThreadNew+0x6e>
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	2b38      	cmp	r3, #56	; 0x38
 8006a64:	d805      	bhi.n	8006a72 <osThreadNew+0x6e>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <osThreadNew+0x72>
        return (NULL);
 8006a72:	2300      	movs	r3, #0
 8006a74:	e054      	b.n	8006b20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	089b      	lsrs	r3, r3, #2
 8006a84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00e      	beq.n	8006aac <osThreadNew+0xa8>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	2bbb      	cmp	r3, #187	; 0xbb
 8006a94:	d90a      	bls.n	8006aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d006      	beq.n	8006aac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d002      	beq.n	8006aac <osThreadNew+0xa8>
        mem = 1;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e010      	b.n	8006ace <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10c      	bne.n	8006ace <osThreadNew+0xca>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d108      	bne.n	8006ace <osThreadNew+0xca>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d104      	bne.n	8006ace <osThreadNew+0xca>
          mem = 0;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61bb      	str	r3, [r7, #24]
 8006ac8:	e001      	b.n	8006ace <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d110      	bne.n	8006af6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006adc:	9202      	str	r2, [sp, #8]
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6a3a      	ldr	r2, [r7, #32]
 8006ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f001 ffba 	bl	8008a64 <xTaskCreateStatic>
 8006af0:	4603      	mov	r3, r0
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	e013      	b.n	8006b1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d110      	bne.n	8006b1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	f107 0310 	add.w	r3, r7, #16
 8006b04:	9301      	str	r3, [sp, #4]
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	9300      	str	r3, [sp, #0]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f002 f805 	bl	8008b1e <xTaskCreate>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d001      	beq.n	8006b1e <osThreadNew+0x11a>
            hTask = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006b1e:	693b      	ldr	r3, [r7, #16]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3728      	adds	r7, #40	; 0x28
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b30:	f3ef 8305 	mrs	r3, IPSR
 8006b34:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b36:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d003      	beq.n	8006b44 <osDelay+0x1c>
    stat = osErrorISR;
 8006b3c:	f06f 0305 	mvn.w	r3, #5
 8006b40:	60fb      	str	r3, [r7, #12]
 8006b42:	e007      	b.n	8006b54 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d002      	beq.n	8006b54 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 f940 	bl	8008dd4 <vTaskDelay>
    }
  }

  return (stat);
 8006b54:	68fb      	ldr	r3, [r7, #12]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b08a      	sub	sp, #40	; 0x28
 8006b62:	af02      	add	r7, sp, #8
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b6e:	f3ef 8305 	mrs	r3, IPSR
 8006b72:	613b      	str	r3, [r7, #16]
  return(result);
 8006b74:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d175      	bne.n	8006c66 <osSemaphoreNew+0x108>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d072      	beq.n	8006c66 <osSemaphoreNew+0x108>
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d86e      	bhi.n	8006c66 <osSemaphoreNew+0x108>
    mem = -1;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d015      	beq.n	8006bc0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <osSemaphoreNew+0x4c>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ba2:	d902      	bls.n	8006baa <osSemaphoreNew+0x4c>
        mem = 1;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	e00c      	b.n	8006bc4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <osSemaphoreNew+0x66>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <osSemaphoreNew+0x66>
          mem = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e001      	b.n	8006bc4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bca:	d04c      	beq.n	8006c66 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d128      	bne.n	8006c24 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d10a      	bne.n	8006bee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2203      	movs	r2, #3
 8006bde:	9200      	str	r2, [sp, #0]
 8006be0:	2200      	movs	r2, #0
 8006be2:	2100      	movs	r1, #0
 8006be4:	2001      	movs	r0, #1
 8006be6:	f000 ff97 	bl	8007b18 <xQueueGenericCreateStatic>
 8006bea:	61f8      	str	r0, [r7, #28]
 8006bec:	e005      	b.n	8006bfa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8006bee:	2203      	movs	r2, #3
 8006bf0:	2100      	movs	r1, #0
 8006bf2:	2001      	movs	r0, #1
 8006bf4:	f001 f808 	bl	8007c08 <xQueueGenericCreate>
 8006bf8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d022      	beq.n	8006c46 <osSemaphoreNew+0xe8>
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d01f      	beq.n	8006c46 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006c06:	2300      	movs	r3, #0
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2100      	movs	r1, #0
 8006c0c:	69f8      	ldr	r0, [r7, #28]
 8006c0e:	f001 f8c3 	bl	8007d98 <xQueueGenericSend>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d016      	beq.n	8006c46 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8006c18:	69f8      	ldr	r0, [r7, #28]
 8006c1a:	f001 fd4f 	bl	80086bc <vQueueDelete>
            hSemaphore = NULL;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e010      	b.n	8006c46 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d108      	bne.n	8006c3c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f001 f845 	bl	8007cc2 <xQueueCreateCountingSemaphoreStatic>
 8006c38:	61f8      	str	r0, [r7, #28]
 8006c3a:	e004      	b.n	8006c46 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f001 f876 	bl	8007d30 <xQueueCreateCountingSemaphore>
 8006c44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00c      	beq.n	8006c66 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <osSemaphoreNew+0xfc>
          name = attr->name;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	e001      	b.n	8006c5e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006c5e:	6979      	ldr	r1, [r7, #20]
 8006c60:	69f8      	ldr	r0, [r7, #28]
 8006c62:	f001 fe77 	bl	8008954 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006c66:	69fb      	ldr	r3, [r7, #28]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3720      	adds	r7, #32
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d103      	bne.n	8006c90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006c88:	f06f 0303 	mvn.w	r3, #3
 8006c8c:	617b      	str	r3, [r7, #20]
 8006c8e:	e039      	b.n	8006d04 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c90:	f3ef 8305 	mrs	r3, IPSR
 8006c94:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d022      	beq.n	8006ce2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8006ca2:	f06f 0303 	mvn.w	r3, #3
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	e02c      	b.n	8006d04 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006cae:	f107 0308 	add.w	r3, r7, #8
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6938      	ldr	r0, [r7, #16]
 8006cb8:	f001 fc80 	bl	80085bc <xQueueReceiveFromISR>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d003      	beq.n	8006cca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8006cc2:	f06f 0302 	mvn.w	r3, #2
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e01c      	b.n	8006d04 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d019      	beq.n	8006d04 <osSemaphoreAcquire+0x94>
 8006cd0:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <osSemaphoreAcquire+0xa0>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	e010      	b.n	8006d04 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6938      	ldr	r0, [r7, #16]
 8006ce6:	f001 fb5d 	bl	80083a4 <xQueueSemaphoreTake>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d009      	beq.n	8006d04 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d003      	beq.n	8006cfe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8006cf6:	f06f 0301 	mvn.w	r3, #1
 8006cfa:	617b      	str	r3, [r7, #20]
 8006cfc:	e002      	b.n	8006d04 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8006cfe:	f06f 0302 	mvn.w	r3, #2
 8006d02:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006d04:	697b      	ldr	r3, [r7, #20]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3718      	adds	r7, #24
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d103      	bne.n	8006d32 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006d2a:	f06f 0303 	mvn.w	r3, #3
 8006d2e:	617b      	str	r3, [r7, #20]
 8006d30:	e02c      	b.n	8006d8c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d32:	f3ef 8305 	mrs	r3, IPSR
 8006d36:	60fb      	str	r3, [r7, #12]
  return(result);
 8006d38:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d01a      	beq.n	8006d74 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006d42:	f107 0308 	add.w	r3, r7, #8
 8006d46:	4619      	mov	r1, r3
 8006d48:	6938      	ldr	r0, [r7, #16]
 8006d4a:	f001 f9be 	bl	80080ca <xQueueGiveFromISR>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d003      	beq.n	8006d5c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8006d54:	f06f 0302 	mvn.w	r3, #2
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e017      	b.n	8006d8c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d014      	beq.n	8006d8c <osSemaphoreRelease+0x78>
 8006d62:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <osSemaphoreRelease+0x84>)
 8006d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d68:	601a      	str	r2, [r3, #0]
 8006d6a:	f3bf 8f4f 	dsb	sy
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	e00b      	b.n	8006d8c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006d74:	2300      	movs	r3, #0
 8006d76:	2200      	movs	r2, #0
 8006d78:	2100      	movs	r1, #0
 8006d7a:	6938      	ldr	r0, [r7, #16]
 8006d7c:	f001 f80c 	bl	8007d98 <xQueueGenericSend>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d002      	beq.n	8006d8c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8006d86:	f06f 0302 	mvn.w	r3, #2
 8006d8a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006d8c:	697b      	ldr	r3, [r7, #20]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	e000ed04 	.word	0xe000ed04

08006d9c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b08a      	sub	sp, #40	; 0x28
 8006da0:	af02      	add	r7, sp, #8
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dac:	f3ef 8305 	mrs	r3, IPSR
 8006db0:	613b      	str	r3, [r7, #16]
  return(result);
 8006db2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d15f      	bne.n	8006e78 <osMessageQueueNew+0xdc>
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d05c      	beq.n	8006e78 <osMessageQueueNew+0xdc>
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d059      	beq.n	8006e78 <osMessageQueueNew+0xdc>
    mem = -1;
 8006dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d029      	beq.n	8006e24 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d012      	beq.n	8006dfe <osMessageQueueNew+0x62>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	2b4f      	cmp	r3, #79	; 0x4f
 8006dde:	d90e      	bls.n	8006dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	695a      	ldr	r2, [r3, #20]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	68b9      	ldr	r1, [r7, #8]
 8006df0:	fb01 f303 	mul.w	r3, r1, r3
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d302      	bcc.n	8006dfe <osMessageQueueNew+0x62>
        mem = 1;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	61bb      	str	r3, [r7, #24]
 8006dfc:	e014      	b.n	8006e28 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d110      	bne.n	8006e28 <osMessageQueueNew+0x8c>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10c      	bne.n	8006e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d108      	bne.n	8006e28 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d104      	bne.n	8006e28 <osMessageQueueNew+0x8c>
          mem = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	61bb      	str	r3, [r7, #24]
 8006e22:	e001      	b.n	8006e28 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d10b      	bne.n	8006e46 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	691a      	ldr	r2, [r3, #16]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2100      	movs	r1, #0
 8006e38:	9100      	str	r1, [sp, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	68f8      	ldr	r0, [r7, #12]
 8006e3e:	f000 fe6b 	bl	8007b18 <xQueueGenericCreateStatic>
 8006e42:	61f8      	str	r0, [r7, #28]
 8006e44:	e008      	b.n	8006e58 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d105      	bne.n	8006e58 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 fed9 	bl	8007c08 <xQueueGenericCreate>
 8006e56:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d003      	beq.n	8006e6c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	617b      	str	r3, [r7, #20]
 8006e6a:	e001      	b.n	8006e70 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006e70:	6979      	ldr	r1, [r7, #20]
 8006e72:	69f8      	ldr	r0, [r7, #28]
 8006e74:	f001 fd6e 	bl	8008954 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006e78:	69fb      	ldr	r3, [r7, #28]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3720      	adds	r7, #32
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	4613      	mov	r3, r2
 8006e92:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e9c:	f3ef 8305 	mrs	r3, IPSR
 8006ea0:	617b      	str	r3, [r7, #20]
  return(result);
 8006ea2:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d028      	beq.n	8006efa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d005      	beq.n	8006eba <osMessageQueuePut+0x36>
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <osMessageQueuePut+0x36>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d003      	beq.n	8006ec2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006eba:	f06f 0303 	mvn.w	r3, #3
 8006ebe:	61fb      	str	r3, [r7, #28]
 8006ec0:	e038      	b.n	8006f34 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ec6:	f107 0210 	add.w	r2, r7, #16
 8006eca:	2300      	movs	r3, #0
 8006ecc:	68b9      	ldr	r1, [r7, #8]
 8006ece:	69b8      	ldr	r0, [r7, #24]
 8006ed0:	f001 f860 	bl	8007f94 <xQueueGenericSendFromISR>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d003      	beq.n	8006ee2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006eda:	f06f 0302 	mvn.w	r3, #2
 8006ede:	61fb      	str	r3, [r7, #28]
 8006ee0:	e028      	b.n	8006f34 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d025      	beq.n	8006f34 <osMessageQueuePut+0xb0>
 8006ee8:	4b15      	ldr	r3, [pc, #84]	; (8006f40 <osMessageQueuePut+0xbc>)
 8006eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eee:	601a      	str	r2, [r3, #0]
 8006ef0:	f3bf 8f4f 	dsb	sy
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	e01c      	b.n	8006f34 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d002      	beq.n	8006f06 <osMessageQueuePut+0x82>
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d103      	bne.n	8006f0e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006f06:	f06f 0303 	mvn.w	r3, #3
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	e012      	b.n	8006f34 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006f0e:	2300      	movs	r3, #0
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	68b9      	ldr	r1, [r7, #8]
 8006f14:	69b8      	ldr	r0, [r7, #24]
 8006f16:	f000 ff3f 	bl	8007d98 <xQueueGenericSend>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d009      	beq.n	8006f34 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006f26:	f06f 0301 	mvn.w	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
 8006f2c:	e002      	b.n	8006f34 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006f2e:	f06f 0302 	mvn.w	r3, #2
 8006f32:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006f34:	69fb      	ldr	r3, [r7, #28]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed04 	.word	0xe000ed04

08006f44 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b088      	sub	sp, #32
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f5a:	f3ef 8305 	mrs	r3, IPSR
 8006f5e:	617b      	str	r3, [r7, #20]
  return(result);
 8006f60:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d028      	beq.n	8006fb8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d005      	beq.n	8006f78 <osMessageQueueGet+0x34>
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <osMessageQueueGet+0x34>
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006f78:	f06f 0303 	mvn.w	r3, #3
 8006f7c:	61fb      	str	r3, [r7, #28]
 8006f7e:	e037      	b.n	8006ff0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006f80:	2300      	movs	r3, #0
 8006f82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006f84:	f107 0310 	add.w	r3, r7, #16
 8006f88:	461a      	mov	r2, r3
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	69b8      	ldr	r0, [r7, #24]
 8006f8e:	f001 fb15 	bl	80085bc <xQueueReceiveFromISR>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d003      	beq.n	8006fa0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006f98:	f06f 0302 	mvn.w	r3, #2
 8006f9c:	61fb      	str	r3, [r7, #28]
 8006f9e:	e027      	b.n	8006ff0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d024      	beq.n	8006ff0 <osMessageQueueGet+0xac>
 8006fa6:	4b15      	ldr	r3, [pc, #84]	; (8006ffc <osMessageQueueGet+0xb8>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	e01b      	b.n	8006ff0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d002      	beq.n	8006fc4 <osMessageQueueGet+0x80>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006fc4:	f06f 0303 	mvn.w	r3, #3
 8006fc8:	61fb      	str	r3, [r7, #28]
 8006fca:	e011      	b.n	8006ff0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	69b8      	ldr	r0, [r7, #24]
 8006fd2:	f001 f907 	bl	80081e4 <xQueueReceive>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d009      	beq.n	8006ff0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d003      	beq.n	8006fea <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006fe2:	f06f 0301 	mvn.w	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
 8006fe8:	e002      	b.n	8006ff0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006fea:	f06f 0302 	mvn.w	r3, #2
 8006fee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006ff0:	69fb      	ldr	r3, [r7, #28]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a07      	ldr	r2, [pc, #28]	; (800702c <vApplicationGetIdleTaskMemory+0x2c>)
 8007010:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	4a06      	ldr	r2, [pc, #24]	; (8007030 <vApplicationGetIdleTaskMemory+0x30>)
 8007016:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2280      	movs	r2, #128	; 0x80
 800701c:	601a      	str	r2, [r3, #0]
}
 800701e:	bf00      	nop
 8007020:	3714      	adds	r7, #20
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
 800702a:	bf00      	nop
 800702c:	24001524 	.word	0x24001524
 8007030:	240015e0 	.word	0x240015e0

08007034 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4a07      	ldr	r2, [pc, #28]	; (8007060 <vApplicationGetTimerTaskMemory+0x2c>)
 8007044:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a06      	ldr	r2, [pc, #24]	; (8007064 <vApplicationGetTimerTaskMemory+0x30>)
 800704a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007052:	601a      	str	r2, [r3, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	240017e0 	.word	0x240017e0
 8007064:	2400189c 	.word	0x2400189c

08007068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b08a      	sub	sp, #40	; 0x28
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007070:	2300      	movs	r3, #0
 8007072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007074:	f001 ff52 	bl	8008f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007078:	4b5b      	ldr	r3, [pc, #364]	; (80071e8 <pvPortMalloc+0x180>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d101      	bne.n	8007084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007080:	f000 f920 	bl	80072c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007084:	4b59      	ldr	r3, [pc, #356]	; (80071ec <pvPortMalloc+0x184>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4013      	ands	r3, r2
 800708c:	2b00      	cmp	r3, #0
 800708e:	f040 8093 	bne.w	80071b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01d      	beq.n	80070d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007098:	2208      	movs	r2, #8
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	4413      	add	r3, r2
 800709e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d014      	beq.n	80070d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f023 0307 	bic.w	r3, r3, #7
 80070b0:	3308      	adds	r3, #8
 80070b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070d0:	bf00      	nop
 80070d2:	e7fe      	b.n	80070d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d06e      	beq.n	80071b8 <pvPortMalloc+0x150>
 80070da:	4b45      	ldr	r3, [pc, #276]	; (80071f0 <pvPortMalloc+0x188>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d869      	bhi.n	80071b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80070e4:	4b43      	ldr	r3, [pc, #268]	; (80071f4 <pvPortMalloc+0x18c>)
 80070e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80070e8:	4b42      	ldr	r3, [pc, #264]	; (80071f4 <pvPortMalloc+0x18c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070ee:	e004      	b.n	80070fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	429a      	cmp	r2, r3
 8007102:	d903      	bls.n	800710c <pvPortMalloc+0xa4>
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1f1      	bne.n	80070f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800710c:	4b36      	ldr	r3, [pc, #216]	; (80071e8 <pvPortMalloc+0x180>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007112:	429a      	cmp	r2, r3
 8007114:	d050      	beq.n	80071b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2208      	movs	r2, #8
 800711c:	4413      	add	r3, r2
 800711e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	6a3b      	ldr	r3, [r7, #32]
 8007126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712a:	685a      	ldr	r2, [r3, #4]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	1ad2      	subs	r2, r2, r3
 8007130:	2308      	movs	r3, #8
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	429a      	cmp	r2, r3
 8007136:	d91f      	bls.n	8007178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4413      	add	r3, r2
 800713e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <pvPortMalloc+0xf8>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	613b      	str	r3, [r7, #16]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	69bb      	ldr	r3, [r7, #24]
 800716a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800716c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007172:	69b8      	ldr	r0, [r7, #24]
 8007174:	f000 f908 	bl	8007388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <pvPortMalloc+0x188>)
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	4a1b      	ldr	r2, [pc, #108]	; (80071f0 <pvPortMalloc+0x188>)
 8007184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007186:	4b1a      	ldr	r3, [pc, #104]	; (80071f0 <pvPortMalloc+0x188>)
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	4b1b      	ldr	r3, [pc, #108]	; (80071f8 <pvPortMalloc+0x190>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	429a      	cmp	r2, r3
 8007190:	d203      	bcs.n	800719a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007192:	4b17      	ldr	r3, [pc, #92]	; (80071f0 <pvPortMalloc+0x188>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a18      	ldr	r2, [pc, #96]	; (80071f8 <pvPortMalloc+0x190>)
 8007198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800719a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	4b13      	ldr	r3, [pc, #76]	; (80071ec <pvPortMalloc+0x184>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	431a      	orrs	r2, r3
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80071ae:	4b13      	ldr	r3, [pc, #76]	; (80071fc <pvPortMalloc+0x194>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3301      	adds	r3, #1
 80071b4:	4a11      	ldr	r2, [pc, #68]	; (80071fc <pvPortMalloc+0x194>)
 80071b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80071b8:	f001 febe 	bl	8008f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00a      	beq.n	80071dc <pvPortMalloc+0x174>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	60fb      	str	r3, [r7, #12]
}
 80071d8:	bf00      	nop
 80071da:	e7fe      	b.n	80071da <pvPortMalloc+0x172>
	return pvReturn;
 80071dc:	69fb      	ldr	r3, [r7, #28]
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	24009ca4 	.word	0x24009ca4
 80071ec:	24009cb8 	.word	0x24009cb8
 80071f0:	24009ca8 	.word	0x24009ca8
 80071f4:	24009c9c 	.word	0x24009c9c
 80071f8:	24009cac 	.word	0x24009cac
 80071fc:	24009cb0 	.word	0x24009cb0

08007200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d04d      	beq.n	80072ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007212:	2308      	movs	r3, #8
 8007214:	425b      	negs	r3, r3
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4413      	add	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <vPortFree+0xb8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4013      	ands	r3, r2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d10a      	bne.n	8007244 <vPortFree+0x44>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	60fb      	str	r3, [r7, #12]
}
 8007240:	bf00      	nop
 8007242:	e7fe      	b.n	8007242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d00a      	beq.n	8007262 <vPortFree+0x62>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60bb      	str	r3, [r7, #8]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <vPortFree+0xb8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	d01e      	beq.n	80072ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d11a      	bne.n	80072ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <vPortFree+0xb8>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	43db      	mvns	r3, r3
 8007282:	401a      	ands	r2, r3
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007288:	f001 fe48 	bl	8008f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <vPortFree+0xbc>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4413      	add	r3, r2
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <vPortFree+0xbc>)
 8007298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800729a:	6938      	ldr	r0, [r7, #16]
 800729c:	f000 f874 	bl	8007388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072a0:	4b07      	ldr	r3, [pc, #28]	; (80072c0 <vPortFree+0xc0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	3301      	adds	r3, #1
 80072a6:	4a06      	ldr	r2, [pc, #24]	; (80072c0 <vPortFree+0xc0>)
 80072a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80072aa:	f001 fe45 	bl	8008f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	24009cb8 	.word	0x24009cb8
 80072bc:	24009ca8 	.word	0x24009ca8
 80072c0:	24009cb4 	.word	0x24009cb4

080072c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072d0:	4b27      	ldr	r3, [pc, #156]	; (8007370 <prvHeapInit+0xac>)
 80072d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f003 0307 	and.w	r3, r3, #7
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00c      	beq.n	80072f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3307      	adds	r3, #7
 80072e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f023 0307 	bic.w	r3, r3, #7
 80072ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	4a1f      	ldr	r2, [pc, #124]	; (8007370 <prvHeapInit+0xac>)
 80072f4:	4413      	add	r3, r2
 80072f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80072fc:	4a1d      	ldr	r2, [pc, #116]	; (8007374 <prvHeapInit+0xb0>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007302:	4b1c      	ldr	r3, [pc, #112]	; (8007374 <prvHeapInit+0xb0>)
 8007304:	2200      	movs	r2, #0
 8007306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	4413      	add	r3, r2
 800730e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007310:	2208      	movs	r2, #8
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	1a9b      	subs	r3, r3, r2
 8007316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0307 	bic.w	r3, r3, #7
 800731e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4a15      	ldr	r2, [pc, #84]	; (8007378 <prvHeapInit+0xb4>)
 8007324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <prvHeapInit+0xb4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800732e:	4b12      	ldr	r3, [pc, #72]	; (8007378 <prvHeapInit+0xb4>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	1ad2      	subs	r2, r2, r3
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007344:	4b0c      	ldr	r3, [pc, #48]	; (8007378 <prvHeapInit+0xb4>)
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <prvHeapInit+0xb8>)
 8007352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	4a09      	ldr	r2, [pc, #36]	; (8007380 <prvHeapInit+0xbc>)
 800735a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800735c:	4b09      	ldr	r3, [pc, #36]	; (8007384 <prvHeapInit+0xc0>)
 800735e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007362:	601a      	str	r2, [r3, #0]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	24001c9c 	.word	0x24001c9c
 8007374:	24009c9c 	.word	0x24009c9c
 8007378:	24009ca4 	.word	0x24009ca4
 800737c:	24009cac 	.word	0x24009cac
 8007380:	24009ca8 	.word	0x24009ca8
 8007384:	24009cb8 	.word	0x24009cb8

08007388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <prvInsertBlockIntoFreeList+0xac>)
 8007392:	60fb      	str	r3, [r7, #12]
 8007394:	e002      	b.n	800739c <prvInsertBlockIntoFreeList+0x14>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d8f7      	bhi.n	8007396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	68ba      	ldr	r2, [r7, #8]
 80073b0:	4413      	add	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d108      	bne.n	80073ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	441a      	add	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	441a      	add	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d118      	bne.n	8007410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4b15      	ldr	r3, [pc, #84]	; (8007438 <prvInsertBlockIntoFreeList+0xb0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d00d      	beq.n	8007406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	441a      	add	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	e008      	b.n	8007418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007406:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <prvInsertBlockIntoFreeList+0xb0>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	e003      	b.n	8007418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d002      	beq.n	8007426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	24009c9c 	.word	0x24009c9c
 8007438:	24009ca4 	.word	0x24009ca4

0800743c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 0208 	add.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f04f 32ff 	mov.w	r2, #4294967295
 8007454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f103 0208 	add.w	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f103 0208 	add.w	r2, r3, #8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800748a:	bf00      	nop
 800748c:	370c      	adds	r7, #12
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007496:	b480      	push	{r7}
 8007498:	b085      	sub	sp, #20
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	1c5a      	adds	r2, r3, #1
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	601a      	str	r2, [r3, #0]
}
 80074d2:	bf00      	nop
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074de:	b480      	push	{r7}
 80074e0:	b085      	sub	sp, #20
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f4:	d103      	bne.n	80074fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	e00c      	b.n	8007518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3308      	adds	r3, #8
 8007502:	60fb      	str	r3, [r7, #12]
 8007504:	e002      	b.n	800750c <vListInsert+0x2e>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	429a      	cmp	r2, r3
 8007516:	d2f6      	bcs.n	8007506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	683a      	ldr	r2, [r7, #0]
 8007526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	68fa      	ldr	r2, [r7, #12]
 800752c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	683a      	ldr	r2, [r7, #0]
 8007532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	1c5a      	adds	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6892      	ldr	r2, [r2, #8]
 8007566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6852      	ldr	r2, [r2, #4]
 8007570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	429a      	cmp	r2, r3
 800757a:	d103      	bne.n	8007584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	689a      	ldr	r2, [r3, #8]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1e5a      	subs	r2, r3, #1
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3714      	adds	r7, #20
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3b04      	subs	r3, #4
 80075b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80075bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3b04      	subs	r3, #4
 80075c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	f023 0201 	bic.w	r2, r3, #1
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3b04      	subs	r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80075d4:	4a0c      	ldr	r2, [pc, #48]	; (8007608 <pxPortInitialiseStack+0x64>)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3b14      	subs	r3, #20
 80075de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	3b04      	subs	r3, #4
 80075ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f06f 0202 	mvn.w	r2, #2
 80075f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3b20      	subs	r3, #32
 80075f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80075fa:	68fb      	ldr	r3, [r7, #12]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	0800760d 	.word	0x0800760d

0800760c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007612:	2300      	movs	r3, #0
 8007614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007616:	4b12      	ldr	r3, [pc, #72]	; (8007660 <prvTaskExitError+0x54>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761e:	d00a      	beq.n	8007636 <prvTaskExitError+0x2a>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	60fb      	str	r3, [r7, #12]
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <prvTaskExitError+0x28>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	60bb      	str	r3, [r7, #8]
}
 8007648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800764a:	bf00      	nop
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d0fc      	beq.n	800764c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	2400000c 	.word	0x2400000c
	...

08007670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007670:	4b07      	ldr	r3, [pc, #28]	; (8007690 <pxCurrentTCBConst2>)
 8007672:	6819      	ldr	r1, [r3, #0]
 8007674:	6808      	ldr	r0, [r1, #0]
 8007676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767a:	f380 8809 	msr	PSP, r0
 800767e:	f3bf 8f6f 	isb	sy
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f380 8811 	msr	BASEPRI, r0
 800768a:	4770      	bx	lr
 800768c:	f3af 8000 	nop.w

08007690 <pxCurrentTCBConst2>:
 8007690:	24009d04 	.word	0x24009d04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007694:	bf00      	nop
 8007696:	bf00      	nop

08007698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007698:	4808      	ldr	r0, [pc, #32]	; (80076bc <prvPortStartFirstTask+0x24>)
 800769a:	6800      	ldr	r0, [r0, #0]
 800769c:	6800      	ldr	r0, [r0, #0]
 800769e:	f380 8808 	msr	MSP, r0
 80076a2:	f04f 0000 	mov.w	r0, #0
 80076a6:	f380 8814 	msr	CONTROL, r0
 80076aa:	b662      	cpsie	i
 80076ac:	b661      	cpsie	f
 80076ae:	f3bf 8f4f 	dsb	sy
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	df00      	svc	0
 80076b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80076ba:	bf00      	nop
 80076bc:	e000ed08 	.word	0xe000ed08

080076c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80076c6:	4b46      	ldr	r3, [pc, #280]	; (80077e0 <xPortStartScheduler+0x120>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a46      	ldr	r2, [pc, #280]	; (80077e4 <xPortStartScheduler+0x124>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d10a      	bne.n	80076e6 <xPortStartScheduler+0x26>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	613b      	str	r3, [r7, #16]
}
 80076e2:	bf00      	nop
 80076e4:	e7fe      	b.n	80076e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80076e6:	4b3e      	ldr	r3, [pc, #248]	; (80077e0 <xPortStartScheduler+0x120>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a3f      	ldr	r2, [pc, #252]	; (80077e8 <xPortStartScheduler+0x128>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d10a      	bne.n	8007706 <xPortStartScheduler+0x46>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	60fb      	str	r3, [r7, #12]
}
 8007702:	bf00      	nop
 8007704:	e7fe      	b.n	8007704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007706:	4b39      	ldr	r3, [pc, #228]	; (80077ec <xPortStartScheduler+0x12c>)
 8007708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	22ff      	movs	r2, #255	; 0xff
 8007716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	b2db      	uxtb	r3, r3
 8007724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007728:	b2da      	uxtb	r2, r3
 800772a:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <xPortStartScheduler+0x130>)
 800772c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800772e:	4b31      	ldr	r3, [pc, #196]	; (80077f4 <xPortStartScheduler+0x134>)
 8007730:	2207      	movs	r2, #7
 8007732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007734:	e009      	b.n	800774a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007736:	4b2f      	ldr	r3, [pc, #188]	; (80077f4 <xPortStartScheduler+0x134>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	4a2d      	ldr	r2, [pc, #180]	; (80077f4 <xPortStartScheduler+0x134>)
 800773e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	b2db      	uxtb	r3, r3
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	b2db      	uxtb	r3, r3
 8007748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	b2db      	uxtb	r3, r3
 800774e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007752:	2b80      	cmp	r3, #128	; 0x80
 8007754:	d0ef      	beq.n	8007736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007756:	4b27      	ldr	r3, [pc, #156]	; (80077f4 <xPortStartScheduler+0x134>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f1c3 0307 	rsb	r3, r3, #7
 800775e:	2b04      	cmp	r3, #4
 8007760:	d00a      	beq.n	8007778 <xPortStartScheduler+0xb8>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60bb      	str	r3, [r7, #8]
}
 8007774:	bf00      	nop
 8007776:	e7fe      	b.n	8007776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007778:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <xPortStartScheduler+0x134>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	021b      	lsls	r3, r3, #8
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <xPortStartScheduler+0x134>)
 8007780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007782:	4b1c      	ldr	r3, [pc, #112]	; (80077f4 <xPortStartScheduler+0x134>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800778a:	4a1a      	ldr	r2, [pc, #104]	; (80077f4 <xPortStartScheduler+0x134>)
 800778c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	b2da      	uxtb	r2, r3
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007796:	4b18      	ldr	r3, [pc, #96]	; (80077f8 <xPortStartScheduler+0x138>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a17      	ldr	r2, [pc, #92]	; (80077f8 <xPortStartScheduler+0x138>)
 800779c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a14      	ldr	r2, [pc, #80]	; (80077f8 <xPortStartScheduler+0x138>)
 80077a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077ae:	f000 f8dd 	bl	800796c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077b2:	4b12      	ldr	r3, [pc, #72]	; (80077fc <xPortStartScheduler+0x13c>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80077b8:	f000 f8fc 	bl	80079b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <xPortStartScheduler+0x140>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0f      	ldr	r2, [pc, #60]	; (8007800 <xPortStartScheduler+0x140>)
 80077c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80077c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077c8:	f7ff ff66 	bl	8007698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80077cc:	f001 fd1c 	bl	8009208 <vTaskSwitchContext>
	prvTaskExitError();
 80077d0:	f7ff ff1c 	bl	800760c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	e000ed00 	.word	0xe000ed00
 80077e4:	410fc271 	.word	0x410fc271
 80077e8:	410fc270 	.word	0x410fc270
 80077ec:	e000e400 	.word	0xe000e400
 80077f0:	24009cbc 	.word	0x24009cbc
 80077f4:	24009cc0 	.word	0x24009cc0
 80077f8:	e000ed20 	.word	0xe000ed20
 80077fc:	2400000c 	.word	0x2400000c
 8007800:	e000ef34 	.word	0xe000ef34

08007804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	607b      	str	r3, [r7, #4]
}
 800781c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800781e:	4b0f      	ldr	r3, [pc, #60]	; (800785c <vPortEnterCritical+0x58>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <vPortEnterCritical+0x58>)
 8007826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007828:	4b0c      	ldr	r3, [pc, #48]	; (800785c <vPortEnterCritical+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d10f      	bne.n	8007850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortEnterCritical+0x5c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <vPortEnterCritical+0x4c>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	603b      	str	r3, [r7, #0]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <vPortEnterCritical+0x4a>
	}
}
 8007850:	bf00      	nop
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	2400000c 	.word	0x2400000c
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800786a:	4b12      	ldr	r3, [pc, #72]	; (80078b4 <vPortExitCritical+0x50>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10a      	bne.n	8007888 <vPortExitCritical+0x24>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	607b      	str	r3, [r7, #4]
}
 8007884:	bf00      	nop
 8007886:	e7fe      	b.n	8007886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007888:	4b0a      	ldr	r3, [pc, #40]	; (80078b4 <vPortExitCritical+0x50>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3b01      	subs	r3, #1
 800788e:	4a09      	ldr	r2, [pc, #36]	; (80078b4 <vPortExitCritical+0x50>)
 8007890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007892:	4b08      	ldr	r3, [pc, #32]	; (80078b4 <vPortExitCritical+0x50>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d105      	bne.n	80078a6 <vPortExitCritical+0x42>
 800789a:	2300      	movs	r3, #0
 800789c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80078a6:	bf00      	nop
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2400000c 	.word	0x2400000c
	...

080078c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078c0:	f3ef 8009 	mrs	r0, PSP
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4b15      	ldr	r3, [pc, #84]	; (8007920 <pxCurrentTCBConst>)
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	f01e 0f10 	tst.w	lr, #16
 80078d0:	bf08      	it	eq
 80078d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80078d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078da:	6010      	str	r0, [r2, #0]
 80078dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80078e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078e4:	f380 8811 	msr	BASEPRI, r0
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f001 fc8a 	bl	8009208 <vTaskSwitchContext>
 80078f4:	f04f 0000 	mov.w	r0, #0
 80078f8:	f380 8811 	msr	BASEPRI, r0
 80078fc:	bc09      	pop	{r0, r3}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007906:	f01e 0f10 	tst.w	lr, #16
 800790a:	bf08      	it	eq
 800790c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007910:	f380 8809 	msr	PSP, r0
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	f3af 8000 	nop.w

08007920 <pxCurrentTCBConst>:
 8007920:	24009d04 	.word	0x24009d04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007924:	bf00      	nop
 8007926:	bf00      	nop

08007928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007942:	f001 fba7 	bl	8009094 <xTaskIncrementTick>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d003      	beq.n	8007954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800794c:	4b06      	ldr	r3, [pc, #24]	; (8007968 <xPortSysTickHandler+0x40>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	2300      	movs	r3, #0
 8007956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f383 8811 	msr	BASEPRI, r3
}
 800795e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	e000ed04 	.word	0xe000ed04

0800796c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800796c:	b480      	push	{r7}
 800796e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007970:	4b0b      	ldr	r3, [pc, #44]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007972:	2200      	movs	r2, #0
 8007974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007976:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <vPortSetupTimerInterrupt+0x38>)
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <vPortSetupTimerInterrupt+0x3c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <vPortSetupTimerInterrupt+0x40>)
 8007982:	fba2 2303 	umull	r2, r3, r2, r3
 8007986:	099b      	lsrs	r3, r3, #6
 8007988:	4a09      	ldr	r2, [pc, #36]	; (80079b0 <vPortSetupTimerInterrupt+0x44>)
 800798a:	3b01      	subs	r3, #1
 800798c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800798e:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <vPortSetupTimerInterrupt+0x34>)
 8007990:	2207      	movs	r2, #7
 8007992:	601a      	str	r2, [r3, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	e000e010 	.word	0xe000e010
 80079a4:	e000e018 	.word	0xe000e018
 80079a8:	24000010 	.word	0x24000010
 80079ac:	10624dd3 	.word	0x10624dd3
 80079b0:	e000e014 	.word	0xe000e014

080079b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80079b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80079c4 <vPortEnableVFP+0x10>
 80079b8:	6801      	ldr	r1, [r0, #0]
 80079ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80079be:	6001      	str	r1, [r0, #0]
 80079c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80079c2:	bf00      	nop
 80079c4:	e000ed88 	.word	0xe000ed88

080079c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079ce:	f3ef 8305 	mrs	r3, IPSR
 80079d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b0f      	cmp	r3, #15
 80079d8:	d914      	bls.n	8007a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <vPortValidateInterruptPriority+0x70>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	4413      	add	r3, r2
 80079e0:	781b      	ldrb	r3, [r3, #0]
 80079e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079e4:	4b15      	ldr	r3, [pc, #84]	; (8007a3c <vPortValidateInterruptPriority+0x74>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	7afa      	ldrb	r2, [r7, #11]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d20a      	bcs.n	8007a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	607b      	str	r3, [r7, #4]
}
 8007a00:	bf00      	nop
 8007a02:	e7fe      	b.n	8007a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007a04:	4b0e      	ldr	r3, [pc, #56]	; (8007a40 <vPortValidateInterruptPriority+0x78>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007a0c:	4b0d      	ldr	r3, [pc, #52]	; (8007a44 <vPortValidateInterruptPriority+0x7c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d90a      	bls.n	8007a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	603b      	str	r3, [r7, #0]
}
 8007a26:	bf00      	nop
 8007a28:	e7fe      	b.n	8007a28 <vPortValidateInterruptPriority+0x60>
	}
 8007a2a:	bf00      	nop
 8007a2c:	3714      	adds	r7, #20
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a34:	4770      	bx	lr
 8007a36:	bf00      	nop
 8007a38:	e000e3f0 	.word	0xe000e3f0
 8007a3c:	24009cbc 	.word	0x24009cbc
 8007a40:	e000ed0c 	.word	0xe000ed0c
 8007a44:	24009cc0 	.word	0x24009cc0

08007a48 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d10a      	bne.n	8007a72 <xQueueGenericReset+0x2a>
	__asm volatile
 8007a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a60:	f383 8811 	msr	BASEPRI, r3
 8007a64:	f3bf 8f6f 	isb	sy
 8007a68:	f3bf 8f4f 	dsb	sy
 8007a6c:	60bb      	str	r3, [r7, #8]
}
 8007a6e:	bf00      	nop
 8007a70:	e7fe      	b.n	8007a70 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007a72:	f7ff fec7 	bl	8007804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007a82:	fb01 f303 	mul.w	r3, r1, r3
 8007a86:	441a      	add	r2, r3
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	68f9      	ldr	r1, [r7, #12]
 8007aa6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007aa8:	fb01 f303 	mul.w	r3, r1, r3
 8007aac:	441a      	add	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	22ff      	movs	r2, #255	; 0xff
 8007ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d114      	bne.n	8007af2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	691b      	ldr	r3, [r3, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01a      	beq.n	8007b06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3310      	adds	r3, #16
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f001 fc4b 	bl	8009370 <xTaskRemoveFromEventList>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d012      	beq.n	8007b06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007ae0:	4b0c      	ldr	r3, [pc, #48]	; (8007b14 <xQueueGenericReset+0xcc>)
 8007ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	e009      	b.n	8007b06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	3310      	adds	r3, #16
 8007af6:	4618      	mov	r0, r3
 8007af8:	f7ff fca0 	bl	800743c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7ff fc9b 	bl	800743c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b06:	f7ff fead 	bl	8007864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b0a:	2301      	movs	r3, #1
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	e000ed04 	.word	0xe000ed04

08007b18 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08e      	sub	sp, #56	; 0x38
 8007b1c:	af02      	add	r7, sp, #8
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
 8007b24:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b30:	f383 8811 	msr	BASEPRI, r3
 8007b34:	f3bf 8f6f 	isb	sy
 8007b38:	f3bf 8f4f 	dsb	sy
 8007b3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b3e:	bf00      	nop
 8007b40:	e7fe      	b.n	8007b40 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d10a      	bne.n	8007b5e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4c:	f383 8811 	msr	BASEPRI, r3
 8007b50:	f3bf 8f6f 	isb	sy
 8007b54:	f3bf 8f4f 	dsb	sy
 8007b58:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d002      	beq.n	8007b6a <xQueueGenericCreateStatic+0x52>
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <xQueueGenericCreateStatic+0x56>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e000      	b.n	8007b70 <xQueueGenericCreateStatic+0x58>
 8007b6e:	2300      	movs	r3, #0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	623b      	str	r3, [r7, #32]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d102      	bne.n	8007b96 <xQueueGenericCreateStatic+0x7e>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d101      	bne.n	8007b9a <xQueueGenericCreateStatic+0x82>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e000      	b.n	8007b9c <xQueueGenericCreateStatic+0x84>
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10a      	bne.n	8007bb6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	61fb      	str	r3, [r7, #28]
}
 8007bb2:	bf00      	nop
 8007bb4:	e7fe      	b.n	8007bb4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007bb6:	2350      	movs	r3, #80	; 0x50
 8007bb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b50      	cmp	r3, #80	; 0x50
 8007bbe:	d00a      	beq.n	8007bd6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	61bb      	str	r3, [r7, #24]
}
 8007bd2:	bf00      	nop
 8007bd4:	e7fe      	b.n	8007bd4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007bd6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00d      	beq.n	8007bfe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bea:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	68b9      	ldr	r1, [r7, #8]
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f83f 	bl	8007c7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3730      	adds	r7, #48	; 0x30
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b08a      	sub	sp, #40	; 0x28
 8007c0c:	af02      	add	r7, sp, #8
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	4613      	mov	r3, r2
 8007c14:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10a      	bne.n	8007c32 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	613b      	str	r3, [r7, #16]
}
 8007c2e:	bf00      	nop
 8007c30:	e7fe      	b.n	8007c30 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	fb02 f303 	mul.w	r3, r2, r3
 8007c3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	3350      	adds	r3, #80	; 0x50
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7ff fa11 	bl	8007068 <pvPortMalloc>
 8007c46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d011      	beq.n	8007c72 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	3350      	adds	r3, #80	; 0x50
 8007c56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c60:	79fa      	ldrb	r2, [r7, #7]
 8007c62:	69bb      	ldr	r3, [r7, #24]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4613      	mov	r3, r2
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	68b9      	ldr	r1, [r7, #8]
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f000 f805 	bl	8007c7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007c72:	69bb      	ldr	r3, [r7, #24]
	}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3720      	adds	r7, #32
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d103      	bne.n	8007c98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c90:	69bb      	ldr	r3, [r7, #24]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e002      	b.n	8007c9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ca4:	69bb      	ldr	r3, [r7, #24]
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007caa:	2101      	movs	r1, #1
 8007cac:	69b8      	ldr	r0, [r7, #24]
 8007cae:	f7ff fecb 	bl	8007a48 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	78fa      	ldrb	r2, [r7, #3]
 8007cb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b08a      	sub	sp, #40	; 0x28
 8007cc6:	af02      	add	r7, sp, #8
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	61bb      	str	r3, [r7, #24]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d90a      	bls.n	8007d08 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	617b      	str	r3, [r7, #20]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d08:	2302      	movs	r3, #2
 8007d0a:	9300      	str	r3, [sp, #0]
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	2100      	movs	r1, #0
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff ff00 	bl	8007b18 <xQueueGenericCreateStatic>
 8007d18:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	68ba      	ldr	r2, [r7, #8]
 8007d24:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d26:	69fb      	ldr	r3, [r7, #28]
	}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3720      	adds	r7, #32
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d10a      	bne.n	8007d56 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8007d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d44:	f383 8811 	msr	BASEPRI, r3
 8007d48:	f3bf 8f6f 	isb	sy
 8007d4c:	f3bf 8f4f 	dsb	sy
 8007d50:	613b      	str	r3, [r7, #16]
}
 8007d52:	bf00      	nop
 8007d54:	e7fe      	b.n	8007d54 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d90a      	bls.n	8007d74 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	60fb      	str	r3, [r7, #12]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007d74:	2202      	movs	r2, #2
 8007d76:	2100      	movs	r1, #0
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f7ff ff45 	bl	8007c08 <xQueueGenericCreate>
 8007d7e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d002      	beq.n	8007d8c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007d8c:	697b      	ldr	r3, [r7, #20]
	}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	3718      	adds	r7, #24
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}
	...

08007d98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b08e      	sub	sp, #56	; 0x38
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	60f8      	str	r0, [r7, #12]
 8007da0:	60b9      	str	r1, [r7, #8]
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007da6:	2300      	movs	r3, #0
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10a      	bne.n	8007dca <xQueueGenericSend+0x32>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dc6:	bf00      	nop
 8007dc8:	e7fe      	b.n	8007dc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d103      	bne.n	8007dd8 <xQueueGenericSend+0x40>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d101      	bne.n	8007ddc <xQueueGenericSend+0x44>
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e000      	b.n	8007dde <xQueueGenericSend+0x46>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d10a      	bne.n	8007df8 <xQueueGenericSend+0x60>
	__asm volatile
 8007de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007de6:	f383 8811 	msr	BASEPRI, r3
 8007dea:	f3bf 8f6f 	isb	sy
 8007dee:	f3bf 8f4f 	dsb	sy
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007df4:	bf00      	nop
 8007df6:	e7fe      	b.n	8007df6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d103      	bne.n	8007e06 <xQueueGenericSend+0x6e>
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d101      	bne.n	8007e0a <xQueueGenericSend+0x72>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e000      	b.n	8007e0c <xQueueGenericSend+0x74>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10a      	bne.n	8007e26 <xQueueGenericSend+0x8e>
	__asm volatile
 8007e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e14:	f383 8811 	msr	BASEPRI, r3
 8007e18:	f3bf 8f6f 	isb	sy
 8007e1c:	f3bf 8f4f 	dsb	sy
 8007e20:	623b      	str	r3, [r7, #32]
}
 8007e22:	bf00      	nop
 8007e24:	e7fe      	b.n	8007e24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e26:	f001 fc65 	bl	80096f4 <xTaskGetSchedulerState>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d102      	bne.n	8007e36 <xQueueGenericSend+0x9e>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <xQueueGenericSend+0xa2>
 8007e36:	2301      	movs	r3, #1
 8007e38:	e000      	b.n	8007e3c <xQueueGenericSend+0xa4>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d10a      	bne.n	8007e56 <xQueueGenericSend+0xbe>
	__asm volatile
 8007e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e44:	f383 8811 	msr	BASEPRI, r3
 8007e48:	f3bf 8f6f 	isb	sy
 8007e4c:	f3bf 8f4f 	dsb	sy
 8007e50:	61fb      	str	r3, [r7, #28]
}
 8007e52:	bf00      	nop
 8007e54:	e7fe      	b.n	8007e54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e56:	f7ff fcd5 	bl	8007804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d302      	bcc.n	8007e6c <xQueueGenericSend+0xd4>
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	2b02      	cmp	r3, #2
 8007e6a:	d129      	bne.n	8007ec0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e72:	f000 fc5e 	bl	8008732 <prvCopyDataToQueue>
 8007e76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d010      	beq.n	8007ea2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e82:	3324      	adds	r3, #36	; 0x24
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fa73 	bl	8009370 <xTaskRemoveFromEventList>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d013      	beq.n	8007eb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e90:	4b3f      	ldr	r3, [pc, #252]	; (8007f90 <xQueueGenericSend+0x1f8>)
 8007e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e96:	601a      	str	r2, [r3, #0]
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	e00a      	b.n	8007eb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ea8:	4b39      	ldr	r3, [pc, #228]	; (8007f90 <xQueueGenericSend+0x1f8>)
 8007eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	f3bf 8f4f 	dsb	sy
 8007eb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007eb8:	f7ff fcd4 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e063      	b.n	8007f88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ec6:	f7ff fccd 	bl	8007864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e05c      	b.n	8007f88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d106      	bne.n	8007ee2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ed4:	f107 0314 	add.w	r3, r7, #20
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f001 faad 	bl	8009438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ee2:	f7ff fcbf 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ee6:	f001 f819 	bl	8008f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007eea:	f7ff fc8b 	bl	8007804 <vPortEnterCritical>
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ef4:	b25b      	sxtb	r3, r3
 8007ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efa:	d103      	bne.n	8007f04 <xQueueGenericSend+0x16c>
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d103      	bne.n	8007f1a <xQueueGenericSend+0x182>
 8007f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f1a:	f7ff fca3 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f1e:	1d3a      	adds	r2, r7, #4
 8007f20:	f107 0314 	add.w	r3, r7, #20
 8007f24:	4611      	mov	r1, r2
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 fa9c 	bl	8009464 <xTaskCheckForTimeOut>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d124      	bne.n	8007f7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f34:	f000 fcf5 	bl	8008922 <prvIsQueueFull>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d018      	beq.n	8007f70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	3310      	adds	r3, #16
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	4611      	mov	r1, r2
 8007f46:	4618      	mov	r0, r3
 8007f48:	f001 f9c2 	bl	80092d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f4e:	f000 fc80 	bl	8008852 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007f52:	f000 fff1 	bl	8008f38 <xTaskResumeAll>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f47f af7c 	bne.w	8007e56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007f5e:	4b0c      	ldr	r3, [pc, #48]	; (8007f90 <xQueueGenericSend+0x1f8>)
 8007f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f64:	601a      	str	r2, [r3, #0]
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	f3bf 8f6f 	isb	sy
 8007f6e:	e772      	b.n	8007e56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f72:	f000 fc6e 	bl	8008852 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f76:	f000 ffdf 	bl	8008f38 <xTaskResumeAll>
 8007f7a:	e76c      	b.n	8007e56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f7e:	f000 fc68 	bl	8008852 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f82:	f000 ffd9 	bl	8008f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3738      	adds	r7, #56	; 0x38
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	e000ed04 	.word	0xe000ed04

08007f94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b090      	sub	sp, #64	; 0x40
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d103      	bne.n	8007fd0 <xQueueGenericSendFromISR+0x3c>
 8007fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <xQueueGenericSendFromISR+0x40>
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e000      	b.n	8007fd6 <xQueueGenericSendFromISR+0x42>
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d10a      	bne.n	8007ff0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fde:	f383 8811 	msr	BASEPRI, r3
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	f3bf 8f4f 	dsb	sy
 8007fea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007fec:	bf00      	nop
 8007fee:	e7fe      	b.n	8007fee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d103      	bne.n	8007ffe <xQueueGenericSendFromISR+0x6a>
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d101      	bne.n	8008002 <xQueueGenericSendFromISR+0x6e>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <xQueueGenericSendFromISR+0x70>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d10a      	bne.n	800801e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800800c:	f383 8811 	msr	BASEPRI, r3
 8008010:	f3bf 8f6f 	isb	sy
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	623b      	str	r3, [r7, #32]
}
 800801a:	bf00      	nop
 800801c:	e7fe      	b.n	800801c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800801e:	f7ff fcd3 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008022:	f3ef 8211 	mrs	r2, BASEPRI
 8008026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802a:	f383 8811 	msr	BASEPRI, r3
 800802e:	f3bf 8f6f 	isb	sy
 8008032:	f3bf 8f4f 	dsb	sy
 8008036:	61fa      	str	r2, [r7, #28]
 8008038:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800803a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008046:	429a      	cmp	r2, r3
 8008048:	d302      	bcc.n	8008050 <xQueueGenericSendFromISR+0xbc>
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	2b02      	cmp	r3, #2
 800804e:	d12f      	bne.n	80080b0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008052:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008060:	683a      	ldr	r2, [r7, #0]
 8008062:	68b9      	ldr	r1, [r7, #8]
 8008064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008066:	f000 fb64 	bl	8008732 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800806a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800806e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008072:	d112      	bne.n	800809a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b00      	cmp	r3, #0
 800807a:	d016      	beq.n	80080aa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800807c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807e:	3324      	adds	r3, #36	; 0x24
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f975 	bl	8009370 <xTaskRemoveFromEventList>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00e      	beq.n	80080aa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2201      	movs	r2, #1
 8008096:	601a      	str	r2, [r3, #0]
 8008098:	e007      	b.n	80080aa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800809a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800809e:	3301      	adds	r3, #1
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	b25a      	sxtb	r2, r3
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80080aa:	2301      	movs	r3, #1
 80080ac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80080ae:	e001      	b.n	80080b4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80080b0:	2300      	movs	r3, #0
 80080b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80080b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080b6:	617b      	str	r3, [r7, #20]
	__asm volatile
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f383 8811 	msr	BASEPRI, r3
}
 80080be:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3740      	adds	r7, #64	; 0x40
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}

080080ca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b08e      	sub	sp, #56	; 0x38
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80080d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d10a      	bne.n	80080f4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	623b      	str	r3, [r7, #32]
}
 80080f0:	bf00      	nop
 80080f2:	e7fe      	b.n	80080f2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <xQueueGiveFromISR+0x48>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	61fb      	str	r3, [r7, #28]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <xQueueGiveFromISR+0x58>
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <xQueueGiveFromISR+0x5c>
 8008122:	2301      	movs	r3, #1
 8008124:	e000      	b.n	8008128 <xQueueGiveFromISR+0x5e>
 8008126:	2300      	movs	r3, #0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <xQueueGiveFromISR+0x78>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	61bb      	str	r3, [r7, #24]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008142:	f7ff fc41 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 8008146:	f3ef 8211 	mrs	r2, BASEPRI
 800814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814e:	f383 8811 	msr	BASEPRI, r3
 8008152:	f3bf 8f6f 	isb	sy
 8008156:	f3bf 8f4f 	dsb	sy
 800815a:	617a      	str	r2, [r7, #20]
 800815c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800815e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008160:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800816e:	429a      	cmp	r2, r3
 8008170:	d22b      	bcs.n	80081ca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008184:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818c:	d112      	bne.n	80081b4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d016      	beq.n	80081c4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008198:	3324      	adds	r3, #36	; 0x24
 800819a:	4618      	mov	r0, r3
 800819c:	f001 f8e8 	bl	8009370 <xTaskRemoveFromEventList>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00e      	beq.n	80081c4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00b      	beq.n	80081c4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	2201      	movs	r2, #1
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e007      	b.n	80081c4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80081b8:	3301      	adds	r3, #1
 80081ba:	b2db      	uxtb	r3, r3
 80081bc:	b25a      	sxtb	r2, r3
 80081be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081c4:	2301      	movs	r3, #1
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
 80081c8:	e001      	b.n	80081ce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081ca:	2300      	movs	r3, #0
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f383 8811 	msr	BASEPRI, r3
}
 80081d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3738      	adds	r7, #56	; 0x38
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b08c      	sub	sp, #48	; 0x30
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081f0:	2300      	movs	r3, #0
 80081f2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d10a      	bne.n	8008214 <xQueueReceive+0x30>
	__asm volatile
 80081fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008202:	f383 8811 	msr	BASEPRI, r3
 8008206:	f3bf 8f6f 	isb	sy
 800820a:	f3bf 8f4f 	dsb	sy
 800820e:	623b      	str	r3, [r7, #32]
}
 8008210:	bf00      	nop
 8008212:	e7fe      	b.n	8008212 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d103      	bne.n	8008222 <xQueueReceive+0x3e>
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <xQueueReceive+0x42>
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <xQueueReceive+0x44>
 8008226:	2300      	movs	r3, #0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d10a      	bne.n	8008242 <xQueueReceive+0x5e>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008230:	f383 8811 	msr	BASEPRI, r3
 8008234:	f3bf 8f6f 	isb	sy
 8008238:	f3bf 8f4f 	dsb	sy
 800823c:	61fb      	str	r3, [r7, #28]
}
 800823e:	bf00      	nop
 8008240:	e7fe      	b.n	8008240 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008242:	f001 fa57 	bl	80096f4 <xTaskGetSchedulerState>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <xQueueReceive+0x6e>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <xQueueReceive+0x72>
 8008252:	2301      	movs	r3, #1
 8008254:	e000      	b.n	8008258 <xQueueReceive+0x74>
 8008256:	2300      	movs	r3, #0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d10a      	bne.n	8008272 <xQueueReceive+0x8e>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	61bb      	str	r3, [r7, #24]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008272:	f7ff fac7 	bl	8007804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01f      	beq.n	80082c2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008282:	68b9      	ldr	r1, [r7, #8]
 8008284:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008286:	f000 fabe 	bl	8008806 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800828a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828c:	1e5a      	subs	r2, r3, #1
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00f      	beq.n	80082ba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	3310      	adds	r3, #16
 800829e:	4618      	mov	r0, r3
 80082a0:	f001 f866 	bl	8009370 <xTaskRemoveFromEventList>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082aa:	4b3d      	ldr	r3, [pc, #244]	; (80083a0 <xQueueReceive+0x1bc>)
 80082ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082ba:	f7ff fad3 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 80082be:	2301      	movs	r3, #1
 80082c0:	e069      	b.n	8008396 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082c8:	f7ff facc 	bl	8007864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e062      	b.n	8008396 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082d6:	f107 0310 	add.w	r3, r7, #16
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 f8ac 	bl	8009438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082e4:	f7ff fabe 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e8:	f000 fe18 	bl	8008f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ec:	f7ff fa8a 	bl	8007804 <vPortEnterCritical>
 80082f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d103      	bne.n	8008306 <xQueueReceive+0x122>
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830c:	b25b      	sxtb	r3, r3
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d103      	bne.n	800831c <xQueueReceive+0x138>
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800831c:	f7ff faa2 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008320:	1d3a      	adds	r2, r7, #4
 8008322:	f107 0310 	add.w	r3, r7, #16
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f001 f89b 	bl	8009464 <xTaskCheckForTimeOut>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d123      	bne.n	800837c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008336:	f000 fade 	bl	80088f6 <prvIsQueueEmpty>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d017      	beq.n	8008370 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	4611      	mov	r1, r2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 ffc1 	bl	80092d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800834e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008350:	f000 fa7f 	bl	8008852 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008354:	f000 fdf0 	bl	8008f38 <xTaskResumeAll>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d189      	bne.n	8008272 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800835e:	4b10      	ldr	r3, [pc, #64]	; (80083a0 <xQueueReceive+0x1bc>)
 8008360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	f3bf 8f4f 	dsb	sy
 800836a:	f3bf 8f6f 	isb	sy
 800836e:	e780      	b.n	8008272 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008372:	f000 fa6e 	bl	8008852 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008376:	f000 fddf 	bl	8008f38 <xTaskResumeAll>
 800837a:	e77a      	b.n	8008272 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800837c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800837e:	f000 fa68 	bl	8008852 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008382:	f000 fdd9 	bl	8008f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008388:	f000 fab5 	bl	80088f6 <prvIsQueueEmpty>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f43f af6f 	beq.w	8008272 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008394:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008396:	4618      	mov	r0, r3
 8008398:	3730      	adds	r7, #48	; 0x30
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08e      	sub	sp, #56	; 0x38
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80083ae:	2300      	movs	r3, #0
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80083b6:	2300      	movs	r3, #0
 80083b8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80083ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d10a      	bne.n	80083d6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	623b      	str	r3, [r7, #32]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80083d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	61fb      	str	r3, [r7, #28]
}
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083f4:	f001 f97e 	bl	80096f4 <xTaskGetSchedulerState>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <xQueueSemaphoreTake+0x60>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d101      	bne.n	8008408 <xQueueSemaphoreTake+0x64>
 8008404:	2301      	movs	r3, #1
 8008406:	e000      	b.n	800840a <xQueueSemaphoreTake+0x66>
 8008408:	2300      	movs	r3, #0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d10a      	bne.n	8008424 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	61bb      	str	r3, [r7, #24]
}
 8008420:	bf00      	nop
 8008422:	e7fe      	b.n	8008422 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008424:	f7ff f9ee 	bl	8007804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800842e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	d024      	beq.n	800847e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008436:	1e5a      	subs	r2, r3, #1
 8008438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800843c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008444:	f001 facc 	bl	80099e0 <pvTaskIncrementMutexHeldCount>
 8008448:	4602      	mov	r2, r0
 800844a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800844c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00f      	beq.n	8008476 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008458:	3310      	adds	r3, #16
 800845a:	4618      	mov	r0, r3
 800845c:	f000 ff88 	bl	8009370 <xTaskRemoveFromEventList>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008466:	4b54      	ldr	r3, [pc, #336]	; (80085b8 <xQueueSemaphoreTake+0x214>)
 8008468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800846c:	601a      	str	r2, [r3, #0]
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008476:	f7ff f9f5 	bl	8007864 <vPortExitCritical>
				return pdPASS;
 800847a:	2301      	movs	r3, #1
 800847c:	e097      	b.n	80085ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d111      	bne.n	80084a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	617b      	str	r3, [r7, #20]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80084a0:	f7ff f9e0 	bl	8007864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80084a4:	2300      	movs	r3, #0
 80084a6:	e082      	b.n	80085ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d106      	bne.n	80084bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 ffc0 	bl	8009438 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084b8:	2301      	movs	r3, #1
 80084ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084bc:	f7ff f9d2 	bl	8007864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c0:	f000 fd2c 	bl	8008f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c4:	f7ff f99e 	bl	8007804 <vPortEnterCritical>
 80084c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80084ce:	b25b      	sxtb	r3, r3
 80084d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d4:	d103      	bne.n	80084de <xQueueSemaphoreTake+0x13a>
 80084d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d8:	2200      	movs	r2, #0
 80084da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084e4:	b25b      	sxtb	r3, r3
 80084e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ea:	d103      	bne.n	80084f4 <xQueueSemaphoreTake+0x150>
 80084ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ee:	2200      	movs	r2, #0
 80084f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084f4:	f7ff f9b6 	bl	8007864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084f8:	463a      	mov	r2, r7
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	4611      	mov	r1, r2
 8008500:	4618      	mov	r0, r3
 8008502:	f000 ffaf 	bl	8009464 <xTaskCheckForTimeOut>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d132      	bne.n	8008572 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800850c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800850e:	f000 f9f2 	bl	80088f6 <prvIsQueueEmpty>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d026      	beq.n	8008566 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008520:	f7ff f970 	bl	8007804 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f901 	bl	8009730 <xTaskPriorityInherit>
 800852e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008530:	f7ff f998 	bl	8007864 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008536:	3324      	adds	r3, #36	; 0x24
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	4611      	mov	r1, r2
 800853c:	4618      	mov	r0, r3
 800853e:	f000 fec7 	bl	80092d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008542:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008544:	f000 f985 	bl	8008852 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008548:	f000 fcf6 	bl	8008f38 <xTaskResumeAll>
 800854c:	4603      	mov	r3, r0
 800854e:	2b00      	cmp	r3, #0
 8008550:	f47f af68 	bne.w	8008424 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008554:	4b18      	ldr	r3, [pc, #96]	; (80085b8 <xQueueSemaphoreTake+0x214>)
 8008556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800855a:	601a      	str	r2, [r3, #0]
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	e75e      	b.n	8008424 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008566:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008568:	f000 f973 	bl	8008852 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800856c:	f000 fce4 	bl	8008f38 <xTaskResumeAll>
 8008570:	e758      	b.n	8008424 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008574:	f000 f96d 	bl	8008852 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008578:	f000 fcde 	bl	8008f38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800857c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800857e:	f000 f9ba 	bl	80088f6 <prvIsQueueEmpty>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	f43f af4d 	beq.w	8008424 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00d      	beq.n	80085ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008590:	f7ff f938 	bl	8007804 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008596:	f000 f8b4 	bl	8008702 <prvGetDisinheritPriorityAfterTimeout>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 f99a 	bl	80098dc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80085a8:	f7ff f95c 	bl	8007864 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80085ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3738      	adds	r7, #56	; 0x38
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	e000ed04 	.word	0xe000ed04

080085bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08e      	sub	sp, #56	; 0x38
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80085cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10a      	bne.n	80085e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80085d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d6:	f383 8811 	msr	BASEPRI, r3
 80085da:	f3bf 8f6f 	isb	sy
 80085de:	f3bf 8f4f 	dsb	sy
 80085e2:	623b      	str	r3, [r7, #32]
}
 80085e4:	bf00      	nop
 80085e6:	e7fe      	b.n	80085e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d103      	bne.n	80085f6 <xQueueReceiveFromISR+0x3a>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <xQueueReceiveFromISR+0x3e>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <xQueueReceiveFromISR+0x40>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	61fb      	str	r3, [r7, #28]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008616:	f7ff f9d7 	bl	80079c8 <vPortValidateInterruptPriority>
	__asm volatile
 800861a:	f3ef 8211 	mrs	r2, BASEPRI
 800861e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	61ba      	str	r2, [r7, #24]
 8008630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800863c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d02f      	beq.n	80086a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008650:	f000 f8d9 	bl	8008806 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	1e5a      	subs	r2, r3, #1
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800865c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008664:	d112      	bne.n	800868c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d016      	beq.n	800869c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fe7c 	bl	8009370 <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00e      	beq.n	800869c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d00b      	beq.n	800869c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	601a      	str	r2, [r3, #0]
 800868a:	e007      	b.n	800869c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800868c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008690:	3301      	adds	r3, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	b25a      	sxtb	r2, r3
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800869c:	2301      	movs	r3, #1
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
 80086a0:	e001      	b.n	80086a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80086a2:	2300      	movs	r3, #0
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	f383 8811 	msr	BASEPRI, r3
}
 80086b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3738      	adds	r7, #56	; 0x38
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}

080086bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10a      	bne.n	80086e4 <vQueueDelete+0x28>
	__asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	60bb      	str	r3, [r7, #8]
}
 80086e0:	bf00      	nop
 80086e2:	e7fe      	b.n	80086e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 f95f 	bl	80089a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d102      	bne.n	80086fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7fe fd83 	bl	8007200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008702:	b480      	push	{r7}
 8008704:	b085      	sub	sp, #20
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800870e:	2b00      	cmp	r3, #0
 8008710:	d006      	beq.n	8008720 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800871c:	60fb      	str	r3, [r7, #12]
 800871e:	e001      	b.n	8008724 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008720:	2300      	movs	r3, #0
 8008722:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008724:	68fb      	ldr	r3, [r7, #12]
	}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b086      	sub	sp, #24
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800873e:	2300      	movs	r3, #0
 8008740:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008746:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874c:	2b00      	cmp	r3, #0
 800874e:	d10d      	bne.n	800876c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d14d      	bne.n	80087f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	4618      	mov	r0, r3
 800875e:	f001 f84f 	bl	8009800 <xTaskPriorityDisinherit>
 8008762:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	609a      	str	r2, [r3, #8]
 800876a:	e043      	b.n	80087f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d119      	bne.n	80087a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6858      	ldr	r0, [r3, #4]
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800877a:	461a      	mov	r2, r3
 800877c:	68b9      	ldr	r1, [r7, #8]
 800877e:	f01a ff7f 	bl	8023680 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878a:	441a      	add	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689b      	ldr	r3, [r3, #8]
 8008798:	429a      	cmp	r2, r3
 800879a:	d32b      	bcc.n	80087f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	605a      	str	r2, [r3, #4]
 80087a4:	e026      	b.n	80087f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68d8      	ldr	r0, [r3, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	461a      	mov	r2, r3
 80087b0:	68b9      	ldr	r1, [r7, #8]
 80087b2:	f01a ff65 	bl	8023680 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	68da      	ldr	r2, [r3, #12]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	425b      	negs	r3, r3
 80087c0:	441a      	add	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d207      	bcs.n	80087e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689a      	ldr	r2, [r3, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087da:	425b      	negs	r3, r3
 80087dc:	441a      	add	r2, r3
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d105      	bne.n	80087f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d002      	beq.n	80087f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	1c5a      	adds	r2, r3, #1
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80087fc:	697b      	ldr	r3, [r7, #20]
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
 800880e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d018      	beq.n	800884a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68da      	ldr	r2, [r3, #12]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	441a      	add	r2, r3
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	429a      	cmp	r2, r3
 8008830:	d303      	bcc.n	800883a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	68d9      	ldr	r1, [r3, #12]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	461a      	mov	r2, r3
 8008844:	6838      	ldr	r0, [r7, #0]
 8008846:	f01a ff1b 	bl	8023680 <memcpy>
	}
}
 800884a:	bf00      	nop
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b084      	sub	sp, #16
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800885a:	f7fe ffd3 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008864:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008866:	e011      	b.n	800888c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886c:	2b00      	cmp	r3, #0
 800886e:	d012      	beq.n	8008896 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3324      	adds	r3, #36	; 0x24
 8008874:	4618      	mov	r0, r3
 8008876:	f000 fd7b 	bl	8009370 <xTaskRemoveFromEventList>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008880:	f000 fe52 	bl	8009528 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	3b01      	subs	r3, #1
 8008888:	b2db      	uxtb	r3, r3
 800888a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800888c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008890:	2b00      	cmp	r3, #0
 8008892:	dce9      	bgt.n	8008868 <prvUnlockQueue+0x16>
 8008894:	e000      	b.n	8008898 <prvUnlockQueue+0x46>
					break;
 8008896:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	22ff      	movs	r2, #255	; 0xff
 800889c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80088a0:	f7fe ffe0 	bl	8007864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80088a4:	f7fe ffae 	bl	8007804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80088ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088b0:	e011      	b.n	80088d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d012      	beq.n	80088e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	3310      	adds	r3, #16
 80088be:	4618      	mov	r0, r3
 80088c0:	f000 fd56 	bl	8009370 <xTaskRemoveFromEventList>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80088ca:	f000 fe2d 	bl	8009528 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80088ce:	7bbb      	ldrb	r3, [r7, #14]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80088d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	dce9      	bgt.n	80088b2 <prvUnlockQueue+0x60>
 80088de:	e000      	b.n	80088e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80088e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	22ff      	movs	r2, #255	; 0xff
 80088e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80088ea:	f7fe ffbb 	bl	8007864 <vPortExitCritical>
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b084      	sub	sp, #16
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80088fe:	f7fe ff81 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008906:	2b00      	cmp	r3, #0
 8008908:	d102      	bne.n	8008910 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800890a:	2301      	movs	r3, #1
 800890c:	60fb      	str	r3, [r7, #12]
 800890e:	e001      	b.n	8008914 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008910:	2300      	movs	r3, #0
 8008912:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008914:	f7fe ffa6 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8008918:	68fb      	ldr	r3, [r7, #12]
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008922:	b580      	push	{r7, lr}
 8008924:	b084      	sub	sp, #16
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800892a:	f7fe ff6b 	bl	8007804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008936:	429a      	cmp	r2, r3
 8008938:	d102      	bne.n	8008940 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800893a:	2301      	movs	r3, #1
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	e001      	b.n	8008944 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008944:	f7fe ff8e 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8008948:	68fb      	ldr	r3, [r7, #12]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3710      	adds	r7, #16
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
	...

08008954 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800895e:	2300      	movs	r3, #0
 8008960:	60fb      	str	r3, [r7, #12]
 8008962:	e014      	b.n	800898e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008964:	4a0f      	ldr	r2, [pc, #60]	; (80089a4 <vQueueAddToRegistry+0x50>)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10b      	bne.n	8008988 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008970:	490c      	ldr	r1, [pc, #48]	; (80089a4 <vQueueAddToRegistry+0x50>)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	683a      	ldr	r2, [r7, #0]
 8008976:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800897a:	4a0a      	ldr	r2, [pc, #40]	; (80089a4 <vQueueAddToRegistry+0x50>)
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4413      	add	r3, r2
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008986:	e006      	b.n	8008996 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	3301      	adds	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2b07      	cmp	r3, #7
 8008992:	d9e7      	bls.n	8008964 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008994:	bf00      	nop
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	24009cc4 	.word	0x24009cc4

080089a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80089a8:	b480      	push	{r7}
 80089aa:	b085      	sub	sp, #20
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089b0:	2300      	movs	r3, #0
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e016      	b.n	80089e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80089b6:	4a10      	ldr	r2, [pc, #64]	; (80089f8 <vQueueUnregisterQueue+0x50>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	00db      	lsls	r3, r3, #3
 80089bc:	4413      	add	r3, r2
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	687a      	ldr	r2, [r7, #4]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d10b      	bne.n	80089de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80089c6:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <vQueueUnregisterQueue+0x50>)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2100      	movs	r1, #0
 80089cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80089d0:	4a09      	ldr	r2, [pc, #36]	; (80089f8 <vQueueUnregisterQueue+0x50>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	00db      	lsls	r3, r3, #3
 80089d6:	4413      	add	r3, r2
 80089d8:	2200      	movs	r2, #0
 80089da:	605a      	str	r2, [r3, #4]
				break;
 80089dc:	e006      	b.n	80089ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	3301      	adds	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2b07      	cmp	r3, #7
 80089e8:	d9e5      	bls.n	80089b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	24009cc4 	.word	0x24009cc4

080089fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b086      	sub	sp, #24
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	60f8      	str	r0, [r7, #12]
 8008a04:	60b9      	str	r1, [r7, #8]
 8008a06:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a0c:	f7fe fefa 	bl	8007804 <vPortEnterCritical>
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a16:	b25b      	sxtb	r3, r3
 8008a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a1c:	d103      	bne.n	8008a26 <vQueueWaitForMessageRestricted+0x2a>
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a2c:	b25b      	sxtb	r3, r3
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d103      	bne.n	8008a3c <vQueueWaitForMessageRestricted+0x40>
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a3c:	f7fe ff12 	bl	8007864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	3324      	adds	r3, #36	; 0x24
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 fc61 	bl	8009318 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a56:	6978      	ldr	r0, [r7, #20]
 8008a58:	f7ff fefb 	bl	8008852 <prvUnlockQueue>
	}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08e      	sub	sp, #56	; 0x38
 8008a68:	af04      	add	r7, sp, #16
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
 8008a70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d10a      	bne.n	8008a8e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	623b      	str	r3, [r7, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	e7fe      	b.n	8008a8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d10a      	bne.n	8008aaa <xTaskCreateStatic+0x46>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	61fb      	str	r3, [r7, #28]
}
 8008aa6:	bf00      	nop
 8008aa8:	e7fe      	b.n	8008aa8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008aaa:	23bc      	movs	r3, #188	; 0xbc
 8008aac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2bbc      	cmp	r3, #188	; 0xbc
 8008ab2:	d00a      	beq.n	8008aca <xTaskCreateStatic+0x66>
	__asm volatile
 8008ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab8:	f383 8811 	msr	BASEPRI, r3
 8008abc:	f3bf 8f6f 	isb	sy
 8008ac0:	f3bf 8f4f 	dsb	sy
 8008ac4:	61bb      	str	r3, [r7, #24]
}
 8008ac6:	bf00      	nop
 8008ac8:	e7fe      	b.n	8008ac8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008aca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d01e      	beq.n	8008b10 <xTaskCreateStatic+0xac>
 8008ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d01b      	beq.n	8008b10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ae0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008aea:	2300      	movs	r3, #0
 8008aec:	9303      	str	r3, [sp, #12]
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	9302      	str	r3, [sp, #8]
 8008af2:	f107 0314 	add.w	r3, r7, #20
 8008af6:	9301      	str	r3, [sp, #4]
 8008af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 f850 	bl	8008ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b0a:	f000 f8f3 	bl	8008cf4 <prvAddNewTaskToReadyList>
 8008b0e:	e001      	b.n	8008b14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b14:	697b      	ldr	r3, [r7, #20]
	}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3728      	adds	r7, #40	; 0x28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b08c      	sub	sp, #48	; 0x30
 8008b22:	af04      	add	r7, sp, #16
 8008b24:	60f8      	str	r0, [r7, #12]
 8008b26:	60b9      	str	r1, [r7, #8]
 8008b28:	603b      	str	r3, [r7, #0]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b2e:	88fb      	ldrh	r3, [r7, #6]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f7fe fa98 	bl	8007068 <pvPortMalloc>
 8008b38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00e      	beq.n	8008b5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b40:	20bc      	movs	r0, #188	; 0xbc
 8008b42:	f7fe fa91 	bl	8007068 <pvPortMalloc>
 8008b46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d003      	beq.n	8008b56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
 8008b54:	e005      	b.n	8008b62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b56:	6978      	ldr	r0, [r7, #20]
 8008b58:	f7fe fb52 	bl	8007200 <vPortFree>
 8008b5c:	e001      	b.n	8008b62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d017      	beq.n	8008b98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b70:	88fa      	ldrh	r2, [r7, #6]
 8008b72:	2300      	movs	r3, #0
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	68b9      	ldr	r1, [r7, #8]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f80e 	bl	8008ba8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b8c:	69f8      	ldr	r0, [r7, #28]
 8008b8e:	f000 f8b1 	bl	8008cf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b92:	2301      	movs	r3, #1
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	e002      	b.n	8008b9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b98:	f04f 33ff 	mov.w	r3, #4294967295
 8008b9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b9e:	69bb      	ldr	r3, [r7, #24]
	}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3720      	adds	r7, #32
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	21a5      	movs	r1, #165	; 0xa5
 8008bc2:	f01a fd6b 	bl	802369c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008bd0:	440b      	add	r3, r1
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	f023 0307 	bic.w	r3, r3, #7
 8008bde:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bee:	f383 8811 	msr	BASEPRI, r3
 8008bf2:	f3bf 8f6f 	isb	sy
 8008bf6:	f3bf 8f4f 	dsb	sy
 8008bfa:	617b      	str	r3, [r7, #20]
}
 8008bfc:	bf00      	nop
 8008bfe:	e7fe      	b.n	8008bfe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d01f      	beq.n	8008c46 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c06:	2300      	movs	r3, #0
 8008c08:	61fb      	str	r3, [r7, #28]
 8008c0a:	e012      	b.n	8008c32 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c0c:	68ba      	ldr	r2, [r7, #8]
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	7819      	ldrb	r1, [r3, #0]
 8008c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	3334      	adds	r3, #52	; 0x34
 8008c1c:	460a      	mov	r2, r1
 8008c1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c20:	68ba      	ldr	r2, [r7, #8]
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2b0f      	cmp	r3, #15
 8008c36:	d9e9      	bls.n	8008c0c <prvInitialiseNewTask+0x64>
 8008c38:	e000      	b.n	8008c3c <prvInitialiseNewTask+0x94>
			{
				break;
 8008c3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2200      	movs	r2, #0
 8008c40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008c44:	e003      	b.n	8008c4e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c50:	2b37      	cmp	r3, #55	; 0x37
 8008c52:	d901      	bls.n	8008c58 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c54:	2337      	movs	r3, #55	; 0x37
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	2200      	movs	r2, #0
 8008c68:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fc04 	bl	800747c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c76:	3318      	adds	r3, #24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fe fbff 	bl	800747c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c86:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	2200      	movs	r2, #0
 8008c98:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	3354      	adds	r3, #84	; 0x54
 8008ca8:	2260      	movs	r2, #96	; 0x60
 8008caa:	2100      	movs	r1, #0
 8008cac:	4618      	mov	r0, r3
 8008cae:	f01a fcf5 	bl	802369c <memset>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	4a0c      	ldr	r2, [pc, #48]	; (8008ce8 <prvInitialiseNewTask+0x140>)
 8008cb6:	659a      	str	r2, [r3, #88]	; 0x58
 8008cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cba:	4a0c      	ldr	r2, [pc, #48]	; (8008cec <prvInitialiseNewTask+0x144>)
 8008cbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8008cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc0:	4a0b      	ldr	r2, [pc, #44]	; (8008cf0 <prvInitialiseNewTask+0x148>)
 8008cc2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	68f9      	ldr	r1, [r7, #12]
 8008cc8:	69b8      	ldr	r0, [r7, #24]
 8008cca:	f7fe fc6b 	bl	80075a4 <pxPortInitialiseStack>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ce0:	bf00      	nop
 8008ce2:	3720      	adds	r7, #32
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}
 8008ce8:	08026448 	.word	0x08026448
 8008cec:	08026468 	.word	0x08026468
 8008cf0:	08026428 	.word	0x08026428

08008cf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cfc:	f7fe fd82 	bl	8007804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d00:	4b2d      	ldr	r3, [pc, #180]	; (8008db8 <prvAddNewTaskToReadyList+0xc4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3301      	adds	r3, #1
 8008d06:	4a2c      	ldr	r2, [pc, #176]	; (8008db8 <prvAddNewTaskToReadyList+0xc4>)
 8008d08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d0a:	4b2c      	ldr	r3, [pc, #176]	; (8008dbc <prvAddNewTaskToReadyList+0xc8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d109      	bne.n	8008d26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d12:	4a2a      	ldr	r2, [pc, #168]	; (8008dbc <prvAddNewTaskToReadyList+0xc8>)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d18:	4b27      	ldr	r3, [pc, #156]	; (8008db8 <prvAddNewTaskToReadyList+0xc4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d110      	bne.n	8008d42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d20:	f000 fc26 	bl	8009570 <prvInitialiseTaskLists>
 8008d24:	e00d      	b.n	8008d42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d26:	4b26      	ldr	r3, [pc, #152]	; (8008dc0 <prvAddNewTaskToReadyList+0xcc>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d109      	bne.n	8008d42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d2e:	4b23      	ldr	r3, [pc, #140]	; (8008dbc <prvAddNewTaskToReadyList+0xc8>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d802      	bhi.n	8008d42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d3c:	4a1f      	ldr	r2, [pc, #124]	; (8008dbc <prvAddNewTaskToReadyList+0xc8>)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d42:	4b20      	ldr	r3, [pc, #128]	; (8008dc4 <prvAddNewTaskToReadyList+0xd0>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3301      	adds	r3, #1
 8008d48:	4a1e      	ldr	r2, [pc, #120]	; (8008dc4 <prvAddNewTaskToReadyList+0xd0>)
 8008d4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008d4c:	4b1d      	ldr	r3, [pc, #116]	; (8008dc4 <prvAddNewTaskToReadyList+0xd0>)
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d58:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <prvAddNewTaskToReadyList+0xd4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d903      	bls.n	8008d68 <prvAddNewTaskToReadyList+0x74>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	4a18      	ldr	r2, [pc, #96]	; (8008dc8 <prvAddNewTaskToReadyList+0xd4>)
 8008d66:	6013      	str	r3, [r2, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	4a15      	ldr	r2, [pc, #84]	; (8008dcc <prvAddNewTaskToReadyList+0xd8>)
 8008d76:	441a      	add	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	3304      	adds	r3, #4
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	4610      	mov	r0, r2
 8008d80:	f7fe fb89 	bl	8007496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d84:	f7fe fd6e 	bl	8007864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d88:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <prvAddNewTaskToReadyList+0xcc>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00e      	beq.n	8008dae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <prvAddNewTaskToReadyList+0xc8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d207      	bcs.n	8008dae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d9e:	4b0c      	ldr	r3, [pc, #48]	; (8008dd0 <prvAddNewTaskToReadyList+0xdc>)
 8008da0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008da4:	601a      	str	r2, [r3, #0]
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dae:	bf00      	nop
 8008db0:	3708      	adds	r7, #8
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
 8008db6:	bf00      	nop
 8008db8:	2400a1d8 	.word	0x2400a1d8
 8008dbc:	24009d04 	.word	0x24009d04
 8008dc0:	2400a1e4 	.word	0x2400a1e4
 8008dc4:	2400a1f4 	.word	0x2400a1f4
 8008dc8:	2400a1e0 	.word	0x2400a1e0
 8008dcc:	24009d08 	.word	0x24009d08
 8008dd0:	e000ed04 	.word	0xe000ed04

08008dd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d017      	beq.n	8008e16 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008de6:	4b13      	ldr	r3, [pc, #76]	; (8008e34 <vTaskDelay+0x60>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d00a      	beq.n	8008e04 <vTaskDelay+0x30>
	__asm volatile
 8008dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df2:	f383 8811 	msr	BASEPRI, r3
 8008df6:	f3bf 8f6f 	isb	sy
 8008dfa:	f3bf 8f4f 	dsb	sy
 8008dfe:	60bb      	str	r3, [r7, #8]
}
 8008e00:	bf00      	nop
 8008e02:	e7fe      	b.n	8008e02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008e04:	f000 f88a 	bl	8008f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e08:	2100      	movs	r1, #0
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f000 fdfc 	bl	8009a08 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e10:	f000 f892 	bl	8008f38 <xTaskResumeAll>
 8008e14:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d107      	bne.n	8008e2c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008e1c:	4b06      	ldr	r3, [pc, #24]	; (8008e38 <vTaskDelay+0x64>)
 8008e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e2c:	bf00      	nop
 8008e2e:	3710      	adds	r7, #16
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	2400a200 	.word	0x2400a200
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08a      	sub	sp, #40	; 0x28
 8008e40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e46:	2300      	movs	r3, #0
 8008e48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e4a:	463a      	mov	r2, r7
 8008e4c:	1d39      	adds	r1, r7, #4
 8008e4e:	f107 0308 	add.w	r3, r7, #8
 8008e52:	4618      	mov	r0, r3
 8008e54:	f7fe f8d4 	bl	8007000 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e58:	6839      	ldr	r1, [r7, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	9202      	str	r2, [sp, #8]
 8008e60:	9301      	str	r3, [sp, #4]
 8008e62:	2300      	movs	r3, #0
 8008e64:	9300      	str	r3, [sp, #0]
 8008e66:	2300      	movs	r3, #0
 8008e68:	460a      	mov	r2, r1
 8008e6a:	4924      	ldr	r1, [pc, #144]	; (8008efc <vTaskStartScheduler+0xc0>)
 8008e6c:	4824      	ldr	r0, [pc, #144]	; (8008f00 <vTaskStartScheduler+0xc4>)
 8008e6e:	f7ff fdf9 	bl	8008a64 <xTaskCreateStatic>
 8008e72:	4603      	mov	r3, r0
 8008e74:	4a23      	ldr	r2, [pc, #140]	; (8008f04 <vTaskStartScheduler+0xc8>)
 8008e76:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008e78:	4b22      	ldr	r3, [pc, #136]	; (8008f04 <vTaskStartScheduler+0xc8>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d002      	beq.n	8008e86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008e80:	2301      	movs	r3, #1
 8008e82:	617b      	str	r3, [r7, #20]
 8008e84:	e001      	b.n	8008e8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	d102      	bne.n	8008e96 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008e90:	f000 fe0e 	bl	8009ab0 <xTimerCreateTimerTask>
 8008e94:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d11b      	bne.n	8008ed4 <vTaskStartScheduler+0x98>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	613b      	str	r3, [r7, #16]
}
 8008eae:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008eb0:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <vTaskStartScheduler+0xcc>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3354      	adds	r3, #84	; 0x54
 8008eb6:	4a15      	ldr	r2, [pc, #84]	; (8008f0c <vTaskStartScheduler+0xd0>)
 8008eb8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008eba:	4b15      	ldr	r3, [pc, #84]	; (8008f10 <vTaskStartScheduler+0xd4>)
 8008ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ec2:	4b14      	ldr	r3, [pc, #80]	; (8008f14 <vTaskStartScheduler+0xd8>)
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ec8:	4b13      	ldr	r3, [pc, #76]	; (8008f18 <vTaskStartScheduler+0xdc>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ece:	f7fe fbf7 	bl	80076c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ed2:	e00e      	b.n	8008ef2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eda:	d10a      	bne.n	8008ef2 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	60fb      	str	r3, [r7, #12]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <vTaskStartScheduler+0xb4>
}
 8008ef2:	bf00      	nop
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	08025208 	.word	0x08025208
 8008f00:	08009541 	.word	0x08009541
 8008f04:	2400a1fc 	.word	0x2400a1fc
 8008f08:	24009d04 	.word	0x24009d04
 8008f0c:	240000c4 	.word	0x240000c4
 8008f10:	2400a1f8 	.word	0x2400a1f8
 8008f14:	2400a1e4 	.word	0x2400a1e4
 8008f18:	2400a1dc 	.word	0x2400a1dc

08008f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f20:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <vTaskSuspendAll+0x18>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	3301      	adds	r3, #1
 8008f26:	4a03      	ldr	r2, [pc, #12]	; (8008f34 <vTaskSuspendAll+0x18>)
 8008f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f2a:	bf00      	nop
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr
 8008f34:	2400a200 	.word	0x2400a200

08008f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f42:	2300      	movs	r3, #0
 8008f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f46:	4b42      	ldr	r3, [pc, #264]	; (8009050 <xTaskResumeAll+0x118>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d10a      	bne.n	8008f64 <xTaskResumeAll+0x2c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	603b      	str	r3, [r7, #0]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f64:	f7fe fc4e 	bl	8007804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f68:	4b39      	ldr	r3, [pc, #228]	; (8009050 <xTaskResumeAll+0x118>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	4a38      	ldr	r2, [pc, #224]	; (8009050 <xTaskResumeAll+0x118>)
 8008f70:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f72:	4b37      	ldr	r3, [pc, #220]	; (8009050 <xTaskResumeAll+0x118>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d162      	bne.n	8009040 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f7a:	4b36      	ldr	r3, [pc, #216]	; (8009054 <xTaskResumeAll+0x11c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d05e      	beq.n	8009040 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f82:	e02f      	b.n	8008fe4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f84:	4b34      	ldr	r3, [pc, #208]	; (8009058 <xTaskResumeAll+0x120>)
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	3318      	adds	r3, #24
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fadd 	bl	8007550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	3304      	adds	r3, #4
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7fe fad8 	bl	8007550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa4:	4b2d      	ldr	r3, [pc, #180]	; (800905c <xTaskResumeAll+0x124>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	d903      	bls.n	8008fb4 <xTaskResumeAll+0x7c>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	4a2a      	ldr	r2, [pc, #168]	; (800905c <xTaskResumeAll+0x124>)
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb8:	4613      	mov	r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	4a27      	ldr	r2, [pc, #156]	; (8009060 <xTaskResumeAll+0x128>)
 8008fc2:	441a      	add	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	3304      	adds	r3, #4
 8008fc8:	4619      	mov	r1, r3
 8008fca:	4610      	mov	r0, r2
 8008fcc:	f7fe fa63 	bl	8007496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	4b23      	ldr	r3, [pc, #140]	; (8009064 <xTaskResumeAll+0x12c>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008fde:	4b22      	ldr	r3, [pc, #136]	; (8009068 <xTaskResumeAll+0x130>)
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fe4:	4b1c      	ldr	r3, [pc, #112]	; (8009058 <xTaskResumeAll+0x120>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d1cb      	bne.n	8008f84 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ff2:	f000 fb5f 	bl	80096b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ff6:	4b1d      	ldr	r3, [pc, #116]	; (800906c <xTaskResumeAll+0x134>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d010      	beq.n	8009024 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009002:	f000 f847 	bl	8009094 <xTaskIncrementTick>
 8009006:	4603      	mov	r3, r0
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800900c:	4b16      	ldr	r3, [pc, #88]	; (8009068 <xTaskResumeAll+0x130>)
 800900e:	2201      	movs	r2, #1
 8009010:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3b01      	subs	r3, #1
 8009016:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d1f1      	bne.n	8009002 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800901e:	4b13      	ldr	r3, [pc, #76]	; (800906c <xTaskResumeAll+0x134>)
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009024:	4b10      	ldr	r3, [pc, #64]	; (8009068 <xTaskResumeAll+0x130>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d009      	beq.n	8009040 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800902c:	2301      	movs	r3, #1
 800902e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009030:	4b0f      	ldr	r3, [pc, #60]	; (8009070 <xTaskResumeAll+0x138>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009040:	f7fe fc10 	bl	8007864 <vPortExitCritical>

	return xAlreadyYielded;
 8009044:	68bb      	ldr	r3, [r7, #8]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	2400a200 	.word	0x2400a200
 8009054:	2400a1d8 	.word	0x2400a1d8
 8009058:	2400a198 	.word	0x2400a198
 800905c:	2400a1e0 	.word	0x2400a1e0
 8009060:	24009d08 	.word	0x24009d08
 8009064:	24009d04 	.word	0x24009d04
 8009068:	2400a1ec 	.word	0x2400a1ec
 800906c:	2400a1e8 	.word	0x2400a1e8
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <xTaskGetTickCount+0x1c>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009080:	687b      	ldr	r3, [r7, #4]
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
 800908e:	bf00      	nop
 8009090:	2400a1dc 	.word	0x2400a1dc

08009094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800909a:	2300      	movs	r3, #0
 800909c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800909e:	4b4f      	ldr	r3, [pc, #316]	; (80091dc <xTaskIncrementTick+0x148>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f040 808f 	bne.w	80091c6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090a8:	4b4d      	ldr	r3, [pc, #308]	; (80091e0 <xTaskIncrementTick+0x14c>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	3301      	adds	r3, #1
 80090ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090b0:	4a4b      	ldr	r2, [pc, #300]	; (80091e0 <xTaskIncrementTick+0x14c>)
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d120      	bne.n	80090fe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80090bc:	4b49      	ldr	r3, [pc, #292]	; (80091e4 <xTaskIncrementTick+0x150>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00a      	beq.n	80090dc <xTaskIncrementTick+0x48>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	603b      	str	r3, [r7, #0]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xTaskIncrementTick+0x46>
 80090dc:	4b41      	ldr	r3, [pc, #260]	; (80091e4 <xTaskIncrementTick+0x150>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	60fb      	str	r3, [r7, #12]
 80090e2:	4b41      	ldr	r3, [pc, #260]	; (80091e8 <xTaskIncrementTick+0x154>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a3f      	ldr	r2, [pc, #252]	; (80091e4 <xTaskIncrementTick+0x150>)
 80090e8:	6013      	str	r3, [r2, #0]
 80090ea:	4a3f      	ldr	r2, [pc, #252]	; (80091e8 <xTaskIncrementTick+0x154>)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	6013      	str	r3, [r2, #0]
 80090f0:	4b3e      	ldr	r3, [pc, #248]	; (80091ec <xTaskIncrementTick+0x158>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	3301      	adds	r3, #1
 80090f6:	4a3d      	ldr	r2, [pc, #244]	; (80091ec <xTaskIncrementTick+0x158>)
 80090f8:	6013      	str	r3, [r2, #0]
 80090fa:	f000 fadb 	bl	80096b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090fe:	4b3c      	ldr	r3, [pc, #240]	; (80091f0 <xTaskIncrementTick+0x15c>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	429a      	cmp	r2, r3
 8009106:	d349      	bcc.n	800919c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009108:	4b36      	ldr	r3, [pc, #216]	; (80091e4 <xTaskIncrementTick+0x150>)
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009112:	4b37      	ldr	r3, [pc, #220]	; (80091f0 <xTaskIncrementTick+0x15c>)
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	601a      	str	r2, [r3, #0]
					break;
 800911a:	e03f      	b.n	800919c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911c:	4b31      	ldr	r3, [pc, #196]	; (80091e4 <xTaskIncrementTick+0x150>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	429a      	cmp	r2, r3
 8009132:	d203      	bcs.n	800913c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009134:	4a2e      	ldr	r2, [pc, #184]	; (80091f0 <xTaskIncrementTick+0x15c>)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800913a:	e02f      	b.n	800919c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	3304      	adds	r3, #4
 8009140:	4618      	mov	r0, r3
 8009142:	f7fe fa05 	bl	8007550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914a:	2b00      	cmp	r3, #0
 800914c:	d004      	beq.n	8009158 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	3318      	adds	r3, #24
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f9fc 	bl	8007550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800915c:	4b25      	ldr	r3, [pc, #148]	; (80091f4 <xTaskIncrementTick+0x160>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d903      	bls.n	800916c <xTaskIncrementTick+0xd8>
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009168:	4a22      	ldr	r2, [pc, #136]	; (80091f4 <xTaskIncrementTick+0x160>)
 800916a:	6013      	str	r3, [r2, #0]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	009b      	lsls	r3, r3, #2
 8009178:	4a1f      	ldr	r2, [pc, #124]	; (80091f8 <xTaskIncrementTick+0x164>)
 800917a:	441a      	add	r2, r3
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	3304      	adds	r3, #4
 8009180:	4619      	mov	r1, r3
 8009182:	4610      	mov	r0, r2
 8009184:	f7fe f987 	bl	8007496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4b1b      	ldr	r3, [pc, #108]	; (80091fc <xTaskIncrementTick+0x168>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009192:	429a      	cmp	r2, r3
 8009194:	d3b8      	bcc.n	8009108 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009196:	2301      	movs	r3, #1
 8009198:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800919a:	e7b5      	b.n	8009108 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800919c:	4b17      	ldr	r3, [pc, #92]	; (80091fc <xTaskIncrementTick+0x168>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	4915      	ldr	r1, [pc, #84]	; (80091f8 <xTaskIncrementTick+0x164>)
 80091a4:	4613      	mov	r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	4413      	add	r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d901      	bls.n	80091b8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80091b4:	2301      	movs	r3, #1
 80091b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80091b8:	4b11      	ldr	r3, [pc, #68]	; (8009200 <xTaskIncrementTick+0x16c>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d007      	beq.n	80091d0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80091c0:	2301      	movs	r3, #1
 80091c2:	617b      	str	r3, [r7, #20]
 80091c4:	e004      	b.n	80091d0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80091c6:	4b0f      	ldr	r3, [pc, #60]	; (8009204 <xTaskIncrementTick+0x170>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3301      	adds	r3, #1
 80091cc:	4a0d      	ldr	r2, [pc, #52]	; (8009204 <xTaskIncrementTick+0x170>)
 80091ce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80091d0:	697b      	ldr	r3, [r7, #20]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3718      	adds	r7, #24
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
 80091da:	bf00      	nop
 80091dc:	2400a200 	.word	0x2400a200
 80091e0:	2400a1dc 	.word	0x2400a1dc
 80091e4:	2400a190 	.word	0x2400a190
 80091e8:	2400a194 	.word	0x2400a194
 80091ec:	2400a1f0 	.word	0x2400a1f0
 80091f0:	2400a1f8 	.word	0x2400a1f8
 80091f4:	2400a1e0 	.word	0x2400a1e0
 80091f8:	24009d08 	.word	0x24009d08
 80091fc:	24009d04 	.word	0x24009d04
 8009200:	2400a1ec 	.word	0x2400a1ec
 8009204:	2400a1e8 	.word	0x2400a1e8

08009208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800920e:	4b2a      	ldr	r3, [pc, #168]	; (80092b8 <vTaskSwitchContext+0xb0>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d003      	beq.n	800921e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009216:	4b29      	ldr	r3, [pc, #164]	; (80092bc <vTaskSwitchContext+0xb4>)
 8009218:	2201      	movs	r2, #1
 800921a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800921c:	e046      	b.n	80092ac <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800921e:	4b27      	ldr	r3, [pc, #156]	; (80092bc <vTaskSwitchContext+0xb4>)
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009224:	4b26      	ldr	r3, [pc, #152]	; (80092c0 <vTaskSwitchContext+0xb8>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	60fb      	str	r3, [r7, #12]
 800922a:	e010      	b.n	800924e <vTaskSwitchContext+0x46>
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d10a      	bne.n	8009248 <vTaskSwitchContext+0x40>
	__asm volatile
 8009232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009236:	f383 8811 	msr	BASEPRI, r3
 800923a:	f3bf 8f6f 	isb	sy
 800923e:	f3bf 8f4f 	dsb	sy
 8009242:	607b      	str	r3, [r7, #4]
}
 8009244:	bf00      	nop
 8009246:	e7fe      	b.n	8009246 <vTaskSwitchContext+0x3e>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	3b01      	subs	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	491d      	ldr	r1, [pc, #116]	; (80092c4 <vTaskSwitchContext+0xbc>)
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4613      	mov	r3, r2
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	4413      	add	r3, r2
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	440b      	add	r3, r1
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0e4      	beq.n	800922c <vTaskSwitchContext+0x24>
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4a15      	ldr	r2, [pc, #84]	; (80092c4 <vTaskSwitchContext+0xbc>)
 800926e:	4413      	add	r3, r2
 8009270:	60bb      	str	r3, [r7, #8]
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	685a      	ldr	r2, [r3, #4]
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	605a      	str	r2, [r3, #4]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	685a      	ldr	r2, [r3, #4]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	3308      	adds	r3, #8
 8009284:	429a      	cmp	r2, r3
 8009286:	d104      	bne.n	8009292 <vTaskSwitchContext+0x8a>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	685a      	ldr	r2, [r3, #4]
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	605a      	str	r2, [r3, #4]
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	685b      	ldr	r3, [r3, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	4a0b      	ldr	r2, [pc, #44]	; (80092c8 <vTaskSwitchContext+0xc0>)
 800929a:	6013      	str	r3, [r2, #0]
 800929c:	4a08      	ldr	r2, [pc, #32]	; (80092c0 <vTaskSwitchContext+0xb8>)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80092a2:	4b09      	ldr	r3, [pc, #36]	; (80092c8 <vTaskSwitchContext+0xc0>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	3354      	adds	r3, #84	; 0x54
 80092a8:	4a08      	ldr	r2, [pc, #32]	; (80092cc <vTaskSwitchContext+0xc4>)
 80092aa:	6013      	str	r3, [r2, #0]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	2400a200 	.word	0x2400a200
 80092bc:	2400a1ec 	.word	0x2400a1ec
 80092c0:	2400a1e0 	.word	0x2400a1e0
 80092c4:	24009d08 	.word	0x24009d08
 80092c8:	24009d04 	.word	0x24009d04
 80092cc:	240000c4 	.word	0x240000c4

080092d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d10a      	bne.n	80092f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	60fb      	str	r3, [r7, #12]
}
 80092f2:	bf00      	nop
 80092f4:	e7fe      	b.n	80092f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80092f6:	4b07      	ldr	r3, [pc, #28]	; (8009314 <vTaskPlaceOnEventList+0x44>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	3318      	adds	r3, #24
 80092fc:	4619      	mov	r1, r3
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7fe f8ed 	bl	80074de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009304:	2101      	movs	r1, #1
 8009306:	6838      	ldr	r0, [r7, #0]
 8009308:	f000 fb7e 	bl	8009a08 <prvAddCurrentTaskToDelayedList>
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	24009d04 	.word	0x24009d04

08009318 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009318:	b580      	push	{r7, lr}
 800931a:	b086      	sub	sp, #24
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	617b      	str	r3, [r7, #20]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009340:	4b0a      	ldr	r3, [pc, #40]	; (800936c <vTaskPlaceOnEventListRestricted+0x54>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	3318      	adds	r3, #24
 8009346:	4619      	mov	r1, r3
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f7fe f8a4 	bl	8007496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009354:	f04f 33ff 	mov.w	r3, #4294967295
 8009358:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800935a:	6879      	ldr	r1, [r7, #4]
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f000 fb53 	bl	8009a08 <prvAddCurrentTaskToDelayedList>
	}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	24009d04 	.word	0x24009d04

08009370 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b086      	sub	sp, #24
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	68db      	ldr	r3, [r3, #12]
 800937e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d10a      	bne.n	800939c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	60fb      	str	r3, [r7, #12]
}
 8009398:	bf00      	nop
 800939a:	e7fe      	b.n	800939a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	3318      	adds	r3, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe f8d5 	bl	8007550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093a6:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <xTaskRemoveFromEventList+0xb0>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d11d      	bne.n	80093ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4618      	mov	r0, r3
 80093b4:	f7fe f8cc 	bl	8007550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093bc:	4b19      	ldr	r3, [pc, #100]	; (8009424 <xTaskRemoveFromEventList+0xb4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d903      	bls.n	80093cc <xTaskRemoveFromEventList+0x5c>
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	4a16      	ldr	r2, [pc, #88]	; (8009424 <xTaskRemoveFromEventList+0xb4>)
 80093ca:	6013      	str	r3, [r2, #0]
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d0:	4613      	mov	r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4413      	add	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4a13      	ldr	r2, [pc, #76]	; (8009428 <xTaskRemoveFromEventList+0xb8>)
 80093da:	441a      	add	r2, r3
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3304      	adds	r3, #4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7fe f857 	bl	8007496 <vListInsertEnd>
 80093e8:	e005      	b.n	80093f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	3318      	adds	r3, #24
 80093ee:	4619      	mov	r1, r3
 80093f0:	480e      	ldr	r0, [pc, #56]	; (800942c <xTaskRemoveFromEventList+0xbc>)
 80093f2:	f7fe f850 	bl	8007496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fa:	4b0d      	ldr	r3, [pc, #52]	; (8009430 <xTaskRemoveFromEventList+0xc0>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009400:	429a      	cmp	r2, r3
 8009402:	d905      	bls.n	8009410 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <xTaskRemoveFromEventList+0xc4>)
 800940a:	2201      	movs	r2, #1
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e001      	b.n	8009414 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009410:	2300      	movs	r3, #0
 8009412:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	2400a200 	.word	0x2400a200
 8009424:	2400a1e0 	.word	0x2400a1e0
 8009428:	24009d08 	.word	0x24009d08
 800942c:	2400a198 	.word	0x2400a198
 8009430:	24009d04 	.word	0x24009d04
 8009434:	2400a1ec 	.word	0x2400a1ec

08009438 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009440:	4b06      	ldr	r3, [pc, #24]	; (800945c <vTaskInternalSetTimeOutState+0x24>)
 8009442:	681a      	ldr	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <vTaskInternalSetTimeOutState+0x28>)
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	2400a1f0 	.word	0x2400a1f0
 8009460:	2400a1dc 	.word	0x2400a1dc

08009464 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10a      	bne.n	800948a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	f383 8811 	msr	BASEPRI, r3
 800947c:	f3bf 8f6f 	isb	sy
 8009480:	f3bf 8f4f 	dsb	sy
 8009484:	613b      	str	r3, [r7, #16]
}
 8009486:	bf00      	nop
 8009488:	e7fe      	b.n	8009488 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d10a      	bne.n	80094a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009494:	f383 8811 	msr	BASEPRI, r3
 8009498:	f3bf 8f6f 	isb	sy
 800949c:	f3bf 8f4f 	dsb	sy
 80094a0:	60fb      	str	r3, [r7, #12]
}
 80094a2:	bf00      	nop
 80094a4:	e7fe      	b.n	80094a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80094a6:	f7fe f9ad 	bl	8007804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80094aa:	4b1d      	ldr	r3, [pc, #116]	; (8009520 <xTaskCheckForTimeOut+0xbc>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	69ba      	ldr	r2, [r7, #24]
 80094b6:	1ad3      	subs	r3, r2, r3
 80094b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c2:	d102      	bne.n	80094ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	e023      	b.n	8009512 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	4b15      	ldr	r3, [pc, #84]	; (8009524 <xTaskCheckForTimeOut+0xc0>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d007      	beq.n	80094e6 <xTaskCheckForTimeOut+0x82>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	429a      	cmp	r2, r3
 80094de:	d302      	bcc.n	80094e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	61fb      	str	r3, [r7, #28]
 80094e4:	e015      	b.n	8009512 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d20b      	bcs.n	8009508 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	1ad2      	subs	r2, r2, r3
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f7ff ff9b 	bl	8009438 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009502:	2300      	movs	r3, #0
 8009504:	61fb      	str	r3, [r7, #28]
 8009506:	e004      	b.n	8009512 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	2200      	movs	r2, #0
 800950c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800950e:	2301      	movs	r3, #1
 8009510:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009512:	f7fe f9a7 	bl	8007864 <vPortExitCritical>

	return xReturn;
 8009516:	69fb      	ldr	r3, [r7, #28]
}
 8009518:	4618      	mov	r0, r3
 800951a:	3720      	adds	r7, #32
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	2400a1dc 	.word	0x2400a1dc
 8009524:	2400a1f0 	.word	0x2400a1f0

08009528 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800952c:	4b03      	ldr	r3, [pc, #12]	; (800953c <vTaskMissedYield+0x14>)
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]
}
 8009532:	bf00      	nop
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr
 800953c:	2400a1ec 	.word	0x2400a1ec

08009540 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009548:	f000 f852 	bl	80095f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <prvIdleTask+0x28>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d9f9      	bls.n	8009548 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <prvIdleTask+0x2c>)
 8009556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009564:	e7f0      	b.n	8009548 <prvIdleTask+0x8>
 8009566:	bf00      	nop
 8009568:	24009d08 	.word	0x24009d08
 800956c:	e000ed04 	.word	0xe000ed04

08009570 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009576:	2300      	movs	r3, #0
 8009578:	607b      	str	r3, [r7, #4]
 800957a:	e00c      	b.n	8009596 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	4613      	mov	r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4a12      	ldr	r2, [pc, #72]	; (80095d0 <prvInitialiseTaskLists+0x60>)
 8009588:	4413      	add	r3, r2
 800958a:	4618      	mov	r0, r3
 800958c:	f7fd ff56 	bl	800743c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	3301      	adds	r3, #1
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2b37      	cmp	r3, #55	; 0x37
 800959a:	d9ef      	bls.n	800957c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800959c:	480d      	ldr	r0, [pc, #52]	; (80095d4 <prvInitialiseTaskLists+0x64>)
 800959e:	f7fd ff4d 	bl	800743c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80095a2:	480d      	ldr	r0, [pc, #52]	; (80095d8 <prvInitialiseTaskLists+0x68>)
 80095a4:	f7fd ff4a 	bl	800743c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80095a8:	480c      	ldr	r0, [pc, #48]	; (80095dc <prvInitialiseTaskLists+0x6c>)
 80095aa:	f7fd ff47 	bl	800743c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80095ae:	480c      	ldr	r0, [pc, #48]	; (80095e0 <prvInitialiseTaskLists+0x70>)
 80095b0:	f7fd ff44 	bl	800743c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80095b4:	480b      	ldr	r0, [pc, #44]	; (80095e4 <prvInitialiseTaskLists+0x74>)
 80095b6:	f7fd ff41 	bl	800743c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095ba:	4b0b      	ldr	r3, [pc, #44]	; (80095e8 <prvInitialiseTaskLists+0x78>)
 80095bc:	4a05      	ldr	r2, [pc, #20]	; (80095d4 <prvInitialiseTaskLists+0x64>)
 80095be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095c0:	4b0a      	ldr	r3, [pc, #40]	; (80095ec <prvInitialiseTaskLists+0x7c>)
 80095c2:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <prvInitialiseTaskLists+0x68>)
 80095c4:	601a      	str	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	3708      	adds	r7, #8
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	24009d08 	.word	0x24009d08
 80095d4:	2400a168 	.word	0x2400a168
 80095d8:	2400a17c 	.word	0x2400a17c
 80095dc:	2400a198 	.word	0x2400a198
 80095e0:	2400a1ac 	.word	0x2400a1ac
 80095e4:	2400a1c4 	.word	0x2400a1c4
 80095e8:	2400a190 	.word	0x2400a190
 80095ec:	2400a194 	.word	0x2400a194

080095f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095f6:	e019      	b.n	800962c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095f8:	f7fe f904 	bl	8007804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095fc:	4b10      	ldr	r3, [pc, #64]	; (8009640 <prvCheckTasksWaitingTermination+0x50>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	3304      	adds	r3, #4
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd ffa1 	bl	8007550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800960e:	4b0d      	ldr	r3, [pc, #52]	; (8009644 <prvCheckTasksWaitingTermination+0x54>)
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3b01      	subs	r3, #1
 8009614:	4a0b      	ldr	r2, [pc, #44]	; (8009644 <prvCheckTasksWaitingTermination+0x54>)
 8009616:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <prvCheckTasksWaitingTermination+0x58>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3b01      	subs	r3, #1
 800961e:	4a0a      	ldr	r2, [pc, #40]	; (8009648 <prvCheckTasksWaitingTermination+0x58>)
 8009620:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009622:	f7fe f91f 	bl	8007864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 f810 	bl	800964c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800962c:	4b06      	ldr	r3, [pc, #24]	; (8009648 <prvCheckTasksWaitingTermination+0x58>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e1      	bne.n	80095f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009634:	bf00      	nop
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	2400a1ac 	.word	0x2400a1ac
 8009644:	2400a1d8 	.word	0x2400a1d8
 8009648:	2400a1c0 	.word	0x2400a1c0

0800964c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800964c:	b580      	push	{r7, lr}
 800964e:	b084      	sub	sp, #16
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3354      	adds	r3, #84	; 0x54
 8009658:	4618      	mov	r0, r3
 800965a:	f01a fc03 	bl	8023e64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	4618      	mov	r0, r3
 800966e:	f7fd fdc7 	bl	8007200 <vPortFree>
				vPortFree( pxTCB );
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f7fd fdc4 	bl	8007200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009678:	e018      	b.n	80096ac <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009680:	2b01      	cmp	r3, #1
 8009682:	d103      	bne.n	800968c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7fd fdbb 	bl	8007200 <vPortFree>
	}
 800968a:	e00f      	b.n	80096ac <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8009692:	2b02      	cmp	r3, #2
 8009694:	d00a      	beq.n	80096ac <prvDeleteTCB+0x60>
	__asm volatile
 8009696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800969a:	f383 8811 	msr	BASEPRI, r3
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	60fb      	str	r3, [r7, #12]
}
 80096a8:	bf00      	nop
 80096aa:	e7fe      	b.n	80096aa <prvDeleteTCB+0x5e>
	}
 80096ac:	bf00      	nop
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ba:	4b0c      	ldr	r3, [pc, #48]	; (80096ec <prvResetNextTaskUnblockTime+0x38>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d104      	bne.n	80096ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096c4:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <prvResetNextTaskUnblockTime+0x3c>)
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295
 80096ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096cc:	e008      	b.n	80096e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ce:	4b07      	ldr	r3, [pc, #28]	; (80096ec <prvResetNextTaskUnblockTime+0x38>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	4a04      	ldr	r2, [pc, #16]	; (80096f0 <prvResetNextTaskUnblockTime+0x3c>)
 80096de:	6013      	str	r3, [r2, #0]
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	2400a190 	.word	0x2400a190
 80096f0:	2400a1f8 	.word	0x2400a1f8

080096f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096fa:	4b0b      	ldr	r3, [pc, #44]	; (8009728 <xTaskGetSchedulerState+0x34>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009702:	2301      	movs	r3, #1
 8009704:	607b      	str	r3, [r7, #4]
 8009706:	e008      	b.n	800971a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009708:	4b08      	ldr	r3, [pc, #32]	; (800972c <xTaskGetSchedulerState+0x38>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d102      	bne.n	8009716 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009710:	2302      	movs	r3, #2
 8009712:	607b      	str	r3, [r7, #4]
 8009714:	e001      	b.n	800971a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009716:	2300      	movs	r3, #0
 8009718:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800971a:	687b      	ldr	r3, [r7, #4]
	}
 800971c:	4618      	mov	r0, r3
 800971e:	370c      	adds	r7, #12
 8009720:	46bd      	mov	sp, r7
 8009722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009726:	4770      	bx	lr
 8009728:	2400a1e4 	.word	0x2400a1e4
 800972c:	2400a200 	.word	0x2400a200

08009730 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800973c:	2300      	movs	r3, #0
 800973e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d051      	beq.n	80097ea <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974a:	4b2a      	ldr	r3, [pc, #168]	; (80097f4 <xTaskPriorityInherit+0xc4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009750:	429a      	cmp	r2, r3
 8009752:	d241      	bcs.n	80097d8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	2b00      	cmp	r3, #0
 800975a:	db06      	blt.n	800976a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975c:	4b25      	ldr	r3, [pc, #148]	; (80097f4 <xTaskPriorityInherit+0xc4>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	6959      	ldr	r1, [r3, #20]
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009772:	4613      	mov	r3, r2
 8009774:	009b      	lsls	r3, r3, #2
 8009776:	4413      	add	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4a1f      	ldr	r2, [pc, #124]	; (80097f8 <xTaskPriorityInherit+0xc8>)
 800977c:	4413      	add	r3, r2
 800977e:	4299      	cmp	r1, r3
 8009780:	d122      	bne.n	80097c8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	3304      	adds	r3, #4
 8009786:	4618      	mov	r0, r3
 8009788:	f7fd fee2 	bl	8007550 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800978c:	4b19      	ldr	r3, [pc, #100]	; (80097f4 <xTaskPriorityInherit+0xc4>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800979a:	4b18      	ldr	r3, [pc, #96]	; (80097fc <xTaskPriorityInherit+0xcc>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d903      	bls.n	80097aa <xTaskPriorityInherit+0x7a>
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	4a15      	ldr	r2, [pc, #84]	; (80097fc <xTaskPriorityInherit+0xcc>)
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ae:	4613      	mov	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4a10      	ldr	r2, [pc, #64]	; (80097f8 <xTaskPriorityInherit+0xc8>)
 80097b8:	441a      	add	r2, r3
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	3304      	adds	r3, #4
 80097be:	4619      	mov	r1, r3
 80097c0:	4610      	mov	r0, r2
 80097c2:	f7fd fe68 	bl	8007496 <vListInsertEnd>
 80097c6:	e004      	b.n	80097d2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <xTaskPriorityInherit+0xc4>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80097d2:	2301      	movs	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
 80097d6:	e008      	b.n	80097ea <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097dc:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <xTaskPriorityInherit+0xc4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e2:	429a      	cmp	r2, r3
 80097e4:	d201      	bcs.n	80097ea <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097e6:	2301      	movs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097ea:	68fb      	ldr	r3, [r7, #12]
	}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3710      	adds	r7, #16
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	24009d04 	.word	0x24009d04
 80097f8:	24009d08 	.word	0x24009d08
 80097fc:	2400a1e0 	.word	0x2400a1e0

08009800 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009800:	b580      	push	{r7, lr}
 8009802:	b086      	sub	sp, #24
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d056      	beq.n	80098c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009816:	4b2e      	ldr	r3, [pc, #184]	; (80098d0 <xTaskPriorityDisinherit+0xd0>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	693a      	ldr	r2, [r7, #16]
 800981c:	429a      	cmp	r2, r3
 800981e:	d00a      	beq.n	8009836 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	60fb      	str	r3, [r7, #12]
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800983a:	2b00      	cmp	r3, #0
 800983c:	d10a      	bne.n	8009854 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	60bb      	str	r3, [r7, #8]
}
 8009850:	bf00      	nop
 8009852:	e7fe      	b.n	8009852 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009858:	1e5a      	subs	r2, r3, #1
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009866:	429a      	cmp	r2, r3
 8009868:	d02c      	beq.n	80098c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986e:	2b00      	cmp	r3, #0
 8009870:	d128      	bne.n	80098c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	3304      	adds	r3, #4
 8009876:	4618      	mov	r0, r3
 8009878:	f7fd fe6a 	bl	8007550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009888:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009894:	4b0f      	ldr	r3, [pc, #60]	; (80098d4 <xTaskPriorityDisinherit+0xd4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	429a      	cmp	r2, r3
 800989a:	d903      	bls.n	80098a4 <xTaskPriorityDisinherit+0xa4>
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a0:	4a0c      	ldr	r2, [pc, #48]	; (80098d4 <xTaskPriorityDisinherit+0xd4>)
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a8:	4613      	mov	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4413      	add	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4a09      	ldr	r2, [pc, #36]	; (80098d8 <xTaskPriorityDisinherit+0xd8>)
 80098b2:	441a      	add	r2, r3
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	3304      	adds	r3, #4
 80098b8:	4619      	mov	r1, r3
 80098ba:	4610      	mov	r0, r2
 80098bc:	f7fd fdeb 	bl	8007496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098c4:	697b      	ldr	r3, [r7, #20]
	}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	24009d04 	.word	0x24009d04
 80098d4:	2400a1e0 	.word	0x2400a1e0
 80098d8:	24009d08 	.word	0x24009d08

080098dc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b088      	sub	sp, #32
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
 80098e4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80098ea:	2301      	movs	r3, #1
 80098ec:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d06a      	beq.n	80099ca <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80098f4:	69bb      	ldr	r3, [r7, #24]
 80098f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d10a      	bne.n	8009912 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60fb      	str	r3, [r7, #12]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009912:	69bb      	ldr	r3, [r7, #24]
 8009914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009916:	683a      	ldr	r2, [r7, #0]
 8009918:	429a      	cmp	r2, r3
 800991a:	d902      	bls.n	8009922 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e002      	b.n	8009928 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009926:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800992c:	69fa      	ldr	r2, [r7, #28]
 800992e:	429a      	cmp	r2, r3
 8009930:	d04b      	beq.n	80099ca <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	429a      	cmp	r2, r3
 800993a:	d146      	bne.n	80099ca <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800993c:	4b25      	ldr	r3, [pc, #148]	; (80099d4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	429a      	cmp	r2, r3
 8009944:	d10a      	bne.n	800995c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009960:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	69fa      	ldr	r2, [r7, #28]
 8009966:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	2b00      	cmp	r3, #0
 800996e:	db04      	blt.n	800997a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009970:	69fb      	ldr	r3, [r7, #28]
 8009972:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	6959      	ldr	r1, [r3, #20]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	4613      	mov	r3, r2
 8009982:	009b      	lsls	r3, r3, #2
 8009984:	4413      	add	r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4a13      	ldr	r2, [pc, #76]	; (80099d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800998a:	4413      	add	r3, r2
 800998c:	4299      	cmp	r1, r3
 800998e:	d11c      	bne.n	80099ca <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	3304      	adds	r3, #4
 8009994:	4618      	mov	r0, r3
 8009996:	f7fd fddb 	bl	8007550 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800999e:	4b0f      	ldr	r3, [pc, #60]	; (80099dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d903      	bls.n	80099ae <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	4613      	mov	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	4a07      	ldr	r2, [pc, #28]	; (80099d8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80099bc:	441a      	add	r2, r3
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	3304      	adds	r3, #4
 80099c2:	4619      	mov	r1, r3
 80099c4:	4610      	mov	r0, r2
 80099c6:	f7fd fd66 	bl	8007496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099ca:	bf00      	nop
 80099cc:	3720      	adds	r7, #32
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	24009d04 	.word	0x24009d04
 80099d8:	24009d08 	.word	0x24009d08
 80099dc:	2400a1e0 	.word	0x2400a1e0

080099e0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80099e4:	4b07      	ldr	r3, [pc, #28]	; (8009a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80099f2:	3201      	adds	r2, #1
 80099f4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80099f6:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <pvTaskIncrementMutexHeldCount+0x24>)
 80099f8:	681b      	ldr	r3, [r3, #0]
	}
 80099fa:	4618      	mov	r0, r3
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	24009d04 	.word	0x24009d04

08009a08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
 8009a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a12:	4b21      	ldr	r3, [pc, #132]	; (8009a98 <prvAddCurrentTaskToDelayedList+0x90>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a18:	4b20      	ldr	r3, [pc, #128]	; (8009a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fd fd96 	bl	8007550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2a:	d10a      	bne.n	8009a42 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a32:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3304      	adds	r3, #4
 8009a38:	4619      	mov	r1, r3
 8009a3a:	4819      	ldr	r0, [pc, #100]	; (8009aa0 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a3c:	f7fd fd2b 	bl	8007496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a40:	e026      	b.n	8009a90 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4413      	add	r3, r2
 8009a48:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a4a:	4b14      	ldr	r3, [pc, #80]	; (8009a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	68ba      	ldr	r2, [r7, #8]
 8009a50:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d209      	bcs.n	8009a6e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a5a:	4b12      	ldr	r3, [pc, #72]	; (8009aa4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3304      	adds	r3, #4
 8009a64:	4619      	mov	r1, r3
 8009a66:	4610      	mov	r0, r2
 8009a68:	f7fd fd39 	bl	80074de <vListInsert>
}
 8009a6c:	e010      	b.n	8009a90 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a6e:	4b0e      	ldr	r3, [pc, #56]	; (8009aa8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4b0a      	ldr	r3, [pc, #40]	; (8009a9c <prvAddCurrentTaskToDelayedList+0x94>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3304      	adds	r3, #4
 8009a78:	4619      	mov	r1, r3
 8009a7a:	4610      	mov	r0, r2
 8009a7c:	f7fd fd2f 	bl	80074de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	68ba      	ldr	r2, [r7, #8]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d202      	bcs.n	8009a90 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009a8a:	4a08      	ldr	r2, [pc, #32]	; (8009aac <prvAddCurrentTaskToDelayedList+0xa4>)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	6013      	str	r3, [r2, #0]
}
 8009a90:	bf00      	nop
 8009a92:	3710      	adds	r7, #16
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}
 8009a98:	2400a1dc 	.word	0x2400a1dc
 8009a9c:	24009d04 	.word	0x24009d04
 8009aa0:	2400a1c4 	.word	0x2400a1c4
 8009aa4:	2400a194 	.word	0x2400a194
 8009aa8:	2400a190 	.word	0x2400a190
 8009aac:	2400a1f8 	.word	0x2400a1f8

08009ab0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009aba:	f000 fb07 	bl	800a0cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009abe:	4b1c      	ldr	r3, [pc, #112]	; (8009b30 <xTimerCreateTimerTask+0x80>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d021      	beq.n	8009b0a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009aca:	2300      	movs	r3, #0
 8009acc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ace:	1d3a      	adds	r2, r7, #4
 8009ad0:	f107 0108 	add.w	r1, r7, #8
 8009ad4:	f107 030c 	add.w	r3, r7, #12
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f7fd faab 	bl	8007034 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ade:	6879      	ldr	r1, [r7, #4]
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	9202      	str	r2, [sp, #8]
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	2302      	movs	r3, #2
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	2300      	movs	r3, #0
 8009aee:	460a      	mov	r2, r1
 8009af0:	4910      	ldr	r1, [pc, #64]	; (8009b34 <xTimerCreateTimerTask+0x84>)
 8009af2:	4811      	ldr	r0, [pc, #68]	; (8009b38 <xTimerCreateTimerTask+0x88>)
 8009af4:	f7fe ffb6 	bl	8008a64 <xTaskCreateStatic>
 8009af8:	4603      	mov	r3, r0
 8009afa:	4a10      	ldr	r2, [pc, #64]	; (8009b3c <xTimerCreateTimerTask+0x8c>)
 8009afc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009afe:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <xTimerCreateTimerTask+0x8c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b06:	2301      	movs	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d10a      	bne.n	8009b26 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	613b      	str	r3, [r7, #16]
}
 8009b22:	bf00      	nop
 8009b24:	e7fe      	b.n	8009b24 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b26:	697b      	ldr	r3, [r7, #20]
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3718      	adds	r7, #24
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	2400a234 	.word	0x2400a234
 8009b34:	08025210 	.word	0x08025210
 8009b38:	08009c75 	.word	0x08009c75
 8009b3c:	2400a238 	.word	0x2400a238

08009b40 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	; 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10a      	bne.n	8009b6e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	623b      	str	r3, [r7, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	e7fe      	b.n	8009b6c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b6e:	4b1a      	ldr	r3, [pc, #104]	; (8009bd8 <xTimerGenericCommand+0x98>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d02a      	beq.n	8009bcc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	2b05      	cmp	r3, #5
 8009b86:	dc18      	bgt.n	8009bba <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b88:	f7ff fdb4 	bl	80096f4 <xTaskGetSchedulerState>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d109      	bne.n	8009ba6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b92:	4b11      	ldr	r3, [pc, #68]	; (8009bd8 <xTimerGenericCommand+0x98>)
 8009b94:	6818      	ldr	r0, [r3, #0]
 8009b96:	f107 0110 	add.w	r1, r7, #16
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b9e:	f7fe f8fb 	bl	8007d98 <xQueueGenericSend>
 8009ba2:	6278      	str	r0, [r7, #36]	; 0x24
 8009ba4:	e012      	b.n	8009bcc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <xTimerGenericCommand+0x98>)
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f107 0110 	add.w	r1, r7, #16
 8009bae:	2300      	movs	r3, #0
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f7fe f8f1 	bl	8007d98 <xQueueGenericSend>
 8009bb6:	6278      	str	r0, [r7, #36]	; 0x24
 8009bb8:	e008      	b.n	8009bcc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bba:	4b07      	ldr	r3, [pc, #28]	; (8009bd8 <xTimerGenericCommand+0x98>)
 8009bbc:	6818      	ldr	r0, [r3, #0]
 8009bbe:	f107 0110 	add.w	r1, r7, #16
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	683a      	ldr	r2, [r7, #0]
 8009bc6:	f7fe f9e5 	bl	8007f94 <xQueueGenericSendFromISR>
 8009bca:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	; 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop
 8009bd8:	2400a234 	.word	0x2400a234

08009bdc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b088      	sub	sp, #32
 8009be0:	af02      	add	r7, sp, #8
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009be6:	4b22      	ldr	r3, [pc, #136]	; (8009c70 <prvProcessExpiredTimer+0x94>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	68db      	ldr	r3, [r3, #12]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fd fcab 	bl	8007550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c00:	f003 0304 	and.w	r3, r3, #4
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d022      	beq.n	8009c4e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	699a      	ldr	r2, [r3, #24]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	18d1      	adds	r1, r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	683a      	ldr	r2, [r7, #0]
 8009c14:	6978      	ldr	r0, [r7, #20]
 8009c16:	f000 f8d1 	bl	8009dbc <prvInsertTimerInActiveList>
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d01f      	beq.n	8009c60 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c20:	2300      	movs	r3, #0
 8009c22:	9300      	str	r3, [sp, #0]
 8009c24:	2300      	movs	r3, #0
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	6978      	ldr	r0, [r7, #20]
 8009c2c:	f7ff ff88 	bl	8009b40 <xTimerGenericCommand>
 8009c30:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d113      	bne.n	8009c60 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	60fb      	str	r3, [r7, #12]
}
 8009c4a:	bf00      	nop
 8009c4c:	e7fe      	b.n	8009c4c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c54:	f023 0301 	bic.w	r3, r3, #1
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	6978      	ldr	r0, [r7, #20]
 8009c66:	4798      	blx	r3
}
 8009c68:	bf00      	nop
 8009c6a:	3718      	adds	r7, #24
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	2400a22c 	.word	0x2400a22c

08009c74 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c7c:	f107 0308 	add.w	r3, r7, #8
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 f857 	bl	8009d34 <prvGetNextExpireTime>
 8009c86:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f803 	bl	8009c98 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c92:	f000 f8d5 	bl	8009e40 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c96:	e7f1      	b.n	8009c7c <prvTimerTask+0x8>

08009c98 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009ca2:	f7ff f93b 	bl	8008f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009ca6:	f107 0308 	add.w	r3, r7, #8
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 f866 	bl	8009d7c <prvSampleTimeNow>
 8009cb0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d130      	bne.n	8009d1a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d10a      	bne.n	8009cd4 <prvProcessTimerOrBlockTask+0x3c>
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d806      	bhi.n	8009cd4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cc6:	f7ff f937 	bl	8008f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cca:	68f9      	ldr	r1, [r7, #12]
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff ff85 	bl	8009bdc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cd2:	e024      	b.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d008      	beq.n	8009cec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <prvProcessTimerOrBlockTask+0x90>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <prvProcessTimerOrBlockTask+0x50>
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e000      	b.n	8009cea <prvProcessTimerOrBlockTask+0x52>
 8009ce8:	2300      	movs	r3, #0
 8009cea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <prvProcessTimerOrBlockTask+0x94>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	4619      	mov	r1, r3
 8009cfa:	f7fe fe7f 	bl	80089fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cfe:	f7ff f91b 	bl	8008f38 <xTaskResumeAll>
 8009d02:	4603      	mov	r3, r0
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d10a      	bne.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d08:	4b09      	ldr	r3, [pc, #36]	; (8009d30 <prvProcessTimerOrBlockTask+0x98>)
 8009d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	f3bf 8f4f 	dsb	sy
 8009d14:	f3bf 8f6f 	isb	sy
}
 8009d18:	e001      	b.n	8009d1e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d1a:	f7ff f90d 	bl	8008f38 <xTaskResumeAll>
}
 8009d1e:	bf00      	nop
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	2400a230 	.word	0x2400a230
 8009d2c:	2400a234 	.word	0x2400a234
 8009d30:	e000ed04 	.word	0xe000ed04

08009d34 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d34:	b480      	push	{r7}
 8009d36:	b085      	sub	sp, #20
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <prvGetNextExpireTime+0x44>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <prvGetNextExpireTime+0x16>
 8009d46:	2201      	movs	r2, #1
 8009d48:	e000      	b.n	8009d4c <prvGetNextExpireTime+0x18>
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d105      	bne.n	8009d64 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d58:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <prvGetNextExpireTime+0x44>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68db      	ldr	r3, [r3, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	60fb      	str	r3, [r7, #12]
 8009d62:	e001      	b.n	8009d68 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d68:	68fb      	ldr	r3, [r7, #12]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	2400a22c 	.word	0x2400a22c

08009d7c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d84:	f7ff f976 	bl	8009074 <xTaskGetTickCount>
 8009d88:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d8a:	4b0b      	ldr	r3, [pc, #44]	; (8009db8 <prvSampleTimeNow+0x3c>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d205      	bcs.n	8009da0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d94:	f000 f936 	bl	800a004 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e002      	b.n	8009da6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009da6:	4a04      	ldr	r2, [pc, #16]	; (8009db8 <prvSampleTimeNow+0x3c>)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009dac:	68fb      	ldr	r3, [r7, #12]
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	3710      	adds	r7, #16
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	2400a23c 	.word	0x2400a23c

08009dbc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d812      	bhi.n	8009e08 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	1ad2      	subs	r2, r2, r3
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	699b      	ldr	r3, [r3, #24]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d302      	bcc.n	8009df6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e01b      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009df6:	4b10      	ldr	r3, [pc, #64]	; (8009e38 <prvInsertTimerInActiveList+0x7c>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	3304      	adds	r3, #4
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4610      	mov	r0, r2
 8009e02:	f7fd fb6c 	bl	80074de <vListInsert>
 8009e06:	e012      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e08:	687a      	ldr	r2, [r7, #4]
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d206      	bcs.n	8009e1e <prvInsertTimerInActiveList+0x62>
 8009e10:	68ba      	ldr	r2, [r7, #8]
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d302      	bcc.n	8009e1e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	617b      	str	r3, [r7, #20]
 8009e1c:	e007      	b.n	8009e2e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e1e:	4b07      	ldr	r3, [pc, #28]	; (8009e3c <prvInsertTimerInActiveList+0x80>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3304      	adds	r3, #4
 8009e26:	4619      	mov	r1, r3
 8009e28:	4610      	mov	r0, r2
 8009e2a:	f7fd fb58 	bl	80074de <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e2e:	697b      	ldr	r3, [r7, #20]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3718      	adds	r7, #24
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	2400a230 	.word	0x2400a230
 8009e3c:	2400a22c 	.word	0x2400a22c

08009e40 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b08e      	sub	sp, #56	; 0x38
 8009e44:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e46:	e0ca      	b.n	8009fde <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	da18      	bge.n	8009e80 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009e4e:	1d3b      	adds	r3, r7, #4
 8009e50:	3304      	adds	r3, #4
 8009e52:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5e:	f383 8811 	msr	BASEPRI, r3
 8009e62:	f3bf 8f6f 	isb	sy
 8009e66:	f3bf 8f4f 	dsb	sy
 8009e6a:	61fb      	str	r3, [r7, #28]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e76:	6850      	ldr	r0, [r2, #4]
 8009e78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e7a:	6892      	ldr	r2, [r2, #8]
 8009e7c:	4611      	mov	r1, r2
 8009e7e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f2c0 80aa 	blt.w	8009fdc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e8e:	695b      	ldr	r3, [r3, #20]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e96:	3304      	adds	r3, #4
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f7fd fb59 	bl	8007550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e9e:	463b      	mov	r3, r7
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f7ff ff6b 	bl	8009d7c <prvSampleTimeNow>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	f200 8097 	bhi.w	8009fde <prvProcessReceivedCommands+0x19e>
 8009eb0:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <prvProcessReceivedCommands+0x78>)
 8009eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb6:	bf00      	nop
 8009eb8:	08009ee1 	.word	0x08009ee1
 8009ebc:	08009ee1 	.word	0x08009ee1
 8009ec0:	08009ee1 	.word	0x08009ee1
 8009ec4:	08009f55 	.word	0x08009f55
 8009ec8:	08009f69 	.word	0x08009f69
 8009ecc:	08009fb3 	.word	0x08009fb3
 8009ed0:	08009ee1 	.word	0x08009ee1
 8009ed4:	08009ee1 	.word	0x08009ee1
 8009ed8:	08009f55 	.word	0x08009f55
 8009edc:	08009f69 	.word	0x08009f69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ee6:	f043 0301 	orr.w	r3, r3, #1
 8009eea:	b2da      	uxtb	r2, r3
 8009eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	18d1      	adds	r1, r2, r3
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f00:	f7ff ff5c 	bl	8009dbc <prvInsertTimerInActiveList>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d069      	beq.n	8009fde <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f18:	f003 0304 	and.w	r3, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d05e      	beq.n	8009fde <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	441a      	add	r2, r3
 8009f28:	2300      	movs	r3, #0
 8009f2a:	9300      	str	r3, [sp, #0]
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	2100      	movs	r1, #0
 8009f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f32:	f7ff fe05 	bl	8009b40 <xTimerGenericCommand>
 8009f36:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d14f      	bne.n	8009fde <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	61bb      	str	r3, [r7, #24]
}
 8009f50:	bf00      	nop
 8009f52:	e7fe      	b.n	8009f52 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f5a:	f023 0301 	bic.w	r3, r3, #1
 8009f5e:	b2da      	uxtb	r2, r3
 8009f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009f66:	e03a      	b.n	8009fde <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	b2da      	uxtb	r2, r3
 8009f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009f7a:	68ba      	ldr	r2, [r7, #8]
 8009f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	617b      	str	r3, [r7, #20]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa0:	699a      	ldr	r2, [r3, #24]
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	18d1      	adds	r1, r2, r3
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fac:	f7ff ff06 	bl	8009dbc <prvInsertTimerInActiveList>
					break;
 8009fb0:	e015      	b.n	8009fde <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fb8:	f003 0302 	and.w	r3, r3, #2
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d103      	bne.n	8009fc8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009fc2:	f7fd f91d 	bl	8007200 <vPortFree>
 8009fc6:	e00a      	b.n	8009fde <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009fce:	f023 0301 	bic.w	r3, r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009fda:	e000      	b.n	8009fde <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009fdc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009fde:	4b08      	ldr	r3, [pc, #32]	; (800a000 <prvProcessReceivedCommands+0x1c0>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	1d39      	adds	r1, r7, #4
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7fe f8fc 	bl	80081e4 <xQueueReceive>
 8009fec:	4603      	mov	r3, r0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f47f af2a 	bne.w	8009e48 <prvProcessReceivedCommands+0x8>
	}
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	3730      	adds	r7, #48	; 0x30
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	2400a234 	.word	0x2400a234

0800a004 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a00a:	e048      	b.n	800a09e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a00c:	4b2d      	ldr	r3, [pc, #180]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a016:	4b2b      	ldr	r3, [pc, #172]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	68db      	ldr	r3, [r3, #12]
 800a01e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	3304      	adds	r3, #4
 800a024:	4618      	mov	r0, r3
 800a026:	f7fd fa93 	bl	8007550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6a1b      	ldr	r3, [r3, #32]
 800a02e:	68f8      	ldr	r0, [r7, #12]
 800a030:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d02e      	beq.n	800a09e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	693a      	ldr	r2, [r7, #16]
 800a046:	4413      	add	r3, r2
 800a048:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a04a:	68ba      	ldr	r2, [r7, #8]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d90e      	bls.n	800a070 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	68ba      	ldr	r2, [r7, #8]
 800a056:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a05e:	4b19      	ldr	r3, [pc, #100]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	3304      	adds	r3, #4
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f7fd fa38 	bl	80074de <vListInsert>
 800a06e:	e016      	b.n	800a09e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a070:	2300      	movs	r3, #0
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2300      	movs	r3, #0
 800a076:	693a      	ldr	r2, [r7, #16]
 800a078:	2100      	movs	r1, #0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7ff fd60 	bl	8009b40 <xTimerGenericCommand>
 800a080:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d10a      	bne.n	800a09e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a08c:	f383 8811 	msr	BASEPRI, r3
 800a090:	f3bf 8f6f 	isb	sy
 800a094:	f3bf 8f4f 	dsb	sy
 800a098:	603b      	str	r3, [r7, #0]
}
 800a09a:	bf00      	nop
 800a09c:	e7fe      	b.n	800a09c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a09e:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d1b1      	bne.n	800a00c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a0a8:	4b06      	ldr	r3, [pc, #24]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a0ae:	4b06      	ldr	r3, [pc, #24]	; (800a0c8 <prvSwitchTimerLists+0xc4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a04      	ldr	r2, [pc, #16]	; (800a0c4 <prvSwitchTimerLists+0xc0>)
 800a0b4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a0b6:	4a04      	ldr	r2, [pc, #16]	; (800a0c8 <prvSwitchTimerLists+0xc4>)
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	6013      	str	r3, [r2, #0]
}
 800a0bc:	bf00      	nop
 800a0be:	3718      	adds	r7, #24
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	2400a22c 	.word	0x2400a22c
 800a0c8:	2400a230 	.word	0x2400a230

0800a0cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a0d2:	f7fd fb97 	bl	8007804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a0d6:	4b15      	ldr	r3, [pc, #84]	; (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d120      	bne.n	800a120 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a0de:	4814      	ldr	r0, [pc, #80]	; (800a130 <prvCheckForValidListAndQueue+0x64>)
 800a0e0:	f7fd f9ac 	bl	800743c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a0e4:	4813      	ldr	r0, [pc, #76]	; (800a134 <prvCheckForValidListAndQueue+0x68>)
 800a0e6:	f7fd f9a9 	bl	800743c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a0ea:	4b13      	ldr	r3, [pc, #76]	; (800a138 <prvCheckForValidListAndQueue+0x6c>)
 800a0ec:	4a10      	ldr	r2, [pc, #64]	; (800a130 <prvCheckForValidListAndQueue+0x64>)
 800a0ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a0f0:	4b12      	ldr	r3, [pc, #72]	; (800a13c <prvCheckForValidListAndQueue+0x70>)
 800a0f2:	4a10      	ldr	r2, [pc, #64]	; (800a134 <prvCheckForValidListAndQueue+0x68>)
 800a0f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	4b11      	ldr	r3, [pc, #68]	; (800a140 <prvCheckForValidListAndQueue+0x74>)
 800a0fc:	4a11      	ldr	r2, [pc, #68]	; (800a144 <prvCheckForValidListAndQueue+0x78>)
 800a0fe:	2110      	movs	r1, #16
 800a100:	200a      	movs	r0, #10
 800a102:	f7fd fd09 	bl	8007b18 <xQueueGenericCreateStatic>
 800a106:	4603      	mov	r3, r0
 800a108:	4a08      	ldr	r2, [pc, #32]	; (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a10a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a114:	4b05      	ldr	r3, [pc, #20]	; (800a12c <prvCheckForValidListAndQueue+0x60>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	490b      	ldr	r1, [pc, #44]	; (800a148 <prvCheckForValidListAndQueue+0x7c>)
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe fc1a 	bl	8008954 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f7fd fba0 	bl	8007864 <vPortExitCritical>
}
 800a124:	bf00      	nop
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	2400a234 	.word	0x2400a234
 800a130:	2400a204 	.word	0x2400a204
 800a134:	2400a218 	.word	0x2400a218
 800a138:	2400a22c 	.word	0x2400a22c
 800a13c:	2400a230 	.word	0x2400a230
 800a140:	2400a2e0 	.word	0x2400a2e0
 800a144:	2400a240 	.word	0x2400a240
 800a148:	08025218 	.word	0x08025218

0800a14c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a14c:	b480      	push	{r7}
 800a14e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a150:	4b3f      	ldr	r3, [pc, #252]	; (800a250 <SystemInit+0x104>)
 800a152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a156:	4a3e      	ldr	r2, [pc, #248]	; (800a250 <SystemInit+0x104>)
 800a158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a15c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800a160:	4b3b      	ldr	r3, [pc, #236]	; (800a250 <SystemInit+0x104>)
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	4a3a      	ldr	r2, [pc, #232]	; (800a250 <SystemInit+0x104>)
 800a166:	f043 0310 	orr.w	r3, r3, #16
 800a16a:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a16c:	4b39      	ldr	r3, [pc, #228]	; (800a254 <SystemInit+0x108>)
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f003 030f 	and.w	r3, r3, #15
 800a174:	2b06      	cmp	r3, #6
 800a176:	d807      	bhi.n	800a188 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a178:	4b36      	ldr	r3, [pc, #216]	; (800a254 <SystemInit+0x108>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f023 030f 	bic.w	r3, r3, #15
 800a180:	4a34      	ldr	r2, [pc, #208]	; (800a254 <SystemInit+0x108>)
 800a182:	f043 0307 	orr.w	r3, r3, #7
 800a186:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800a188:	4b33      	ldr	r3, [pc, #204]	; (800a258 <SystemInit+0x10c>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a32      	ldr	r2, [pc, #200]	; (800a258 <SystemInit+0x10c>)
 800a18e:	f043 0301 	orr.w	r3, r3, #1
 800a192:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800a194:	4b30      	ldr	r3, [pc, #192]	; (800a258 <SystemInit+0x10c>)
 800a196:	2200      	movs	r2, #0
 800a198:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800a19a:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <SystemInit+0x10c>)
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	492e      	ldr	r1, [pc, #184]	; (800a258 <SystemInit+0x10c>)
 800a1a0:	4b2e      	ldr	r3, [pc, #184]	; (800a25c <SystemInit+0x110>)
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800a1a6:	4b2b      	ldr	r3, [pc, #172]	; (800a254 <SystemInit+0x108>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d007      	beq.n	800a1c2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800a1b2:	4b28      	ldr	r3, [pc, #160]	; (800a254 <SystemInit+0x108>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f023 030f 	bic.w	r3, r3, #15
 800a1ba:	4a26      	ldr	r2, [pc, #152]	; (800a254 <SystemInit+0x108>)
 800a1bc:	f043 0307 	orr.w	r3, r3, #7
 800a1c0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800a1c2:	4b25      	ldr	r3, [pc, #148]	; (800a258 <SystemInit+0x10c>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800a1c8:	4b23      	ldr	r3, [pc, #140]	; (800a258 <SystemInit+0x10c>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800a1ce:	4b22      	ldr	r3, [pc, #136]	; (800a258 <SystemInit+0x10c>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800a1d4:	4b20      	ldr	r3, [pc, #128]	; (800a258 <SystemInit+0x10c>)
 800a1d6:	4a22      	ldr	r2, [pc, #136]	; (800a260 <SystemInit+0x114>)
 800a1d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800a1da:	4b1f      	ldr	r3, [pc, #124]	; (800a258 <SystemInit+0x10c>)
 800a1dc:	4a21      	ldr	r2, [pc, #132]	; (800a264 <SystemInit+0x118>)
 800a1de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800a1e0:	4b1d      	ldr	r3, [pc, #116]	; (800a258 <SystemInit+0x10c>)
 800a1e2:	4a21      	ldr	r2, [pc, #132]	; (800a268 <SystemInit+0x11c>)
 800a1e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800a1e6:	4b1c      	ldr	r3, [pc, #112]	; (800a258 <SystemInit+0x10c>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800a1ec:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <SystemInit+0x10c>)
 800a1ee:	4a1e      	ldr	r2, [pc, #120]	; (800a268 <SystemInit+0x11c>)
 800a1f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800a1f2:	4b19      	ldr	r3, [pc, #100]	; (800a258 <SystemInit+0x10c>)
 800a1f4:	2200      	movs	r2, #0
 800a1f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800a1f8:	4b17      	ldr	r3, [pc, #92]	; (800a258 <SystemInit+0x10c>)
 800a1fa:	4a1b      	ldr	r2, [pc, #108]	; (800a268 <SystemInit+0x11c>)
 800a1fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800a1fe:	4b16      	ldr	r3, [pc, #88]	; (800a258 <SystemInit+0x10c>)
 800a200:	2200      	movs	r2, #0
 800a202:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800a204:	4b14      	ldr	r3, [pc, #80]	; (800a258 <SystemInit+0x10c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a13      	ldr	r2, [pc, #76]	; (800a258 <SystemInit+0x10c>)
 800a20a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a20e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800a210:	4b11      	ldr	r3, [pc, #68]	; (800a258 <SystemInit+0x10c>)
 800a212:	2200      	movs	r2, #0
 800a214:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <SystemInit+0x120>)
 800a218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21a:	4a14      	ldr	r2, [pc, #80]	; (800a26c <SystemInit+0x120>)
 800a21c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a220:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800a222:	4b13      	ldr	r3, [pc, #76]	; (800a270 <SystemInit+0x124>)
 800a224:	681a      	ldr	r2, [r3, #0]
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <SystemInit+0x128>)
 800a228:	4013      	ands	r3, r2
 800a22a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a22e:	d202      	bcs.n	800a236 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800a230:	4b11      	ldr	r3, [pc, #68]	; (800a278 <SystemInit+0x12c>)
 800a232:	2201      	movs	r2, #1
 800a234:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800a236:	4b11      	ldr	r3, [pc, #68]	; (800a27c <SystemInit+0x130>)
 800a238:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800a23c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <SystemInit+0x104>)
 800a240:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a244:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800a246:	bf00      	nop
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	e000ed00 	.word	0xe000ed00
 800a254:	52002000 	.word	0x52002000
 800a258:	58024400 	.word	0x58024400
 800a25c:	eaf6ed7f 	.word	0xeaf6ed7f
 800a260:	02020200 	.word	0x02020200
 800a264:	01ff0000 	.word	0x01ff0000
 800a268:	01010280 	.word	0x01010280
 800a26c:	580000c0 	.word	0x580000c0
 800a270:	5c001000 	.word	0x5c001000
 800a274:	ffff0000 	.word	0xffff0000
 800a278:	51008108 	.word	0x51008108
 800a27c:	52004000 	.word	0x52004000

0800a280 <FT5336_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT5336_RegisterBusIO (FT5336_Object_t *pObj, FT5336_IO_t *pIO)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d103      	bne.n	800a298 <FT5336_RegisterBusIO+0x18>
  {
    ret = FT5336_ERROR;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	e02c      	b.n	800a2f2 <FT5336_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	891a      	ldrh	r2, [r3, #8]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	691a      	ldr	r2, [r3, #16]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695a      	ldr	r2, [r3, #20]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = ReadRegWrap;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a0c      	ldr	r2, [pc, #48]	; (800a2fc <FT5336_RegisterBusIO+0x7c>)
 800a2cc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a0b      	ldr	r2, [pc, #44]	; (800a300 <FT5336_RegisterBusIO+0x80>)
 800a2d2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d004      	beq.n	800a2ec <FT5336_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4798      	blx	r3
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	e002      	b.n	800a2f2 <FT5336_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT5336_ERROR;
 800a2ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a2f0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3710      	adds	r7, #16
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	0800a6f9 	.word	0x0800a6f9
 800a300:	0800a72d 	.word	0x0800a72d

0800a304 <FT5336_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT5336 sensor capabilities
  * @retval Component status
  */
int32_t FT5336_GetCapabilities(FT5336_Object_t *pObj, FT5336_Capabilities_t *Capabilities)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2201      	movs	r2, #1
 800a312:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 1;
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	2201      	movs	r2, #1
 800a318:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	2205      	movs	r2, #5
 800a31e:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a326:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a32e:	609a      	str	r2, [r3, #8]

  return FT5336_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	370c      	adds	r7, #12
 800a336:	46bd      	mov	sp, r7
 800a338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33c:	4770      	bx	lr

0800a33e <FT5336_Init>:
  * @param  pObj Component object pointer
  * @param  GestureInit: Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_Init(FT5336_Object_t *pObj)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 0U)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10d      	bne.n	800a370 <FT5336_Init+0x32>
  {
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT5336_TS_Calibration(pObj);
#endif /* (FT5336_AUTO_CALIBRATION_ENABLED == 1) */
    /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT5336_DisableIT(pObj);
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	f000 f987 	bl	800a66e <FT5336_DisableIT>
 800a360:	4602      	mov	r2, r0
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	4413      	add	r3, r2
 800a366:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 1;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  if(ret != FT5336_OK)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <FT5336_Init+0x3e>
  {
    ret = FT5336_ERROR;
 800a376:	f04f 33ff 	mov.w	r3, #4294967295
 800a37a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a37c:	68fb      	ldr	r3, [r7, #12]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}

0800a386 <FT5336_DeInit>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval FT5336_OK
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
 800a386:	b480      	push	{r7}
 800a388:	b085      	sub	sp, #20
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	6078      	str	r0, [r7, #4]
  int32_t ret = FT5336_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized == 1U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d103      	bne.n	800a3a4 <FT5336_DeInit+0x1e>
  {
    pObj->IsInitialized = 0;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return ret;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3714      	adds	r7, #20
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <FT5336_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval FT5336_OK
  */
int32_t FT5336_GestureConfig(FT5336_Object_t *pObj, FT5336_Gesture_Init_t *GestureInit)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b084      	sub	sp, #16
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f103 0218 	add.w	r2, r3, #24
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	4610      	mov	r0, r2
 800a3cc:	f000 fa25 	bl	800a81a <ft5336_radian_value>
 800a3d0:	60f8      	str	r0, [r7, #12]
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f103 0218 	add.w	r2, r3, #24
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	4619      	mov	r1, r3
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	f000 fa2b 	bl	800a83c <ft5336_offset_left_right>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	4413      	add	r3, r2
 800a3ec:	60fb      	str	r3, [r7, #12]
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f103 0218 	add.w	r2, r3, #24
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	4619      	mov	r1, r3
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	f000 fa2e 	bl	800a85e <ft5336_offset_up_down>
 800a402:	4602      	mov	r2, r0
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	4413      	add	r3, r2
 800a408:	60fb      	str	r3, [r7, #12]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f103 0218 	add.w	r2, r3, #24
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	68db      	ldr	r3, [r3, #12]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	4619      	mov	r1, r3
 800a418:	4610      	mov	r0, r2
 800a41a:	f000 fa31 	bl	800a880 <ft5336_disatnce_left_right>
 800a41e:	4602      	mov	r2, r0
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f103 0218 	add.w	r2, r3, #24
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	691b      	ldr	r3, [r3, #16]
 800a430:	b2db      	uxtb	r3, r3
 800a432:	4619      	mov	r1, r3
 800a434:	4610      	mov	r0, r2
 800a436:	f000 fa34 	bl	800a8a2 <ft5336_distance_up_down>
 800a43a:	4602      	mov	r2, r0
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4413      	add	r3, r2
 800a440:	60fb      	str	r3, [r7, #12]
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f103 0218 	add.w	r2, r3, #24
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	695b      	ldr	r3, [r3, #20]
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	4619      	mov	r1, r3
 800a450:	4610      	mov	r0, r2
 800a452:	f000 fa37 	bl	800a8c4 <ft5336_distance_zoom>
 800a456:	4602      	mov	r2, r0
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	60fb      	str	r3, [r7, #12]

  if(ret != FT5336_OK)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <FT5336_GestureConfig+0xb8>
  {
    ret = FT5336_ERROR;
 800a464:	f04f 33ff 	mov.w	r3, #4294967295
 800a468:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a46a:	68fb      	ldr	r3, [r7, #12]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <FT5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  pObj Component object pointer
  * @retval The Device ID (two bytes).
  */
int32_t FT5336_ReadID(FT5336_Object_t *pObj, uint32_t *Id)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b082      	sub	sp, #8
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	3318      	adds	r3, #24
 800a482:	6839      	ldr	r1, [r7, #0]
 800a484:	4618      	mov	r0, r3
 800a486:	f000 fa3f 	bl	800a908 <ft5336_chip_id>
 800a48a:	4603      	mov	r3, r0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <FT5336_GetState>:
  * @param  pObj Component object pointer
  * @param  State: Single Touch stucture pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetState(FT5336_Object_t *pObj, FT5336_State_t *State)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f000 f908 	bl	800a6b8 <FT5336_DetectTouch>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	601a      	str	r2, [r3, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f103 0018 	add.w	r0, r3, #24
 800a4b6:	f107 0208 	add.w	r2, r7, #8
 800a4ba:	2304      	movs	r3, #4
 800a4bc:	2103      	movs	r1, #3
 800a4be:	f000 f94f 	bl	800a760 <ft5336_read_reg>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <FT5336_GetState+0x3c>
  {
    ret = FT5336_ERROR;
 800a4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4cc:	60fb      	str	r3, [r7, #12]
 800a4ce:	e00f      	b.n	800a4f0 <FT5336_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
 800a4d0:	7a3b      	ldrb	r3, [r7, #8]
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a4d8:	7a7a      	ldrb	r2, [r7, #9]
 800a4da:	431a      	orrs	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
 800a4e0:	7abb      	ldrb	r3, [r7, #10]
 800a4e2:	021b      	lsls	r3, r3, #8
 800a4e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a4e8:	7afa      	ldrb	r2, [r7, #11]
 800a4ea:	431a      	orrs	r2, r3
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3710      	adds	r7, #16
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <FT5336_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval FT5336_OK.
  */
int32_t FT5336_GetMultiTouchState(FT5336_Object_t *pObj, FT5336_MultiTouch_State_t *State)
{
 800a4fa:	b580      	push	{r7, lr}
 800a4fc:	b08c      	sub	sp, #48	; 0x30
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  int32_t ret = FT5336_OK;
 800a504:	2300      	movs	r3, #0
 800a506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t  data[30];
  uint32_t i;

  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 f8d5 	bl	800a6b8 <FT5336_DetectTouch>
 800a50e:	4603      	mov	r3, r0
 800a510:	461a      	mov	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	601a      	str	r2, [r3, #0]

  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f103 0018 	add.w	r0, r3, #24
 800a51c:	f107 0208 	add.w	r2, r7, #8
 800a520:	231e      	movs	r3, #30
 800a522:	2103      	movs	r1, #3
 800a524:	f000 f91c 	bl	800a760 <ft5336_read_reg>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d003      	beq.n	800a536 <FT5336_GetMultiTouchState+0x3c>
  {
    ret = FT5336_ERROR;
 800a52e:	f04f 33ff 	mov.w	r3, #4294967295
 800a532:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a534:	e077      	b.n	800a626 <FT5336_GetMultiTouchState+0x12c>
  }
  else
  {
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a536:	2300      	movs	r3, #0
 800a538:	62bb      	str	r3, [r7, #40]	; 0x28
 800a53a:	e071      	b.n	800a620 <FT5336_GetMultiTouchState+0x126>
    {
    /* Send back first ready X position to caller */
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
 800a53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a53e:	4613      	mov	r3, r2
 800a540:	005b      	lsls	r3, r3, #1
 800a542:	4413      	add	r3, r2
 800a544:	005b      	lsls	r3, r3, #1
 800a546:	3330      	adds	r3, #48	; 0x30
 800a548:	443b      	add	r3, r7
 800a54a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a54e:	021b      	lsls	r3, r3, #8
 800a550:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a554:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a556:	4613      	mov	r3, r2
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	4413      	add	r3, r2
 800a55c:	005b      	lsls	r3, r3, #1
 800a55e:	3301      	adds	r3, #1
 800a560:	3330      	adds	r3, #48	; 0x30
 800a562:	443b      	add	r3, r7
 800a564:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a568:	ea41 0203 	orr.w	r2, r1, r3
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	440b      	add	r3, r1
 800a574:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
 800a576:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a578:	4613      	mov	r3, r2
 800a57a:	005b      	lsls	r3, r3, #1
 800a57c:	4413      	add	r3, r2
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	3302      	adds	r3, #2
 800a582:	3330      	adds	r3, #48	; 0x30
 800a584:	443b      	add	r3, r7
 800a586:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	f403 6170 	and.w	r1, r3, #3840	; 0xf00
 800a590:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a592:	4613      	mov	r3, r2
 800a594:	005b      	lsls	r3, r3, #1
 800a596:	4413      	add	r3, r2
 800a598:	005b      	lsls	r3, r3, #1
 800a59a:	3303      	adds	r3, #3
 800a59c:	3330      	adds	r3, #48	; 0x30
 800a59e:	443b      	add	r3, r7
 800a5a0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a5a4:	4319      	orrs	r1, r3
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5aa:	3206      	adds	r2, #6
 800a5ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Event to caller */
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
 800a5b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	005b      	lsls	r3, r3, #1
 800a5b6:	4413      	add	r3, r2
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	3330      	adds	r3, #48	; 0x30
 800a5bc:	443b      	add	r3, r7
 800a5be:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a5c2:	099b      	lsrs	r3, r3, #6
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5cc:	3210      	adds	r2, #16
 800a5ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Send back first ready Weight to caller */
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
 800a5d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	005b      	lsls	r3, r3, #1
 800a5d8:	4413      	add	r3, r2
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	3304      	adds	r3, #4
 800a5de:	3330      	adds	r3, #48	; 0x30
 800a5e0:	443b      	add	r3, r7
 800a5e2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	683a      	ldr	r2, [r7, #0]
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	330a      	adds	r3, #10
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	6059      	str	r1, [r3, #4]
    /* Send back first ready Area to caller */
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
 800a5f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5f6:	4613      	mov	r3, r2
 800a5f8:	005b      	lsls	r3, r3, #1
 800a5fa:	4413      	add	r3, r2
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	3305      	adds	r3, #5
 800a600:	3330      	adds	r3, #48	; 0x30
 800a602:	443b      	add	r3, r7
 800a604:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800a608:	091b      	lsrs	r3, r3, #4
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	4619      	mov	r1, r3
 800a60e:	683a      	ldr	r2, [r7, #0]
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	3314      	adds	r3, #20
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	6059      	str	r1, [r3, #4]
    for(i = 0; i < FT5336_MAX_NB_TOUCH; i++)
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	3301      	adds	r3, #1
 800a61e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a622:	2b04      	cmp	r3, #4
 800a624:	d98a      	bls.n	800a53c <FT5336_GetMultiTouchState+0x42>
    }
  }

  return ret;
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3730      	adds	r7, #48	; 0x30
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <FT5336_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId: gesture ID
  * @retval Gesture ID.
  */
int32_t FT5336_GetGesture(FT5336_Object_t *pObj, uint8_t *GestureId)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
  return ft5336_gest_id(&pObj->Ctx, GestureId);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	3318      	adds	r3, #24
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f000 f8bb 	bl	800a7bc <ft5336_gest_id>
 800a646:	4603      	mov	r3, r0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <FT5336_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_EnableIT(FT5336_Object_t *pObj)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	3318      	adds	r3, #24
 800a65c:	2101      	movs	r1, #1
 800a65e:	4618      	mov	r0, r3
 800a660:	f000 f941 	bl	800a8e6 <ft5336_g_mode>
 800a664:	4603      	mov	r3, r0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <FT5336_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_DisableIT(FT5336_Object_t *pObj)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b082      	sub	sp, #8
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3318      	adds	r3, #24
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 f932 	bl	800a8e6 <ft5336_g_mode>
 800a682:	4603      	mov	r3, r0
}
 800a684:	4618      	mov	r0, r3
 800a686:	3708      	adds	r7, #8
 800a688:	46bd      	mov	sp, r7
 800a68a:	bd80      	pop	{r7, pc}

0800a68c <FT5336_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval TS interrupts status : always return 0 here
  */
int32_t FT5336_ITStatus(FT5336_Object_t *pObj)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <FT5336_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  pObj Component object pointer
  * @retval None
  */
int32_t FT5336_ClearIT(FT5336_Object_t *pObj)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <FT5336_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT5336_ERROR
  *         in case of error
  */
static int32_t FT5336_DetectTouch(FT5336_Object_t *pObj)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b084      	sub	sp, #16
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	3318      	adds	r3, #24
 800a6c4:	f107 020b 	add.w	r2, r7, #11
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 f886 	bl	800a7dc <ft5336_td_status>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <FT5336_DetectTouch+0x26>
  {
    ret = FT5336_ERROR;
 800a6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a6da:	60fb      	str	r3, [r7, #12]
 800a6dc:	e007      	b.n	800a6ee <FT5336_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT5336_MAX_NB_TOUCH)
 800a6de:	7afb      	ldrb	r3, [r7, #11]
 800a6e0:	2b05      	cmp	r3, #5
 800a6e2:	d902      	bls.n	800a6ea <FT5336_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	60fb      	str	r3, [r7, #12]
 800a6e8:	e001      	b.n	800a6ee <FT5336_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a6f8:	b590      	push	{r4, r7, lr}
 800a6fa:	b087      	sub	sp, #28
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	607a      	str	r2, [r7, #4]
 800a702:	461a      	mov	r2, r3
 800a704:	460b      	mov	r3, r1
 800a706:	72fb      	strb	r3, [r7, #11]
 800a708:	4613      	mov	r3, r2
 800a70a:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	691c      	ldr	r4, [r3, #16]
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	8918      	ldrh	r0, [r3, #8]
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	b299      	uxth	r1, r3
 800a71c:	893b      	ldrh	r3, [r7, #8]
 800a71e:	687a      	ldr	r2, [r7, #4]
 800a720:	47a0      	blx	r4
 800a722:	4603      	mov	r3, r0
}
 800a724:	4618      	mov	r0, r3
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd90      	pop	{r4, r7, pc}

0800a72c <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800a72c:	b590      	push	{r4, r7, lr}
 800a72e:	b087      	sub	sp, #28
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	607a      	str	r2, [r7, #4]
 800a736:	461a      	mov	r2, r3
 800a738:	460b      	mov	r3, r1
 800a73a:	72fb      	strb	r3, [r7, #11]
 800a73c:	4613      	mov	r3, r2
 800a73e:	813b      	strh	r3, [r7, #8]
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	68dc      	ldr	r4, [r3, #12]
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	8918      	ldrh	r0, [r3, #8]
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	b299      	uxth	r1, r3
 800a750:	893b      	ldrh	r3, [r7, #8]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	47a0      	blx	r4
 800a756:	4603      	mov	r3, r0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	371c      	adds	r7, #28
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd90      	pop	{r4, r7, pc}

0800a760 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 800a760:	b590      	push	{r4, r7, lr}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	60f8      	str	r0, [r7, #12]
 800a768:	607a      	str	r2, [r7, #4]
 800a76a:	461a      	mov	r2, r3
 800a76c:	460b      	mov	r3, r1
 800a76e:	72fb      	strb	r3, [r7, #11]
 800a770:	4613      	mov	r3, r2
 800a772:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	685c      	ldr	r4, [r3, #4]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6898      	ldr	r0, [r3, #8]
 800a77c:	893b      	ldrh	r3, [r7, #8]
 800a77e:	7af9      	ldrb	r1, [r7, #11]
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	47a0      	blx	r4
 800a784:	4603      	mov	r3, r0
}
 800a786:	4618      	mov	r0, r3
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd90      	pop	{r4, r7, pc}

0800a78e <ft5336_write_reg>:
  * @param  pdata pointer to data to be written
  * @param  length Length of data to write   
  * @retval Component status
  */
int32_t ft5336_write_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 800a78e:	b590      	push	{r4, r7, lr}
 800a790:	b085      	sub	sp, #20
 800a792:	af00      	add	r7, sp, #0
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	607a      	str	r2, [r7, #4]
 800a798:	461a      	mov	r2, r3
 800a79a:	460b      	mov	r3, r1
 800a79c:	72fb      	strb	r3, [r7, #11]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681c      	ldr	r4, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6898      	ldr	r0, [r3, #8]
 800a7aa:	893b      	ldrh	r3, [r7, #8]
 800a7ac:	7af9      	ldrb	r1, [r7, #11]
 800a7ae:	687a      	ldr	r2, [r7, #4]
 800a7b0:	47a0      	blx	r4
 800a7b2:	4603      	mov	r3, r0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd90      	pop	{r4, r7, pc}

0800a7bc <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	683a      	ldr	r2, [r7, #0]
 800a7ca:	2101      	movs	r1, #1
 800a7cc:	6878      	ldr	r0, [r7, #4]
 800a7ce:	f7ff ffc7 	bl	800a760 <ft5336_read_reg>
 800a7d2:	4603      	mov	r3, r0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	683a      	ldr	r2, [r7, #0]
 800a7ea:	2102      	movs	r1, #2
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7ff ffb7 	bl	800a760 <ft5336_read_reg>
 800a7f2:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10a      	bne.n	800a810 <ft5336_td_status+0x34>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	f003 030f 	and.w	r3, r3, #15
 800a802:	b2da      	uxtb	r2, r3
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a810:	68fb      	ldr	r3, [r7, #12]
}
 800a812:	4618      	mov	r0, r3
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
 800a81a:	b580      	push	{r7, lr}
 800a81c:	b082      	sub	sp, #8
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
 800a822:	460b      	mov	r3, r1
 800a824:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
 800a826:	1cfa      	adds	r2, r7, #3
 800a828:	2301      	movs	r3, #1
 800a82a:	2191      	movs	r1, #145	; 0x91
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f7ff ffae 	bl	800a78e <ft5336_write_reg>
 800a832:	4603      	mov	r3, r0
}
 800a834:	4618      	mov	r0, r3
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}

0800a83c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b082      	sub	sp, #8
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	460b      	mov	r3, r1
 800a846:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
 800a848:	1cfa      	adds	r2, r7, #3
 800a84a:	2301      	movs	r3, #1
 800a84c:	2192      	movs	r1, #146	; 0x92
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f7ff ff9d 	bl	800a78e <ft5336_write_reg>
 800a854:	4603      	mov	r3, r0
}
 800a856:	4618      	mov	r0, r3
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}

0800a85e <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a85e:	b580      	push	{r7, lr}
 800a860:	b082      	sub	sp, #8
 800a862:	af00      	add	r7, sp, #0
 800a864:	6078      	str	r0, [r7, #4]
 800a866:	460b      	mov	r3, r1
 800a868:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
 800a86a:	1cfa      	adds	r2, r7, #3
 800a86c:	2301      	movs	r3, #1
 800a86e:	2193      	movs	r1, #147	; 0x93
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff ff8c 	bl	800a78e <ft5336_write_reg>
 800a876:	4603      	mov	r3, r0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3708      	adds	r7, #8
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd80      	pop	{r7, pc}

0800a880 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
 800a888:	460b      	mov	r3, r1
 800a88a:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
 800a88c:	1cfa      	adds	r2, r7, #3
 800a88e:	2301      	movs	r3, #1
 800a890:	2194      	movs	r1, #148	; 0x94
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f7ff ff7b 	bl	800a78e <ft5336_write_reg>
 800a898:	4603      	mov	r3, r0
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3708      	adds	r7, #8
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b082      	sub	sp, #8
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
 800a8ae:	1cfa      	adds	r2, r7, #3
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	2195      	movs	r1, #149	; 0x95
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f7ff ff6a 	bl	800a78e <ft5336_write_reg>
 800a8ba:	4603      	mov	r3, r0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3708      	adds	r7, #8
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b082      	sub	sp, #8
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
 800a8d0:	1cfa      	adds	r2, r7, #3
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	2196      	movs	r1, #150	; 0x96
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f7ff ff59 	bl	800a78e <ft5336_write_reg>
 800a8dc:	4603      	mov	r3, r0
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3708      	adds	r7, #8
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}

0800a8e6 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
 800a8e6:	b580      	push	{r7, lr}
 800a8e8:	b082      	sub	sp, #8
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	70fb      	strb	r3, [r7, #3]
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
 800a8f2:	1cfa      	adds	r2, r7, #3
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	21a4      	movs	r1, #164	; 0xa4
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f7ff ff48 	bl	800a78e <ft5336_write_reg>
 800a8fe:	4603      	mov	r3, r0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3708      	adds	r7, #8
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_CHIP_ID_REG, (uint8_t *)value, 1);
 800a912:	2301      	movs	r3, #1
 800a914:	683a      	ldr	r2, [r7, #0]
 800a916:	21a8      	movs	r1, #168	; 0xa8
 800a918:	6878      	ldr	r0, [r7, #4]
 800a91a:	f7ff ff21 	bl	800a760 <ft5336_read_reg>
 800a91e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d107      	bne.n	800a936 <ft5336_chip_id+0x2e>
  {
    *value &= FT5336_CHIP_ID_BIT_MASK; 
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	781a      	ldrb	r2, [r3, #0]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	781a      	ldrb	r2, [r3, #0]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 800a936:	68fb      	ldr	r3, [r7, #12]
}
 800a938:	4618      	mov	r0, r3
 800a93a:	3710      	adds	r7, #16
 800a93c:	46bd      	mov	sp, r7
 800a93e:	bd80      	pop	{r7, pc}

0800a940 <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 800a940:	b480      	push	{r7}
 800a942:	b083      	sub	sp, #12
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a94e:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a956:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a95e:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a968:	fbb2 f2f3 	udiv	r2, r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a978:	fbb2 f2f3 	udiv	r2, r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	370c      	adds	r7, #12
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr

0800a98e <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b090      	sub	sp, #64	; 0x40
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
 800a996:	460b      	mov	r3, r1
 800a998:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800a99a:	78fb      	ldrb	r3, [r7, #3]
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d102      	bne.n	800a9a6 <MT25TL01G_Enter4BytesAddressMode+0x18>
 800a9a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a9a4:	e001      	b.n	800a9aa <MT25TL01G_Enter4BytesAddressMode+0x1c>
 800a9a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9aa:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 800a9ac:	23b7      	movs	r3, #183	; 0xb7
 800a9ae:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	63fb      	str	r3, [r7, #60]	; 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 800a9cc:	78fb      	ldrb	r3, [r7, #3]
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f860 	bl	800aa96 <MT25TL01G_WriteEnable>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d002      	beq.n	800a9e2 <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a9dc:	f06f 0301 	mvn.w	r3, #1
 800a9e0:	e019      	b.n	800aa16 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a9e2:	f107 0308 	add.w	r3, r7, #8
 800a9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f004 fd2d 	bl	800f44c <HAL_QSPI_Command>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 800a9f8:	f06f 0301 	mvn.w	r3, #1
 800a9fc:	e00b      	b.n	800aa16 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 800a9fe:	78fb      	ldrb	r3, [r7, #3]
 800aa00:	4619      	mov	r1, r3
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f000 f80b 	bl	800aa1e <MT25TL01G_AutoPollingMemReady>
 800aa08:	4603      	mov	r3, r0
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d002      	beq.n	800aa14 <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aa0e:	f06f 0301 	mvn.w	r3, #1
 800aa12:	e000      	b.n	800aa16 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3740      	adds	r7, #64	; 0x40
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b096      	sub	sp, #88	; 0x58
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
 800aa26:	460b      	mov	r3, r1
 800aa28:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800aa2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aa2e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 800aa30:	2305      	movs	r3, #5
 800aa32:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aa34:	2300      	movs	r3, #0
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800aa3c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800aa40:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 2;
 800aa42:	2302      	movs	r3, #2
 800aa44:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aa46:	2300      	movs	r3, #0
 800aa48:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	657b      	str	r3, [r7, #84]	; 0x54

  s_config.Match           = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800aa56:	2300      	movs	r3, #0
 800aa58:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 800aa5a:	2310      	movs	r3, #16
 800aa5c:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800aa5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa62:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 800aa64:	f240 1301 	movw	r3, #257	; 0x101
 800aa68:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aa6e:	f107 0208 	add.w	r2, r7, #8
 800aa72:	f107 0120 	add.w	r1, r7, #32
 800aa76:	f241 3388 	movw	r3, #5000	; 0x1388
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f004 fe73 	bl	800f766 <HAL_QSPI_AutoPolling>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800aa86:	f06f 0304 	mvn.w	r3, #4
 800aa8a:	e000      	b.n	800aa8e <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 800aa8c:	2300      	movs	r3, #0

}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3758      	adds	r7, #88	; 0x58
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800aa96:	b580      	push	{r7, lr}
 800aa98:	b096      	sub	sp, #88	; 0x58
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800aaa2:	78fb      	ldrb	r3, [r7, #3]
 800aaa4:	2b03      	cmp	r3, #3
 800aaa6:	d102      	bne.n	800aaae <MT25TL01G_WriteEnable+0x18>
 800aaa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800aaac:	e001      	b.n	800aab2 <MT25TL01G_WriteEnable+0x1c>
 800aaae:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aab2:	63bb      	str	r3, [r7, #56]	; 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 800aab4:	2306      	movs	r3, #6
 800aab6:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800aab8:	2300      	movs	r3, #0
 800aaba:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800aabc:	2300      	movs	r3, #0
 800aabe:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 800aac0:	2300      	movs	r3, #0
 800aac2:	647b      	str	r3, [r7, #68]	; 0x44
  s_command.DummyCycles       = 0;
 800aac4:	2300      	movs	r3, #0
 800aac6:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800aac8:	2300      	movs	r3, #0
 800aaca:	64fb      	str	r3, [r7, #76]	; 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800aacc:	2300      	movs	r3, #0
 800aace:	653b      	str	r3, [r7, #80]	; 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800aad0:	2300      	movs	r3, #0
 800aad2:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800aad4:	f107 0320 	add.w	r3, r7, #32
 800aad8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f004 fcb4 	bl	800f44c <HAL_QSPI_Command>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800aaea:	f06f 0301 	mvn.w	r3, #1
 800aaee:	e029      	b.n	800ab44 <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800aaf0:	f240 2302 	movw	r3, #514	; 0x202
 800aaf4:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800aaf6:	f240 2302 	movw	r3, #514	; 0x202
 800aafa:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800aafc:	2300      	movs	r3, #0
 800aafe:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 800ab00:	2302      	movs	r3, #2
 800ab02:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 800ab04:	2310      	movs	r3, #16
 800ab06:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 800ab08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ab0c:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800ab0e:	2305      	movs	r3, #5
 800ab10:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 800ab12:	78fb      	ldrb	r3, [r7, #3]
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d102      	bne.n	800ab1e <MT25TL01G_WriteEnable+0x88>
 800ab18:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ab1c:	e001      	b.n	800ab22 <MT25TL01G_WriteEnable+0x8c>
 800ab1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab22:	647b      	str	r3, [r7, #68]	; 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab24:	f107 0208 	add.w	r2, r7, #8
 800ab28:	f107 0120 	add.w	r1, r7, #32
 800ab2c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f004 fe18 	bl	800f766 <HAL_QSPI_AutoPolling>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 800ab3c:	f06f 0304 	mvn.w	r3, #4
 800ab40:	e000      	b.n	800ab44 <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3758      	adds	r7, #88	; 0x58
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}

0800ab4c <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b090      	sub	sp, #64	; 0x40
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ab54:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab58:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 800ab5a:	2335      	movs	r3, #53	; 0x35
 800ab5c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ab62:	2300      	movs	r3, #0
 800ab64:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ab66:	2300      	movs	r3, #0
 800ab68:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ab72:	2300      	movs	r3, #0
 800ab74:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ab76:	2300      	movs	r3, #0
 800ab78:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ab7a:	f107 0308 	add.w	r3, r7, #8
 800ab7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f004 fc61 	bl	800f44c <HAL_QSPI_Command>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d002      	beq.n	800ab96 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ab90:	f06f 0301 	mvn.w	r3, #1
 800ab94:	e000      	b.n	800ab98 <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3740      	adds	r7, #64	; 0x40
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b090      	sub	sp, #64	; 0x40
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800aba8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abac:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800abae:	23f5      	movs	r3, #245	; 0xf5
 800abb0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800abb2:	2300      	movs	r3, #0
 800abb4:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800abb6:	2300      	movs	r3, #0
 800abb8:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800abba:	2300      	movs	r3, #0
 800abbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800abc6:	2300      	movs	r3, #0
 800abc8:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800abca:	2300      	movs	r3, #0
 800abcc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800abce:	f107 0308 	add.w	r3, r7, #8
 800abd2:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd6:	4619      	mov	r1, r3
 800abd8:	6878      	ldr	r0, [r7, #4]
 800abda:	f004 fc37 	bl	800f44c <HAL_QSPI_Command>
 800abde:	4603      	mov	r3, r0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d002      	beq.n	800abea <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800abe4:	f06f 0301 	mvn.w	r3, #1
 800abe8:	e000      	b.n	800abec <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3740      	adds	r7, #64	; 0x40
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b092      	sub	sp, #72	; 0x48
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
 800abfc:	460b      	mov	r3, r1
 800abfe:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800ac00:	78fb      	ldrb	r3, [r7, #3]
 800ac02:	2b03      	cmp	r3, #3
 800ac04:	d83a      	bhi.n	800ac7c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800ac06:	a201      	add	r2, pc, #4	; (adr r2, 800ac0c <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800ac08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac0c:	0800ac1d 	.word	0x0800ac1d
 800ac10:	0800ac35 	.word	0x0800ac35
 800ac14:	0800ac4d 	.word	0x0800ac4d
 800ac18:	0800ac65 	.word	0x0800ac65
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ac1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac20:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800ac22:	230e      	movs	r3, #14
 800ac24:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800ac26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800ac2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ac30:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ac32:	e023      	b.n	800ac7c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ac34:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac38:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800ac3a:	233d      	movs	r3, #61	; 0x3d
 800ac3c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800ac3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac42:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800ac44:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ac48:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ac4a:	e017      	b.n	800ac7c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ac4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac50:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 800ac52:	23ee      	movs	r3, #238	; 0xee
 800ac54:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ac56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ac5c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ac62:	e00b      	b.n	800ac7c <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ac64:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ac68:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800ac6a:	23ed      	movs	r3, #237	; 0xed
 800ac6c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ac6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ac72:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ac74:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ac78:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ac7a:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ac7c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ac80:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ac82:	2300      	movs	r3, #0
 800ac84:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800ac86:	2308      	movs	r3, #8
 800ac88:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800ac8a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ac8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800ac90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac94:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ac96:	2300      	movs	r3, #0
 800ac98:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800aca2:	f107 0208 	add.w	r2, r7, #8
 800aca6:	f107 0310 	add.w	r3, r7, #16
 800acaa:	4619      	mov	r1, r3
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f004 fdd1 	bl	800f854 <HAL_QSPI_MemoryMapped>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d002      	beq.n	800acbe <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800acb8:	f06f 0305 	mvn.w	r3, #5
 800acbc:	e000      	b.n	800acc0 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 800acbe:	2300      	movs	r3, #0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3748      	adds	r7, #72	; 0x48
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b092      	sub	sp, #72	; 0x48
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	460b      	mov	r3, r1
 800acd2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	2b03      	cmp	r3, #3
 800acd8:	d83a      	bhi.n	800ad50 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800acda:	a201      	add	r2, pc, #4	; (adr r2, 800ace0 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 800acdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ace0:	0800acf1 	.word	0x0800acf1
 800ace4:	0800ad09 	.word	0x0800ad09
 800ace8:	0800ad21 	.word	0x0800ad21
 800acec:	0800ad39 	.word	0x0800ad39
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800acf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf4:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800acf6:	230c      	movs	r3, #12
 800acf8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800acfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800ad00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ad04:	637b      	str	r3, [r7, #52]	; 0x34


    break;
 800ad06:	e023      	b.n	800ad50 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ad08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad0c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800ad0e:	23bc      	movs	r3, #188	; 0xbc
 800ad10:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800ad12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ad16:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800ad18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ad1c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ad1e:	e017      	b.n	800ad50 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800ad20:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad24:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800ad26:	23ec      	movs	r3, #236	; 0xec
 800ad28:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ad2a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad30:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad34:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ad36:	e00b      	b.n	800ad50 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800ad38:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800ad3e:	23eb      	movs	r3, #235	; 0xeb
 800ad40:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800ad42:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ad46:	62fb      	str	r3, [r7, #44]	; 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800ad48:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34

    break;
 800ad4e:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800ad50:	2308      	movs	r3, #8
 800ad52:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800ad54:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800ad58:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ad62:	2300      	movs	r3, #0
 800ad64:	643b      	str	r3, [r7, #64]	; 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ad66:	2300      	movs	r3, #0
 800ad68:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800ad72:	f107 0208 	add.w	r2, r7, #8
 800ad76:	f107 0310 	add.w	r3, r7, #16
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f004 fd69 	bl	800f854 <HAL_QSPI_MemoryMapped>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d002      	beq.n	800ad8e <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800ad88:	f06f 0305 	mvn.w	r3, #5
 800ad8c:	e000      	b.n	800ad90 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 800ad8e:	2300      	movs	r3, #0
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3748      	adds	r7, #72	; 0x48
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}

0800ad98 <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b090      	sub	sp, #64	; 0x40
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
 800ada0:	460b      	mov	r3, r1
 800ada2:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	2b03      	cmp	r3, #3
 800ada8:	d102      	bne.n	800adb0 <MT25TL01G_ResetEnable+0x18>
 800adaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800adae:	e001      	b.n	800adb4 <MT25TL01G_ResetEnable+0x1c>
 800adb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adb4:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800adb6:	2366      	movs	r3, #102	; 0x66
 800adb8:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800adbe:	2300      	movs	r3, #0
 800adc0:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800adca:	2300      	movs	r3, #0
 800adcc:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800adce:	2300      	movs	r3, #0
 800add0:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800add2:	2300      	movs	r3, #0
 800add4:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800add6:	f107 0308 	add.w	r3, r7, #8
 800adda:	f241 3288 	movw	r2, #5000	; 0x1388
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f004 fb33 	bl	800f44c <HAL_QSPI_Command>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800adec:	f06f 0301 	mvn.w	r3, #1
 800adf0:	e000      	b.n	800adf4 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 800adf2:	2300      	movs	r3, #0
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3740      	adds	r7, #64	; 0x40
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b090      	sub	sp, #64	; 0x40
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	460b      	mov	r3, r1
 800ae06:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800ae08:	78fb      	ldrb	r3, [r7, #3]
 800ae0a:	2b03      	cmp	r3, #3
 800ae0c:	d102      	bne.n	800ae14 <MT25TL01G_ResetMemory+0x18>
 800ae0e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ae12:	e001      	b.n	800ae18 <MT25TL01G_ResetMemory+0x1c>
 800ae14:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae18:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800ae1a:	2399      	movs	r3, #153	; 0x99
 800ae1c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800ae22:	2300      	movs	r3, #0
 800ae24:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DummyCycles       = 0;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800ae32:	2300      	movs	r3, #0
 800ae34:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ae3a:	f107 0308 	add.w	r3, r7, #8
 800ae3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae42:	4619      	mov	r1, r3
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f004 fb01 	bl	800f44c <HAL_QSPI_Command>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d002      	beq.n	800ae56 <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 800ae50:	f06f 0301 	mvn.w	r3, #1
 800ae54:	e000      	b.n	800ae58 <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3740      	adds	r7, #64	; 0x40
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  int32_t ret = MT48LC4M32B2_ERROR;
 800ae6a:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 f832 	bl	800aee0 <MT48LC4M32B2_ClockEnable>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d128      	bne.n	800aed4 <MT48LC4M32B2_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)MT48LC4M32B2_Delay(1);
 800ae82:	2001      	movs	r0, #1
 800ae84:	f000 f8e2 	bl	800b04c <MT48LC4M32B2_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f84a 	bl	800af28 <MT48LC4M32B2_Precharge>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d11c      	bne.n	800aed4 <MT48LC4M32B2_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(MT48LC4M32B2_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == MT48LC4M32B2_OK)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	6819      	ldr	r1, [r3, #0]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	461a      	mov	r2, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f897 	bl	800afd8 <MT48LC4M32B2_RefreshMode>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d111      	bne.n	800aed4 <MT48LC4M32B2_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(MT48LC4M32B2_ModeRegConfig(Ctx, pRegMode) == MT48LC4M32B2_OK)
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f85c 	bl	800af70 <MT48LC4M32B2_ModeRegConfig>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d10a      	bne.n	800aed4 <MT48LC4M32B2_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(MT48LC4M32B2_RefreshRate(Ctx, pRegMode->RefreshRate) == MT48LC4M32B2_OK)
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	4619      	mov	r1, r3
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f8ad 	bl	800b024 <MT48LC4M32B2_RefreshRate>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <MT48LC4M32B2_Init+0x74>
          {
            ret = MT48LC4M32B2_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800aed4:	68fb      	ldr	r3, [r7, #12]
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3710      	adds	r7, #16
 800aeda:	46bd      	mov	sp, r7
 800aedc:	bd80      	pop	{r7, pc}
	...

0800aee0 <MT48LC4M32B2_ClockEnable>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b082      	sub	sp, #8
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
 800aeea:	4b0e      	ldr	r3, [pc, #56]	; (800af24 <MT48LC4M32B2_ClockEnable+0x44>)
 800aeec:	2201      	movs	r2, #1
 800aeee:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800aef0:	4a0c      	ldr	r2, [pc, #48]	; (800af24 <MT48LC4M32B2_ClockEnable+0x44>)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800aef6:	4b0b      	ldr	r3, [pc, #44]	; (800af24 <MT48LC4M32B2_ClockEnable+0x44>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <MT48LC4M32B2_ClockEnable+0x44>)
 800aefe:	2200      	movs	r2, #0
 800af00:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800af02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af06:	4907      	ldr	r1, [pc, #28]	; (800af24 <MT48LC4M32B2_ClockEnable+0x44>)
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f007 f8e7 	bl	80120dc <HAL_SDRAM_SendCommand>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d002      	beq.n	800af1a <MT48LC4M32B2_ClockEnable+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800af14:	f04f 33ff 	mov.w	r3, #4294967295
 800af18:	e000      	b.n	800af1c <MT48LC4M32B2_ClockEnable+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800af1a:	2300      	movs	r3, #0
  }
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3708      	adds	r7, #8
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}
 800af24:	2400a330 	.word	0x2400a330

0800af28 <MT48LC4M32B2_Precharge>:
  * @param  Ctx : Component object pointer
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
 800af32:	4b0e      	ldr	r3, [pc, #56]	; (800af6c <MT48LC4M32B2_Precharge+0x44>)
 800af34:	2202      	movs	r2, #2
 800af36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 800af38:	4a0c      	ldr	r2, [pc, #48]	; (800af6c <MT48LC4M32B2_Precharge+0x44>)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800af3e:	4b0b      	ldr	r3, [pc, #44]	; (800af6c <MT48LC4M32B2_Precharge+0x44>)
 800af40:	2201      	movs	r2, #1
 800af42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800af44:	4b09      	ldr	r3, [pc, #36]	; (800af6c <MT48LC4M32B2_Precharge+0x44>)
 800af46:	2200      	movs	r2, #0
 800af48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800af4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800af4e:	4907      	ldr	r1, [pc, #28]	; (800af6c <MT48LC4M32B2_Precharge+0x44>)
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f007 f8c3 	bl	80120dc <HAL_SDRAM_SendCommand>
 800af56:	4603      	mov	r3, r0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <MT48LC4M32B2_Precharge+0x3a>
  {
    return MT48LC4M32B2_ERROR;
 800af5c:	f04f 33ff 	mov.w	r3, #4294967295
 800af60:	e000      	b.n	800af64 <MT48LC4M32B2_Precharge+0x3c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800af62:	2300      	movs	r3, #0
  }
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}
 800af6c:	2400a330 	.word	0x2400a330

0800af70 <MT48LC4M32B2_ModeRegConfig>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af82:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 800af88:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 800af8e:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
 800af98:	4b0e      	ldr	r3, [pc, #56]	; (800afd4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800af9a:	2204      	movs	r2, #4
 800af9c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4a0c      	ldr	r2, [pc, #48]	; (800afd4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800afa4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800afa8:	2201      	movs	r2, #1
 800afaa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800afac:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800afb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800afb6:	4907      	ldr	r1, [pc, #28]	; (800afd4 <MT48LC4M32B2_ModeRegConfig+0x64>)
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f007 f88f 	bl	80120dc <HAL_SDRAM_SendCommand>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <MT48LC4M32B2_ModeRegConfig+0x5a>
  {
    return MT48LC4M32B2_ERROR;
 800afc4:	f04f 33ff 	mov.w	r3, #4294967295
 800afc8:	e000      	b.n	800afcc <MT48LC4M32B2_ModeRegConfig+0x5c>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800afca:	2300      	movs	r3, #0
  }
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}
 800afd4:	2400a330 	.word	0x2400a330

0800afd8 <MT48LC4M32B2_RefreshMode>:
  * @param  RefreshMode : Could be MT48LC4M32B2_CMD_AUTOREFRESH_MODE or
  *                      MT48LC4M32B2_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800afe4:	4a0e      	ldr	r2, [pc, #56]	; (800b020 <MT48LC4M32B2_RefreshMode+0x48>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 800afea:	4a0d      	ldr	r2, [pc, #52]	; (800b020 <MT48LC4M32B2_RefreshMode+0x48>)
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 800aff0:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <MT48LC4M32B2_RefreshMode+0x48>)
 800aff2:	2208      	movs	r2, #8
 800aff4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800aff6:	4b0a      	ldr	r3, [pc, #40]	; (800b020 <MT48LC4M32B2_RefreshMode+0x48>)
 800aff8:	2200      	movs	r2, #0
 800affa:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
 800affc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b000:	4907      	ldr	r1, [pc, #28]	; (800b020 <MT48LC4M32B2_RefreshMode+0x48>)
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f007 f86a 	bl	80120dc <HAL_SDRAM_SendCommand>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d002      	beq.n	800b014 <MT48LC4M32B2_RefreshMode+0x3c>
  {
    return MT48LC4M32B2_ERROR;
 800b00e:	f04f 33ff 	mov.w	r3, #4294967295
 800b012:	e000      	b.n	800b016 <MT48LC4M32B2_RefreshMode+0x3e>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b014:	2300      	movs	r3, #0
  }
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
 800b01e:	bf00      	nop
 800b020:	2400a330 	.word	0x2400a330

0800b024 <MT48LC4M32B2_RefreshRate>:
  * @param  Ctx : Component object pointer
  * @param  RefreshCount : The refresh rate to be programmed
  * @retval error status
  */
int32_t MT48LC4M32B2_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f007 f888 	bl	8012146 <HAL_SDRAM_ProgramRefreshRate>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <MT48LC4M32B2_RefreshRate+0x1e>
  {
    return MT48LC4M32B2_ERROR;
 800b03c:	f04f 33ff 	mov.w	r3, #4294967295
 800b040:	e000      	b.n	800b044 <MT48LC4M32B2_RefreshRate+0x20>
  }
  else
  {
    return MT48LC4M32B2_OK;
 800b042:	2300      	movs	r3, #0
  }
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <MT48LC4M32B2_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b084      	sub	sp, #16
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 800b054:	f001 fcfc 	bl	800ca50 <HAL_GetTick>
 800b058:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 800b05a:	bf00      	nop
 800b05c:	f001 fcf8 	bl	800ca50 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d8f7      	bhi.n	800b05c <MT48LC4M32B2_Delay+0x10>
  {
  }
  return MT48LC4M32B2_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
	...

0800b078 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800b082:	4b16      	ldr	r3, [pc, #88]	; (800b0dc <BSP_I2C4_Init+0x64>)
 800b084:	4a16      	ldr	r2, [pc, #88]	; (800b0e0 <BSP_I2C4_Init+0x68>)
 800b086:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800b088:	4b16      	ldr	r3, [pc, #88]	; (800b0e4 <BSP_I2C4_Init+0x6c>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d11f      	bne.n	800b0d0 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800b090:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <BSP_I2C4_Init+0x6c>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	4a13      	ldr	r2, [pc, #76]	; (800b0e4 <BSP_I2C4_Init+0x6c>)
 800b098:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800b09a:	4810      	ldr	r0, [pc, #64]	; (800b0dc <BSP_I2C4_Init+0x64>)
 800b09c:	f002 fefa 	bl	800de94 <HAL_I2C_GetState>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d114      	bne.n	800b0d0 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800b0a6:	480d      	ldr	r0, [pc, #52]	; (800b0dc <BSP_I2C4_Init+0x64>)
 800b0a8:	f000 fb60 	bl	800b76c <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800b0ac:	f005 febc 	bl	8010e28 <HAL_RCC_GetPCLK2Freq>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	490d      	ldr	r1, [pc, #52]	; (800b0e8 <BSP_I2C4_Init+0x70>)
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f000 f8e3 	bl	800b280 <I2C_GetTiming>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4619      	mov	r1, r3
 800b0be:	4807      	ldr	r0, [pc, #28]	; (800b0dc <BSP_I2C4_Init+0x64>)
 800b0c0:	f000 f838 	bl	800b134 <MX_I2C4_Init>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d002      	beq.n	800b0d0 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800b0ca:	f06f 0307 	mvn.w	r3, #7
 800b0ce:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800b0d0:	687b      	ldr	r3, [r7, #4]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	2400ad48 	.word	0x2400ad48
 800b0e0:	58001c00 	.word	0x58001c00
 800b0e4:	2400a340 	.word	0x2400a340
 800b0e8:	000186a0 	.word	0x000186a0

0800b0ec <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b082      	sub	sp, #8
 800b0f0:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800b0f6:	4b0d      	ldr	r3, [pc, #52]	; (800b12c <BSP_I2C4_DeInit+0x40>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	4a0b      	ldr	r2, [pc, #44]	; (800b12c <BSP_I2C4_DeInit+0x40>)
 800b0fe:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
 800b100:	4b0a      	ldr	r3, [pc, #40]	; (800b12c <BSP_I2C4_DeInit+0x40>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10b      	bne.n	800b120 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800b108:	4809      	ldr	r0, [pc, #36]	; (800b130 <BSP_I2C4_DeInit+0x44>)
 800b10a:	f000 fb9b 	bl	800b844 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800b10e:	4808      	ldr	r0, [pc, #32]	; (800b130 <BSP_I2C4_DeInit+0x44>)
 800b110:	f002 fc4e 	bl	800d9b0 <HAL_I2C_DeInit>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d002      	beq.n	800b120 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b11a:	f06f 0307 	mvn.w	r3, #7
 800b11e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b120:	687b      	ldr	r3, [r7, #4]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3708      	adds	r7, #8
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	2400a340 	.word	0x2400a340
 800b130:	2400ad48 	.word	0x2400ad48

0800b134 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	683a      	ldr	r2, [r7, #0]
 800b146:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2200      	movs	r2, #0
 800b14c:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f002 fb8c 	bl	800d890 <HAL_I2C_Init>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	73fb      	strb	r3, [r7, #15]
 800b182:	e014      	b.n	800b1ae <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800b184:	2300      	movs	r3, #0
 800b186:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800b188:	68b9      	ldr	r1, [r7, #8]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f003 f942 	bl	800e414 <HAL_I2CEx_ConfigAnalogFilter>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d002      	beq.n	800b19c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	73fb      	strb	r3, [r7, #15]
 800b19a:	e008      	b.n	800b1ae <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800b19c:	2100      	movs	r1, #0
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f003 f983 	bl	800e4aa <HAL_I2CEx_ConfigDigitalFilter>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800b1ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b088      	sub	sp, #32
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	60ba      	str	r2, [r7, #8]
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	81fb      	strh	r3, [r7, #14]
 800b1c6:	460b      	mov	r3, r1
 800b1c8:	81bb      	strh	r3, [r7, #12]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b1ce:	89b9      	ldrh	r1, [r7, #12]
 800b1d0:	89f8      	ldrh	r0, [r7, #14]
 800b1d2:	88fb      	ldrh	r3, [r7, #6]
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	2201      	movs	r2, #1
 800b1da:	f000 fb57 	bl	800b88c <I2C4_WriteReg>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	617b      	str	r3, [r7, #20]
 800b1e8:	e00c      	b.n	800b204 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b1ea:	4809      	ldr	r0, [pc, #36]	; (800b210 <BSP_I2C4_WriteReg+0x58>)
 800b1ec:	f002 fe60 	bl	800deb0 <HAL_I2C_GetError>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d103      	bne.n	800b1fe <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b1f6:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b1fa:	617b      	str	r3, [r7, #20]
 800b1fc:	e002      	b.n	800b204 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b1fe:	f06f 0303 	mvn.w	r3, #3
 800b202:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b204:	697b      	ldr	r3, [r7, #20]
}
 800b206:	4618      	mov	r0, r3
 800b208:	3718      	adds	r7, #24
 800b20a:	46bd      	mov	sp, r7
 800b20c:	bd80      	pop	{r7, pc}
 800b20e:	bf00      	nop
 800b210:	2400ad48 	.word	0x2400ad48

0800b214 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b088      	sub	sp, #32
 800b218:	af02      	add	r7, sp, #8
 800b21a:	60ba      	str	r2, [r7, #8]
 800b21c:	461a      	mov	r2, r3
 800b21e:	4603      	mov	r3, r0
 800b220:	81fb      	strh	r3, [r7, #14]
 800b222:	460b      	mov	r3, r1
 800b224:	81bb      	strh	r3, [r7, #12]
 800b226:	4613      	mov	r3, r2
 800b228:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800b22a:	89b9      	ldrh	r1, [r7, #12]
 800b22c:	89f8      	ldrh	r0, [r7, #14]
 800b22e:	88fb      	ldrh	r3, [r7, #6]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	2201      	movs	r2, #1
 800b236:	f000 fb4f 	bl	800b8d8 <I2C4_ReadReg>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d102      	bne.n	800b246 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800b240:	2300      	movs	r3, #0
 800b242:	617b      	str	r3, [r7, #20]
 800b244:	e00c      	b.n	800b260 <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800b246:	4809      	ldr	r0, [pc, #36]	; (800b26c <BSP_I2C4_ReadReg+0x58>)
 800b248:	f002 fe32 	bl	800deb0 <HAL_I2C_GetError>
 800b24c:	4603      	mov	r3, r0
 800b24e:	2b04      	cmp	r3, #4
 800b250:	d103      	bne.n	800b25a <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800b252:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800b256:	617b      	str	r3, [r7, #20]
 800b258:	e002      	b.n	800b260 <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800b25a:	f06f 0303 	mvn.w	r3, #3
 800b25e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800b260:	697b      	ldr	r3, [r7, #20]
}
 800b262:	4618      	mov	r0, r3
 800b264:	3718      	adds	r7, #24
 800b266:	46bd      	mov	sp, r7
 800b268:	bd80      	pop	{r7, pc}
 800b26a:	bf00      	nop
 800b26c:	2400ad48 	.word	0x2400ad48

0800b270 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800b274:	f001 fbec 	bl	800ca50 <HAL_GetTick>
 800b278:	4603      	mov	r3, r0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	bd80      	pop	{r7, pc}
	...

0800b280 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b086      	sub	sp, #24
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800b28a:	2300      	movs	r3, #0
 800b28c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d06b      	beq.n	800b36c <I2C_GetTiming+0xec>
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d068      	beq.n	800b36c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b29a:	2300      	movs	r3, #0
 800b29c:	613b      	str	r3, [r7, #16]
 800b29e:	e060      	b.n	800b362 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b2a0:	4a35      	ldr	r2, [pc, #212]	; (800b378 <I2C_GetTiming+0xf8>)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	212c      	movs	r1, #44	; 0x2c
 800b2a6:	fb01 f303 	mul.w	r3, r1, r3
 800b2aa:	4413      	add	r3, r2
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d352      	bcc.n	800b35c <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800b2b6:	4a30      	ldr	r2, [pc, #192]	; (800b378 <I2C_GetTiming+0xf8>)
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	212c      	movs	r1, #44	; 0x2c
 800b2bc:	fb01 f303 	mul.w	r3, r1, r3
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d847      	bhi.n	800b35c <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800b2cc:	6939      	ldr	r1, [r7, #16]
 800b2ce:	6878      	ldr	r0, [r7, #4]
 800b2d0:	f000 f856 	bl	800b380 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800b2d4:	6939      	ldr	r1, [r7, #16]
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f940 	bl	800b55c <I2C_Compute_SCLL_SCLH>
 800b2dc:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	2b7f      	cmp	r3, #127	; 0x7f
 800b2e2:	d842      	bhi.n	800b36a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b2e4:	4925      	ldr	r1, [pc, #148]	; (800b37c <I2C_GetTiming+0xfc>)
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	4613      	mov	r3, r2
 800b2ea:	009b      	lsls	r3, r3, #2
 800b2ec:	4413      	add	r3, r2
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	440b      	add	r3, r1
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b2f6:	4821      	ldr	r0, [pc, #132]	; (800b37c <I2C_GetTiming+0xfc>)
 800b2f8:	68fa      	ldr	r2, [r7, #12]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	009b      	lsls	r3, r3, #2
 800b2fe:	4413      	add	r3, r2
 800b300:	009b      	lsls	r3, r3, #2
 800b302:	4403      	add	r3, r0
 800b304:	3304      	adds	r3, #4
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	051b      	lsls	r3, r3, #20
 800b30a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b30e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b310:	481a      	ldr	r0, [pc, #104]	; (800b37c <I2C_GetTiming+0xfc>)
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	4613      	mov	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4403      	add	r3, r0
 800b31e:	3308      	adds	r3, #8
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	041b      	lsls	r3, r3, #16
 800b324:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800b328:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800b32a:	4814      	ldr	r0, [pc, #80]	; (800b37c <I2C_GetTiming+0xfc>)
 800b32c:	68fa      	ldr	r2, [r7, #12]
 800b32e:	4613      	mov	r3, r2
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	009b      	lsls	r3, r3, #2
 800b336:	4403      	add	r3, r0
 800b338:	330c      	adds	r3, #12
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	021b      	lsls	r3, r3, #8
 800b33e:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800b340:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800b342:	480e      	ldr	r0, [pc, #56]	; (800b37c <I2C_GetTiming+0xfc>)
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4613      	mov	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	4403      	add	r3, r0
 800b350:	3310      	adds	r3, #16
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800b356:	430b      	orrs	r3, r1
 800b358:	617b      	str	r3, [r7, #20]
        }
        break;
 800b35a:	e006      	b.n	800b36a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3301      	adds	r3, #1
 800b360:	613b      	str	r3, [r7, #16]
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	2b02      	cmp	r3, #2
 800b366:	d99b      	bls.n	800b2a0 <I2C_GetTiming+0x20>
 800b368:	e000      	b.n	800b36c <I2C_GetTiming+0xec>
        break;
 800b36a:	bf00      	nop
      }
    }
  }

  return ret;
 800b36c:	697b      	ldr	r3, [r7, #20]
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3718      	adds	r7, #24
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	08025b9c 	.word	0x08025b9c
 800b37c:	2400a344 	.word	0x2400a344

0800b380 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b380:	b480      	push	{r7}
 800b382:	b08f      	sub	sp, #60	; 0x3c
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800b38a:	2310      	movs	r3, #16
 800b38c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	085a      	lsrs	r2, r3, #1
 800b392:	4b6e      	ldr	r3, [pc, #440]	; (800b54c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800b394:	4413      	add	r3, r2
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b39e:	2332      	movs	r3, #50	; 0x32
 800b3a0:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800b3a2:	f44f 7382 	mov.w	r3, #260	; 0x104
 800b3a6:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b3a8:	4a69      	ldr	r2, [pc, #420]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	212c      	movs	r1, #44	; 0x2c
 800b3ae:	fb01 f303 	mul.w	r3, r1, r3
 800b3b2:	4413      	add	r3, r2
 800b3b4:	3324      	adds	r3, #36	; 0x24
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	4a65      	ldr	r2, [pc, #404]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	212c      	movs	r1, #44	; 0x2c
 800b3c0:	fb01 f303 	mul.w	r3, r1, r3
 800b3c4:	4413      	add	r3, r2
 800b3c6:	330c      	adds	r3, #12
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b3cc:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b3ce:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800b3d0:	495f      	ldr	r1, [pc, #380]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	202c      	movs	r0, #44	; 0x2c
 800b3d6:	fb00 f303 	mul.w	r3, r0, r3
 800b3da:	440b      	add	r3, r1
 800b3dc:	3328      	adds	r3, #40	; 0x28
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3303      	adds	r3, #3
 800b3e2:	69f9      	ldr	r1, [r7, #28]
 800b3e4:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800b3e8:	1ad3      	subs	r3, r2, r3
 800b3ea:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b3ec:	4a58      	ldr	r2, [pc, #352]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	212c      	movs	r1, #44	; 0x2c
 800b3f2:	fb01 f303 	mul.w	r3, r1, r3
 800b3f6:	4413      	add	r3, r2
 800b3f8:	3310      	adds	r3, #16
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	4a54      	ldr	r2, [pc, #336]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	212c      	movs	r1, #44	; 0x2c
 800b404:	fb01 f303 	mul.w	r3, r1, r3
 800b408:	4413      	add	r3, r2
 800b40a:	3320      	adds	r3, #32
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b410:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b412:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800b414:	494e      	ldr	r1, [pc, #312]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	202c      	movs	r0, #44	; 0x2c
 800b41a:	fb00 f303 	mul.w	r3, r0, r3
 800b41e:	440b      	add	r3, r1
 800b420:	3328      	adds	r3, #40	; 0x28
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	3304      	adds	r3, #4
 800b426:	69f9      	ldr	r1, [r7, #28]
 800b428:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800b42c:	1ad3      	subs	r3, r2, r3
 800b42e:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800b430:	4a47      	ldr	r2, [pc, #284]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	212c      	movs	r1, #44	; 0x2c
 800b436:	fb01 f303 	mul.w	r3, r1, r3
 800b43a:	4413      	add	r3, r2
 800b43c:	3320      	adds	r3, #32
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	4618      	mov	r0, r3
 800b442:	4a43      	ldr	r2, [pc, #268]	; (800b550 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	212c      	movs	r1, #44	; 0x2c
 800b448:	fb01 f303 	mul.w	r3, r1, r3
 800b44c:	4413      	add	r3, r2
 800b44e:	3314      	adds	r3, #20
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4403      	add	r3, r0
 800b454:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800b456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dc01      	bgt.n	800b460 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 800b460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b462:	2b00      	cmp	r3, #0
 800b464:	dc01      	bgt.n	800b46a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b46a:	2300      	movs	r3, #0
 800b46c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b46e:	e062      	b.n	800b536 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b470:	2300      	movs	r3, #0
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
 800b474:	e059      	b.n	800b52a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b478:	3301      	adds	r3, #1
 800b47a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b47c:	3201      	adds	r2, #1
 800b47e:	fb03 f202 	mul.w	r2, r3, r2
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	fb02 f303 	mul.w	r3, r2, r3
 800b488:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d348      	bcc.n	800b524 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b492:	2300      	movs	r3, #0
 800b494:	623b      	str	r3, [r7, #32]
 800b496:	e042      	b.n	800b51e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	3301      	adds	r3, #1
 800b49c:	6a3a      	ldr	r2, [r7, #32]
 800b49e:	fb03 f202 	mul.w	r2, r3, r2
 800b4a2:	69fb      	ldr	r3, [r7, #28]
 800b4a4:	fb02 f303 	mul.w	r3, r2, r3
 800b4a8:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800b4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ac:	68ba      	ldr	r2, [r7, #8]
 800b4ae:	429a      	cmp	r2, r3
 800b4b0:	d332      	bcc.n	800b518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800b4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d82e      	bhi.n	800b518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800b4ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d02a      	beq.n	800b518 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800b4c2:	4b24      	ldr	r3, [pc, #144]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4c4:	681a      	ldr	r2, [r3, #0]
 800b4c6:	4924      	ldr	r1, [pc, #144]	; (800b558 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	440b      	add	r3, r1
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800b4d6:	4b1f      	ldr	r3, [pc, #124]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	491f      	ldr	r1, [pc, #124]	; (800b558 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	009b      	lsls	r3, r3, #2
 800b4e4:	440b      	add	r3, r1
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ea:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800b4ec:	4b19      	ldr	r3, [pc, #100]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	4919      	ldr	r1, [pc, #100]	; (800b558 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	4413      	add	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	440b      	add	r3, r1
 800b4fc:	3308      	adds	r3, #8
 800b4fe:	6a3a      	ldr	r2, [r7, #32]
 800b500:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800b502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b504:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 800b506:	4b13      	ldr	r3, [pc, #76]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	3301      	adds	r3, #1
 800b50c:	4a11      	ldr	r2, [pc, #68]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b50e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800b510:	4b10      	ldr	r3, [pc, #64]	; (800b554 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2b7f      	cmp	r3, #127	; 0x7f
 800b516:	d812      	bhi.n	800b53e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800b518:	6a3b      	ldr	r3, [r7, #32]
 800b51a:	3301      	adds	r3, #1
 800b51c:	623b      	str	r3, [r7, #32]
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	2b0f      	cmp	r3, #15
 800b522:	d9b9      	bls.n	800b498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800b524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b526:	3301      	adds	r3, #1
 800b528:	627b      	str	r3, [r7, #36]	; 0x24
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	2b0f      	cmp	r3, #15
 800b52e:	d9a2      	bls.n	800b476 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800b530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b532:	3301      	adds	r3, #1
 800b534:	62bb      	str	r3, [r7, #40]	; 0x28
 800b536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b538:	2b0f      	cmp	r3, #15
 800b53a:	d999      	bls.n	800b470 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800b53c:	e000      	b.n	800b540 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800b53e:	bf00      	nop
          }
        }
      }
    }
  }
}
 800b540:	373c      	adds	r7, #60	; 0x3c
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	3b9aca00 	.word	0x3b9aca00
 800b550:	08025b9c 	.word	0x08025b9c
 800b554:	2400ad44 	.word	0x2400ad44
 800b558:	2400a344 	.word	0x2400a344

0800b55c <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800b55c:	b480      	push	{r7}
 800b55e:	b093      	sub	sp, #76	; 0x4c
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800b566:	f04f 33ff 	mov.w	r3, #4294967295
 800b56a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	085a      	lsrs	r2, r3, #1
 800b570:	4b7a      	ldr	r3, [pc, #488]	; (800b75c <I2C_Compute_SCLL_SCLH+0x200>)
 800b572:	4413      	add	r3, r2
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	fbb3 f3f2 	udiv	r3, r3, r2
 800b57a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800b57c:	4a78      	ldr	r2, [pc, #480]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	212c      	movs	r1, #44	; 0x2c
 800b582:	fb01 f303 	mul.w	r3, r1, r3
 800b586:	4413      	add	r3, r2
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	085a      	lsrs	r2, r3, #1
 800b58c:	4b73      	ldr	r3, [pc, #460]	; (800b75c <I2C_Compute_SCLL_SCLH+0x200>)
 800b58e:	4413      	add	r3, r2
 800b590:	4973      	ldr	r1, [pc, #460]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	202c      	movs	r0, #44	; 0x2c
 800b596:	fb00 f202 	mul.w	r2, r0, r2
 800b59a:	440a      	add	r2, r1
 800b59c:	6812      	ldr	r2, [r2, #0]
 800b59e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5a2:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800b5a4:	2332      	movs	r3, #50	; 0x32
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800b5a8:	4a6d      	ldr	r2, [pc, #436]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b5aa:	683b      	ldr	r3, [r7, #0]
 800b5ac:	212c      	movs	r1, #44	; 0x2c
 800b5ae:	fb01 f303 	mul.w	r3, r1, r3
 800b5b2:	4413      	add	r3, r2
 800b5b4:	3328      	adds	r3, #40	; 0x28
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5ba:	fb02 f303 	mul.w	r3, r2, r3
 800b5be:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800b5c0:	4a67      	ldr	r2, [pc, #412]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b5c2:	683b      	ldr	r3, [r7, #0]
 800b5c4:	212c      	movs	r1, #44	; 0x2c
 800b5c6:	fb01 f303 	mul.w	r3, r1, r3
 800b5ca:	4413      	add	r3, r2
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	4a62      	ldr	r2, [pc, #392]	; (800b75c <I2C_Compute_SCLL_SCLH+0x200>)
 800b5d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d6:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800b5d8:	4a61      	ldr	r2, [pc, #388]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	212c      	movs	r1, #44	; 0x2c
 800b5de:	fb01 f303 	mul.w	r3, r1, r3
 800b5e2:	4413      	add	r3, r2
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	4a5c      	ldr	r2, [pc, #368]	; (800b75c <I2C_Compute_SCLL_SCLH+0x200>)
 800b5ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ee:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b5f8:	e0a3      	b.n	800b742 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800b5fa:	495a      	ldr	r1, [pc, #360]	; (800b764 <I2C_Compute_SCLL_SCLH+0x208>)
 800b5fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	440b      	add	r3, r1
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	1c5a      	adds	r2, r3, #1
 800b60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
 800b612:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b614:	2300      	movs	r3, #0
 800b616:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b618:	e08c      	b.n	800b734 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800b61a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	441a      	add	r2, r3
 800b620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b622:	3301      	adds	r3, #1
 800b624:	6979      	ldr	r1, [r7, #20]
 800b626:	fb03 f101 	mul.w	r1, r3, r1
 800b62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62c:	005b      	lsls	r3, r3, #1
 800b62e:	440b      	add	r3, r1
 800b630:	4413      	add	r3, r2
 800b632:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800b634:	4a4a      	ldr	r2, [pc, #296]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	212c      	movs	r1, #44	; 0x2c
 800b63a:	fb01 f303 	mul.w	r3, r1, r3
 800b63e:	4413      	add	r3, r2
 800b640:	3318      	adds	r3, #24
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	429a      	cmp	r2, r3
 800b648:	d971      	bls.n	800b72e <I2C_Compute_SCLL_SCLH+0x1d2>
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	1ad3      	subs	r3, r2, r3
 800b654:	089b      	lsrs	r3, r3, #2
 800b656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b658:	429a      	cmp	r2, r3
 800b65a:	d268      	bcs.n	800b72e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b65c:	2300      	movs	r3, #0
 800b65e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b660:	e062      	b.n	800b728 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800b662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	441a      	add	r2, r3
 800b668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b66a:	3301      	adds	r3, #1
 800b66c:	6979      	ldr	r1, [r7, #20]
 800b66e:	fb03 f101 	mul.w	r1, r3, r1
 800b672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	440b      	add	r3, r1
 800b678:	4413      	add	r3, r2
 800b67a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800b67c:	693a      	ldr	r2, [r7, #16]
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	441a      	add	r2, r3
 800b682:	4937      	ldr	r1, [pc, #220]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	202c      	movs	r0, #44	; 0x2c
 800b688:	fb00 f303 	mul.w	r3, r0, r3
 800b68c:	440b      	add	r3, r1
 800b68e:	3320      	adds	r3, #32
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	441a      	add	r2, r3
 800b694:	4932      	ldr	r1, [pc, #200]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b696:	683b      	ldr	r3, [r7, #0]
 800b698:	202c      	movs	r0, #44	; 0x2c
 800b69a:	fb00 f303 	mul.w	r3, r0, r3
 800b69e:	440b      	add	r3, r1
 800b6a0:	3324      	adds	r3, #36	; 0x24
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800b6a8:	68ba      	ldr	r2, [r7, #8]
 800b6aa:	69bb      	ldr	r3, [r7, #24]
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d338      	bcc.n	800b722 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	69fb      	ldr	r3, [r7, #28]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d834      	bhi.n	800b722 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b6b8:	4a29      	ldr	r2, [pc, #164]	; (800b760 <I2C_Compute_SCLL_SCLH+0x204>)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	212c      	movs	r1, #44	; 0x2c
 800b6be:	fb01 f303 	mul.w	r3, r1, r3
 800b6c2:	4413      	add	r3, r2
 800b6c4:	331c      	adds	r3, #28
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d329      	bcc.n	800b722 <I2C_Compute_SCLL_SCLH+0x1c6>
 800b6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d225      	bcs.n	800b722 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 800b6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	da02      	bge.n	800b6ea <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6e6:	425b      	negs	r3, r3
 800b6e8:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d917      	bls.n	800b722 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f4:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 800b6f6:	491b      	ldr	r1, [pc, #108]	; (800b764 <I2C_Compute_SCLL_SCLH+0x208>)
 800b6f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	4413      	add	r3, r2
 800b700:	009b      	lsls	r3, r3, #2
 800b702:	440b      	add	r3, r1
 800b704:	3310      	adds	r3, #16
 800b706:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b708:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800b70a:	4916      	ldr	r1, [pc, #88]	; (800b764 <I2C_Compute_SCLL_SCLH+0x208>)
 800b70c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b70e:	4613      	mov	r3, r2
 800b710:	009b      	lsls	r3, r3, #2
 800b712:	4413      	add	r3, r2
 800b714:	009b      	lsls	r3, r3, #2
 800b716:	440b      	add	r3, r1
 800b718:	330c      	adds	r3, #12
 800b71a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b71c:	601a      	str	r2, [r3, #0]
              ret = count;
 800b71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b720:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800b722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b724:	3301      	adds	r3, #1
 800b726:	63bb      	str	r3, [r7, #56]	; 0x38
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	2bff      	cmp	r3, #255	; 0xff
 800b72c:	d999      	bls.n	800b662 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b730:	3301      	adds	r3, #1
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b736:	2bff      	cmp	r3, #255	; 0xff
 800b738:	f67f af6f 	bls.w	800b61a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800b73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73e:	3301      	adds	r3, #1
 800b740:	637b      	str	r3, [r7, #52]	; 0x34
 800b742:	4b09      	ldr	r3, [pc, #36]	; (800b768 <I2C_Compute_SCLL_SCLH+0x20c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b748:	429a      	cmp	r2, r3
 800b74a:	f4ff af56 	bcc.w	800b5fa <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800b74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b750:	4618      	mov	r0, r3
 800b752:	374c      	adds	r7, #76	; 0x4c
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	3b9aca00 	.word	0x3b9aca00
 800b760:	08025b9c 	.word	0x08025b9c
 800b764:	2400a344 	.word	0x2400a344
 800b768:	2400ad44 	.word	0x2400ad44

0800b76c <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b08a      	sub	sp, #40	; 0x28
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800b774:	4b31      	ldr	r3, [pc, #196]	; (800b83c <I2C4_MspInit+0xd0>)
 800b776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b77a:	4a30      	ldr	r2, [pc, #192]	; (800b83c <I2C4_MspInit+0xd0>)
 800b77c:	f043 0308 	orr.w	r3, r3, #8
 800b780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b784:	4b2d      	ldr	r3, [pc, #180]	; (800b83c <I2C4_MspInit+0xd0>)
 800b786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b78a:	f003 0308 	and.w	r3, r3, #8
 800b78e:	613b      	str	r3, [r7, #16]
 800b790:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800b792:	4b2a      	ldr	r3, [pc, #168]	; (800b83c <I2C4_MspInit+0xd0>)
 800b794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b798:	4a28      	ldr	r2, [pc, #160]	; (800b83c <I2C4_MspInit+0xd0>)
 800b79a:	f043 0308 	orr.w	r3, r3, #8
 800b79e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b7a2:	4b26      	ldr	r3, [pc, #152]	; (800b83c <I2C4_MspInit+0xd0>)
 800b7a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b7a8:	f003 0308 	and.w	r3, r3, #8
 800b7ac:	60fb      	str	r3, [r7, #12]
 800b7ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800b7b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7b4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b7b6:	2312      	movs	r3, #18
 800b7b8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b7be:	2302      	movs	r3, #2
 800b7c0:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800b7c2:	2304      	movs	r3, #4
 800b7c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800b7c6:	f107 0314 	add.w	r3, r7, #20
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	481c      	ldr	r0, [pc, #112]	; (800b840 <I2C4_MspInit+0xd4>)
 800b7ce:	f001 fd43 	bl	800d258 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800b7d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b7d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800b7d8:	2312      	movs	r3, #18
 800b7da:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800b7e4:	2304      	movs	r3, #4
 800b7e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800b7e8:	f107 0314 	add.w	r3, r7, #20
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	4814      	ldr	r0, [pc, #80]	; (800b840 <I2C4_MspInit+0xd4>)
 800b7f0:	f001 fd32 	bl	800d258 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800b7f4:	4b11      	ldr	r3, [pc, #68]	; (800b83c <I2C4_MspInit+0xd0>)
 800b7f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b7fa:	4a10      	ldr	r2, [pc, #64]	; (800b83c <I2C4_MspInit+0xd0>)
 800b7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b800:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800b804:	4b0d      	ldr	r3, [pc, #52]	; (800b83c <I2C4_MspInit+0xd0>)
 800b806:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b80a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80e:	60bb      	str	r3, [r7, #8]
 800b810:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800b812:	4b0a      	ldr	r3, [pc, #40]	; (800b83c <I2C4_MspInit+0xd0>)
 800b814:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b818:	4a08      	ldr	r2, [pc, #32]	; (800b83c <I2C4_MspInit+0xd0>)
 800b81a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b81e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800b822:	4b06      	ldr	r3, [pc, #24]	; (800b83c <I2C4_MspInit+0xd0>)
 800b824:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b828:	4a04      	ldr	r2, [pc, #16]	; (800b83c <I2C4_MspInit+0xd0>)
 800b82a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b82e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 800b832:	bf00      	nop
 800b834:	3728      	adds	r7, #40	; 0x28
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	58024400 	.word	0x58024400
 800b840:	58020c00 	.word	0x58020c00

0800b844 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800b84c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b850:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	4619      	mov	r1, r3
 800b856:	480b      	ldr	r0, [pc, #44]	; (800b884 <I2C4_MspDeInit+0x40>)
 800b858:	f001 feae 	bl	800d5b8 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800b85c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b860:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	4619      	mov	r1, r3
 800b866:	4807      	ldr	r0, [pc, #28]	; (800b884 <I2C4_MspDeInit+0x40>)
 800b868:	f001 fea6 	bl	800d5b8 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <I2C4_MspDeInit+0x44>)
 800b86e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800b872:	4a05      	ldr	r2, [pc, #20]	; (800b888 <I2C4_MspDeInit+0x44>)
 800b874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b878:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
}
 800b87c:	bf00      	nop
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	58020c00 	.word	0x58020c00
 800b888:	58024400 	.word	0x58024400

0800b88c <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af04      	add	r7, sp, #16
 800b892:	607b      	str	r3, [r7, #4]
 800b894:	4603      	mov	r3, r0
 800b896:	81fb      	strh	r3, [r7, #14]
 800b898:	460b      	mov	r3, r1
 800b89a:	81bb      	strh	r3, [r7, #12]
 800b89c:	4613      	mov	r3, r2
 800b89e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b8a0:	8978      	ldrh	r0, [r7, #10]
 800b8a2:	89ba      	ldrh	r2, [r7, #12]
 800b8a4:	89f9      	ldrh	r1, [r7, #14]
 800b8a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8aa:	9302      	str	r3, [sp, #8]
 800b8ac:	8b3b      	ldrh	r3, [r7, #24]
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	4807      	ldr	r0, [pc, #28]	; (800b8d4 <I2C4_WriteReg+0x48>)
 800b8b8:	f002 f8be 	bl	800da38 <HAL_I2C_Mem_Write>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d101      	bne.n	800b8c6 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	e001      	b.n	800b8ca <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b8c6:	f06f 0307 	mvn.w	r3, #7
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	2400ad48 	.word	0x2400ad48

0800b8d8 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af04      	add	r7, sp, #16
 800b8de:	607b      	str	r3, [r7, #4]
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	81fb      	strh	r3, [r7, #14]
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	81bb      	strh	r3, [r7, #12]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800b8ec:	8978      	ldrh	r0, [r7, #10]
 800b8ee:	89ba      	ldrh	r2, [r7, #12]
 800b8f0:	89f9      	ldrh	r1, [r7, #14]
 800b8f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b8f6:	9302      	str	r3, [sp, #8]
 800b8f8:	8b3b      	ldrh	r3, [r7, #24]
 800b8fa:	9301      	str	r3, [sp, #4]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	4603      	mov	r3, r0
 800b902:	4807      	ldr	r0, [pc, #28]	; (800b920 <I2C4_ReadReg+0x48>)
 800b904:	f002 f9ac 	bl	800dc60 <HAL_I2C_Mem_Read>
 800b908:	4603      	mov	r3, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800b90e:	2300      	movs	r3, #0
 800b910:	e001      	b.n	800b916 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800b912:	f06f 0307 	mvn.w	r3, #7
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	2400ad48 	.word	0x2400ad48

0800b924 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b090      	sub	sp, #64	; 0x40
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b92e:	2300      	movs	r3, #0
 800b930:	63fb      	str	r3, [r7, #60]	; 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b938:	f06f 0301 	mvn.w	r3, #1
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93e:	e090      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800b940:	494a      	ldr	r1, [pc, #296]	; (800ba6c <BSP_QSPI_Init+0x148>)
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	4613      	mov	r3, r2
 800b946:	005b      	lsls	r3, r3, #1
 800b948:	4413      	add	r3, r2
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	440b      	add	r3, r1
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	f040 8086 	bne.w	800ba62 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800b956:	4846      	ldr	r0, [pc, #280]	; (800ba70 <BSP_QSPI_Init+0x14c>)
 800b958:	f000 f99c 	bl	800bc94 <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800b95c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d17f      	bne.n	800ba62 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800b962:	f107 031c 	add.w	r3, r7, #28
 800b966:	4618      	mov	r0, r3
 800b968:	f7fe ffea 	bl	800a940 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	785b      	ldrb	r3, [r3, #1]
 800b970:	461a      	mov	r2, r3
 800b972:	4b40      	ldr	r3, [pc, #256]	; (800ba74 <BSP_QSPI_Init+0x150>)
 800b974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b978:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800b97a:	2340      	movs	r3, #64	; 0x40
 800b97c:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800b97e:	69fb      	ldr	r3, [r7, #28]
 800b980:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b984:	fa93 f3a3 	rbit	r3, r3
 800b988:	633b      	str	r3, [r7, #48]	; 0x30
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	63bb      	str	r3, [r7, #56]	; 0x38
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	2b00      	cmp	r3, #0
 800b992:	d101      	bne.n	800b998 <BSP_QSPI_Init+0x74>
  {
    return 32U;
 800b994:	2320      	movs	r3, #32
 800b996:	e003      	b.n	800b9a0 <BSP_QSPI_Init+0x7c>
  }
  return __builtin_clz(value);
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	fab3 f383 	clz	r3, r3
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	3b01      	subs	r3, #1
 800b9a2:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d101      	bne.n	800b9b0 <BSP_QSPI_Init+0x8c>
 800b9ac:	2310      	movs	r3, #16
 800b9ae:	e000      	b.n	800b9b2 <BSP_QSPI_Init+0x8e>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800b9b4:	f107 030c 	add.w	r3, r7, #12
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	482d      	ldr	r0, [pc, #180]	; (800ba70 <BSP_QSPI_Init+0x14c>)
 800b9bc:	f000 f85c 	bl	800ba78 <MX_QSPI_Init>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800b9c6:	f06f 0303 	mvn.w	r3, #3
 800b9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9cc:	e049      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 faa8 	bl	800bf24 <QSPI_ResetMemory>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d003      	beq.n	800b9e2 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9da:	f06f 0304 	mvn.w	r3, #4
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b9e0:	e03f      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800b9e2:	4922      	ldr	r1, [pc, #136]	; (800ba6c <BSP_QSPI_Init+0x148>)
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	4613      	mov	r3, r2
 800b9e8:	005b      	lsls	r3, r3, #1
 800b9ea:	4413      	add	r3, r2
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	440b      	add	r3, r1
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	481e      	ldr	r0, [pc, #120]	; (800ba70 <BSP_QSPI_Init+0x14c>)
 800b9f8:	f7ff f811 	bl	800aa1e <MT25TL01G_AutoPollingMemReady>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d003      	beq.n	800ba0a <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba02:	f06f 0304 	mvn.w	r3, #4
 800ba06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba08:	e02b      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800ba0a:	4918      	ldr	r1, [pc, #96]	; (800ba6c <BSP_QSPI_Init+0x148>)
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	005b      	lsls	r3, r3, #1
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	440b      	add	r3, r1
 800ba18:	3301      	adds	r3, #1
 800ba1a:	781b      	ldrb	r3, [r3, #0]
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	4814      	ldr	r0, [pc, #80]	; (800ba70 <BSP_QSPI_Init+0x14c>)
 800ba20:	f7fe ffb5 	bl	800a98e <MT25TL01G_Enter4BytesAddressMode>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba2a:	f06f 0304 	mvn.w	r3, #4
 800ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba30:	e017      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fae2 	bl	800bffc <QSPI_DummyCyclesCfg>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d003      	beq.n	800ba46 <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba3e:	f06f 0304 	mvn.w	r3, #4
 800ba42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba44:	e00d      	b.n	800ba62 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	7819      	ldrb	r1, [r3, #0]
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f89d 	bl	800bb90 <BSP_QSPI_ConfigFlash>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d002      	beq.n	800ba62 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba5c:	f06f 0304 	mvn.w	r3, #4
 800ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 800ba62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3740      	adds	r7, #64	; 0x40
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	2400ad94 	.word	0x2400ad94
 800ba70:	2400027c 	.word	0x2400027c
 800ba74:	08025c20 	.word	0x08025c20

0800ba78 <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	4a13      	ldr	r2, [pc, #76]	; (800bad4 <MX_QSPI_Init+0x5c>)
 800ba86:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	689a      	ldr	r2, [r3, #8]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f44f 7240 	mov.w	r2, #768	; 0x300
 800baac:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2200      	movs	r2, #0
 800bab8:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	68da      	ldr	r2, [r3, #12]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f003 fa94 	bl	800eff0 <HAL_QSPI_Init>
 800bac8:	4603      	mov	r3, r0
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3708      	adds	r7, #8
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	52005000 	.word	0x52005000

0800bad8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d003      	beq.n	800baf2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800baea:	f06f 0301 	mvn.w	r3, #1
 800baee:	60fb      	str	r3, [r7, #12]
 800baf0:	e045      	b.n	800bb7e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800baf2:	4925      	ldr	r1, [pc, #148]	; (800bb88 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800baf4:	687a      	ldr	r2, [r7, #4]
 800baf6:	4613      	mov	r3, r2
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	009b      	lsls	r3, r3, #2
 800bafe:	440b      	add	r3, r1
 800bb00:	3302      	adds	r3, #2
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d11d      	bne.n	800bb44 <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bb08:	491f      	ldr	r1, [pc, #124]	; (800bb88 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4613      	mov	r3, r2
 800bb0e:	005b      	lsls	r3, r3, #1
 800bb10:	4413      	add	r3, r2
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	440b      	add	r3, r1
 800bb16:	3301      	adds	r3, #1
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	481b      	ldr	r0, [pc, #108]	; (800bb8c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800bb1e:	f7ff f8d3 	bl	800acc8 <MT25TL01G_EnableMemoryMappedModeSTR>
 800bb22:	4603      	mov	r3, r0
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d003      	beq.n	800bb30 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb28:	f06f 0304 	mvn.w	r3, #4
 800bb2c:	60fb      	str	r3, [r7, #12]
 800bb2e:	e026      	b.n	800bb7e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800bb30:	4915      	ldr	r1, [pc, #84]	; (800bb88 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bb32:	687a      	ldr	r2, [r7, #4]
 800bb34:	4613      	mov	r3, r2
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	4413      	add	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	440b      	add	r3, r1
 800bb3e:	2202      	movs	r2, #2
 800bb40:	701a      	strb	r2, [r3, #0]
 800bb42:	e01c      	b.n	800bb7e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bb44:	4910      	ldr	r1, [pc, #64]	; (800bb88 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bb46:	687a      	ldr	r2, [r7, #4]
 800bb48:	4613      	mov	r3, r2
 800bb4a:	005b      	lsls	r3, r3, #1
 800bb4c:	4413      	add	r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	440b      	add	r3, r1
 800bb52:	3301      	adds	r3, #1
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	4619      	mov	r1, r3
 800bb58:	480c      	ldr	r0, [pc, #48]	; (800bb8c <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 800bb5a:	f7ff f84b 	bl	800abf4 <MT25TL01G_EnableMemoryMappedModeDTR>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb64:	f06f 0304 	mvn.w	r3, #4
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	e008      	b.n	800bb7e <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800bb6c:	4906      	ldr	r1, [pc, #24]	; (800bb88 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	4613      	mov	r3, r2
 800bb72:	005b      	lsls	r3, r3, #1
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	440b      	add	r3, r1
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	2400ad94 	.word	0x2400ad94
 800bb8c:	2400027c 	.word	0x2400027c

0800bb90 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	70fb      	strb	r3, [r7, #3]
 800bb9c:	4613      	mov	r3, r2
 800bb9e:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800bba0:	2300      	movs	r3, #0
 800bba2:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bbaa:	f06f 0301 	mvn.w	r3, #1
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e067      	b.n	800bc82 <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 800bbb2:	4936      	ldr	r1, [pc, #216]	; (800bc8c <BSP_QSPI_ConfigFlash+0xfc>)
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	005b      	lsls	r3, r3, #1
 800bbba:	4413      	add	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	440b      	add	r3, r1
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d103      	bne.n	800bbce <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800bbc6:	f06f 0319 	mvn.w	r3, #25
 800bbca:	60fb      	str	r3, [r7, #12]
 800bbcc:	e059      	b.n	800bc82 <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800bbce:	78bb      	ldrb	r3, [r7, #2]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d101      	bne.n	800bbd8 <BSP_QSPI_ConfigFlash+0x48>
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	e000      	b.n	800bbda <BSP_QSPI_ConfigFlash+0x4a>
 800bbd8:	2300      	movs	r3, #0
 800bbda:	4a2d      	ldr	r2, [pc, #180]	; (800bc90 <BSP_QSPI_ConfigFlash+0x100>)
 800bbdc:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800bbde:	482c      	ldr	r0, [pc, #176]	; (800bc90 <BSP_QSPI_ConfigFlash+0x100>)
 800bbe0:	f003 fa06 	bl	800eff0 <HAL_QSPI_Init>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d003      	beq.n	800bbf2 <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800bbea:	f06f 0303 	mvn.w	r3, #3
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	e047      	b.n	800bc82 <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 800bbf2:	4926      	ldr	r1, [pc, #152]	; (800bc8c <BSP_QSPI_ConfigFlash+0xfc>)
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	005b      	lsls	r3, r3, #1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	440b      	add	r3, r1
 800bc00:	3301      	adds	r3, #1
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	2b03      	cmp	r3, #3
 800bc06:	d10c      	bne.n	800bc22 <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800bc08:	78fb      	ldrb	r3, [r7, #3]
 800bc0a:	2b03      	cmp	r3, #3
 800bc0c:	d016      	beq.n	800bc3c <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800bc0e:	4820      	ldr	r0, [pc, #128]	; (800bc90 <BSP_QSPI_ConfigFlash+0x100>)
 800bc10:	f7fe ffc6 	bl	800aba0 <MT25TL01G_ExitQPIMode>
 800bc14:	4603      	mov	r3, r0
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d010      	beq.n	800bc3c <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc1a:	f06f 0304 	mvn.w	r3, #4
 800bc1e:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bc20:	e00c      	b.n	800bc3c <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 800bc22:	78fb      	ldrb	r3, [r7, #3]
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	d10b      	bne.n	800bc40 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800bc28:	4819      	ldr	r0, [pc, #100]	; (800bc90 <BSP_QSPI_ConfigFlash+0x100>)
 800bc2a:	f7fe ff8f 	bl	800ab4c <MT25TL01G_EnterQPIMode>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc34:	f06f 0304 	mvn.w	r3, #4
 800bc38:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 800bc3a:	e001      	b.n	800bc40 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 800bc3c:	bf00      	nop
 800bc3e:	e000      	b.n	800bc42 <BSP_QSPI_ConfigFlash+0xb2>
          break;
 800bc40:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d11c      	bne.n	800bc82 <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800bc48:	4910      	ldr	r1, [pc, #64]	; (800bc8c <BSP_QSPI_ConfigFlash+0xfc>)
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	4613      	mov	r3, r2
 800bc4e:	005b      	lsls	r3, r3, #1
 800bc50:	4413      	add	r3, r2
 800bc52:	009b      	lsls	r3, r3, #2
 800bc54:	440b      	add	r3, r1
 800bc56:	2201      	movs	r2, #1
 800bc58:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 800bc5a:	490c      	ldr	r1, [pc, #48]	; (800bc8c <BSP_QSPI_ConfigFlash+0xfc>)
 800bc5c:	687a      	ldr	r2, [r7, #4]
 800bc5e:	4613      	mov	r3, r2
 800bc60:	005b      	lsls	r3, r3, #1
 800bc62:	4413      	add	r3, r2
 800bc64:	009b      	lsls	r3, r3, #2
 800bc66:	440b      	add	r3, r1
 800bc68:	3301      	adds	r3, #1
 800bc6a:	78fa      	ldrb	r2, [r7, #3]
 800bc6c:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 800bc6e:	4907      	ldr	r1, [pc, #28]	; (800bc8c <BSP_QSPI_ConfigFlash+0xfc>)
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	4613      	mov	r3, r2
 800bc74:	005b      	lsls	r3, r3, #1
 800bc76:	4413      	add	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	440b      	add	r3, r1
 800bc7c:	3302      	adds	r3, #2
 800bc7e:	78ba      	ldrb	r2, [r7, #2]
 800bc80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800bc82:	68fb      	ldr	r3, [r7, #12]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3710      	adds	r7, #16
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	2400ad94 	.word	0x2400ad94
 800bc90:	2400027c 	.word	0x2400027c

0800bc94 <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b094      	sub	sp, #80	; 0x50
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hQspi);

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 800bc9c:	4b9c      	ldr	r3, [pc, #624]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bc9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bca2:	4a9b      	ldr	r2, [pc, #620]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bca8:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800bcac:	4b98      	ldr	r3, [pc, #608]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bcb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 800bcba:	4b95      	ldr	r3, [pc, #596]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcbe:	4a94      	ldr	r2, [pc, #592]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bcc4:	67d3      	str	r3, [r2, #124]	; 0x7c
  QSPI_RELEASE_RESET();
 800bcc6:	4b92      	ldr	r3, [pc, #584]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcca:	4a91      	ldr	r2, [pc, #580]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bccc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bcd0:	67d3      	str	r3, [r2, #124]	; 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 800bcd2:	4b8f      	ldr	r3, [pc, #572]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcd8:	4a8d      	ldr	r2, [pc, #564]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcda:	f043 0320 	orr.w	r3, r3, #32
 800bcde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bce2:	4b8b      	ldr	r3, [pc, #556]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bce8:	f003 0320 	and.w	r3, r3, #32
 800bcec:	637b      	str	r3, [r7, #52]	; 0x34
 800bcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800bcf0:	4b87      	ldr	r3, [pc, #540]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bcf6:	4a86      	ldr	r2, [pc, #536]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bcf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd00:	4b83      	ldr	r3, [pc, #524]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd0a:	633b      	str	r3, [r7, #48]	; 0x30
 800bd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 800bd0e:	4b80      	ldr	r3, [pc, #512]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd14:	4a7e      	ldr	r2, [pc, #504]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd16:	f043 0308 	orr.w	r3, r3, #8
 800bd1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd1e:	4b7c      	ldr	r3, [pc, #496]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd24:	f003 0308 	and.w	r3, r3, #8
 800bd28:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800bd2c:	4b78      	ldr	r3, [pc, #480]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd32:	4a77      	ldr	r2, [pc, #476]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd34:	f043 0320 	orr.w	r3, r3, #32
 800bd38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd3c:	4b74      	ldr	r3, [pc, #464]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd42:	f003 0320 	and.w	r3, r3, #32
 800bd46:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 800bd4a:	4b71      	ldr	r3, [pc, #452]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd50:	4a6f      	ldr	r2, [pc, #444]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd52:	f043 0320 	orr.w	r3, r3, #32
 800bd56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd5a:	4b6d      	ldr	r3, [pc, #436]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd60:	f003 0320 	and.w	r3, r3, #32
 800bd64:	627b      	str	r3, [r7, #36]	; 0x24
 800bd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 800bd68:	4b69      	ldr	r3, [pc, #420]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd6e:	4a68      	ldr	r2, [pc, #416]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd70:	f043 0320 	orr.w	r3, r3, #32
 800bd74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd78:	4b65      	ldr	r3, [pc, #404]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd7e:	f003 0320 	and.w	r3, r3, #32
 800bd82:	623b      	str	r3, [r7, #32]
 800bd84:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 800bd86:	4b62      	ldr	r3, [pc, #392]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd8c:	4a60      	ldr	r2, [pc, #384]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bd96:	4b5e      	ldr	r3, [pc, #376]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bd98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bd9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bda0:	61fb      	str	r3, [r7, #28]
 800bda2:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 800bda4:	4b5a      	ldr	r3, [pc, #360]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bda6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdaa:	4a59      	ldr	r2, [pc, #356]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bdb4:	4b56      	ldr	r3, [pc, #344]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdbe:	61bb      	str	r3, [r7, #24]
 800bdc0:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 800bdc2:	4b53      	ldr	r3, [pc, #332]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdc8:	4a51      	ldr	r2, [pc, #324]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bdd2:	4b4f      	ldr	r3, [pc, #316]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bddc:	617b      	str	r3, [r7, #20]
 800bdde:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800bde0:	4b4b      	ldr	r3, [pc, #300]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bde2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bde6:	4a4a      	ldr	r2, [pc, #296]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bde8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bdf0:	4b47      	ldr	r3, [pc, #284]	; (800bf10 <QSPI_MspInit+0x27c>)
 800bdf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800bdf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdfa:	613b      	str	r3, [r7, #16]
 800bdfc:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 800bdfe:	4b44      	ldr	r3, [pc, #272]	; (800bf10 <QSPI_MspInit+0x27c>)
 800be00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be04:	4a42      	ldr	r2, [pc, #264]	; (800bf10 <QSPI_MspInit+0x27c>)
 800be06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800be0e:	4b40      	ldr	r3, [pc, #256]	; (800bf10 <QSPI_MspInit+0x27c>)
 800be10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800be14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 800be1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800be20:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800be22:	2302      	movs	r3, #2
 800be24:	643b      	str	r3, [r7, #64]	; 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800be26:	2303      	movs	r3, #3
 800be28:	64bb      	str	r3, [r7, #72]	; 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be2e:	2309      	movs	r3, #9
 800be30:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800be32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be36:	4619      	mov	r1, r3
 800be38:	4836      	ldr	r0, [pc, #216]	; (800bf14 <QSPI_MspInit+0x280>)
 800be3a:	f001 fa0d 	bl	800d258 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800be3e:	2340      	movs	r3, #64	; 0x40
 800be40:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800be42:	2301      	movs	r3, #1
 800be44:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800be46:	230a      	movs	r3, #10
 800be48:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800be4a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be4e:	4619      	mov	r1, r3
 800be50:	4831      	ldr	r0, [pc, #196]	; (800bf18 <QSPI_MspInit+0x284>)
 800be52:	f001 fa01 	bl	800d258 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800be56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800be5c:	2300      	movs	r3, #0
 800be5e:	647b      	str	r3, [r7, #68]	; 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be60:	2309      	movs	r3, #9
 800be62:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 800be64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be68:	4619      	mov	r1, r3
 800be6a:	482c      	ldr	r0, [pc, #176]	; (800bf1c <QSPI_MspInit+0x288>)
 800be6c:	f001 f9f4 	bl	800d258 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 800be70:	2304      	movs	r3, #4
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be74:	2309      	movs	r3, #9
 800be76:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800be78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be7c:	4619      	mov	r1, r3
 800be7e:	4828      	ldr	r0, [pc, #160]	; (800bf20 <QSPI_MspInit+0x28c>)
 800be80:	f001 f9ea 	bl	800d258 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800be84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be88:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800be8a:	230a      	movs	r3, #10
 800be8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 800be8e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800be92:	4619      	mov	r1, r3
 800be94:	481f      	ldr	r0, [pc, #124]	; (800bf14 <QSPI_MspInit+0x280>)
 800be96:	f001 f9df 	bl	800d258 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 800be9a:	2308      	movs	r3, #8
 800be9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800be9e:	2309      	movs	r3, #9
 800bea0:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 800bea2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bea6:	4619      	mov	r1, r3
 800bea8:	481d      	ldr	r0, [pc, #116]	; (800bf20 <QSPI_MspInit+0x28c>)
 800beaa:	f001 f9d5 	bl	800d258 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 800beae:	2380      	movs	r3, #128	; 0x80
 800beb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800beb2:	2309      	movs	r3, #9
 800beb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 800beb6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800beba:	4619      	mov	r1, r3
 800bebc:	4815      	ldr	r0, [pc, #84]	; (800bf14 <QSPI_MspInit+0x280>)
 800bebe:	f001 f9cb 	bl	800d258 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 800bec2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 800bec8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800becc:	4619      	mov	r1, r3
 800bece:	4812      	ldr	r0, [pc, #72]	; (800bf18 <QSPI_MspInit+0x284>)
 800bed0:	f001 f9c2 	bl	800d258 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 800bed4:	2340      	movs	r3, #64	; 0x40
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 800bed8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800bedc:	4619      	mov	r1, r3
 800bede:	480d      	ldr	r0, [pc, #52]	; (800bf14 <QSPI_MspInit+0x280>)
 800bee0:	f001 f9ba 	bl	800d258 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 800bee4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 800beea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800beee:	4619      	mov	r1, r3
 800bef0:	4809      	ldr	r0, [pc, #36]	; (800bf18 <QSPI_MspInit+0x284>)
 800bef2:	f001 f9b1 	bl	800d258 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 800bef6:	2200      	movs	r2, #0
 800bef8:	210f      	movs	r1, #15
 800befa:	205c      	movs	r0, #92	; 0x5c
 800befc:	f000 fe9c 	bl	800cc38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 800bf00:	205c      	movs	r0, #92	; 0x5c
 800bf02:	f000 feb3 	bl	800cc6c <HAL_NVIC_EnableIRQ>
}
 800bf06:	bf00      	nop
 800bf08:	3750      	adds	r7, #80	; 0x50
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}
 800bf0e:	bf00      	nop
 800bf10:	58024400 	.word	0x58024400
 800bf14:	58021400 	.word	0x58021400
 800bf18:	58021800 	.word	0x58021800
 800bf1c:	58020c00 	.word	0x58020c00
 800bf20:	58021c00 	.word	0x58021c00

0800bf24 <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bf30:	2103      	movs	r1, #3
 800bf32:	4830      	ldr	r0, [pc, #192]	; (800bff4 <QSPI_ResetMemory+0xd0>)
 800bf34:	f7fe ff30 	bl	800ad98 <MT25TL01G_ResetEnable>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 800bf3e:	f06f 0304 	mvn.w	r3, #4
 800bf42:	60fb      	str	r3, [r7, #12]
 800bf44:	e051      	b.n	800bfea <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 800bf46:	2103      	movs	r1, #3
 800bf48:	482a      	ldr	r0, [pc, #168]	; (800bff4 <QSPI_ResetMemory+0xd0>)
 800bf4a:	f7fe ff57 	bl	800adfc <MT25TL01G_ResetMemory>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d003      	beq.n	800bf5c <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf54:	f06f 0304 	mvn.w	r3, #4
 800bf58:	60fb      	str	r3, [r7, #12]
 800bf5a:	e046      	b.n	800bfea <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800bf5c:	4926      	ldr	r1, [pc, #152]	; (800bff8 <QSPI_ResetMemory+0xd4>)
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	4613      	mov	r3, r2
 800bf62:	005b      	lsls	r3, r3, #1
 800bf64:	4413      	add	r3, r2
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4820      	ldr	r0, [pc, #128]	; (800bff4 <QSPI_ResetMemory+0xd0>)
 800bf72:	f7fe fd54 	bl	800aa1e <MT25TL01G_AutoPollingMemReady>
 800bf76:	4603      	mov	r3, r0
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d003      	beq.n	800bf84 <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf7c:	f06f 0304 	mvn.w	r3, #4
 800bf80:	60fb      	str	r3, [r7, #12]
 800bf82:	e032      	b.n	800bfea <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf84:	2100      	movs	r1, #0
 800bf86:	481b      	ldr	r0, [pc, #108]	; (800bff4 <QSPI_ResetMemory+0xd0>)
 800bf88:	f7fe ff06 	bl	800ad98 <MT25TL01G_ResetEnable>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bf92:	f06f 0304 	mvn.w	r3, #4
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e027      	b.n	800bfea <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4815      	ldr	r0, [pc, #84]	; (800bff4 <QSPI_ResetMemory+0xd0>)
 800bf9e:	f7fe ff2d 	bl	800adfc <MT25TL01G_ResetMemory>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d003      	beq.n	800bfb0 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800bfa8:	f06f 0304 	mvn.w	r3, #4
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e01c      	b.n	800bfea <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 800bfb0:	4911      	ldr	r1, [pc, #68]	; (800bff8 <QSPI_ResetMemory+0xd4>)
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	005b      	lsls	r3, r3, #1
 800bfb8:	4413      	add	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	440b      	add	r3, r1
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 800bfc2:	490d      	ldr	r1, [pc, #52]	; (800bff8 <QSPI_ResetMemory+0xd4>)
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 800bfd6:	4908      	ldr	r1, [pc, #32]	; (800bff8 <QSPI_ResetMemory+0xd4>)
 800bfd8:	687a      	ldr	r2, [r7, #4]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4413      	add	r3, r2
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	440b      	add	r3, r1
 800bfe4:	3302      	adds	r3, #2
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	701a      	strb	r2, [r3, #0]

  }

  /* Return BSP status */
  return ret;
 800bfea:	68fb      	ldr	r3, [r7, #12]
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3710      	adds	r7, #16
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}
 800bff4:	2400027c 	.word	0x2400027c
 800bff8:	2400ad94 	.word	0x2400ad94

0800bffc <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b092      	sub	sp, #72	; 0x48
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 800c004:	2300      	movs	r3, #0
 800c006:	647b      	str	r3, [r7, #68]	; 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 800c008:	2300      	movs	r3, #0
 800c00a:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800c00c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c010:	627b      	str	r3, [r7, #36]	; 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800c012:	2385      	movs	r3, #133	; 0x85
 800c014:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800c016:	2300      	movs	r3, #0
 800c018:	62bb      	str	r3, [r7, #40]	; 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800c01a:	2300      	movs	r3, #0
 800c01c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 800c01e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800c022:	633b      	str	r3, [r7, #48]	; 0x30
  s_command.DummyCycles       = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 800c028:	2302      	movs	r3, #2
 800c02a:	637b      	str	r3, [r7, #52]	; 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800c02c:	2300      	movs	r3, #0
 800c02e:	63bb      	str	r3, [r7, #56]	; 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800c034:	2300      	movs	r3, #0
 800c036:	643b      	str	r3, [r7, #64]	; 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c040:	4619      	mov	r1, r3
 800c042:	482b      	ldr	r0, [pc, #172]	; (800c0f0 <QSPI_DummyCyclesCfg+0xf4>)
 800c044:	f003 fa02 	bl	800f44c <HAL_QSPI_Command>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d002      	beq.n	800c054 <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c04e:	f06f 0304 	mvn.w	r3, #4
 800c052:	e048      	b.n	800c0e6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c054:	f107 030a 	add.w	r3, r7, #10
 800c058:	f241 3288 	movw	r2, #5000	; 0x1388
 800c05c:	4619      	mov	r1, r3
 800c05e:	4824      	ldr	r0, [pc, #144]	; (800c0f0 <QSPI_DummyCyclesCfg+0xf4>)
 800c060:	f003 fae4 	bl	800f62c <HAL_QSPI_Receive>
 800c064:	4603      	mov	r3, r0
 800c066:	2b00      	cmp	r3, #0
 800c068:	d002      	beq.n	800c070 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c06a:	f06f 0304 	mvn.w	r3, #4
 800c06e:	e03a      	b.n	800c0e6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800c070:	4920      	ldr	r1, [pc, #128]	; (800c0f4 <QSPI_DummyCyclesCfg+0xf8>)
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	4613      	mov	r3, r2
 800c076:	005b      	lsls	r3, r3, #1
 800c078:	4413      	add	r3, r2
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	440b      	add	r3, r1
 800c07e:	3301      	adds	r3, #1
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	4619      	mov	r1, r3
 800c084:	481a      	ldr	r0, [pc, #104]	; (800c0f0 <QSPI_DummyCyclesCfg+0xf4>)
 800c086:	f7fe fd06 	bl	800aa96 <MT25TL01G_WriteEnable>
 800c08a:	4603      	mov	r3, r0
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d002      	beq.n	800c096 <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c090:	f06f 0304 	mvn.w	r3, #4
 800c094:	e027      	b.n	800c0e6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800c096:	2381      	movs	r3, #129	; 0x81
 800c098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800c09a:	897a      	ldrh	r2, [r7, #10]
 800c09c:	f640 730f 	movw	r3, #3855	; 0xf0f
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	4b14      	ldr	r3, [pc, #80]	; (800c0f8 <QSPI_DummyCyclesCfg+0xfc>)
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	480e      	ldr	r0, [pc, #56]	; (800c0f0 <QSPI_DummyCyclesCfg+0xf4>)
 800c0b8:	f003 f9c8 	bl	800f44c <HAL_QSPI_Command>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c0c2:	f06f 0304 	mvn.w	r3, #4
 800c0c6:	e00e      	b.n	800c0e6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800c0c8:	f107 030a 	add.w	r3, r7, #10
 800c0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	4807      	ldr	r0, [pc, #28]	; (800c0f0 <QSPI_DummyCyclesCfg+0xf4>)
 800c0d4:	f003 fa18 	bl	800f508 <HAL_QSPI_Transmit>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d002      	beq.n	800c0e4 <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 800c0de:	f06f 0304 	mvn.w	r3, #4
 800c0e2:	e000      	b.n	800c0e6 <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 800c0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3748      	adds	r7, #72	; 0x48
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	2400027c 	.word	0x2400027c
 800c0f4:	2400ad94 	.word	0x2400ad94
 800c0f8:	ffff8080 	.word	0xffff8080

0800c0fc <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c104:	2300      	movs	r3, #0
 800c106:	60fb      	str	r3, [r7, #12]
  static MT48LC4M32B2_Context_t pRegMode;
  if(Instance >=SDRAM_INSTANCES_NBR)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <BSP_SDRAM_Init+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c10e:	f06f 0301 	mvn.w	r3, #1
 800c112:	60fb      	str	r3, [r7, #12]
 800c114:	e044      	b.n	800c1a0 <BSP_SDRAM_Init+0xa4>
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    /* Msp SDRAM initialization */
    SDRAM_MspInit(&hsdram[Instance]);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2234      	movs	r2, #52	; 0x34
 800c11a:	fb02 f303 	mul.w	r3, r2, r3
 800c11e:	4a23      	ldr	r2, [pc, #140]	; (800c1ac <BSP_SDRAM_Init+0xb0>)
 800c120:	4413      	add	r3, r2
 800c122:	4618      	mov	r0, r3
 800c124:	f000 f8b8 	bl	800c298 <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2234      	movs	r2, #52	; 0x34
 800c12c:	fb02 f303 	mul.w	r3, r2, r3
 800c130:	4a1e      	ldr	r2, [pc, #120]	; (800c1ac <BSP_SDRAM_Init+0xb0>)
 800c132:	4413      	add	r3, r2
 800c134:	2210      	movs	r2, #16
 800c136:	2104      	movs	r1, #4
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 f861 	bl	800c200 <MX_SDRAM_BANK2_Init>
 800c13e:	4603      	mov	r3, r0
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <BSP_SDRAM_Init+0x50>
    {
      ret = BSP_ERROR_NO_INIT;
 800c144:	f04f 33ff 	mov.w	r3, #4294967295
 800c148:	60fb      	str	r3, [r7, #12]
 800c14a:	e029      	b.n	800c1a0 <BSP_SDRAM_Init+0xa4>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800c14c:	4b18      	ldr	r3, [pc, #96]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c14e:	2208      	movs	r2, #8
 800c150:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = MT48LC4M32B2_AUTOREFRESH_MODE_CMD;
 800c152:	4b17      	ldr	r3, [pc, #92]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c154:	2203      	movs	r2, #3
 800c156:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 800c158:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c15a:	f240 6203 	movw	r2, #1539	; 0x603
 800c15e:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = MT48LC4M32B2_BURST_LENGTH_1;
 800c160:	4b13      	ldr	r3, [pc, #76]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c162:	2200      	movs	r2, #0
 800c164:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = MT48LC4M32B2_BURST_TYPE_SEQUENTIAL;
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c168:	2200      	movs	r2, #0
 800c16a:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = MT48LC4M32B2_CAS_LATENCY_3;
 800c16c:	4b10      	ldr	r3, [pc, #64]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c16e:	2230      	movs	r2, #48	; 0x30
 800c170:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = MT48LC4M32B2_OPERATING_MODE_STANDARD;
 800c172:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c174:	2200      	movs	r2, #0
 800c176:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = MT48LC4M32B2_WRITEBURST_MODE_SINGLE;
 800c178:	4b0d      	ldr	r3, [pc, #52]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c17a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c17e:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2234      	movs	r2, #52	; 0x34
 800c184:	fb02 f303 	mul.w	r3, r2, r3
 800c188:	4a08      	ldr	r2, [pc, #32]	; (800c1ac <BSP_SDRAM_Init+0xb0>)
 800c18a:	4413      	add	r3, r2
 800c18c:	4908      	ldr	r1, [pc, #32]	; (800c1b0 <BSP_SDRAM_Init+0xb4>)
 800c18e:	4618      	mov	r0, r3
 800c190:	f7fe fe66 	bl	800ae60 <MT48LC4M32B2_Init>
 800c194:	4603      	mov	r3, r0
 800c196:	2b00      	cmp	r3, #0
 800c198:	d002      	beq.n	800c1a0 <BSP_SDRAM_Init+0xa4>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 800c19a:	f06f 0304 	mvn.w	r3, #4
 800c19e:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	2400ada0 	.word	0x2400ada0
 800c1b0:	2400add4 	.word	0x2400add4

0800c1b4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param  Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	60fb      	str	r3, [r7, #12]

  if(Instance >= SDRAM_INSTANCES_NBR)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 800c1c6:	f06f 0301 	mvn.w	r3, #1
 800c1ca:	60fb      	str	r3, [r7, #12]
 800c1cc:	e011      	b.n	800c1f2 <BSP_SDRAM_DeInit+0x3e>
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2234      	movs	r2, #52	; 0x34
 800c1d2:	fb02 f303 	mul.w	r3, r2, r3
 800c1d6:	4a09      	ldr	r2, [pc, #36]	; (800c1fc <BSP_SDRAM_DeInit+0x48>)
 800c1d8:	4413      	add	r3, r2
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f005 ff62 	bl	80120a4 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2234      	movs	r2, #52	; 0x34
 800c1e4:	fb02 f303 	mul.w	r3, r2, r3
 800c1e8:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <BSP_SDRAM_DeInit+0x48>)
 800c1ea:	4413      	add	r3, r2
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f000 f951 	bl	800c494 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */
  }

  return ret;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	2400ada0 	.word	0x2400ada0

0800c200 <MX_SDRAM_BANK2_Init>:
  * @param  RowBitsNumber Number of row to set
  * @param  MemoryDataWidth The momory width 16 or 32bits
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDRAM_BANK2_Init(SDRAM_HandleTypeDef *hSdram, uint32_t RowBitsNumber, uint32_t MemoryDataWidth)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b08c      	sub	sp, #48	; 0x30
 800c204:	af00      	add	r7, sp, #0
 800c206:	60f8      	str	r0, [r7, #12]
 800c208:	60b9      	str	r1, [r7, #8]
 800c20a:	607a      	str	r2, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hsdram->Instance = FMC_SDRAM_DEVICE;
 800c20c:	4b20      	ldr	r3, [pc, #128]	; (800c290 <MX_SDRAM_BANK2_Init+0x90>)
 800c20e:	4a21      	ldr	r2, [pc, #132]	; (800c294 <MX_SDRAM_BANK2_Init+0x94>)
 800c210:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2201      	movs	r2, #1
 800c216:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	611a      	str	r2, [r3, #16]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800c22a:	4b19      	ldr	r3, [pc, #100]	; (800c290 <MX_SDRAM_BANK2_Init+0x90>)
 800c22c:	2240      	movs	r2, #64	; 0x40
 800c22e:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800c236:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2200      	movs	r2, #0
 800c23c:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c244:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c24c:	625a      	str	r2, [r3, #36]	; 0x24
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	629a      	str	r2, [r3, #40]	; 0x28

  /* Timing configuration for as SDRAM */
  sdram_timing.LoadToActiveDelay    = 2;
 800c254:	2302      	movs	r3, #2
 800c256:	617b      	str	r3, [r7, #20]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800c258:	2307      	movs	r3, #7
 800c25a:	61bb      	str	r3, [r7, #24]
  sdram_timing.SelfRefreshTime      = 4;
 800c25c:	2304      	movs	r3, #4
 800c25e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RowCycleDelay        = 7;
 800c260:	2307      	movs	r3, #7
 800c262:	623b      	str	r3, [r7, #32]
  sdram_timing.WriteRecoveryTime    = 2;
 800c264:	2302      	movs	r3, #2
 800c266:	627b      	str	r3, [r7, #36]	; 0x24
  sdram_timing.RPDelay              = 2;
 800c268:	2302      	movs	r3, #2
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
  sdram_timing.RCDDelay             = 2;
 800c26c:	2302      	movs	r3, #2
 800c26e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 800c270:	f107 0314 	add.w	r3, r7, #20
 800c274:	4619      	mov	r1, r3
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f005 fed8 	bl	801202c <HAL_SDRAM_Init>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d001      	beq.n	800c286 <MX_SDRAM_BANK2_Init+0x86>
  {
    return  HAL_ERROR;
 800c282:	2301      	movs	r3, #1
 800c284:	e000      	b.n	800c288 <MX_SDRAM_BANK2_Init+0x88>
  }
  return HAL_OK;
 800c286:	2300      	movs	r3, #0
}
 800c288:	4618      	mov	r0, r3
 800c28a:	3730      	adds	r7, #48	; 0x30
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}
 800c290:	2400ada0 	.word	0x2400ada0
 800c294:	52004140 	.word	0x52004140

0800c298 <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b08e      	sub	sp, #56	; 0x38
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800c2a0:	4b73      	ldr	r3, [pc, #460]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c2a6:	4a72      	ldr	r2, [pc, #456]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c2ac:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c2b0:	4b6f      	ldr	r3, [pc, #444]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c2b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c2ba:	623b      	str	r3, [r7, #32]
 800c2bc:	6a3b      	ldr	r3, [r7, #32]

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 800c2be:	4b6c      	ldr	r3, [pc, #432]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c2c4:	4a6a      	ldr	r2, [pc, #424]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2c6:	f043 0301 	orr.w	r3, r3, #1
 800c2ca:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800c2ce:	4b68      	ldr	r3, [pc, #416]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2d0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800c2dc:	4b64      	ldr	r3, [pc, #400]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2e2:	4a63      	ldr	r2, [pc, #396]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2e4:	f043 0308 	orr.w	r3, r3, #8
 800c2e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c2ec:	4b60      	ldr	r3, [pc, #384]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c2f2:	f003 0308 	and.w	r3, r3, #8
 800c2f6:	61bb      	str	r3, [r7, #24]
 800c2f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800c2fa:	4b5d      	ldr	r3, [pc, #372]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c2fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c300:	4a5b      	ldr	r2, [pc, #364]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c302:	f043 0310 	orr.w	r3, r3, #16
 800c306:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c30a:	4b59      	ldr	r3, [pc, #356]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c30c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c310:	f003 0310 	and.w	r3, r3, #16
 800c314:	617b      	str	r3, [r7, #20]
 800c316:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800c318:	4b55      	ldr	r3, [pc, #340]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c31a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c31e:	4a54      	ldr	r2, [pc, #336]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c320:	f043 0320 	orr.w	r3, r3, #32
 800c324:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c328:	4b51      	ldr	r3, [pc, #324]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c32a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c32e:	f003 0320 	and.w	r3, r3, #32
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800c336:	4b4e      	ldr	r3, [pc, #312]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c33c:	4a4c      	ldr	r2, [pc, #304]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c33e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c342:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c346:	4b4a      	ldr	r3, [pc, #296]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c348:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800c354:	4b46      	ldr	r3, [pc, #280]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c35a:	4a45      	ldr	r2, [pc, #276]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c35c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c360:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800c364:	4b42      	ldr	r3, [pc, #264]	; (800c470 <SDRAM_MspInit+0x1d8>)
 800c366:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800c36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c36e:	60bb      	str	r3, [r7, #8]
 800c370:	68bb      	ldr	r3, [r7, #8]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800c372:	2302      	movs	r3, #2
 800c374:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800c376:	2301      	movs	r3, #1
 800c378:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800c37a:	2303      	movs	r3, #3
 800c37c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800c37e:	230c      	movs	r3, #12
 800c380:	637b      	str	r3, [r7, #52]	; 0x34

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800c382:	f24c 7303 	movw	r3, #50947	; 0xc703
 800c386:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_14 | GPIO_PIN_15;


  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800c388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c38c:	4619      	mov	r1, r3
 800c38e:	4839      	ldr	r0, [pc, #228]	; (800c474 <SDRAM_MspInit+0x1dc>)
 800c390:	f000 ff62 	bl	800d258 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800c394:	f64f 7383 	movw	r3, #65411	; 0xff83
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800c39a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c39e:	4619      	mov	r1, r3
 800c3a0:	4835      	ldr	r0, [pc, #212]	; (800c478 <SDRAM_MspInit+0x1e0>)
 800c3a2:	f000 ff59 	bl	800d258 <HAL_GPIO_Init>

  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800c3a6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800c3aa:	627b      	str	r3, [r7, #36]	; 0x24
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800c3ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4832      	ldr	r0, [pc, #200]	; (800c47c <SDRAM_MspInit+0x1e4>)
 800c3b4:	f000 ff50 	bl	800d258 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
 800c3b8:	f248 1333 	movw	r3, #33075	; 0x8133
 800c3bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800c3be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	482e      	ldr	r0, [pc, #184]	; (800c480 <SDRAM_MspInit+0x1e8>)
 800c3c6:	f000 ff47 	bl	800d258 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
 800c3ca:	23e0      	movs	r3, #224	; 0xe0
 800c3cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800c3ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	482b      	ldr	r0, [pc, #172]	; (800c484 <SDRAM_MspInit+0x1ec>)
 800c3d6:	f000 ff3f 	bl	800d258 <HAL_GPIO_Init>



  /* Configure common MDMA parameters */
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
 800c3da:	4b2b      	ldr	r3, [pc, #172]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c3dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c3e0:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
 800c3e2:	4b29      	ldr	r3, [pc, #164]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c3e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3e8:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
 800c3ea:	4b27      	ldr	r3, [pc, #156]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c3ec:	2280      	movs	r2, #128	; 0x80
 800c3ee:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800c3f0:	4b25      	ldr	r3, [pc, #148]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
 800c3f6:	4b24      	ldr	r3, [pc, #144]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c3f8:	f240 2202 	movw	r2, #514	; 0x202
 800c3fc:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
 800c3fe:	4b22      	ldr	r3, [pc, #136]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c400:	f640 0208 	movw	r2, #2056	; 0x808
 800c404:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800c406:	4b20      	ldr	r3, [pc, #128]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c408:	2220      	movs	r2, #32
 800c40a:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 800c40c:	4b1e      	ldr	r3, [pc, #120]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c40e:	2280      	movs	r2, #128	; 0x80
 800c410:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 800c412:	4b1d      	ldr	r3, [pc, #116]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c418:	625a      	str	r2, [r3, #36]	; 0x24
  mdma_handle.Init.SourceBurst = MDMA_SOURCE_BURST_SINGLE;
 800c41a:	4b1b      	ldr	r3, [pc, #108]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c41c:	2200      	movs	r2, #0
 800c41e:	62da      	str	r2, [r3, #44]	; 0x2c
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
 800c420:	4b19      	ldr	r3, [pc, #100]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c422:	2200      	movs	r2, #0
 800c424:	631a      	str	r2, [r3, #48]	; 0x30
  mdma_handle.Init.BufferTransferLength = 128;
 800c426:	4b18      	ldr	r3, [pc, #96]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c428:	2280      	movs	r2, #128	; 0x80
 800c42a:	629a      	str	r2, [r3, #40]	; 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 800c42c:	4b16      	ldr	r3, [pc, #88]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c42e:	2200      	movs	r2, #0
 800c430:	635a      	str	r2, [r3, #52]	; 0x34
  mdma_handle.Init.DestBlockAddressOffset = 0;
 800c432:	4b15      	ldr	r3, [pc, #84]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c434:	2200      	movs	r2, #0
 800c436:	639a      	str	r2, [r3, #56]	; 0x38


  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c438:	4b13      	ldr	r3, [pc, #76]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c43a:	4a14      	ldr	r2, [pc, #80]	; (800c48c <SDRAM_MspInit+0x1f4>)
 800c43c:	601a      	str	r2, [r3, #0]

   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800c43e:	4b14      	ldr	r3, [pc, #80]	; (800c490 <SDRAM_MspInit+0x1f8>)
 800c440:	4a11      	ldr	r2, [pc, #68]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c442:	631a      	str	r2, [r3, #48]	; 0x30
 800c444:	4b10      	ldr	r3, [pc, #64]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c446:	4a12      	ldr	r2, [pc, #72]	; (800c490 <SDRAM_MspInit+0x1f8>)
 800c448:	641a      	str	r2, [r3, #64]	; 0x40

  /* Deinitialize the stream for new transfer */
  HAL_MDMA_DeInit(&mdma_handle);
 800c44a:	480f      	ldr	r0, [pc, #60]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c44c:	f002 fc5e 	bl	800ed0c <HAL_MDMA_DeInit>

  /* Configure the DMA stream */
  HAL_MDMA_Init(&mdma_handle);
 800c450:	480d      	ldr	r0, [pc, #52]	; (800c488 <SDRAM_MspInit+0x1f0>)
 800c452:	f002 fc0f 	bl	800ec74 <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
 800c456:	2200      	movs	r2, #0
 800c458:	210f      	movs	r1, #15
 800c45a:	207a      	movs	r0, #122	; 0x7a
 800c45c:	f000 fbec 	bl	800cc38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 800c460:	207a      	movs	r0, #122	; 0x7a
 800c462:	f000 fc03 	bl	800cc6c <HAL_NVIC_EnableIRQ>
}
 800c466:	bf00      	nop
 800c468:	3738      	adds	r7, #56	; 0x38
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	58024400 	.word	0x58024400
 800c474:	58020c00 	.word	0x58020c00
 800c478:	58021000 	.word	0x58021000
 800c47c:	58021400 	.word	0x58021400
 800c480:	58021800 	.word	0x58021800
 800c484:	58021c00 	.word	0x58021c00
 800c488:	2400adf4 	.word	0x2400adf4
 800c48c:	52000040 	.word	0x52000040
 800c490:	2400ada0 	.word	0x2400ada0

0800c494 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hSdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hSdram)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b082      	sub	sp, #8
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800c49c:	207a      	movs	r0, #122	; 0x7a
 800c49e:	f000 fbf3 	bl	800cc88 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 800c4a2:	4b05      	ldr	r3, [pc, #20]	; (800c4b8 <SDRAM_MspDeInit+0x24>)
 800c4a4:	4a05      	ldr	r2, [pc, #20]	; (800c4bc <SDRAM_MspDeInit+0x28>)
 800c4a6:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800c4a8:	4803      	ldr	r0, [pc, #12]	; (800c4b8 <SDRAM_MspDeInit+0x24>)
 800c4aa:	f002 fc2f 	bl	800ed0c <HAL_MDMA_DeInit>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
 800c4b6:	bf00      	nop
 800c4b8:	2400ae60 	.word	0x2400ae60
 800c4bc:	52000040 	.word	0x52000040

0800c4c0 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b088      	sub	sp, #32
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	6078      	str	r0, [r7, #4]
 800c4c8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d11c      	bne.n	800c50e <BSP_TS_Init+0x4e>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d018      	beq.n	800c50e <BSP_TS_Init+0x4e>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800c4e4:	d813      	bhi.n	800c50e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00f      	beq.n	800c50e <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800c4f6:	d80a      	bhi.n	800c50e <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	68da      	ldr	r2, [r3, #12]
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	6819      	ldr	r1, [r3, #0]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	685b      	ldr	r3, [r3, #4]
 800c504:	428b      	cmp	r3, r1
 800c506:	bf28      	it	cs
 800c508:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d903      	bls.n	800c516 <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c50e:	f06f 0301 	mvn.w	r3, #1
 800c512:	61fb      	str	r3, [r7, #28]
 800c514:	e085      	b.n	800c622 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT5336_Probe(Instance) != BSP_ERROR_NONE)
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f000 f9e6 	bl	800c8e8 <FT5336_Probe>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d003      	beq.n	800c52a <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 800c522:	f04f 33ff 	mov.w	r3, #4294967295
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	e07b      	b.n	800c622 <BSP_TS_Init+0x162>
    else
    {
      TS_Capabilities_t Capabilities;
      uint32_t i;
      /* Store parameters on TS context */
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	6819      	ldr	r1, [r3, #0]
 800c52e:	483f      	ldr	r0, [pc, #252]	; (800c62c <BSP_TS_Init+0x16c>)
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	4613      	mov	r3, r2
 800c534:	009b      	lsls	r3, r3, #2
 800c536:	4413      	add	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	4403      	add	r3, r0
 800c53c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	6859      	ldr	r1, [r3, #4]
 800c542:	483a      	ldr	r0, [pc, #232]	; (800c62c <BSP_TS_Init+0x16c>)
 800c544:	687a      	ldr	r2, [r7, #4]
 800c546:	4613      	mov	r3, r2
 800c548:	009b      	lsls	r3, r3, #2
 800c54a:	4413      	add	r3, r2
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4403      	add	r3, r0
 800c550:	3304      	adds	r3, #4
 800c552:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	6899      	ldr	r1, [r3, #8]
 800c558:	4834      	ldr	r0, [pc, #208]	; (800c62c <BSP_TS_Init+0x16c>)
 800c55a:	687a      	ldr	r2, [r7, #4]
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	00db      	lsls	r3, r3, #3
 800c564:	4403      	add	r3, r0
 800c566:	3308      	adds	r3, #8
 800c568:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	68d9      	ldr	r1, [r3, #12]
 800c56e:	482f      	ldr	r0, [pc, #188]	; (800c62c <BSP_TS_Init+0x16c>)
 800c570:	687a      	ldr	r2, [r7, #4]
 800c572:	4613      	mov	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	00db      	lsls	r3, r3, #3
 800c57a:	4403      	add	r3, r0
 800c57c:	330c      	adds	r3, #12
 800c57e:	6019      	str	r1, [r3, #0]
      /* Get capabilities to retrieve maximum values of X and Y */
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800c580:	4b2b      	ldr	r3, [pc, #172]	; (800c630 <BSP_TS_Init+0x170>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	69db      	ldr	r3, [r3, #28]
 800c586:	492b      	ldr	r1, [pc, #172]	; (800c634 <BSP_TS_Init+0x174>)
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c58e:	f107 010c 	add.w	r1, r7, #12
 800c592:	4610      	mov	r0, r2
 800c594:	4798      	blx	r3
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	da03      	bge.n	800c5a4 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c59c:	f06f 0304 	mvn.w	r3, #4
 800c5a0:	61fb      	str	r3, [r7, #28]
 800c5a2:	e03e      	b.n	800c622 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800c5a4:	6939      	ldr	r1, [r7, #16]
 800c5a6:	4821      	ldr	r0, [pc, #132]	; (800c62c <BSP_TS_Init+0x16c>)
 800c5a8:	687a      	ldr	r2, [r7, #4]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	00db      	lsls	r3, r3, #3
 800c5b2:	4403      	add	r3, r0
 800c5b4:	3310      	adds	r3, #16
 800c5b6:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800c5b8:	6979      	ldr	r1, [r7, #20]
 800c5ba:	481c      	ldr	r0, [pc, #112]	; (800c62c <BSP_TS_Init+0x16c>)
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	4613      	mov	r3, r2
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4413      	add	r3, r2
 800c5c4:	00db      	lsls	r3, r3, #3
 800c5c6:	4403      	add	r3, r0
 800c5c8:	3314      	adds	r3, #20
 800c5ca:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	61bb      	str	r3, [r7, #24]
 800c5d0:	e024      	b.n	800c61c <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	68db      	ldr	r3, [r3, #12]
 800c5da:	4413      	add	r3, r2
 800c5dc:	1c59      	adds	r1, r3, #1
 800c5de:	4813      	ldr	r0, [pc, #76]	; (800c62c <BSP_TS_Init+0x16c>)
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	4613      	mov	r3, r2
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	4413      	add	r3, r2
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	69ba      	ldr	r2, [r7, #24]
 800c5ec:	4413      	add	r3, r2
 800c5ee:	3306      	adds	r3, #6
 800c5f0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	1c59      	adds	r1, r3, #1
 800c600:	480a      	ldr	r0, [pc, #40]	; (800c62c <BSP_TS_Init+0x16c>)
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	4613      	mov	r3, r2
 800c606:	009b      	lsls	r3, r3, #2
 800c608:	4413      	add	r3, r2
 800c60a:	005b      	lsls	r3, r3, #1
 800c60c:	69ba      	ldr	r2, [r7, #24]
 800c60e:	4413      	add	r3, r2
 800c610:	3308      	adds	r3, #8
 800c612:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(i = 0; i < TS_TOUCH_NBR; i++)
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	3301      	adds	r3, #1
 800c61a:	61bb      	str	r3, [r7, #24]
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	2b01      	cmp	r3, #1
 800c620:	d9d7      	bls.n	800c5d2 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 800c622:	69fb      	ldr	r3, [r7, #28]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3720      	adds	r7, #32
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	2400aed4 	.word	0x2400aed4
 800c630:	2400aecc 	.word	0x2400aecc
 800c634:	2400aed0 	.word	0x2400aed0

0800c638 <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c642:	2300      	movs	r3, #0
 800c644:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d003      	beq.n	800c654 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c64c:	f06f 0301 	mvn.w	r3, #1
 800c650:	627b      	str	r3, [r7, #36]	; 0x24
 800c652:	e13e      	b.n	800c8d2 <BSP_TS_GetState+0x29a>
  else
  {
    FT5336_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 800c654:	4ba1      	ldr	r3, [pc, #644]	; (800c8dc <BSP_TS_GetState+0x2a4>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	49a1      	ldr	r1, [pc, #644]	; (800c8e0 <BSP_TS_GetState+0x2a8>)
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c662:	f107 0108 	add.w	r1, r7, #8
 800c666:	4610      	mov	r0, r2
 800c668:	4798      	blx	r3
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da03      	bge.n	800c678 <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c670:	f06f 0304 	mvn.w	r3, #4
 800c674:	627b      	str	r3, [r7, #36]	; 0x24
 800c676:	e12c      	b.n	800c8d2 <BSP_TS_GetState+0x29a>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 8110 	beq.w	800c8a0 <BSP_TS_GetState+0x268>
    {
      x_oriented = state.TouchX;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800c688:	4996      	ldr	r1, [pc, #600]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	4613      	mov	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4413      	add	r3, r2
 800c692:	00db      	lsls	r3, r3, #3
 800c694:	440b      	add	r3, r1
 800c696:	3308      	adds	r3, #8
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 0308 	and.w	r3, r3, #8
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 800c6aa:	498e      	ldr	r1, [pc, #568]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4613      	mov	r3, r2
 800c6b0:	009b      	lsls	r3, r3, #2
 800c6b2:	4413      	add	r3, r2
 800c6b4:	00db      	lsls	r3, r3, #3
 800c6b6:	440b      	add	r3, r1
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f003 0302 	and.w	r3, r3, #2
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00c      	beq.n	800c6de <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
 800c6c4:	4987      	ldr	r1, [pc, #540]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c6c6:	687a      	ldr	r2, [r7, #4]
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	00db      	lsls	r3, r3, #3
 800c6d0:	440b      	add	r3, r1
 800c6d2:	3310      	adds	r3, #16
 800c6d4:	681a      	ldr	r2, [r3, #0]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	1ad3      	subs	r3, r2, r3
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 800c6de:	4981      	ldr	r1, [pc, #516]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	4613      	mov	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	4413      	add	r3, r2
 800c6e8:	00db      	lsls	r3, r3, #3
 800c6ea:	440b      	add	r3, r1
 800c6ec:	3308      	adds	r3, #8
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	f003 0304 	and.w	r3, r3, #4
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d00b      	beq.n	800c710 <BSP_TS_GetState+0xd8>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
 800c6f8:	497a      	ldr	r1, [pc, #488]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	00db      	lsls	r3, r3, #3
 800c704:	440b      	add	r3, r1
 800c706:	3314      	adds	r3, #20
 800c708:	681a      	ldr	r2, [r3, #0]
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800c710:	4974      	ldr	r1, [pc, #464]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	4613      	mov	r3, r2
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	00db      	lsls	r3, r3, #3
 800c71c:	440b      	add	r3, r1
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6a3a      	ldr	r2, [r7, #32]
 800c722:	fb02 f103 	mul.w	r1, r2, r3
 800c726:	486f      	ldr	r0, [pc, #444]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	4613      	mov	r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	4413      	add	r3, r2
 800c730:	00db      	lsls	r3, r3, #3
 800c732:	4403      	add	r3, r0
 800c734:	3310      	adds	r3, #16
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	fbb1 f2f3 	udiv	r2, r1, r3
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800c740:	4968      	ldr	r1, [pc, #416]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	4613      	mov	r3, r2
 800c746:	009b      	lsls	r3, r3, #2
 800c748:	4413      	add	r3, r2
 800c74a:	00db      	lsls	r3, r3, #3
 800c74c:	440b      	add	r3, r1
 800c74e:	3304      	adds	r3, #4
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	69fa      	ldr	r2, [r7, #28]
 800c754:	fb02 f103 	mul.w	r1, r2, r3
 800c758:	4862      	ldr	r0, [pc, #392]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	4613      	mov	r3, r2
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	4413      	add	r3, r2
 800c762:	00db      	lsls	r3, r3, #3
 800c764:	4403      	add	r3, r0
 800c766:	3314      	adds	r3, #20
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	fbb1 f2f3 	udiv	r2, r1, r3
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	6859      	ldr	r1, [r3, #4]
 800c77c:	4859      	ldr	r0, [pc, #356]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	4613      	mov	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4413      	add	r3, r2
 800c786:	00db      	lsls	r3, r3, #3
 800c788:	4403      	add	r3, r0
 800c78a:	3318      	adds	r3, #24
 800c78c:	681b      	ldr	r3, [r3, #0]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c78e:	4299      	cmp	r1, r3
 800c790:	d90c      	bls.n	800c7ac <BSP_TS_GetState+0x174>
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	6859      	ldr	r1, [r3, #4]
 800c796:	4853      	ldr	r0, [pc, #332]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	4613      	mov	r3, r2
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	4413      	add	r3, r2
 800c7a0:	00db      	lsls	r3, r3, #3
 800c7a2:	4403      	add	r3, r0
 800c7a4:	3318      	adds	r3, #24
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	1acb      	subs	r3, r1, r3
 800c7aa:	e00b      	b.n	800c7c4 <BSP_TS_GetState+0x18c>
        (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 800c7ac:	494d      	ldr	r1, [pc, #308]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	00db      	lsls	r3, r3, #3
 800c7b8:	440b      	add	r3, r1
 800c7ba:	3318      	adds	r3, #24
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	685b      	ldr	r3, [r3, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800c7c2:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800c7c4:	61bb      	str	r3, [r7, #24]

        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	6899      	ldr	r1, [r3, #8]
 800c7ca:	4846      	ldr	r0, [pc, #280]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	009b      	lsls	r3, r3, #2
 800c7d2:	4413      	add	r3, r2
 800c7d4:	00db      	lsls	r3, r3, #3
 800c7d6:	4403      	add	r3, r0
 800c7d8:	3320      	adds	r3, #32
 800c7da:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	d90c      	bls.n	800c7fa <BSP_TS_GetState+0x1c2>
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	6899      	ldr	r1, [r3, #8]
 800c7e4:	483f      	ldr	r0, [pc, #252]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	4413      	add	r3, r2
 800c7ee:	00db      	lsls	r3, r3, #3
 800c7f0:	4403      	add	r3, r0
 800c7f2:	3320      	adds	r3, #32
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	1acb      	subs	r3, r1, r3
 800c7f8:	e00b      	b.n	800c812 <BSP_TS_GetState+0x1da>
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 800c7fa:	493a      	ldr	r1, [pc, #232]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	4613      	mov	r3, r2
 800c800:	009b      	lsls	r3, r3, #2
 800c802:	4413      	add	r3, r2
 800c804:	00db      	lsls	r3, r3, #3
 800c806:	440b      	add	r3, r1
 800c808:	3320      	adds	r3, #32
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	689b      	ldr	r3, [r3, #8]
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800c810:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800c812:	617b      	str	r3, [r7, #20]


          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800c814:	4933      	ldr	r1, [pc, #204]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c816:	687a      	ldr	r2, [r7, #4]
 800c818:	4613      	mov	r3, r2
 800c81a:	009b      	lsls	r3, r3, #2
 800c81c:	4413      	add	r3, r2
 800c81e:	00db      	lsls	r3, r3, #3
 800c820:	440b      	add	r3, r1
 800c822:	330c      	adds	r3, #12
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d80b      	bhi.n	800c844 <BSP_TS_GetState+0x20c>
 800c82c:	492d      	ldr	r1, [pc, #180]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	00db      	lsls	r3, r3, #3
 800c838:	440b      	add	r3, r1
 800c83a:	330c      	adds	r3, #12
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	429a      	cmp	r2, r3
 800c842:	d916      	bls.n	800c872 <BSP_TS_GetState+0x23a>
          {
            /* New touch detected */
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	6859      	ldr	r1, [r3, #4]
 800c848:	4826      	ldr	r0, [pc, #152]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	4613      	mov	r3, r2
 800c84e:	009b      	lsls	r3, r3, #2
 800c850:	4413      	add	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	4403      	add	r3, r0
 800c856:	3318      	adds	r3, #24
 800c858:	6019      	str	r1, [r3, #0]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	6899      	ldr	r1, [r3, #8]
 800c85e:	4821      	ldr	r0, [pc, #132]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	00db      	lsls	r3, r3, #3
 800c86a:	4403      	add	r3, r0
 800c86c:	3320      	adds	r3, #32
 800c86e:	6019      	str	r1, [r3, #0]
 800c870:	e02f      	b.n	800c8d2 <BSP_TS_GetState+0x29a>
          }
          else
          {
            TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c872:	491c      	ldr	r1, [pc, #112]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	440b      	add	r3, r1
 800c880:	3318      	adds	r3, #24
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	605a      	str	r2, [r3, #4]
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c888:	4916      	ldr	r1, [pc, #88]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	4613      	mov	r3, r2
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	00db      	lsls	r3, r3, #3
 800c894:	440b      	add	r3, r1
 800c896:	3320      	adds	r3, #32
 800c898:	681a      	ldr	r2, [r3, #0]
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	609a      	str	r2, [r3, #8]
 800c89e:	e018      	b.n	800c8d2 <BSP_TS_GetState+0x29a>
          }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 800c8a6:	490f      	ldr	r1, [pc, #60]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c8a8:	687a      	ldr	r2, [r7, #4]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	440b      	add	r3, r1
 800c8b4:	3318      	adds	r3, #24
 800c8b6:	681a      	ldr	r2, [r3, #0]
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800c8bc:	4909      	ldr	r1, [pc, #36]	; (800c8e4 <BSP_TS_GetState+0x2ac>)
 800c8be:	687a      	ldr	r2, [r7, #4]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	00db      	lsls	r3, r3, #3
 800c8c8:	440b      	add	r3, r1
 800c8ca:	3320      	adds	r3, #32
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	609a      	str	r2, [r3, #8]
    }
}

return ret;
 800c8d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3728      	adds	r7, #40	; 0x28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	2400aecc 	.word	0x2400aecc
 800c8e0:	2400aed0 	.word	0x2400aed0
 800c8e4:	2400aed4 	.word	0x2400aed4

0800c8e8 <FT5336_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT5336_Probe(uint32_t Instance)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08a      	sub	sp, #40	; 0x28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	627b      	str	r3, [r7, #36]	; 0x24
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60bb      	str	r3, [r7, #8]

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
 800c8f8:	2370      	movs	r3, #112	; 0x70
 800c8fa:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800c8fc:	4b23      	ldr	r3, [pc, #140]	; (800c98c <FT5336_Probe+0xa4>)
 800c8fe:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800c900:	4b23      	ldr	r3, [pc, #140]	; (800c990 <FT5336_Probe+0xa8>)
 800c902:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800c904:	4b23      	ldr	r3, [pc, #140]	; (800c994 <FT5336_Probe+0xac>)
 800c906:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800c908:	4b23      	ldr	r3, [pc, #140]	; (800c998 <FT5336_Probe+0xb0>)
 800c90a:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800c90c:	4b23      	ldr	r3, [pc, #140]	; (800c99c <FT5336_Probe+0xb4>)
 800c90e:	623b      	str	r3, [r7, #32]

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
 800c910:	f107 030c 	add.w	r3, r7, #12
 800c914:	4619      	mov	r1, r3
 800c916:	4822      	ldr	r0, [pc, #136]	; (800c9a0 <FT5336_Probe+0xb8>)
 800c918:	f7fd fcb2 	bl	800a280 <FT5336_RegisterBusIO>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d003      	beq.n	800c92a <FT5336_Probe+0x42>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800c922:	f06f 0307 	mvn.w	r3, #7
 800c926:	627b      	str	r3, [r7, #36]	; 0x24
 800c928:	e02a      	b.n	800c980 <FT5336_Probe+0x98>
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
 800c92a:	f107 0308 	add.w	r3, r7, #8
 800c92e:	4619      	mov	r1, r3
 800c930:	481b      	ldr	r0, [pc, #108]	; (800c9a0 <FT5336_Probe+0xb8>)
 800c932:	f7fd fd9f 	bl	800a474 <FT5336_ReadID>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <FT5336_Probe+0x5c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800c93c:	f06f 0304 	mvn.w	r3, #4
 800c940:	627b      	str	r3, [r7, #36]	; 0x24
 800c942:	e01d      	b.n	800c980 <FT5336_Probe+0x98>
  }
  else if(ft5336_id != FT5336_ID)
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b51      	cmp	r3, #81	; 0x51
 800c948:	d003      	beq.n	800c952 <FT5336_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800c94a:	f06f 0306 	mvn.w	r3, #6
 800c94e:	627b      	str	r3, [r7, #36]	; 0x24
 800c950:	e016      	b.n	800c980 <FT5336_Probe+0x98>
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
 800c952:	4a14      	ldr	r2, [pc, #80]	; (800c9a4 <FT5336_Probe+0xbc>)
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	4912      	ldr	r1, [pc, #72]	; (800c9a0 <FT5336_Probe+0xb8>)
 800c958:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
 800c95c:	4b12      	ldr	r3, [pc, #72]	; (800c9a8 <FT5336_Probe+0xc0>)
 800c95e:	4a13      	ldr	r2, [pc, #76]	; (800c9ac <FT5336_Probe+0xc4>)
 800c960:	601a      	str	r2, [r3, #0]

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
 800c962:	4b11      	ldr	r3, [pc, #68]	; (800c9a8 <FT5336_Probe+0xc0>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	490e      	ldr	r1, [pc, #56]	; (800c9a4 <FT5336_Probe+0xbc>)
 800c96a:	687a      	ldr	r2, [r7, #4]
 800c96c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c970:	4610      	mov	r0, r2
 800c972:	4798      	blx	r3
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <FT5336_Probe+0x98>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c97a:	f06f 0304 	mvn.w	r3, #4
 800c97e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return ret;
 800c980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c982:	4618      	mov	r0, r3
 800c984:	3728      	adds	r7, #40	; 0x28
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	0800b079 	.word	0x0800b079
 800c990:	0800b0ed 	.word	0x0800b0ed
 800c994:	0800b215 	.word	0x0800b215
 800c998:	0800b1b9 	.word	0x0800b1b9
 800c99c:	0800b271 	.word	0x0800b271
 800c9a0:	2400aefc 	.word	0x2400aefc
 800c9a4:	2400aed0 	.word	0x2400aed0
 800c9a8:	2400aecc 	.word	0x2400aecc
 800c9ac:	24000018 	.word	0x24000018

0800c9b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b082      	sub	sp, #8
 800c9b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800c9b6:	2003      	movs	r0, #3
 800c9b8:	f000 f933 	bl	800cc22 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c9bc:	f004 f874 	bl	8010aa8 <HAL_RCC_GetSysClockFreq>
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	4b15      	ldr	r3, [pc, #84]	; (800ca18 <HAL_Init+0x68>)
 800c9c4:	699b      	ldr	r3, [r3, #24]
 800c9c6:	0a1b      	lsrs	r3, r3, #8
 800c9c8:	f003 030f 	and.w	r3, r3, #15
 800c9cc:	4913      	ldr	r1, [pc, #76]	; (800ca1c <HAL_Init+0x6c>)
 800c9ce:	5ccb      	ldrb	r3, [r1, r3]
 800c9d0:	f003 031f 	and.w	r3, r3, #31
 800c9d4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c9da:	4b0f      	ldr	r3, [pc, #60]	; (800ca18 <HAL_Init+0x68>)
 800c9dc:	699b      	ldr	r3, [r3, #24]
 800c9de:	f003 030f 	and.w	r3, r3, #15
 800c9e2:	4a0e      	ldr	r2, [pc, #56]	; (800ca1c <HAL_Init+0x6c>)
 800c9e4:	5cd3      	ldrb	r3, [r2, r3]
 800c9e6:	f003 031f 	and.w	r3, r3, #31
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c9f0:	4a0b      	ldr	r2, [pc, #44]	; (800ca20 <HAL_Init+0x70>)
 800c9f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c9f4:	4a0b      	ldr	r2, [pc, #44]	; (800ca24 <HAL_Init+0x74>)
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800c9fa:	200f      	movs	r0, #15
 800c9fc:	f7f4 fce4 	bl	80013c8 <HAL_InitTick>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d001      	beq.n	800ca0a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e002      	b.n	800ca10 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800ca0a:	f7f4 f967 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ca0e:	2300      	movs	r3, #0
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	58024400 	.word	0x58024400
 800ca1c:	08025b8c 	.word	0x08025b8c
 800ca20:	24000014 	.word	0x24000014
 800ca24:	24000010 	.word	0x24000010

0800ca28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ca28:	b480      	push	{r7}
 800ca2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ca2c:	4b06      	ldr	r3, [pc, #24]	; (800ca48 <HAL_IncTick+0x20>)
 800ca2e:	781b      	ldrb	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <HAL_IncTick+0x24>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4413      	add	r3, r2
 800ca38:	4a04      	ldr	r2, [pc, #16]	; (800ca4c <HAL_IncTick+0x24>)
 800ca3a:	6013      	str	r3, [r2, #0]
}
 800ca3c:	bf00      	nop
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca44:	4770      	bx	lr
 800ca46:	bf00      	nop
 800ca48:	2400004c 	.word	0x2400004c
 800ca4c:	2400af24 	.word	0x2400af24

0800ca50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ca50:	b480      	push	{r7}
 800ca52:	af00      	add	r7, sp, #0
  return uwTick;
 800ca54:	4b03      	ldr	r3, [pc, #12]	; (800ca64 <HAL_GetTick+0x14>)
 800ca56:	681b      	ldr	r3, [r3, #0]
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca60:	4770      	bx	lr
 800ca62:	bf00      	nop
 800ca64:	2400af24 	.word	0x2400af24

0800ca68 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800ca6c:	4b03      	ldr	r3, [pc, #12]	; (800ca7c <HAL_GetREVID+0x14>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	0c1b      	lsrs	r3, r3, #16
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	5c001000 	.word	0x5c001000

0800ca80 <__NVIC_SetPriorityGrouping>:
{
 800ca80:	b480      	push	{r7}
 800ca82:	b085      	sub	sp, #20
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f003 0307 	and.w	r3, r3, #7
 800ca8e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ca90:	4b0b      	ldr	r3, [pc, #44]	; (800cac0 <__NVIC_SetPriorityGrouping+0x40>)
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ca96:	68ba      	ldr	r2, [r7, #8]
 800ca98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ca9c:	4013      	ands	r3, r2
 800ca9e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800caa8:	4b06      	ldr	r3, [pc, #24]	; (800cac4 <__NVIC_SetPriorityGrouping+0x44>)
 800caaa:	4313      	orrs	r3, r2
 800caac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800caae:	4a04      	ldr	r2, [pc, #16]	; (800cac0 <__NVIC_SetPriorityGrouping+0x40>)
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	60d3      	str	r3, [r2, #12]
}
 800cab4:	bf00      	nop
 800cab6:	3714      	adds	r7, #20
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr
 800cac0:	e000ed00 	.word	0xe000ed00
 800cac4:	05fa0000 	.word	0x05fa0000

0800cac8 <__NVIC_GetPriorityGrouping>:
{
 800cac8:	b480      	push	{r7}
 800caca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800cacc:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <__NVIC_GetPriorityGrouping+0x18>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	0a1b      	lsrs	r3, r3, #8
 800cad2:	f003 0307 	and.w	r3, r3, #7
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	e000ed00 	.word	0xe000ed00

0800cae4 <__NVIC_EnableIRQ>:
{
 800cae4:	b480      	push	{r7}
 800cae6:	b083      	sub	sp, #12
 800cae8:	af00      	add	r7, sp, #0
 800caea:	4603      	mov	r3, r0
 800caec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800caee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	db0b      	blt.n	800cb0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800caf6:	88fb      	ldrh	r3, [r7, #6]
 800caf8:	f003 021f 	and.w	r2, r3, #31
 800cafc:	4907      	ldr	r1, [pc, #28]	; (800cb1c <__NVIC_EnableIRQ+0x38>)
 800cafe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb02:	095b      	lsrs	r3, r3, #5
 800cb04:	2001      	movs	r0, #1
 800cb06:	fa00 f202 	lsl.w	r2, r0, r2
 800cb0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800cb0e:	bf00      	nop
 800cb10:	370c      	adds	r7, #12
 800cb12:	46bd      	mov	sp, r7
 800cb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb18:	4770      	bx	lr
 800cb1a:	bf00      	nop
 800cb1c:	e000e100 	.word	0xe000e100

0800cb20 <__NVIC_DisableIRQ>:
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	db12      	blt.n	800cb58 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800cb32:	88fb      	ldrh	r3, [r7, #6]
 800cb34:	f003 021f 	and.w	r2, r3, #31
 800cb38:	490a      	ldr	r1, [pc, #40]	; (800cb64 <__NVIC_DisableIRQ+0x44>)
 800cb3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb3e:	095b      	lsrs	r3, r3, #5
 800cb40:	2001      	movs	r0, #1
 800cb42:	fa00 f202 	lsl.w	r2, r0, r2
 800cb46:	3320      	adds	r3, #32
 800cb48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800cb4c:	f3bf 8f4f 	dsb	sy
}
 800cb50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800cb52:	f3bf 8f6f 	isb	sy
}
 800cb56:	bf00      	nop
}
 800cb58:	bf00      	nop
 800cb5a:	370c      	adds	r7, #12
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	e000e100 	.word	0xe000e100

0800cb68 <__NVIC_SetPriority>:
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	4603      	mov	r3, r0
 800cb70:	6039      	str	r1, [r7, #0]
 800cb72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800cb74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	db0a      	blt.n	800cb92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	b2da      	uxtb	r2, r3
 800cb80:	490c      	ldr	r1, [pc, #48]	; (800cbb4 <__NVIC_SetPriority+0x4c>)
 800cb82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cb86:	0112      	lsls	r2, r2, #4
 800cb88:	b2d2      	uxtb	r2, r2
 800cb8a:	440b      	add	r3, r1
 800cb8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800cb90:	e00a      	b.n	800cba8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	b2da      	uxtb	r2, r3
 800cb96:	4908      	ldr	r1, [pc, #32]	; (800cbb8 <__NVIC_SetPriority+0x50>)
 800cb98:	88fb      	ldrh	r3, [r7, #6]
 800cb9a:	f003 030f 	and.w	r3, r3, #15
 800cb9e:	3b04      	subs	r3, #4
 800cba0:	0112      	lsls	r2, r2, #4
 800cba2:	b2d2      	uxtb	r2, r2
 800cba4:	440b      	add	r3, r1
 800cba6:	761a      	strb	r2, [r3, #24]
}
 800cba8:	bf00      	nop
 800cbaa:	370c      	adds	r7, #12
 800cbac:	46bd      	mov	sp, r7
 800cbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb2:	4770      	bx	lr
 800cbb4:	e000e100 	.word	0xe000e100
 800cbb8:	e000ed00 	.word	0xe000ed00

0800cbbc <NVIC_EncodePriority>:
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b089      	sub	sp, #36	; 0x24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f003 0307 	and.w	r3, r3, #7
 800cbce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800cbd0:	69fb      	ldr	r3, [r7, #28]
 800cbd2:	f1c3 0307 	rsb	r3, r3, #7
 800cbd6:	2b04      	cmp	r3, #4
 800cbd8:	bf28      	it	cs
 800cbda:	2304      	movcs	r3, #4
 800cbdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	2b06      	cmp	r3, #6
 800cbe4:	d902      	bls.n	800cbec <NVIC_EncodePriority+0x30>
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	3b03      	subs	r3, #3
 800cbea:	e000      	b.n	800cbee <NVIC_EncodePriority+0x32>
 800cbec:	2300      	movs	r3, #0
 800cbee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	fa02 f303 	lsl.w	r3, r2, r3
 800cbfa:	43da      	mvns	r2, r3
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	401a      	ands	r2, r3
 800cc00:	697b      	ldr	r3, [r7, #20]
 800cc02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800cc04:	f04f 31ff 	mov.w	r1, #4294967295
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	fa01 f303 	lsl.w	r3, r1, r3
 800cc0e:	43d9      	mvns	r1, r3
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800cc14:	4313      	orrs	r3, r2
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3724      	adds	r7, #36	; 0x24
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800cc22:	b580      	push	{r7, lr}
 800cc24:	b082      	sub	sp, #8
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff ff28 	bl	800ca80 <__NVIC_SetPriorityGrouping>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b086      	sub	sp, #24
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800cc46:	f7ff ff3f 	bl	800cac8 <__NVIC_GetPriorityGrouping>
 800cc4a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800cc4c:	687a      	ldr	r2, [r7, #4]
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	6978      	ldr	r0, [r7, #20]
 800cc52:	f7ff ffb3 	bl	800cbbc <NVIC_EncodePriority>
 800cc56:	4602      	mov	r2, r0
 800cc58:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7ff ff82 	bl	800cb68 <__NVIC_SetPriority>
}
 800cc64:	bf00      	nop
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800cc76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7ff ff32 	bl	800cae4 <__NVIC_EnableIRQ>
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	4603      	mov	r3, r0
 800cc90:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800cc92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800cc96:	4618      	mov	r0, r3
 800cc98:	f7ff ff42 	bl	800cb20 <__NVIC_DisableIRQ>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800cca4:	b480      	push	{r7}
 800cca6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800cca8:	f3bf 8f5f 	dmb	sy
}
 800ccac:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800ccae:	4b07      	ldr	r3, [pc, #28]	; (800cccc <HAL_MPU_Disable+0x28>)
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	4a06      	ldr	r2, [pc, #24]	; (800cccc <HAL_MPU_Disable+0x28>)
 800ccb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ccb8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800ccba:	4b05      	ldr	r3, [pc, #20]	; (800ccd0 <HAL_MPU_Disable+0x2c>)
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	605a      	str	r2, [r3, #4]
}
 800ccc0:	bf00      	nop
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr
 800ccca:	bf00      	nop
 800cccc:	e000ed00 	.word	0xe000ed00
 800ccd0:	e000ed90 	.word	0xe000ed90

0800ccd4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800ccdc:	4a0b      	ldr	r2, [pc, #44]	; (800cd0c <HAL_MPU_Enable+0x38>)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f043 0301 	orr.w	r3, r3, #1
 800cce4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800cce6:	4b0a      	ldr	r3, [pc, #40]	; (800cd10 <HAL_MPU_Enable+0x3c>)
 800cce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccea:	4a09      	ldr	r2, [pc, #36]	; (800cd10 <HAL_MPU_Enable+0x3c>)
 800ccec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ccf0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800ccf2:	f3bf 8f4f 	dsb	sy
}
 800ccf6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ccf8:	f3bf 8f6f 	isb	sy
}
 800ccfc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800ccfe:	bf00      	nop
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr
 800cd0a:	bf00      	nop
 800cd0c:	e000ed90 	.word	0xe000ed90
 800cd10:	e000ed00 	.word	0xe000ed00

0800cd14 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	785a      	ldrb	r2, [r3, #1]
 800cd20:	4b1d      	ldr	r3, [pc, #116]	; (800cd98 <HAL_MPU_ConfigRegion+0x84>)
 800cd22:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d029      	beq.n	800cd80 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800cd2c:	4a1a      	ldr	r2, [pc, #104]	; (800cd98 <HAL_MPU_ConfigRegion+0x84>)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	7b1b      	ldrb	r3, [r3, #12]
 800cd38:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	7adb      	ldrb	r3, [r3, #11]
 800cd3e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	7a9b      	ldrb	r3, [r3, #10]
 800cd46:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800cd48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	7b5b      	ldrb	r3, [r3, #13]
 800cd4e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800cd50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	7b9b      	ldrb	r3, [r3, #14]
 800cd56:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800cd58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	7bdb      	ldrb	r3, [r3, #15]
 800cd5e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800cd60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	7a5b      	ldrb	r3, [r3, #9]
 800cd66:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800cd68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	7a1b      	ldrb	r3, [r3, #8]
 800cd6e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800cd70:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	7812      	ldrb	r2, [r2, #0]
 800cd76:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd78:	4a07      	ldr	r2, [pc, #28]	; (800cd98 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800cd7a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800cd7c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800cd7e:	e005      	b.n	800cd8c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800cd80:	4b05      	ldr	r3, [pc, #20]	; (800cd98 <HAL_MPU_ConfigRegion+0x84>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 800cd86:	4b04      	ldr	r3, [pc, #16]	; (800cd98 <HAL_MPU_ConfigRegion+0x84>)
 800cd88:	2200      	movs	r2, #0
 800cd8a:	611a      	str	r2, [r3, #16]
}
 800cd8c:	bf00      	nop
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	e000ed90 	.word	0xe000ed90

0800cd9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b082      	sub	sp, #8
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e054      	b.n	800ce58 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7f5b      	ldrb	r3, [r3, #29]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d105      	bne.n	800cdc4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7f3 ffaa 	bl	8000d18 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2202      	movs	r2, #2
 800cdc8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	791b      	ldrb	r3, [r3, #4]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d10c      	bne.n	800cdec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a22      	ldr	r2, [pc, #136]	; (800ce60 <HAL_CRC_Init+0xc4>)
 800cdd8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	689a      	ldr	r2, [r3, #8]
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f022 0218 	bic.w	r2, r2, #24
 800cde8:	609a      	str	r2, [r3, #8]
 800cdea:	e00c      	b.n	800ce06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6899      	ldr	r1, [r3, #8]
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 f834 	bl	800ce64 <HAL_CRCEx_Polynomial_Set>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d001      	beq.n	800ce06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	e028      	b.n	800ce58 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	795b      	ldrb	r3, [r3, #5]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d105      	bne.n	800ce1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f04f 32ff 	mov.w	r2, #4294967295
 800ce16:	611a      	str	r2, [r3, #16]
 800ce18:	e004      	b.n	800ce24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	6912      	ldr	r2, [r2, #16]
 800ce22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	695a      	ldr	r2, [r3, #20]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	430a      	orrs	r2, r1
 800ce38:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	689b      	ldr	r3, [r3, #8]
 800ce40:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	699a      	ldr	r2, [r3, #24]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2201      	movs	r2, #1
 800ce54:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	3708      	adds	r7, #8
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	bd80      	pop	{r7, pc}
 800ce60:	04c11db7 	.word	0x04c11db7

0800ce64 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b087      	sub	sp, #28
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800ce74:	231f      	movs	r3, #31
 800ce76:	613b      	str	r3, [r7, #16]
  {
    status =  HAL_ERROR;
  }
  else
  {
    /* check polynomial definition vs polynomial size:
 800ce78:	bf00      	nop
 800ce7a:	693b      	ldr	r3, [r7, #16]
 800ce7c:	1e5a      	subs	r2, r3, #1
 800ce7e:	613a      	str	r2, [r7, #16]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d009      	beq.n	800ce98 <HAL_CRCEx_Polynomial_Set+0x34>
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	f003 031f 	and.w	r3, r3, #31
 800ce8a:	68ba      	ldr	r2, [r7, #8]
 800ce8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce90:	f003 0301 	and.w	r3, r3, #1
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d0f0      	beq.n	800ce7a <HAL_CRCEx_Polynomial_Set+0x16>
     * polynomial length must be aligned with polynomial
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2b18      	cmp	r3, #24
 800ce9c:	d846      	bhi.n	800cf2c <HAL_CRCEx_Polynomial_Set+0xc8>
 800ce9e:	a201      	add	r2, pc, #4	; (adr r2, 800cea4 <HAL_CRCEx_Polynomial_Set+0x40>)
 800cea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cea4:	0800cf33 	.word	0x0800cf33
 800cea8:	0800cf2d 	.word	0x0800cf2d
 800ceac:	0800cf2d 	.word	0x0800cf2d
 800ceb0:	0800cf2d 	.word	0x0800cf2d
 800ceb4:	0800cf2d 	.word	0x0800cf2d
 800ceb8:	0800cf2d 	.word	0x0800cf2d
 800cebc:	0800cf2d 	.word	0x0800cf2d
 800cec0:	0800cf2d 	.word	0x0800cf2d
 800cec4:	0800cf21 	.word	0x0800cf21
 800cec8:	0800cf2d 	.word	0x0800cf2d
 800cecc:	0800cf2d 	.word	0x0800cf2d
 800ced0:	0800cf2d 	.word	0x0800cf2d
 800ced4:	0800cf2d 	.word	0x0800cf2d
 800ced8:	0800cf2d 	.word	0x0800cf2d
 800cedc:	0800cf2d 	.word	0x0800cf2d
 800cee0:	0800cf2d 	.word	0x0800cf2d
 800cee4:	0800cf15 	.word	0x0800cf15
 800cee8:	0800cf2d 	.word	0x0800cf2d
 800ceec:	0800cf2d 	.word	0x0800cf2d
 800cef0:	0800cf2d 	.word	0x0800cf2d
 800cef4:	0800cf2d 	.word	0x0800cf2d
 800cef8:	0800cf2d 	.word	0x0800cf2d
 800cefc:	0800cf2d 	.word	0x0800cf2d
 800cf00:	0800cf2d 	.word	0x0800cf2d
 800cf04:	0800cf09 	.word	0x0800cf09
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800cf08:	693b      	ldr	r3, [r7, #16]
 800cf0a:	2b06      	cmp	r3, #6
 800cf0c:	d913      	bls.n	800cf36 <HAL_CRCEx_Polynomial_Set+0xd2>
    {
    }
 800cf0e:	2301      	movs	r3, #1
 800cf10:	75fb      	strb	r3, [r7, #23]

    switch (PolyLength)
 800cf12:	e010      	b.n	800cf36 <HAL_CRCEx_Polynomial_Set+0xd2>
    {
          
 800cf14:	693b      	ldr	r3, [r7, #16]
 800cf16:	2b07      	cmp	r3, #7
 800cf18:	d90f      	bls.n	800cf3a <HAL_CRCEx_Polynomial_Set+0xd6>
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	75fb      	strb	r3, [r7, #23]
        {
          status =   HAL_ERROR;
 800cf1e:	e00c      	b.n	800cf3a <HAL_CRCEx_Polynomial_Set+0xd6>
        }
        break;
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b0f      	cmp	r3, #15
 800cf24:	d90b      	bls.n	800cf3e <HAL_CRCEx_Polynomial_Set+0xda>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800cf26:	2301      	movs	r3, #1
 800cf28:	75fb      	strb	r3, [r7, #23]
        {
          status =   HAL_ERROR;
 800cf2a:	e008      	b.n	800cf3e <HAL_CRCEx_Polynomial_Set+0xda>
        }
        break;
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
        {
          status =   HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	75fb      	strb	r3, [r7, #23]
        }
 800cf30:	e006      	b.n	800cf40 <HAL_CRCEx_Polynomial_Set+0xdc>
        if (msb >= HAL_CRC_LENGTH_16B)
 800cf32:	bf00      	nop
 800cf34:	e004      	b.n	800cf40 <HAL_CRCEx_Polynomial_Set+0xdc>
    switch (PolyLength)
 800cf36:	bf00      	nop
 800cf38:	e002      	b.n	800cf40 <HAL_CRCEx_Polynomial_Set+0xdc>
          status =   HAL_ERROR;
 800cf3a:	bf00      	nop
 800cf3c:	e000      	b.n	800cf40 <HAL_CRCEx_Polynomial_Set+0xdc>
          status =   HAL_ERROR;
 800cf3e:	bf00      	nop
        break;
 
 800cf40:	7dfb      	ldrb	r3, [r7, #23]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d10d      	bne.n	800cf62 <HAL_CRCEx_Polynomial_Set+0xfe>
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	68ba      	ldr	r2, [r7, #8]
 800cf4c:	615a      	str	r2, [r3, #20]
      default:
        status =  HAL_ERROR;
        break;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	689b      	ldr	r3, [r3, #8]
 800cf54:	f023 0118 	bic.w	r1, r3, #24
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	687a      	ldr	r2, [r7, #4]
 800cf5e:	430a      	orrs	r2, r1
 800cf60:	609a      	str	r2, [r3, #8]
    }
  }
  if (status == HAL_OK)
 800cf62:	7dfb      	ldrb	r3, [r7, #23]
  {
 800cf64:	4618      	mov	r0, r3
 800cf66:	371c      	adds	r7, #28
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6e:	4770      	bx	lr

0800cf70 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b082      	sub	sp, #8
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d101      	bne.n	800cf82 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	e04f      	b.n	800d022 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d106      	bne.n	800cf9c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f7f3 fee0 	bl	8000d5c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2202      	movs	r2, #2
 800cfa0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	4b20      	ldr	r3, [pc, #128]	; (800d02c <HAL_DMA2D_Init+0xbc>)
 800cfac:	4013      	ands	r3, r2
 800cfae:	687a      	ldr	r2, [r7, #4]
 800cfb0:	6851      	ldr	r1, [r2, #4]
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	69d2      	ldr	r2, [r2, #28]
 800cfb6:	4311      	orrs	r1, r2
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	6812      	ldr	r2, [r2, #0]
 800cfbc:	430b      	orrs	r3, r1
 800cfbe:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cfc6:	4b1a      	ldr	r3, [pc, #104]	; (800d030 <HAL_DMA2D_Init+0xc0>)
 800cfc8:	4013      	ands	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	6891      	ldr	r1, [r2, #8]
 800cfce:	687a      	ldr	r2, [r7, #4]
 800cfd0:	6992      	ldr	r2, [r2, #24]
 800cfd2:	4311      	orrs	r1, r2
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	6812      	ldr	r2, [r2, #0]
 800cfd8:	430b      	orrs	r3, r1
 800cfda:	6353      	str	r3, [r2, #52]	; 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cfe2:	4b14      	ldr	r3, [pc, #80]	; (800d034 <HAL_DMA2D_Init+0xc4>)
 800cfe4:	4013      	ands	r3, r2
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	68d1      	ldr	r1, [r2, #12]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	6812      	ldr	r2, [r2, #0]
 800cfee:	430b      	orrs	r3, r1
 800cff0:	6413      	str	r3, [r2, #64]	; 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cff8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	691b      	ldr	r3, [r3, #16]
 800d000:	051a      	lsls	r2, r3, #20
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	695b      	ldr	r3, [r3, #20]
 800d006:	055b      	lsls	r3, r3, #21
 800d008:	431a      	orrs	r2, r3
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	430a      	orrs	r2, r1
 800d010:	635a      	str	r2, [r3, #52]	; 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2200      	movs	r2, #0
 800d016:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2201      	movs	r2, #1
 800d01c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

  return HAL_OK;
 800d020:	2300      	movs	r3, #0
}
 800d022:	4618      	mov	r0, r3
 800d024:	3708      	adds	r7, #8
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	fff8ffbf 	.word	0xfff8ffbf
 800d030:	fffffef8 	.word	0xfffffef8
 800d034:	ffff0000 	.word	0xffff0000

0800d038 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	685b      	ldr	r3, [r3, #4]
 800d046:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d026      	beq.n	800d0a8 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d060:	2b00      	cmp	r3, #0
 800d062:	d021      	beq.n	800d0a8 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	681a      	ldr	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d072:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d078:	f043 0201 	orr.w	r2, r3, #1
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2201      	movs	r2, #1
 800d086:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2204      	movs	r2, #4
 800d08c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d003      	beq.n	800d0a8 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a4:	6878      	ldr	r0, [r7, #4]
 800d0a6:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	f003 0320 	and.w	r3, r3, #32
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d026      	beq.n	800d100 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d021      	beq.n	800d100 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	681a      	ldr	r2, [r3, #0]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d0ca:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2220      	movs	r2, #32
 800d0d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0d8:	f043 0202 	orr.w	r2, r3, #2
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2204      	movs	r2, #4
 800d0e4:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d003      	beq.n	800d100 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f003 0308 	and.w	r3, r3, #8
 800d106:	2b00      	cmp	r3, #0
 800d108:	d026      	beq.n	800d158 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d110:	2b00      	cmp	r3, #0
 800d112:	d021      	beq.n	800d158 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d122:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2208      	movs	r2, #8
 800d12a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d130:	f043 0204 	orr.w	r2, r3, #4
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	2204      	movs	r2, #4
 800d13c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2200      	movs	r2, #0
 800d144:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferErrorCallback != NULL)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d003      	beq.n	800d158 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	f003 0304 	and.w	r3, r3, #4
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d013      	beq.n	800d18a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800d162:	68bb      	ldr	r3, [r7, #8]
 800d164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00e      	beq.n	800d18a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d17a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2204      	movs	r2, #4
 800d182:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f853 	bl	800d230 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f003 0302 	and.w	r3, r3, #2
 800d190:	2b00      	cmp	r3, #0
 800d192:	d024      	beq.n	800d1de <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01f      	beq.n	800d1de <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	681a      	ldr	r2, [r3, #0]
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d1ac:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	2202      	movs	r2, #2
 800d1b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      if (hdma2d->XferCpltCallback != NULL)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a1b      	ldr	r3, [r3, #32]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6a1b      	ldr	r3, [r3, #32]
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01f      	beq.n	800d228 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01a      	beq.n	800d228 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	681a      	ldr	r2, [r3, #0]
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d200:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	2210      	movs	r2, #16
 800d208:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	665a      	str	r2, [r3, #100]	; 0x64

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f000 f80e 	bl	800d244 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 800d228:	bf00      	nop
 800d22a:	3710      	adds	r7, #16
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d230:	b480      	push	{r7}
 800d232:	b083      	sub	sp, #12
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800d238:	bf00      	nop
 800d23a:	370c      	adds	r7, #12
 800d23c:	46bd      	mov	sp, r7
 800d23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d242:	4770      	bx	lr

0800d244 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d258:	b480      	push	{r7}
 800d25a:	b089      	sub	sp, #36	; 0x24
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d262:	2300      	movs	r3, #0
 800d264:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d266:	4b89      	ldr	r3, [pc, #548]	; (800d48c <HAL_GPIO_Init+0x234>)
 800d268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d26a:	e194      	b.n	800d596 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	2101      	movs	r1, #1
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	fa01 f303 	lsl.w	r3, r1, r3
 800d278:	4013      	ands	r3, r2
 800d27a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	f000 8186 	beq.w	800d590 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	685b      	ldr	r3, [r3, #4]
 800d288:	f003 0303 	and.w	r3, r3, #3
 800d28c:	2b01      	cmp	r3, #1
 800d28e:	d005      	beq.n	800d29c <HAL_GPIO_Init+0x44>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f003 0303 	and.w	r3, r3, #3
 800d298:	2b02      	cmp	r3, #2
 800d29a:	d130      	bne.n	800d2fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	005b      	lsls	r3, r3, #1
 800d2a6:	2203      	movs	r2, #3
 800d2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ac:	43db      	mvns	r3, r3
 800d2ae:	69ba      	ldr	r2, [r7, #24]
 800d2b0:	4013      	ands	r3, r2
 800d2b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	68da      	ldr	r2, [r3, #12]
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	fa02 f303 	lsl.w	r3, r2, r3
 800d2c0:	69ba      	ldr	r2, [r7, #24]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	69ba      	ldr	r2, [r7, #24]
 800d2ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2da:	43db      	mvns	r3, r3
 800d2dc:	69ba      	ldr	r2, [r7, #24]
 800d2de:	4013      	ands	r3, r2
 800d2e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	091b      	lsrs	r3, r3, #4
 800d2e8:	f003 0201 	and.w	r2, r3, #1
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d2f2:	69ba      	ldr	r2, [r7, #24]
 800d2f4:	4313      	orrs	r3, r2
 800d2f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	69ba      	ldr	r2, [r7, #24]
 800d2fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	f003 0303 	and.w	r3, r3, #3
 800d306:	2b03      	cmp	r3, #3
 800d308:	d017      	beq.n	800d33a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	2203      	movs	r2, #3
 800d316:	fa02 f303 	lsl.w	r3, r2, r3
 800d31a:	43db      	mvns	r3, r3
 800d31c:	69ba      	ldr	r2, [r7, #24]
 800d31e:	4013      	ands	r3, r2
 800d320:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	689a      	ldr	r2, [r3, #8]
 800d326:	69fb      	ldr	r3, [r7, #28]
 800d328:	005b      	lsls	r3, r3, #1
 800d32a:	fa02 f303 	lsl.w	r3, r2, r3
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	4313      	orrs	r3, r2
 800d332:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	69ba      	ldr	r2, [r7, #24]
 800d338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f003 0303 	and.w	r3, r3, #3
 800d342:	2b02      	cmp	r3, #2
 800d344:	d123      	bne.n	800d38e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d346:	69fb      	ldr	r3, [r7, #28]
 800d348:	08da      	lsrs	r2, r3, #3
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3208      	adds	r2, #8
 800d34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d352:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d354:	69fb      	ldr	r3, [r7, #28]
 800d356:	f003 0307 	and.w	r3, r3, #7
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	220f      	movs	r2, #15
 800d35e:	fa02 f303 	lsl.w	r3, r2, r3
 800d362:	43db      	mvns	r3, r3
 800d364:	69ba      	ldr	r2, [r7, #24]
 800d366:	4013      	ands	r3, r2
 800d368:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	691a      	ldr	r2, [r3, #16]
 800d36e:	69fb      	ldr	r3, [r7, #28]
 800d370:	f003 0307 	and.w	r3, r3, #7
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	fa02 f303 	lsl.w	r3, r2, r3
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d380:	69fb      	ldr	r3, [r7, #28]
 800d382:	08da      	lsrs	r2, r3, #3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	3208      	adds	r2, #8
 800d388:	69b9      	ldr	r1, [r7, #24]
 800d38a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	005b      	lsls	r3, r3, #1
 800d398:	2203      	movs	r2, #3
 800d39a:	fa02 f303 	lsl.w	r3, r2, r3
 800d39e:	43db      	mvns	r3, r3
 800d3a0:	69ba      	ldr	r2, [r7, #24]
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	f003 0203 	and.w	r2, r3, #3
 800d3ae:	69fb      	ldr	r3, [r7, #28]
 800d3b0:	005b      	lsls	r3, r3, #1
 800d3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d3b6:	69ba      	ldr	r2, [r7, #24]
 800d3b8:	4313      	orrs	r3, r2
 800d3ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	685b      	ldr	r3, [r3, #4]
 800d3c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	f000 80e0 	beq.w	800d590 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d3d0:	4b2f      	ldr	r3, [pc, #188]	; (800d490 <HAL_GPIO_Init+0x238>)
 800d3d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d3d6:	4a2e      	ldr	r2, [pc, #184]	; (800d490 <HAL_GPIO_Init+0x238>)
 800d3d8:	f043 0302 	orr.w	r3, r3, #2
 800d3dc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800d3e0:	4b2b      	ldr	r3, [pc, #172]	; (800d490 <HAL_GPIO_Init+0x238>)
 800d3e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	60fb      	str	r3, [r7, #12]
 800d3ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d3ee:	4a29      	ldr	r2, [pc, #164]	; (800d494 <HAL_GPIO_Init+0x23c>)
 800d3f0:	69fb      	ldr	r3, [r7, #28]
 800d3f2:	089b      	lsrs	r3, r3, #2
 800d3f4:	3302      	adds	r3, #2
 800d3f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d3fc:	69fb      	ldr	r3, [r7, #28]
 800d3fe:	f003 0303 	and.w	r3, r3, #3
 800d402:	009b      	lsls	r3, r3, #2
 800d404:	220f      	movs	r2, #15
 800d406:	fa02 f303 	lsl.w	r3, r2, r3
 800d40a:	43db      	mvns	r3, r3
 800d40c:	69ba      	ldr	r2, [r7, #24]
 800d40e:	4013      	ands	r3, r2
 800d410:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	4a20      	ldr	r2, [pc, #128]	; (800d498 <HAL_GPIO_Init+0x240>)
 800d416:	4293      	cmp	r3, r2
 800d418:	d052      	beq.n	800d4c0 <HAL_GPIO_Init+0x268>
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4a1f      	ldr	r2, [pc, #124]	; (800d49c <HAL_GPIO_Init+0x244>)
 800d41e:	4293      	cmp	r3, r2
 800d420:	d031      	beq.n	800d486 <HAL_GPIO_Init+0x22e>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	4a1e      	ldr	r2, [pc, #120]	; (800d4a0 <HAL_GPIO_Init+0x248>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d02b      	beq.n	800d482 <HAL_GPIO_Init+0x22a>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	4a1d      	ldr	r2, [pc, #116]	; (800d4a4 <HAL_GPIO_Init+0x24c>)
 800d42e:	4293      	cmp	r3, r2
 800d430:	d025      	beq.n	800d47e <HAL_GPIO_Init+0x226>
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a1c      	ldr	r2, [pc, #112]	; (800d4a8 <HAL_GPIO_Init+0x250>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d01f      	beq.n	800d47a <HAL_GPIO_Init+0x222>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ac <HAL_GPIO_Init+0x254>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d019      	beq.n	800d476 <HAL_GPIO_Init+0x21e>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	4a1a      	ldr	r2, [pc, #104]	; (800d4b0 <HAL_GPIO_Init+0x258>)
 800d446:	4293      	cmp	r3, r2
 800d448:	d013      	beq.n	800d472 <HAL_GPIO_Init+0x21a>
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4a19      	ldr	r2, [pc, #100]	; (800d4b4 <HAL_GPIO_Init+0x25c>)
 800d44e:	4293      	cmp	r3, r2
 800d450:	d00d      	beq.n	800d46e <HAL_GPIO_Init+0x216>
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	4a18      	ldr	r2, [pc, #96]	; (800d4b8 <HAL_GPIO_Init+0x260>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d007      	beq.n	800d46a <HAL_GPIO_Init+0x212>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a17      	ldr	r2, [pc, #92]	; (800d4bc <HAL_GPIO_Init+0x264>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d101      	bne.n	800d466 <HAL_GPIO_Init+0x20e>
 800d462:	2309      	movs	r3, #9
 800d464:	e02d      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d466:	230a      	movs	r3, #10
 800d468:	e02b      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d46a:	2308      	movs	r3, #8
 800d46c:	e029      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d46e:	2307      	movs	r3, #7
 800d470:	e027      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d472:	2306      	movs	r3, #6
 800d474:	e025      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d476:	2305      	movs	r3, #5
 800d478:	e023      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d47a:	2304      	movs	r3, #4
 800d47c:	e021      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d47e:	2303      	movs	r3, #3
 800d480:	e01f      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d482:	2302      	movs	r3, #2
 800d484:	e01d      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d486:	2301      	movs	r3, #1
 800d488:	e01b      	b.n	800d4c2 <HAL_GPIO_Init+0x26a>
 800d48a:	bf00      	nop
 800d48c:	58000080 	.word	0x58000080
 800d490:	58024400 	.word	0x58024400
 800d494:	58000400 	.word	0x58000400
 800d498:	58020000 	.word	0x58020000
 800d49c:	58020400 	.word	0x58020400
 800d4a0:	58020800 	.word	0x58020800
 800d4a4:	58020c00 	.word	0x58020c00
 800d4a8:	58021000 	.word	0x58021000
 800d4ac:	58021400 	.word	0x58021400
 800d4b0:	58021800 	.word	0x58021800
 800d4b4:	58021c00 	.word	0x58021c00
 800d4b8:	58022000 	.word	0x58022000
 800d4bc:	58022400 	.word	0x58022400
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	69fa      	ldr	r2, [r7, #28]
 800d4c4:	f002 0203 	and.w	r2, r2, #3
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	4093      	lsls	r3, r2
 800d4cc:	69ba      	ldr	r2, [r7, #24]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d4d2:	4938      	ldr	r1, [pc, #224]	; (800d5b4 <HAL_GPIO_Init+0x35c>)
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	089b      	lsrs	r3, r3, #2
 800d4d8:	3302      	adds	r3, #2
 800d4da:	69ba      	ldr	r2, [r7, #24]
 800d4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800d4e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	43db      	mvns	r3, r3
 800d4ec:	69ba      	ldr	r2, [r7, #24]
 800d4ee:	4013      	ands	r3, r2
 800d4f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	685b      	ldr	r3, [r3, #4]
 800d4f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800d4fe:	69ba      	ldr	r2, [r7, #24]
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	4313      	orrs	r3, r2
 800d504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800d506:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d50a:	69bb      	ldr	r3, [r7, #24]
 800d50c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800d50e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	43db      	mvns	r3, r3
 800d51a:	69ba      	ldr	r2, [r7, #24]
 800d51c:	4013      	ands	r3, r2
 800d51e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800d52c:	69ba      	ldr	r2, [r7, #24]
 800d52e:	693b      	ldr	r3, [r7, #16]
 800d530:	4313      	orrs	r3, r2
 800d532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800d534:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800d538:	69bb      	ldr	r3, [r7, #24]
 800d53a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800d53c:	697b      	ldr	r3, [r7, #20]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d542:	693b      	ldr	r3, [r7, #16]
 800d544:	43db      	mvns	r3, r3
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	4013      	ands	r3, r2
 800d54a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d554:	2b00      	cmp	r3, #0
 800d556:	d003      	beq.n	800d560 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800d558:	69ba      	ldr	r2, [r7, #24]
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800d566:	697b      	ldr	r3, [r7, #20]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	43db      	mvns	r3, r3
 800d570:	69ba      	ldr	r2, [r7, #24]
 800d572:	4013      	ands	r3, r2
 800d574:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800d582:	69ba      	ldr	r2, [r7, #24]
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	4313      	orrs	r3, r2
 800d588:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	69ba      	ldr	r2, [r7, #24]
 800d58e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800d590:	69fb      	ldr	r3, [r7, #28]
 800d592:	3301      	adds	r3, #1
 800d594:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	fa22 f303 	lsr.w	r3, r2, r3
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f47f ae63 	bne.w	800d26c <HAL_GPIO_Init+0x14>
  }
}
 800d5a6:	bf00      	nop
 800d5a8:	bf00      	nop
 800d5aa:	3724      	adds	r7, #36	; 0x24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	58000400 	.word	0x58000400

0800d5b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b087      	sub	sp, #28
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d5c6:	4b75      	ldr	r3, [pc, #468]	; (800d79c <HAL_GPIO_DeInit+0x1e4>)
 800d5c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800d5ca:	e0d9      	b.n	800d780 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d5d4:	683a      	ldr	r2, [r7, #0]
 800d5d6:	4013      	ands	r3, r2
 800d5d8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 80cc 	beq.w	800d77a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800d5e2:	4a6f      	ldr	r2, [pc, #444]	; (800d7a0 <HAL_GPIO_DeInit+0x1e8>)
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	089b      	lsrs	r3, r3, #2
 800d5e8:	3302      	adds	r3, #2
 800d5ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d5ee:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	f003 0303 	and.w	r3, r3, #3
 800d5f6:	009b      	lsls	r3, r3, #2
 800d5f8:	220f      	movs	r2, #15
 800d5fa:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	4013      	ands	r3, r2
 800d602:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	4a67      	ldr	r2, [pc, #412]	; (800d7a4 <HAL_GPIO_DeInit+0x1ec>)
 800d608:	4293      	cmp	r3, r2
 800d60a:	d037      	beq.n	800d67c <HAL_GPIO_DeInit+0xc4>
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	4a66      	ldr	r2, [pc, #408]	; (800d7a8 <HAL_GPIO_DeInit+0x1f0>)
 800d610:	4293      	cmp	r3, r2
 800d612:	d031      	beq.n	800d678 <HAL_GPIO_DeInit+0xc0>
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	4a65      	ldr	r2, [pc, #404]	; (800d7ac <HAL_GPIO_DeInit+0x1f4>)
 800d618:	4293      	cmp	r3, r2
 800d61a:	d02b      	beq.n	800d674 <HAL_GPIO_DeInit+0xbc>
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a64      	ldr	r2, [pc, #400]	; (800d7b0 <HAL_GPIO_DeInit+0x1f8>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d025      	beq.n	800d670 <HAL_GPIO_DeInit+0xb8>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a63      	ldr	r2, [pc, #396]	; (800d7b4 <HAL_GPIO_DeInit+0x1fc>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d01f      	beq.n	800d66c <HAL_GPIO_DeInit+0xb4>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a62      	ldr	r2, [pc, #392]	; (800d7b8 <HAL_GPIO_DeInit+0x200>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d019      	beq.n	800d668 <HAL_GPIO_DeInit+0xb0>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	4a61      	ldr	r2, [pc, #388]	; (800d7bc <HAL_GPIO_DeInit+0x204>)
 800d638:	4293      	cmp	r3, r2
 800d63a:	d013      	beq.n	800d664 <HAL_GPIO_DeInit+0xac>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a60      	ldr	r2, [pc, #384]	; (800d7c0 <HAL_GPIO_DeInit+0x208>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d00d      	beq.n	800d660 <HAL_GPIO_DeInit+0xa8>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a5f      	ldr	r2, [pc, #380]	; (800d7c4 <HAL_GPIO_DeInit+0x20c>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d007      	beq.n	800d65c <HAL_GPIO_DeInit+0xa4>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a5e      	ldr	r2, [pc, #376]	; (800d7c8 <HAL_GPIO_DeInit+0x210>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d101      	bne.n	800d658 <HAL_GPIO_DeInit+0xa0>
 800d654:	2309      	movs	r3, #9
 800d656:	e012      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d658:	230a      	movs	r3, #10
 800d65a:	e010      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d65c:	2308      	movs	r3, #8
 800d65e:	e00e      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d660:	2307      	movs	r3, #7
 800d662:	e00c      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d664:	2306      	movs	r3, #6
 800d666:	e00a      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d668:	2305      	movs	r3, #5
 800d66a:	e008      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d66c:	2304      	movs	r3, #4
 800d66e:	e006      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d670:	2303      	movs	r3, #3
 800d672:	e004      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d674:	2302      	movs	r3, #2
 800d676:	e002      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d678:	2301      	movs	r3, #1
 800d67a:	e000      	b.n	800d67e <HAL_GPIO_DeInit+0xc6>
 800d67c:	2300      	movs	r3, #0
 800d67e:	697a      	ldr	r2, [r7, #20]
 800d680:	f002 0203 	and.w	r2, r2, #3
 800d684:	0092      	lsls	r2, r2, #2
 800d686:	4093      	lsls	r3, r2
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	429a      	cmp	r2, r3
 800d68c:	d136      	bne.n	800d6fc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	43db      	mvns	r3, r3
 800d696:	401a      	ands	r2, r3
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	685a      	ldr	r2, [r3, #4]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	43db      	mvns	r3, r3
 800d6a4:	401a      	ands	r2, r3
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800d6aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6ae:	685a      	ldr	r2, [r3, #4]
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	43db      	mvns	r3, r3
 800d6b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800d6bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800d6c0:	681a      	ldr	r2, [r3, #0]
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	43db      	mvns	r3, r3
 800d6c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800d6ca:	4013      	ands	r3, r2
 800d6cc:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f003 0303 	and.w	r3, r3, #3
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	220f      	movs	r2, #15
 800d6d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d6dc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800d6de:	4a30      	ldr	r2, [pc, #192]	; (800d7a0 <HAL_GPIO_DeInit+0x1e8>)
 800d6e0:	697b      	ldr	r3, [r7, #20]
 800d6e2:	089b      	lsrs	r3, r3, #2
 800d6e4:	3302      	adds	r3, #2
 800d6e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	43da      	mvns	r2, r3
 800d6ee:	482c      	ldr	r0, [pc, #176]	; (800d7a0 <HAL_GPIO_DeInit+0x1e8>)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	089b      	lsrs	r3, r3, #2
 800d6f4:	400a      	ands	r2, r1
 800d6f6:	3302      	adds	r3, #2
 800d6f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	005b      	lsls	r3, r3, #1
 800d704:	2103      	movs	r1, #3
 800d706:	fa01 f303 	lsl.w	r3, r1, r3
 800d70a:	431a      	orrs	r2, r3
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	08da      	lsrs	r2, r3, #3
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	3208      	adds	r2, #8
 800d718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	f003 0307 	and.w	r3, r3, #7
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	220f      	movs	r2, #15
 800d726:	fa02 f303 	lsl.w	r3, r2, r3
 800d72a:	43db      	mvns	r3, r3
 800d72c:	697a      	ldr	r2, [r7, #20]
 800d72e:	08d2      	lsrs	r2, r2, #3
 800d730:	4019      	ands	r1, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	3208      	adds	r2, #8
 800d736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	68da      	ldr	r2, [r3, #12]
 800d73e:	697b      	ldr	r3, [r7, #20]
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	2103      	movs	r1, #3
 800d744:	fa01 f303 	lsl.w	r3, r1, r3
 800d748:	43db      	mvns	r3, r3
 800d74a:	401a      	ands	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	2101      	movs	r1, #1
 800d756:	697b      	ldr	r3, [r7, #20]
 800d758:	fa01 f303 	lsl.w	r3, r1, r3
 800d75c:	43db      	mvns	r3, r3
 800d75e:	401a      	ands	r2, r3
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	689a      	ldr	r2, [r3, #8]
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	005b      	lsls	r3, r3, #1
 800d76c:	2103      	movs	r1, #3
 800d76e:	fa01 f303 	lsl.w	r3, r1, r3
 800d772:	43db      	mvns	r3, r3
 800d774:	401a      	ands	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	609a      	str	r2, [r3, #8]
    }

    position++;
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	3301      	adds	r3, #1
 800d77e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800d780:	683a      	ldr	r2, [r7, #0]
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	fa22 f303 	lsr.w	r3, r2, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f47f af1f 	bne.w	800d5cc <HAL_GPIO_DeInit+0x14>
  }
}
 800d78e:	bf00      	nop
 800d790:	bf00      	nop
 800d792:	371c      	adds	r7, #28
 800d794:	46bd      	mov	sp, r7
 800d796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79a:	4770      	bx	lr
 800d79c:	58000080 	.word	0x58000080
 800d7a0:	58000400 	.word	0x58000400
 800d7a4:	58020000 	.word	0x58020000
 800d7a8:	58020400 	.word	0x58020400
 800d7ac:	58020800 	.word	0x58020800
 800d7b0:	58020c00 	.word	0x58020c00
 800d7b4:	58021000 	.word	0x58021000
 800d7b8:	58021400 	.word	0x58021400
 800d7bc:	58021800 	.word	0x58021800
 800d7c0:	58021c00 	.word	0x58021c00
 800d7c4:	58022000 	.word	0x58022000
 800d7c8:	58022400 	.word	0x58022400

0800d7cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	460b      	mov	r3, r1
 800d7d6:	807b      	strh	r3, [r7, #2]
 800d7d8:	4613      	mov	r3, r2
 800d7da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d7dc:	787b      	ldrb	r3, [r7, #1]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d7e2:	887a      	ldrh	r2, [r7, #2]
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800d7e8:	e003      	b.n	800d7f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800d7ea:	887b      	ldrh	r3, [r7, #2]
 800d7ec:	041a      	lsls	r2, r3, #16
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	619a      	str	r2, [r3, #24]
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d7fe:	b480      	push	{r7}
 800d800:	b085      	sub	sp, #20
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800d810:	887a      	ldrh	r2, [r7, #2]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	4013      	ands	r3, r2
 800d816:	041a      	lsls	r2, r3, #16
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	43d9      	mvns	r1, r3
 800d81c:	887b      	ldrh	r3, [r7, #2]
 800d81e:	400b      	ands	r3, r1
 800d820:	431a      	orrs	r2, r3
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	619a      	str	r2, [r3, #24]
}
 800d826:	bf00      	nop
 800d828:	3714      	adds	r7, #20
 800d82a:	46bd      	mov	sp, r7
 800d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d830:	4770      	bx	lr
	...

0800d834 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800d834:	b480      	push	{r7}
 800d836:	b083      	sub	sp, #12
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800d83c:	4a08      	ldr	r2, [pc, #32]	; (800d860 <HAL_HSEM_FastTake+0x2c>)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	3320      	adds	r3, #32
 800d842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d846:	4a07      	ldr	r2, [pc, #28]	; (800d864 <HAL_HSEM_FastTake+0x30>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d101      	bne.n	800d850 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	e000      	b.n	800d852 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800d850:	2301      	movs	r3, #1
}
 800d852:	4618      	mov	r0, r3
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	58026400 	.word	0x58026400
 800d864:	80000300 	.word	0x80000300

0800d868 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800d868:	b480      	push	{r7}
 800d86a:	b083      	sub	sp, #12
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800d872:	4906      	ldr	r1, [pc, #24]	; (800d88c <HAL_HSEM_Release+0x24>)
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800d880:	bf00      	nop
 800d882:	370c      	adds	r7, #12
 800d884:	46bd      	mov	sp, r7
 800d886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88a:	4770      	bx	lr
 800d88c:	58026400 	.word	0x58026400

0800d890 <HAL_I2C_Init>:

/**
  * @brief  Initializes the I2C according to the specified parameters
  *         in the I2C_InitTypeDef and initialize the associated handle.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  * @retval HAL status
  */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d101      	bne.n	800d8a2 <HAL_I2C_Init+0x12>
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e07f      	b.n	800d9a2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8a8:	b2db      	uxtb	r3, r3
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <HAL_I2C_Init+0x2c>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    if (hi2c->MspInitCallback == NULL)
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f8a9 	bl	800da0e <HAL_I2C_MspInit>
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2224      	movs	r2, #36	; 0x24
 800d8c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681a      	ldr	r2, [r3, #0]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f022 0201 	bic.w	r2, r2, #1
 800d8d2:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	685a      	ldr	r2, [r3, #4]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800d8e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	689a      	ldr	r2, [r3, #8]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d8f0:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d107      	bne.n	800d90a <HAL_I2C_Init+0x7a>
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	689a      	ldr	r2, [r3, #8]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d906:	609a      	str	r2, [r3, #8]
 800d908:	e006      	b.n	800d918 <HAL_I2C_Init+0x88>
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800d916:	609a      	str	r2, [r3, #8]
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
  }
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	68db      	ldr	r3, [r3, #12]
 800d91c:	2b02      	cmp	r3, #2
 800d91e:	d104      	bne.n	800d92a <HAL_I2C_Init+0x9a>

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d928:	605a      	str	r2, [r3, #4]
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6859      	ldr	r1, [r3, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681a      	ldr	r2, [r3, #0]
 800d934:	4b1d      	ldr	r3, [pc, #116]	; (800d9ac <HAL_I2C_Init+0x11c>)
 800d936:	430b      	orrs	r3, r1
 800d938:	6053      	str	r3, [r2, #4]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	68da      	ldr	r2, [r3, #12]
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d948:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	691a      	ldr	r2, [r3, #16]
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	695b      	ldr	r3, [r3, #20]
 800d952:	ea42 0103 	orr.w	r1, r2, r3
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	699b      	ldr	r3, [r3, #24]
 800d95a:	021a      	lsls	r2, r3, #8
  /* Disable Own Address2 before set the Own Address2 configuration */
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	430a      	orrs	r2, r1
 800d962:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	69d9      	ldr	r1, [r3, #28]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a1a      	ldr	r2, [r3, #32]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	430a      	orrs	r2, r1
 800d972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	681a      	ldr	r2, [r3, #0]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f042 0201 	orr.w	r2, r2, #1
 800d982:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2200      	movs	r2, #0
 800d988:	645a      	str	r2, [r3, #68]	; 0x44
  /* Enable the selected I2C peripheral */
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2220      	movs	r2, #32
 800d98e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  __HAL_I2C_ENABLE(hi2c);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	631a      	str	r2, [r3, #48]	; 0x30

 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 800d9a0:	2300      	movs	r3, #0
  hi2c->PreviousState = I2C_STATE_NONE;
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3708      	adds	r7, #8
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	bf00      	nop
 800d9ac:	02008000 	.word	0x02008000

0800d9b0 <HAL_I2C_DeInit>:
}

/**
  * @brief  DeInitialize the I2C peripheral.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
  * @retval HAL status
  */
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d101      	bne.n	800d9c2 <HAL_I2C_DeInit+0x12>
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800d9be:	2301      	movs	r3, #1
 800d9c0:	e021      	b.n	800da06 <HAL_I2C_DeInit+0x56>
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
  }

 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2224      	movs	r2, #36	; 0x24
 800d9c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	f022 0201 	bic.w	r2, r2, #1
 800d9d8:	601a      	str	r2, [r3, #0]
  if (hi2c->MspDeInitCallback == NULL)
  {
    hi2c->MspDeInitCallback = HAL_I2C_MspDeInit; /* Legacy weak MspDeInit  */
  }

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f000 f821 	bl	800da22 <HAL_I2C_MspDeInit>
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_I2C_MspDeInit(hi2c);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2200      	movs	r2, #0
 800d9f2:	631a      	str	r2, [r3, #48]	; 0x30

 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
  hi2c->PreviousState = I2C_STATE_NONE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hi2c->Mode = HAL_I2C_MODE_NONE;

 800da04:	2300      	movs	r3, #0
  /* Release Lock */
 800da06:	4618      	mov	r0, r3
 800da08:	3708      	adds	r7, #8
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}

0800da0e <HAL_I2C_MspInit>:
}

/**
  * @brief Initialize the I2C MSP.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

 800da16:	bf00      	nop
 800da18:	370c      	adds	r7, #12
 800da1a:	46bd      	mov	sp, r7
 800da1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da20:	4770      	bx	lr

0800da22 <HAL_I2C_MspDeInit>:
}

/**
  * @brief DeInitialize the I2C MSP.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800da22:	b480      	push	{r7}
 800da24:	b083      	sub	sp, #12
 800da26:	af00      	add	r7, sp, #0
 800da28:	6078      	str	r0, [r7, #4]
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

 800da2a:	bf00      	nop
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
	...

0800da38 <HAL_I2C_Mem_Write>:
    if (dmaxferstatus == HAL_OK)
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;

      /* Process Unlocked */
 800da38:	b580      	push	{r7, lr}
 800da3a:	b088      	sub	sp, #32
 800da3c:	af02      	add	r7, sp, #8
 800da3e:	60f8      	str	r0, [r7, #12]
 800da40:	4608      	mov	r0, r1
 800da42:	4611      	mov	r1, r2
 800da44:	461a      	mov	r2, r3
 800da46:	4603      	mov	r3, r0
 800da48:	817b      	strh	r3, [r7, #10]
 800da4a:	460b      	mov	r3, r1
 800da4c:	813b      	strh	r3, [r7, #8]
 800da4e:	4613      	mov	r3, r2
 800da50:	80fb      	strh	r3, [r7, #6]
      __HAL_UNLOCK(hi2c);

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da58:	b2db      	uxtb	r3, r3
 800da5a:	2b20      	cmp	r3, #32
 800da5c:	f040 80f9 	bne.w	800dc52 <HAL_I2C_Mem_Write+0x21a>
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);

 800da60:	6a3b      	ldr	r3, [r7, #32]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <HAL_I2C_Mem_Write+0x34>
 800da66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d105      	bne.n	800da78 <HAL_I2C_Mem_Write+0x40>
      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da72:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800da74:	2301      	movs	r3, #1
 800da76:	e0ed      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da7e:	2b01      	cmp	r3, #1
 800da80:	d101      	bne.n	800da86 <HAL_I2C_Mem_Write+0x4e>
 800da82:	2302      	movs	r3, #2
 800da84:	e0e6      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->Mode      = HAL_I2C_MODE_NONE;

      /* Update I2C error code */
 800da8e:	f7fe ffdf 	bl	800ca50 <HAL_GetTick>
 800da92:	6178      	str	r0, [r7, #20]
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;

 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	9300      	str	r3, [sp, #0]
 800da98:	2319      	movs	r3, #25
 800da9a:	2201      	movs	r2, #1
 800da9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 fadd 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800daa6:	4603      	mov	r3, r0
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d001      	beq.n	800dab0 <HAL_I2C_Mem_Write+0x78>
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800daac:	2301      	movs	r3, #1
 800daae:	e0d1      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>

      return HAL_ERROR;
    }
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2221      	movs	r2, #33	; 0x21
 800dab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	2240      	movs	r2, #64	; 0x40
 800dabc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    return HAL_OK;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  else
  {
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6a3a      	ldr	r2, [r7, #32]
 800daca:	625a      	str	r2, [r3, #36]	; 0x24
    return HAL_BUSY;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dad0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2200      	movs	r2, #0
 800dad6:	635a      	str	r2, [r3, #52]	; 0x34
}
/**
  * @brief  Write an amount of data in blocking mode to a specific memory address
 800dad8:	88f8      	ldrh	r0, [r7, #6]
 800dada:	893a      	ldrh	r2, [r7, #8]
 800dadc:	8979      	ldrh	r1, [r7, #10]
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	9301      	str	r3, [sp, #4]
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	9300      	str	r3, [sp, #0]
 800dae6:	4603      	mov	r3, r0
 800dae8:	68f8      	ldr	r0, [r7, #12]
 800daea:	f000 f9ed 	bl	800dec8 <I2C_RequestMemoryWrite>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d005      	beq.n	800db00 <HAL_I2C_Mem_Write+0xc8>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  DevAddress Target device address: The device 7 bits address value
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *         in datasheet must be shifted to the left before calling the interface
 800dafc:	2301      	movs	r3, #1
 800dafe:	e0a9      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db04:	b29b      	uxth	r3, r3
 800db06:	2bff      	cmp	r3, #255	; 0xff
 800db08:	d90e      	bls.n	800db28 <HAL_I2C_Mem_Write+0xf0>
  * @param  Timeout Timeout duration
  * @retval HAL status
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	22ff      	movs	r2, #255	; 0xff
 800db0e:	851a      	strh	r2, [r3, #40]	; 0x28
  */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db14:	b2da      	uxtb	r2, r3
 800db16:	8979      	ldrh	r1, [r7, #10]
 800db18:	2300      	movs	r3, #0
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f000 fc45 	bl	800e3b0 <I2C_TransferConfig>
 800db26:	e00f      	b.n	800db48 <HAL_I2C_Mem_Write+0x110>
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db2c:	b29a      	uxth	r2, r3
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	851a      	strh	r2, [r3, #40]	; 0x28

 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db36:	b2da      	uxtb	r2, r3
 800db38:	8979      	ldrh	r1, [r7, #10]
 800db3a:	2300      	movs	r3, #0
 800db3c:	9300      	str	r3, [sp, #0]
 800db3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f000 fc34 	bl	800e3b0 <I2C_TransferConfig>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    if ((pData == NULL) || (Size == 0U))
 800db48:	697a      	ldr	r2, [r7, #20]
 800db4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db4c:	68f8      	ldr	r0, [r7, #12]
 800db4e:	f000 fac7 	bl	800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <HAL_I2C_Mem_Write+0x124>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800db58:	2301      	movs	r3, #1
 800db5a:	e07b      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
      return  HAL_ERROR;
    }

    /* Process Locked */
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db60:	781a      	ldrb	r2, [r3, #0]
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	629a      	str	r2, [r3, #40]	; 0x28
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	625a      	str	r2, [r3, #36]	; 0x24
    tickstart = HAL_GetTick();

 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db76:	b29b      	uxth	r3, r3
 800db78:	3b01      	subs	r3, #1
 800db7a:	b29a      	uxth	r2, r3
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db84:	3b01      	subs	r3, #1
 800db86:	b29a      	uxth	r2, r3
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	851a      	strh	r2, [r3, #40]	; 0x28
    {
      return HAL_ERROR;
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db90:	b29b      	uxth	r3, r3
 800db92:	2b00      	cmp	r3, #0
 800db94:	d034      	beq.n	800dc00 <HAL_I2C_Mem_Write+0x1c8>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d130      	bne.n	800dc00 <HAL_I2C_Mem_Write+0x1c8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba4:	2200      	movs	r2, #0
 800dba6:	2180      	movs	r1, #128	; 0x80
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 fa59 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d001      	beq.n	800dbb8 <HAL_I2C_Mem_Write+0x180>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	e04d      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbbc:	b29b      	uxth	r3, r3
 800dbbe:	2bff      	cmp	r3, #255	; 0xff
 800dbc0:	d90e      	bls.n	800dbe0 <HAL_I2C_Mem_Write+0x1a8>
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	22ff      	movs	r2, #255	; 0xff
 800dbc6:	851a      	strh	r2, [r3, #40]	; 0x28

 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	8979      	ldrh	r1, [r7, #10]
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dbd8:	68f8      	ldr	r0, [r7, #12]
 800dbda:	f000 fbe9 	bl	800e3b0 <I2C_TransferConfig>
 800dbde:	e00f      	b.n	800dc00 <HAL_I2C_Mem_Write+0x1c8>
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	851a      	strh	r2, [r3, #40]	; 0x28
      return HAL_ERROR;
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dbee:	b2da      	uxtb	r2, r3
 800dbf0:	8979      	ldrh	r1, [r7, #10]
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dbfa:	68f8      	ldr	r0, [r7, #12]
 800dbfc:	f000 fbd8 	bl	800e3b0 <I2C_TransferConfig>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
    {
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d19e      	bne.n	800db48 <HAL_I2C_Mem_Write+0x110>
      hi2c->XferSize = MAX_NBYTE_SIZE;
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
    }
    else
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc0e:	68f8      	ldr	r0, [r7, #12]
 800dc10:	f000 faa6 	bl	800e160 <I2C_WaitOnSTOPFlagUntilTimeout>
 800dc14:	4603      	mov	r3, r0
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d001      	beq.n	800dc1e <HAL_I2C_Mem_Write+0x1e6>
    {
      hi2c->XferSize = hi2c->XferCount;
 800dc1a:	2301      	movs	r3, #1
 800dc1c:	e01a      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
    }

    do
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2220      	movs	r2, #32
 800dc24:	61da      	str	r2, [r3, #28]
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	6859      	ldr	r1, [r3, #4]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	4b0a      	ldr	r3, [pc, #40]	; (800dc5c <HAL_I2C_Mem_Write+0x224>)
 800dc32:	400b      	ands	r3, r1
 800dc34:	6053      	str	r3, [r2, #4]
      {
        return HAL_ERROR;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2220      	movs	r2, #32
 800dc3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      }
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	2200      	movs	r2, #0
 800dc4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Increment Buffer pointer */
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e000      	b.n	800dc54 <HAL_I2C_Mem_Write+0x21c>
      hi2c->pBuffPtr++;

      hi2c->XferCount--;
      hi2c->XferSize--;
 800dc52:	2302      	movs	r3, #2

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	fe00e800 	.word	0xfe00e800

0800dc60 <HAL_I2C_Mem_Read>:
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af02      	add	r7, sp, #8
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	4608      	mov	r0, r1
 800dc6a:	4611      	mov	r1, r2
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	4603      	mov	r3, r0
 800dc70:	817b      	strh	r3, [r7, #10]
 800dc72:	460b      	mov	r3, r1
 800dc74:	813b      	strh	r3, [r7, #8]
 800dc76:	4613      	mov	r3, r2
 800dc78:	80fb      	strh	r3, [r7, #6]
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);

 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b20      	cmp	r3, #32
 800dc84:	f040 80fd 	bne.w	800de82 <HAL_I2C_Mem_Read+0x222>
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
 800dc88:	6a3b      	ldr	r3, [r7, #32]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d002      	beq.n	800dc94 <HAL_I2C_Mem_Read+0x34>
 800dc8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d105      	bne.n	800dca0 <HAL_I2C_Mem_Read+0x40>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
    {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc9a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e0f1      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dca6:	2b01      	cmp	r3, #1
 800dca8:	d101      	bne.n	800dcae <HAL_I2C_Mem_Read+0x4e>
 800dcaa:	2302      	movs	r3, #2
 800dcac:	e0ea      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	2201      	movs	r2, #1
 800dcb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800dcb6:	f7fe fecb 	bl	800ca50 <HAL_GetTick>
 800dcba:	6178      	str	r0, [r7, #20]

    hi2c->State = HAL_I2C_STATE_READY;
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	9300      	str	r3, [sp, #0]
 800dcc0:	2319      	movs	r3, #25
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dcc8:	68f8      	ldr	r0, [r7, #12]
 800dcca:	f000 f9c9 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d001      	beq.n	800dcd8 <HAL_I2C_Mem_Read+0x78>
    hi2c->Mode  = HAL_I2C_MODE_NONE;

 800dcd4:	2301      	movs	r3, #1
 800dcd6:	e0d5      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2222      	movs	r2, #34	; 0x22
 800dcdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    return HAL_OK;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2240      	movs	r2, #64	; 0x40
 800dce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	645a      	str	r2, [r3, #68]	; 0x44
  else
  {
    return HAL_BUSY;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6a3a      	ldr	r2, [r7, #32]
 800dcf2:	625a      	str	r2, [r3, #36]	; 0x24
  }
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800dcf8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	635a      	str	r2, [r3, #52]	; 0x34

/**
  * @brief  Read an amount of data in blocking mode from a specific memory address
 800dd00:	88f8      	ldrh	r0, [r7, #6]
 800dd02:	893a      	ldrh	r2, [r7, #8]
 800dd04:	8979      	ldrh	r1, [r7, #10]
 800dd06:	697b      	ldr	r3, [r7, #20]
 800dd08:	9301      	str	r3, [sp, #4]
 800dd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd0c:	9300      	str	r3, [sp, #0]
 800dd0e:	4603      	mov	r3, r0
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f000 f92d 	bl	800df70 <I2C_RequestMemoryRead>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d005      	beq.n	800dd28 <HAL_I2C_Mem_Read+0xc8>
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @param  DevAddress Target device address: The device 7 bits address value
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *         in datasheet must be shifted to the left before calling the interface
 800dd24:	2301      	movs	r3, #1
 800dd26:	e0ad      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
  * @param  MemAddress Internal memory address
  * @param  MemAddSize Size of internal memory address
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	2bff      	cmp	r3, #255	; 0xff
 800dd30:	d90e      	bls.n	800dd50 <HAL_I2C_Mem_Read+0xf0>
  * @retval HAL status
  */
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	22ff      	movs	r2, #255	; 0xff
 800dd36:	851a      	strh	r2, [r3, #40]	; 0x28
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd3c:	b2da      	uxtb	r2, r3
 800dd3e:	8979      	ldrh	r1, [r7, #10]
 800dd40:	4b52      	ldr	r3, [pc, #328]	; (800de8c <HAL_I2C_Mem_Read+0x22c>)
 800dd42:	9300      	str	r3, [sp, #0]
 800dd44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f000 fb31 	bl	800e3b0 <I2C_TransferConfig>
 800dd4e:	e00f      	b.n	800dd70 <HAL_I2C_Mem_Read+0x110>
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
  uint32_t tickstart;

  /* Check the parameters */
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd54:	b29a      	uxth	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	851a      	strh	r2, [r3, #40]	; 0x28
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	8979      	ldrh	r1, [r7, #10]
 800dd62:	4b4a      	ldr	r3, [pc, #296]	; (800de8c <HAL_I2C_Mem_Read+0x22c>)
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800dd6a:	68f8      	ldr	r0, [r7, #12]
 800dd6c:	f000 fb20 	bl	800e3b0 <I2C_TransferConfig>
  if (hi2c->State == HAL_I2C_STATE_READY)
  {
    if ((pData == NULL) || (Size == 0U))
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
      return  HAL_ERROR;
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd76:	2200      	movs	r2, #0
 800dd78:	2104      	movs	r1, #4
 800dd7a:	68f8      	ldr	r0, [r7, #12]
 800dd7c:	f000 f970 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800dd80:	4603      	mov	r3, r0
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d001      	beq.n	800dd8a <HAL_I2C_Mem_Read+0x12a>
    }

 800dd86:	2301      	movs	r3, #1
 800dd88:	e07c      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
    /* Process Locked */
    __HAL_LOCK(hi2c);

    /* Init tickstart for timeout management*/
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd94:	b2d2      	uxtb	r2, r2
 800dd96:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd9c:	1c5a      	adds	r2, r3, #1
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	625a      	str	r2, [r3, #36]	; 0x24
    {
      return HAL_ERROR;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda6:	3b01      	subs	r3, #1
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	851a      	strh	r2, [r3, #40]	; 0x28
    }
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddc0:	b29b      	uxth	r3, r3
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d034      	beq.n	800de30 <HAL_I2C_Mem_Read+0x1d0>
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d130      	bne.n	800de30 <HAL_I2C_Mem_Read+0x1d0>
    hi2c->Mode      = HAL_I2C_MODE_MEM;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;

 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	9300      	str	r3, [sp, #0]
 800ddd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddd4:	2200      	movs	r2, #0
 800ddd6:	2180      	movs	r1, #128	; 0x80
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 f941 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <HAL_I2C_Mem_Read+0x188>
    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800dde4:	2301      	movs	r3, #1
 800dde6:	e04d      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
    hi2c->XferCount = Size;
    hi2c->XferISR   = NULL;

 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	2bff      	cmp	r3, #255	; 0xff
 800ddf0:	d90e      	bls.n	800de10 <HAL_I2C_Mem_Read+0x1b0>
    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	22ff      	movs	r2, #255	; 0xff
 800ddf6:	851a      	strh	r2, [r3, #40]	; 0x28
    {
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ddfc:	b2da      	uxtb	r2, r3
 800ddfe:	8979      	ldrh	r1, [r7, #10]
 800de00:	2300      	movs	r3, #0
 800de02:	9300      	str	r3, [sp, #0]
 800de04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de08:	68f8      	ldr	r0, [r7, #12]
 800de0a:	f000 fad1 	bl	800e3b0 <I2C_TransferConfig>
 800de0e:	e00f      	b.n	800de30 <HAL_I2C_Mem_Read+0x1d0>
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
      return HAL_ERROR;
    }

 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de14:	b29a      	uxth	r2, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	851a      	strh	r2, [r3, #40]	; 0x28
    /* Send Slave Address */
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	8979      	ldrh	r1, [r7, #10]
 800de22:	2300      	movs	r3, #0
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800de2a:	68f8      	ldr	r0, [r7, #12]
 800de2c:	f000 fac0 	bl	800e3b0 <I2C_TransferConfig>
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800de34:	b29b      	uxth	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d19a      	bne.n	800dd70 <HAL_I2C_Mem_Read+0x110>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
                         I2C_GENERATE_START_READ);
    }
    else
 800de3a:	697a      	ldr	r2, [r7, #20]
 800de3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de3e:	68f8      	ldr	r0, [r7, #12]
 800de40:	f000 f98e 	bl	800e160 <I2C_WaitOnSTOPFlagUntilTimeout>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d001      	beq.n	800de4e <HAL_I2C_Mem_Read+0x1ee>
    {
      hi2c->XferSize = hi2c->XferCount;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e01a      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
                         I2C_GENERATE_START_READ);
    }

 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2220      	movs	r2, #32
 800de54:	61da      	str	r2, [r3, #28]
    do
    {
      /* Wait until RXNE flag is set */
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6859      	ldr	r1, [r3, #4]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681a      	ldr	r2, [r3, #0]
 800de60:	4b0b      	ldr	r3, [pc, #44]	; (800de90 <HAL_I2C_Mem_Read+0x230>)
 800de62:	400b      	ands	r3, r1
 800de64:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
      {
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	2220      	movs	r2, #32
 800de6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        return HAL_ERROR;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Read data from RXDR */
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;

 800de7e:	2300      	movs	r3, #0
 800de80:	e000      	b.n	800de84 <HAL_I2C_Mem_Read+0x224>
      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;

      hi2c->XferSize--;
 800de82:	2302      	movs	r3, #2
      hi2c->XferCount--;

 800de84:	4618      	mov	r0, r3
 800de86:	3718      	adds	r7, #24
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	80002400 	.word	0x80002400
 800de90:	fe00e800 	.word	0xfe00e800

0800de94 <HAL_I2C_GetState>:
}

/**
  * @brief  I2C error callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
 800de94:	b480      	push	{r7}
 800de96:	b083      	sub	sp, #12
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
  * @retval None
  */
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dea2:	b2db      	uxtb	r3, r3
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 800dea4:	4618      	mov	r0, r3
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <HAL_I2C_GetError>:
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  /* NOTE : This function should not be modified, when the callback is needed,
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
 800debc:	4618      	mov	r0, r3
 800debe:	370c      	adds	r7, #12
 800dec0:	46bd      	mov	sp, r7
 800dec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec6:	4770      	bx	lr

0800dec8 <I2C_RequestMemoryWrite>:
    if (hi2c->XferCount == 0U)
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af02      	add	r7, sp, #8
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	4608      	mov	r0, r1
 800ded2:	4611      	mov	r1, r2
 800ded4:	461a      	mov	r2, r3
 800ded6:	4603      	mov	r3, r0
 800ded8:	817b      	strh	r3, [r7, #10]
 800deda:	460b      	mov	r3, r1
 800dedc:	813b      	strh	r3, [r7, #8]
 800dede:	4613      	mov	r3, r2
 800dee0:	80fb      	strh	r3, [r7, #6]
        {
 800dee2:	88fb      	ldrh	r3, [r7, #6]
 800dee4:	b2da      	uxtb	r2, r3
 800dee6:	8979      	ldrh	r1, [r7, #10]
 800dee8:	4b20      	ldr	r3, [pc, #128]	; (800df6c <I2C_RequestMemoryWrite+0xa4>)
 800deea:	9300      	str	r3, [sp, #0]
 800deec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	f000 fa5d 	bl	800e3b0 <I2C_TransferConfig>
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
        }
 800def6:	69fa      	ldr	r2, [r7, #28]
 800def8:	69b9      	ldr	r1, [r7, #24]
 800defa:	68f8      	ldr	r0, [r7, #12]
 800defc:	f000 f8f0 	bl	800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d001      	beq.n	800df0a <I2C_RequestMemoryWrite+0x42>
        else
        {
 800df06:	2301      	movs	r3, #1
 800df08:	e02c      	b.n	800df64 <I2C_RequestMemoryWrite+0x9c>
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
        }
      }
 800df0a:	88fb      	ldrh	r3, [r7, #6]
 800df0c:	2b01      	cmp	r3, #1
 800df0e:	d105      	bne.n	800df1c <I2C_RequestMemoryWrite+0x54>
    }
    else
    {
 800df10:	893b      	ldrh	r3, [r7, #8]
 800df12:	b2da      	uxtb	r2, r3
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	629a      	str	r2, [r3, #40]	; 0x28
 800df1a:	e015      	b.n	800df48 <I2C_RequestMemoryWrite+0x80>
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800df1c:	893b      	ldrh	r3, [r7, #8]
 800df1e:	0a1b      	lsrs	r3, r3, #8
 800df20:	b29b      	uxth	r3, r3
 800df22:	b2da      	uxtb	r2, r3
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	629a      	str	r2, [r3, #40]	; 0x28
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
  {
    /* Call I2C Master complete process */
 800df2a:	69fa      	ldr	r2, [r7, #28]
 800df2c:	69b9      	ldr	r1, [r7, #24]
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f000 f8d6 	bl	800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d001      	beq.n	800df3e <I2C_RequestMemoryWrite+0x76>
    I2C_ITMasterCplt(hi2c, ITFlags);
  }
 800df3a:	2301      	movs	r3, #1
 800df3c:	e012      	b.n	800df64 <I2C_RequestMemoryWrite+0x9c>
  else
  {
    /* Nothing to do */
  }
 800df3e:	893b      	ldrh	r3, [r7, #8]
 800df40:	b2da      	uxtb	r2, r3
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	629a      	str	r2, [r3, #40]	; 0x28

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);

 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	2200      	movs	r2, #0
 800df50:	2180      	movs	r1, #128	; 0x80
 800df52:	68f8      	ldr	r0, [r7, #12]
 800df54:	f000 f884 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800df58:	4603      	mov	r3, r0
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <I2C_RequestMemoryWrite+0x9a>
  return HAL_OK;
}
 800df5e:	2301      	movs	r3, #1
 800df60:	e000      	b.n	800df64 <I2C_RequestMemoryWrite+0x9c>

/**
  * @brief  Interrupt Sub-Routine which handle the Interrupt Flags Memory Mode with DMA.
 800df62:	2300      	movs	r3, #0
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 800df64:	4618      	mov	r0, r3
 800df66:	3710      	adds	r7, #16
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	80002000 	.word	0x80002000

0800df70 <I2C_RequestMemoryRead>:
  __HAL_LOCK(hi2c);

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
  {
    /* Clear NACK Flag */
 800df70:	b580      	push	{r7, lr}
 800df72:	b086      	sub	sp, #24
 800df74:	af02      	add	r7, sp, #8
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	4608      	mov	r0, r1
 800df7a:	4611      	mov	r1, r2
 800df7c:	461a      	mov	r2, r3
 800df7e:	4603      	mov	r3, r0
 800df80:	817b      	strh	r3, [r7, #10]
 800df82:	460b      	mov	r3, r1
 800df84:	813b      	strh	r3, [r7, #8]
 800df86:	4613      	mov	r3, r2
 800df88:	80fb      	strh	r3, [r7, #6]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800df8a:	88fb      	ldrh	r3, [r7, #6]
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	8979      	ldrh	r1, [r7, #10]
 800df90:	4b20      	ldr	r3, [pc, #128]	; (800e014 <I2C_RequestMemoryRead+0xa4>)
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	2300      	movs	r3, #0
 800df96:	68f8      	ldr	r0, [r7, #12]
 800df98:	f000 fa0a 	bl	800e3b0 <I2C_TransferConfig>

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800df9c:	69fa      	ldr	r2, [r7, #28]
 800df9e:	69b9      	ldr	r1, [r7, #24]
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 f89d 	bl	800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <I2C_RequestMemoryRead+0x40>

    /* No need to generate STOP, it is automatically done */
 800dfac:	2301      	movs	r3, #1
 800dfae:	e02c      	b.n	800e00a <I2C_RequestMemoryRead+0x9a>
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);

 800dfb0:	88fb      	ldrh	r3, [r7, #6]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d105      	bne.n	800dfc2 <I2C_RequestMemoryRead+0x52>
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
  }
 800dfb6:	893b      	ldrh	r3, [r7, #8]
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	629a      	str	r2, [r3, #40]	; 0x28
 800dfc0:	e015      	b.n	800dfee <I2C_RequestMemoryRead+0x7e>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;

 800dfc2:	893b      	ldrh	r3, [r7, #8]
 800dfc4:	0a1b      	lsrs	r3, r3, #8
 800dfc6:	b29b      	uxth	r3, r3
 800dfc8:	b2da      	uxtb	r2, r3
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	629a      	str	r2, [r3, #40]	; 0x28
    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
  }
 800dfd0:	69fa      	ldr	r2, [r7, #28]
 800dfd2:	69b9      	ldr	r1, [r7, #24]
 800dfd4:	68f8      	ldr	r0, [r7, #12]
 800dfd6:	f000 f883 	bl	800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <I2C_RequestMemoryRead+0x74>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e012      	b.n	800e00a <I2C_RequestMemoryRead+0x9a>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);

 800dfe4:	893b      	ldrh	r3, [r7, #8]
 800dfe6:	b2da      	uxtb	r2, r3
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	629a      	str	r2, [r3, #40]	; 0x28
    if (hi2c->XferCount != 0U)
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	2200      	movs	r2, #0
 800dff6:	2140      	movs	r1, #64	; 0x40
 800dff8:	68f8      	ldr	r0, [r7, #12]
 800dffa:	f000 f831 	bl	800e060 <I2C_WaitOnFlagUntilTimeout>
 800dffe:	4603      	mov	r3, r0
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <I2C_RequestMemoryRead+0x98>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <I2C_RequestMemoryRead+0x9a>
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
 800e008:	2300      	movs	r3, #0
      else
 800e00a:	4618      	mov	r0, r3
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	80002000 	.word	0x80002000

0800e018 <I2C_Flush_TXDR>:
  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);

 800e018:	b480      	push	{r7}
 800e01a:	b083      	sub	sp, #12
 800e01c:	af00      	add	r7, sp, #0
 800e01e:	6078      	str	r0, [r7, #4]
  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);

 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	699b      	ldr	r3, [r3, #24]
 800e026:	f003 0302 	and.w	r3, r3, #2
 800e02a:	2b02      	cmp	r3, #2
 800e02c:	d103      	bne.n	800e036 <I2C_Flush_TXDR+0x1e>
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	629a      	str	r2, [r3, #40]	; 0x28
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;

 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	699b      	ldr	r3, [r3, #24]
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	2b01      	cmp	r3, #1
 800e042:	d007      	beq.n	800e054 <I2C_Flush_TXDR+0x3c>
    if (hi2c->hdmatx != NULL)
    {
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 0201 	orr.w	r2, r2, #1
 800e052:	619a      	str	r2, [r3, #24]
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
    }
 800e054:	bf00      	nop
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <I2C_WaitOnFlagUntilTimeout>:
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
    }

 800e060:	b580      	push	{r7, lr}
 800e062:	b084      	sub	sp, #16
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	603b      	str	r3, [r7, #0]
 800e06c:	4613      	mov	r3, r2
 800e06e:	71fb      	strb	r3, [r7, #7]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e070:	e022      	b.n	800e0b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e078:	d01e      	beq.n	800e0b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;

 800e07a:	f7fe fce9 	bl	800ca50 <HAL_GetTick>
 800e07e:	4602      	mov	r2, r0
 800e080:	69bb      	ldr	r3, [r7, #24]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	683a      	ldr	r2, [r7, #0]
 800e086:	429a      	cmp	r2, r3
 800e088:	d302      	bcc.n	800e090 <I2C_WaitOnFlagUntilTimeout+0x30>
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d113      	bne.n	800e0b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e094:	f043 0220 	orr.w	r2, r3, #32
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	645a      	str	r2, [r3, #68]	; 0x44

 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2220      	movs	r2, #32
 800e0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Abort DMA TX */
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
      {
        /* Call Directly XferAbortCallback function in case of error */
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	e00f      	b.n	800e0d8 <I2C_WaitOnFlagUntilTimeout+0x78>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	699a      	ldr	r2, [r3, #24]
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	4013      	ands	r3, r2
 800e0c2:	68ba      	ldr	r2, [r7, #8]
 800e0c4:	429a      	cmp	r2, r3
 800e0c6:	bf0c      	ite	eq
 800e0c8:	2301      	moveq	r3, #1
 800e0ca:	2300      	movne	r3, #0
 800e0cc:	b2db      	uxtb	r3, r3
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	79fb      	ldrb	r3, [r7, #7]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d0cd      	beq.n	800e072 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
    else
    {
 800e0d6:	2300      	movs	r3, #0
      I2C_TreatErrorCallback(hi2c);
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}

0800e0e0 <I2C_WaitOnTXISFlagUntilTimeout>:
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	60f8      	str	r0, [r7, #12]
 800e0e8:	60b9      	str	r1, [r7, #8]
 800e0ea:	607a      	str	r2, [r7, #4]
    {
 800e0ec:	e02c      	b.n	800e148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	68b9      	ldr	r1, [r7, #8]
 800e0f2:	68f8      	ldr	r0, [r7, #12]
 800e0f4:	f000 f870 	bl	800e1d8 <I2C_IsErrorOccurred>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d001      	beq.n	800e102 <I2C_WaitOnTXISFlagUntilTimeout+0x22>

      /* Process Unlocked */
 800e0fe:	2301      	movs	r3, #1
 800e100:	e02a      	b.n	800e158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
      __HAL_UNLOCK(hi2c);

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e108:	d01e      	beq.n	800e148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
 800e10a:	f7fe fca1 	bl	800ca50 <HAL_GetTick>
 800e10e:	4602      	mov	r2, r0
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	1ad3      	subs	r3, r2, r3
 800e114:	68ba      	ldr	r2, [r7, #8]
 800e116:	429a      	cmp	r2, r3
 800e118:	d302      	bcc.n	800e120 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d113      	bne.n	800e148 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
      }
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e124:	f043 0220 	orr.w	r2, r3, #32
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	645a      	str	r2, [r3, #68]	; 0x44
    }
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2220      	movs	r2, #32
 800e130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    else
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2200      	movs	r2, #0
 800e138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    {
      I2C_TreatErrorCallback(hi2c);
    }
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }
  else
 800e144:	2301      	movs	r3, #1
 800e146:	e007      	b.n	800e158 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    {
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	699b      	ldr	r3, [r3, #24]
 800e14e:	f003 0302 	and.w	r3, r3, #2
 800e152:	2b02      	cmp	r3, #2
 800e154:	d1cb      	bne.n	800e0ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    I2C_TreatErrorCallback(hi2c);
  }
}
 800e156:	2300      	movs	r3, #0

 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
  if (hi2c->State == HAL_I2C_STATE_ABORT)
  {
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->PreviousState = I2C_STATE_NONE;

 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	607a      	str	r2, [r7, #4]
    /* Process Unlocked */
 800e16c:	e028      	b.n	800e1c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    __HAL_UNLOCK(hi2c);

    /* Call the corresponding callback to inform upper layer of End of Transfer */
 800e16e:	687a      	ldr	r2, [r7, #4]
 800e170:	68b9      	ldr	r1, [r7, #8]
 800e172:	68f8      	ldr	r0, [r7, #12]
 800e174:	f000 f830 	bl	800e1d8 <I2C_IsErrorOccurred>
 800e178:	4603      	mov	r3, r0
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d001      	beq.n	800e182 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 800e17e:	2301      	movs	r3, #1
 800e180:	e026      	b.n	800e1d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
#else
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
 800e182:	f7fe fc65 	bl	800ca50 <HAL_GetTick>
 800e186:	4602      	mov	r2, r0
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d302      	bcc.n	800e198 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d113      	bne.n	800e1c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  else
  {
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e19c:	f043 0220 	orr.w	r2, r3, #32
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->PreviousState = I2C_STATE_NONE;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2220      	movs	r2, #32
 800e1a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);

 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
 800e1bc:	2301      	movs	r3, #1
 800e1be:	e007      	b.n	800e1d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    /* Process Unlocked */
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	f003 0320 	and.w	r3, r3, #32
 800e1ca:	2b20      	cmp	r3, #32
 800e1cc:	d1cf      	bne.n	800e16e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800e1ce:	2300      	movs	r3, #0
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3710      	adds	r7, #16
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	bd80      	pop	{r7, pc}

0800e1d8 <I2C_IsErrorOccurred>:
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
  uint32_t tmpoptions = hi2c->XferOptions;
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b08a      	sub	sp, #40	; 0x28
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	60f8      	str	r0, [r7, #12]
 800e1e0:	60b9      	str	r1, [r7, #8]
 800e1e2:	607a      	str	r2, [r7, #4]

 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	61bb      	str	r3, [r7, #24]
  {
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	623b      	str	r3, [r7, #32]
    /* Disable DMA Request */
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	61fb      	str	r3, [r7, #28]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	f003 0310 	and.w	r3, r3, #16
 800e200:	2b00      	cmp	r3, #0
 800e202:	d075      	beq.n	800e2f0 <I2C_IsErrorOccurred+0x118>
    I2C_ITSlaveSeqCplt(hi2c);
  }
  else
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2210      	movs	r2, #16
 800e20a:	61da      	str	r2, [r3, #28]
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
 800e20c:	e056      	b.n	800e2bc <I2C_IsErrorOccurred+0xe4>
  }
}

 800e20e:	68bb      	ldr	r3, [r7, #8]
 800e210:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e214:	d052      	beq.n	800e2bc <I2C_IsErrorOccurred+0xe4>
/**
  * @brief DMA I2C master receive process complete callback.
 800e216:	f7fe fc1b 	bl	800ca50 <HAL_GetTick>
 800e21a:	4602      	mov	r2, r0
 800e21c:	69fb      	ldr	r3, [r7, #28]
 800e21e:	1ad3      	subs	r3, r2, r3
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	429a      	cmp	r2, r3
 800e224:	d302      	bcc.n	800e22c <I2C_IsErrorOccurred+0x54>
 800e226:	68bb      	ldr	r3, [r7, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d147      	bne.n	800e2bc <I2C_IsErrorOccurred+0xe4>
  * @param  hdma DMA handle
  * @retval None
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	685b      	ldr	r3, [r3, #4]
 800e232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e236:	617b      	str	r3, [r7, #20]
  */
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e23e:	74fb      	strb	r3, [r7, #19]
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e24a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e24e:	d12e      	bne.n	800e2ae <I2C_IsErrorOccurred+0xd6>
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e256:	d02a      	beq.n	800e2ae <I2C_IsErrorOccurred+0xd6>
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e258:	7cfb      	ldrb	r3, [r7, #19]
 800e25a:	2b20      	cmp	r3, #32
 800e25c:	d027      	beq.n	800e2ae <I2C_IsErrorOccurred+0xd6>

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;

 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e26c:	605a      	str	r2, [r3, #4]
  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
  {
 800e26e:	f7fe fbef 	bl	800ca50 <HAL_GetTick>
 800e272:	61f8      	str	r0, [r7, #28]
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
  }
 800e274:	e01b      	b.n	800e2ae <I2C_IsErrorOccurred+0xd6>
  /* else prepare a new DMA transfer and enable TCReload interrupt */
  else
  {
 800e276:	f7fe fbeb 	bl	800ca50 <HAL_GetTick>
 800e27a:	4602      	mov	r2, r0
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	1ad3      	subs	r3, r2, r3
 800e280:	2b19      	cmp	r3, #25
 800e282:	d914      	bls.n	800e2ae <I2C_IsErrorOccurred+0xd6>
    /* Update Buffer pointer */
    hi2c->pBuffPtr += hi2c->XferSize;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e288:	f043 0220 	orr.w	r2, r3, #32
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	645a      	str	r2, [r3, #68]	; 0x44

 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2220      	movs	r2, #32
 800e294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Set the XferSize to transfer */
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    }
    else
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	f003 0320 	and.w	r3, r3, #32
 800e2b8:	2b20      	cmp	r3, #32
 800e2ba:	d1dc      	bne.n	800e276 <I2C_IsErrorOccurred+0x9e>
    /* So STOP condition should be manage through Interrupt treatment */
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	699b      	ldr	r3, [r3, #24]
 800e2c2:	f003 0320 	and.w	r3, r3, #32
 800e2c6:	2b20      	cmp	r3, #32
 800e2c8:	d003      	beq.n	800e2d2 <I2C_IsErrorOccurred+0xfa>
 800e2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d09d      	beq.n	800e20e <I2C_IsErrorOccurred+0x36>
    }

    /* Enable the DMA stream or channel depends on Instance */
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
                         hi2c->XferSize) != HAL_OK)
    {
 800e2d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d103      	bne.n	800e2e2 <I2C_IsErrorOccurred+0x10a>
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
    }
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	2220      	movs	r2, #32
 800e2e0:	61da      	str	r2, [r3, #28]
    else
    {
      /* Enable TC interrupts */
 800e2e2:	6a3b      	ldr	r3, [r7, #32]
 800e2e4:	f043 0304 	orr.w	r3, r3, #4
 800e2e8:	623b      	str	r3, [r7, #32]
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
}

/**
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	699b      	ldr	r3, [r3, #24]
 800e2f6:	61bb      	str	r3, [r7, #24]
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
 800e2f8:	69bb      	ldr	r3, [r7, #24]
 800e2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00b      	beq.n	800e31a <I2C_IsErrorOccurred+0x142>
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e302:	6a3b      	ldr	r3, [r7, #32]
 800e304:	f043 0301 	orr.w	r3, r3, #1
 800e308:	623b      	str	r3, [r7, #32]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
  uint32_t tmpoptions = hi2c->XferOptions;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e312:	61da      	str	r2, [r3, #28]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 800e314:	2301      	movs	r3, #1
 800e316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00b      	beq.n	800e33c <I2C_IsErrorOccurred+0x164>

    /* Call I2C Slave Sequential complete process */
 800e324:	6a3b      	ldr	r3, [r7, #32]
 800e326:	f043 0308 	orr.w	r3, r3, #8
 800e32a:	623b      	str	r3, [r7, #32]
    I2C_ITSlaveSeqCplt(hi2c);
  }
  else
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e334:	61da      	str	r2, [r3, #28]
  {
    /* No specific action, Master fully manage the generation of STOP condition */
 800e336:	2301      	movs	r3, #1
 800e338:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e342:	2b00      	cmp	r3, #0
 800e344:	d00b      	beq.n	800e35e <I2C_IsErrorOccurred+0x186>

/**
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	f043 0302 	orr.w	r3, r3, #2
 800e34c:	623b      	str	r3, [r7, #32]
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e356:	61da      	str	r2, [r3, #28]
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
 800e358:	2301      	movs	r3, #1
 800e35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
{
  uint32_t treatdmaerror = 0U;
  /* Derogation MISRAC2012-Rule-11.5 */
 800e35e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e362:	2b00      	cmp	r3, #0
 800e364:	d01c      	beq.n	800e3a0 <I2C_IsErrorOccurred+0x1c8>
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);

  if (hi2c->hdmatx != NULL)
 800e366:	68f8      	ldr	r0, [r7, #12]
 800e368:	f7ff fe56 	bl	800e018 <I2C_Flush_TXDR>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
    {
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	6859      	ldr	r1, [r3, #4]
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	4b0d      	ldr	r3, [pc, #52]	; (800e3ac <I2C_IsErrorOccurred+0x1d4>)
 800e378:	400b      	ands	r3, r1
 800e37a:	6053      	str	r3, [r2, #4]
      treatdmaerror = 1U;
    }
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e380:	6a3b      	ldr	r3, [r7, #32]
 800e382:	431a      	orrs	r2, r3
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	645a      	str	r2, [r3, #68]	; 0x44
  }
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2220      	movs	r2, #32
 800e38c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  if (hi2c->hdmarx != NULL)
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2200      	movs	r2, #0
 800e39c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    {
      treatdmaerror = 1U;
    }
 800e3a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
  }
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3728      	adds	r7, #40	; 0x28
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	fe00e800 	.word	0xfe00e800

0800e3b0 <I2C_TransferConfig>:
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);

 800e3b0:	b480      	push	{r7}
 800e3b2:	b087      	sub	sp, #28
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	60f8      	str	r0, [r7, #12]
 800e3b8:	607b      	str	r3, [r7, #4]
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	817b      	strh	r3, [r7, #10]
 800e3be:	4613      	mov	r3, r2
 800e3c0:	727b      	strb	r3, [r7, #9]
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
  }
  if (hi2c->hdmarx != NULL)
  {
 800e3c2:	897b      	ldrh	r3, [r7, #10]
 800e3c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e3c8:	7a7b      	ldrb	r3, [r7, #9]
 800e3ca:	041b      	lsls	r3, r3, #16
 800e3cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  {
 800e3d0:	431a      	orrs	r2, r3
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	431a      	orrs	r2, r3
  {
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	4313      	orrs	r3, r2
 800e3da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e3de:	617b      	str	r3, [r7, #20]
  }

  I2C_TreatErrorCallback(hi2c);
}
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	6a3b      	ldr	r3, [r7, #32]
 800e3e8:	0d5b      	lsrs	r3, r3, #21
 800e3ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e3ee:	4b08      	ldr	r3, [pc, #32]	; (800e410 <I2C_TransferConfig+0x60>)
 800e3f0:	430b      	orrs	r3, r1
 800e3f2:	43db      	mvns	r3, r3
 800e3f4:	ea02 0103 	and.w	r1, r2, r3
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	697a      	ldr	r2, [r7, #20]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	605a      	str	r2, [r3, #4]

/**
  * @brief  This function handles I2C Communication Timeout. It waits
  *                until a flag is no longer in the specified status.
 800e402:	bf00      	nop
 800e404:	371c      	adds	r7, #28
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	03ff63ff 	.word	0x03ff63ff

0800e414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800e414:	b480      	push	{r7}
 800e416:	b083      	sub	sp, #12
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e424:	b2db      	uxtb	r3, r3
 800e426:	2b20      	cmp	r3, #32
 800e428:	d138      	bne.n	800e49c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e430:	2b01      	cmp	r3, #1
 800e432:	d101      	bne.n	800e438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800e434:	2302      	movs	r3, #2
 800e436:	e032      	b.n	800e49e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2224      	movs	r2, #36	; 0x24
 800e444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	f022 0201 	bic.w	r2, r2, #1
 800e456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	681a      	ldr	r2, [r3, #0]
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800e466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	6819      	ldr	r1, [r3, #0]
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	430a      	orrs	r2, r1
 800e476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f042 0201 	orr.w	r2, r2, #1
 800e486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2220      	movs	r2, #32
 800e48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e498:	2300      	movs	r3, #0
 800e49a:	e000      	b.n	800e49e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800e49c:	2302      	movs	r3, #2
  }
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	370c      	adds	r7, #12
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800e4aa:	b480      	push	{r7}
 800e4ac:	b085      	sub	sp, #20
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
 800e4b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	2b20      	cmp	r3, #32
 800e4be:	d139      	bne.n	800e534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4c6:	2b01      	cmp	r3, #1
 800e4c8:	d101      	bne.n	800e4ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800e4ca:	2302      	movs	r3, #2
 800e4cc:	e033      	b.n	800e536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2224      	movs	r2, #36	; 0x24
 800e4da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	f022 0201 	bic.w	r2, r2, #1
 800e4ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800e4fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	021b      	lsls	r3, r3, #8
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	4313      	orrs	r3, r2
 800e506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f042 0201 	orr.w	r2, r2, #1
 800e51e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2220      	movs	r2, #32
 800e524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e530:	2300      	movs	r3, #0
 800e532:	e000      	b.n	800e536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800e534:	2302      	movs	r3, #2
  }
}
 800e536:	4618      	mov	r0, r3
 800e538:	3714      	adds	r7, #20
 800e53a:	46bd      	mov	sp, r7
 800e53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e540:	4770      	bx	lr
	...

0800e544 <HAL_LTDC_Init>:
@endverbatim
  * @{
  */

/**
  * @brief  Initialize the LTDC according to the specified parameters in the LTDC_InitTypeDef.
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d101      	bne.n	800e556 <HAL_LTDC_Init+0x12>
{
  uint32_t tmp;
 800e552:	2301      	movs	r3, #1
 800e554:	e0bf      	b.n	800e6d6 <HAL_LTDC_Init+0x192>
    hltdc->ReloadEventCallback = HAL_LTDC_ReloadEventCallback;  /* Legacy weak ReloadEventCallback  */
    hltdc->ErrorCallback       = HAL_LTDC_ErrorCallback;        /* Legacy weak ErrorCallback        */

    if (hltdc->MspInitCallback == NULL)
    {
      hltdc->MspInitCallback = HAL_LTDC_MspInit;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800e55c:	b2db      	uxtb	r3, r3
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d106      	bne.n	800e570 <HAL_LTDC_Init+0x2c>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2200      	movs	r2, #0
 800e566:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  }
#else
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7f2 fc1e 	bl	8000dac <HAL_LTDC_MspInit>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2202      	movs	r2, #2
 800e574:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
    HAL_LTDC_MspInit(hltdc);
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800e586:	619a      	str	r2, [r3, #24]

 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	6999      	ldr	r1, [r3, #24]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	689b      	ldr	r3, [r3, #8]
 800e596:	431a      	orrs	r2, r3
  /* Change LTDC peripheral state */
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	68db      	ldr	r3, [r3, #12]

 800e59c:	431a      	orrs	r2, r3
  /* Change LTDC peripheral state */
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	691b      	ldr	r3, [r3, #16]
 800e5a2:	431a      	orrs	r2, r3

 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	430a      	orrs	r2, r1
 800e5aa:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6899      	ldr	r1, [r3, #8]
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681a      	ldr	r2, [r3, #0]
 800e5b6:	4b4a      	ldr	r3, [pc, #296]	; (800e6e0 <HAL_LTDC_Init+0x19c>)
 800e5b8:	400b      	ands	r3, r1
 800e5ba:	6093      	str	r3, [r2, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	695b      	ldr	r3, [r3, #20]
 800e5c0:	041b      	lsls	r3, r3, #16
 800e5c2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6899      	ldr	r1, [r3, #8]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	699a      	ldr	r2, [r3, #24]
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	431a      	orrs	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	430a      	orrs	r2, r1
 800e5d8:	609a      	str	r2, [r3, #8]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);

  /* Set Synchronization size */
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	68d9      	ldr	r1, [r3, #12]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681a      	ldr	r2, [r3, #0]
 800e5e4:	4b3e      	ldr	r3, [pc, #248]	; (800e6e0 <HAL_LTDC_Init+0x19c>)
 800e5e6:	400b      	ands	r3, r1
 800e5e8:	60d3      	str	r3, [r2, #12]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	69db      	ldr	r3, [r3, #28]
 800e5ee:	041b      	lsls	r3, r3, #16
 800e5f0:	60fb      	str	r3, [r7, #12]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68d9      	ldr	r1, [r3, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	6a1a      	ldr	r2, [r3, #32]
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	431a      	orrs	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	430a      	orrs	r2, r1
 800e606:	60da      	str	r2, [r3, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Set Accumulated Back porch */
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6919      	ldr	r1, [r3, #16]
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681a      	ldr	r2, [r3, #0]
 800e612:	4b33      	ldr	r3, [pc, #204]	; (800e6e0 <HAL_LTDC_Init+0x19c>)
 800e614:	400b      	ands	r3, r1
 800e616:	6113      	str	r3, [r2, #16]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e61c:	041b      	lsls	r3, r3, #16
 800e61e:	60fb      	str	r3, [r7, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	6919      	ldr	r1, [r3, #16]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	431a      	orrs	r2, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	430a      	orrs	r2, r1
 800e634:	611a      	str	r2, [r3, #16]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);

  /* Set Accumulated Active Width */
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	6959      	ldr	r1, [r3, #20]
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681a      	ldr	r2, [r3, #0]
 800e640:	4b27      	ldr	r3, [pc, #156]	; (800e6e0 <HAL_LTDC_Init+0x19c>)
 800e642:	400b      	ands	r3, r1
 800e644:	6153      	str	r3, [r2, #20]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e64a:	041b      	lsls	r3, r3, #16
 800e64c:	60fb      	str	r3, [r7, #12]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6959      	ldr	r1, [r3, #20]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	431a      	orrs	r2, r3
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	430a      	orrs	r2, r1
 800e662:	615a      	str	r2, [r3, #20]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);

  /* Set Total Width */
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e66a:	021b      	lsls	r3, r3, #8
 800e66c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e674:	041b      	lsls	r3, r3, #16
 800e676:	60bb      	str	r3, [r7, #8]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800e686:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e68e:	68ba      	ldr	r2, [r7, #8]
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	4313      	orrs	r3, r2
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800e69a:	431a      	orrs	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	430a      	orrs	r2, r1
 800e6a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f042 0206 	orr.w	r2, r2, #6
 800e6b2:	635a      	str	r2, [r3, #52]	; 0x34
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	699a      	ldr	r2, [r3, #24]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f042 0201 	orr.w	r2, r2, #1
 800e6c2:	619a      	str	r2, [r3, #24]

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Initialize the error code */
 800e6d4:	2300      	movs	r3, #0
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	f000f800 	.word	0xf000f800

0800e6e4 <HAL_LTDC_IRQHandler>:

@endverbatim
  * @{
  */
/**
  * @brief  Handle LTDC interrupt request.
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f2:	60fb      	str	r3, [r7, #12]
  *                the configuration information for the LTDC.
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6fa:	60bb      	str	r3, [r7, #8]
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	2b00      	cmp	r3, #0
 800e704:	d023      	beq.n	800e74e <HAL_LTDC_IRQHandler+0x6a>
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	f003 0304 	and.w	r3, r3, #4
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d01e      	beq.n	800e74e <HAL_LTDC_IRQHandler+0x6a>
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f022 0204 	bic.w	r2, r2, #4
 800e71e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2204      	movs	r2, #4
 800e726:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e72e:	f043 0201 	orr.w	r2, r3, #1
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2204      	movs	r2, #4
 800e73c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2200      	movs	r2, #0
 800e744:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_ERROR;

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);

    /* Transfer error Callback */
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 f86f 	bl	800e82c <HAL_LTDC_ErrorCallback>
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f003 0302 	and.w	r3, r3, #2
 800e754:	2b00      	cmp	r3, #0
 800e756:	d023      	beq.n	800e7a0 <HAL_LTDC_IRQHandler+0xbc>
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	f003 0302 	and.w	r3, r3, #2
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d01e      	beq.n	800e7a0 <HAL_LTDC_IRQHandler+0xbc>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f022 0202 	bic.w	r2, r2, #2
 800e770:	635a      	str	r2, [r3, #52]	; 0x34

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2202      	movs	r2, #2
 800e778:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e780:	f043 0202 	orr.w	r2, r3, #2
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	2204      	movs	r2, #4
 800e78e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2200      	movs	r2, #0
 800e796:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_ERROR;

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);

    /* Transfer error Callback */
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f000 f846 	bl	800e82c <HAL_LTDC_ErrorCallback>
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f003 0301 	and.w	r3, r3, #1
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d01b      	beq.n	800e7e2 <HAL_LTDC_IRQHandler+0xfe>
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	f003 0301 	and.w	r3, r3, #1
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d016      	beq.n	800e7e2 <HAL_LTDC_IRQHandler+0xfe>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f022 0201 	bic.w	r2, r2, #1
 800e7c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	2201      	movs	r2, #1
 800e7ca:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);

    /* Line interrupt Callback */
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f7f5 f9a3 	bl	8003b28 <HAL_LTDC_LineEventCallback>
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	f003 0308 	and.w	r3, r3, #8
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d01b      	beq.n	800e824 <HAL_LTDC_IRQHandler+0x140>
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	f003 0308 	and.w	r3, r3, #8
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d016      	beq.n	800e824 <HAL_LTDC_IRQHandler+0x140>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f022 0208 	bic.w	r2, r2, #8
 800e804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2208      	movs	r2, #8
 800e80c:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2201      	movs	r2, #1
 800e812:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2200      	movs	r2, #0
 800e81a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    hltdc->State = HAL_LTDC_STATE_READY;

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);

    /* Reload interrupt Callback */
 800e81e:	6878      	ldr	r0, [r7, #4]
 800e820:	f000 f80e 	bl	800e840 <HAL_LTDC_ReloadEventCallback>
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
 800e824:	bf00      	nop
 800e826:	3710      	adds	r7, #16
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <HAL_LTDC_ErrorCallback>:
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}

/**
  * @brief  Error LTDC callback.
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
  /* Prevent unused argument(s) compilation warning */
 800e834:	bf00      	nop
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <HAL_LTDC_ReloadEventCallback>:
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}

/**
  * @brief  Reload Event callback.
 800e840:	b480      	push	{r7}
 800e842:	b083      	sub	sp, #12
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
  /* Prevent unused argument(s) compilation warning */
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <HAL_LTDC_ConfigLayer>:
  *         parameters in the LTDC_InitTypeDef and create the associated handle.
  * @param  hltdc      pointer to a LTDC_HandleTypeDef structure that contains
  *                    the configuration information for the LTDC.
  * @param  pLayerCfg  pointer to a LTDC_LayerCfgTypeDef structure that contains
  *                    the configuration information for the Layer.
  * @param  LayerIdx  LTDC Layer index.
 800e854:	b5b0      	push	{r4, r5, r7, lr}
 800e856:	b084      	sub	sp, #16
 800e858:	af00      	add	r7, sp, #0
 800e85a:	60f8      	str	r0, [r7, #12]
 800e85c:	60b9      	str	r1, [r7, #8]
 800e85e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_VCONFIGST(pLayerCfg->WindowY0));
  assert_param(IS_LTDC_VCONFIGSP(pLayerCfg->WindowY1));
  assert_param(IS_LTDC_PIXEL_FORMAT(pLayerCfg->PixelFormat));
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha));
  assert_param(IS_LTDC_ALPHA(pLayerCfg->Alpha0));
  assert_param(IS_LTDC_BLENDING_FACTOR1(pLayerCfg->BlendingFactor1));
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e866:	2b01      	cmp	r3, #1
 800e868:	d101      	bne.n	800e86e <HAL_LTDC_ConfigLayer+0x1a>
 800e86a:	2302      	movs	r3, #2
 800e86c:	e02c      	b.n	800e8c8 <HAL_LTDC_ConfigLayer+0x74>
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2201      	movs	r2, #1
 800e872:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	2202      	movs	r2, #2
 800e87a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2134      	movs	r1, #52	; 0x34
 800e884:	fb01 f303 	mul.w	r3, r1, r3
 800e888:	4413      	add	r3, r2
 800e88a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	4614      	mov	r4, r2
 800e892:	461d      	mov	r5, r3
 800e894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e89a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e89c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8a0:	682b      	ldr	r3, [r5, #0]
 800e8a2:	6023      	str	r3, [r4, #0]

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	68f8      	ldr	r0, [r7, #12]
 800e8aa:	f000 f849 	bl	800e940 <LTDC_SetConfig>

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Initialize the LTDC state*/
 800e8c6:	2300      	movs	r3, #0
  hltdc->State  = HAL_LTDC_STATE_READY;
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bdb0      	pop	{r4, r5, r7, pc}

0800e8d0 <HAL_LTDC_ProgramLineEvent>:
}

/**
  * @brief  Define the position of the line interrupt.
  * @param  hltdc   pointer to a LTDC_HandleTypeDef structure that contains
  *                 the configuration information for the LTDC.
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800e8e0:	2b01      	cmp	r3, #1
 800e8e2:	d101      	bne.n	800e8e8 <HAL_LTDC_ProgramLineEvent+0x18>
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	e023      	b.n	800e930 <HAL_LTDC_ProgramLineEvent+0x60>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
{
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process locked */
  __HAL_LOCK(hltdc);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f022 0201 	bic.w	r2, r2, #1
 800e906:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800e908:	4a0c      	ldr	r2, [pc, #48]	; (800e93c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800e90a:	683b      	ldr	r3, [r7, #0]
 800e90c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f042 0201 	orr.w	r2, r2, #1
 800e91c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change the LTDC state*/
 800e92e:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr
 800e93c:	50001000 	.word	0x50001000

0800e940 <LTDC_SetConfig>:

/**
  * @brief  Configure the LTDC peripheral
  * @param  hltdc     Pointer to a LTDC_HandleTypeDef structure that contains
  *                   the configuration information for the LTDC.
  * @param  pLayerCfg Pointer LTDC Layer Configuration structure
 800e940:	b480      	push	{r7}
 800e942:	b089      	sub	sp, #36	; 0x24
 800e944:	af00      	add	r7, sp, #0
 800e946:	60f8      	str	r0, [r7, #12]
 800e948:	60b9      	str	r1, [r7, #8]
 800e94a:	607a      	str	r2, [r7, #4]
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	685a      	ldr	r2, [r3, #4]
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	68db      	ldr	r3, [r3, #12]
 800e956:	0c1b      	lsrs	r3, r3, #16
 800e958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e95c:	4413      	add	r3, r2
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp;
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	461a      	mov	r2, r3
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	01db      	lsls	r3, r3, #7
 800e96c:	4413      	add	r3, r2
 800e96e:	3384      	adds	r3, #132	; 0x84
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	68fa      	ldr	r2, [r7, #12]
 800e974:	6812      	ldr	r2, [r2, #0]
 800e976:	4611      	mov	r1, r2
 800e978:	687a      	ldr	r2, [r7, #4]
 800e97a:	01d2      	lsls	r2, r2, #7
 800e97c:	440a      	add	r2, r1
 800e97e:	3284      	adds	r2, #132	; 0x84
 800e980:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800e984:	6053      	str	r3, [r2, #4]
  uint32_t tmp1;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	681a      	ldr	r2, [r3, #0]
  uint32_t tmp2;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	0c1b      	lsrs	r3, r3, #16
 800e992:	f3c3 030b 	ubfx	r3, r3, #0, #12
  uint32_t tmp1;
 800e996:	4413      	add	r3, r2
  uint32_t tmp2;
 800e998:	1c5a      	adds	r2, r3, #1
  uint32_t tmp1;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	01db      	lsls	r3, r3, #7
 800e9a4:	440b      	add	r3, r1
 800e9a6:	3384      	adds	r3, #132	; 0x84
 800e9a8:	4619      	mov	r1, r3
  uint32_t tmp2;
 800e9aa:	69fb      	ldr	r3, [r7, #28]
 800e9ac:	4313      	orrs	r3, r2
  uint32_t tmp1;
 800e9ae:	604b      	str	r3, [r1, #4]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	68da      	ldr	r2, [r3, #12]
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9be:	4413      	add	r3, r2
 800e9c0:	041b      	lsls	r3, r3, #16
 800e9c2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	01db      	lsls	r3, r3, #7
 800e9ce:	4413      	add	r3, r2
 800e9d0:	3384      	adds	r3, #132	; 0x84
 800e9d2:	689b      	ldr	r3, [r3, #8]
 800e9d4:	68fa      	ldr	r2, [r7, #12]
 800e9d6:	6812      	ldr	r2, [r2, #0]
 800e9d8:	4611      	mov	r1, r2
 800e9da:	687a      	ldr	r2, [r7, #4]
 800e9dc:	01d2      	lsls	r2, r2, #7
 800e9de:	440a      	add	r2, r1
 800e9e0:	3284      	adds	r2, #132	; 0x84
 800e9e2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800e9e6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	689a      	ldr	r2, [r3, #8]
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	68db      	ldr	r3, [r3, #12]
 800e9f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e9f6:	4413      	add	r3, r2
 800e9f8:	1c5a      	adds	r2, r3, #1
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	4619      	mov	r1, r3
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	01db      	lsls	r3, r3, #7
 800ea04:	440b      	add	r3, r1
 800ea06:	3384      	adds	r3, #132	; 0x84
 800ea08:	4619      	mov	r1, r3
 800ea0a:	69fb      	ldr	r3, [r7, #28]
 800ea0c:	4313      	orrs	r3, r2
 800ea0e:	608b      	str	r3, [r1, #8]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);

  /* Configure the vertical start and stop position */
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	461a      	mov	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	01db      	lsls	r3, r3, #7
 800ea1a:	4413      	add	r3, r2
 800ea1c:	3384      	adds	r3, #132	; 0x84
 800ea1e:	691b      	ldr	r3, [r3, #16]
 800ea20:	68fa      	ldr	r2, [r7, #12]
 800ea22:	6812      	ldr	r2, [r2, #0]
 800ea24:	4611      	mov	r1, r2
 800ea26:	687a      	ldr	r2, [r7, #4]
 800ea28:	01d2      	lsls	r2, r2, #7
 800ea2a:	440a      	add	r2, r1
 800ea2c:	3284      	adds	r2, #132	; 0x84
 800ea2e:	f023 0307 	bic.w	r3, r3, #7
 800ea32:	6113      	str	r3, [r2, #16]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	461a      	mov	r2, r3
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	01db      	lsls	r3, r3, #7
 800ea3e:	4413      	add	r3, r2
 800ea40:	3384      	adds	r3, #132	; 0x84
 800ea42:	461a      	mov	r2, r3
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);

 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ea50:	021b      	lsls	r3, r3, #8
 800ea52:	61fb      	str	r3, [r7, #28]
  /* Specifies the pixel format */
 800ea54:	68bb      	ldr	r3, [r7, #8]
 800ea56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800ea5a:	041b      	lsls	r3, r3, #16
 800ea5c:	61bb      	str	r3, [r7, #24]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	699b      	ldr	r3, [r3, #24]
 800ea62:	061b      	lsls	r3, r3, #24
 800ea64:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	01db      	lsls	r3, r3, #7
 800ea70:	4413      	add	r3, r2
 800ea72:	3384      	adds	r3, #132	; 0x84
 800ea74:	699b      	ldr	r3, [r3, #24]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	01db      	lsls	r3, r3, #7
 800ea80:	4413      	add	r3, r2
 800ea82:	3384      	adds	r3, #132	; 0x84
 800ea84:	461a      	mov	r2, r3
 800ea86:	2300      	movs	r3, #0
 800ea88:	6193      	str	r3, [r2, #24]

  /* Configure the default color values */
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ea90:	461a      	mov	r2, r3
 800ea92:	69fb      	ldr	r3, [r7, #28]
 800ea94:	431a      	orrs	r2, r3
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	431a      	orrs	r2, r3
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	01db      	lsls	r3, r3, #7
 800eaa4:	440b      	add	r3, r1
 800eaa6:	3384      	adds	r3, #132	; 0x84
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	697b      	ldr	r3, [r7, #20]
 800eaac:	4313      	orrs	r3, r2
 800eaae:	618b      	str	r3, [r1, #24]
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	461a      	mov	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	01db      	lsls	r3, r3, #7
 800eaba:	4413      	add	r3, r2
 800eabc:	3384      	adds	r3, #132	; 0x84
 800eabe:	695b      	ldr	r3, [r3, #20]
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	6812      	ldr	r2, [r2, #0]
 800eac4:	4611      	mov	r1, r2
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	01d2      	lsls	r2, r2, #7
 800eaca:	440a      	add	r2, r1
 800eacc:	3284      	adds	r2, #132	; 0x84
 800eace:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ead2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	461a      	mov	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	01db      	lsls	r3, r3, #7
 800eade:	4413      	add	r3, r2
 800eae0:	3384      	adds	r3, #132	; 0x84
 800eae2:	461a      	mov	r2, r3
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	695b      	ldr	r3, [r3, #20]
 800eae8:	6153      	str	r3, [r2, #20]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);

 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	461a      	mov	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	01db      	lsls	r3, r3, #7
 800eaf4:	4413      	add	r3, r2
 800eaf6:	3384      	adds	r3, #132	; 0x84
 800eaf8:	69da      	ldr	r2, [r3, #28]
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4619      	mov	r1, r3
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	01db      	lsls	r3, r3, #7
 800eb04:	440b      	add	r3, r1
 800eb06:	3384      	adds	r3, #132	; 0x84
 800eb08:	4619      	mov	r1, r3
 800eb0a:	4b58      	ldr	r3, [pc, #352]	; (800ec6c <LTDC_SetConfig+0x32c>)
 800eb0c:	4013      	ands	r3, r2
 800eb0e:	61cb      	str	r3, [r1, #28]
  /* Specifies the constant alpha value */
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	69da      	ldr	r2, [r3, #28]
 800eb14:	68bb      	ldr	r3, [r7, #8]
 800eb16:	6a1b      	ldr	r3, [r3, #32]
 800eb18:	68f9      	ldr	r1, [r7, #12]
 800eb1a:	6809      	ldr	r1, [r1, #0]
 800eb1c:	4608      	mov	r0, r1
 800eb1e:	6879      	ldr	r1, [r7, #4]
 800eb20:	01c9      	lsls	r1, r1, #7
 800eb22:	4401      	add	r1, r0
 800eb24:	3184      	adds	r1, #132	; 0x84
 800eb26:	4313      	orrs	r3, r2
 800eb28:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	461a      	mov	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	01db      	lsls	r3, r3, #7
 800eb34:	4413      	add	r3, r2
 800eb36:	3384      	adds	r3, #132	; 0x84
 800eb38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	461a      	mov	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	01db      	lsls	r3, r3, #7
 800eb44:	4413      	add	r3, r2
 800eb46:	3384      	adds	r3, #132	; 0x84
 800eb48:	461a      	mov	r2, r3
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	6293      	str	r3, [r2, #40]	; 0x28
  /* Specifies the blending factors */
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	461a      	mov	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	01db      	lsls	r3, r3, #7
 800eb58:	4413      	add	r3, r2
 800eb5a:	3384      	adds	r3, #132	; 0x84
 800eb5c:	461a      	mov	r2, r3
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb62:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800eb64:	68bb      	ldr	r3, [r7, #8]
 800eb66:	691b      	ldr	r3, [r3, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d102      	bne.n	800eb72 <LTDC_SetConfig+0x232>

  /* Configure the color frame buffer start address */
 800eb6c:	2304      	movs	r3, #4
 800eb6e:	61fb      	str	r3, [r7, #28]
 800eb70:	e01b      	b.n	800ebaa <LTDC_SetConfig+0x26a>
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800eb72:	68bb      	ldr	r3, [r7, #8]
 800eb74:	691b      	ldr	r3, [r3, #16]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d102      	bne.n	800eb80 <LTDC_SetConfig+0x240>

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800eb7a:	2303      	movs	r3, #3
 800eb7c:	61fb      	str	r3, [r7, #28]
 800eb7e:	e014      	b.n	800ebaa <LTDC_SetConfig+0x26a>
  {
    tmp = 4U;
 800eb80:	68bb      	ldr	r3, [r7, #8]
 800eb82:	691b      	ldr	r3, [r3, #16]
 800eb84:	2b04      	cmp	r3, #4
 800eb86:	d00b      	beq.n	800eba0 <LTDC_SetConfig+0x260>
  }
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	691b      	ldr	r3, [r3, #16]
    tmp = 4U;
 800eb8c:	2b02      	cmp	r3, #2
 800eb8e:	d007      	beq.n	800eba0 <LTDC_SetConfig+0x260>
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	691b      	ldr	r3, [r3, #16]
  }
 800eb94:	2b03      	cmp	r3, #3
 800eb96:	d003      	beq.n	800eba0 <LTDC_SetConfig+0x260>
  {
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	691b      	ldr	r3, [r3, #16]
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800eb9c:	2b07      	cmp	r3, #7
 800eb9e:	d102      	bne.n	800eba6 <LTDC_SetConfig+0x266>
    tmp = 3U;
  }
 800eba0:	2302      	movs	r3, #2
 800eba2:	61fb      	str	r3, [r7, #28]
 800eba4:	e001      	b.n	800ebaa <LTDC_SetConfig+0x26a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800eba6:	2301      	movs	r3, #1
 800eba8:	61fb      	str	r3, [r7, #28]
  {
    tmp = 2U;
  }
  else
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	461a      	mov	r2, r3
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	01db      	lsls	r3, r3, #7
 800ebb4:	4413      	add	r3, r2
 800ebb6:	3384      	adds	r3, #132	; 0x84
 800ebb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebba:	68fa      	ldr	r2, [r7, #12]
 800ebbc:	6812      	ldr	r2, [r2, #0]
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	01d2      	lsls	r2, r2, #7
 800ebc4:	440a      	add	r2, r1
 800ebc6:	3284      	adds	r2, #132	; 0x84
 800ebc8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800ebcc:	62d3      	str	r3, [r2, #44]	; 0x2c
  {
 800ebce:	68bb      	ldr	r3, [r7, #8]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd2:	69fa      	ldr	r2, [r7, #28]
 800ebd4:	fb02 f303 	mul.w	r3, r2, r3
 800ebd8:	041a      	lsls	r2, r3, #16
 800ebda:	68bb      	ldr	r3, [r7, #8]
 800ebdc:	6859      	ldr	r1, [r3, #4]
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	1acb      	subs	r3, r1, r3
 800ebe4:	69f9      	ldr	r1, [r7, #28]
 800ebe6:	fb01 f303 	mul.w	r3, r1, r3
 800ebea:	3307      	adds	r3, #7
 800ebec:	68f9      	ldr	r1, [r7, #12]
 800ebee:	6809      	ldr	r1, [r1, #0]
 800ebf0:	4608      	mov	r0, r1
 800ebf2:	6879      	ldr	r1, [r7, #4]
 800ebf4:	01c9      	lsls	r1, r1, #7
 800ebf6:	4401      	add	r1, r0
 800ebf8:	3184      	adds	r1, #132	; 0x84
 800ebfa:	4313      	orrs	r3, r2
 800ebfc:	62cb      	str	r3, [r1, #44]	; 0x2c
    tmp = 1U;
  }
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	01db      	lsls	r3, r3, #7
 800ec08:	4413      	add	r3, r2
 800ec0a:	3384      	adds	r3, #132	; 0x84
 800ec0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	4619      	mov	r1, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	01db      	lsls	r3, r3, #7
 800ec18:	440b      	add	r3, r1
 800ec1a:	3384      	adds	r3, #132	; 0x84
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4b14      	ldr	r3, [pc, #80]	; (800ec70 <LTDC_SetConfig+0x330>)
 800ec20:	4013      	ands	r3, r2
 800ec22:	630b      	str	r3, [r1, #48]	; 0x30

 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	461a      	mov	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	01db      	lsls	r3, r3, #7
 800ec2e:	4413      	add	r3, r2
 800ec30:	3384      	adds	r3, #132	; 0x84
 800ec32:	461a      	mov	r2, r3
 800ec34:	68bb      	ldr	r3, [r7, #8]
 800ec36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec38:	6313      	str	r3, [r2, #48]	; 0x30
  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	461a      	mov	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	01db      	lsls	r3, r3, #7
 800ec44:	4413      	add	r3, r2
 800ec46:	3384      	adds	r3, #132	; 0x84
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	68fa      	ldr	r2, [r7, #12]
 800ec4c:	6812      	ldr	r2, [r2, #0]
 800ec4e:	4611      	mov	r1, r2
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	01d2      	lsls	r2, r2, #7
 800ec54:	440a      	add	r2, r1
 800ec56:	3284      	adds	r2, #132	; 0x84
 800ec58:	f043 0301 	orr.w	r3, r3, #1
 800ec5c:	6013      	str	r3, [r2, #0]
  /* Configure the frame buffer line number */
 800ec5e:	bf00      	nop
 800ec60:	3724      	adds	r7, #36	; 0x24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec68:	4770      	bx	lr
 800ec6a:	bf00      	nop
 800ec6c:	fffff8f8 	.word	0xfffff8f8
 800ec70:	fffff800 	.word	0xfffff800

0800ec74 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b084      	sub	sp, #16
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ec7c:	f7fd fee8 	bl	800ca50 <HAL_GetTick>
 800ec80:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800ec88:	2301      	movs	r3, #1
 800ec8a:	e03b      	b.n	800ed04 <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2202      	movs	r2, #2
 800ec98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68da      	ldr	r2, [r3, #12]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	f022 0201 	bic.w	r2, r2, #1
 800ecaa:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ecac:	e00f      	b.n	800ecce <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800ecae:	f7fd fecf 	bl	800ca50 <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2b05      	cmp	r3, #5
 800ecba:	d908      	bls.n	800ecce <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2240      	movs	r2, #64	; 0x40
 800ecc0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2203      	movs	r2, #3
 800ecc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      return HAL_ERROR;
 800ecca:	2301      	movs	r3, #1
 800eccc:	e01a      	b.n	800ed04 <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1e8      	bne.n	800ecae <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f894 	bl	800ee0a <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	2201      	movs	r2, #1
 800ecfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed02:	2300      	movs	r3, #0
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3710      	adds	r7, #16
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	b083      	sub	sp, #12
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d101      	bne.n	800ed1e <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	e048      	b.n	800edb0 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	68da      	ldr	r2, [r3, #12]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f022 0201 	bic.w	r2, r2, #1
 800ed2c:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	2200      	movs	r2, #0
 800ed34:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	2200      	movs	r2, #0
 800ed44:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	2200      	movs	r2, #0
 800ed54:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	2200      	movs	r2, #0
 800ed64:	625a      	str	r2, [r3, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	2200      	movs	r2, #0
 800ed74:	631a      	str	r2, [r3, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	221f      	movs	r2, #31
 800ed84:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	661a      	str	r2, [r3, #96]	; 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edae:	2300      	movs	r3, #0
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <HAL_MDMA_Abort_IT>:
  * @param  hmdma  : pointer to a MDMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Abort_IT(MDMA_HandleTypeDef *hmdma)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <HAL_MDMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800edca:	2301      	movs	r3, #1
 800edcc:	e017      	b.n	800edfe <HAL_MDMA_Abort_IT+0x42>
  }

  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edd4:	b2db      	uxtb	r3, r3
 800edd6:	2b02      	cmp	r3, #2
 800edd8:	d004      	beq.n	800ede4 <HAL_MDMA_Abort_IT+0x28>
  {
    /* No transfer ongoing */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2280      	movs	r2, #128	; 0x80
 800edde:	669a      	str	r2, [r3, #104]	; 0x68

    return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e00c      	b.n	800edfe <HAL_MDMA_Abort_IT+0x42>
  }
  else
  {
    /* Set Abort State  */
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2204      	movs	r2, #4
 800ede8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the stream */
    __HAL_MDMA_DISABLE(hmdma);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	68da      	ldr	r2, [r3, #12]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f022 0201 	bic.w	r2, r2, #1
 800edfa:	60da      	str	r2, [r3, #12]
  }

  return HAL_OK;
 800edfc:	2300      	movs	r3, #0
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b085      	sub	sp, #20
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	68d9      	ldr	r1, [r3, #12]
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	691a      	ldr	r2, [r3, #16]
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	430a      	orrs	r2, r1
 800ee20:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	695a      	ldr	r2, [r3, #20]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ee30:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800ee3c:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee42:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800ee48:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee4e:	3b01      	subs	r3, #1
 800ee50:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800ee52:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800ee5e:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800ee60:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	685b      	ldr	r3, [r3, #4]
 800ee66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee6a:	d107      	bne.n	800ee7c <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	691a      	ldr	r2, [r3, #16]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800ee7a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2200      	movs	r2, #0
 800ee82:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	da11      	bge.n	800eeb0 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	695a      	ldr	r2, [r3, #20]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ee9a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea0:	425b      	negs	r3, r3
 800eea2:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	b292      	uxth	r2, r2
 800eeac:	621a      	str	r2, [r3, #32]
 800eeae:	e006      	b.n	800eebe <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeb4:	461a      	mov	r2, r3
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	b292      	uxth	r2, r2
 800eebc:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	da15      	bge.n	800eef2 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	695a      	ldr	r2, [r3, #20]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800eed4:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeda:	425b      	negs	r3, r3
 800eedc:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	6a19      	ldr	r1, [r3, #32]
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	041a      	lsls	r2, r3, #16
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	430a      	orrs	r2, r1
 800eeee:	621a      	str	r2, [r3, #32]
 800eef0:	e009      	b.n	800ef06 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	6a19      	ldr	r1, [r3, #32]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eefc:	041a      	lsls	r2, r3, #16
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	430a      	orrs	r2, r1
 800ef04:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	685b      	ldr	r3, [r3, #4]
 800ef0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ef0e:	d006      	beq.n	800ef1e <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	685a      	ldr	r2, [r3, #4]
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	b2d2      	uxtb	r2, r2
 800ef1a:	629a      	str	r2, [r3, #40]	; 0x28
 800ef1c:	e003      	b.n	800ef26 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	2200      	movs	r2, #0
 800ef24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ef2e:	bf00      	nop
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
	...

0800ef3c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800ef44:	4b29      	ldr	r3, [pc, #164]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	f003 0307 	and.w	r3, r3, #7
 800ef4c:	2b06      	cmp	r3, #6
 800ef4e:	d00a      	beq.n	800ef66 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ef50:	4b26      	ldr	r3, [pc, #152]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	429a      	cmp	r2, r3
 800ef5c:	d001      	beq.n	800ef62 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ef5e:	2301      	movs	r3, #1
 800ef60:	e040      	b.n	800efe4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ef62:	2300      	movs	r3, #0
 800ef64:	e03e      	b.n	800efe4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ef66:	4b21      	ldr	r3, [pc, #132]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800ef68:	68db      	ldr	r3, [r3, #12]
 800ef6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ef6e:	491f      	ldr	r1, [pc, #124]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ef76:	f7fd fd6b 	bl	800ca50 <HAL_GetTick>
 800ef7a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef7c:	e009      	b.n	800ef92 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ef7e:	f7fd fd67 	bl	800ca50 <HAL_GetTick>
 800ef82:	4602      	mov	r2, r0
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	1ad3      	subs	r3, r2, r3
 800ef88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ef8c:	d901      	bls.n	800ef92 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e028      	b.n	800efe4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ef92:	4b16      	ldr	r3, [pc, #88]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ef9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ef9e:	d1ee      	bne.n	800ef7e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b1e      	cmp	r3, #30
 800efa4:	d008      	beq.n	800efb8 <HAL_PWREx_ConfigSupply+0x7c>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	2b2e      	cmp	r3, #46	; 0x2e
 800efaa:	d005      	beq.n	800efb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b1d      	cmp	r3, #29
 800efb0:	d002      	beq.n	800efb8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2b2d      	cmp	r3, #45	; 0x2d
 800efb6:	d114      	bne.n	800efe2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800efb8:	f7fd fd4a 	bl	800ca50 <HAL_GetTick>
 800efbc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800efbe:	e009      	b.n	800efd4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800efc0:	f7fd fd46 	bl	800ca50 <HAL_GetTick>
 800efc4:	4602      	mov	r2, r0
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	1ad3      	subs	r3, r2, r3
 800efca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800efce:	d901      	bls.n	800efd4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800efd0:	2301      	movs	r3, #1
 800efd2:	e007      	b.n	800efe4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800efd4:	4b05      	ldr	r3, [pc, #20]	; (800efec <HAL_PWREx_ConfigSupply+0xb0>)
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800efe0:	d1ee      	bne.n	800efc0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800efe2:	2300      	movs	r3, #0
}
 800efe4:	4618      	mov	r0, r3
 800efe6:	3710      	adds	r7, #16
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	58024800 	.word	0x58024800

0800eff0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b086      	sub	sp, #24
 800eff4:	af02      	add	r7, sp, #8
 800eff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800eff8:	f7fd fd2a 	bl	800ca50 <HAL_GetTick>
 800effc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2b00      	cmp	r3, #0
 800f002:	d101      	bne.n	800f008 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800f004:	2301      	movs	r3, #1
 800f006:	e05f      	b.n	800f0c8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	d107      	bne.n	800f024 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800f014:	6878      	ldr	r0, [r7, #4]
 800f016:	f7f1 ffbd 	bl	8000f94 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800f01a:	f241 3188 	movw	r1, #5000	; 0x1388
 800f01e:	6878      	ldr	r0, [r7, #4]
 800f020:	f000 fcca 	bl	800f9b8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	689b      	ldr	r3, [r3, #8]
 800f032:	3b01      	subs	r3, #1
 800f034:	021a      	lsls	r2, r3, #8
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	430a      	orrs	r2, r1
 800f03c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f042:	9300      	str	r3, [sp, #0]
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	2200      	movs	r2, #0
 800f048:	2120      	movs	r1, #32
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 fcf5 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f050:	4603      	mov	r3, r0
 800f052:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800f054:	7afb      	ldrb	r3, [r7, #11]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d135      	bne.n	800f0c6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	4b1b      	ldr	r3, [pc, #108]	; (800f0d0 <HAL_QSPI_Init+0xe0>)
 800f062:	4013      	ands	r3, r2
 800f064:	687a      	ldr	r2, [r7, #4]
 800f066:	6852      	ldr	r2, [r2, #4]
 800f068:	0611      	lsls	r1, r2, #24
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	68d2      	ldr	r2, [r2, #12]
 800f06e:	4311      	orrs	r1, r2
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	69d2      	ldr	r2, [r2, #28]
 800f074:	4311      	orrs	r1, r2
 800f076:	687a      	ldr	r2, [r7, #4]
 800f078:	6a12      	ldr	r2, [r2, #32]
 800f07a:	4311      	orrs	r1, r2
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	6812      	ldr	r2, [r2, #0]
 800f080:	430b      	orrs	r3, r1
 800f082:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	685a      	ldr	r2, [r3, #4]
 800f08a:	4b12      	ldr	r3, [pc, #72]	; (800f0d4 <HAL_QSPI_Init+0xe4>)
 800f08c:	4013      	ands	r3, r2
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	6912      	ldr	r2, [r2, #16]
 800f092:	0411      	lsls	r1, r2, #16
 800f094:	687a      	ldr	r2, [r7, #4]
 800f096:	6952      	ldr	r2, [r2, #20]
 800f098:	4311      	orrs	r1, r2
 800f09a:	687a      	ldr	r2, [r7, #4]
 800f09c:	6992      	ldr	r2, [r2, #24]
 800f09e:	4311      	orrs	r1, r2
 800f0a0:	687a      	ldr	r2, [r7, #4]
 800f0a2:	6812      	ldr	r2, [r2, #0]
 800f0a4:	430b      	orrs	r3, r1
 800f0a6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	681a      	ldr	r2, [r3, #0]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	f042 0201 	orr.w	r2, r2, #1
 800f0b6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2201      	movs	r2, #1
 800f0c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800f0c6:	7afb      	ldrb	r3, [r7, #11]
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3710      	adds	r7, #16
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	00ffff2f 	.word	0x00ffff2f
 800f0d4:	ffe0f8fe 	.word	0xffe0f8fe

0800f0d8 <HAL_QSPI_IRQHandler>:
  * @brief Handle QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	689b      	ldr	r3, [r3, #8]
 800f0e6:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT) != 0U) && ((itsource & QSPI_IT_FT) != 0U))
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	f003 0304 	and.w	r3, r3, #4
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d064      	beq.n	800f1c4 <HAL_QSPI_IRQHandler+0xec>
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f100:	2b00      	cmp	r3, #0
 800f102:	d05f      	beq.n	800f1c4 <HAL_QSPI_IRQHandler+0xec>
  {
    data_reg = &hqspi->Instance->DR;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	3320      	adds	r3, #32
 800f10a:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f112:	b2db      	uxtb	r3, r3
 800f114:	2b12      	cmp	r3, #18
 800f116:	d125      	bne.n	800f164 <HAL_QSPI_IRQHandler+0x8c>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f118:	e01c      	b.n	800f154 <HAL_QSPI_IRQHandler+0x7c>
      {
        if (hqspi->TxXferCount > 0U)
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00f      	beq.n	800f142 <HAL_QSPI_IRQHandler+0x6a>
        {
          /* Fill the FIFO until the threshold is reached */
          *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f126:	781a      	ldrb	r2, [r3, #0]
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	701a      	strb	r2, [r3, #0]
          hqspi->pTxBuffPtr++;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f130:	1c5a      	adds	r2, r3, #1
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	625a      	str	r2, [r3, #36]	; 0x24
          hqspi->TxXferCount--;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f13a:	1e5a      	subs	r2, r3, #1
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	62da      	str	r2, [r3, #44]	; 0x2c
 800f140:	e008      	b.n	800f154 <HAL_QSPI_IRQHandler+0x7c>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	681b      	ldr	r3, [r3, #0]
 800f14c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f150:	601a      	str	r2, [r3, #0]
          break;
 800f152:	e033      	b.n	800f1bc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	f003 0304 	and.w	r3, r3, #4
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1db      	bne.n	800f11a <HAL_QSPI_IRQHandler+0x42>
 800f162:	e02b      	b.n	800f1bc <HAL_QSPI_IRQHandler+0xe4>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f16a:	b2db      	uxtb	r3, r3
 800f16c:	2b22      	cmp	r3, #34	; 0x22
 800f16e:	d125      	bne.n	800f1bc <HAL_QSPI_IRQHandler+0xe4>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f170:	e01d      	b.n	800f1ae <HAL_QSPI_IRQHandler+0xd6>
      {
        if (hqspi->RxXferCount > 0U)
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f176:	2b00      	cmp	r3, #0
 800f178:	d010      	beq.n	800f19c <HAL_QSPI_IRQHandler+0xc4>
        {
          /* Read the FIFO until the threshold is reached */
          *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f17e:	68fa      	ldr	r2, [r7, #12]
 800f180:	7812      	ldrb	r2, [r2, #0]
 800f182:	b2d2      	uxtb	r2, r2
 800f184:	701a      	strb	r2, [r3, #0]
          hqspi->pRxBuffPtr++;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f18a:	1c5a      	adds	r2, r3, #1
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	631a      	str	r2, [r3, #48]	; 0x30
          hqspi->RxXferCount--;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f194:	1e5a      	subs	r2, r3, #1
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	639a      	str	r2, [r3, #56]	; 0x38
 800f19a:	e008      	b.n	800f1ae <HAL_QSPI_IRQHandler+0xd6>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800f1aa:	601a      	str	r2, [r3, #0]
          break;
 800f1ac:	e006      	b.n	800f1bc <HAL_QSPI_IRQHandler+0xe4>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != RESET)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	689b      	ldr	r3, [r3, #8]
 800f1b4:	f003 0304 	and.w	r3, r3, #4
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d1da      	bne.n	800f172 <HAL_QSPI_IRQHandler+0x9a>

    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f000 fbdd 	bl	800f97c <HAL_QSPI_FifoThresholdCallback>
 800f1c2:	e13c      	b.n	800f43e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC) != 0U) && ((itsource & QSPI_IT_TC) != 0U))
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	f003 0302 	and.w	r3, r3, #2
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 80b0 	beq.w	800f330 <HAL_QSPI_IRQHandler+0x258>
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f000 80aa 	beq.w	800f330 <HAL_QSPI_IRQHandler+0x258>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	2202      	movs	r2, #2
 800f1e2:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	681a      	ldr	r2, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800f1f2:	601a      	str	r2, [r3, #0]

    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b12      	cmp	r3, #18
 800f1fe:	d120      	bne.n	800f242 <HAL_QSPI_IRQHandler+0x16a>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	f003 0304 	and.w	r3, r3, #4
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d011      	beq.n	800f232 <HAL_QSPI_IRQHandler+0x15a>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	f022 0204 	bic.w	r2, r2, #4
 800f21c:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	68da      	ldr	r2, [r3, #12]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f022 0201 	bic.w	r2, r2, #1
 800f230:	60da      	str	r2, [r3, #12]
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2201      	movs	r2, #1
 800f236:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 800f23a:	6878      	ldr	r0, [r7, #4]
 800f23c:	f000 fb94 	bl	800f968 <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f240:	e0fa      	b.n	800f438 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f248:	b2db      	uxtb	r3, r3
 800f24a:	2b22      	cmp	r3, #34	; 0x22
 800f24c:	d143      	bne.n	800f2d6 <HAL_QSPI_IRQHandler+0x1fe>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f003 0304 	and.w	r3, r3, #4
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d012      	beq.n	800f282 <HAL_QSPI_IRQHandler+0x1aa>
      {
        /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
           but no impact on H7 HW and it minimize the cost in the footprint */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	681a      	ldr	r2, [r3, #0]
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f022 0204 	bic.w	r2, r2, #4
 800f26a:	601a      	str	r2, [r3, #0]

        /* Disable the MDMA channel */
        __HAL_MDMA_DISABLE(hqspi->hmdma);
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	68da      	ldr	r2, [r3, #12]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	f022 0201 	bic.w	r2, r2, #1
 800f27e:	60da      	str	r2, [r3, #12]
 800f280:	e021      	b.n	800f2c6 <HAL_QSPI_IRQHandler+0x1ee>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	3320      	adds	r3, #32
 800f288:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f28a:	e013      	b.n	800f2b4 <HAL_QSPI_IRQHandler+0x1dc>
        {
          if (hqspi->RxXferCount > 0U)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f290:	2b00      	cmp	r3, #0
 800f292:	d017      	beq.n	800f2c4 <HAL_QSPI_IRQHandler+0x1ec>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f298:	68fa      	ldr	r2, [r7, #12]
 800f29a:	7812      	ldrb	r2, [r2, #0]
 800f29c:	b2d2      	uxtb	r2, r2
 800f29e:	701a      	strb	r2, [r3, #0]
            hqspi->pRxBuffPtr++;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a4:	1c5a      	adds	r2, r3, #1
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	631a      	str	r2, [r3, #48]	; 0x30
            hqspi->RxXferCount--;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ae:	1e5a      	subs	r2, r3, #1
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0U)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d1e4      	bne.n	800f28c <HAL_QSPI_IRQHandler+0x1b4>
 800f2c2:	e000      	b.n	800f2c6 <HAL_QSPI_IRQHandler+0x1ee>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 800f2c4:	bf00      	nop
        }
      }


      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2201      	movs	r2, #1
 800f2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 fb40 	bl	800f954 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f2d4:	e0b0      	b.n	800f438 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	d107      	bne.n	800f2f2 <HAL_QSPI_IRQHandler+0x21a>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2201      	movs	r2, #1
 800f2e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fb28 	bl	800f940 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f2f0:	e0a2      	b.n	800f438 <HAL_QSPI_IRQHandler+0x360>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	2b08      	cmp	r3, #8
 800f2fc:	f040 809c 	bne.w	800f438 <HAL_QSPI_IRQHandler+0x360>
    {
      /* Reset functional mode configuration to indirect write mode by default */
      CLEAR_BIT(hqspi->Instance->CCR, QUADSPI_CCR_FMODE);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	695a      	ldr	r2, [r3, #20]
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f30e:	615a      	str	r2, [r3, #20]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	2201      	movs	r2, #1
 800f314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d103      	bne.n	800f328 <HAL_QSPI_IRQHandler+0x250>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 fb03 	bl	800f92c <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f326:	e087      	b.n	800f438 <HAL_QSPI_IRQHandler+0x360>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 faf5 	bl	800f918 <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f32e:	e083      	b.n	800f438 <HAL_QSPI_IRQHandler+0x360>
     /* Nothing to do */
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM) != 0U) && ((itsource & QSPI_IT_SM) != 0U))
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	f003 0308 	and.w	r3, r3, #8
 800f336:	2b00      	cmp	r3, #0
 800f338:	d01f      	beq.n	800f37a <HAL_QSPI_IRQHandler+0x2a2>
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01a      	beq.n	800f37a <HAL_QSPI_IRQHandler+0x2a2>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2208      	movs	r2, #8
 800f34a:	60da      	str	r2, [r3, #12]

    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0U)
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f356:	2b00      	cmp	r3, #0
 800f358:	d00b      	beq.n	800f372 <HAL_QSPI_IRQHandler+0x29a>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800f368:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	2201      	movs	r2, #1
 800f36e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fb0c 	bl	800f990 <HAL_QSPI_StatusMatchCallback>
 800f378:	e061      	b.n	800f43e <HAL_QSPI_IRQHandler+0x366>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE) != 0U) && ((itsource & QSPI_IT_TE) != 0U))
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b00      	cmp	r3, #0
 800f382:	d047      	beq.n	800f414 <HAL_QSPI_IRQHandler+0x33c>
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d042      	beq.n	800f414 <HAL_QSPI_IRQHandler+0x33c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	2201      	movs	r2, #1
 800f394:	60da      	str	r2, [r3, #12]

    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	681a      	ldr	r2, [r3, #0]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800f3a4:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3aa:	f043 0202 	orr.w	r2, r3, #2
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	645a      	str	r2, [r3, #68]	; 0x44

    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	f003 0304 	and.w	r3, r3, #4
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d021      	beq.n	800f404 <HAL_QSPI_IRQHandler+0x32c>
    {
      /* Disable using MDMA by clearing DMAEN, note that DMAEN bit is "reserved"
         but no impact on H7 HW and it minimize the cost in the footprint */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	681b      	ldr	r3, [r3, #0]
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	f022 0204 	bic.w	r2, r2, #4
 800f3ce:	601a      	str	r2, [r3, #0]

      /* Disable the MDMA channel */
      hqspi->hmdma->XferAbortCallback = QSPI_DMAAbortCplt;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3d4:	4a1c      	ldr	r2, [pc, #112]	; (800f448 <HAL_QSPI_IRQHandler+0x370>)
 800f3d6:	659a      	str	r2, [r3, #88]	; 0x58
      if (HAL_MDMA_Abort_IT(hqspi->hmdma) != HAL_OK)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7ff fced 	bl	800edbc <HAL_MDMA_Abort_IT>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d029      	beq.n	800f43c <HAL_QSPI_IRQHandler+0x364>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ec:	f043 0204 	orr.w	r2, r3, #4
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	2201      	movs	r2, #1
 800f3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fa8b 	bl	800f918 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f402:	e01b      	b.n	800f43c <HAL_QSPI_IRQHandler+0x364>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2201      	movs	r2, #1
 800f408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fa83 	bl	800f918 <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f412:	e013      	b.n	800f43c <HAL_QSPI_IRQHandler+0x364>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO) != 0U) && ((itsource & QSPI_IT_TO) != 0U))
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f003 0310 	and.w	r3, r3, #16
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00f      	beq.n	800f43e <HAL_QSPI_IRQHandler+0x366>
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00a      	beq.n	800f43e <HAL_QSPI_IRQHandler+0x366>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2210      	movs	r2, #16
 800f42e:	60da      	str	r2, [r3, #12]

    /* Timeout callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 fab7 	bl	800f9a4 <HAL_QSPI_TimeOutCallback>

   else
  {
   /* Nothing to do */
  }
}
 800f436:	e002      	b.n	800f43e <HAL_QSPI_IRQHandler+0x366>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 800f438:	bf00      	nop
 800f43a:	e000      	b.n	800f43e <HAL_QSPI_IRQHandler+0x366>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN) != 0U)
 800f43c:	bf00      	nop
}
 800f43e:	bf00      	nop
 800f440:	3718      	adds	r7, #24
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	0800f9d5 	.word	0x0800f9d5

0800f44c <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b088      	sub	sp, #32
 800f450:	af02      	add	r7, sp, #8
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f458:	f7fd fafa 	bl	800ca50 <HAL_GetTick>
 800f45c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b01      	cmp	r3, #1
 800f468:	d101      	bne.n	800f46e <HAL_QSPI_Command+0x22>
 800f46a:	2302      	movs	r3, #2
 800f46c:	e048      	b.n	800f500 <HAL_QSPI_Command+0xb4>
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2201      	movs	r2, #1
 800f472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d137      	bne.n	800f4f2 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	2200      	movs	r2, #0
 800f486:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	2202      	movs	r2, #2
 800f48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	2200      	movs	r2, #0
 800f498:	2120      	movs	r1, #32
 800f49a:	68f8      	ldr	r0, [r7, #12]
 800f49c:	f000 facd 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f4a4:	7dfb      	ldrb	r3, [r7, #23]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d125      	bne.n	800f4f6 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	68b9      	ldr	r1, [r7, #8]
 800f4ae:	68f8      	ldr	r0, [r7, #12]
 800f4b0:	f000 fafa 	bl	800faa8 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d115      	bne.n	800f4e8 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	693b      	ldr	r3, [r7, #16]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	2102      	movs	r1, #2
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f000 fab7 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d10f      	bne.n	800f4f6 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2202      	movs	r2, #2
 800f4dc:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2201      	movs	r2, #1
 800f4e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4e6:	e006      	b.n	800f4f6 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	2201      	movs	r2, #1
 800f4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4f0:	e001      	b.n	800f4f6 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f4f2:	2302      	movs	r3, #2
 800f4f4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800f500:	4618      	mov	r0, r3
 800f502:	3718      	adds	r7, #24
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}

0800f508 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b08a      	sub	sp, #40	; 0x28
 800f50c:	af02      	add	r7, sp, #8
 800f50e:	60f8      	str	r0, [r7, #12]
 800f510:	60b9      	str	r1, [r7, #8]
 800f512:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f514:	2300      	movs	r3, #0
 800f516:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f518:	f7fd fa9a 	bl	800ca50 <HAL_GetTick>
 800f51c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	3320      	adds	r3, #32
 800f524:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f52c:	b2db      	uxtb	r3, r3
 800f52e:	2b01      	cmp	r3, #1
 800f530:	d101      	bne.n	800f536 <HAL_QSPI_Transmit+0x2e>
 800f532:	2302      	movs	r3, #2
 800f534:	e076      	b.n	800f624 <HAL_QSPI_Transmit+0x11c>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2201      	movs	r2, #1
 800f53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f544:	b2db      	uxtb	r3, r3
 800f546:	2b01      	cmp	r3, #1
 800f548:	d165      	bne.n	800f616 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2200      	movs	r2, #0
 800f54e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f550:	68bb      	ldr	r3, [r7, #8]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d056      	beq.n	800f604 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	2212      	movs	r2, #18
 800f55a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	1c5a      	adds	r2, r3, #1
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	691b      	ldr	r3, [r3, #16]
 800f570:	1c5a      	adds	r2, r3, #1
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	68ba      	ldr	r2, [r7, #8]
 800f57a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	695a      	ldr	r2, [r3, #20]
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800f58a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 800f58c:	e01b      	b.n	800f5c6 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	9300      	str	r3, [sp, #0]
 800f592:	69bb      	ldr	r3, [r7, #24]
 800f594:	2201      	movs	r2, #1
 800f596:	2104      	movs	r1, #4
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f000 fa4e 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800f5a2:	7ffb      	ldrb	r3, [r7, #31]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d113      	bne.n	800f5d0 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ac:	781a      	ldrb	r2, [r3, #0]
 800f5ae:	697b      	ldr	r3, [r7, #20]
 800f5b0:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5c0:	1e5a      	subs	r2, r3, #1
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d1df      	bne.n	800f58e <HAL_QSPI_Transmit+0x86>
 800f5ce:	e000      	b.n	800f5d2 <HAL_QSPI_Transmit+0xca>
          break;
 800f5d0:	bf00      	nop
      }

      if (status == HAL_OK)
 800f5d2:	7ffb      	ldrb	r3, [r7, #31]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d110      	bne.n	800f5fa <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	2201      	movs	r2, #1
 800f5e0:	2102      	movs	r1, #2
 800f5e2:	68f8      	ldr	r0, [r7, #12]
 800f5e4:	f000 fa29 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800f5ec:	7ffb      	ldrb	r3, [r7, #31]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d103      	bne.n	800f5fa <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	2202      	movs	r2, #2
 800f5f8:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	2201      	movs	r2, #1
 800f5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f602:	e00a      	b.n	800f61a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f608:	f043 0208 	orr.w	r2, r3, #8
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f610:	2301      	movs	r3, #1
 800f612:	77fb      	strb	r3, [r7, #31]
 800f614:	e001      	b.n	800f61a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f616:	2302      	movs	r3, #2
 800f618:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2200      	movs	r2, #0
 800f61e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f622:	7ffb      	ldrb	r3, [r7, #31]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3720      	adds	r7, #32
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b08a      	sub	sp, #40	; 0x28
 800f630:	af02      	add	r7, sp, #8
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f638:	2300      	movs	r3, #0
 800f63a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 800f63c:	f7fd fa08 	bl	800ca50 <HAL_GetTick>
 800f640:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	699b      	ldr	r3, [r3, #24]
 800f648:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3320      	adds	r3, #32
 800f650:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f658:	b2db      	uxtb	r3, r3
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d101      	bne.n	800f662 <HAL_QSPI_Receive+0x36>
 800f65e:	2302      	movs	r3, #2
 800f660:	e07d      	b.n	800f75e <HAL_QSPI_Receive+0x132>
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2201      	movs	r2, #1
 800f666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f670:	b2db      	uxtb	r3, r3
 800f672:	2b01      	cmp	r3, #1
 800f674:	d16c      	bne.n	800f750 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2200      	movs	r2, #0
 800f67a:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 800f67c:	68bb      	ldr	r3, [r7, #8]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d05d      	beq.n	800f73e <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2222      	movs	r2, #34	; 0x22
 800f686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	1c5a      	adds	r2, r3, #1
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	691b      	ldr	r3, [r3, #16]
 800f69c:	1c5a      	adds	r2, r3, #1
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	68ba      	ldr	r2, [r7, #8]
 800f6a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	695b      	ldr	r3, [r3, #20]
 800f6ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f6ba:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	697a      	ldr	r2, [r7, #20]
 800f6c2:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 800f6c4:	e01c      	b.n	800f700 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	69bb      	ldr	r3, [r7, #24]
 800f6cc:	2201      	movs	r2, #1
 800f6ce:	2106      	movs	r1, #6
 800f6d0:	68f8      	ldr	r0, [r7, #12]
 800f6d2:	f000 f9b2 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800f6da:	7ffb      	ldrb	r3, [r7, #31]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d114      	bne.n	800f70a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6e4:	693a      	ldr	r2, [r7, #16]
 800f6e6:	7812      	ldrb	r2, [r2, #0]
 800f6e8:	b2d2      	uxtb	r2, r2
 800f6ea:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f0:	1c5a      	adds	r2, r3, #1
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6fa:	1e5a      	subs	r2, r3, #1
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f704:	2b00      	cmp	r3, #0
 800f706:	d1de      	bne.n	800f6c6 <HAL_QSPI_Receive+0x9a>
 800f708:	e000      	b.n	800f70c <HAL_QSPI_Receive+0xe0>
          break;
 800f70a:	bf00      	nop
      }

      if (status == HAL_OK)
 800f70c:	7ffb      	ldrb	r3, [r7, #31]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d110      	bne.n	800f734 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	9300      	str	r3, [sp, #0]
 800f716:	69bb      	ldr	r3, [r7, #24]
 800f718:	2201      	movs	r2, #1
 800f71a:	2102      	movs	r1, #2
 800f71c:	68f8      	ldr	r0, [r7, #12]
 800f71e:	f000 f98c 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f722:	4603      	mov	r3, r0
 800f724:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 800f726:	7ffb      	ldrb	r3, [r7, #31]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d103      	bne.n	800f734 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	2202      	movs	r2, #2
 800f732:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	2201      	movs	r2, #1
 800f738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f73c:	e00a      	b.n	800f754 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f742:	f043 0208 	orr.w	r2, r3, #8
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 800f74a:	2301      	movs	r3, #1
 800f74c:	77fb      	strb	r3, [r7, #31]
 800f74e:	e001      	b.n	800f754 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f750:	2302      	movs	r3, #2
 800f752:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2200      	movs	r2, #0
 800f758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 800f75c:	7ffb      	ldrb	r3, [r7, #31]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	3720      	adds	r7, #32
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800f766:	b580      	push	{r7, lr}
 800f768:	b088      	sub	sp, #32
 800f76a:	af02      	add	r7, sp, #8
 800f76c:	60f8      	str	r0, [r7, #12]
 800f76e:	60b9      	str	r1, [r7, #8]
 800f770:	607a      	str	r2, [r7, #4]
 800f772:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f774:	f7fd f96c 	bl	800ca50 <HAL_GetTick>
 800f778:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f780:	b2db      	uxtb	r3, r3
 800f782:	2b01      	cmp	r3, #1
 800f784:	d101      	bne.n	800f78a <HAL_QSPI_AutoPolling+0x24>
 800f786:	2302      	movs	r3, #2
 800f788:	e060      	b.n	800f84c <HAL_QSPI_AutoPolling+0xe6>
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2201      	movs	r2, #1
 800f78e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b01      	cmp	r3, #1
 800f79c:	d14f      	bne.n	800f83e <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2242      	movs	r2, #66	; 0x42
 800f7a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	9300      	str	r3, [sp, #0]
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	2120      	movs	r1, #32
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 f93f 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f7bc:	4603      	mov	r3, r0
 800f7be:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f7c0:	7dfb      	ldrb	r3, [r7, #23]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d13d      	bne.n	800f842 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	687a      	ldr	r2, [r7, #4]
 800f7cc:	6812      	ldr	r2, [r2, #0]
 800f7ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	687a      	ldr	r2, [r7, #4]
 800f7d6:	6852      	ldr	r2, [r2, #4]
 800f7d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	687a      	ldr	r2, [r7, #4]
 800f7e0:	6892      	ldr	r2, [r2, #8]
 800f7e2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	691b      	ldr	r3, [r3, #16]
 800f7f2:	431a      	orrs	r2, r3
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800f7fc:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	68da      	ldr	r2, [r3, #12]
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800f806:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f80a:	68b9      	ldr	r1, [r7, #8]
 800f80c:	68f8      	ldr	r0, [r7, #12]
 800f80e:	f000 f94b 	bl	800faa8 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800f812:	683b      	ldr	r3, [r7, #0]
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	2201      	movs	r2, #1
 800f81a:	2108      	movs	r1, #8
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 f90c 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f822:	4603      	mov	r3, r0
 800f824:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 800f826:	7dfb      	ldrb	r3, [r7, #23]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d10a      	bne.n	800f842 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	2208      	movs	r2, #8
 800f832:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2201      	movs	r2, #1
 800f838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f83c:	e001      	b.n	800f842 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 800f83e:	2302      	movs	r3, #2
 800f840:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2200      	movs	r2, #0
 800f846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b088      	sub	sp, #32
 800f858:	af02      	add	r7, sp, #8
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800f860:	f7fd f8f6 	bl	800ca50 <HAL_GetTick>
 800f864:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f86c:	b2db      	uxtb	r3, r3
 800f86e:	2b01      	cmp	r3, #1
 800f870:	d101      	bne.n	800f876 <HAL_QSPI_MemoryMapped+0x22>
 800f872:	2302      	movs	r3, #2
 800f874:	e04c      	b.n	800f910 <HAL_QSPI_MemoryMapped+0xbc>
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	2201      	movs	r2, #1
 800f87a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f884:	b2db      	uxtb	r3, r3
 800f886:	2b01      	cmp	r3, #1
 800f888:	d13b      	bne.n	800f902 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	2282      	movs	r2, #130	; 0x82
 800f894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f89c:	9300      	str	r3, [sp, #0]
 800f89e:	693b      	ldr	r3, [r7, #16]
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	2120      	movs	r1, #32
 800f8a4:	68f8      	ldr	r0, [r7, #12]
 800f8a6:	f000 f8c8 	bl	800fa3a <QSPI_WaitFlagStateUntilTimeout>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 800f8ae:	7dfb      	ldrb	r3, [r7, #23]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d128      	bne.n	800f906 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f023 0108 	bic.w	r1, r3, #8
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	685a      	ldr	r2, [r3, #4]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	685b      	ldr	r3, [r3, #4]
 800f8ce:	2b08      	cmp	r3, #8
 800f8d0:	d110      	bne.n	800f8f4 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	687a      	ldr	r2, [r7, #4]
 800f8d8:	6812      	ldr	r2, [r2, #0]
 800f8da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2210      	movs	r2, #16
 800f8e2:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	681a      	ldr	r2, [r3, #0]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800f8f2:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800f8f4:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800f8f8:	68b9      	ldr	r1, [r7, #8]
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f000 f8d4 	bl	800faa8 <QSPI_Config>
 800f900:	e001      	b.n	800f906 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 800f902:	2302      	movs	r3, #2
 800f904:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f910:	4618      	mov	r0, r3
 800f912:	3718      	adds	r7, #24
 800f914:	46bd      	mov	sp, r7
 800f916:	bd80      	pop	{r7, pc}

0800f918 <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 800f918:	b480      	push	{r7}
 800f91a:	b083      	sub	sp, #12
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 800f920:	bf00      	nop
 800f922:	370c      	adds	r7, #12
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b083      	sub	sp, #12
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800f934:	bf00      	nop
 800f936:	370c      	adds	r7, #12
 800f938:	46bd      	mov	sp, r7
 800f93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93e:	4770      	bx	lr

0800f940 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800f948:	bf00      	nop
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 800f95c:	bf00      	nop
 800f95e:	370c      	adds	r7, #12
 800f960:	46bd      	mov	sp, r7
 800f962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f966:	4770      	bx	lr

0800f968 <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800f968:	b480      	push	{r7}
 800f96a:	b083      	sub	sp, #12
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */
}
 800f970:	bf00      	nop
 800f972:	370c      	adds	r7, #12
 800f974:	46bd      	mov	sp, r7
 800f976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97a:	4770      	bx	lr

0800f97c <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 800f984:	bf00      	nop
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr

0800f990 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 800f990:	b480      	push	{r7}
 800f992:	b083      	sub	sp, #12
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800f998:	bf00      	nop
 800f99a:	370c      	adds	r7, #12
 800f99c:	46bd      	mov	sp, r7
 800f99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a2:	4770      	bx	lr

0800f9a4 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b083      	sub	sp, #12
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 800f9ac:	bf00      	nop
 800f9ae:	370c      	adds	r7, #12
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b6:	4770      	bx	lr

0800f9b8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	649a      	str	r2, [r3, #72]	; 0x48
}
 800f9c8:	bf00      	nop
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <QSPI_DMAAbortCplt>:
  * @brief  MDMA QSPI abort complete callback.
  * @param  hmdma MDMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(MDMA_HandleTypeDef *hmdma)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )(hmdma->Parent);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e0:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0U;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0U;
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f9f4:	b2db      	uxtb	r3, r3
 800f9f6:	2b08      	cmp	r3, #8
 800f9f8:	d114      	bne.n	800fa24 <QSPI_DMAAbortCplt+0x50>
  {
    /* MDMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2202      	movs	r2, #2
 800fa00:	60da      	str	r2, [r3, #12]

    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800fa10:	601a      	str	r2, [r3, #0]

    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	681a      	ldr	r2, [r3, #0]
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	f042 0202 	orr.w	r2, r2, #2
 800fa20:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 800fa22:	e006      	b.n	800fa32 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2201      	movs	r2, #1
 800fa28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 800fa2c:	68f8      	ldr	r0, [r7, #12]
 800fa2e:	f7ff ff73 	bl	800f918 <HAL_QSPI_ErrorCallback>
}
 800fa32:	bf00      	nop
 800fa34:	3710      	adds	r7, #16
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800fa3a:	b580      	push	{r7, lr}
 800fa3c:	b084      	sub	sp, #16
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	60f8      	str	r0, [r7, #12]
 800fa42:	60b9      	str	r1, [r7, #8]
 800fa44:	603b      	str	r3, [r7, #0]
 800fa46:	4613      	mov	r3, r2
 800fa48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fa4a:	e01a      	b.n	800fa82 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa52:	d016      	beq.n	800fa82 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa54:	f7fc fffc 	bl	800ca50 <HAL_GetTick>
 800fa58:	4602      	mov	r2, r0
 800fa5a:	683b      	ldr	r3, [r7, #0]
 800fa5c:	1ad3      	subs	r3, r2, r3
 800fa5e:	69ba      	ldr	r2, [r7, #24]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d302      	bcc.n	800fa6a <QSPI_WaitFlagStateUntilTimeout+0x30>
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d10b      	bne.n	800fa82 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2204      	movs	r2, #4
 800fa6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa76:	f043 0201 	orr.w	r2, r3, #1
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e00e      	b.n	800faa0 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	689a      	ldr	r2, [r3, #8]
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	4013      	ands	r3, r2
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	bf14      	ite	ne
 800fa90:	2301      	movne	r3, #1
 800fa92:	2300      	moveq	r3, #0
 800fa94:	b2db      	uxtb	r3, r3
 800fa96:	461a      	mov	r2, r3
 800fa98:	79fb      	ldrb	r3, [r7, #7]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d1d6      	bne.n	800fa4c <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	3710      	adds	r7, #16
 800faa4:	46bd      	mov	sp, r7
 800faa6:	bd80      	pop	{r7, pc}

0800faa8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800faa8:	b480      	push	{r7}
 800faaa:	b085      	sub	sp, #20
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d009      	beq.n	800fad0 <QSPI_Config+0x28>
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fac2:	d005      	beq.n	800fad0 <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3a01      	subs	r2, #1
 800face:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	699b      	ldr	r3, [r3, #24]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 80b9 	beq.w	800fc4c <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	6a1b      	ldr	r3, [r3, #32]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d05f      	beq.n	800fba2 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68ba      	ldr	r2, [r7, #8]
 800fae8:	6892      	ldr	r2, [r2, #8]
 800faea:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	69db      	ldr	r3, [r3, #28]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d031      	beq.n	800fb58 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fafc:	431a      	orrs	r2, r3
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb02:	431a      	orrs	r2, r3
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb08:	431a      	orrs	r2, r3
 800fb0a:	68bb      	ldr	r3, [r7, #8]
 800fb0c:	695b      	ldr	r3, [r3, #20]
 800fb0e:	049b      	lsls	r3, r3, #18
 800fb10:	431a      	orrs	r2, r3
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	691b      	ldr	r3, [r3, #16]
 800fb16:	431a      	orrs	r2, r3
 800fb18:	68bb      	ldr	r3, [r7, #8]
 800fb1a:	6a1b      	ldr	r3, [r3, #32]
 800fb1c:	431a      	orrs	r2, r3
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	68db      	ldr	r3, [r3, #12]
 800fb22:	431a      	orrs	r2, r3
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	431a      	orrs	r2, r3
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	699b      	ldr	r3, [r3, #24]
 800fb2e:	431a      	orrs	r2, r3
 800fb30:	68bb      	ldr	r3, [r7, #8]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	ea42 0103 	orr.w	r1, r2, r3
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	687a      	ldr	r2, [r7, #4]
 800fb3e:	430a      	orrs	r2, r1
 800fb40:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fb48:	f000 812e 	beq.w	800fda8 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	6852      	ldr	r2, [r2, #4]
 800fb54:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 800fb56:	e127      	b.n	800fda8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb60:	431a      	orrs	r2, r3
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb66:	431a      	orrs	r2, r3
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb6c:	431a      	orrs	r2, r3
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	695b      	ldr	r3, [r3, #20]
 800fb72:	049b      	lsls	r3, r3, #18
 800fb74:	431a      	orrs	r2, r3
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	691b      	ldr	r3, [r3, #16]
 800fb7a:	431a      	orrs	r2, r3
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	6a1b      	ldr	r3, [r3, #32]
 800fb80:	431a      	orrs	r2, r3
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	69db      	ldr	r3, [r3, #28]
 800fb86:	431a      	orrs	r2, r3
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	431a      	orrs	r2, r3
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	ea42 0103 	orr.w	r1, r2, r3
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	430a      	orrs	r2, r1
 800fb9e:	615a      	str	r2, [r3, #20]
}
 800fba0:	e102      	b.n	800fda8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	69db      	ldr	r3, [r3, #28]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d02e      	beq.n	800fc08 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbb2:	431a      	orrs	r2, r3
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbb8:	431a      	orrs	r2, r3
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbe:	431a      	orrs	r2, r3
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	695b      	ldr	r3, [r3, #20]
 800fbc4:	049b      	lsls	r3, r3, #18
 800fbc6:	431a      	orrs	r2, r3
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	6a1b      	ldr	r3, [r3, #32]
 800fbcc:	431a      	orrs	r2, r3
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	68db      	ldr	r3, [r3, #12]
 800fbd2:	431a      	orrs	r2, r3
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	69db      	ldr	r3, [r3, #28]
 800fbd8:	431a      	orrs	r2, r3
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	699b      	ldr	r3, [r3, #24]
 800fbde:	431a      	orrs	r2, r3
 800fbe0:	68bb      	ldr	r3, [r7, #8]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	ea42 0103 	orr.w	r1, r2, r3
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	430a      	orrs	r2, r1
 800fbf0:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fbf8:	f000 80d6 	beq.w	800fda8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	68ba      	ldr	r2, [r7, #8]
 800fc02:	6852      	ldr	r2, [r2, #4]
 800fc04:	619a      	str	r2, [r3, #24]
}
 800fc06:	e0cf      	b.n	800fda8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc10:	431a      	orrs	r2, r3
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc16:	431a      	orrs	r2, r3
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc1c:	431a      	orrs	r2, r3
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	695b      	ldr	r3, [r3, #20]
 800fc22:	049b      	lsls	r3, r3, #18
 800fc24:	431a      	orrs	r2, r3
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	6a1b      	ldr	r3, [r3, #32]
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	69db      	ldr	r3, [r3, #28]
 800fc30:	431a      	orrs	r2, r3
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	699b      	ldr	r3, [r3, #24]
 800fc36:	431a      	orrs	r2, r3
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	ea42 0103 	orr.w	r1, r2, r3
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	430a      	orrs	r2, r1
 800fc48:	615a      	str	r2, [r3, #20]
}
 800fc4a:	e0ad      	b.n	800fda8 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	6a1b      	ldr	r3, [r3, #32]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d058      	beq.n	800fd06 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	6892      	ldr	r2, [r2, #8]
 800fc5c:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fc5e:	68bb      	ldr	r3, [r7, #8]
 800fc60:	69db      	ldr	r3, [r3, #28]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d02d      	beq.n	800fcc2 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc6e:	431a      	orrs	r2, r3
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc74:	431a      	orrs	r2, r3
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc7a:	431a      	orrs	r2, r3
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	049b      	lsls	r3, r3, #18
 800fc82:	431a      	orrs	r2, r3
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	431a      	orrs	r2, r3
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	431a      	orrs	r2, r3
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	431a      	orrs	r2, r3
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	69db      	ldr	r3, [r3, #28]
 800fc9a:	431a      	orrs	r2, r3
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	699b      	ldr	r3, [r3, #24]
 800fca0:	ea42 0103 	orr.w	r1, r2, r3
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	430a      	orrs	r2, r1
 800fcac:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fcb4:	d078      	beq.n	800fda8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	6852      	ldr	r2, [r2, #4]
 800fcbe:	619a      	str	r2, [r3, #24]
}
 800fcc0:	e072      	b.n	800fda8 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcc6:	68bb      	ldr	r3, [r7, #8]
 800fcc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcca:	431a      	orrs	r2, r3
 800fccc:	68bb      	ldr	r3, [r7, #8]
 800fcce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcd0:	431a      	orrs	r2, r3
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcd6:	431a      	orrs	r2, r3
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	695b      	ldr	r3, [r3, #20]
 800fcdc:	049b      	lsls	r3, r3, #18
 800fcde:	431a      	orrs	r2, r3
 800fce0:	68bb      	ldr	r3, [r7, #8]
 800fce2:	691b      	ldr	r3, [r3, #16]
 800fce4:	431a      	orrs	r2, r3
 800fce6:	68bb      	ldr	r3, [r7, #8]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	431a      	orrs	r2, r3
 800fcec:	68bb      	ldr	r3, [r7, #8]
 800fcee:	69db      	ldr	r3, [r3, #28]
 800fcf0:	431a      	orrs	r2, r3
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	699b      	ldr	r3, [r3, #24]
 800fcf6:	ea42 0103 	orr.w	r1, r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	687a      	ldr	r2, [r7, #4]
 800fd00:	430a      	orrs	r2, r1
 800fd02:	615a      	str	r2, [r3, #20]
}
 800fd04:	e050      	b.n	800fda8 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	69db      	ldr	r3, [r3, #28]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d02a      	beq.n	800fd64 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd16:	431a      	orrs	r2, r3
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd1c:	431a      	orrs	r2, r3
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd22:	431a      	orrs	r2, r3
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	695b      	ldr	r3, [r3, #20]
 800fd28:	049b      	lsls	r3, r3, #18
 800fd2a:	431a      	orrs	r2, r3
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	6a1b      	ldr	r3, [r3, #32]
 800fd30:	431a      	orrs	r2, r3
 800fd32:	68bb      	ldr	r3, [r7, #8]
 800fd34:	68db      	ldr	r3, [r3, #12]
 800fd36:	431a      	orrs	r2, r3
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	69db      	ldr	r3, [r3, #28]
 800fd3c:	431a      	orrs	r2, r3
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	699b      	ldr	r3, [r3, #24]
 800fd42:	ea42 0103 	orr.w	r1, r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	687a      	ldr	r2, [r7, #4]
 800fd4c:	430a      	orrs	r2, r1
 800fd4e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800fd56:	d027      	beq.n	800fda8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	68ba      	ldr	r2, [r7, #8]
 800fd5e:	6852      	ldr	r2, [r2, #4]
 800fd60:	619a      	str	r2, [r3, #24]
}
 800fd62:	e021      	b.n	800fda8 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800fd64:	68bb      	ldr	r3, [r7, #8]
 800fd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d01d      	beq.n	800fda8 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd74:	431a      	orrs	r2, r3
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd80:	431a      	orrs	r2, r3
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	695b      	ldr	r3, [r3, #20]
 800fd86:	049b      	lsls	r3, r3, #18
 800fd88:	431a      	orrs	r2, r3
 800fd8a:	68bb      	ldr	r3, [r7, #8]
 800fd8c:	6a1b      	ldr	r3, [r3, #32]
 800fd8e:	431a      	orrs	r2, r3
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	69db      	ldr	r3, [r3, #28]
 800fd94:	431a      	orrs	r2, r3
 800fd96:	68bb      	ldr	r3, [r7, #8]
 800fd98:	699b      	ldr	r3, [r3, #24]
 800fd9a:	ea42 0103 	orr.w	r1, r2, r3
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	687a      	ldr	r2, [r7, #4]
 800fda4:	430a      	orrs	r2, r1
 800fda6:	615a      	str	r2, [r3, #20]
}
 800fda8:	bf00      	nop
 800fdaa:	3714      	adds	r7, #20
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b08c      	sub	sp, #48	; 0x30
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d102      	bne.n	800fdc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	f000 bc48 	b.w	8010658 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	f003 0301 	and.w	r3, r3, #1
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	f000 8088 	beq.w	800fee6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fdd6:	4b99      	ldr	r3, [pc, #612]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fdd8:	691b      	ldr	r3, [r3, #16]
 800fdda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fdde:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fde0:	4b96      	ldr	r3, [pc, #600]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fde2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fde4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800fde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde8:	2b10      	cmp	r3, #16
 800fdea:	d007      	beq.n	800fdfc <HAL_RCC_OscConfig+0x48>
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	2b18      	cmp	r3, #24
 800fdf0:	d111      	bne.n	800fe16 <HAL_RCC_OscConfig+0x62>
 800fdf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdf4:	f003 0303 	and.w	r3, r3, #3
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	d10c      	bne.n	800fe16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fdfc:	4b8f      	ldr	r3, [pc, #572]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d06d      	beq.n	800fee4 <HAL_RCC_OscConfig+0x130>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	685b      	ldr	r3, [r3, #4]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d169      	bne.n	800fee4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800fe10:	2301      	movs	r3, #1
 800fe12:	f000 bc21 	b.w	8010658 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	685b      	ldr	r3, [r3, #4]
 800fe1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe1e:	d106      	bne.n	800fe2e <HAL_RCC_OscConfig+0x7a>
 800fe20:	4b86      	ldr	r3, [pc, #536]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	4a85      	ldr	r2, [pc, #532]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	e02e      	b.n	800fe8c <HAL_RCC_OscConfig+0xd8>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	685b      	ldr	r3, [r3, #4]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d10c      	bne.n	800fe50 <HAL_RCC_OscConfig+0x9c>
 800fe36:	4b81      	ldr	r3, [pc, #516]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4a80      	ldr	r2, [pc, #512]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe40:	6013      	str	r3, [r2, #0]
 800fe42:	4b7e      	ldr	r3, [pc, #504]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	4a7d      	ldr	r2, [pc, #500]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	e01d      	b.n	800fe8c <HAL_RCC_OscConfig+0xd8>
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	685b      	ldr	r3, [r3, #4]
 800fe54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fe58:	d10c      	bne.n	800fe74 <HAL_RCC_OscConfig+0xc0>
 800fe5a:	4b78      	ldr	r3, [pc, #480]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	4a77      	ldr	r2, [pc, #476]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fe64:	6013      	str	r3, [r2, #0]
 800fe66:	4b75      	ldr	r3, [pc, #468]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a74      	ldr	r2, [pc, #464]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fe70:	6013      	str	r3, [r2, #0]
 800fe72:	e00b      	b.n	800fe8c <HAL_RCC_OscConfig+0xd8>
 800fe74:	4b71      	ldr	r3, [pc, #452]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	4a70      	ldr	r2, [pc, #448]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe7e:	6013      	str	r3, [r2, #0]
 800fe80:	4b6e      	ldr	r3, [pc, #440]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a6d      	ldr	r2, [pc, #436]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fe86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fe8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	685b      	ldr	r3, [r3, #4]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d013      	beq.n	800febc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe94:	f7fc fddc 	bl	800ca50 <HAL_GetTick>
 800fe98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fe9a:	e008      	b.n	800feae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fe9c:	f7fc fdd8 	bl	800ca50 <HAL_GetTick>
 800fea0:	4602      	mov	r2, r0
 800fea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea4:	1ad3      	subs	r3, r2, r3
 800fea6:	2b64      	cmp	r3, #100	; 0x64
 800fea8:	d901      	bls.n	800feae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800feaa:	2303      	movs	r3, #3
 800feac:	e3d4      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800feae:	4b63      	ldr	r3, [pc, #396]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d0f0      	beq.n	800fe9c <HAL_RCC_OscConfig+0xe8>
 800feba:	e014      	b.n	800fee6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800febc:	f7fc fdc8 	bl	800ca50 <HAL_GetTick>
 800fec0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fec2:	e008      	b.n	800fed6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fec4:	f7fc fdc4 	bl	800ca50 <HAL_GetTick>
 800fec8:	4602      	mov	r2, r0
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	1ad3      	subs	r3, r2, r3
 800fece:	2b64      	cmp	r3, #100	; 0x64
 800fed0:	d901      	bls.n	800fed6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800fed2:	2303      	movs	r3, #3
 800fed4:	e3c0      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fed6:	4b59      	ldr	r3, [pc, #356]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1f0      	bne.n	800fec4 <HAL_RCC_OscConfig+0x110>
 800fee2:	e000      	b.n	800fee6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f003 0302 	and.w	r3, r3, #2
 800feee:	2b00      	cmp	r3, #0
 800fef0:	f000 80ca 	beq.w	8010088 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fef4:	4b51      	ldr	r3, [pc, #324]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fef6:	691b      	ldr	r3, [r3, #16]
 800fef8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fefc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fefe:	4b4f      	ldr	r3, [pc, #316]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d007      	beq.n	800ff1a <HAL_RCC_OscConfig+0x166>
 800ff0a:	6a3b      	ldr	r3, [r7, #32]
 800ff0c:	2b18      	cmp	r3, #24
 800ff0e:	d156      	bne.n	800ffbe <HAL_RCC_OscConfig+0x20a>
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	f003 0303 	and.w	r3, r3, #3
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d151      	bne.n	800ffbe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff1a:	4b48      	ldr	r3, [pc, #288]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	f003 0304 	and.w	r3, r3, #4
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d005      	beq.n	800ff32 <HAL_RCC_OscConfig+0x17e>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d101      	bne.n	800ff32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800ff2e:	2301      	movs	r3, #1
 800ff30:	e392      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ff32:	4b42      	ldr	r3, [pc, #264]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	f023 0219 	bic.w	r2, r3, #25
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	493f      	ldr	r1, [pc, #252]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff40:	4313      	orrs	r3, r2
 800ff42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff44:	f7fc fd84 	bl	800ca50 <HAL_GetTick>
 800ff48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff4a:	e008      	b.n	800ff5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ff4c:	f7fc fd80 	bl	800ca50 <HAL_GetTick>
 800ff50:	4602      	mov	r2, r0
 800ff52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d901      	bls.n	800ff5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e37c      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ff5e:	4b37      	ldr	r3, [pc, #220]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f003 0304 	and.w	r3, r3, #4
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d0f0      	beq.n	800ff4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff6a:	f7fc fd7d 	bl	800ca68 <HAL_GetREVID>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	f241 0203 	movw	r2, #4099	; 0x1003
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d817      	bhi.n	800ffa8 <HAL_RCC_OscConfig+0x1f4>
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	691b      	ldr	r3, [r3, #16]
 800ff7c:	2b40      	cmp	r3, #64	; 0x40
 800ff7e:	d108      	bne.n	800ff92 <HAL_RCC_OscConfig+0x1de>
 800ff80:	4b2e      	ldr	r3, [pc, #184]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800ff88:	4a2c      	ldr	r2, [pc, #176]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ff8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ff90:	e07a      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ff92:	4b2a      	ldr	r3, [pc, #168]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	691b      	ldr	r3, [r3, #16]
 800ff9e:	031b      	lsls	r3, r3, #12
 800ffa0:	4926      	ldr	r1, [pc, #152]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ffa2:	4313      	orrs	r3, r2
 800ffa4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ffa6:	e06f      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ffa8:	4b24      	ldr	r3, [pc, #144]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	061b      	lsls	r3, r3, #24
 800ffb6:	4921      	ldr	r1, [pc, #132]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ffbc:	e064      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d047      	beq.n	8010056 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ffc6:	4b1d      	ldr	r3, [pc, #116]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f023 0219 	bic.w	r2, r3, #25
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	491a      	ldr	r1, [pc, #104]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800ffd4:	4313      	orrs	r3, r2
 800ffd6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffd8:	f7fc fd3a 	bl	800ca50 <HAL_GetTick>
 800ffdc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ffde:	e008      	b.n	800fff2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ffe0:	f7fc fd36 	bl	800ca50 <HAL_GetTick>
 800ffe4:	4602      	mov	r2, r0
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d901      	bls.n	800fff2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800ffee:	2303      	movs	r3, #3
 800fff0:	e332      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fff2:	4b12      	ldr	r3, [pc, #72]	; (801003c <HAL_RCC_OscConfig+0x288>)
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	f003 0304 	and.w	r3, r3, #4
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d0f0      	beq.n	800ffe0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fffe:	f7fc fd33 	bl	800ca68 <HAL_GetREVID>
 8010002:	4603      	mov	r3, r0
 8010004:	f241 0203 	movw	r2, #4099	; 0x1003
 8010008:	4293      	cmp	r3, r2
 801000a:	d819      	bhi.n	8010040 <HAL_RCC_OscConfig+0x28c>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	691b      	ldr	r3, [r3, #16]
 8010010:	2b40      	cmp	r3, #64	; 0x40
 8010012:	d108      	bne.n	8010026 <HAL_RCC_OscConfig+0x272>
 8010014:	4b09      	ldr	r3, [pc, #36]	; (801003c <HAL_RCC_OscConfig+0x288>)
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 801001c:	4a07      	ldr	r2, [pc, #28]	; (801003c <HAL_RCC_OscConfig+0x288>)
 801001e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010022:	6053      	str	r3, [r2, #4]
 8010024:	e030      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
 8010026:	4b05      	ldr	r3, [pc, #20]	; (801003c <HAL_RCC_OscConfig+0x288>)
 8010028:	685b      	ldr	r3, [r3, #4]
 801002a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	691b      	ldr	r3, [r3, #16]
 8010032:	031b      	lsls	r3, r3, #12
 8010034:	4901      	ldr	r1, [pc, #4]	; (801003c <HAL_RCC_OscConfig+0x288>)
 8010036:	4313      	orrs	r3, r2
 8010038:	604b      	str	r3, [r1, #4]
 801003a:	e025      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
 801003c:	58024400 	.word	0x58024400
 8010040:	4b9a      	ldr	r3, [pc, #616]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	061b      	lsls	r3, r3, #24
 801004e:	4997      	ldr	r1, [pc, #604]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010050:	4313      	orrs	r3, r2
 8010052:	604b      	str	r3, [r1, #4]
 8010054:	e018      	b.n	8010088 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010056:	4b95      	ldr	r3, [pc, #596]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a94      	ldr	r2, [pc, #592]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801005c:	f023 0301 	bic.w	r3, r3, #1
 8010060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010062:	f7fc fcf5 	bl	800ca50 <HAL_GetTick>
 8010066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010068:	e008      	b.n	801007c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801006a:	f7fc fcf1 	bl	800ca50 <HAL_GetTick>
 801006e:	4602      	mov	r2, r0
 8010070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010072:	1ad3      	subs	r3, r2, r3
 8010074:	2b02      	cmp	r3, #2
 8010076:	d901      	bls.n	801007c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8010078:	2303      	movs	r3, #3
 801007a:	e2ed      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801007c:	4b8b      	ldr	r3, [pc, #556]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f003 0304 	and.w	r3, r3, #4
 8010084:	2b00      	cmp	r3, #0
 8010086:	d1f0      	bne.n	801006a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f003 0310 	and.w	r3, r3, #16
 8010090:	2b00      	cmp	r3, #0
 8010092:	f000 80a9 	beq.w	80101e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010096:	4b85      	ldr	r3, [pc, #532]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010098:	691b      	ldr	r3, [r3, #16]
 801009a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801009e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80100a0:	4b82      	ldr	r3, [pc, #520]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80100a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100a4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80100a6:	69bb      	ldr	r3, [r7, #24]
 80100a8:	2b08      	cmp	r3, #8
 80100aa:	d007      	beq.n	80100bc <HAL_RCC_OscConfig+0x308>
 80100ac:	69bb      	ldr	r3, [r7, #24]
 80100ae:	2b18      	cmp	r3, #24
 80100b0:	d13a      	bne.n	8010128 <HAL_RCC_OscConfig+0x374>
 80100b2:	697b      	ldr	r3, [r7, #20]
 80100b4:	f003 0303 	and.w	r3, r3, #3
 80100b8:	2b01      	cmp	r3, #1
 80100ba:	d135      	bne.n	8010128 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80100bc:	4b7b      	ldr	r3, [pc, #492]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d005      	beq.n	80100d4 <HAL_RCC_OscConfig+0x320>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	69db      	ldr	r3, [r3, #28]
 80100cc:	2b80      	cmp	r3, #128	; 0x80
 80100ce:	d001      	beq.n	80100d4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e2c1      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80100d4:	f7fc fcc8 	bl	800ca68 <HAL_GetREVID>
 80100d8:	4603      	mov	r3, r0
 80100da:	f241 0203 	movw	r2, #4099	; 0x1003
 80100de:	4293      	cmp	r3, r2
 80100e0:	d817      	bhi.n	8010112 <HAL_RCC_OscConfig+0x35e>
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a1b      	ldr	r3, [r3, #32]
 80100e6:	2b20      	cmp	r3, #32
 80100e8:	d108      	bne.n	80100fc <HAL_RCC_OscConfig+0x348>
 80100ea:	4b70      	ldr	r3, [pc, #448]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80100f2:	4a6e      	ldr	r2, [pc, #440]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80100f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100f8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80100fa:	e075      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80100fc:	4b6b      	ldr	r3, [pc, #428]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a1b      	ldr	r3, [r3, #32]
 8010108:	069b      	lsls	r3, r3, #26
 801010a:	4968      	ldr	r1, [pc, #416]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801010c:	4313      	orrs	r3, r2
 801010e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010110:	e06a      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010112:	4b66      	ldr	r3, [pc, #408]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010114:	68db      	ldr	r3, [r3, #12]
 8010116:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6a1b      	ldr	r3, [r3, #32]
 801011e:	061b      	lsls	r3, r3, #24
 8010120:	4962      	ldr	r1, [pc, #392]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010122:	4313      	orrs	r3, r2
 8010124:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8010126:	e05f      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	69db      	ldr	r3, [r3, #28]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d042      	beq.n	80101b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8010130:	4b5e      	ldr	r3, [pc, #376]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4a5d      	ldr	r2, [pc, #372]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801013a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801013c:	f7fc fc88 	bl	800ca50 <HAL_GetTick>
 8010140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010142:	e008      	b.n	8010156 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8010144:	f7fc fc84 	bl	800ca50 <HAL_GetTick>
 8010148:	4602      	mov	r2, r0
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	2b02      	cmp	r3, #2
 8010150:	d901      	bls.n	8010156 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8010152:	2303      	movs	r3, #3
 8010154:	e280      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8010156:	4b55      	ldr	r3, [pc, #340]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801015e:	2b00      	cmp	r3, #0
 8010160:	d0f0      	beq.n	8010144 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8010162:	f7fc fc81 	bl	800ca68 <HAL_GetREVID>
 8010166:	4603      	mov	r3, r0
 8010168:	f241 0203 	movw	r2, #4099	; 0x1003
 801016c:	4293      	cmp	r3, r2
 801016e:	d817      	bhi.n	80101a0 <HAL_RCC_OscConfig+0x3ec>
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	6a1b      	ldr	r3, [r3, #32]
 8010174:	2b20      	cmp	r3, #32
 8010176:	d108      	bne.n	801018a <HAL_RCC_OscConfig+0x3d6>
 8010178:	4b4c      	ldr	r3, [pc, #304]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8010180:	4a4a      	ldr	r2, [pc, #296]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010186:	6053      	str	r3, [r2, #4]
 8010188:	e02e      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
 801018a:	4b48      	ldr	r3, [pc, #288]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	6a1b      	ldr	r3, [r3, #32]
 8010196:	069b      	lsls	r3, r3, #26
 8010198:	4944      	ldr	r1, [pc, #272]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801019a:	4313      	orrs	r3, r2
 801019c:	604b      	str	r3, [r1, #4]
 801019e:	e023      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
 80101a0:	4b42      	ldr	r3, [pc, #264]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a1b      	ldr	r3, [r3, #32]
 80101ac:	061b      	lsls	r3, r3, #24
 80101ae:	493f      	ldr	r1, [pc, #252]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101b0:	4313      	orrs	r3, r2
 80101b2:	60cb      	str	r3, [r1, #12]
 80101b4:	e018      	b.n	80101e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80101b6:	4b3d      	ldr	r3, [pc, #244]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	4a3c      	ldr	r2, [pc, #240]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101c2:	f7fc fc45 	bl	800ca50 <HAL_GetTick>
 80101c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80101c8:	e008      	b.n	80101dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80101ca:	f7fc fc41 	bl	800ca50 <HAL_GetTick>
 80101ce:	4602      	mov	r2, r0
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	2b02      	cmp	r3, #2
 80101d6:	d901      	bls.n	80101dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80101d8:	2303      	movs	r3, #3
 80101da:	e23d      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80101dc:	4b33      	ldr	r3, [pc, #204]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d1f0      	bne.n	80101ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	f003 0308 	and.w	r3, r3, #8
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d036      	beq.n	8010262 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	695b      	ldr	r3, [r3, #20]
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d019      	beq.n	8010230 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80101fc:	4b2b      	ldr	r3, [pc, #172]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 80101fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010200:	4a2a      	ldr	r2, [pc, #168]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010202:	f043 0301 	orr.w	r3, r3, #1
 8010206:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010208:	f7fc fc22 	bl	800ca50 <HAL_GetTick>
 801020c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801020e:	e008      	b.n	8010222 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010210:	f7fc fc1e 	bl	800ca50 <HAL_GetTick>
 8010214:	4602      	mov	r2, r0
 8010216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	2b02      	cmp	r3, #2
 801021c:	d901      	bls.n	8010222 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801021e:	2303      	movs	r3, #3
 8010220:	e21a      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8010222:	4b22      	ldr	r3, [pc, #136]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010226:	f003 0302 	and.w	r3, r3, #2
 801022a:	2b00      	cmp	r3, #0
 801022c:	d0f0      	beq.n	8010210 <HAL_RCC_OscConfig+0x45c>
 801022e:	e018      	b.n	8010262 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010230:	4b1e      	ldr	r3, [pc, #120]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010234:	4a1d      	ldr	r2, [pc, #116]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010236:	f023 0301 	bic.w	r3, r3, #1
 801023a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801023c:	f7fc fc08 	bl	800ca50 <HAL_GetTick>
 8010240:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010242:	e008      	b.n	8010256 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010244:	f7fc fc04 	bl	800ca50 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	2b02      	cmp	r3, #2
 8010250:	d901      	bls.n	8010256 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8010252:	2303      	movs	r3, #3
 8010254:	e200      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010256:	4b15      	ldr	r3, [pc, #84]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801025a:	f003 0302 	and.w	r3, r3, #2
 801025e:	2b00      	cmp	r3, #0
 8010260:	d1f0      	bne.n	8010244 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f003 0320 	and.w	r3, r3, #32
 801026a:	2b00      	cmp	r3, #0
 801026c:	d039      	beq.n	80102e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	699b      	ldr	r3, [r3, #24]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d01c      	beq.n	80102b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010276:	4b0d      	ldr	r3, [pc, #52]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	4a0c      	ldr	r2, [pc, #48]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801027c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8010280:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010282:	f7fc fbe5 	bl	800ca50 <HAL_GetTick>
 8010286:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010288:	e008      	b.n	801029c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801028a:	f7fc fbe1 	bl	800ca50 <HAL_GetTick>
 801028e:	4602      	mov	r2, r0
 8010290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010292:	1ad3      	subs	r3, r2, r3
 8010294:	2b02      	cmp	r3, #2
 8010296:	d901      	bls.n	801029c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8010298:	2303      	movs	r3, #3
 801029a:	e1dd      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801029c:	4b03      	ldr	r3, [pc, #12]	; (80102ac <HAL_RCC_OscConfig+0x4f8>)
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d0f0      	beq.n	801028a <HAL_RCC_OscConfig+0x4d6>
 80102a8:	e01b      	b.n	80102e2 <HAL_RCC_OscConfig+0x52e>
 80102aa:	bf00      	nop
 80102ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80102b0:	4b9b      	ldr	r3, [pc, #620]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	4a9a      	ldr	r2, [pc, #616]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80102b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80102bc:	f7fc fbc8 	bl	800ca50 <HAL_GetTick>
 80102c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80102c2:	e008      	b.n	80102d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80102c4:	f7fc fbc4 	bl	800ca50 <HAL_GetTick>
 80102c8:	4602      	mov	r2, r0
 80102ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d901      	bls.n	80102d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80102d2:	2303      	movs	r3, #3
 80102d4:	e1c0      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80102d6:	4b92      	ldr	r3, [pc, #584]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d1f0      	bne.n	80102c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f003 0304 	and.w	r3, r3, #4
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	f000 8081 	beq.w	80103f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80102f0:	4b8c      	ldr	r3, [pc, #560]	; (8010524 <HAL_RCC_OscConfig+0x770>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a8b      	ldr	r2, [pc, #556]	; (8010524 <HAL_RCC_OscConfig+0x770>)
 80102f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80102fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80102fc:	f7fc fba8 	bl	800ca50 <HAL_GetTick>
 8010300:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010302:	e008      	b.n	8010316 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010304:	f7fc fba4 	bl	800ca50 <HAL_GetTick>
 8010308:	4602      	mov	r2, r0
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	1ad3      	subs	r3, r2, r3
 801030e:	2b64      	cmp	r3, #100	; 0x64
 8010310:	d901      	bls.n	8010316 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8010312:	2303      	movs	r3, #3
 8010314:	e1a0      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010316:	4b83      	ldr	r3, [pc, #524]	; (8010524 <HAL_RCC_OscConfig+0x770>)
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801031e:	2b00      	cmp	r3, #0
 8010320:	d0f0      	beq.n	8010304 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	689b      	ldr	r3, [r3, #8]
 8010326:	2b01      	cmp	r3, #1
 8010328:	d106      	bne.n	8010338 <HAL_RCC_OscConfig+0x584>
 801032a:	4b7d      	ldr	r3, [pc, #500]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801032c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801032e:	4a7c      	ldr	r2, [pc, #496]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010330:	f043 0301 	orr.w	r3, r3, #1
 8010334:	6713      	str	r3, [r2, #112]	; 0x70
 8010336:	e02d      	b.n	8010394 <HAL_RCC_OscConfig+0x5e0>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	689b      	ldr	r3, [r3, #8]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10c      	bne.n	801035a <HAL_RCC_OscConfig+0x5a6>
 8010340:	4b77      	ldr	r3, [pc, #476]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010344:	4a76      	ldr	r2, [pc, #472]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010346:	f023 0301 	bic.w	r3, r3, #1
 801034a:	6713      	str	r3, [r2, #112]	; 0x70
 801034c:	4b74      	ldr	r3, [pc, #464]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801034e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010350:	4a73      	ldr	r2, [pc, #460]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010352:	f023 0304 	bic.w	r3, r3, #4
 8010356:	6713      	str	r3, [r2, #112]	; 0x70
 8010358:	e01c      	b.n	8010394 <HAL_RCC_OscConfig+0x5e0>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	2b05      	cmp	r3, #5
 8010360:	d10c      	bne.n	801037c <HAL_RCC_OscConfig+0x5c8>
 8010362:	4b6f      	ldr	r3, [pc, #444]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010366:	4a6e      	ldr	r2, [pc, #440]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010368:	f043 0304 	orr.w	r3, r3, #4
 801036c:	6713      	str	r3, [r2, #112]	; 0x70
 801036e:	4b6c      	ldr	r3, [pc, #432]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010372:	4a6b      	ldr	r2, [pc, #428]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010374:	f043 0301 	orr.w	r3, r3, #1
 8010378:	6713      	str	r3, [r2, #112]	; 0x70
 801037a:	e00b      	b.n	8010394 <HAL_RCC_OscConfig+0x5e0>
 801037c:	4b68      	ldr	r3, [pc, #416]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801037e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010380:	4a67      	ldr	r2, [pc, #412]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010382:	f023 0301 	bic.w	r3, r3, #1
 8010386:	6713      	str	r3, [r2, #112]	; 0x70
 8010388:	4b65      	ldr	r3, [pc, #404]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801038a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801038c:	4a64      	ldr	r2, [pc, #400]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801038e:	f023 0304 	bic.w	r3, r3, #4
 8010392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	689b      	ldr	r3, [r3, #8]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d015      	beq.n	80103c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801039c:	f7fc fb58 	bl	800ca50 <HAL_GetTick>
 80103a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80103a2:	e00a      	b.n	80103ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80103a4:	f7fc fb54 	bl	800ca50 <HAL_GetTick>
 80103a8:	4602      	mov	r2, r0
 80103aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103ac:	1ad3      	subs	r3, r2, r3
 80103ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d901      	bls.n	80103ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80103b6:	2303      	movs	r3, #3
 80103b8:	e14e      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80103ba:	4b59      	ldr	r3, [pc, #356]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80103bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103be:	f003 0302 	and.w	r3, r3, #2
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d0ee      	beq.n	80103a4 <HAL_RCC_OscConfig+0x5f0>
 80103c6:	e014      	b.n	80103f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80103c8:	f7fc fb42 	bl	800ca50 <HAL_GetTick>
 80103cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80103ce:	e00a      	b.n	80103e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80103d0:	f7fc fb3e 	bl	800ca50 <HAL_GetTick>
 80103d4:	4602      	mov	r2, r0
 80103d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103d8:	1ad3      	subs	r3, r2, r3
 80103da:	f241 3288 	movw	r2, #5000	; 0x1388
 80103de:	4293      	cmp	r3, r2
 80103e0:	d901      	bls.n	80103e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80103e2:	2303      	movs	r3, #3
 80103e4:	e138      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80103e6:	4b4e      	ldr	r3, [pc, #312]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80103e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80103ea:	f003 0302 	and.w	r3, r3, #2
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d1ee      	bne.n	80103d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	f000 812d 	beq.w	8010656 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80103fc:	4b48      	ldr	r3, [pc, #288]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80103fe:	691b      	ldr	r3, [r3, #16]
 8010400:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010404:	2b18      	cmp	r3, #24
 8010406:	f000 80bd 	beq.w	8010584 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801040e:	2b02      	cmp	r3, #2
 8010410:	f040 809e 	bne.w	8010550 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010414:	4b42      	ldr	r3, [pc, #264]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a41      	ldr	r2, [pc, #260]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801041a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801041e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010420:	f7fc fb16 	bl	800ca50 <HAL_GetTick>
 8010424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010426:	e008      	b.n	801043a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010428:	f7fc fb12 	bl	800ca50 <HAL_GetTick>
 801042c:	4602      	mov	r2, r0
 801042e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010430:	1ad3      	subs	r3, r2, r3
 8010432:	2b02      	cmp	r3, #2
 8010434:	d901      	bls.n	801043a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8010436:	2303      	movs	r3, #3
 8010438:	e10e      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801043a:	4b39      	ldr	r3, [pc, #228]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010442:	2b00      	cmp	r3, #0
 8010444:	d1f0      	bne.n	8010428 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010446:	4b36      	ldr	r3, [pc, #216]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801044a:	4b37      	ldr	r3, [pc, #220]	; (8010528 <HAL_RCC_OscConfig+0x774>)
 801044c:	4013      	ands	r3, r2
 801044e:	687a      	ldr	r2, [r7, #4]
 8010450:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010452:	687a      	ldr	r2, [r7, #4]
 8010454:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010456:	0112      	lsls	r2, r2, #4
 8010458:	430a      	orrs	r2, r1
 801045a:	4931      	ldr	r1, [pc, #196]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801045c:	4313      	orrs	r3, r2
 801045e:	628b      	str	r3, [r1, #40]	; 0x28
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010464:	3b01      	subs	r3, #1
 8010466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801046e:	3b01      	subs	r3, #1
 8010470:	025b      	lsls	r3, r3, #9
 8010472:	b29b      	uxth	r3, r3
 8010474:	431a      	orrs	r2, r3
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801047a:	3b01      	subs	r3, #1
 801047c:	041b      	lsls	r3, r3, #16
 801047e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010482:	431a      	orrs	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010488:	3b01      	subs	r3, #1
 801048a:	061b      	lsls	r3, r3, #24
 801048c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010490:	4923      	ldr	r1, [pc, #140]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010492:	4313      	orrs	r3, r2
 8010494:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8010496:	4b22      	ldr	r3, [pc, #136]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049a:	4a21      	ldr	r2, [pc, #132]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801049c:	f023 0301 	bic.w	r3, r3, #1
 80104a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80104a2:	4b1f      	ldr	r3, [pc, #124]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104a6:	4b21      	ldr	r3, [pc, #132]	; (801052c <HAL_RCC_OscConfig+0x778>)
 80104a8:	4013      	ands	r3, r2
 80104aa:	687a      	ldr	r2, [r7, #4]
 80104ac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80104ae:	00d2      	lsls	r2, r2, #3
 80104b0:	491b      	ldr	r1, [pc, #108]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104b2:	4313      	orrs	r3, r2
 80104b4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80104b6:	4b1a      	ldr	r3, [pc, #104]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ba:	f023 020c 	bic.w	r2, r3, #12
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104c2:	4917      	ldr	r1, [pc, #92]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104c4:	4313      	orrs	r3, r2
 80104c6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80104c8:	4b15      	ldr	r3, [pc, #84]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104cc:	f023 0202 	bic.w	r2, r3, #2
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104d4:	4912      	ldr	r1, [pc, #72]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104d6:	4313      	orrs	r3, r2
 80104d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80104da:	4b11      	ldr	r3, [pc, #68]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104de:	4a10      	ldr	r2, [pc, #64]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80104e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80104e6:	4b0e      	ldr	r3, [pc, #56]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ea:	4a0d      	ldr	r2, [pc, #52]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80104f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80104f2:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104f6:	4a0a      	ldr	r2, [pc, #40]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 80104f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80104fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80104fe:	4b08      	ldr	r3, [pc, #32]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010502:	4a07      	ldr	r2, [pc, #28]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010504:	f043 0301 	orr.w	r3, r3, #1
 8010508:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801050a:	4b05      	ldr	r3, [pc, #20]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a04      	ldr	r2, [pc, #16]	; (8010520 <HAL_RCC_OscConfig+0x76c>)
 8010510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010516:	f7fc fa9b 	bl	800ca50 <HAL_GetTick>
 801051a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801051c:	e011      	b.n	8010542 <HAL_RCC_OscConfig+0x78e>
 801051e:	bf00      	nop
 8010520:	58024400 	.word	0x58024400
 8010524:	58024800 	.word	0x58024800
 8010528:	fffffc0c 	.word	0xfffffc0c
 801052c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010530:	f7fc fa8e 	bl	800ca50 <HAL_GetTick>
 8010534:	4602      	mov	r2, r0
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	1ad3      	subs	r3, r2, r3
 801053a:	2b02      	cmp	r3, #2
 801053c:	d901      	bls.n	8010542 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801053e:	2303      	movs	r3, #3
 8010540:	e08a      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010542:	4b47      	ldr	r3, [pc, #284]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801054a:	2b00      	cmp	r3, #0
 801054c:	d0f0      	beq.n	8010530 <HAL_RCC_OscConfig+0x77c>
 801054e:	e082      	b.n	8010656 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010550:	4b43      	ldr	r3, [pc, #268]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	4a42      	ldr	r2, [pc, #264]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801055a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801055c:	f7fc fa78 	bl	800ca50 <HAL_GetTick>
 8010560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010562:	e008      	b.n	8010576 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010564:	f7fc fa74 	bl	800ca50 <HAL_GetTick>
 8010568:	4602      	mov	r2, r0
 801056a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056c:	1ad3      	subs	r3, r2, r3
 801056e:	2b02      	cmp	r3, #2
 8010570:	d901      	bls.n	8010576 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8010572:	2303      	movs	r3, #3
 8010574:	e070      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010576:	4b3a      	ldr	r3, [pc, #232]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801057e:	2b00      	cmp	r3, #0
 8010580:	d1f0      	bne.n	8010564 <HAL_RCC_OscConfig+0x7b0>
 8010582:	e068      	b.n	8010656 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010584:	4b36      	ldr	r3, [pc, #216]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010588:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801058a:	4b35      	ldr	r3, [pc, #212]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 801058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801058e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010594:	2b01      	cmp	r3, #1
 8010596:	d031      	beq.n	80105fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	f003 0203 	and.w	r2, r3, #3
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80105a2:	429a      	cmp	r2, r3
 80105a4:	d12a      	bne.n	80105fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	091b      	lsrs	r3, r3, #4
 80105aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80105b2:	429a      	cmp	r2, r3
 80105b4:	d122      	bne.n	80105fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80105c2:	429a      	cmp	r2, r3
 80105c4:	d11a      	bne.n	80105fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	0a5b      	lsrs	r3, r3, #9
 80105ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80105d4:	429a      	cmp	r2, r3
 80105d6:	d111      	bne.n	80105fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	0c1b      	lsrs	r3, r3, #16
 80105dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80105e6:	429a      	cmp	r2, r3
 80105e8:	d108      	bne.n	80105fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	0e1b      	lsrs	r3, r3, #24
 80105ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d001      	beq.n	8010600 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80105fc:	2301      	movs	r3, #1
 80105fe:	e02b      	b.n	8010658 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8010600:	4b17      	ldr	r3, [pc, #92]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010604:	08db      	lsrs	r3, r3, #3
 8010606:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801060a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010610:	693a      	ldr	r2, [r7, #16]
 8010612:	429a      	cmp	r2, r3
 8010614:	d01f      	beq.n	8010656 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8010616:	4b12      	ldr	r3, [pc, #72]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801061a:	4a11      	ldr	r2, [pc, #68]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 801061c:	f023 0301 	bic.w	r3, r3, #1
 8010620:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8010622:	f7fc fa15 	bl	800ca50 <HAL_GetTick>
 8010626:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8010628:	bf00      	nop
 801062a:	f7fc fa11 	bl	800ca50 <HAL_GetTick>
 801062e:	4602      	mov	r2, r0
 8010630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010632:	4293      	cmp	r3, r2
 8010634:	d0f9      	beq.n	801062a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010636:	4b0a      	ldr	r3, [pc, #40]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010638:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801063a:	4b0a      	ldr	r3, [pc, #40]	; (8010664 <HAL_RCC_OscConfig+0x8b0>)
 801063c:	4013      	ands	r3, r2
 801063e:	687a      	ldr	r2, [r7, #4]
 8010640:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010642:	00d2      	lsls	r2, r2, #3
 8010644:	4906      	ldr	r1, [pc, #24]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010646:	4313      	orrs	r3, r2
 8010648:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801064a:	4b05      	ldr	r3, [pc, #20]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 801064c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801064e:	4a04      	ldr	r2, [pc, #16]	; (8010660 <HAL_RCC_OscConfig+0x8ac>)
 8010650:	f043 0301 	orr.w	r3, r3, #1
 8010654:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010656:	2300      	movs	r3, #0
}
 8010658:	4618      	mov	r0, r3
 801065a:	3730      	adds	r7, #48	; 0x30
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	58024400 	.word	0x58024400
 8010664:	ffff0007 	.word	0xffff0007

08010668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b086      	sub	sp, #24
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	2b00      	cmp	r3, #0
 8010676:	d101      	bne.n	801067c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010678:	2301      	movs	r3, #1
 801067a:	e19c      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801067c:	4b8a      	ldr	r3, [pc, #552]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f003 030f 	and.w	r3, r3, #15
 8010684:	683a      	ldr	r2, [r7, #0]
 8010686:	429a      	cmp	r2, r3
 8010688:	d910      	bls.n	80106ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801068a:	4b87      	ldr	r3, [pc, #540]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f023 020f 	bic.w	r2, r3, #15
 8010692:	4985      	ldr	r1, [pc, #532]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	4313      	orrs	r3, r2
 8010698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801069a:	4b83      	ldr	r3, [pc, #524]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	f003 030f 	and.w	r3, r3, #15
 80106a2:	683a      	ldr	r2, [r7, #0]
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d001      	beq.n	80106ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80106a8:	2301      	movs	r3, #1
 80106aa:	e184      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f003 0304 	and.w	r3, r3, #4
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d010      	beq.n	80106da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	691a      	ldr	r2, [r3, #16]
 80106bc:	4b7b      	ldr	r3, [pc, #492]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80106c4:	429a      	cmp	r2, r3
 80106c6:	d908      	bls.n	80106da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80106c8:	4b78      	ldr	r3, [pc, #480]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	691b      	ldr	r3, [r3, #16]
 80106d4:	4975      	ldr	r1, [pc, #468]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80106d6:	4313      	orrs	r3, r2
 80106d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	f003 0308 	and.w	r3, r3, #8
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d010      	beq.n	8010708 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	695a      	ldr	r2, [r3, #20]
 80106ea:	4b70      	ldr	r3, [pc, #448]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80106ec:	69db      	ldr	r3, [r3, #28]
 80106ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d908      	bls.n	8010708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80106f6:	4b6d      	ldr	r3, [pc, #436]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	695b      	ldr	r3, [r3, #20]
 8010702:	496a      	ldr	r1, [pc, #424]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010704:	4313      	orrs	r3, r2
 8010706:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	f003 0310 	and.w	r3, r3, #16
 8010710:	2b00      	cmp	r3, #0
 8010712:	d010      	beq.n	8010736 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	699a      	ldr	r2, [r3, #24]
 8010718:	4b64      	ldr	r3, [pc, #400]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 801071a:	69db      	ldr	r3, [r3, #28]
 801071c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010720:	429a      	cmp	r2, r3
 8010722:	d908      	bls.n	8010736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010724:	4b61      	ldr	r3, [pc, #388]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010726:	69db      	ldr	r3, [r3, #28]
 8010728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	699b      	ldr	r3, [r3, #24]
 8010730:	495e      	ldr	r1, [pc, #376]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010732:	4313      	orrs	r3, r2
 8010734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f003 0320 	and.w	r3, r3, #32
 801073e:	2b00      	cmp	r3, #0
 8010740:	d010      	beq.n	8010764 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	69da      	ldr	r2, [r3, #28]
 8010746:	4b59      	ldr	r3, [pc, #356]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801074e:	429a      	cmp	r2, r3
 8010750:	d908      	bls.n	8010764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010752:	4b56      	ldr	r3, [pc, #344]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	69db      	ldr	r3, [r3, #28]
 801075e:	4953      	ldr	r1, [pc, #332]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010760:	4313      	orrs	r3, r2
 8010762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f003 0302 	and.w	r3, r3, #2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d010      	beq.n	8010792 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	68da      	ldr	r2, [r3, #12]
 8010774:	4b4d      	ldr	r3, [pc, #308]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010776:	699b      	ldr	r3, [r3, #24]
 8010778:	f003 030f 	and.w	r3, r3, #15
 801077c:	429a      	cmp	r2, r3
 801077e:	d908      	bls.n	8010792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010780:	4b4a      	ldr	r3, [pc, #296]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010782:	699b      	ldr	r3, [r3, #24]
 8010784:	f023 020f 	bic.w	r2, r3, #15
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	4947      	ldr	r1, [pc, #284]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 801078e:	4313      	orrs	r3, r2
 8010790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	d055      	beq.n	801084a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801079e:	4b43      	ldr	r3, [pc, #268]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107a0:	699b      	ldr	r3, [r3, #24]
 80107a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	4940      	ldr	r1, [pc, #256]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107ac:	4313      	orrs	r3, r2
 80107ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	685b      	ldr	r3, [r3, #4]
 80107b4:	2b02      	cmp	r3, #2
 80107b6:	d107      	bne.n	80107c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80107b8:	4b3c      	ldr	r3, [pc, #240]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d121      	bne.n	8010808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80107c4:	2301      	movs	r3, #1
 80107c6:	e0f6      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	685b      	ldr	r3, [r3, #4]
 80107cc:	2b03      	cmp	r3, #3
 80107ce:	d107      	bne.n	80107e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80107d0:	4b36      	ldr	r3, [pc, #216]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d115      	bne.n	8010808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80107dc:	2301      	movs	r3, #1
 80107de:	e0ea      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	685b      	ldr	r3, [r3, #4]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d107      	bne.n	80107f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80107e8:	4b30      	ldr	r3, [pc, #192]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d109      	bne.n	8010808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80107f4:	2301      	movs	r3, #1
 80107f6:	e0de      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80107f8:	4b2c      	ldr	r3, [pc, #176]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	f003 0304 	and.w	r3, r3, #4
 8010800:	2b00      	cmp	r3, #0
 8010802:	d101      	bne.n	8010808 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010804:	2301      	movs	r3, #1
 8010806:	e0d6      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010808:	4b28      	ldr	r3, [pc, #160]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	f023 0207 	bic.w	r2, r3, #7
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	4925      	ldr	r1, [pc, #148]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010816:	4313      	orrs	r3, r2
 8010818:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801081a:	f7fc f919 	bl	800ca50 <HAL_GetTick>
 801081e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010820:	e00a      	b.n	8010838 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010822:	f7fc f915 	bl	800ca50 <HAL_GetTick>
 8010826:	4602      	mov	r2, r0
 8010828:	697b      	ldr	r3, [r7, #20]
 801082a:	1ad3      	subs	r3, r2, r3
 801082c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010830:	4293      	cmp	r3, r2
 8010832:	d901      	bls.n	8010838 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010834:	2303      	movs	r3, #3
 8010836:	e0be      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010838:	4b1c      	ldr	r3, [pc, #112]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 801083a:	691b      	ldr	r3, [r3, #16]
 801083c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	685b      	ldr	r3, [r3, #4]
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	429a      	cmp	r2, r3
 8010848:	d1eb      	bne.n	8010822 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	f003 0302 	and.w	r3, r3, #2
 8010852:	2b00      	cmp	r3, #0
 8010854:	d010      	beq.n	8010878 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	4b14      	ldr	r3, [pc, #80]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 801085c:	699b      	ldr	r3, [r3, #24]
 801085e:	f003 030f 	and.w	r3, r3, #15
 8010862:	429a      	cmp	r2, r3
 8010864:	d208      	bcs.n	8010878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010866:	4b11      	ldr	r3, [pc, #68]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010868:	699b      	ldr	r3, [r3, #24]
 801086a:	f023 020f 	bic.w	r2, r3, #15
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	490e      	ldr	r1, [pc, #56]	; (80108ac <HAL_RCC_ClockConfig+0x244>)
 8010874:	4313      	orrs	r3, r2
 8010876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010878:	4b0b      	ldr	r3, [pc, #44]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	f003 030f 	and.w	r3, r3, #15
 8010880:	683a      	ldr	r2, [r7, #0]
 8010882:	429a      	cmp	r2, r3
 8010884:	d214      	bcs.n	80108b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010886:	4b08      	ldr	r3, [pc, #32]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f023 020f 	bic.w	r2, r3, #15
 801088e:	4906      	ldr	r1, [pc, #24]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	4313      	orrs	r3, r2
 8010894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010896:	4b04      	ldr	r3, [pc, #16]	; (80108a8 <HAL_RCC_ClockConfig+0x240>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f003 030f 	and.w	r3, r3, #15
 801089e:	683a      	ldr	r2, [r7, #0]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d005      	beq.n	80108b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80108a4:	2301      	movs	r3, #1
 80108a6:	e086      	b.n	80109b6 <HAL_RCC_ClockConfig+0x34e>
 80108a8:	52002000 	.word	0x52002000
 80108ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	f003 0304 	and.w	r3, r3, #4
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d010      	beq.n	80108de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	691a      	ldr	r2, [r3, #16]
 80108c0:	4b3f      	ldr	r3, [pc, #252]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 80108c2:	699b      	ldr	r3, [r3, #24]
 80108c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d208      	bcs.n	80108de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80108cc:	4b3c      	ldr	r3, [pc, #240]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 80108ce:	699b      	ldr	r3, [r3, #24]
 80108d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	691b      	ldr	r3, [r3, #16]
 80108d8:	4939      	ldr	r1, [pc, #228]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 80108da:	4313      	orrs	r3, r2
 80108dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	f003 0308 	and.w	r3, r3, #8
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d010      	beq.n	801090c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	695a      	ldr	r2, [r3, #20]
 80108ee:	4b34      	ldr	r3, [pc, #208]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 80108f0:	69db      	ldr	r3, [r3, #28]
 80108f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d208      	bcs.n	801090c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80108fa:	4b31      	ldr	r3, [pc, #196]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 80108fc:	69db      	ldr	r3, [r3, #28]
 80108fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	695b      	ldr	r3, [r3, #20]
 8010906:	492e      	ldr	r1, [pc, #184]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010908:	4313      	orrs	r3, r2
 801090a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f003 0310 	and.w	r3, r3, #16
 8010914:	2b00      	cmp	r3, #0
 8010916:	d010      	beq.n	801093a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	699a      	ldr	r2, [r3, #24]
 801091c:	4b28      	ldr	r3, [pc, #160]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 801091e:	69db      	ldr	r3, [r3, #28]
 8010920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010924:	429a      	cmp	r2, r3
 8010926:	d208      	bcs.n	801093a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010928:	4b25      	ldr	r3, [pc, #148]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 801092a:	69db      	ldr	r3, [r3, #28]
 801092c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	699b      	ldr	r3, [r3, #24]
 8010934:	4922      	ldr	r1, [pc, #136]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010936:	4313      	orrs	r3, r2
 8010938:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f003 0320 	and.w	r3, r3, #32
 8010942:	2b00      	cmp	r3, #0
 8010944:	d010      	beq.n	8010968 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	69da      	ldr	r2, [r3, #28]
 801094a:	4b1d      	ldr	r3, [pc, #116]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 801094c:	6a1b      	ldr	r3, [r3, #32]
 801094e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010952:	429a      	cmp	r2, r3
 8010954:	d208      	bcs.n	8010968 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010956:	4b1a      	ldr	r3, [pc, #104]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010958:	6a1b      	ldr	r3, [r3, #32]
 801095a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	69db      	ldr	r3, [r3, #28]
 8010962:	4917      	ldr	r1, [pc, #92]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010964:	4313      	orrs	r3, r2
 8010966:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010968:	f000 f89e 	bl	8010aa8 <HAL_RCC_GetSysClockFreq>
 801096c:	4602      	mov	r2, r0
 801096e:	4b14      	ldr	r3, [pc, #80]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010970:	699b      	ldr	r3, [r3, #24]
 8010972:	0a1b      	lsrs	r3, r3, #8
 8010974:	f003 030f 	and.w	r3, r3, #15
 8010978:	4912      	ldr	r1, [pc, #72]	; (80109c4 <HAL_RCC_ClockConfig+0x35c>)
 801097a:	5ccb      	ldrb	r3, [r1, r3]
 801097c:	f003 031f 	and.w	r3, r3, #31
 8010980:	fa22 f303 	lsr.w	r3, r2, r3
 8010984:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010986:	4b0e      	ldr	r3, [pc, #56]	; (80109c0 <HAL_RCC_ClockConfig+0x358>)
 8010988:	699b      	ldr	r3, [r3, #24]
 801098a:	f003 030f 	and.w	r3, r3, #15
 801098e:	4a0d      	ldr	r2, [pc, #52]	; (80109c4 <HAL_RCC_ClockConfig+0x35c>)
 8010990:	5cd3      	ldrb	r3, [r2, r3]
 8010992:	f003 031f 	and.w	r3, r3, #31
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	fa22 f303 	lsr.w	r3, r2, r3
 801099c:	4a0a      	ldr	r2, [pc, #40]	; (80109c8 <HAL_RCC_ClockConfig+0x360>)
 801099e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80109a0:	4a0a      	ldr	r2, [pc, #40]	; (80109cc <HAL_RCC_ClockConfig+0x364>)
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80109a6:	4b0a      	ldr	r3, [pc, #40]	; (80109d0 <HAL_RCC_ClockConfig+0x368>)
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	4618      	mov	r0, r3
 80109ac:	f7f0 fd0c 	bl	80013c8 <HAL_InitTick>
 80109b0:	4603      	mov	r3, r0
 80109b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	58024400 	.word	0x58024400
 80109c4:	08025b8c 	.word	0x08025b8c
 80109c8:	24000014 	.word	0x24000014
 80109cc:	24000010 	.word	0x24000010
 80109d0:	24000048 	.word	0x24000048

080109d4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80109d4:	b580      	push	{r7, lr}
 80109d6:	b08c      	sub	sp, #48	; 0x30
 80109d8:	af00      	add	r7, sp, #0
 80109da:	60f8      	str	r0, [r7, #12]
 80109dc:	60b9      	str	r1, [r7, #8]
 80109de:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d12a      	bne.n	8010a3c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80109e6:	4b2d      	ldr	r3, [pc, #180]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 80109e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80109ec:	4a2b      	ldr	r2, [pc, #172]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 80109ee:	f043 0301 	orr.w	r3, r3, #1
 80109f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80109f6:	4b29      	ldr	r3, [pc, #164]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 80109f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80109fc:	f003 0301 	and.w	r3, r3, #1
 8010a00:	61bb      	str	r3, [r7, #24]
 8010a02:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8010a04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a0a:	2302      	movs	r3, #2
 8010a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a12:	2300      	movs	r3, #0
 8010a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010a16:	2300      	movs	r3, #0
 8010a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8010a1a:	f107 031c 	add.w	r3, r7, #28
 8010a1e:	4619      	mov	r1, r3
 8010a20:	481f      	ldr	r0, [pc, #124]	; (8010aa0 <HAL_RCC_MCOConfig+0xcc>)
 8010a22:	f7fc fc19 	bl	800d258 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8010a26:	4b1d      	ldr	r3, [pc, #116]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8010a2e:	68b9      	ldr	r1, [r7, #8]
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	430b      	orrs	r3, r1
 8010a34:	4919      	ldr	r1, [pc, #100]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a36:	4313      	orrs	r3, r2
 8010a38:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8010a3a:	e02a      	b.n	8010a92 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8010a3c:	4b17      	ldr	r3, [pc, #92]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010a42:	4a16      	ldr	r2, [pc, #88]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a44:	f043 0304 	orr.w	r3, r3, #4
 8010a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8010a4c:	4b13      	ldr	r3, [pc, #76]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8010a52:	f003 0304 	and.w	r3, r3, #4
 8010a56:	617b      	str	r3, [r7, #20]
 8010a58:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8010a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a60:	2302      	movs	r3, #2
 8010a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a64:	2303      	movs	r3, #3
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8010a70:	f107 031c 	add.w	r3, r7, #28
 8010a74:	4619      	mov	r1, r3
 8010a76:	480b      	ldr	r0, [pc, #44]	; (8010aa4 <HAL_RCC_MCOConfig+0xd0>)
 8010a78:	f7fc fbee 	bl	800d258 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8010a7c:	4b07      	ldr	r3, [pc, #28]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	01d9      	lsls	r1, r3, #7
 8010a88:	68bb      	ldr	r3, [r7, #8]
 8010a8a:	430b      	orrs	r3, r1
 8010a8c:	4903      	ldr	r1, [pc, #12]	; (8010a9c <HAL_RCC_MCOConfig+0xc8>)
 8010a8e:	4313      	orrs	r3, r2
 8010a90:	610b      	str	r3, [r1, #16]
}
 8010a92:	bf00      	nop
 8010a94:	3730      	adds	r7, #48	; 0x30
 8010a96:	46bd      	mov	sp, r7
 8010a98:	bd80      	pop	{r7, pc}
 8010a9a:	bf00      	nop
 8010a9c:	58024400 	.word	0x58024400
 8010aa0:	58020000 	.word	0x58020000
 8010aa4:	58020800 	.word	0x58020800

08010aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010aa8:	b480      	push	{r7}
 8010aaa:	b089      	sub	sp, #36	; 0x24
 8010aac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010aae:	4bb3      	ldr	r3, [pc, #716]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010ab0:	691b      	ldr	r3, [r3, #16]
 8010ab2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ab6:	2b18      	cmp	r3, #24
 8010ab8:	f200 8155 	bhi.w	8010d66 <HAL_RCC_GetSysClockFreq+0x2be>
 8010abc:	a201      	add	r2, pc, #4	; (adr r2, 8010ac4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8010abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ac2:	bf00      	nop
 8010ac4:	08010b29 	.word	0x08010b29
 8010ac8:	08010d67 	.word	0x08010d67
 8010acc:	08010d67 	.word	0x08010d67
 8010ad0:	08010d67 	.word	0x08010d67
 8010ad4:	08010d67 	.word	0x08010d67
 8010ad8:	08010d67 	.word	0x08010d67
 8010adc:	08010d67 	.word	0x08010d67
 8010ae0:	08010d67 	.word	0x08010d67
 8010ae4:	08010b4f 	.word	0x08010b4f
 8010ae8:	08010d67 	.word	0x08010d67
 8010aec:	08010d67 	.word	0x08010d67
 8010af0:	08010d67 	.word	0x08010d67
 8010af4:	08010d67 	.word	0x08010d67
 8010af8:	08010d67 	.word	0x08010d67
 8010afc:	08010d67 	.word	0x08010d67
 8010b00:	08010d67 	.word	0x08010d67
 8010b04:	08010b55 	.word	0x08010b55
 8010b08:	08010d67 	.word	0x08010d67
 8010b0c:	08010d67 	.word	0x08010d67
 8010b10:	08010d67 	.word	0x08010d67
 8010b14:	08010d67 	.word	0x08010d67
 8010b18:	08010d67 	.word	0x08010d67
 8010b1c:	08010d67 	.word	0x08010d67
 8010b20:	08010d67 	.word	0x08010d67
 8010b24:	08010b5b 	.word	0x08010b5b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b28:	4b94      	ldr	r3, [pc, #592]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	f003 0320 	and.w	r3, r3, #32
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d009      	beq.n	8010b48 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010b34:	4b91      	ldr	r3, [pc, #580]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	08db      	lsrs	r3, r3, #3
 8010b3a:	f003 0303 	and.w	r3, r3, #3
 8010b3e:	4a90      	ldr	r2, [pc, #576]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b40:	fa22 f303 	lsr.w	r3, r2, r3
 8010b44:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8010b46:	e111      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010b48:	4b8d      	ldr	r3, [pc, #564]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010b4a:	61bb      	str	r3, [r7, #24]
      break;
 8010b4c:	e10e      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010b4e:	4b8d      	ldr	r3, [pc, #564]	; (8010d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010b50:	61bb      	str	r3, [r7, #24]
      break;
 8010b52:	e10b      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8010b54:	4b8c      	ldr	r3, [pc, #560]	; (8010d88 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8010b56:	61bb      	str	r3, [r7, #24]
      break;
 8010b58:	e108      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010b5a:	4b88      	ldr	r3, [pc, #544]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b5e:	f003 0303 	and.w	r3, r3, #3
 8010b62:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010b64:	4b85      	ldr	r3, [pc, #532]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b68:	091b      	lsrs	r3, r3, #4
 8010b6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010b6e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010b70:	4b82      	ldr	r3, [pc, #520]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b74:	f003 0301 	and.w	r3, r3, #1
 8010b78:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010b7a:	4b80      	ldr	r3, [pc, #512]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b7e:	08db      	lsrs	r3, r3, #3
 8010b80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010b84:	68fa      	ldr	r2, [r7, #12]
 8010b86:	fb02 f303 	mul.w	r3, r2, r3
 8010b8a:	ee07 3a90 	vmov	s15, r3
 8010b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010b92:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	f000 80e1 	beq.w	8010d60 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010b9e:	697b      	ldr	r3, [r7, #20]
 8010ba0:	2b02      	cmp	r3, #2
 8010ba2:	f000 8083 	beq.w	8010cac <HAL_RCC_GetSysClockFreq+0x204>
 8010ba6:	697b      	ldr	r3, [r7, #20]
 8010ba8:	2b02      	cmp	r3, #2
 8010baa:	f200 80a1 	bhi.w	8010cf0 <HAL_RCC_GetSysClockFreq+0x248>
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d003      	beq.n	8010bbc <HAL_RCC_GetSysClockFreq+0x114>
 8010bb4:	697b      	ldr	r3, [r7, #20]
 8010bb6:	2b01      	cmp	r3, #1
 8010bb8:	d056      	beq.n	8010c68 <HAL_RCC_GetSysClockFreq+0x1c0>
 8010bba:	e099      	b.n	8010cf0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010bbc:	4b6f      	ldr	r3, [pc, #444]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f003 0320 	and.w	r3, r3, #32
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d02d      	beq.n	8010c24 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010bc8:	4b6c      	ldr	r3, [pc, #432]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	08db      	lsrs	r3, r3, #3
 8010bce:	f003 0303 	and.w	r3, r3, #3
 8010bd2:	4a6b      	ldr	r2, [pc, #428]	; (8010d80 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8010bd8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	ee07 3a90 	vmov	s15, r3
 8010be0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010be4:	693b      	ldr	r3, [r7, #16]
 8010be6:	ee07 3a90 	vmov	s15, r3
 8010bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010bee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010bf2:	4b62      	ldr	r3, [pc, #392]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010bf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010bfa:	ee07 3a90 	vmov	s15, r3
 8010bfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c02:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c06:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c1e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8010c22:	e087      	b.n	8010d34 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	ee07 3a90 	vmov	s15, r3
 8010c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c2e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010d90 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010c32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c36:	4b51      	ldr	r3, [pc, #324]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c3e:	ee07 3a90 	vmov	s15, r3
 8010c42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c4a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010c5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010c66:	e065      	b.n	8010d34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	ee07 3a90 	vmov	s15, r3
 8010c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c72:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010c76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010c7a:	4b40      	ldr	r3, [pc, #256]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c82:	ee07 3a90 	vmov	s15, r3
 8010c86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010c8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010c8e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8010c92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010c96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010c9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ca6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010caa:	e043      	b.n	8010d34 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	ee07 3a90 	vmov	s15, r3
 8010cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cb6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010d98 <HAL_RCC_GetSysClockFreq+0x2f0>
 8010cba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010cbe:	4b2f      	ldr	r3, [pc, #188]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010cc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010cc6:	ee07 3a90 	vmov	s15, r3
 8010cca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010cce:	ed97 6a02 	vldr	s12, [r7, #8]
 8010cd2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8010cd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010cda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010ce2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010cea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010cee:	e021      	b.n	8010d34 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	ee07 3a90 	vmov	s15, r3
 8010cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cfa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010d94 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010cfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010d02:	4b1e      	ldr	r3, [pc, #120]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d0a:	ee07 3a90 	vmov	s15, r3
 8010d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010d12:	ed97 6a02 	vldr	s12, [r7, #8]
 8010d16:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010d8c <HAL_RCC_GetSysClockFreq+0x2e4>
 8010d1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010d1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010d26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010d2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010d32:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010d34:	4b11      	ldr	r3, [pc, #68]	; (8010d7c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010d38:	0a5b      	lsrs	r3, r3, #9
 8010d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d3e:	3301      	adds	r3, #1
 8010d40:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	ee07 3a90 	vmov	s15, r3
 8010d48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010d4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8010d50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010d54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010d58:	ee17 3a90 	vmov	r3, s15
 8010d5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8010d5e:	e005      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8010d60:	2300      	movs	r3, #0
 8010d62:	61bb      	str	r3, [r7, #24]
      break;
 8010d64:	e002      	b.n	8010d6c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8010d66:	4b07      	ldr	r3, [pc, #28]	; (8010d84 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010d68:	61bb      	str	r3, [r7, #24]
      break;
 8010d6a:	bf00      	nop
  }

  return sysclockfreq;
 8010d6c:	69bb      	ldr	r3, [r7, #24]
}
 8010d6e:	4618      	mov	r0, r3
 8010d70:	3724      	adds	r7, #36	; 0x24
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr
 8010d7a:	bf00      	nop
 8010d7c:	58024400 	.word	0x58024400
 8010d80:	03d09000 	.word	0x03d09000
 8010d84:	003d0900 	.word	0x003d0900
 8010d88:	017d7840 	.word	0x017d7840
 8010d8c:	46000000 	.word	0x46000000
 8010d90:	4c742400 	.word	0x4c742400
 8010d94:	4a742400 	.word	0x4a742400
 8010d98:	4bbebc20 	.word	0x4bbebc20

08010d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010da2:	f7ff fe81 	bl	8010aa8 <HAL_RCC_GetSysClockFreq>
 8010da6:	4602      	mov	r2, r0
 8010da8:	4b10      	ldr	r3, [pc, #64]	; (8010dec <HAL_RCC_GetHCLKFreq+0x50>)
 8010daa:	699b      	ldr	r3, [r3, #24]
 8010dac:	0a1b      	lsrs	r3, r3, #8
 8010dae:	f003 030f 	and.w	r3, r3, #15
 8010db2:	490f      	ldr	r1, [pc, #60]	; (8010df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8010db4:	5ccb      	ldrb	r3, [r1, r3]
 8010db6:	f003 031f 	and.w	r3, r3, #31
 8010dba:	fa22 f303 	lsr.w	r3, r2, r3
 8010dbe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010dc0:	4b0a      	ldr	r3, [pc, #40]	; (8010dec <HAL_RCC_GetHCLKFreq+0x50>)
 8010dc2:	699b      	ldr	r3, [r3, #24]
 8010dc4:	f003 030f 	and.w	r3, r3, #15
 8010dc8:	4a09      	ldr	r2, [pc, #36]	; (8010df0 <HAL_RCC_GetHCLKFreq+0x54>)
 8010dca:	5cd3      	ldrb	r3, [r2, r3]
 8010dcc:	f003 031f 	and.w	r3, r3, #31
 8010dd0:	687a      	ldr	r2, [r7, #4]
 8010dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8010dd6:	4a07      	ldr	r2, [pc, #28]	; (8010df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8010dd8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010dda:	4a07      	ldr	r2, [pc, #28]	; (8010df8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010de0:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <HAL_RCC_GetHCLKFreq+0x58>)
 8010de2:	681b      	ldr	r3, [r3, #0]
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3708      	adds	r7, #8
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	58024400 	.word	0x58024400
 8010df0:	08025b8c 	.word	0x08025b8c
 8010df4:	24000014 	.word	0x24000014
 8010df8:	24000010 	.word	0x24000010

08010dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010e00:	f7ff ffcc 	bl	8010d9c <HAL_RCC_GetHCLKFreq>
 8010e04:	4602      	mov	r2, r0
 8010e06:	4b06      	ldr	r3, [pc, #24]	; (8010e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010e08:	69db      	ldr	r3, [r3, #28]
 8010e0a:	091b      	lsrs	r3, r3, #4
 8010e0c:	f003 0307 	and.w	r3, r3, #7
 8010e10:	4904      	ldr	r1, [pc, #16]	; (8010e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010e12:	5ccb      	ldrb	r3, [r1, r3]
 8010e14:	f003 031f 	and.w	r3, r3, #31
 8010e18:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	58024400 	.word	0x58024400
 8010e24:	08025b8c 	.word	0x08025b8c

08010e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010e2c:	f7ff ffb6 	bl	8010d9c <HAL_RCC_GetHCLKFreq>
 8010e30:	4602      	mov	r2, r0
 8010e32:	4b06      	ldr	r3, [pc, #24]	; (8010e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010e34:	69db      	ldr	r3, [r3, #28]
 8010e36:	0a1b      	lsrs	r3, r3, #8
 8010e38:	f003 0307 	and.w	r3, r3, #7
 8010e3c:	4904      	ldr	r1, [pc, #16]	; (8010e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010e3e:	5ccb      	ldrb	r3, [r1, r3]
 8010e40:	f003 031f 	and.w	r3, r3, #31
 8010e44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010e48:	4618      	mov	r0, r3
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	58024400 	.word	0x58024400
 8010e50:	08025b8c 	.word	0x08025b8c

08010e54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]
 8010e5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	223f      	movs	r2, #63	; 0x3f
 8010e62:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010e64:	4b1a      	ldr	r3, [pc, #104]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	f003 0207 	and.w	r2, r3, #7
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8010e70:	4b17      	ldr	r3, [pc, #92]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e72:	699b      	ldr	r3, [r3, #24]
 8010e74:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8010e7c:	4b14      	ldr	r3, [pc, #80]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e7e:	699b      	ldr	r3, [r3, #24]
 8010e80:	f003 020f 	and.w	r2, r3, #15
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8010e88:	4b11      	ldr	r3, [pc, #68]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010e94:	4b0e      	ldr	r3, [pc, #56]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010e96:	69db      	ldr	r3, [r3, #28]
 8010e98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8010ea0:	4b0b      	ldr	r3, [pc, #44]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010ea2:	69db      	ldr	r3, [r3, #28]
 8010ea4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010eac:	4b08      	ldr	r3, [pc, #32]	; (8010ed0 <HAL_RCC_GetClockConfig+0x7c>)
 8010eae:	6a1b      	ldr	r3, [r3, #32]
 8010eb0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010eb8:	4b06      	ldr	r3, [pc, #24]	; (8010ed4 <HAL_RCC_GetClockConfig+0x80>)
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f003 020f 	and.w	r2, r3, #15
 8010ec0:	683b      	ldr	r3, [r7, #0]
 8010ec2:	601a      	str	r2, [r3, #0]
}
 8010ec4:	bf00      	nop
 8010ec6:	370c      	adds	r7, #12
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ece:	4770      	bx	lr
 8010ed0:	58024400 	.word	0x58024400
 8010ed4:	52002000 	.word	0x52002000

08010ed8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b086      	sub	sp, #24
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d03f      	beq.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ef8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010efc:	d02a      	beq.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010efe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010f02:	d824      	bhi.n	8010f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f08:	d018      	beq.n	8010f3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010f0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010f0e:	d81e      	bhi.n	8010f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d003      	beq.n	8010f1c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f18:	d007      	beq.n	8010f2a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010f1a:	e018      	b.n	8010f4e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f1c:	4ba3      	ldr	r3, [pc, #652]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f20:	4aa2      	ldr	r2, [pc, #648]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010f28:	e015      	b.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	3304      	adds	r3, #4
 8010f2e:	2102      	movs	r1, #2
 8010f30:	4618      	mov	r0, r3
 8010f32:	f000 ff17 	bl	8011d64 <RCCEx_PLL2_Config>
 8010f36:	4603      	mov	r3, r0
 8010f38:	75fb      	strb	r3, [r7, #23]

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010f3a:	e00c      	b.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	3324      	adds	r3, #36	; 0x24
 8010f40:	2102      	movs	r1, #2
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 ffc0 	bl	8011ec8 <RCCEx_PLL3_Config>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	75fb      	strb	r3, [r7, #23]

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010f4c:	e003      	b.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	75fb      	strb	r3, [r7, #23]
        break;
 8010f52:	e000      	b.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        break;
 8010f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f56:	7dfb      	ldrb	r3, [r7, #23]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d109      	bne.n	8010f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010f5c:	4b93      	ldr	r3, [pc, #588]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010f68:	4990      	ldr	r1, [pc, #576]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010f6a:	4313      	orrs	r3, r2
 8010f6c:	650b      	str	r3, [r1, #80]	; 0x50
 8010f6e:	e001      	b.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f70:	7dfb      	ldrb	r3, [r7, #23]
 8010f72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d03d      	beq.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f84:	2b04      	cmp	r3, #4
 8010f86:	d826      	bhi.n	8010fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8010f88:	a201      	add	r2, pc, #4	; (adr r2, 8010f90 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8010f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f8e:	bf00      	nop
 8010f90:	08010fa5 	.word	0x08010fa5
 8010f94:	08010fb3 	.word	0x08010fb3
 8010f98:	08010fc5 	.word	0x08010fc5
 8010f9c:	08010fdd 	.word	0x08010fdd
 8010fa0:	08010fdd 	.word	0x08010fdd
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010fa4:	4b81      	ldr	r3, [pc, #516]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa8:	4a80      	ldr	r2, [pc, #512]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010fae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010fb0:	e015      	b.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x106>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	2100      	movs	r1, #0
 8010fb8:	4618      	mov	r0, r3
 8010fba:	f000 fed3 	bl	8011d64 <RCCEx_PLL2_Config>
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	75fb      	strb	r3, [r7, #23]

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010fc2:	e00c      	b.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x106>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3324      	adds	r3, #36	; 0x24
 8010fc8:	2100      	movs	r1, #0
 8010fca:	4618      	mov	r0, r3
 8010fcc:	f000 ff7c 	bl	8011ec8 <RCCEx_PLL3_Config>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	75fb      	strb	r3, [r7, #23]

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010fd4:	e003      	b.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x106>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	75fb      	strb	r3, [r7, #23]
        break;
 8010fda:	e000      	b.n	8010fde <HAL_RCCEx_PeriphCLKConfig+0x106>
        break;
 8010fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010fde:	7dfb      	ldrb	r3, [r7, #23]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d109      	bne.n	8010ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010fe4:	4b71      	ldr	r3, [pc, #452]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010fe8:	f023 0207 	bic.w	r2, r3, #7
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ff0:	496e      	ldr	r1, [pc, #440]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8010ff2:	4313      	orrs	r3, r2
 8010ff4:	650b      	str	r3, [r1, #80]	; 0x50
 8010ff6:	e001      	b.n	8010ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ff8:	7dfb      	ldrb	r3, [r7, #23]
 8010ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011004:	2b00      	cmp	r3, #0
 8011006:	d042      	beq.n	801108e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801100c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011010:	d02b      	beq.n	801106a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8011012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011016:	d825      	bhi.n	8011064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011018:	2bc0      	cmp	r3, #192	; 0xc0
 801101a:	d028      	beq.n	801106e <HAL_RCCEx_PeriphCLKConfig+0x196>
 801101c:	2bc0      	cmp	r3, #192	; 0xc0
 801101e:	d821      	bhi.n	8011064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011020:	2b80      	cmp	r3, #128	; 0x80
 8011022:	d016      	beq.n	8011052 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8011024:	2b80      	cmp	r3, #128	; 0x80
 8011026:	d81d      	bhi.n	8011064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8011028:	2b00      	cmp	r3, #0
 801102a:	d002      	beq.n	8011032 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 801102c:	2b40      	cmp	r3, #64	; 0x40
 801102e:	d007      	beq.n	8011040 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8011030:	e018      	b.n	8011064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011032:	4b5e      	ldr	r3, [pc, #376]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011036:	4a5d      	ldr	r2, [pc, #372]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801103c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801103e:	e017      	b.n	8011070 <HAL_RCCEx_PeriphCLKConfig+0x198>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	3304      	adds	r3, #4
 8011044:	2100      	movs	r1, #0
 8011046:	4618      	mov	r0, r3
 8011048:	f000 fe8c 	bl	8011d64 <RCCEx_PLL2_Config>
 801104c:	4603      	mov	r3, r0
 801104e:	75fb      	strb	r3, [r7, #23]

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8011050:	e00e      	b.n	8011070 <HAL_RCCEx_PeriphCLKConfig+0x198>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	3324      	adds	r3, #36	; 0x24
 8011056:	2100      	movs	r1, #0
 8011058:	4618      	mov	r0, r3
 801105a:	f000 ff35 	bl	8011ec8 <RCCEx_PLL3_Config>
 801105e:	4603      	mov	r3, r0
 8011060:	75fb      	strb	r3, [r7, #23]

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8011062:	e005      	b.n	8011070 <HAL_RCCEx_PeriphCLKConfig+0x198>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011064:	2301      	movs	r3, #1
 8011066:	75fb      	strb	r3, [r7, #23]
        break;
 8011068:	e002      	b.n	8011070 <HAL_RCCEx_PeriphCLKConfig+0x198>
        break;
 801106a:	bf00      	nop
 801106c:	e000      	b.n	8011070 <HAL_RCCEx_PeriphCLKConfig+0x198>
        break;
 801106e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011070:	7dfb      	ldrb	r3, [r7, #23]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d109      	bne.n	801108a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8011076:	4b4d      	ldr	r3, [pc, #308]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801107a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011082:	494a      	ldr	r1, [pc, #296]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011084:	4313      	orrs	r3, r2
 8011086:	650b      	str	r3, [r1, #80]	; 0x50
 8011088:	e001      	b.n	801108e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801108a:	7dfb      	ldrb	r3, [r7, #23]
 801108c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011096:	2b00      	cmp	r3, #0
 8011098:	d049      	beq.n	801112e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80110a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80110a4:	d030      	beq.n	8011108 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80110a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80110aa:	d82a      	bhi.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80110ac:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80110b0:	d02c      	beq.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80110b2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80110b6:	d824      	bhi.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80110b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80110bc:	d018      	beq.n	80110f0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80110be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80110c2:	d81e      	bhi.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d003      	beq.n	80110d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80110c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80110cc:	d007      	beq.n	80110de <HAL_RCCEx_PeriphCLKConfig+0x206>
 80110ce:	e018      	b.n	8011102 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80110d0:	4b36      	ldr	r3, [pc, #216]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80110d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d4:	4a35      	ldr	r2, [pc, #212]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80110d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80110da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80110dc:	e017      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x236>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	3304      	adds	r3, #4
 80110e2:	2100      	movs	r1, #0
 80110e4:	4618      	mov	r0, r3
 80110e6:	f000 fe3d 	bl	8011d64 <RCCEx_PLL2_Config>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80110ee:	e00e      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x236>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3324      	adds	r3, #36	; 0x24
 80110f4:	2100      	movs	r1, #0
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 fee6 	bl	8011ec8 <RCCEx_PLL3_Config>
 80110fc:	4603      	mov	r3, r0
 80110fe:	75fb      	strb	r3, [r7, #23]

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011100:	e005      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x236>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011102:	2301      	movs	r3, #1
 8011104:	75fb      	strb	r3, [r7, #23]
        break;
 8011106:	e002      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x236>
        break;
 8011108:	bf00      	nop
 801110a:	e000      	b.n	801110e <HAL_RCCEx_PeriphCLKConfig+0x236>
        break;
 801110c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801110e:	7dfb      	ldrb	r3, [r7, #23]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d10a      	bne.n	801112a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011114:	4b25      	ldr	r3, [pc, #148]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011118:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011122:	4922      	ldr	r1, [pc, #136]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011124:	4313      	orrs	r3, r2
 8011126:	658b      	str	r3, [r1, #88]	; 0x58
 8011128:	e001      	b.n	801112e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801112a:	7dfb      	ldrb	r3, [r7, #23]
 801112c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011136:	2b00      	cmp	r3, #0
 8011138:	d04b      	beq.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011144:	d030      	beq.n	80111a8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8011146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801114a:	d82a      	bhi.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 801114c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011150:	d02e      	beq.n	80111b0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8011152:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011156:	d824      	bhi.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801115c:	d018      	beq.n	8011190 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 801115e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011162:	d81e      	bhi.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8011164:	2b00      	cmp	r3, #0
 8011166:	d003      	beq.n	8011170 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801116c:	d007      	beq.n	801117e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801116e:	e018      	b.n	80111a2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011170:	4b0e      	ldr	r3, [pc, #56]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011174:	4a0d      	ldr	r2, [pc, #52]	; (80111ac <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8011176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801117a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801117c:	e019      	b.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	3304      	adds	r3, #4
 8011182:	2100      	movs	r1, #0
 8011184:	4618      	mov	r0, r3
 8011186:	f000 fded 	bl	8011d64 <RCCEx_PLL2_Config>
 801118a:	4603      	mov	r3, r0
 801118c:	75fb      	strb	r3, [r7, #23]

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801118e:	e010      	b.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	3324      	adds	r3, #36	; 0x24
 8011194:	2100      	movs	r1, #0
 8011196:	4618      	mov	r0, r3
 8011198:	f000 fe96 	bl	8011ec8 <RCCEx_PLL3_Config>
 801119c:	4603      	mov	r3, r0
 801119e:	75fb      	strb	r3, [r7, #23]

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80111a0:	e007      	b.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80111a2:	2301      	movs	r3, #1
 80111a4:	75fb      	strb	r3, [r7, #23]
        break;
 80111a6:	e004      	b.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
        break;
 80111a8:	bf00      	nop
 80111aa:	e002      	b.n	80111b2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80111ac:	58024400 	.word	0x58024400
        break;
 80111b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80111b2:	7dfb      	ldrb	r3, [r7, #23]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d10a      	bne.n	80111ce <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80111b8:	4b99      	ldr	r3, [pc, #612]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80111c6:	4996      	ldr	r1, [pc, #600]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111c8:	4313      	orrs	r3, r2
 80111ca:	658b      	str	r3, [r1, #88]	; 0x58
 80111cc:	e001      	b.n	80111d2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111ce:	7dfb      	ldrb	r3, [r7, #23]
 80111d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d032      	beq.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80111e2:	2b30      	cmp	r3, #48	; 0x30
 80111e4:	d01c      	beq.n	8011220 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80111e6:	2b30      	cmp	r3, #48	; 0x30
 80111e8:	d817      	bhi.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80111ea:	2b20      	cmp	r3, #32
 80111ec:	d00c      	beq.n	8011208 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80111ee:	2b20      	cmp	r3, #32
 80111f0:	d813      	bhi.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d016      	beq.n	8011224 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80111f6:	2b10      	cmp	r3, #16
 80111f8:	d10f      	bne.n	801121a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80111fa:	4b89      	ldr	r3, [pc, #548]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80111fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fe:	4a88      	ldr	r2, [pc, #544]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011204:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8011206:	e00e      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x34e>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	3304      	adds	r3, #4
 801120c:	2102      	movs	r1, #2
 801120e:	4618      	mov	r0, r3
 8011210:	f000 fda8 	bl	8011d64 <RCCEx_PLL2_Config>
 8011214:	4603      	mov	r3, r0
 8011216:	75fb      	strb	r3, [r7, #23]

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8011218:	e005      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801121a:	2301      	movs	r3, #1
 801121c:	75fb      	strb	r3, [r7, #23]
        break;
 801121e:	e002      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        break;
 8011220:	bf00      	nop
 8011222:	e000      	b.n	8011226 <HAL_RCCEx_PeriphCLKConfig+0x34e>
        break;
 8011224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011226:	7dfb      	ldrb	r3, [r7, #23]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d109      	bne.n	8011240 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801122c:	4b7c      	ldr	r3, [pc, #496]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011230:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011238:	4979      	ldr	r1, [pc, #484]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801123a:	4313      	orrs	r3, r2
 801123c:	64cb      	str	r3, [r1, #76]	; 0x4c
 801123e:	e001      	b.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011240:	7dfb      	ldrb	r3, [r7, #23]
 8011242:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801124c:	2b00      	cmp	r3, #0
 801124e:	d047      	beq.n	80112e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011258:	d030      	beq.n	80112bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801125a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801125e:	d82a      	bhi.n	80112b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011260:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011264:	d02c      	beq.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8011266:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801126a:	d824      	bhi.n	80112b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 801126c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011270:	d018      	beq.n	80112a4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8011272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011276:	d81e      	bhi.n	80112b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8011278:	2b00      	cmp	r3, #0
 801127a:	d003      	beq.n	8011284 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 801127c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011280:	d007      	beq.n	8011292 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8011282:	e018      	b.n	80112b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011284:	4b66      	ldr	r3, [pc, #408]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011288:	4a65      	ldr	r2, [pc, #404]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801128a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801128e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8011290:	e017      	b.n	80112c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	3304      	adds	r3, #4
 8011296:	2100      	movs	r1, #0
 8011298:	4618      	mov	r0, r3
 801129a:	f000 fd63 	bl	8011d64 <RCCEx_PLL2_Config>
 801129e:	4603      	mov	r3, r0
 80112a0:	75fb      	strb	r3, [r7, #23]

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80112a2:	e00e      	b.n	80112c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	3324      	adds	r3, #36	; 0x24
 80112a8:	2100      	movs	r1, #0
 80112aa:	4618      	mov	r0, r3
 80112ac:	f000 fe0c 	bl	8011ec8 <RCCEx_PLL3_Config>
 80112b0:	4603      	mov	r3, r0
 80112b2:	75fb      	strb	r3, [r7, #23]

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80112b4:	e005      	b.n	80112c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80112b6:	2301      	movs	r3, #1
 80112b8:	75fb      	strb	r3, [r7, #23]
        break;
 80112ba:	e002      	b.n	80112c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 80112bc:	bf00      	nop
 80112be:	e000      	b.n	80112c2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
        break;
 80112c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80112c2:	7dfb      	ldrb	r3, [r7, #23]
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d109      	bne.n	80112dc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80112c8:	4b55      	ldr	r3, [pc, #340]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80112ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112cc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80112d4:	4952      	ldr	r1, [pc, #328]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80112d6:	4313      	orrs	r3, r2
 80112d8:	650b      	str	r3, [r1, #80]	; 0x50
 80112da:	e001      	b.n	80112e0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112dc:	7dfb      	ldrb	r3, [r7, #23]
 80112de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d049      	beq.n	8011380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80112f4:	d02e      	beq.n	8011354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80112f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80112fa:	d828      	bhi.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80112fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011300:	d02a      	beq.n	8011358 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8011302:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011306:	d822      	bhi.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011308:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801130c:	d026      	beq.n	801135c <HAL_RCCEx_PeriphCLKConfig+0x484>
 801130e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011312:	d81c      	bhi.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011318:	d010      	beq.n	801133c <HAL_RCCEx_PeriphCLKConfig+0x464>
 801131a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801131e:	d816      	bhi.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8011320:	2b00      	cmp	r3, #0
 8011322:	d01d      	beq.n	8011360 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8011324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011328:	d111      	bne.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x476>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	3304      	adds	r3, #4
 801132e:	2101      	movs	r1, #1
 8011330:	4618      	mov	r0, r3
 8011332:	f000 fd17 	bl	8011d64 <RCCEx_PLL2_Config>
 8011336:	4603      	mov	r3, r0
 8011338:	75fb      	strb	r3, [r7, #23]

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801133a:	e012      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	3324      	adds	r3, #36	; 0x24
 8011340:	2101      	movs	r1, #1
 8011342:	4618      	mov	r0, r3
 8011344:	f000 fdc0 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011348:	4603      	mov	r3, r0
 801134a:	75fb      	strb	r3, [r7, #23]
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801134c:	e009      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801134e:	2301      	movs	r3, #1
 8011350:	75fb      	strb	r3, [r7, #23]
        break;
 8011352:	e006      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        break;
 8011354:	bf00      	nop
 8011356:	e004      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        break;
 8011358:	bf00      	nop
 801135a:	e002      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        break;
 801135c:	bf00      	nop
 801135e:	e000      	b.n	8011362 <HAL_RCCEx_PeriphCLKConfig+0x48a>
        break;
 8011360:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011362:	7dfb      	ldrb	r3, [r7, #23]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d109      	bne.n	801137c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011368:	4b2d      	ldr	r3, [pc, #180]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801136a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801136c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011374:	492a      	ldr	r1, [pc, #168]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8011376:	4313      	orrs	r3, r2
 8011378:	650b      	str	r3, [r1, #80]	; 0x50
 801137a:	e001      	b.n	8011380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801137c:	7dfb      	ldrb	r3, [r7, #23]
 801137e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011388:	2b00      	cmp	r3, #0
 801138a:	d04d      	beq.n	8011428 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011392:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011396:	d02e      	beq.n	80113f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8011398:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801139c:	d828      	bhi.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 801139e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113a2:	d02a      	beq.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x522>
 80113a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80113a8:	d822      	bhi.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80113aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80113ae:	d026      	beq.n	80113fe <HAL_RCCEx_PeriphCLKConfig+0x526>
 80113b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80113b4:	d81c      	bhi.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80113b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113ba:	d010      	beq.n	80113de <HAL_RCCEx_PeriphCLKConfig+0x506>
 80113bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80113c0:	d816      	bhi.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d01d      	beq.n	8011402 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80113c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80113ca:	d111      	bne.n	80113f0 <HAL_RCCEx_PeriphCLKConfig+0x518>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	3304      	adds	r3, #4
 80113d0:	2101      	movs	r1, #1
 80113d2:	4618      	mov	r0, r3
 80113d4:	f000 fcc6 	bl	8011d64 <RCCEx_PLL2_Config>
 80113d8:	4603      	mov	r3, r0
 80113da:	75fb      	strb	r3, [r7, #23]

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80113dc:	e012      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	3324      	adds	r3, #36	; 0x24
 80113e2:	2101      	movs	r1, #1
 80113e4:	4618      	mov	r0, r3
 80113e6:	f000 fd6f 	bl	8011ec8 <RCCEx_PLL3_Config>
 80113ea:	4603      	mov	r3, r0
 80113ec:	75fb      	strb	r3, [r7, #23]
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80113ee:	e009      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80113f0:	2301      	movs	r3, #1
 80113f2:	75fb      	strb	r3, [r7, #23]
        break;
 80113f4:	e006      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 80113f6:	bf00      	nop
 80113f8:	e004      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 80113fa:	bf00      	nop
 80113fc:	e002      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 80113fe:	bf00      	nop
 8011400:	e000      	b.n	8011404 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        break;
 8011402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011404:	7dfb      	ldrb	r3, [r7, #23]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d10c      	bne.n	8011424 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801140a:	4b05      	ldr	r3, [pc, #20]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801140c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801140e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8011418:	4901      	ldr	r1, [pc, #4]	; (8011420 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 801141a:	4313      	orrs	r3, r2
 801141c:	658b      	str	r3, [r1, #88]	; 0x58
 801141e:	e003      	b.n	8011428 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8011420:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011424:	7dfb      	ldrb	r3, [r7, #23]
 8011426:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	681b      	ldr	r3, [r3, #0]
 801142c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011430:	2b00      	cmp	r3, #0
 8011432:	d02f      	beq.n	8011494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801143c:	d00e      	beq.n	801145c <HAL_RCCEx_PeriphCLKConfig+0x584>
 801143e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011442:	d814      	bhi.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8011444:	2b00      	cmp	r3, #0
 8011446:	d015      	beq.n	8011474 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8011448:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801144c:	d10f      	bne.n	801146e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801144e:	4baf      	ldr	r3, [pc, #700]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011452:	4aae      	ldr	r2, [pc, #696]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011454:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011458:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801145a:	e00c      	b.n	8011476 <HAL_RCCEx_PeriphCLKConfig+0x59e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	3304      	adds	r3, #4
 8011460:	2101      	movs	r1, #1
 8011462:	4618      	mov	r0, r3
 8011464:	f000 fc7e 	bl	8011d64 <RCCEx_PLL2_Config>
 8011468:	4603      	mov	r3, r0
 801146a:	75fb      	strb	r3, [r7, #23]

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801146c:	e003      	b.n	8011476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801146e:	2301      	movs	r3, #1
 8011470:	75fb      	strb	r3, [r7, #23]
        break;
 8011472:	e000      	b.n	8011476 <HAL_RCCEx_PeriphCLKConfig+0x59e>
        break;
 8011474:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011476:	7dfb      	ldrb	r3, [r7, #23]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d109      	bne.n	8011490 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801147c:	4ba3      	ldr	r3, [pc, #652]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801147e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011480:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011488:	49a0      	ldr	r1, [pc, #640]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801148a:	4313      	orrs	r3, r2
 801148c:	650b      	str	r3, [r1, #80]	; 0x50
 801148e:	e001      	b.n	8011494 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011490:	7dfb      	ldrb	r3, [r7, #23]
 8011492:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801149c:	2b00      	cmp	r3, #0
 801149e:	d032      	beq.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114a4:	2b03      	cmp	r3, #3
 80114a6:	d81b      	bhi.n	80114e0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80114a8:	a201      	add	r2, pc, #4	; (adr r2, 80114b0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80114aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114ae:	bf00      	nop
 80114b0:	080114e7 	.word	0x080114e7
 80114b4:	080114c1 	.word	0x080114c1
 80114b8:	080114cf 	.word	0x080114cf
 80114bc:	080114e7 	.word	0x080114e7
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80114c0:	4b92      	ldr	r3, [pc, #584]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114c4:	4a91      	ldr	r2, [pc, #580]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80114ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80114cc:	e00c      	b.n	80114e8 <HAL_RCCEx_PeriphCLKConfig+0x610>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	3304      	adds	r3, #4
 80114d2:	2102      	movs	r1, #2
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fc45 	bl	8011d64 <RCCEx_PLL2_Config>
 80114da:	4603      	mov	r3, r0
 80114dc:	75fb      	strb	r3, [r7, #23]

        /* FMC clock source configuration done later after clock selection check */
        break;
 80114de:	e003      	b.n	80114e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80114e0:	2301      	movs	r3, #1
 80114e2:	75fb      	strb	r3, [r7, #23]
        break;
 80114e4:	e000      	b.n	80114e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
        break;
 80114e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80114e8:	7dfb      	ldrb	r3, [r7, #23]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d109      	bne.n	8011502 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80114ee:	4b87      	ldr	r3, [pc, #540]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114f2:	f023 0203 	bic.w	r2, r3, #3
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114fa:	4984      	ldr	r1, [pc, #528]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80114fc:	4313      	orrs	r3, r2
 80114fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011500:	e001      	b.n	8011506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011502:	7dfb      	ldrb	r3, [r7, #23]
 8011504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801150e:	2b00      	cmp	r3, #0
 8011510:	f000 8086 	beq.w	8011620 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011514:	4b7e      	ldr	r3, [pc, #504]	; (8011710 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4a7d      	ldr	r2, [pc, #500]	; (8011710 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801151a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801151e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8011520:	f7fb fa96 	bl	800ca50 <HAL_GetTick>
 8011524:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8011526:	e009      	b.n	801153c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011528:	f7fb fa92 	bl	800ca50 <HAL_GetTick>
 801152c:	4602      	mov	r2, r0
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	1ad3      	subs	r3, r2, r3
 8011532:	2b64      	cmp	r3, #100	; 0x64
 8011534:	d902      	bls.n	801153c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	75fb      	strb	r3, [r7, #23]
        break;
 801153a:	e005      	b.n	8011548 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801153c:	4b74      	ldr	r3, [pc, #464]	; (8011710 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011544:	2b00      	cmp	r3, #0
 8011546:	d0ef      	beq.n	8011528 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if (ret == HAL_OK)
 8011548:	7dfb      	ldrb	r3, [r7, #23]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d166      	bne.n	801161c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801154e:	4b6f      	ldr	r3, [pc, #444]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011550:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011558:	4053      	eors	r3, r2
 801155a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801155e:	2b00      	cmp	r3, #0
 8011560:	d013      	beq.n	801158a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8011562:	4b6a      	ldr	r3, [pc, #424]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801156a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801156c:	4b67      	ldr	r3, [pc, #412]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801156e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011570:	4a66      	ldr	r2, [pc, #408]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011576:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011578:	4b64      	ldr	r3, [pc, #400]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801157a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801157c:	4a63      	ldr	r2, [pc, #396]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 801157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011582:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011584:	4a61      	ldr	r2, [pc, #388]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011586:	68fb      	ldr	r3, [r7, #12]
 8011588:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011594:	d115      	bne.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011596:	f7fb fa5b 	bl	800ca50 <HAL_GetTick>
 801159a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801159c:	e00b      	b.n	80115b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801159e:	f7fb fa57 	bl	800ca50 <HAL_GetTick>
 80115a2:	4602      	mov	r2, r0
 80115a4:	693b      	ldr	r3, [r7, #16]
 80115a6:	1ad3      	subs	r3, r2, r3
 80115a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80115ac:	4293      	cmp	r3, r2
 80115ae:	d902      	bls.n	80115b6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80115b0:	2303      	movs	r3, #3
 80115b2:	75fb      	strb	r3, [r7, #23]
            break;
 80115b4:	e005      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80115b6:	4b55      	ldr	r3, [pc, #340]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80115b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ba:	f003 0302 	and.w	r3, r3, #2
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d0ed      	beq.n	801159e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if (ret == HAL_OK)
 80115c2:	7dfb      	ldrb	r3, [r7, #23]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d126      	bne.n	8011616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80115ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80115d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115d6:	d10d      	bne.n	80115f4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80115d8:	4b4c      	ldr	r3, [pc, #304]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80115da:	691b      	ldr	r3, [r3, #16]
 80115dc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80115e6:	0919      	lsrs	r1, r3, #4
 80115e8:	4b4a      	ldr	r3, [pc, #296]	; (8011714 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80115ea:	400b      	ands	r3, r1
 80115ec:	4947      	ldr	r1, [pc, #284]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80115ee:	4313      	orrs	r3, r2
 80115f0:	610b      	str	r3, [r1, #16]
 80115f2:	e005      	b.n	8011600 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80115f4:	4b45      	ldr	r3, [pc, #276]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80115f6:	691b      	ldr	r3, [r3, #16]
 80115f8:	4a44      	ldr	r2, [pc, #272]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80115fa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80115fe:	6113      	str	r3, [r2, #16]
 8011600:	4b42      	ldr	r3, [pc, #264]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011602:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801160a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801160e:	493f      	ldr	r1, [pc, #252]	; (801170c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8011610:	4313      	orrs	r3, r2
 8011612:	670b      	str	r3, [r1, #112]	; 0x70
 8011614:	e004      	b.n	8011620 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8011616:	7dfb      	ldrb	r3, [r7, #23]
 8011618:	75bb      	strb	r3, [r7, #22]
 801161a:	e001      	b.n	8011620 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801161c:	7dfb      	ldrb	r3, [r7, #23]
 801161e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	f003 0301 	and.w	r3, r3, #1
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 8085 	beq.w	8011738 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011632:	2b28      	cmp	r3, #40	; 0x28
 8011634:	d866      	bhi.n	8011704 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8011636:	a201      	add	r2, pc, #4	; (adr r2, 801163c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8011638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163c:	08011719 	.word	0x08011719
 8011640:	08011705 	.word	0x08011705
 8011644:	08011705 	.word	0x08011705
 8011648:	08011705 	.word	0x08011705
 801164c:	08011705 	.word	0x08011705
 8011650:	08011705 	.word	0x08011705
 8011654:	08011705 	.word	0x08011705
 8011658:	08011705 	.word	0x08011705
 801165c:	080116e1 	.word	0x080116e1
 8011660:	08011705 	.word	0x08011705
 8011664:	08011705 	.word	0x08011705
 8011668:	08011705 	.word	0x08011705
 801166c:	08011705 	.word	0x08011705
 8011670:	08011705 	.word	0x08011705
 8011674:	08011705 	.word	0x08011705
 8011678:	08011705 	.word	0x08011705
 801167c:	080116f3 	.word	0x080116f3
 8011680:	08011705 	.word	0x08011705
 8011684:	08011705 	.word	0x08011705
 8011688:	08011705 	.word	0x08011705
 801168c:	08011705 	.word	0x08011705
 8011690:	08011705 	.word	0x08011705
 8011694:	08011705 	.word	0x08011705
 8011698:	08011705 	.word	0x08011705
 801169c:	08011719 	.word	0x08011719
 80116a0:	08011705 	.word	0x08011705
 80116a4:	08011705 	.word	0x08011705
 80116a8:	08011705 	.word	0x08011705
 80116ac:	08011705 	.word	0x08011705
 80116b0:	08011705 	.word	0x08011705
 80116b4:	08011705 	.word	0x08011705
 80116b8:	08011705 	.word	0x08011705
 80116bc:	08011719 	.word	0x08011719
 80116c0:	08011705 	.word	0x08011705
 80116c4:	08011705 	.word	0x08011705
 80116c8:	08011705 	.word	0x08011705
 80116cc:	08011705 	.word	0x08011705
 80116d0:	08011705 	.word	0x08011705
 80116d4:	08011705 	.word	0x08011705
 80116d8:	08011705 	.word	0x08011705
 80116dc:	08011719 	.word	0x08011719
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	3304      	adds	r3, #4
 80116e4:	2101      	movs	r1, #1
 80116e6:	4618      	mov	r0, r3
 80116e8:	f000 fb3c 	bl	8011d64 <RCCEx_PLL2_Config>
 80116ec:	4603      	mov	r3, r0
 80116ee:	75fb      	strb	r3, [r7, #23]
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80116f0:	e013      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x842>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	3324      	adds	r3, #36	; 0x24
 80116f6:	2101      	movs	r1, #1
 80116f8:	4618      	mov	r0, r3
 80116fa:	f000 fbe5 	bl	8011ec8 <RCCEx_PLL3_Config>
 80116fe:	4603      	mov	r3, r0
 8011700:	75fb      	strb	r3, [r7, #23]
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011702:	e00a      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x842>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011704:	2301      	movs	r3, #1
 8011706:	75fb      	strb	r3, [r7, #23]
        break;
 8011708:	e007      	b.n	801171a <HAL_RCCEx_PeriphCLKConfig+0x842>
 801170a:	bf00      	nop
 801170c:	58024400 	.word	0x58024400
 8011710:	58024800 	.word	0x58024800
 8011714:	00ffffcf 	.word	0x00ffffcf
        break;
 8011718:	bf00      	nop
    }

    if (ret == HAL_OK)
 801171a:	7dfb      	ldrb	r3, [r7, #23]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d109      	bne.n	8011734 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8011720:	4b96      	ldr	r3, [pc, #600]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011724:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801172c:	4993      	ldr	r1, [pc, #588]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801172e:	4313      	orrs	r3, r2
 8011730:	654b      	str	r3, [r1, #84]	; 0x54
 8011732:	e001      	b.n	8011738 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011734:	7dfb      	ldrb	r3, [r7, #23]
 8011736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	f003 0302 	and.w	r3, r3, #2
 8011740:	2b00      	cmp	r3, #0
 8011742:	d038      	beq.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011748:	2b05      	cmp	r3, #5
 801174a:	d821      	bhi.n	8011790 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 801174c:	a201      	add	r2, pc, #4	; (adr r2, 8011754 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 801174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011752:	bf00      	nop
 8011754:	08011797 	.word	0x08011797
 8011758:	0801176d 	.word	0x0801176d
 801175c:	0801177f 	.word	0x0801177f
 8011760:	08011797 	.word	0x08011797
 8011764:	08011797 	.word	0x08011797
 8011768:	08011797 	.word	0x08011797
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	3304      	adds	r3, #4
 8011770:	2101      	movs	r1, #1
 8011772:	4618      	mov	r0, r3
 8011774:	f000 faf6 	bl	8011d64 <RCCEx_PLL2_Config>
 8011778:	4603      	mov	r3, r0
 801177a:	75fb      	strb	r3, [r7, #23]
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801177c:	e00c      	b.n	8011798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	3324      	adds	r3, #36	; 0x24
 8011782:	2101      	movs	r1, #1
 8011784:	4618      	mov	r0, r3
 8011786:	f000 fb9f 	bl	8011ec8 <RCCEx_PLL3_Config>
 801178a:	4603      	mov	r3, r0
 801178c:	75fb      	strb	r3, [r7, #23]
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801178e:	e003      	b.n	8011798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011790:	2301      	movs	r3, #1
 8011792:	75fb      	strb	r3, [r7, #23]
        break;
 8011794:	e000      	b.n	8011798 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
        break;
 8011796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011798:	7dfb      	ldrb	r3, [r7, #23]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d109      	bne.n	80117b2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801179e:	4b77      	ldr	r3, [pc, #476]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80117a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80117a2:	f023 0207 	bic.w	r2, r3, #7
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117aa:	4974      	ldr	r1, [pc, #464]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80117ac:	4313      	orrs	r3, r2
 80117ae:	654b      	str	r3, [r1, #84]	; 0x54
 80117b0:	e001      	b.n	80117b6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f003 0304 	and.w	r3, r3, #4
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d03a      	beq.n	8011838 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80117c8:	2b05      	cmp	r3, #5
 80117ca:	d821      	bhi.n	8011810 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80117cc:	a201      	add	r2, pc, #4	; (adr r2, 80117d4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80117ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117d2:	bf00      	nop
 80117d4:	08011817 	.word	0x08011817
 80117d8:	080117ed 	.word	0x080117ed
 80117dc:	080117ff 	.word	0x080117ff
 80117e0:	08011817 	.word	0x08011817
 80117e4:	08011817 	.word	0x08011817
 80117e8:	08011817 	.word	0x08011817
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	3304      	adds	r3, #4
 80117f0:	2101      	movs	r1, #1
 80117f2:	4618      	mov	r0, r3
 80117f4:	f000 fab6 	bl	8011d64 <RCCEx_PLL2_Config>
 80117f8:	4603      	mov	r3, r0
 80117fa:	75fb      	strb	r3, [r7, #23]
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80117fc:	e00c      	b.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x940>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	3324      	adds	r3, #36	; 0x24
 8011802:	2101      	movs	r1, #1
 8011804:	4618      	mov	r0, r3
 8011806:	f000 fb5f 	bl	8011ec8 <RCCEx_PLL3_Config>
 801180a:	4603      	mov	r3, r0
 801180c:	75fb      	strb	r3, [r7, #23]
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801180e:	e003      	b.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x940>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011810:	2301      	movs	r3, #1
 8011812:	75fb      	strb	r3, [r7, #23]
        break;
 8011814:	e000      	b.n	8011818 <HAL_RCCEx_PeriphCLKConfig+0x940>
        break;
 8011816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011818:	7dfb      	ldrb	r3, [r7, #23]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d10a      	bne.n	8011834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801181e:	4b57      	ldr	r3, [pc, #348]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011822:	f023 0207 	bic.w	r2, r3, #7
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801182c:	4953      	ldr	r1, [pc, #332]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 801182e:	4313      	orrs	r3, r2
 8011830:	658b      	str	r3, [r1, #88]	; 0x58
 8011832:	e001      	b.n	8011838 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011834:	7dfb      	ldrb	r3, [r7, #23]
 8011836:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	f003 0320 	and.w	r3, r3, #32
 8011840:	2b00      	cmp	r3, #0
 8011842:	d04b      	beq.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801184a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801184e:	d02e      	beq.n	80118ae <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8011850:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011854:	d828      	bhi.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801185a:	d02a      	beq.n	80118b2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 801185c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011860:	d822      	bhi.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8011862:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011866:	d026      	beq.n	80118b6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8011868:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801186c:	d81c      	bhi.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801186e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011872:	d010      	beq.n	8011896 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8011874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011878:	d816      	bhi.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 801187a:	2b00      	cmp	r3, #0
 801187c:	d01d      	beq.n	80118ba <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 801187e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011882:	d111      	bne.n	80118a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	3304      	adds	r3, #4
 8011888:	2100      	movs	r1, #0
 801188a:	4618      	mov	r0, r3
 801188c:	f000 fa6a 	bl	8011d64 <RCCEx_PLL2_Config>
 8011890:	4603      	mov	r3, r0
 8011892:	75fb      	strb	r3, [r7, #23]

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8011894:	e012      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	3324      	adds	r3, #36	; 0x24
 801189a:	2102      	movs	r1, #2
 801189c:	4618      	mov	r0, r3
 801189e:	f000 fb13 	bl	8011ec8 <RCCEx_PLL3_Config>
 80118a2:	4603      	mov	r3, r0
 80118a4:	75fb      	strb	r3, [r7, #23]

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80118a6:	e009      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80118a8:	2301      	movs	r3, #1
 80118aa:	75fb      	strb	r3, [r7, #23]
        break;
 80118ac:	e006      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
        break;
 80118ae:	bf00      	nop
 80118b0:	e004      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
        break;
 80118b2:	bf00      	nop
 80118b4:	e002      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
        break;
 80118b6:	bf00      	nop
 80118b8:	e000      	b.n	80118bc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
        break;
 80118ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80118bc:	7dfb      	ldrb	r3, [r7, #23]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d10a      	bne.n	80118d8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80118c2:	4b2e      	ldr	r3, [pc, #184]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80118c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118c6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118d0:	492a      	ldr	r1, [pc, #168]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80118d2:	4313      	orrs	r3, r2
 80118d4:	654b      	str	r3, [r1, #84]	; 0x54
 80118d6:	e001      	b.n	80118dc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118d8:	7dfb      	ldrb	r3, [r7, #23]
 80118da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d04d      	beq.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80118ee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80118f2:	d02e      	beq.n	8011952 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80118f4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80118f8:	d828      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80118fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118fe:	d02a      	beq.n	8011956 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8011900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011904:	d822      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011906:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801190a:	d026      	beq.n	801195a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 801190c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011910:	d81c      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8011912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011916:	d010      	beq.n	801193a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8011918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801191c:	d816      	bhi.n	801194c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 801191e:	2b00      	cmp	r3, #0
 8011920:	d01d      	beq.n	801195e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8011922:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011926:	d111      	bne.n	801194c <HAL_RCCEx_PeriphCLKConfig+0xa74>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	3304      	adds	r3, #4
 801192c:	2100      	movs	r1, #0
 801192e:	4618      	mov	r0, r3
 8011930:	f000 fa18 	bl	8011d64 <RCCEx_PLL2_Config>
 8011934:	4603      	mov	r3, r0
 8011936:	75fb      	strb	r3, [r7, #23]

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011938:	e012      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	3324      	adds	r3, #36	; 0x24
 801193e:	2102      	movs	r1, #2
 8011940:	4618      	mov	r0, r3
 8011942:	f000 fac1 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011946:	4603      	mov	r3, r0
 8011948:	75fb      	strb	r3, [r7, #23]

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801194a:	e009      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801194c:	2301      	movs	r3, #1
 801194e:	75fb      	strb	r3, [r7, #23]
        break;
 8011950:	e006      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        break;
 8011952:	bf00      	nop
 8011954:	e004      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        break;
 8011956:	bf00      	nop
 8011958:	e002      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        break;
 801195a:	bf00      	nop
 801195c:	e000      	b.n	8011960 <HAL_RCCEx_PeriphCLKConfig+0xa88>
        break;
 801195e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011960:	7dfb      	ldrb	r3, [r7, #23]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d10c      	bne.n	8011980 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8011966:	4b05      	ldr	r3, [pc, #20]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801196a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8011974:	4901      	ldr	r1, [pc, #4]	; (801197c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8011976:	4313      	orrs	r3, r2
 8011978:	658b      	str	r3, [r1, #88]	; 0x58
 801197a:	e003      	b.n	8011984 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 801197c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011980:	7dfb      	ldrb	r3, [r7, #23]
 8011982:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801198c:	2b00      	cmp	r3, #0
 801198e:	d04b      	beq.n	8011a28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011996:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801199a:	d02e      	beq.n	80119fa <HAL_RCCEx_PeriphCLKConfig+0xb22>
 801199c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80119a0:	d828      	bhi.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80119a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119a6:	d02a      	beq.n	80119fe <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80119a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80119ac:	d822      	bhi.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80119ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80119b2:	d026      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80119b4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80119b8:	d81c      	bhi.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80119ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80119be:	d010      	beq.n	80119e2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80119c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80119c4:	d816      	bhi.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d01d      	beq.n	8011a06 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80119ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80119ce:	d111      	bne.n	80119f4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	3304      	adds	r3, #4
 80119d4:	2100      	movs	r1, #0
 80119d6:	4618      	mov	r0, r3
 80119d8:	f000 f9c4 	bl	8011d64 <RCCEx_PLL2_Config>
 80119dc:	4603      	mov	r3, r0
 80119de:	75fb      	strb	r3, [r7, #23]

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80119e0:	e012      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	3324      	adds	r3, #36	; 0x24
 80119e6:	2102      	movs	r1, #2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f000 fa6d 	bl	8011ec8 <RCCEx_PLL3_Config>
 80119ee:	4603      	mov	r3, r0
 80119f0:	75fb      	strb	r3, [r7, #23]

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80119f2:	e009      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80119f4:	2301      	movs	r3, #1
 80119f6:	75fb      	strb	r3, [r7, #23]
        break;
 80119f8:	e006      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        break;
 80119fa:	bf00      	nop
 80119fc:	e004      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        break;
 80119fe:	bf00      	nop
 8011a00:	e002      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        break;
 8011a02:	bf00      	nop
 8011a04:	e000      	b.n	8011a08 <HAL_RCCEx_PeriphCLKConfig+0xb30>
        break;
 8011a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011a08:	7dfb      	ldrb	r3, [r7, #23]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d10a      	bne.n	8011a24 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8011a0e:	4b9d      	ldr	r3, [pc, #628]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8011a1c:	4999      	ldr	r1, [pc, #612]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a1e:	4313      	orrs	r3, r2
 8011a20:	658b      	str	r3, [r1, #88]	; 0x58
 8011a22:	e001      	b.n	8011a28 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a24:	7dfb      	ldrb	r3, [r7, #23]
 8011a26:	75bb      	strb	r3, [r7, #22]

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	f003 0308 	and.w	r3, r3, #8
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d01a      	beq.n	8011a6a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011a3e:	d10a      	bne.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	3324      	adds	r3, #36	; 0x24
 8011a44:	2102      	movs	r1, #2
 8011a46:	4618      	mov	r0, r3
 8011a48:	f000 fa3e 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
      {
        status = HAL_ERROR;
 8011a52:	2301      	movs	r3, #1
 8011a54:	75bb      	strb	r3, [r7, #22]
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8011a56:	4b8b      	ldr	r3, [pc, #556]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a64:	4987      	ldr	r1, [pc, #540]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a66:	4313      	orrs	r3, r2
 8011a68:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	f003 0310 	and.w	r3, r3, #16
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d01a      	beq.n	8011aac <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a80:	d10a      	bne.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	3324      	adds	r3, #36	; 0x24
 8011a86:	2102      	movs	r1, #2
 8011a88:	4618      	mov	r0, r3
 8011a8a:	f000 fa1d 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d001      	beq.n	8011a98 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8011a94:	2301      	movs	r3, #1
 8011a96:	75bb      	strb	r3, [r7, #22]
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011a98:	4b7a      	ldr	r3, [pc, #488]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011aa6:	4977      	ldr	r1, [pc, #476]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d034      	beq.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011abe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ac2:	d01d      	beq.n	8011b00 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8011ac4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011ac8:	d817      	bhi.n	8011afa <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d003      	beq.n	8011ad6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8011ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ad2:	d009      	beq.n	8011ae8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8011ad4:	e011      	b.n	8011afa <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	3304      	adds	r3, #4
 8011ada:	2100      	movs	r1, #0
 8011adc:	4618      	mov	r0, r3
 8011ade:	f000 f941 	bl	8011d64 <RCCEx_PLL2_Config>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	75fb      	strb	r3, [r7, #23]

        /* ADC clock source configuration done later after clock selection check */
        break;
 8011ae6:	e00c      	b.n	8011b02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	3324      	adds	r3, #36	; 0x24
 8011aec:	2102      	movs	r1, #2
 8011aee:	4618      	mov	r0, r3
 8011af0:	f000 f9ea 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011af4:	4603      	mov	r3, r0
 8011af6:	75fb      	strb	r3, [r7, #23]

        /* ADC clock source configuration done later after clock selection check */
        break;
 8011af8:	e003      	b.n	8011b02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011afa:	2301      	movs	r3, #1
 8011afc:	75fb      	strb	r3, [r7, #23]
        break;
 8011afe:	e000      	b.n	8011b02 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
        break;
 8011b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d10a      	bne.n	8011b1e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8011b08:	4b5e      	ldr	r3, [pc, #376]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011b16:	495b      	ldr	r1, [pc, #364]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b18:	4313      	orrs	r3, r2
 8011b1a:	658b      	str	r3, [r1, #88]	; 0x58
 8011b1c:	e001      	b.n	8011b22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
 8011b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d033      	beq.n	8011b96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b34:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011b38:	d01c      	beq.n	8011b74 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8011b3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011b3e:	d816      	bhi.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8011b40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b44:	d003      	beq.n	8011b4e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8011b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b4a:	d007      	beq.n	8011b5c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8011b4c:	e00f      	b.n	8011b6e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011b4e:	4b4d      	ldr	r3, [pc, #308]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b52:	4a4c      	ldr	r2, [pc, #304]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011b58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8011b5a:	e00c      	b.n	8011b76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	3324      	adds	r3, #36	; 0x24
 8011b60:	2101      	movs	r1, #1
 8011b62:	4618      	mov	r0, r3
 8011b64:	f000 f9b0 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	75fb      	strb	r3, [r7, #23]

        /* USB clock source configuration done later after clock selection check */
        break;
 8011b6c:	e003      	b.n	8011b76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	75fb      	strb	r3, [r7, #23]
        break;
 8011b72:	e000      	b.n	8011b76 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
        break;
 8011b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b76:	7dfb      	ldrb	r3, [r7, #23]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10a      	bne.n	8011b92 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011b7c:	4b41      	ldr	r3, [pc, #260]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011b8a:	493e      	ldr	r1, [pc, #248]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011b8c:	4313      	orrs	r3, r2
 8011b8e:	654b      	str	r3, [r1, #84]	; 0x54
 8011b90:	e001      	b.n	8011b96 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b92:	7dfb      	ldrb	r3, [r7, #23]
 8011b94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d029      	beq.n	8011bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d003      	beq.n	8011bb2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8011baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011bae:	d007      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8011bb0:	e00f      	b.n	8011bd2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011bb2:	4b34      	ldr	r3, [pc, #208]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bb6:	4a33      	ldr	r2, [pc, #204]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011bbe:	e00b      	b.n	8011bd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	3304      	adds	r3, #4
 8011bc4:	2102      	movs	r1, #2
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	f000 f8cc 	bl	8011d64 <RCCEx_PLL2_Config>
 8011bcc:	4603      	mov	r3, r0
 8011bce:	75fb      	strb	r3, [r7, #23]

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011bd0:	e002      	b.n	8011bd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

      default:
        ret = HAL_ERROR;
 8011bd2:	2301      	movs	r3, #1
 8011bd4:	75fb      	strb	r3, [r7, #23]
        break;
 8011bd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011bd8:	7dfb      	ldrb	r3, [r7, #23]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d109      	bne.n	8011bf2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011bde:	4b29      	ldr	r3, [pc, #164]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011be2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bea:	4926      	ldr	r1, [pc, #152]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011bec:	4313      	orrs	r3, r2
 8011bee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8011bf0:	e001      	b.n	8011bf6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d00a      	beq.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	3324      	adds	r3, #36	; 0x24
 8011c06:	2102      	movs	r1, #2
 8011c08:	4618      	mov	r0, r3
 8011c0a:	f000 f95d 	bl	8011ec8 <RCCEx_PLL3_Config>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d001      	beq.n	8011c18 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status = HAL_ERROR;
 8011c14:	2301      	movs	r3, #1
 8011c16:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d033      	beq.n	8011c8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c2c:	d017      	beq.n	8011c5e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8011c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011c32:	d811      	bhi.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c38:	d013      	beq.n	8011c62 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8011c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c3e:	d80b      	bhi.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d010      	beq.n	8011c66 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8011c44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c48:	d106      	bne.n	8011c58 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011c4a:	4b0e      	ldr	r3, [pc, #56]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c4e:	4a0d      	ldr	r2, [pc, #52]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011c54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011c56:	e007      	b.n	8011c68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011c58:	2301      	movs	r3, #1
 8011c5a:	75fb      	strb	r3, [r7, #23]
        break;
 8011c5c:	e004      	b.n	8011c68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
        break;
 8011c5e:	bf00      	nop
 8011c60:	e002      	b.n	8011c68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
        break;
 8011c62:	bf00      	nop
 8011c64:	e000      	b.n	8011c68 <HAL_RCCEx_PeriphCLKConfig+0xd90>
        break;
 8011c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011c68:	7dfb      	ldrb	r3, [r7, #23]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d10c      	bne.n	8011c88 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011c6e:	4b05      	ldr	r3, [pc, #20]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c7a:	4902      	ldr	r1, [pc, #8]	; (8011c84 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8011c7c:	4313      	orrs	r3, r2
 8011c7e:	654b      	str	r3, [r1, #84]	; 0x54
 8011c80:	e004      	b.n	8011c8c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8011c82:	bf00      	nop
 8011c84:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011c88:	7dfb      	ldrb	r3, [r7, #23]
 8011c8a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d008      	beq.n	8011caa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011c98:	4b31      	ldr	r3, [pc, #196]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ca4:	492e      	ldr	r1, [pc, #184]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011ca6:	4313      	orrs	r3, r2
 8011ca8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d009      	beq.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011cb6:	4b2a      	ldr	r3, [pc, #168]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011cb8:	691b      	ldr	r3, [r3, #16]
 8011cba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011cc4:	4926      	ldr	r1, [pc, #152]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011cc6:	4313      	orrs	r3, r2
 8011cc8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d008      	beq.n	8011ce8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011cd6:	4b22      	ldr	r3, [pc, #136]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ce2:	491f      	ldr	r1, [pc, #124]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011ce4:	4313      	orrs	r3, r2
 8011ce6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00d      	beq.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011cf4:	4b1a      	ldr	r3, [pc, #104]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011cf6:	691b      	ldr	r3, [r3, #16]
 8011cf8:	4a19      	ldr	r2, [pc, #100]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011cfe:	6113      	str	r3, [r2, #16]
 8011d00:	4b17      	ldr	r3, [pc, #92]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d02:	691a      	ldr	r2, [r3, #16]
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011d0a:	4915      	ldr	r1, [pc, #84]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d0c:	4313      	orrs	r3, r2
 8011d0e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	da08      	bge.n	8011d2a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011d18:	4b11      	ldr	r3, [pc, #68]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d1c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d24:	490e      	ldr	r1, [pc, #56]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d26:	4313      	orrs	r3, r2
 8011d28:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d009      	beq.n	8011d4a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011d36:	4b0a      	ldr	r3, [pc, #40]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011d3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d44:	4906      	ldr	r1, [pc, #24]	; (8011d60 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8011d46:	4313      	orrs	r3, r2
 8011d48:	654b      	str	r3, [r1, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
 8011d4a:	7dbb      	ldrb	r3, [r7, #22]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d101      	bne.n	8011d54 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
  {
 8011d50:	2300      	movs	r3, #0
 8011d52:	e000      	b.n	8011d56 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
    
 8011d54:	2301      	movs	r3, #1
    if (ret == HAL_OK)
 8011d56:	4618      	mov	r0, r3
 8011d58:	3718      	adds	r7, #24
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	58024400 	.word	0x58024400

08011d64 <RCCEx_PLL2_Config>:
    }

    /* Check CRS TRIM overflow flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
    {
      /* CRS SYNC Error */
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b084      	sub	sp, #16
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	6039      	str	r1, [r7, #0]
      crsstatus |= RCC_CRS_TRIMOVF;

      /* Clear CRS Error bit */
 8011d6e:	2300      	movs	r3, #0
 8011d70:	73fb      	strb	r3, [r7, #15]
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;

      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 8011d72:	4b53      	ldr	r3, [pc, #332]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d76:	f003 0303 	and.w	r3, r3, #3
 8011d7a:	2b03      	cmp	r3, #3
 8011d7c:	d101      	bne.n	8011d82 <RCCEx_PLL2_Config+0x1e>
    }

 8011d7e:	2301      	movs	r3, #1
 8011d80:	e099      	b.n	8011eb6 <RCCEx_PLL2_Config+0x152>
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;

      /* Clear CRS SYNC Missed bit */
 8011d82:	4b4f      	ldr	r3, [pc, #316]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	4a4e      	ldr	r2, [pc, #312]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011d88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d8c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
    }

 8011d8e:	f7fa fe5f 	bl	800ca50 <HAL_GetTick>
 8011d92:	60b8      	str	r0, [r7, #8]
    /* Check CRS Expected SYNC flag  */
    if (__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
    {
 8011d94:	e008      	b.n	8011da8 <RCCEx_PLL2_Config+0x44>
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 8011d96:	f7fa fe5b 	bl	800ca50 <HAL_GetTick>
 8011d9a:	4602      	mov	r2, r0
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	1ad3      	subs	r3, r2, r3
 8011da0:	2b02      	cmp	r3, #2
 8011da2:	d901      	bls.n	8011da8 <RCCEx_PLL2_Config+0x44>
    }
  }
 8011da4:	2303      	movs	r3, #3
 8011da6:	e086      	b.n	8011eb6 <RCCEx_PLL2_Config+0x152>
    {
 8011da8:	4b45      	ldr	r3, [pc, #276]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011daa:	681b      	ldr	r3, [r3, #0]
 8011dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d1f0      	bne.n	8011d96 <RCCEx_PLL2_Config+0x32>
  while (RCC_CRS_NONE == crsstatus);

  return crsstatus;
}

 8011db4:	4b42      	ldr	r3, [pc, #264]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011db8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	031b      	lsls	r3, r3, #12
 8011dc2:	493f      	ldr	r1, [pc, #252]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	628b      	str	r3, [r1, #40]	; 0x28
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	3b01      	subs	r3, #1
 8011dce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	689b      	ldr	r3, [r3, #8]
 8011dd6:	3b01      	subs	r3, #1
 8011dd8:	025b      	lsls	r3, r3, #9
 8011dda:	b29b      	uxth	r3, r3
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	68db      	ldr	r3, [r3, #12]
 8011de2:	3b01      	subs	r3, #1
 8011de4:	041b      	lsls	r3, r3, #16
 8011de6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011dea:	431a      	orrs	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	691b      	ldr	r3, [r3, #16]
 8011df0:	3b01      	subs	r3, #1
 8011df2:	061b      	lsls	r3, r3, #24
 8011df4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011df8:	4931      	ldr	r1, [pc, #196]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011dfa:	4313      	orrs	r3, r2
 8011dfc:	638b      	str	r3, [r1, #56]	; 0x38
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
  uint32_t crserror = RCC_CRS_NONE;
 8011dfe:	4b30      	ldr	r3, [pc, #192]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	695b      	ldr	r3, [r3, #20]
 8011e0a:	492d      	ldr	r1, [pc, #180]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e0c:	4313      	orrs	r3, r2
 8011e0e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
  uint32_t itsources = READ_REG(CRS->CR);
 8011e10:	4b2b      	ldr	r3, [pc, #172]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e14:	f023 0220 	bic.w	r2, r3, #32
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	699b      	ldr	r3, [r3, #24]
 8011e1c:	4928      	ldr	r1, [pc, #160]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e1e:	4313      	orrs	r3, r2
 8011e20:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Check CRS SYNCOK flag  */
  if (((itflags & RCC_CRS_FLAG_SYNCOK) != 0U) && ((itsources & RCC_CRS_IT_SYNCOK) != 0U))
 8011e22:	4b27      	ldr	r3, [pc, #156]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e26:	4a26      	ldr	r2, [pc, #152]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e28:	f023 0310 	bic.w	r3, r3, #16
 8011e2c:	62d3      	str	r3, [r2, #44]	; 0x2c
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 8011e2e:	4b24      	ldr	r3, [pc, #144]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011e32:	4b24      	ldr	r3, [pc, #144]	; (8011ec4 <RCCEx_PLL2_Config+0x160>)
 8011e34:	4013      	ands	r3, r2
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	69d2      	ldr	r2, [r2, #28]
 8011e3a:	00d2      	lsls	r2, r2, #3
 8011e3c:	4920      	ldr	r1, [pc, #128]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e3e:	4313      	orrs	r3, r2
 8011e40:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
 8011e42:	4b1f      	ldr	r3, [pc, #124]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e46:	4a1e      	ldr	r2, [pc, #120]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e48:	f043 0310 	orr.w	r3, r3, #16
 8011e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  }
  /* Check CRS SYNCWARN flag  */
  else if (((itflags & RCC_CRS_FLAG_SYNCWARN) != 0U) && ((itsources & RCC_CRS_IT_SYNCWARN) != 0U))
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d106      	bne.n	8011e62 <RCCEx_PLL2_Config+0xfe>
  {
    /* Clear CRS SYNCWARN flag */
 8011e54:	4b1a      	ldr	r3, [pc, #104]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e58:	4a19      	ldr	r2, [pc, #100]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8011e5e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e60:	e00f      	b.n	8011e82 <RCCEx_PLL2_Config+0x11e>
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);

 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d106      	bne.n	8011e76 <RCCEx_PLL2_Config+0x112>
    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
 8011e68:	4b15      	ldr	r3, [pc, #84]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e6c:	4a14      	ldr	r2, [pc, #80]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011e74:	e005      	b.n	8011e82 <RCCEx_PLL2_Config+0x11e>
  }
  /* Check CRS Expected SYNC flag  */
  else if (((itflags & RCC_CRS_FLAG_ESYNC) != 0U) && ((itsources & RCC_CRS_IT_ESYNC) != 0U))
  {
 8011e76:	4b12      	ldr	r3, [pc, #72]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e7a:	4a11      	ldr	r2, [pc, #68]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011e80:	62d3      	str	r3, [r2, #44]	; 0x2c
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);

    /* user callback */
 8011e82:	4b0f      	ldr	r3, [pc, #60]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	4a0e      	ldr	r2, [pc, #56]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011e88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011e8c:	6013      	str	r3, [r2, #0]
    HAL_RCCEx_CRS_ExpectedSyncCallback();
  }
  /* Check CRS Error flags  */
 8011e8e:	f7fa fddf 	bl	800ca50 <HAL_GetTick>
 8011e92:	60b8      	str	r0, [r7, #8]
  else
  {
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 8011e94:	e008      	b.n	8011ea8 <RCCEx_PLL2_Config+0x144>
    {
      if ((itflags & RCC_CRS_FLAG_SYNCERR) != 0U)
 8011e96:	f7fa fddb 	bl	800ca50 <HAL_GetTick>
 8011e9a:	4602      	mov	r2, r0
 8011e9c:	68bb      	ldr	r3, [r7, #8]
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	2b02      	cmp	r3, #2
 8011ea2:	d901      	bls.n	8011ea8 <RCCEx_PLL2_Config+0x144>
      {
        crserror |= RCC_CRS_SYNCERR;
 8011ea4:	2303      	movs	r3, #3
 8011ea6:	e006      	b.n	8011eb6 <RCCEx_PLL2_Config+0x152>
    if (((itflags & RCC_CRS_FLAG_ERR) != 0U) && ((itsources & RCC_CRS_IT_ERR) != 0U))
 8011ea8:	4b05      	ldr	r3, [pc, #20]	; (8011ec0 <RCCEx_PLL2_Config+0x15c>)
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d0f0      	beq.n	8011e96 <RCCEx_PLL2_Config+0x132>
      if ((itflags & RCC_CRS_FLAG_SYNCMISS) != 0U)
      {
        crserror |= RCC_CRS_SYNCMISS;
      }
      if ((itflags & RCC_CRS_FLAG_TRIMOVF) != 0U)
      {
 8011eb4:	7bfb      	ldrb	r3, [r7, #15]
        crserror |= RCC_CRS_TRIMOVF;
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	3710      	adds	r7, #16
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	58024400 	.word	0x58024400
 8011ec4:	ffff0007 	.word	0xffff0007

08011ec8 <RCCEx_PLL3_Config>:
    }
  }
}

/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
 8011ec8:	b580      	push	{r7, lr}
 8011eca:	b084      	sub	sp, #16
 8011ecc:	af00      	add	r7, sp, #0
 8011ece:	6078      	str	r0, [r7, #4]
 8011ed0:	6039      	str	r1, [r7, #0]
  * @retval none
  */
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	73fb      	strb	r3, [r7, #15]
}

/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
 8011ed6:	4b53      	ldr	r3, [pc, #332]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eda:	f003 0303 	and.w	r3, r3, #3
 8011ede:	2b03      	cmp	r3, #3
 8011ee0:	d101      	bne.n	8011ee6 <RCCEx_PLL3_Config+0x1e>
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
 8011ee2:	2301      	movs	r3, #1
 8011ee4:	e099      	b.n	801201a <RCCEx_PLL3_Config+0x152>
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}

/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
 8011ee6:	4b4f      	ldr	r3, [pc, #316]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4a4e      	ldr	r2, [pc, #312]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011ef0:	6013      	str	r3, [r2, #0]
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
 8011ef2:	f7fa fdad 	bl	800ca50 <HAL_GetTick>
 8011ef6:	60b8      	str	r0, [r7, #8]
{
  /* NOTE : This function should not be modified, when the callback is needed,
 8011ef8:	e008      	b.n	8011f0c <RCCEx_PLL3_Config+0x44>
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
 8011efa:	f7fa fda9 	bl	800ca50 <HAL_GetTick>
 8011efe:	4602      	mov	r2, r0
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	1ad3      	subs	r3, r2, r3
 8011f04:	2b02      	cmp	r3, #2
 8011f06:	d901      	bls.n	8011f0c <RCCEx_PLL3_Config+0x44>
}

 8011f08:	2303      	movs	r3, #3
 8011f0a:	e086      	b.n	801201a <RCCEx_PLL3_Config+0x152>
  /* NOTE : This function should not be modified, when the callback is needed,
 8011f0c:	4b45      	ldr	r3, [pc, #276]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d1f0      	bne.n	8011efa <RCCEx_PLL3_Config+0x32>
/**
  * @brief  RCCEx Clock Recovery System Error interrupt callback.
  * @param  Error Combination of Error status.
  *         This parameter can be a combination of the following values:
  *           @arg @ref RCC_CRS_SYNCERR
 8011f18:	4b42      	ldr	r3, [pc, #264]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f1c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	051b      	lsls	r3, r3, #20
 8011f26:	493f      	ldr	r1, [pc, #252]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f28:	4313      	orrs	r3, r2
 8011f2a:	628b      	str	r3, [r1, #40]	; 0x28
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	3b01      	subs	r3, #1
 8011f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	689b      	ldr	r3, [r3, #8]
 8011f3a:	3b01      	subs	r3, #1
 8011f3c:	025b      	lsls	r3, r3, #9
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	431a      	orrs	r2, r3
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	68db      	ldr	r3, [r3, #12]
 8011f46:	3b01      	subs	r3, #1
 8011f48:	041b      	lsls	r3, r3, #16
 8011f4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011f4e:	431a      	orrs	r2, r3
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	691b      	ldr	r3, [r3, #16]
 8011f54:	3b01      	subs	r3, #1
 8011f56:	061b      	lsls	r3, r3, #24
 8011f58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011f5c:	4931      	ldr	r1, [pc, #196]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f5e:	4313      	orrs	r3, r2
 8011f60:	640b      	str	r3, [r1, #64]	; 0x40
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
  /* Prevent unused argument(s) compilation warning */
 8011f62:	4b30      	ldr	r3, [pc, #192]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f66:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	695b      	ldr	r3, [r3, #20]
 8011f6e:	492d      	ldr	r1, [pc, #180]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f70:	4313      	orrs	r3, r2
 8011f72:	62cb      	str	r3, [r1, #44]	; 0x2c
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
 8011f74:	4b2b      	ldr	r3, [pc, #172]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f78:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	699b      	ldr	r3, [r3, #24]
 8011f80:	4928      	ldr	r1, [pc, #160]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f82:	4313      	orrs	r3, r2
 8011f84:	62cb      	str	r3, [r1, #44]	; 0x2c
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
 8011f86:	4b27      	ldr	r3, [pc, #156]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8a:	4a26      	ldr	r2, [pc, #152]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f90:	62d3      	str	r3, [r2, #44]	; 0x2c


/**
 8011f92:	4b24      	ldr	r3, [pc, #144]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011f94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011f96:	4b24      	ldr	r3, [pc, #144]	; (8012028 <RCCEx_PLL3_Config+0x160>)
 8011f98:	4013      	ands	r3, r2
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	69d2      	ldr	r2, [r2, #28]
 8011f9e:	00d2      	lsls	r2, r2, #3
 8011fa0:	4920      	ldr	r1, [pc, #128]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fa2:	4313      	orrs	r3, r2
 8011fa4:	644b      	str	r3, [r1, #68]	; 0x44
  * @}
  */

 8011fa6:	4b1f      	ldr	r3, [pc, #124]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011faa:	4a1e      	ldr	r2, [pc, #120]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
/**
  * @}
  */
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d106      	bne.n	8011fc6 <RCCEx_PLL3_Config+0xfe>

/** @defgroup RCCEx_Private_functions RCCEx Private Functions
 8011fb8:	4b1a      	ldr	r3, [pc, #104]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fbc:	4a19      	ldr	r2, [pc, #100]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011fc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011fc4:	e00f      	b.n	8011fe6 <RCCEx_PLL3_Config+0x11e>
 * @{
 */
 8011fc6:	683b      	ldr	r3, [r7, #0]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d106      	bne.n	8011fda <RCCEx_PLL3_Config+0x112>
/**
  * @brief  Configure the PLL2 VCI,VCO ranges, multiplication and division factors and enable it
 8011fcc:	4b15      	ldr	r3, [pc, #84]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fd0:	4a14      	ldr	r2, [pc, #80]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011fd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011fd8:	e005      	b.n	8011fe6 <RCCEx_PLL3_Config+0x11e>
  * @param  pll2: Pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters  as well as VCI, VCO clock ranges.
  * @param  Divider  divider parameter to be updated
  * @note   PLL2 is temporary disabled to apply new parameters
 8011fda:	4b12      	ldr	r3, [pc, #72]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fde:	4a11      	ldr	r2, [pc, #68]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fe0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8011fe4:	62d3      	str	r3, [r2, #44]	; 0x2c
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
 8011fe6:	4b0f      	ldr	r3, [pc, #60]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	4a0e      	ldr	r2, [pc, #56]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 8011fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011ff0:	6013      	str	r3, [r2, #0]
{

  uint32_t tickstart;
 8011ff2:	f7fa fd2d 	bl	800ca50 <HAL_GetTick>
 8011ff6:	60b8      	str	r0, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8011ff8:	e008      	b.n	801200c <RCCEx_PLL3_Config+0x144>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8011ffa:	f7fa fd29 	bl	800ca50 <HAL_GetTick>
 8011ffe:	4602      	mov	r2, r0
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	1ad3      	subs	r3, r2, r3
 8012004:	2b02      	cmp	r3, #2
 8012006:	d901      	bls.n	801200c <RCCEx_PLL3_Config+0x144>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8012008:	2303      	movs	r3, #3
 801200a:	e006      	b.n	801201a <RCCEx_PLL3_Config+0x152>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 801200c:	4b05      	ldr	r3, [pc, #20]	; (8012024 <RCCEx_PLL3_Config+0x15c>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012014:	2b00      	cmp	r3, #0
 8012016:	d0f0      	beq.n	8011ffa <RCCEx_PLL3_Config+0x132>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
  {
    return HAL_ERROR;
 8012018:	7bfb      	ldrb	r3, [r7, #15]
  }
 801201a:	4618      	mov	r0, r3
 801201c:	3710      	adds	r7, #16
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}
 8012022:	bf00      	nop
 8012024:	58024400 	.word	0x58024400
 8012028:	ffff0007 	.word	0xffff0007

0801202c <HAL_SDRAM_Init>:
  * @{
  */

/**
  * @brief  Performs the SDRAM device initialization sequence.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d101      	bne.n	8012040 <HAL_SDRAM_Init+0x14>
  * @retval HAL status
  */
 801203c:	2301      	movs	r3, #1
 801203e:	e02b      	b.n	8012098 <HAL_SDRAM_Init+0x6c>
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012046:	b2db      	uxtb	r3, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	d106      	bne.n	801205a <HAL_SDRAM_Init+0x2e>
  if (hsdram == NULL)
  {
    return HAL_ERROR;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    {
      hsdram->MspInitCallback = HAL_SDRAM_MspInit;
    }
    hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
    hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
    hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 8012054:	6878      	ldr	r0, [r7, #4]
 8012056:	f7ef f969 	bl	800132c <HAL_SDRAM_MspInit>

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2202      	movs	r2, #2
 801205e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    HAL_SDRAM_MspInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681a      	ldr	r2, [r3, #0]
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	3304      	adds	r3, #4
 801206a:	4619      	mov	r1, r3
 801206c:	4610      	mov	r0, r2
 801206e:	f000 fb6b 	bl	8012748 <FMC_SDRAM_Init>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	6818      	ldr	r0, [r3, #0]
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	461a      	mov	r2, r3
 801207c:	6839      	ldr	r1, [r7, #0]
 801207e:	f000 fbbf 	bl	8012800 <FMC_SDRAM_Timing_Init>

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8012082:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <HAL_SDRAM_Init+0x74>)
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	4a06      	ldr	r2, [pc, #24]	; (80120a0 <HAL_SDRAM_Init+0x74>)
 8012088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801208c:	6013      	str	r3, [r2, #0]

  /* Initialize SDRAM timing Interface */
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	2201      	movs	r2, #1
 8012092:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);

 8012096:	2300      	movs	r3, #0
  /* Enable FMC Peripheral */
 8012098:	4618      	mov	r0, r3
 801209a:	3708      	adds	r7, #8
 801209c:	46bd      	mov	sp, r7
 801209e:	bd80      	pop	{r7, pc}
 80120a0:	52004000 	.word	0x52004000

080120a4 <HAL_SDRAM_DeInit>:

  return HAL_OK;
}

/**
  * @brief  Perform the SDRAM device initialization sequence.
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
{
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  if (hsdram->MspDeInitCallback == NULL)
  {
    hsdram->MspDeInitCallback = HAL_SDRAM_MspDeInit;
  }
 80120ac:	6878      	ldr	r0, [r7, #4]
 80120ae:	f7ef f981 	bl	80013b4 <HAL_SDRAM_MspDeInit>

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	681a      	ldr	r2, [r3, #0]
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	685b      	ldr	r3, [r3, #4]
 80120ba:	4619      	mov	r1, r3
 80120bc:	4610      	mov	r0, r2
 80120be:	f000 fc09 	bl	80128d4 <FMC_SDRAM_DeInit>
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	2200      	movs	r2, #0
 80120c6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2200      	movs	r2, #0
 80120ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Reset the SDRAM controller state */
 80120d2:	2300      	movs	r3, #0
  hsdram->State = HAL_SDRAM_STATE_RESET;
 80120d4:	4618      	mov	r0, r3
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <HAL_SDRAM_SendCommand>:

/**
  * @brief  Sends Command to the SDRAM bank.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @param  Command SDRAM command structure
 80120dc:	b580      	push	{r7, lr}
 80120de:	b086      	sub	sp, #24
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
  * @param  Timeout Timeout duration
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80120ee:	75fb      	strb	r3, [r7, #23]
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
 80120f0:	7dfb      	ldrb	r3, [r7, #23]
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d101      	bne.n	80120fa <HAL_SDRAM_SendCommand+0x1e>
                                        uint32_t Timeout)
{
 80120f6:	2302      	movs	r3, #2
 80120f8:	e021      	b.n	801213e <HAL_SDRAM_SendCommand+0x62>
  HAL_SDRAM_StateTypeDef state = hsdram->State;

 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d002      	beq.n	8012106 <HAL_SDRAM_SendCommand+0x2a>
 8012100:	7dfb      	ldrb	r3, [r7, #23]
 8012102:	2b05      	cmp	r3, #5
 8012104:	d118      	bne.n	8012138 <HAL_SDRAM_SendCommand+0x5c>
  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
  {
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	2202      	movs	r2, #2
 801210a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	687a      	ldr	r2, [r7, #4]
 8012114:	68b9      	ldr	r1, [r7, #8]
 8012116:	4618      	mov	r0, r3
 8012118:	f000 fbfe 	bl	8012918 <FMC_SDRAM_SendCommand>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	681b      	ldr	r3, [r3, #0]
 8012120:	2b02      	cmp	r3, #2
 8012122:	d104      	bne.n	801212e <HAL_SDRAM_SendCommand+0x52>

    /* Send SDRAM command */
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	2205      	movs	r2, #5
 8012128:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801212c:	e006      	b.n	801213c <HAL_SDRAM_SendCommand+0x60>
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	2201      	movs	r2, #1
 8012132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012136:	e001      	b.n	801213c <HAL_SDRAM_SendCommand+0x60>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
    }
    else
    {
 8012138:	2301      	movs	r3, #1
 801213a:	e000      	b.n	801213e <HAL_SDRAM_SendCommand+0x62>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
 801213c:	2300      	movs	r3, #0
  else
 801213e:	4618      	mov	r0, r3
 8012140:	3718      	adds	r7, #24
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}

08012146 <HAL_SDRAM_ProgramRefreshRate>:
  return HAL_OK;
}

/**
  * @brief  Programs the SDRAM Memory Refresh rate.
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 8012146:	b580      	push	{r7, lr}
 8012148:	b082      	sub	sp, #8
 801214a:	af00      	add	r7, sp, #0
 801214c:	6078      	str	r0, [r7, #4]
 801214e:	6039      	str	r1, [r7, #0]
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012156:	b2db      	uxtb	r3, r3
 8012158:	2b02      	cmp	r3, #2
 801215a:	d101      	bne.n	8012160 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  * @retval HAL status
  */
 801215c:	2302      	movs	r3, #2
 801215e:	e016      	b.n	801218e <HAL_SDRAM_ProgramRefreshRate+0x48>
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012166:	b2db      	uxtb	r3, r3
 8012168:	2b01      	cmp	r3, #1
 801216a:	d10f      	bne.n	801218c <HAL_SDRAM_ProgramRefreshRate+0x46>
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
  {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	2202      	movs	r2, #2
 8012170:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	6839      	ldr	r1, [r7, #0]
 801217a:	4618      	mov	r0, r3
 801217c:	f000 fbf0 	bl	8012960 <FMC_SDRAM_ProgramRefreshRate>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2201      	movs	r2, #1
 8012184:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
 8012188:	2300      	movs	r3, #0
 801218a:	e000      	b.n	801218e <HAL_SDRAM_ProgramRefreshRate+0x48>

 801218c:	2301      	movs	r3, #1
  else
 801218e:	4618      	mov	r0, r3
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b082      	sub	sp, #8
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d101      	bne.n	80121a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80121a4:	2301      	movs	r3, #1
 80121a6:	e049      	b.n	801223c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d106      	bne.n	80121c2 <HAL_TIM_Base_Init+0x2c>
  if (htim->State == HAL_TIM_STATE_RESET)
  {
    /* Allocate lock resource and initialize it */
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f000 f841 	bl	8012244 <HAL_TIM_Base_MspInit>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	2202      	movs	r2, #2
 80121c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681a      	ldr	r2, [r3, #0]
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	3304      	adds	r3, #4
 80121d2:	4619      	mov	r1, r3
 80121d4:	4610      	mov	r0, r2
 80121d6:	f000 f9ff 	bl	80125d8 <TIM_Base_SetConfig>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);

  /* Initialize the DMA burst operation state */
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	2201      	movs	r2, #1
 80121de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;

  /* Initialize the TIM channels state */
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2201      	movs	r2, #1
 80121e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2201      	movs	r2, #1
 80121ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	2201      	movs	r2, #1
 80121f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2201      	movs	r2, #1
 80121fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2201      	movs	r2, #1
 8012206:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2201      	movs	r2, #1
 801220e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2201      	movs	r2, #1
 8012216:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2201      	movs	r2, #1
 801221e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2201      	movs	r2, #1
 8012226:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2201      	movs	r2, #1
 801222e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);

  /* Initialize the TIM state*/
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	2201      	movs	r2, #1
 8012236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;

 801223a:	2300      	movs	r3, #0
  return HAL_OK;
 801223c:	4618      	mov	r0, r3
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <HAL_TIM_Base_MspInit>:
/**
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
 801224c:	bf00      	nop
 801224e:	370c      	adds	r7, #12
 8012250:	46bd      	mov	sp, r7
 8012252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012256:	4770      	bx	lr

08012258 <HAL_TIM_Base_Start_IT>:
/**
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
 8012258:	b480      	push	{r7}
 801225a:	b085      	sub	sp, #20
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012266:	b2db      	uxtb	r3, r3
 8012268:	2b01      	cmp	r3, #1
 801226a:	d001      	beq.n	8012270 <HAL_TIM_Base_Start_IT+0x18>
  if (htim->State != HAL_TIM_STATE_READY)
  {
 801226c:	2301      	movs	r3, #1
 801226e:	e054      	b.n	801231a <HAL_TIM_Base_Start_IT+0xc2>
    return HAL_ERROR;
  }

  /* Set the TIM state */
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2202      	movs	r2, #2
 8012274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_BUSY;

  /* Enable the TIM Update interrupt */
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	68da      	ldr	r2, [r3, #12]
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	f042 0201 	orr.w	r2, r2, #1
 8012286:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	4a26      	ldr	r2, [pc, #152]	; (8012328 <HAL_TIM_Base_Start_IT+0xd0>)
 801228e:	4293      	cmp	r3, r2
 8012290:	d022      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801229a:	d01d      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	4a22      	ldr	r2, [pc, #136]	; (801232c <HAL_TIM_Base_Start_IT+0xd4>)
 80122a2:	4293      	cmp	r3, r2
 80122a4:	d018      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	4a21      	ldr	r2, [pc, #132]	; (8012330 <HAL_TIM_Base_Start_IT+0xd8>)
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d013      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4a1f      	ldr	r2, [pc, #124]	; (8012334 <HAL_TIM_Base_Start_IT+0xdc>)
 80122b6:	4293      	cmp	r3, r2
 80122b8:	d00e      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	4a1e      	ldr	r2, [pc, #120]	; (8012338 <HAL_TIM_Base_Start_IT+0xe0>)
 80122c0:	4293      	cmp	r3, r2
 80122c2:	d009      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	4a1c      	ldr	r2, [pc, #112]	; (801233c <HAL_TIM_Base_Start_IT+0xe4>)
 80122ca:	4293      	cmp	r3, r2
 80122cc:	d004      	beq.n	80122d8 <HAL_TIM_Base_Start_IT+0x80>
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	681b      	ldr	r3, [r3, #0]
 80122d2:	4a1b      	ldr	r2, [pc, #108]	; (8012340 <HAL_TIM_Base_Start_IT+0xe8>)
 80122d4:	4293      	cmp	r3, r2
 80122d6:	d115      	bne.n	8012304 <HAL_TIM_Base_Start_IT+0xac>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
  {
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	689a      	ldr	r2, [r3, #8]
 80122de:	4b19      	ldr	r3, [pc, #100]	; (8012344 <HAL_TIM_Base_Start_IT+0xec>)
 80122e0:	4013      	ands	r3, r2
 80122e2:	60fb      	str	r3, [r7, #12]
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	2b06      	cmp	r3, #6
 80122e8:	d015      	beq.n	8012316 <HAL_TIM_Base_Start_IT+0xbe>
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80122f0:	d011      	beq.n	8012316 <HAL_TIM_Base_Start_IT+0xbe>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
    {
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	681a      	ldr	r2, [r3, #0]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f042 0201 	orr.w	r2, r2, #1
 8012300:	601a      	str	r2, [r3, #0]
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012302:	e008      	b.n	8012316 <HAL_TIM_Base_Start_IT+0xbe>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	681a      	ldr	r2, [r3, #0]
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	f042 0201 	orr.w	r2, r2, #1
 8012312:	601a      	str	r2, [r3, #0]
 8012314:	e000      	b.n	8012318 <HAL_TIM_Base_Start_IT+0xc0>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012316:	bf00      	nop
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
 8012318:	2300      	movs	r3, #0
  return HAL_OK;
 801231a:	4618      	mov	r0, r3
 801231c:	3714      	adds	r7, #20
 801231e:	46bd      	mov	sp, r7
 8012320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012324:	4770      	bx	lr
 8012326:	bf00      	nop
 8012328:	40010000 	.word	0x40010000
 801232c:	40000400 	.word	0x40000400
 8012330:	40000800 	.word	0x40000800
 8012334:	40000c00 	.word	0x40000c00
 8012338:	40010400 	.word	0x40010400
 801233c:	40001800 	.word	0x40001800
 8012340:	40014000 	.word	0x40014000
 8012344:	00010007 	.word	0x00010007

08012348 <HAL_TIM_IRQHandler>:
  ==============================================================================
  [..]
    This section provides Timer IRQ handler function.

@endverbatim
  * @{
 8012348:	b580      	push	{r7, lr}
 801234a:	b082      	sub	sp, #8
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  */
/**
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	691b      	ldr	r3, [r3, #16]
 8012356:	f003 0302 	and.w	r3, r3, #2
 801235a:	2b02      	cmp	r3, #2
 801235c:	d122      	bne.n	80123a4 <HAL_TIM_IRQHandler+0x5c>
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	f003 0302 	and.w	r3, r3, #2
 8012368:	2b02      	cmp	r3, #2
 801236a:	d11b      	bne.n	80123a4 <HAL_TIM_IRQHandler+0x5c>
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f06f 0202 	mvn.w	r2, #2
 8012374:	611a      	str	r2, [r3, #16]
{
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2201      	movs	r2, #1
 801237a:	771a      	strb	r2, [r3, #28]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
  {
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	699b      	ldr	r3, [r3, #24]
 8012382:	f003 0303 	and.w	r3, r3, #3
 8012386:	2b00      	cmp	r3, #0
 8012388:	d003      	beq.n	8012392 <HAL_TIM_IRQHandler+0x4a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801238a:	6878      	ldr	r0, [r7, #4]
 801238c:	f000 f905 	bl	801259a <HAL_TIM_IC_CaptureCallback>
 8012390:	e005      	b.n	801239e <HAL_TIM_IRQHandler+0x56>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 f8f7 	bl	8012586 <HAL_TIM_OC_DelayElapsedCallback>
        /* Output compare event */
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 f908 	bl	80125ae <HAL_TIM_PWM_PulseFinishedCallback>
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	2200      	movs	r2, #0
 80123a2:	771a      	strb	r2, [r3, #28]
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	691b      	ldr	r3, [r3, #16]
 80123aa:	f003 0304 	and.w	r3, r3, #4
 80123ae:	2b04      	cmp	r3, #4
 80123b0:	d122      	bne.n	80123f8 <HAL_TIM_IRQHandler+0xb0>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	68db      	ldr	r3, [r3, #12]
 80123b8:	f003 0304 	and.w	r3, r3, #4
 80123bc:	2b04      	cmp	r3, #4
 80123be:	d11b      	bne.n	80123f8 <HAL_TIM_IRQHandler+0xb0>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	f06f 0204 	mvn.w	r2, #4
 80123c8:	611a      	str	r2, [r3, #16]
    }
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2202      	movs	r2, #2
 80123ce:	771a      	strb	r2, [r3, #28]
  }
  /* Capture compare 2 event */
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	699b      	ldr	r3, [r3, #24]
 80123d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d003      	beq.n	80123e6 <HAL_TIM_IRQHandler+0x9e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 f8db 	bl	801259a <HAL_TIM_IC_CaptureCallback>
 80123e4:	e005      	b.n	80123f2 <HAL_TIM_IRQHandler+0xaa>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 80123e6:	6878      	ldr	r0, [r7, #4]
 80123e8:	f000 f8cd 	bl	8012586 <HAL_TIM_OC_DelayElapsedCallback>
      /* Output compare event */
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 f8de 	bl	80125ae <HAL_TIM_PWM_PulseFinishedCallback>
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2200      	movs	r2, #0
 80123f6:	771a      	strb	r2, [r3, #28]
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	691b      	ldr	r3, [r3, #16]
 80123fe:	f003 0308 	and.w	r3, r3, #8
 8012402:	2b08      	cmp	r3, #8
 8012404:	d122      	bne.n	801244c <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	f003 0308 	and.w	r3, r3, #8
 8012410:	2b08      	cmp	r3, #8
 8012412:	d11b      	bne.n	801244c <HAL_TIM_IRQHandler+0x104>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f06f 0208 	mvn.w	r2, #8
 801241c:	611a      	str	r2, [r3, #16]
    }
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	2204      	movs	r2, #4
 8012422:	771a      	strb	r2, [r3, #28]
  }
  /* Capture compare 3 event */
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	69db      	ldr	r3, [r3, #28]
 801242a:	f003 0303 	and.w	r3, r3, #3
 801242e:	2b00      	cmp	r3, #0
 8012430:	d003      	beq.n	801243a <HAL_TIM_IRQHandler+0xf2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f000 f8b1 	bl	801259a <HAL_TIM_IC_CaptureCallback>
 8012438:	e005      	b.n	8012446 <HAL_TIM_IRQHandler+0xfe>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f000 f8a3 	bl	8012586 <HAL_TIM_OC_DelayElapsedCallback>
      /* Output compare event */
 8012440:	6878      	ldr	r0, [r7, #4]
 8012442:	f000 f8b4 	bl	80125ae <HAL_TIM_PWM_PulseFinishedCallback>
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	2200      	movs	r2, #0
 801244a:	771a      	strb	r2, [r3, #28]
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	691b      	ldr	r3, [r3, #16]
 8012452:	f003 0310 	and.w	r3, r3, #16
 8012456:	2b10      	cmp	r3, #16
 8012458:	d122      	bne.n	80124a0 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	68db      	ldr	r3, [r3, #12]
 8012460:	f003 0310 	and.w	r3, r3, #16
 8012464:	2b10      	cmp	r3, #16
 8012466:	d11b      	bne.n	80124a0 <HAL_TIM_IRQHandler+0x158>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	f06f 0210 	mvn.w	r2, #16
 8012470:	611a      	str	r2, [r3, #16]
    }
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	2208      	movs	r2, #8
 8012476:	771a      	strb	r2, [r3, #28]
  }
  /* Capture compare 4 event */
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	69db      	ldr	r3, [r3, #28]
 801247e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012482:	2b00      	cmp	r3, #0
 8012484:	d003      	beq.n	801248e <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f000 f887 	bl	801259a <HAL_TIM_IC_CaptureCallback>
 801248c:	e005      	b.n	801249a <HAL_TIM_IRQHandler+0x152>
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 f879 	bl	8012586 <HAL_TIM_OC_DelayElapsedCallback>
      /* Output compare event */
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f000 f88a 	bl	80125ae <HAL_TIM_PWM_PulseFinishedCallback>
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	2200      	movs	r2, #0
 801249e:	771a      	strb	r2, [r3, #28]
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	691b      	ldr	r3, [r3, #16]
 80124a6:	f003 0301 	and.w	r3, r3, #1
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d10e      	bne.n	80124cc <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	681b      	ldr	r3, [r3, #0]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	f003 0301 	and.w	r3, r3, #1
 80124b8:	2b01      	cmp	r3, #1
 80124ba:	d107      	bne.n	80124cc <HAL_TIM_IRQHandler+0x184>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	f06f 0201 	mvn.w	r2, #1
 80124c4:	611a      	str	r2, [r3, #16]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f7ee fb48 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	691b      	ldr	r3, [r3, #16]
 80124d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124d6:	2b80      	cmp	r3, #128	; 0x80
 80124d8:	d10e      	bne.n	80124f8 <HAL_TIM_IRQHandler+0x1b0>
      htim->PeriodElapsedCallback(htim);
#else
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	68db      	ldr	r3, [r3, #12]
 80124e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80124e4:	2b80      	cmp	r3, #128	; 0x80
 80124e6:	d107      	bne.n	80124f8 <HAL_TIM_IRQHandler+0x1b0>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	681b      	ldr	r3, [r3, #0]
 80124ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80124f0:	611a      	str	r2, [r3, #16]
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80124f2:	6878      	ldr	r0, [r7, #4]
 80124f4:	f000 f914 	bl	8012720 <HAL_TIMEx_BreakCallback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	691b      	ldr	r3, [r3, #16]
 80124fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012506:	d10e      	bne.n	8012526 <HAL_TIM_IRQHandler+0x1de>
      htim->BreakCallback(htim);
#else
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	68db      	ldr	r3, [r3, #12]
 801250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012512:	2b80      	cmp	r3, #128	; 0x80
 8012514:	d107      	bne.n	8012526 <HAL_TIM_IRQHandler+0x1de>
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801251e:	611a      	str	r2, [r3, #16]
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8012520:	6878      	ldr	r0, [r7, #4]
 8012522:	f000 f907 	bl	8012734 <HAL_TIMEx_Break2Callback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	691b      	ldr	r3, [r3, #16]
 801252c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012530:	2b40      	cmp	r3, #64	; 0x40
 8012532:	d10e      	bne.n	8012552 <HAL_TIM_IRQHandler+0x20a>
      htim->Break2Callback(htim);
#else
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801253e:	2b40      	cmp	r3, #64	; 0x40
 8012540:	d107      	bne.n	8012552 <HAL_TIM_IRQHandler+0x20a>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801254a:	611a      	str	r2, [r3, #16]
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 f838 	bl	80125c2 <HAL_TIM_TriggerCallback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	691b      	ldr	r3, [r3, #16]
 8012558:	f003 0320 	and.w	r3, r3, #32
 801255c:	2b20      	cmp	r3, #32
 801255e:	d10e      	bne.n	801257e <HAL_TIM_IRQHandler+0x236>
      htim->TriggerCallback(htim);
#else
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	68db      	ldr	r3, [r3, #12]
 8012566:	f003 0320 	and.w	r3, r3, #32
 801256a:	2b20      	cmp	r3, #32
 801256c:	d107      	bne.n	801257e <HAL_TIM_IRQHandler+0x236>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	f06f 0220 	mvn.w	r2, #32
 8012576:	611a      	str	r2, [r3, #16]
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012578:	6878      	ldr	r0, [r7, #4]
 801257a:	f000 f8c7 	bl	801270c <HAL_TIMEx_CommutCallback>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801257e:	bf00      	nop
 8012580:	3708      	adds	r7, #8
 8012582:	46bd      	mov	sp, r7
 8012584:	bd80      	pop	{r7, pc}

08012586 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8012586:	b480      	push	{r7}
 8012588:	b083      	sub	sp, #12
 801258a:	af00      	add	r7, sp, #0
 801258c:	6078      	str	r0, [r7, #4]
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 801258e:	bf00      	nop
 8012590:	370c      	adds	r7, #12
 8012592:	46bd      	mov	sp, r7
 8012594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012598:	4770      	bx	lr

0801259a <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801259a:	b480      	push	{r7}
 801259c:	b083      	sub	sp, #12
 801259e:	af00      	add	r7, sp, #0
 80125a0:	6078      	str	r0, [r7, #4]
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 80125a2:	bf00      	nop
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr

080125ae <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80125ae:	b480      	push	{r7}
 80125b0:	b083      	sub	sp, #12
 80125b2:	af00      	add	r7, sp, #0
 80125b4:	6078      	str	r0, [r7, #4]
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 80125b6:	bf00      	nop
 80125b8:	370c      	adds	r7, #12
 80125ba:	46bd      	mov	sp, r7
 80125bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c0:	4770      	bx	lr

080125c2 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80125c2:	b480      	push	{r7}
 80125c4:	b083      	sub	sp, #12
 80125c6:	af00      	add	r7, sp, #0
 80125c8:	6078      	str	r0, [r7, #4]
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 80125ca:	bf00      	nop
 80125cc:	370c      	adds	r7, #12
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr
	...

080125d8 <TIM_Base_SetConfig>:
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

 80125d8:	b480      	push	{r7}
 80125da:	b085      	sub	sp, #20
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	60fb      	str	r3, [r7, #12]
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	4a40      	ldr	r2, [pc, #256]	; (80126ec <TIM_Base_SetConfig+0x114>)
 80125ec:	4293      	cmp	r3, r2
 80125ee:	d013      	beq.n	8012618 <TIM_Base_SetConfig+0x40>
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125f6:	d00f      	beq.n	8012618 <TIM_Base_SetConfig+0x40>
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	4a3d      	ldr	r2, [pc, #244]	; (80126f0 <TIM_Base_SetConfig+0x118>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d00b      	beq.n	8012618 <TIM_Base_SetConfig+0x40>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	4a3c      	ldr	r2, [pc, #240]	; (80126f4 <TIM_Base_SetConfig+0x11c>)
 8012604:	4293      	cmp	r3, r2
 8012606:	d007      	beq.n	8012618 <TIM_Base_SetConfig+0x40>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	4a3b      	ldr	r2, [pc, #236]	; (80126f8 <TIM_Base_SetConfig+0x120>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d003      	beq.n	8012618 <TIM_Base_SetConfig+0x40>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	4a3a      	ldr	r2, [pc, #232]	; (80126fc <TIM_Base_SetConfig+0x124>)
 8012614:	4293      	cmp	r3, r2
 8012616:	d108      	bne.n	801262a <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
  }

 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801261e:	60fb      	str	r3, [r7, #12]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012620:	683b      	ldr	r3, [r7, #0]
 8012622:	685b      	ldr	r3, [r3, #4]
 8012624:	68fa      	ldr	r2, [r7, #12]
 8012626:	4313      	orrs	r3, r2
 8012628:	60fb      	str	r3, [r7, #12]
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	4a2f      	ldr	r2, [pc, #188]	; (80126ec <TIM_Base_SetConfig+0x114>)
 801262e:	4293      	cmp	r3, r2
 8012630:	d01f      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012638:	d01b      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	4a2c      	ldr	r2, [pc, #176]	; (80126f0 <TIM_Base_SetConfig+0x118>)
 801263e:	4293      	cmp	r3, r2
 8012640:	d017      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	4a2b      	ldr	r2, [pc, #172]	; (80126f4 <TIM_Base_SetConfig+0x11c>)
 8012646:	4293      	cmp	r3, r2
 8012648:	d013      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	4a2a      	ldr	r2, [pc, #168]	; (80126f8 <TIM_Base_SetConfig+0x120>)
 801264e:	4293      	cmp	r3, r2
 8012650:	d00f      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	4a29      	ldr	r2, [pc, #164]	; (80126fc <TIM_Base_SetConfig+0x124>)
 8012656:	4293      	cmp	r3, r2
 8012658:	d00b      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	4a28      	ldr	r2, [pc, #160]	; (8012700 <TIM_Base_SetConfig+0x128>)
 801265e:	4293      	cmp	r3, r2
 8012660:	d007      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	4a27      	ldr	r2, [pc, #156]	; (8012704 <TIM_Base_SetConfig+0x12c>)
 8012666:	4293      	cmp	r3, r2
 8012668:	d003      	beq.n	8012672 <TIM_Base_SetConfig+0x9a>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	4a26      	ldr	r2, [pc, #152]	; (8012708 <TIM_Base_SetConfig+0x130>)
 801266e:	4293      	cmp	r3, r2
 8012670:	d108      	bne.n	8012684 <TIM_Base_SetConfig+0xac>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012678:	60fb      	str	r3, [r7, #12]
  /* Set the auto-reload preload */
 801267a:	683b      	ldr	r3, [r7, #0]
 801267c:	68db      	ldr	r3, [r3, #12]
 801267e:	68fa      	ldr	r2, [r7, #12]
 8012680:	4313      	orrs	r3, r2
 8012682:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);

  TIMx->CR1 = tmpcr1;

 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801268a:	683b      	ldr	r3, [r7, #0]
 801268c:	695b      	ldr	r3, [r3, #20]
 801268e:	4313      	orrs	r3, r2
 8012690:	60fb      	str	r3, [r7, #12]
  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	68fa      	ldr	r2, [r7, #12]
 8012696:	601a      	str	r2, [r3, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	689a      	ldr	r2, [r3, #8]
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
  {
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	681a      	ldr	r2, [r3, #0]
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	629a      	str	r2, [r3, #40]	; 0x28
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	4a10      	ldr	r2, [pc, #64]	; (80126ec <TIM_Base_SetConfig+0x114>)
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d00f      	beq.n	80126d0 <TIM_Base_SetConfig+0xf8>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	4a12      	ldr	r2, [pc, #72]	; (80126fc <TIM_Base_SetConfig+0x124>)
 80126b4:	4293      	cmp	r3, r2
 80126b6:	d00b      	beq.n	80126d0 <TIM_Base_SetConfig+0xf8>
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	4a11      	ldr	r2, [pc, #68]	; (8012700 <TIM_Base_SetConfig+0x128>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d007      	beq.n	80126d0 <TIM_Base_SetConfig+0xf8>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	4a10      	ldr	r2, [pc, #64]	; (8012704 <TIM_Base_SetConfig+0x12c>)
 80126c4:	4293      	cmp	r3, r2
 80126c6:	d003      	beq.n	80126d0 <TIM_Base_SetConfig+0xf8>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4a0f      	ldr	r2, [pc, #60]	; (8012708 <TIM_Base_SetConfig+0x130>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d103      	bne.n	80126d8 <TIM_Base_SetConfig+0x100>
  }

  /* Generate an update event to reload the Prescaler
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	691a      	ldr	r2, [r3, #16]
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	631a      	str	r2, [r3, #48]	; 0x30
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
}

/**
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2201      	movs	r2, #1
 80126dc:	615a      	str	r2, [r3, #20]
  * @brief  Timer Output Compare 1 configuration
 80126de:	bf00      	nop
 80126e0:	3714      	adds	r7, #20
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	40010000 	.word	0x40010000
 80126f0:	40000400 	.word	0x40000400
 80126f4:	40000800 	.word	0x40000800
 80126f8:	40000c00 	.word	0x40000c00
 80126fc:	40010400 	.word	0x40010400
 8012700:	40014000 	.word	0x40014000
 8012704:	40014400 	.word	0x40014400
 8012708:	40014800 	.word	0x40014800

0801270c <HAL_TIMEx_CommutCallback>:
  */

/**
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
 801270c:	b480      	push	{r7}
 801270e:	b083      	sub	sp, #12
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8012714:	bf00      	nop
 8012716:	370c      	adds	r7, #12
 8012718:	46bd      	mov	sp, r7
 801271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271e:	4770      	bx	lr

08012720 <HAL_TIMEx_BreakCallback>:
}

/**
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
 8012728:	bf00      	nop
 801272a:	370c      	adds	r7, #12
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <HAL_TIMEx_Break2Callback>:
}

/**
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
 8012734:	b480      	push	{r7}
 8012736:	b083      	sub	sp, #12
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
 801273c:	bf00      	nop
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012746:	4770      	bx	lr

08012748 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8012748:	b480      	push	{r7}
 801274a:	b083      	sub	sp, #12
 801274c:	af00      	add	r7, sp, #0
 801274e:	6078      	str	r0, [r7, #4]
 8012750:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	681b      	ldr	r3, [r3, #0]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d121      	bne.n	801279e <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	681a      	ldr	r2, [r3, #0]
 801275e:	4b27      	ldr	r3, [pc, #156]	; (80127fc <FMC_SDRAM_Init+0xb4>)
 8012760:	4013      	ands	r3, r2
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	6851      	ldr	r1, [r2, #4]
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	6892      	ldr	r2, [r2, #8]
 801276a:	4311      	orrs	r1, r2
 801276c:	683a      	ldr	r2, [r7, #0]
 801276e:	68d2      	ldr	r2, [r2, #12]
 8012770:	4311      	orrs	r1, r2
 8012772:	683a      	ldr	r2, [r7, #0]
 8012774:	6912      	ldr	r2, [r2, #16]
 8012776:	4311      	orrs	r1, r2
 8012778:	683a      	ldr	r2, [r7, #0]
 801277a:	6952      	ldr	r2, [r2, #20]
 801277c:	4311      	orrs	r1, r2
 801277e:	683a      	ldr	r2, [r7, #0]
 8012780:	6992      	ldr	r2, [r2, #24]
 8012782:	4311      	orrs	r1, r2
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	69d2      	ldr	r2, [r2, #28]
 8012788:	4311      	orrs	r1, r2
 801278a:	683a      	ldr	r2, [r7, #0]
 801278c:	6a12      	ldr	r2, [r2, #32]
 801278e:	4311      	orrs	r1, r2
 8012790:	683a      	ldr	r2, [r7, #0]
 8012792:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012794:	430a      	orrs	r2, r1
 8012796:	431a      	orrs	r2, r3
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	601a      	str	r2, [r3, #0]
 801279c:	e026      	b.n	80127ec <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	69d9      	ldr	r1, [r3, #28]
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	6a1b      	ldr	r3, [r3, #32]
 80127ae:	4319      	orrs	r1, r3
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b4:	430b      	orrs	r3, r1
 80127b6:	431a      	orrs	r2, r3
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685a      	ldr	r2, [r3, #4]
 80127c0:	4b0e      	ldr	r3, [pc, #56]	; (80127fc <FMC_SDRAM_Init+0xb4>)
 80127c2:	4013      	ands	r3, r2
 80127c4:	683a      	ldr	r2, [r7, #0]
 80127c6:	6851      	ldr	r1, [r2, #4]
 80127c8:	683a      	ldr	r2, [r7, #0]
 80127ca:	6892      	ldr	r2, [r2, #8]
 80127cc:	4311      	orrs	r1, r2
 80127ce:	683a      	ldr	r2, [r7, #0]
 80127d0:	68d2      	ldr	r2, [r2, #12]
 80127d2:	4311      	orrs	r1, r2
 80127d4:	683a      	ldr	r2, [r7, #0]
 80127d6:	6912      	ldr	r2, [r2, #16]
 80127d8:	4311      	orrs	r1, r2
 80127da:	683a      	ldr	r2, [r7, #0]
 80127dc:	6952      	ldr	r2, [r2, #20]
 80127de:	4311      	orrs	r1, r2
 80127e0:	683a      	ldr	r2, [r7, #0]
 80127e2:	6992      	ldr	r2, [r2, #24]
 80127e4:	430a      	orrs	r2, r1
 80127e6:	431a      	orrs	r2, r3
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80127ec:	2300      	movs	r3, #0
}
 80127ee:	4618      	mov	r0, r3
 80127f0:	370c      	adds	r7, #12
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	ffff8000 	.word	0xffff8000

08012800 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8012800:	b480      	push	{r7}
 8012802:	b085      	sub	sp, #20
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d128      	bne.n	8012864 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	689b      	ldr	r3, [r3, #8]
 8012816:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	1e59      	subs	r1, r3, #1
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	3b01      	subs	r3, #1
 8012826:	011b      	lsls	r3, r3, #4
 8012828:	4319      	orrs	r1, r3
 801282a:	68bb      	ldr	r3, [r7, #8]
 801282c:	689b      	ldr	r3, [r3, #8]
 801282e:	3b01      	subs	r3, #1
 8012830:	021b      	lsls	r3, r3, #8
 8012832:	4319      	orrs	r1, r3
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	68db      	ldr	r3, [r3, #12]
 8012838:	3b01      	subs	r3, #1
 801283a:	031b      	lsls	r3, r3, #12
 801283c:	4319      	orrs	r1, r3
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	691b      	ldr	r3, [r3, #16]
 8012842:	3b01      	subs	r3, #1
 8012844:	041b      	lsls	r3, r3, #16
 8012846:	4319      	orrs	r1, r3
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	695b      	ldr	r3, [r3, #20]
 801284c:	3b01      	subs	r3, #1
 801284e:	051b      	lsls	r3, r3, #20
 8012850:	4319      	orrs	r1, r3
 8012852:	68bb      	ldr	r3, [r7, #8]
 8012854:	699b      	ldr	r3, [r3, #24]
 8012856:	3b01      	subs	r3, #1
 8012858:	061b      	lsls	r3, r3, #24
 801285a:	430b      	orrs	r3, r1
 801285c:	431a      	orrs	r2, r3
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	609a      	str	r2, [r3, #8]
 8012862:	e02d      	b.n	80128c0 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	689a      	ldr	r2, [r3, #8]
 8012868:	4b19      	ldr	r3, [pc, #100]	; (80128d0 <FMC_SDRAM_Timing_Init+0xd0>)
 801286a:	4013      	ands	r3, r2
 801286c:	68ba      	ldr	r2, [r7, #8]
 801286e:	68d2      	ldr	r2, [r2, #12]
 8012870:	3a01      	subs	r2, #1
 8012872:	0311      	lsls	r1, r2, #12
 8012874:	68ba      	ldr	r2, [r7, #8]
 8012876:	6952      	ldr	r2, [r2, #20]
 8012878:	3a01      	subs	r2, #1
 801287a:	0512      	lsls	r2, r2, #20
 801287c:	430a      	orrs	r2, r1
 801287e:	431a      	orrs	r2, r3
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801288c:	68bb      	ldr	r3, [r7, #8]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	1e59      	subs	r1, r3, #1
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	685b      	ldr	r3, [r3, #4]
 8012896:	3b01      	subs	r3, #1
 8012898:	011b      	lsls	r3, r3, #4
 801289a:	4319      	orrs	r1, r3
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	689b      	ldr	r3, [r3, #8]
 80128a0:	3b01      	subs	r3, #1
 80128a2:	021b      	lsls	r3, r3, #8
 80128a4:	4319      	orrs	r1, r3
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	691b      	ldr	r3, [r3, #16]
 80128aa:	3b01      	subs	r3, #1
 80128ac:	041b      	lsls	r3, r3, #16
 80128ae:	4319      	orrs	r1, r3
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	699b      	ldr	r3, [r3, #24]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	061b      	lsls	r3, r3, #24
 80128b8:	430b      	orrs	r3, r1
 80128ba:	431a      	orrs	r2, r3
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 80128c0:	2300      	movs	r3, #0
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	3714      	adds	r7, #20
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr
 80128ce:	bf00      	nop
 80128d0:	ff0f0fff 	.word	0xff0f0fff

080128d4 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 80128d4:	b480      	push	{r7}
 80128d6:	b083      	sub	sp, #12
 80128d8:	af00      	add	r7, sp, #0
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	683a      	ldr	r2, [r7, #0]
 80128e2:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 80128e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	683a      	ldr	r2, [r7, #0]
 80128ee:	3202      	adds	r2, #2
 80128f0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80128f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2200      	movs	r2, #0
 80128fc:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	2200      	movs	r2, #0
 8012908:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 801290a:	2300      	movs	r3, #0
}
 801290c:	4618      	mov	r0, r3
 801290e:	370c      	adds	r7, #12
 8012910:	46bd      	mov	sp, r7
 8012912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012916:	4770      	bx	lr

08012918 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8012918:	b480      	push	{r7}
 801291a:	b085      	sub	sp, #20
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	691a      	ldr	r2, [r3, #16]
 8012928:	4b0c      	ldr	r3, [pc, #48]	; (801295c <FMC_SDRAM_SendCommand+0x44>)
 801292a:	4013      	ands	r3, r2
 801292c:	68ba      	ldr	r2, [r7, #8]
 801292e:	6811      	ldr	r1, [r2, #0]
 8012930:	68ba      	ldr	r2, [r7, #8]
 8012932:	6852      	ldr	r2, [r2, #4]
 8012934:	4311      	orrs	r1, r2
 8012936:	68ba      	ldr	r2, [r7, #8]
 8012938:	6892      	ldr	r2, [r2, #8]
 801293a:	3a01      	subs	r2, #1
 801293c:	0152      	lsls	r2, r2, #5
 801293e:	4311      	orrs	r1, r2
 8012940:	68ba      	ldr	r2, [r7, #8]
 8012942:	68d2      	ldr	r2, [r2, #12]
 8012944:	0252      	lsls	r2, r2, #9
 8012946:	430a      	orrs	r2, r1
 8012948:	431a      	orrs	r2, r3
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801294e:	2300      	movs	r3, #0
}
 8012950:	4618      	mov	r0, r3
 8012952:	3714      	adds	r7, #20
 8012954:	46bd      	mov	sp, r7
 8012956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295a:	4770      	bx	lr
 801295c:	ffc00000 	.word	0xffc00000

08012960 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
 8012968:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	695a      	ldr	r2, [r3, #20]
 801296e:	4b07      	ldr	r3, [pc, #28]	; (801298c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8012970:	4013      	ands	r3, r2
 8012972:	683a      	ldr	r2, [r7, #0]
 8012974:	0052      	lsls	r2, r2, #1
 8012976:	431a      	orrs	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 801297c:	2300      	movs	r3, #0
}
 801297e:	4618      	mov	r0, r3
 8012980:	370c      	adds	r7, #12
 8012982:	46bd      	mov	sp, r7
 8012984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012988:	4770      	bx	lr
 801298a:	bf00      	nop
 801298c:	ffffc001 	.word	0xffffc001

08012990 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8012990:	8880      	ldrh	r0, [r0, #4]
 8012992:	4770      	bx	lr

08012994 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8012994:	b570      	push	{r4, r5, r6, lr}
 8012996:	6803      	ldr	r3, [r0, #0]
 8012998:	460c      	mov	r4, r1
 801299a:	2100      	movs	r1, #0
 801299c:	4605      	mov	r5, r0
 801299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129a0:	4798      	blx	r3
 80129a2:	4606      	mov	r6, r0
 80129a4:	682b      	ldr	r3, [r5, #0]
 80129a6:	4628      	mov	r0, r5
 80129a8:	1ba4      	subs	r4, r4, r6
 80129aa:	6a1b      	ldr	r3, [r3, #32]
 80129ac:	b2a4      	uxth	r4, r4
 80129ae:	4798      	blx	r3
 80129b0:	fbb4 f0f0 	udiv	r0, r4, r0
 80129b4:	bd70      	pop	{r4, r5, r6, pc}

080129b6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80129b6:	2300      	movs	r3, #0
 80129b8:	8083      	strh	r3, [r0, #4]
 80129ba:	4770      	bx	lr

080129bc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80129bc:	b510      	push	{r4, lr}
 80129be:	6803      	ldr	r3, [r0, #0]
 80129c0:	4604      	mov	r4, r0
 80129c2:	8881      	ldrh	r1, [r0, #4]
 80129c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129c6:	4798      	blx	r3
 80129c8:	88a3      	ldrh	r3, [r4, #4]
 80129ca:	3301      	adds	r3, #1
 80129cc:	80a3      	strh	r3, [r4, #4]
 80129ce:	bd10      	pop	{r4, pc}

080129d0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80129d0:	6803      	ldr	r3, [r0, #0]
 80129d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129d4:	4718      	bx	r3

080129d6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80129d6:	4770      	bx	lr

080129d8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80129d8:	4a02      	ldr	r2, [pc, #8]	; (80129e4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80129da:	6002      	str	r2, [r0, #0]
 80129dc:	2200      	movs	r2, #0
 80129de:	8082      	strh	r2, [r0, #4]
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	08025c30 	.word	0x08025c30

080129e8 <_ZN8touchgfx9Container13getFirstChildEv>:
 80129e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80129ea:	4770      	bx	lr

080129ec <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80129ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80129ee:	2000      	movs	r0, #0
 80129f0:	b12b      	cbz	r3, 80129fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80129f2:	b920      	cbnz	r0, 80129fe <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80129f4:	1a5a      	subs	r2, r3, r1
 80129f6:	699b      	ldr	r3, [r3, #24]
 80129f8:	4250      	negs	r0, r2
 80129fa:	4150      	adcs	r0, r2
 80129fc:	e7f8      	b.n	80129f0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80129fe:	4770      	bx	lr

08012a00 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8012a00:	2300      	movs	r3, #0
 8012a02:	6148      	str	r0, [r1, #20]
 8012a04:	618b      	str	r3, [r1, #24]
 8012a06:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012a08:	b913      	cbnz	r3, 8012a10 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 8012a0a:	6281      	str	r1, [r0, #40]	; 0x28
 8012a0c:	4770      	bx	lr
 8012a0e:	4613      	mov	r3, r2
 8012a10:	699a      	ldr	r2, [r3, #24]
 8012a12:	2a00      	cmp	r2, #0
 8012a14:	d1fb      	bne.n	8012a0e <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 8012a16:	6199      	str	r1, [r3, #24]
 8012a18:	4770      	bx	lr

08012a1a <_ZN8touchgfx9Container9removeAllEv>:
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012a1e:	b123      	cbz	r3, 8012a2a <_ZN8touchgfx9Container9removeAllEv+0x10>
 8012a20:	6999      	ldr	r1, [r3, #24]
 8012a22:	6281      	str	r1, [r0, #40]	; 0x28
 8012a24:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8012a28:	e7f8      	b.n	8012a1c <_ZN8touchgfx9Container9removeAllEv+0x2>
 8012a2a:	4770      	bx	lr

08012a2c <_ZN8touchgfx9Container6unlinkEv>:
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	6283      	str	r3, [r0, #40]	; 0x28
 8012a30:	4770      	bx	lr

08012a32 <_ZNK8touchgfx9Container12getSolidRectEv>:
 8012a32:	2200      	movs	r2, #0
 8012a34:	8002      	strh	r2, [r0, #0]
 8012a36:	8042      	strh	r2, [r0, #2]
 8012a38:	8082      	strh	r2, [r0, #4]
 8012a3a:	80c2      	strh	r2, [r0, #6]
 8012a3c:	4770      	bx	lr

08012a3e <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8012a3e:	b570      	push	{r4, r5, r6, lr}
 8012a40:	460d      	mov	r5, r1
 8012a42:	4616      	mov	r6, r2
 8012a44:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a46:	b13c      	cbz	r4, 8012a58 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8012a48:	6823      	ldr	r3, [r4, #0]
 8012a4a:	4620      	mov	r0, r4
 8012a4c:	4632      	mov	r2, r6
 8012a4e:	4629      	mov	r1, r5
 8012a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a52:	4798      	blx	r3
 8012a54:	69a4      	ldr	r4, [r4, #24]
 8012a56:	e7f6      	b.n	8012a46 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8012a58:	bd70      	pop	{r4, r5, r6, pc}

08012a5a <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8012a5a:	b538      	push	{r3, r4, r5, lr}
 8012a5c:	460d      	mov	r5, r1
 8012a5e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a60:	b134      	cbz	r4, 8012a70 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 8012a62:	682b      	ldr	r3, [r5, #0]
 8012a64:	4621      	mov	r1, r4
 8012a66:	4628      	mov	r0, r5
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	4798      	blx	r3
 8012a6c:	69a4      	ldr	r4, [r4, #24]
 8012a6e:	e7f7      	b.n	8012a60 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8012a70:	bd38      	pop	{r3, r4, r5, pc}

08012a72 <_ZNK8touchgfx9Container17invalidateContentEv>:
 8012a72:	b510      	push	{r4, lr}
 8012a74:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012a76:	b12c      	cbz	r4, 8012a84 <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8012a78:	6823      	ldr	r3, [r4, #0]
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	699b      	ldr	r3, [r3, #24]
 8012a7e:	4798      	blx	r3
 8012a80:	69a4      	ldr	r4, [r4, #24]
 8012a82:	e7f8      	b.n	8012a76 <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 8012a84:	bd10      	pop	{r4, pc}

08012a86 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 8012a86:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012a88:	b19b      	cbz	r3, 8012ab2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012a8a:	428b      	cmp	r3, r1
 8012a8c:	d109      	bne.n	8012aa2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8012a8e:	699a      	ldr	r2, [r3, #24]
 8012a90:	2100      	movs	r1, #0
 8012a92:	6159      	str	r1, [r3, #20]
 8012a94:	6282      	str	r2, [r0, #40]	; 0x28
 8012a96:	b902      	cbnz	r2, 8012a9a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8012a98:	4770      	bx	lr
 8012a9a:	6199      	str	r1, [r3, #24]
 8012a9c:	4770      	bx	lr
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	b13a      	cbz	r2, 8012ab2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8012aa2:	699a      	ldr	r2, [r3, #24]
 8012aa4:	428a      	cmp	r2, r1
 8012aa6:	d1fa      	bne.n	8012a9e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8012aa8:	698a      	ldr	r2, [r1, #24]
 8012aaa:	619a      	str	r2, [r3, #24]
 8012aac:	2300      	movs	r3, #0
 8012aae:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8012ab2:	4770      	bx	lr

08012ab4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8012ab4:	b410      	push	{r4}
 8012ab6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8012ab8:	4604      	mov	r4, r0
 8012aba:	b92b      	cbnz	r3, 8012ac8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8012abc:	6803      	ldr	r3, [r0, #0]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012ac6:	4718      	bx	r3
 8012ac8:	b941      	cbnz	r1, 8012adc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8012aca:	6193      	str	r3, [r2, #24]
 8012acc:	6282      	str	r2, [r0, #40]	; 0x28
 8012ace:	6154      	str	r4, [r2, #20]
 8012ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012ad4:	4770      	bx	lr
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	2800      	cmp	r0, #0
 8012ada:	d0f9      	beq.n	8012ad0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8012adc:	4299      	cmp	r1, r3
 8012ade:	6998      	ldr	r0, [r3, #24]
 8012ae0:	d1f9      	bne.n	8012ad6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8012ae2:	6190      	str	r0, [r2, #24]
 8012ae4:	618a      	str	r2, [r1, #24]
 8012ae6:	e7f2      	b.n	8012ace <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08012ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8012ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aec:	461f      	mov	r7, r3
 8012aee:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8012af2:	460d      	mov	r5, r1
 8012af4:	4616      	mov	r6, r2
 8012af6:	b103      	cbz	r3, 8012afa <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8012af8:	6038      	str	r0, [r7, #0]
 8012afa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012afc:	b314      	cbz	r4, 8012b44 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8012afe:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012b02:	b1eb      	cbz	r3, 8012b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b04:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8012b08:	428d      	cmp	r5, r1
 8012b0a:	db19      	blt.n	8012b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b0c:	b289      	uxth	r1, r1
 8012b0e:	8923      	ldrh	r3, [r4, #8]
 8012b10:	440b      	add	r3, r1
 8012b12:	b21b      	sxth	r3, r3
 8012b14:	429d      	cmp	r5, r3
 8012b16:	da13      	bge.n	8012b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b18:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8012b1c:	4296      	cmp	r6, r2
 8012b1e:	db0f      	blt.n	8012b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b20:	b292      	uxth	r2, r2
 8012b22:	8963      	ldrh	r3, [r4, #10]
 8012b24:	4413      	add	r3, r2
 8012b26:	b21b      	sxth	r3, r3
 8012b28:	429e      	cmp	r6, r3
 8012b2a:	da09      	bge.n	8012b40 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8012b2c:	6823      	ldr	r3, [r4, #0]
 8012b2e:	1ab2      	subs	r2, r6, r2
 8012b30:	1a69      	subs	r1, r5, r1
 8012b32:	4620      	mov	r0, r4
 8012b34:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8012b38:	b212      	sxth	r2, r2
 8012b3a:	463b      	mov	r3, r7
 8012b3c:	b209      	sxth	r1, r1
 8012b3e:	47c0      	blx	r8
 8012b40:	69a4      	ldr	r4, [r4, #24]
 8012b42:	e7db      	b.n	8012afc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 8012b44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8012b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4c:	4c6d      	ldr	r4, [pc, #436]	; (8012d04 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8012b4e:	b0a1      	sub	sp, #132	; 0x84
 8012b50:	4606      	mov	r6, r0
 8012b52:	6824      	ldr	r4, [r4, #0]
 8012b54:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8012b56:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8012b5a:	2400      	movs	r4, #0
 8012b5c:	9303      	str	r3, [sp, #12]
 8012b5e:	802c      	strh	r4, [r5, #0]
 8012b60:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8012b62:	802c      	strh	r4, [r5, #0]
 8012b64:	601c      	str	r4, [r3, #0]
 8012b66:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8012b6a:	f7ff ffbd 	bl	8012ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012b6e:	f1b9 0f03 	cmp.w	r9, #3
 8012b72:	f340 80c1 	ble.w	8012cf8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 8012b76:	4631      	mov	r1, r6
 8012b78:	a80c      	add	r0, sp, #48	; 0x30
 8012b7a:	f003 faa3 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012b7e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8012b82:	9306      	str	r3, [sp, #24]
 8012b84:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8012b88:	9307      	str	r3, [sp, #28]
 8012b8a:	9b03      	ldr	r3, [sp, #12]
 8012b8c:	f8d3 a000 	ldr.w	sl, [r3]
 8012b90:	f1ba 0f00 	cmp.w	sl, #0
 8012b94:	f000 80b3 	beq.w	8012cfe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8012b98:	4651      	mov	r1, sl
 8012b9a:	a810      	add	r0, sp, #64	; 0x40
 8012b9c:	f003 fa92 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012ba0:	2002      	movs	r0, #2
 8012ba2:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 8012ba6:	9b01      	ldr	r3, [sp, #4]
 8012ba8:	9a06      	ldr	r2, [sp, #24]
 8012baa:	fb91 f1f0 	sdiv	r1, r1, r0
 8012bae:	189d      	adds	r5, r3, r2
 8012bb0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8012bb4:	9a07      	ldr	r2, [sp, #28]
 8012bb6:	4419      	add	r1, r3
 8012bb8:	9b02      	ldr	r3, [sp, #8]
 8012bba:	4413      	add	r3, r2
 8012bbc:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8012bc0:	1a6d      	subs	r5, r5, r1
 8012bc2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8012bc6:	fb92 f2f0 	sdiv	r2, r2, r0
 8012bca:	440a      	add	r2, r1
 8012bcc:	1a9b      	subs	r3, r3, r2
 8012bce:	435b      	muls	r3, r3
 8012bd0:	fb05 3505 	mla	r5, r5, r5, r3
 8012bd4:	4f4c      	ldr	r7, [pc, #304]	; (8012d08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 8012bd6:	ac10      	add	r4, sp, #64	; 0x40
 8012bd8:	f1b9 0f0c 	cmp.w	r9, #12
 8012bdc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012be0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012be4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8012be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012be8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8012bec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8012bf0:	f04f 0303 	mov.w	r3, #3
 8012bf4:	bfd8      	it	le
 8012bf6:	f109 32ff 	addle.w	r2, r9, #4294967295
 8012bfa:	f04f 0400 	mov.w	r4, #0
 8012bfe:	f8cd 9000 	str.w	r9, [sp]
 8012c02:	bfcc      	ite	gt
 8012c04:	4698      	movgt	r8, r3
 8012c06:	fb92 f8f3 	sdivle	r8, r2, r3
 8012c0a:	1c63      	adds	r3, r4, #1
 8012c0c:	aa10      	add	r2, sp, #64	; 0x40
 8012c0e:	f004 0401 	and.w	r4, r4, #1
 8012c12:	f04f 0b00 	mov.w	fp, #0
 8012c16:	9308      	str	r3, [sp, #32]
 8012c18:	9b00      	ldr	r3, [sp, #0]
 8012c1a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8012c1e:	fb93 f3f8 	sdiv	r3, r3, r8
 8012c22:	3404      	adds	r4, #4
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	9304      	str	r3, [sp, #16]
 8012c28:	9a04      	ldr	r2, [sp, #16]
 8012c2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012c2e:	fb13 f302 	smulbb	r3, r3, r2
 8012c32:	9a01      	ldr	r2, [sp, #4]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	1899      	adds	r1, r3, r2
 8012c38:	9305      	str	r3, [sp, #20]
 8012c3a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012c3e:	b209      	sxth	r1, r1
 8012c40:	4299      	cmp	r1, r3
 8012c42:	db4d      	blt.n	8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c44:	8932      	ldrh	r2, [r6, #8]
 8012c46:	4413      	add	r3, r2
 8012c48:	b21b      	sxth	r3, r3
 8012c4a:	4299      	cmp	r1, r3
 8012c4c:	da48      	bge.n	8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c4e:	9b04      	ldr	r3, [sp, #16]
 8012c50:	6827      	ldr	r7, [r4, #0]
 8012c52:	fb17 f703 	smulbb	r7, r7, r3
 8012c56:	9b02      	ldr	r3, [sp, #8]
 8012c58:	b2bf      	uxth	r7, r7
 8012c5a:	18fa      	adds	r2, r7, r3
 8012c5c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8012c60:	b212      	sxth	r2, r2
 8012c62:	429a      	cmp	r2, r3
 8012c64:	db3c      	blt.n	8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c66:	8970      	ldrh	r0, [r6, #10]
 8012c68:	4403      	add	r3, r0
 8012c6a:	b21b      	sxth	r3, r3
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	da37      	bge.n	8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c70:	2300      	movs	r3, #0
 8012c72:	4630      	mov	r0, r6
 8012c74:	930b      	str	r3, [sp, #44]	; 0x2c
 8012c76:	ab0b      	add	r3, sp, #44	; 0x2c
 8012c78:	f7ff ff36 	bl	8012ae8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8012c7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012c7e:	b37a      	cbz	r2, 8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c80:	4552      	cmp	r2, sl
 8012c82:	d02d      	beq.n	8012ce0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8012c84:	4611      	mov	r1, r2
 8012c86:	a80e      	add	r0, sp, #56	; 0x38
 8012c88:	9209      	str	r2, [sp, #36]	; 0x24
 8012c8a:	f003 fa1b 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8012c8e:	f04f 0e02 	mov.w	lr, #2
 8012c92:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8012c96:	9a06      	ldr	r2, [sp, #24]
 8012c98:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8012c9c:	9b01      	ldr	r3, [sp, #4]
 8012c9e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8012ca2:	4413      	add	r3, r2
 8012ca4:	9a07      	ldr	r2, [sp, #28]
 8012ca6:	fb91 f1fe 	sdiv	r1, r1, lr
 8012caa:	fb9c fcfe 	sdiv	ip, ip, lr
 8012cae:	4401      	add	r1, r0
 8012cb0:	1a58      	subs	r0, r3, r1
 8012cb2:	9b02      	ldr	r3, [sp, #8]
 8012cb4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8012cb8:	4413      	add	r3, r2
 8012cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012cbc:	448c      	add	ip, r1
 8012cbe:	eba3 030c 	sub.w	r3, r3, ip
 8012cc2:	435b      	muls	r3, r3
 8012cc4:	fb00 3300 	mla	r3, r0, r0, r3
 8012cc8:	42ab      	cmp	r3, r5
 8012cca:	d208      	bcs.n	8012cde <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8012ccc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012cce:	461d      	mov	r5, r3
 8012cd0:	9803      	ldr	r0, [sp, #12]
 8012cd2:	6001      	str	r1, [r0, #0]
 8012cd4:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8012cd6:	9805      	ldr	r0, [sp, #20]
 8012cd8:	8008      	strh	r0, [r1, #0]
 8012cda:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012cdc:	800f      	strh	r7, [r1, #0]
 8012cde:	4692      	mov	sl, r2
 8012ce0:	f10b 0b01 	add.w	fp, fp, #1
 8012ce4:	3408      	adds	r4, #8
 8012ce6:	f1bb 0f04 	cmp.w	fp, #4
 8012cea:	d19d      	bne.n	8012c28 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8012cec:	9b00      	ldr	r3, [sp, #0]
 8012cee:	9c08      	ldr	r4, [sp, #32]
 8012cf0:	444b      	add	r3, r9
 8012cf2:	4544      	cmp	r4, r8
 8012cf4:	9300      	str	r3, [sp, #0]
 8012cf6:	d188      	bne.n	8012c0a <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8012cf8:	b021      	add	sp, #132	; 0x84
 8012cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfe:	f04f 35ff 	mov.w	r5, #4294967295
 8012d02:	e767      	b.n	8012bd4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 8012d04:	2400af34 	.word	0x2400af34
 8012d08:	08025220 	.word	0x08025220

08012d0c <_ZN8touchgfx4RectaNERKS0_>:
 8012d0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d10:	f9b1 7000 	ldrsh.w	r7, [r1]
 8012d14:	888c      	ldrh	r4, [r1, #4]
 8012d16:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012d1a:	443c      	add	r4, r7
 8012d1c:	b2a4      	uxth	r4, r4
 8012d1e:	fa0f f884 	sxth.w	r8, r4
 8012d22:	45c1      	cmp	r9, r8
 8012d24:	da2f      	bge.n	8012d86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d26:	8882      	ldrh	r2, [r0, #4]
 8012d28:	444a      	add	r2, r9
 8012d2a:	b292      	uxth	r2, r2
 8012d2c:	fa0f fe82 	sxth.w	lr, r2
 8012d30:	4577      	cmp	r7, lr
 8012d32:	da28      	bge.n	8012d86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d34:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8012d38:	88cb      	ldrh	r3, [r1, #6]
 8012d3a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8012d3e:	442b      	add	r3, r5
 8012d40:	b21b      	sxth	r3, r3
 8012d42:	429e      	cmp	r6, r3
 8012d44:	da1f      	bge.n	8012d86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d46:	88c3      	ldrh	r3, [r0, #6]
 8012d48:	4433      	add	r3, r6
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	fa0f fc83 	sxth.w	ip, r3
 8012d50:	4565      	cmp	r5, ip
 8012d52:	da18      	bge.n	8012d86 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 8012d54:	454f      	cmp	r7, r9
 8012d56:	bfb8      	it	lt
 8012d58:	464f      	movlt	r7, r9
 8012d5a:	42b5      	cmp	r5, r6
 8012d5c:	bfb8      	it	lt
 8012d5e:	4635      	movlt	r5, r6
 8012d60:	45f0      	cmp	r8, lr
 8012d62:	bfd8      	it	le
 8012d64:	4622      	movle	r2, r4
 8012d66:	1bd2      	subs	r2, r2, r7
 8012d68:	8082      	strh	r2, [r0, #4]
 8012d6a:	884a      	ldrh	r2, [r1, #2]
 8012d6c:	88c9      	ldrh	r1, [r1, #6]
 8012d6e:	8007      	strh	r7, [r0, #0]
 8012d70:	440a      	add	r2, r1
 8012d72:	8045      	strh	r5, [r0, #2]
 8012d74:	b292      	uxth	r2, r2
 8012d76:	b211      	sxth	r1, r2
 8012d78:	458c      	cmp	ip, r1
 8012d7a:	bfa8      	it	ge
 8012d7c:	4613      	movge	r3, r2
 8012d7e:	1b5b      	subs	r3, r3, r5
 8012d80:	80c3      	strh	r3, [r0, #6]
 8012d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d86:	2300      	movs	r3, #0
 8012d88:	8003      	strh	r3, [r0, #0]
 8012d8a:	8043      	strh	r3, [r0, #2]
 8012d8c:	8083      	strh	r3, [r0, #4]
 8012d8e:	80c3      	strh	r3, [r0, #6]
 8012d90:	e7f7      	b.n	8012d82 <_ZN8touchgfx4RectaNERKS0_+0x76>

08012d92 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8012d92:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	dd06      	ble.n	8012da8 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8012d9a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8012d9e:	2800      	cmp	r0, #0
 8012da0:	bfcc      	ite	gt
 8012da2:	2000      	movgt	r0, #0
 8012da4:	2001      	movle	r0, #1
 8012da6:	4770      	bx	lr
 8012da8:	2001      	movs	r0, #1
 8012daa:	4770      	bx	lr

08012dac <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8012dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db0:	2300      	movs	r3, #0
 8012db2:	4604      	mov	r4, r0
 8012db4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8012db6:	8003      	strh	r3, [r0, #0]
 8012db8:	8043      	strh	r3, [r0, #2]
 8012dba:	8083      	strh	r3, [r0, #4]
 8012dbc:	80c3      	strh	r3, [r0, #6]
 8012dbe:	2d00      	cmp	r5, #0
 8012dc0:	d040      	beq.n	8012e44 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8012dc2:	1d28      	adds	r0, r5, #4
 8012dc4:	f7ff ffe5 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012dc8:	b988      	cbnz	r0, 8012dee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012dca:	4620      	mov	r0, r4
 8012dcc:	f7ff ffe1 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012dd0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8012dd4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012dd8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8012ddc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8012de0:	b138      	cbz	r0, 8012df2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8012de2:	8022      	strh	r2, [r4, #0]
 8012de4:	8063      	strh	r3, [r4, #2]
 8012de6:	f8a4 e004 	strh.w	lr, [r4, #4]
 8012dea:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012dee:	69ad      	ldr	r5, [r5, #24]
 8012df0:	e7e5      	b.n	8012dbe <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8012df2:	f9b4 0000 	ldrsh.w	r0, [r4]
 8012df6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012dfa:	4290      	cmp	r0, r2
 8012dfc:	4607      	mov	r7, r0
 8012dfe:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8012e02:	460e      	mov	r6, r1
 8012e04:	bfa8      	it	ge
 8012e06:	4617      	movge	r7, r2
 8012e08:	4299      	cmp	r1, r3
 8012e0a:	4472      	add	r2, lr
 8012e0c:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8012e10:	bfa8      	it	ge
 8012e12:	461e      	movge	r6, r3
 8012e14:	4440      	add	r0, r8
 8012e16:	4471      	add	r1, lr
 8012e18:	4463      	add	r3, ip
 8012e1a:	b200      	sxth	r0, r0
 8012e1c:	8027      	strh	r7, [r4, #0]
 8012e1e:	b212      	sxth	r2, r2
 8012e20:	8066      	strh	r6, [r4, #2]
 8012e22:	b209      	sxth	r1, r1
 8012e24:	b21b      	sxth	r3, r3
 8012e26:	4290      	cmp	r0, r2
 8012e28:	bfac      	ite	ge
 8012e2a:	ebc7 0200 	rsbge	r2, r7, r0
 8012e2e:	ebc7 0202 	rsblt	r2, r7, r2
 8012e32:	4299      	cmp	r1, r3
 8012e34:	bfac      	ite	ge
 8012e36:	ebc6 0301 	rsbge	r3, r6, r1
 8012e3a:	ebc6 0303 	rsblt	r3, r6, r3
 8012e3e:	80a2      	strh	r2, [r4, #4]
 8012e40:	80e3      	strh	r3, [r4, #6]
 8012e42:	e7d4      	b.n	8012dee <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8012e44:	4620      	mov	r0, r4
 8012e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012e4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8012e4a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012e4e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012e52:	b383      	cbz	r3, 8012eb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012e54:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012e56:	b374      	cbz	r4, 8012eb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8012e58:	f9b1 5000 	ldrsh.w	r5, [r1]
 8012e5c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8012e60:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8012e64:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8012e68:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012e6c:	b303      	cbz	r3, 8012eb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012e6e:	4668      	mov	r0, sp
 8012e70:	1d21      	adds	r1, r4, #4
 8012e72:	f8ad 5000 	strh.w	r5, [sp]
 8012e76:	f8ad 6002 	strh.w	r6, [sp, #2]
 8012e7a:	f8ad 7004 	strh.w	r7, [sp, #4]
 8012e7e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8012e82:	f7ff ff43 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 8012e86:	4668      	mov	r0, sp
 8012e88:	f7ff ff83 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e8c:	b980      	cbnz	r0, 8012eb0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8012e8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012e92:	4669      	mov	r1, sp
 8012e94:	88a2      	ldrh	r2, [r4, #4]
 8012e96:	4620      	mov	r0, r4
 8012e98:	1a9b      	subs	r3, r3, r2
 8012e9a:	88e2      	ldrh	r2, [r4, #6]
 8012e9c:	f8ad 3000 	strh.w	r3, [sp]
 8012ea0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012ea4:	1a9b      	subs	r3, r3, r2
 8012ea6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012eaa:	6823      	ldr	r3, [r4, #0]
 8012eac:	689b      	ldr	r3, [r3, #8]
 8012eae:	4798      	blx	r3
 8012eb0:	69a4      	ldr	r4, [r4, #24]
 8012eb2:	2c00      	cmp	r4, #0
 8012eb4:	d1d8      	bne.n	8012e68 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8012eb6:	b002      	add	sp, #8
 8012eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012ebc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8012ebc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012ebe:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8012ec2:	460d      	mov	r5, r1
 8012ec4:	4616      	mov	r6, r2
 8012ec6:	b323      	cbz	r3, 8012f12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012ec8:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8012eca:	b314      	cbz	r4, 8012f12 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8012ecc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8012ed0:	b1eb      	cbz	r3, 8012f0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012ed2:	6828      	ldr	r0, [r5, #0]
 8012ed4:	466b      	mov	r3, sp
 8012ed6:	6869      	ldr	r1, [r5, #4]
 8012ed8:	c303      	stmia	r3!, {r0, r1}
 8012eda:	4668      	mov	r0, sp
 8012edc:	1d21      	adds	r1, r4, #4
 8012ede:	f7ff ff15 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 8012ee2:	4668      	mov	r0, sp
 8012ee4:	f7ff ff55 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ee8:	b988      	cbnz	r0, 8012f0e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8012eea:	f8bd 3000 	ldrh.w	r3, [sp]
 8012eee:	4669      	mov	r1, sp
 8012ef0:	88a2      	ldrh	r2, [r4, #4]
 8012ef2:	4620      	mov	r0, r4
 8012ef4:	1a9b      	subs	r3, r3, r2
 8012ef6:	88e2      	ldrh	r2, [r4, #6]
 8012ef8:	f8ad 3000 	strh.w	r3, [sp]
 8012efc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012f00:	1a9b      	subs	r3, r3, r2
 8012f02:	4632      	mov	r2, r6
 8012f04:	f8ad 3002 	strh.w	r3, [sp, #2]
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012f0c:	4798      	blx	r3
 8012f0e:	69a4      	ldr	r4, [r4, #24]
 8012f10:	e7db      	b.n	8012eca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 8012f12:	b002      	add	sp, #8
 8012f14:	bd70      	pop	{r4, r5, r6, pc}

08012f16 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8012f16:	4770      	bx	lr

08012f18 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8012f18:	4770      	bx	lr

08012f1a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8012f1a:	6803      	ldr	r3, [r0, #0]
 8012f1c:	b513      	push	{r0, r1, r4, lr}
 8012f1e:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8012f22:	2300      	movs	r3, #0
 8012f24:	e9cd 3300 	strd	r3, r3, [sp]
 8012f28:	466b      	mov	r3, sp
 8012f2a:	47a0      	blx	r4
 8012f2c:	b002      	add	sp, #8
 8012f2e:	bd10      	pop	{r4, pc}

08012f30 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8012f30:	2301      	movs	r3, #1
 8012f32:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012f36:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012f3a:	4770      	bx	lr

08012f3c <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8012f3c:	2301      	movs	r3, #1
 8012f3e:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8012f42:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8012f46:	4770      	bx	lr

08012f48 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8012f48:	6843      	ldr	r3, [r0, #4]
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	725a      	strb	r2, [r3, #9]
 8012f4e:	6840      	ldr	r0, [r0, #4]
 8012f50:	6803      	ldr	r3, [r0, #0]
 8012f52:	691b      	ldr	r3, [r3, #16]
 8012f54:	4718      	bx	r3

08012f56 <_ZN8touchgfx3HAL8flushDMAEv>:
 8012f56:	6840      	ldr	r0, [r0, #4]
 8012f58:	6803      	ldr	r3, [r0, #0]
 8012f5a:	689b      	ldr	r3, [r3, #8]
 8012f5c:	4718      	bx	r3

08012f5e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8012f5e:	b530      	push	{r4, r5, lr}
 8012f60:	b08b      	sub	sp, #44	; 0x2c
 8012f62:	6804      	ldr	r4, [r0, #0]
 8012f64:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8012f68:	9509      	str	r5, [sp, #36]	; 0x24
 8012f6a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 8012f6e:	9508      	str	r5, [sp, #32]
 8012f70:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8012f74:	9507      	str	r5, [sp, #28]
 8012f76:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8012f7a:	9506      	str	r5, [sp, #24]
 8012f7c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8012f80:	9505      	str	r5, [sp, #20]
 8012f82:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8012f86:	9504      	str	r5, [sp, #16]
 8012f88:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8012f8c:	9503      	str	r5, [sp, #12]
 8012f8e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8012f92:	9502      	str	r5, [sp, #8]
 8012f94:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8012f98:	e9cd 3500 	strd	r3, r5, [sp]
 8012f9c:	4613      	mov	r3, r2
 8012f9e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	47a0      	blx	r4
 8012fa4:	b00b      	add	sp, #44	; 0x2c
 8012fa6:	bd30      	pop	{r4, r5, pc}

08012fa8 <_ZN8touchgfx3HAL10beginFrameEv>:
 8012fa8:	4b04      	ldr	r3, [pc, #16]	; (8012fbc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	b123      	cbz	r3, 8012fb8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 8012fae:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8012fb2:	f080 0001 	eor.w	r0, r0, #1
 8012fb6:	4770      	bx	lr
 8012fb8:	2001      	movs	r0, #1
 8012fba:	4770      	bx	lr
 8012fbc:	2400af32 	.word	0x2400af32

08012fc0 <_ZN8touchgfx3HAL8endFrameEv>:
 8012fc0:	b510      	push	{r4, lr}
 8012fc2:	4604      	mov	r4, r0
 8012fc4:	6840      	ldr	r0, [r0, #4]
 8012fc6:	6803      	ldr	r3, [r0, #0]
 8012fc8:	689b      	ldr	r3, [r3, #8]
 8012fca:	4798      	blx	r3
 8012fcc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8012fd0:	b113      	cbz	r3, 8012fd8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8012fd2:	2301      	movs	r3, #1
 8012fd4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8012fd8:	bd10      	pop	{r4, pc}

08012fda <_ZN8touchgfx3HAL10initializeEv>:
 8012fda:	b510      	push	{r4, lr}
 8012fdc:	4604      	mov	r4, r0
 8012fde:	f7ee ff69 	bl	8001eb4 <_ZN8touchgfx10OSWrappers10initializeEv>
 8012fe2:	6860      	ldr	r0, [r4, #4]
 8012fe4:	6803      	ldr	r3, [r0, #0]
 8012fe6:	68db      	ldr	r3, [r3, #12]
 8012fe8:	4798      	blx	r3
 8012fea:	68e0      	ldr	r0, [r4, #12]
 8012fec:	6803      	ldr	r3, [r0, #0]
 8012fee:	689b      	ldr	r3, [r3, #8]
 8012ff0:	4798      	blx	r3
 8012ff2:	6823      	ldr	r3, [r4, #0]
 8012ff4:	4620      	mov	r0, r4
 8012ff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ffc:	4718      	bx	r3

08012ffe <_ZN8touchgfx3HAL9taskEntryEv>:
 8012ffe:	b508      	push	{r3, lr}
 8013000:	6803      	ldr	r3, [r0, #0]
 8013002:	4604      	mov	r4, r0
 8013004:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013008:	4798      	blx	r3
 801300a:	6823      	ldr	r3, [r4, #0]
 801300c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801300e:	4620      	mov	r0, r4
 8013010:	4798      	blx	r3
 8013012:	f7ee ffc5 	bl	8001fa0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8013016:	6823      	ldr	r3, [r4, #0]
 8013018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801301a:	e7f8      	b.n	801300e <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801301c <_ZN8touchgfx3HAL4tickEv>:
 801301c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801301e:	6803      	ldr	r3, [r0, #0]
 8013020:	4604      	mov	r4, r0
 8013022:	4d5b      	ldr	r5, [pc, #364]	; (8013190 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8013024:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8013028:	4798      	blx	r3
 801302a:	2800      	cmp	r0, #0
 801302c:	f000 8095 	beq.w	801315a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8013030:	2001      	movs	r0, #1
 8013032:	2600      	movs	r6, #0
 8013034:	f7ee fbd4 	bl	80017e0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8013038:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801303c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8013040:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8013044:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8013048:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801304c:	b133      	cbz	r3, 801305c <_ZN8touchgfx3HAL4tickEv+0x40>
 801304e:	6823      	ldr	r3, [r4, #0]
 8013050:	4620      	mov	r0, r4
 8013052:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8013056:	4798      	blx	r3
 8013058:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801305c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8013060:	2601      	movs	r6, #1
 8013062:	6862      	ldr	r2, [r4, #4]
 8013064:	f083 0301 	eor.w	r3, r3, #1
 8013068:	702e      	strb	r6, [r5, #0]
 801306a:	7253      	strb	r3, [r2, #9]
 801306c:	f001 fff6 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8013070:	6803      	ldr	r3, [r0, #0]
 8013072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013074:	4798      	blx	r3
 8013076:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801307a:	b90b      	cbnz	r3, 8013080 <_ZN8touchgfx3HAL4tickEv+0x64>
 801307c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8013080:	f001 ffec 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8013084:	6803      	ldr	r3, [r0, #0]
 8013086:	695b      	ldr	r3, [r3, #20]
 8013088:	4798      	blx	r3
 801308a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801308c:	6803      	ldr	r3, [r0, #0]
 801308e:	691b      	ldr	r3, [r3, #16]
 8013090:	4798      	blx	r3
 8013092:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8013096:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801309a:	3b01      	subs	r3, #1
 801309c:	b2db      	uxtb	r3, r3
 801309e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80130a2:	b10a      	cbz	r2, 80130a8 <_ZN8touchgfx3HAL4tickEv+0x8c>
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d1eb      	bne.n	8013080 <_ZN8touchgfx3HAL4tickEv+0x64>
 80130a8:	4a3a      	ldr	r2, [pc, #232]	; (8013194 <_ZN8touchgfx3HAL4tickEv+0x178>)
 80130aa:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 80130ae:	7813      	ldrb	r3, [r2, #0]
 80130b0:	3301      	adds	r3, #1
 80130b2:	b25b      	sxtb	r3, r3
 80130b4:	4299      	cmp	r1, r3
 80130b6:	7013      	strb	r3, [r2, #0]
 80130b8:	dc10      	bgt.n	80130dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 80130ba:	2300      	movs	r3, #0
 80130bc:	68e0      	ldr	r0, [r4, #12]
 80130be:	a902      	add	r1, sp, #8
 80130c0:	7013      	strb	r3, [r2, #0]
 80130c2:	aa03      	add	r2, sp, #12
 80130c4:	6803      	ldr	r3, [r0, #0]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	4798      	blx	r3
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	2800      	cmp	r0, #0
 80130ce:	d050      	beq.n	8013172 <_ZN8touchgfx3HAL4tickEv+0x156>
 80130d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80130d4:	4620      	mov	r0, r4
 80130d6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80130da:	4798      	blx	r3
 80130dc:	2300      	movs	r3, #0
 80130de:	6960      	ldr	r0, [r4, #20]
 80130e0:	f88d 3007 	strb.w	r3, [sp, #7]
 80130e4:	b158      	cbz	r0, 80130fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 80130e6:	6803      	ldr	r3, [r0, #0]
 80130e8:	f10d 0107 	add.w	r1, sp, #7
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	4798      	blx	r3
 80130f0:	b128      	cbz	r0, 80130fe <_ZN8touchgfx3HAL4tickEv+0xe2>
 80130f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80130f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80130f8:	6803      	ldr	r3, [r0, #0]
 80130fa:	68db      	ldr	r3, [r3, #12]
 80130fc:	4798      	blx	r3
 80130fe:	f104 001c 	add.w	r0, r4, #28
 8013102:	f010 f861 	bl	80231c8 <_ZN8touchgfx8Gestures4tickEv>
 8013106:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 801310a:	b30b      	cbz	r3, 8013150 <_ZN8touchgfx3HAL4tickEv+0x134>
 801310c:	6920      	ldr	r0, [r4, #16]
 801310e:	6803      	ldr	r3, [r0, #0]
 8013110:	691b      	ldr	r3, [r3, #16]
 8013112:	4798      	blx	r3
 8013114:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013116:	4606      	mov	r6, r0
 8013118:	b903      	cbnz	r3, 801311c <_ZN8touchgfx3HAL4tickEv+0x100>
 801311a:	6720      	str	r0, [r4, #112]	; 0x70
 801311c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801311e:	4a1e      	ldr	r2, [pc, #120]	; (8013198 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8013120:	1af3      	subs	r3, r6, r3
 8013122:	4293      	cmp	r3, r2
 8013124:	d914      	bls.n	8013150 <_ZN8touchgfx3HAL4tickEv+0x134>
 8013126:	6920      	ldr	r0, [r4, #16]
 8013128:	6803      	ldr	r3, [r0, #0]
 801312a:	699b      	ldr	r3, [r3, #24]
 801312c:	4798      	blx	r3
 801312e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8013130:	2264      	movs	r2, #100	; 0x64
 8013132:	1af3      	subs	r3, r6, r3
 8013134:	fbb3 f3f2 	udiv	r3, r3, r2
 8013138:	fbb0 f0f3 	udiv	r0, r0, r3
 801313c:	2800      	cmp	r0, #0
 801313e:	dc1d      	bgt.n	801317c <_ZN8touchgfx3HAL4tickEv+0x160>
 8013140:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8013144:	6920      	ldr	r0, [r4, #16]
 8013146:	2100      	movs	r1, #0
 8013148:	6803      	ldr	r3, [r0, #0]
 801314a:	69db      	ldr	r3, [r3, #28]
 801314c:	4798      	blx	r3
 801314e:	6726      	str	r6, [r4, #112]	; 0x70
 8013150:	f001 ff84 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 8013154:	6803      	ldr	r3, [r0, #0]
 8013156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013158:	4798      	blx	r3
 801315a:	6823      	ldr	r3, [r4, #0]
 801315c:	4620      	mov	r0, r4
 801315e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8013162:	4798      	blx	r3
 8013164:	2001      	movs	r0, #1
 8013166:	f7ee fb97 	bl	8001898 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801316a:	2300      	movs	r3, #0
 801316c:	702b      	strb	r3, [r5, #0]
 801316e:	b004      	add	sp, #16
 8013170:	bd70      	pop	{r4, r5, r6, pc}
 8013172:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8013176:	4620      	mov	r0, r4
 8013178:	4798      	blx	r3
 801317a:	e7af      	b.n	80130dc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801317c:	2863      	cmp	r0, #99	; 0x63
 801317e:	bfcb      	itete	gt
 8013180:	2300      	movgt	r3, #0
 8013182:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8013186:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801318a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801318e:	e7d9      	b.n	8013144 <_ZN8touchgfx3HAL4tickEv+0x128>
 8013190:	2400af38 	.word	0x2400af38
 8013194:	2400af39 	.word	0x2400af39
 8013198:	05f5e100 	.word	0x05f5e100

0801319c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801319c:	f7ee becc 	b.w	8001f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

080131a0 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 80131a0:	6581      	str	r1, [r0, #88]	; 0x58
 80131a2:	301c      	adds	r0, #28
 80131a4:	f010 b80e 	b.w	80231c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080131a8 <_ZN8touchgfx3HAL5touchEll>:
 80131a8:	b530      	push	{r4, r5, lr}
 80131aa:	b087      	sub	sp, #28
 80131ac:	4604      	mov	r4, r0
 80131ae:	a804      	add	r0, sp, #16
 80131b0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80131b4:	f001 fcd8 	bl	8014b68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80131b8:	9b04      	ldr	r3, [sp, #16]
 80131ba:	a906      	add	r1, sp, #24
 80131bc:	a803      	add	r0, sp, #12
 80131be:	f8ad 300c 	strh.w	r3, [sp, #12]
 80131c2:	9b05      	ldr	r3, [sp, #20]
 80131c4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80131c8:	f001 fd20 	bl	8014c0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80131cc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80131d0:	f104 001c 	add.w	r0, r4, #28
 80131d4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80131d8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80131dc:	b189      	cbz	r1, 8013202 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80131de:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	4613      	mov	r3, r2
 80131e6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80131ea:	462a      	mov	r2, r5
 80131ec:	f00f fffa 	bl	80231e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80131f0:	b128      	cbz	r0, 80131fe <_ZN8touchgfx3HAL5touchEll+0x56>
 80131f2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80131f6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80131f8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80131fc:	6623      	str	r3, [r4, #96]	; 0x60
 80131fe:	b007      	add	sp, #28
 8013200:	bd30      	pop	{r4, r5, pc}
 8013202:	f010 f82f 	bl	8023264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8013206:	2301      	movs	r3, #1
 8013208:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 801320c:	e7f1      	b.n	80131f2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0801320e <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801320e:	b510      	push	{r4, lr}
 8013210:	2b00      	cmp	r3, #0
 8013212:	d046      	beq.n	80132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013214:	ea81 0002 	eor.w	r0, r1, r2
 8013218:	07c4      	lsls	r4, r0, #31
 801321a:	d508      	bpl.n	801322e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801321c:	440b      	add	r3, r1
 801321e:	3a01      	subs	r2, #1
 8013220:	428b      	cmp	r3, r1
 8013222:	d93e      	bls.n	80132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013224:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8013228:	f801 0b01 	strb.w	r0, [r1], #1
 801322c:	e7f8      	b.n	8013220 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801322e:	07d0      	lsls	r0, r2, #31
 8013230:	bf42      	ittt	mi
 8013232:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8013236:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801323a:	f801 0b01 	strbmi.w	r0, [r1], #1
 801323e:	2b01      	cmp	r3, #1
 8013240:	d911      	bls.n	8013266 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013242:	ea81 0402 	eor.w	r4, r1, r2
 8013246:	4610      	mov	r0, r2
 8013248:	07a4      	lsls	r4, r4, #30
 801324a:	d022      	beq.n	8013292 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 801324c:	f023 0401 	bic.w	r4, r3, #1
 8013250:	440c      	add	r4, r1
 8013252:	428c      	cmp	r4, r1
 8013254:	4602      	mov	r2, r0
 8013256:	d904      	bls.n	8013262 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8013258:	8812      	ldrh	r2, [r2, #0]
 801325a:	3002      	adds	r0, #2
 801325c:	f821 2b02 	strh.w	r2, [r1], #2
 8013260:	e7f7      	b.n	8013252 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8013262:	f003 0301 	and.w	r3, r3, #1
 8013266:	f023 0003 	bic.w	r0, r3, #3
 801326a:	4408      	add	r0, r1
 801326c:	4288      	cmp	r0, r1
 801326e:	4614      	mov	r4, r2
 8013270:	d904      	bls.n	801327c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8013272:	6824      	ldr	r4, [r4, #0]
 8013274:	3204      	adds	r2, #4
 8013276:	f841 4b04 	str.w	r4, [r1], #4
 801327a:	e7f7      	b.n	801326c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801327c:	f003 0303 	and.w	r3, r3, #3
 8013280:	3a01      	subs	r2, #1
 8013282:	440b      	add	r3, r1
 8013284:	428b      	cmp	r3, r1
 8013286:	d90c      	bls.n	80132a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8013288:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801328c:	f801 0b01 	strb.w	r0, [r1], #1
 8013290:	e7f8      	b.n	8013284 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8013292:	0790      	lsls	r0, r2, #30
 8013294:	d0e7      	beq.n	8013266 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8013296:	f832 0b02 	ldrh.w	r0, [r2], #2
 801329a:	3b02      	subs	r3, #2
 801329c:	f821 0b02 	strh.w	r0, [r1], #2
 80132a0:	e7e1      	b.n	8013266 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80132a2:	2001      	movs	r0, #1
 80132a4:	bd10      	pop	{r4, pc}

080132a6 <_ZN8touchgfx3HAL7noTouchEv>:
 80132a6:	b510      	push	{r4, lr}
 80132a8:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 80132ac:	4604      	mov	r4, r0
 80132ae:	b153      	cbz	r3, 80132c6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80132b0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 80132b4:	2101      	movs	r1, #1
 80132b6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 80132ba:	301c      	adds	r0, #28
 80132bc:	f00f ffd2 	bl	8023264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80132c0:	2300      	movs	r3, #0
 80132c2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80132c6:	bd10      	pop	{r4, pc}

080132c8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80132c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132cc:	b085      	sub	sp, #20
 80132ce:	4604      	mov	r4, r0
 80132d0:	2000      	movs	r0, #0
 80132d2:	4699      	mov	r9, r3
 80132d4:	ad04      	add	r5, sp, #16
 80132d6:	460f      	mov	r7, r1
 80132d8:	4690      	mov	r8, r2
 80132da:	f845 0d04 	str.w	r0, [r5, #-4]!
 80132de:	69a0      	ldr	r0, [r4, #24]
 80132e0:	6806      	ldr	r6, [r0, #0]
 80132e2:	9501      	str	r5, [sp, #4]
 80132e4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 80132e8:	9500      	str	r5, [sp, #0]
 80132ea:	6835      	ldr	r5, [r6, #0]
 80132ec:	47a8      	blx	r5
 80132ee:	4d10      	ldr	r5, [pc, #64]	; (8013330 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80132f0:	4606      	mov	r6, r0
 80132f2:	f8a5 9000 	strh.w	r9, [r5]
 80132f6:	f7f0 fd7d 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 80132fa:	6803      	ldr	r3, [r0, #0]
 80132fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fe:	4798      	blx	r3
 8013300:	b128      	cbz	r0, 801330e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8013302:	2801      	cmp	r0, #1
 8013304:	d00b      	beq.n	801331e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8013306:	4630      	mov	r0, r6
 8013308:	b005      	add	sp, #20
 801330a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801330e:	882b      	ldrh	r3, [r5, #0]
 8013310:	fb08 7203 	mla	r2, r8, r3, r7
 8013314:	9b03      	ldr	r3, [sp, #12]
 8013316:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 801331a:	63e3      	str	r3, [r4, #60]	; 0x3c
 801331c:	e7f3      	b.n	8013306 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 801331e:	882a      	ldrh	r2, [r5, #0]
 8013320:	9b03      	ldr	r3, [sp, #12]
 8013322:	fb08 7202 	mla	r2, r8, r2, r7
 8013326:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801332a:	1a9a      	subs	r2, r3, r2
 801332c:	63e2      	str	r2, [r4, #60]	; 0x3c
 801332e:	e7ea      	b.n	8013306 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8013330:	2400af2e 	.word	0x2400af2e

08013334 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8013334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013336:	b08b      	sub	sp, #44	; 0x2c
 8013338:	4617      	mov	r7, r2
 801333a:	4604      	mov	r4, r0
 801333c:	460e      	mov	r6, r1
 801333e:	461d      	mov	r5, r3
 8013340:	f7f0 fd58 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 8013344:	6803      	ldr	r3, [r0, #0]
 8013346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013348:	4798      	blx	r3
 801334a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801334e:	9007      	str	r0, [sp, #28]
 8013350:	4631      	mov	r1, r6
 8013352:	6822      	ldr	r2, [r4, #0]
 8013354:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8013358:	4b0c      	ldr	r3, [pc, #48]	; (801338c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 801335a:	4620      	mov	r0, r4
 801335c:	881b      	ldrh	r3, [r3, #0]
 801335e:	9306      	str	r3, [sp, #24]
 8013360:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8013364:	9305      	str	r3, [sp, #20]
 8013366:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 801336a:	9304      	str	r3, [sp, #16]
 801336c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013370:	9303      	str	r3, [sp, #12]
 8013372:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013376:	9302      	str	r3, [sp, #8]
 8013378:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801337c:	e9cd 5300 	strd	r5, r3, [sp]
 8013380:	463b      	mov	r3, r7
 8013382:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8013384:	2200      	movs	r2, #0
 8013386:	47a8      	blx	r5
 8013388:	b00b      	add	sp, #44	; 0x2c
 801338a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801338c:	2400af2e 	.word	0x2400af2e

08013390 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8013390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013394:	4698      	mov	r8, r3
 8013396:	6803      	ldr	r3, [r0, #0]
 8013398:	b08b      	sub	sp, #44	; 0x2c
 801339a:	4617      	mov	r7, r2
 801339c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 801339e:	460e      	mov	r6, r1
 80133a0:	4b13      	ldr	r3, [pc, #76]	; (80133f0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 80133a2:	4604      	mov	r4, r0
 80133a4:	f8b3 9000 	ldrh.w	r9, [r3]
 80133a8:	f7f0 fd24 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 80133ac:	6803      	ldr	r3, [r0, #0]
 80133ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b0:	4798      	blx	r3
 80133b2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80133b6:	2200      	movs	r2, #0
 80133b8:	4631      	mov	r1, r6
 80133ba:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80133be:	2302      	movs	r3, #2
 80133c0:	4620      	mov	r0, r4
 80133c2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80133c6:	2301      	movs	r3, #1
 80133c8:	9305      	str	r3, [sp, #20]
 80133ca:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80133ce:	9304      	str	r3, [sp, #16]
 80133d0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80133d4:	9303      	str	r3, [sp, #12]
 80133d6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80133da:	9302      	str	r3, [sp, #8]
 80133dc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80133e0:	e9cd 8300 	strd	r8, r3, [sp]
 80133e4:	463b      	mov	r3, r7
 80133e6:	47a8      	blx	r5
 80133e8:	b00b      	add	sp, #44	; 0x2c
 80133ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133ee:	bf00      	nop
 80133f0:	2400af2e 	.word	0x2400af2e

080133f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80133f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133f8:	4698      	mov	r8, r3
 80133fa:	6803      	ldr	r3, [r0, #0]
 80133fc:	b087      	sub	sp, #28
 80133fe:	460e      	mov	r6, r1
 8013400:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8013402:	4617      	mov	r7, r2
 8013404:	4b0f      	ldr	r3, [pc, #60]	; (8013444 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8013406:	4604      	mov	r4, r0
 8013408:	f8b3 9000 	ldrh.w	r9, [r3]
 801340c:	f7f0 fcf2 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 8013410:	6803      	ldr	r3, [r0, #0]
 8013412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013414:	4798      	blx	r3
 8013416:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801341a:	463a      	mov	r2, r7
 801341c:	4631      	mov	r1, r6
 801341e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013422:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8013426:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801342a:	4620      	mov	r0, r4
 801342c:	9302      	str	r3, [sp, #8]
 801342e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8013432:	9301      	str	r3, [sp, #4]
 8013434:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8013438:	9300      	str	r3, [sp, #0]
 801343a:	4643      	mov	r3, r8
 801343c:	47a8      	blx	r5
 801343e:	b007      	add	sp, #28
 8013440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013444:	2400af2e 	.word	0x2400af2e

08013448 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8013448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801344c:	4604      	mov	r4, r0
 801344e:	b08f      	sub	sp, #60	; 0x3c
 8013450:	4610      	mov	r0, r2
 8013452:	460d      	mov	r5, r1
 8013454:	4691      	mov	r9, r2
 8013456:	461e      	mov	r6, r3
 8013458:	f004 f8fe 	bl	8017658 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 801345c:	2800      	cmp	r0, #0
 801345e:	f000 809d 	beq.w	801359c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8013462:	6823      	ldr	r3, [r4, #0]
 8013464:	4620      	mov	r0, r4
 8013466:	f8df b198 	ldr.w	fp, [pc, #408]	; 8013600 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 801346a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013470:	4798      	blx	r3
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	4620      	mov	r0, r4
 8013476:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8013604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 801347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801347c:	4798      	blx	r3
 801347e:	f8bb 3000 	ldrh.w	r3, [fp]
 8013482:	4f5c      	ldr	r7, [pc, #368]	; (80135f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013484:	9301      	str	r3, [sp, #4]
 8013486:	f8ba 3000 	ldrh.w	r3, [sl]
 801348a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 801348e:	4640      	mov	r0, r8
 8013490:	9302      	str	r3, [sp, #8]
 8013492:	883b      	ldrh	r3, [r7, #0]
 8013494:	9303      	str	r3, [sp, #12]
 8013496:	4b58      	ldr	r3, [pc, #352]	; (80135f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013498:	881a      	ldrh	r2, [r3, #0]
 801349a:	9305      	str	r3, [sp, #20]
 801349c:	9204      	str	r2, [sp, #16]
 801349e:	f004 f96f 	bl	8017780 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80134a2:	8038      	strh	r0, [r7, #0]
 80134a4:	4640      	mov	r0, r8
 80134a6:	f004 f99f 	bl	80177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80134aa:	9b05      	ldr	r3, [sp, #20]
 80134ac:	b280      	uxth	r0, r0
 80134ae:	8018      	strh	r0, [r3, #0]
 80134b0:	4b52      	ldr	r3, [pc, #328]	; (80135fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80134b2:	781b      	ldrb	r3, [r3, #0]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d174      	bne.n	80135a2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80134b8:	883b      	ldrh	r3, [r7, #0]
 80134ba:	f8aa 0000 	strh.w	r0, [sl]
 80134be:	f8ab 3000 	strh.w	r3, [fp]
 80134c2:	4648      	mov	r0, r9
 80134c4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 80134c8:	f004 f8c6 	bl	8017658 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80134cc:	2200      	movs	r2, #0
 80134ce:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 80134d2:	4611      	mov	r1, r2
 80134d4:	4628      	mov	r0, r5
 80134d6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80134da:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80134de:	f7f1 fc88 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
 80134e2:	2301      	movs	r3, #1
 80134e4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 80134e8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 80134ec:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	dd5c      	ble.n	80135ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80134f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	dd58      	ble.n	80135ae <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80134fc:	462a      	mov	r2, r5
 80134fe:	ab0a      	add	r3, sp, #40	; 0x28
 8013500:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8013504:	6851      	ldr	r1, [r2, #4]
 8013506:	c303      	stmia	r3!, {r0, r1}
 8013508:	4631      	mov	r1, r6
 801350a:	a80a      	add	r0, sp, #40	; 0x28
 801350c:	f7ff fbfe 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 8013510:	4b38      	ldr	r3, [pc, #224]	; (80135f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013512:	2100      	movs	r1, #0
 8013514:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013518:	4b37      	ldr	r3, [pc, #220]	; (80135f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801351a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 801351e:	aa0a      	add	r2, sp, #40	; 0x28
 8013520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013524:	910c      	str	r1, [sp, #48]	; 0x30
 8013526:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801352a:	ab08      	add	r3, sp, #32
 801352c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013530:	e883 0003 	stmia.w	r3, {r0, r1}
 8013534:	4618      	mov	r0, r3
 8013536:	a90c      	add	r1, sp, #48	; 0x30
 8013538:	f7ff fbe8 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801353c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801353e:	2b00      	cmp	r3, #0
 8013540:	d13c      	bne.n	80135bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8013542:	2000      	movs	r0, #0
 8013544:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8013548:	2600      	movs	r6, #0
 801354a:	696b      	ldr	r3, [r5, #20]
 801354c:	a908      	add	r1, sp, #32
 801354e:	682a      	ldr	r2, [r5, #0]
 8013550:	4628      	mov	r0, r5
 8013552:	9305      	str	r3, [sp, #20]
 8013554:	616e      	str	r6, [r5, #20]
 8013556:	6892      	ldr	r2, [r2, #8]
 8013558:	4790      	blx	r2
 801355a:	9b05      	ldr	r3, [sp, #20]
 801355c:	4652      	mov	r2, sl
 801355e:	4649      	mov	r1, r9
 8013560:	616b      	str	r3, [r5, #20]
 8013562:	4628      	mov	r0, r5
 8013564:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8013568:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 801356c:	f7f1 fc41 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
 8013570:	9a01      	ldr	r2, [sp, #4]
 8013572:	4b23      	ldr	r3, [pc, #140]	; (8013600 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8013574:	4620      	mov	r0, r4
 8013576:	801a      	strh	r2, [r3, #0]
 8013578:	9a02      	ldr	r2, [sp, #8]
 801357a:	4b22      	ldr	r3, [pc, #136]	; (8013604 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 801357c:	801a      	strh	r2, [r3, #0]
 801357e:	9a03      	ldr	r2, [sp, #12]
 8013580:	4b1c      	ldr	r3, [pc, #112]	; (80135f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8013582:	801a      	strh	r2, [r3, #0]
 8013584:	4b1c      	ldr	r3, [pc, #112]	; (80135f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8013586:	9a04      	ldr	r2, [sp, #16]
 8013588:	801a      	strh	r2, [r3, #0]
 801358a:	6823      	ldr	r3, [r4, #0]
 801358c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8013590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013592:	4798      	blx	r3
 8013594:	6823      	ldr	r3, [r4, #0]
 8013596:	4620      	mov	r0, r4
 8013598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801359a:	4798      	blx	r3
 801359c:	b00f      	add	sp, #60	; 0x3c
 801359e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135a2:	883b      	ldrh	r3, [r7, #0]
 80135a4:	f8ab 0000 	strh.w	r0, [fp]
 80135a8:	f8aa 3000 	strh.w	r3, [sl]
 80135ac:	e789      	b.n	80134c2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80135ae:	462a      	mov	r2, r5
 80135b0:	ab0a      	add	r3, sp, #40	; 0x28
 80135b2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80135b6:	6851      	ldr	r1, [r2, #4]
 80135b8:	c303      	stmia	r3!, {r0, r1}
 80135ba:	e7a9      	b.n	8013510 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80135bc:	a807      	add	r0, sp, #28
 80135be:	f004 fa4f 	bl	8017a60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80135c2:	4606      	mov	r6, r0
 80135c4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80135c6:	6803      	ldr	r3, [r0, #0]
 80135c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ca:	4798      	blx	r3
 80135cc:	4286      	cmp	r6, r0
 80135ce:	d1b8      	bne.n	8013542 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80135d0:	f7f0 fc10 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 80135d4:	6803      	ldr	r3, [r0, #0]
 80135d6:	4606      	mov	r6, r0
 80135d8:	a807      	add	r0, sp, #28
 80135da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135dc:	9305      	str	r3, [sp, #20]
 80135de:	f004 fa3f 	bl	8017a60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80135e2:	9b05      	ldr	r3, [sp, #20]
 80135e4:	4601      	mov	r1, r0
 80135e6:	4630      	mov	r0, r6
 80135e8:	4798      	blx	r3
 80135ea:	f080 0001 	eor.w	r0, r0, #1
 80135ee:	b2c0      	uxtb	r0, r0
 80135f0:	e7a8      	b.n	8013544 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80135f2:	bf00      	nop
 80135f4:	2400af28 	.word	0x2400af28
 80135f8:	2400af2a 	.word	0x2400af2a
 80135fc:	2400af2c 	.word	0x2400af2c
 8013600:	2400af2e 	.word	0x2400af2e
 8013604:	2400af30 	.word	0x2400af30

08013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8013608:	4b07      	ldr	r3, [pc, #28]	; (8013628 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801360a:	b510      	push	{r4, lr}
 801360c:	781b      	ldrb	r3, [r3, #0]
 801360e:	4604      	mov	r4, r0
 8013610:	b13b      	cbz	r3, 8013622 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8013612:	6803      	ldr	r3, [r0, #0]
 8013614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013616:	4798      	blx	r3
 8013618:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801361a:	4283      	cmp	r3, r0
 801361c:	d101      	bne.n	8013622 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801361e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8013620:	bd10      	pop	{r4, pc}
 8013622:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8013624:	e7fc      	b.n	8013620 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8013626:	bf00      	nop
 8013628:	2400af32 	.word	0x2400af32

0801362c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 801362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013630:	461d      	mov	r5, r3
 8013632:	b08a      	sub	sp, #40	; 0x28
 8013634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013638:	4690      	mov	r8, r2
 801363a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 801363e:	2400      	movs	r4, #0
 8013640:	4607      	mov	r7, r0
 8013642:	fb06 8505 	mla	r5, r6, r5, r8
 8013646:	9404      	str	r4, [sp, #16]
 8013648:	f88d 4020 	strb.w	r4, [sp, #32]
 801364c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013650:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8013654:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013658:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801365c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013660:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013664:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013668:	f7ff ffce 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801366c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8013670:	6878      	ldr	r0, [r7, #4]
 8013672:	f8ad 601e 	strh.w	r6, [sp, #30]
 8013676:	a901      	add	r1, sp, #4
 8013678:	9505      	str	r5, [sp, #20]
 801367a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 801367e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8013682:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8013686:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 801368a:	6803      	ldr	r3, [r0, #0]
 801368c:	685b      	ldr	r3, [r3, #4]
 801368e:	4798      	blx	r3
 8013690:	b00a      	add	sp, #40	; 0x28
 8013692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013696 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8013696:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801369a:	b08b      	sub	sp, #44	; 0x2c
 801369c:	2400      	movs	r4, #0
 801369e:	4691      	mov	r9, r2
 80136a0:	461d      	mov	r5, r3
 80136a2:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 80136a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80136aa:	4688      	mov	r8, r1
 80136ac:	4607      	mov	r7, r0
 80136ae:	9404      	str	r4, [sp, #16]
 80136b0:	fb06 9505 	mla	r5, r6, r5, r9
 80136b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80136b8:	f7ff ffa6 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80136bc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80136c0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80136c4:	6878      	ldr	r0, [r7, #4]
 80136c6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80136ca:	a901      	add	r1, sp, #4
 80136cc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80136d0:	9505      	str	r5, [sp, #20]
 80136d2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80136d6:	f8ad 401c 	strh.w	r4, [sp, #28]
 80136da:	f8ad 601e 	strh.w	r6, [sp, #30]
 80136de:	f8cd 8010 	str.w	r8, [sp, #16]
 80136e2:	f8ad 4020 	strh.w	r4, [sp, #32]
 80136e6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 80136ea:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 80136ee:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 80136f2:	6803      	ldr	r3, [r0, #0]
 80136f4:	685b      	ldr	r3, [r3, #4]
 80136f6:	4798      	blx	r3
 80136f8:	b00b      	add	sp, #44	; 0x2c
 80136fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08013700 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8013700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013704:	b08a      	sub	sp, #40	; 0x28
 8013706:	4698      	mov	r8, r3
 8013708:	2300      	movs	r3, #0
 801370a:	4606      	mov	r6, r0
 801370c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8013710:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8013714:	2d0b      	cmp	r5, #11
 8013716:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 801371a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 801371e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8013722:	9304      	str	r3, [sp, #16]
 8013724:	d137      	bne.n	8013796 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8013726:	2380      	movs	r3, #128	; 0x80
 8013728:	f88d 0020 	strb.w	r0, [sp, #32]
 801372c:	4630      	mov	r0, r6
 801372e:	9203      	str	r2, [sp, #12]
 8013730:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8013734:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8013738:	f8ad 3018 	strh.w	r3, [sp, #24]
 801373c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8013740:	f8ad 301a 	strh.w	r3, [sp, #26]
 8013744:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8013748:	f8ad 301c 	strh.w	r3, [sp, #28]
 801374c:	f7ff ff5c 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013750:	2c0b      	cmp	r4, #11
 8013752:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8013756:	f8ad 701e 	strh.w	r7, [sp, #30]
 801375a:	bf94      	ite	ls
 801375c:	4b19      	ldrls	r3, [pc, #100]	; (80137c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 801375e:	2100      	movhi	r1, #0
 8013760:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8013764:	bf98      	it	ls
 8013766:	5d19      	ldrbls	r1, [r3, r4]
 8013768:	fb02 8307 	mla	r3, r2, r7, r8
 801376c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8013770:	10c9      	asrs	r1, r1, #3
 8013772:	fb01 0003 	mla	r0, r1, r3, r0
 8013776:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801377a:	a901      	add	r1, sp, #4
 801377c:	9005      	str	r0, [sp, #20]
 801377e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013782:	2300      	movs	r3, #0
 8013784:	6870      	ldr	r0, [r6, #4]
 8013786:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801378a:	6803      	ldr	r3, [r0, #0]
 801378c:	685b      	ldr	r3, [r3, #4]
 801378e:	4798      	blx	r3
 8013790:	b00a      	add	sp, #40	; 0x28
 8013792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013796:	2d02      	cmp	r5, #2
 8013798:	d109      	bne.n	80137ae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801379a:	28ff      	cmp	r0, #255	; 0xff
 801379c:	d105      	bne.n	80137aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801379e:	f1bc 0f00 	cmp.w	ip, #0
 80137a2:	bf14      	ite	ne
 80137a4:	2340      	movne	r3, #64	; 0x40
 80137a6:	2320      	moveq	r3, #32
 80137a8:	e7be      	b.n	8013728 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137aa:	2340      	movs	r3, #64	; 0x40
 80137ac:	e7bc      	b.n	8013728 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137ae:	28ff      	cmp	r0, #255	; 0xff
 80137b0:	d105      	bne.n	80137be <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80137b2:	f1bc 0f00 	cmp.w	ip, #0
 80137b6:	bf14      	ite	ne
 80137b8:	2304      	movne	r3, #4
 80137ba:	2301      	moveq	r3, #1
 80137bc:	e7b4      	b.n	8013728 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137be:	2304      	movs	r3, #4
 80137c0:	e7b2      	b.n	8013728 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80137c2:	bf00      	nop
 80137c4:	08025cec 	.word	0x08025cec

080137c8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	b08b      	sub	sp, #44	; 0x2c
 80137ce:	461d      	mov	r5, r3
 80137d0:	2400      	movs	r4, #0
 80137d2:	4688      	mov	r8, r1
 80137d4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 80137d8:	4693      	mov	fp, r2
 80137da:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 80137de:	4607      	mov	r7, r0
 80137e0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80137e4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 80137e8:	9404      	str	r4, [sp, #16]
 80137ea:	bf14      	ite	ne
 80137ec:	2308      	movne	r3, #8
 80137ee:	2302      	moveq	r3, #2
 80137f0:	fb05 b50a 	mla	r5, r5, sl, fp
 80137f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80137f8:	f7ff ff06 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80137fc:	2e0b      	cmp	r6, #11
 80137fe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8013802:	a901      	add	r1, sp, #4
 8013804:	bf98      	it	ls
 8013806:	4b13      	ldrls	r3, [pc, #76]	; (8013854 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8013808:	f8ad a01e 	strh.w	sl, [sp, #30]
 801380c:	bf98      	it	ls
 801380e:	5d9c      	ldrbls	r4, [r3, r6]
 8013810:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8013814:	10e4      	asrs	r4, r4, #3
 8013816:	f8cd 8010 	str.w	r8, [sp, #16]
 801381a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801381e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8013822:	fb04 0405 	mla	r4, r4, r5, r0
 8013826:	6878      	ldr	r0, [r7, #4]
 8013828:	f8ad 301a 	strh.w	r3, [sp, #26]
 801382c:	2300      	movs	r3, #0
 801382e:	9405      	str	r4, [sp, #20]
 8013830:	f8ad 301c 	strh.w	r3, [sp, #28]
 8013834:	f88d 9020 	strb.w	r9, [sp, #32]
 8013838:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801383c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8013840:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8013844:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8013848:	6803      	ldr	r3, [r0, #0]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	4798      	blx	r3
 801384e:	b00b      	add	sp, #44	; 0x2c
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	08025cec 	.word	0x08025cec

08013858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8013858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385c:	461e      	mov	r6, r3
 801385e:	4b0a      	ldr	r3, [pc, #40]	; (8013888 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8013860:	460f      	mov	r7, r1
 8013862:	4690      	mov	r8, r2
 8013864:	881d      	ldrh	r5, [r3, #0]
 8013866:	f7f0 fac5 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 801386a:	6803      	ldr	r3, [r0, #0]
 801386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801386e:	4798      	blx	r3
 8013870:	280b      	cmp	r0, #11
 8013872:	bf96      	itet	ls
 8013874:	4b05      	ldrls	r3, [pc, #20]	; (801388c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8013876:	2400      	movhi	r4, #0
 8013878:	5c1c      	ldrbls	r4, [r3, r0]
 801387a:	fb08 7005 	mla	r0, r8, r5, r7
 801387e:	10e4      	asrs	r4, r4, #3
 8013880:	fb04 6000 	mla	r0, r4, r0, r6
 8013884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013888:	2400af2e 	.word	0x2400af2e
 801388c:	08025cec 	.word	0x08025cec

08013890 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8013890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013892:	b08b      	sub	sp, #44	; 0x2c
 8013894:	461f      	mov	r7, r3
 8013896:	4604      	mov	r4, r0
 8013898:	4616      	mov	r6, r2
 801389a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801389e:	2500      	movs	r5, #0
 80138a0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80138a4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80138a8:	9504      	str	r5, [sp, #16]
 80138aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80138ae:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80138b2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80138b6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80138ba:	f8ad 301c 	strh.w	r3, [sp, #28]
 80138be:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80138c2:	f88d 3020 	strb.w	r3, [sp, #32]
 80138c6:	f7ff fe9f 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80138ca:	463a      	mov	r2, r7
 80138cc:	4631      	mov	r1, r6
 80138ce:	4603      	mov	r3, r0
 80138d0:	4620      	mov	r0, r4
 80138d2:	f7ff ffc1 	bl	8013858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80138d6:	4b0e      	ldr	r3, [pc, #56]	; (8013910 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80138d8:	9005      	str	r0, [sp, #20]
 80138da:	881b      	ldrh	r3, [r3, #0]
 80138dc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80138e0:	f7f0 fa88 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 80138e4:	6803      	ldr	r3, [r0, #0]
 80138e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138e8:	4798      	blx	r3
 80138ea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80138ec:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80138f0:	a901      	add	r1, sp, #4
 80138f2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80138f6:	9304      	str	r3, [sp, #16]
 80138f8:	6860      	ldr	r0, [r4, #4]
 80138fa:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80138fe:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8013902:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8013906:	6803      	ldr	r3, [r0, #0]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	4798      	blx	r3
 801390c:	b00b      	add	sp, #44	; 0x2c
 801390e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013910:	2400af2e 	.word	0x2400af2e

08013914 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8013914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013916:	b08d      	sub	sp, #52	; 0x34
 8013918:	2501      	movs	r5, #1
 801391a:	4604      	mov	r4, r0
 801391c:	466b      	mov	r3, sp
 801391e:	9503      	str	r5, [sp, #12]
 8013920:	e883 0006 	stmia.w	r3, {r1, r2}
 8013924:	2300      	movs	r3, #0
 8013926:	f8bd 6000 	ldrh.w	r6, [sp]
 801392a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801392e:	9306      	str	r3, [sp, #24]
 8013930:	6803      	ldr	r3, [r0, #0]
 8013932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013934:	4798      	blx	r3
 8013936:	463a      	mov	r2, r7
 8013938:	4631      	mov	r1, r6
 801393a:	4603      	mov	r3, r0
 801393c:	4620      	mov	r0, r4
 801393e:	f7ff ff8b 	bl	8013858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013942:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8013944:	9004      	str	r0, [sp, #16]
 8013946:	9307      	str	r3, [sp, #28]
 8013948:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801394c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013950:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013954:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8013958:	4b0e      	ldr	r3, [pc, #56]	; (8013994 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801395a:	881b      	ldrh	r3, [r3, #0]
 801395c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8013960:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8013964:	f7f0 fa46 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 8013968:	6803      	ldr	r3, [r0, #0]
 801396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801396c:	4798      	blx	r3
 801396e:	23ff      	movs	r3, #255	; 0xff
 8013970:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8013974:	a903      	add	r1, sp, #12
 8013976:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801397a:	6860      	ldr	r0, [r4, #4]
 801397c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013980:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013984:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013988:	6803      	ldr	r3, [r0, #0]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	4798      	blx	r3
 801398e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8013990:	b00d      	add	sp, #52	; 0x34
 8013992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013994:	2400af2e 	.word	0x2400af2e

08013998 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8013998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801399c:	b08c      	sub	sp, #48	; 0x30
 801399e:	461e      	mov	r6, r3
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	466d      	mov	r5, sp
 80139a6:	9306      	str	r3, [sp, #24]
 80139a8:	6803      	ldr	r3, [r0, #0]
 80139aa:	e885 0006 	stmia.w	r5, {r1, r2}
 80139ae:	2501      	movs	r5, #1
 80139b0:	f8bd 7000 	ldrh.w	r7, [sp]
 80139b4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80139b8:	9503      	str	r5, [sp, #12]
 80139ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139bc:	4798      	blx	r3
 80139be:	4642      	mov	r2, r8
 80139c0:	4639      	mov	r1, r7
 80139c2:	4603      	mov	r3, r0
 80139c4:	4620      	mov	r0, r4
 80139c6:	f7ff ff47 	bl	8013858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80139ca:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80139ce:	9004      	str	r0, [sp, #16]
 80139d0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80139d4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80139d8:	9607      	str	r6, [sp, #28]
 80139da:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80139e0:	881b      	ldrh	r3, [r3, #0]
 80139e2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80139e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80139e8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80139ec:	f7f0 fa02 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 80139f0:	6803      	ldr	r3, [r0, #0]
 80139f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80139f4:	4798      	blx	r3
 80139f6:	23ff      	movs	r3, #255	; 0xff
 80139f8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80139fc:	a903      	add	r1, sp, #12
 80139fe:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8013a02:	6860      	ldr	r0, [r4, #4]
 8013a04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8013a08:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8013a0c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8013a10:	6803      	ldr	r3, [r0, #0]
 8013a12:	685b      	ldr	r3, [r3, #4]
 8013a14:	4798      	blx	r3
 8013a16:	4630      	mov	r0, r6
 8013a18:	b00c      	add	sp, #48	; 0x30
 8013a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1e:	bf00      	nop
 8013a20:	2400af2e 	.word	0x2400af2e

08013a24 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8013a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a26:	b085      	sub	sp, #20
 8013a28:	4605      	mov	r5, r0
 8013a2a:	ac02      	add	r4, sp, #8
 8013a2c:	e884 0006 	stmia.w	r4, {r1, r2}
 8013a30:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8013a34:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8013a38:	f7ff fde6 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a3c:	4631      	mov	r1, r6
 8013a3e:	4603      	mov	r3, r0
 8013a40:	463a      	mov	r2, r7
 8013a42:	4628      	mov	r0, r5
 8013a44:	f7ff ff08 	bl	8013858 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8013a48:	4a05      	ldr	r2, [pc, #20]	; (8013a60 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8013a4a:	682b      	ldr	r3, [r5, #0]
 8013a4c:	8812      	ldrh	r2, [r2, #0]
 8013a4e:	9200      	str	r2, [sp, #0]
 8013a50:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8013a52:	4603      	mov	r3, r0
 8013a54:	4628      	mov	r0, r5
 8013a56:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013a5a:	47b0      	blx	r6
 8013a5c:	b005      	add	sp, #20
 8013a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a60:	2400af2e 	.word	0x2400af2e

08013a64 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8013a64:	b570      	push	{r4, r5, r6, lr}
 8013a66:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b19b      	cbz	r3, 8013a96 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8013a6e:	2002      	movs	r0, #2
 8013a70:	f7ed ff6e 	bl	8001950 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8013a74:	2300      	movs	r3, #0
 8013a76:	4620      	mov	r0, r4
 8013a78:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8013a7c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8013a80:	6823      	ldr	r3, [r4, #0]
 8013a82:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8013a86:	f7ff fdbf 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013a8a:	4601      	mov	r1, r0
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	462b      	mov	r3, r5
 8013a90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a94:	4718      	bx	r3
 8013a96:	bd70      	pop	{r4, r5, r6, pc}

08013a98 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8013a98:	b538      	push	{r3, r4, r5, lr}
 8013a9a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8013a9e:	4604      	mov	r4, r0
 8013aa0:	460d      	mov	r5, r1
 8013aa2:	428b      	cmp	r3, r1
 8013aa4:	d006      	beq.n	8013ab4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8013aa6:	6803      	ldr	r3, [r0, #0]
 8013aa8:	b929      	cbnz	r1, 8013ab6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8013aaa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013aae:	4798      	blx	r3
 8013ab0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8013ab4:	bd38      	pop	{r3, r4, r5, pc}
 8013ab6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013aba:	e7f8      	b.n	8013aae <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08013abc <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8013abc:	4b0d      	ldr	r3, [pc, #52]	; (8013af4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8013abe:	b510      	push	{r4, lr}
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	b95b      	cbnz	r3, 8013ade <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013ac6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d007      	beq.n	8013ade <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013ace:	6840      	ldr	r0, [r0, #4]
 8013ad0:	f000 f90e 	bl	8013cf0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8013ad4:	b118      	cbz	r0, 8013ade <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8013ad6:	6862      	ldr	r2, [r4, #4]
 8013ad8:	7a53      	ldrb	r3, [r2, #9]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d0fc      	beq.n	8013ad8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8013ade:	f7ee fa1d 	bl	8001f1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013ae2:	4620      	mov	r0, r4
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	f7ff ffd7 	bl	8013a98 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013aea:	4620      	mov	r0, r4
 8013aec:	f7ff fd8c 	bl	8013608 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8013af0:	bd10      	pop	{r4, pc}
 8013af2:	bf00      	nop
 8013af4:	2400af32 	.word	0x2400af32

08013af8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8013af8:	4770      	bx	lr

08013afa <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 8013afa:	2000      	movs	r0, #0
 8013afc:	4770      	bx	lr

08013afe <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8013afe:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8013b02:	1a13      	subs	r3, r2, r0
 8013b04:	4258      	negs	r0, r3
 8013b06:	4158      	adcs	r0, r3
 8013b08:	4770      	bx	lr

08013b0a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8013b0a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8013b0e:	1a9b      	subs	r3, r3, r2
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	bfdc      	itt	le
 8013b14:	6882      	ldrle	r2, [r0, #8]
 8013b16:	189b      	addle	r3, r3, r2
 8013b18:	2b01      	cmp	r3, #1
 8013b1a:	bfcc      	ite	gt
 8013b1c:	2000      	movgt	r0, #0
 8013b1e:	2001      	movle	r0, #1
 8013b20:	4770      	bx	lr

08013b22 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8013b22:	6902      	ldr	r2, [r0, #16]
 8013b24:	6843      	ldr	r3, [r0, #4]
 8013b26:	2024      	movs	r0, #36	; 0x24
 8013b28:	fb00 3002 	mla	r0, r0, r2, r3
 8013b2c:	4770      	bx	lr

08013b2e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8013b2e:	6803      	ldr	r3, [r0, #0]
 8013b30:	691b      	ldr	r3, [r3, #16]
 8013b32:	4718      	bx	r3

08013b34 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8013b34:	2301      	movs	r3, #1
 8013b36:	b570      	push	{r4, r5, r6, lr}
 8013b38:	7203      	strb	r3, [r0, #8]
 8013b3a:	4604      	mov	r4, r0
 8013b3c:	6840      	ldr	r0, [r0, #4]
 8013b3e:	6803      	ldr	r3, [r0, #0]
 8013b40:	699b      	ldr	r3, [r3, #24]
 8013b42:	4798      	blx	r3
 8013b44:	6803      	ldr	r3, [r0, #0]
 8013b46:	4605      	mov	r5, r0
 8013b48:	2b40      	cmp	r3, #64	; 0x40
 8013b4a:	d00c      	beq.n	8013b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b4c:	d810      	bhi.n	8013b70 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8013b4e:	2b04      	cmp	r3, #4
 8013b50:	d01d      	beq.n	8013b8e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8013b52:	d804      	bhi.n	8013b5e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8013b54:	2b01      	cmp	r3, #1
 8013b56:	d006      	beq.n	8013b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b58:	2b02      	cmp	r3, #2
 8013b5a:	d02c      	beq.n	8013bb6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8013b5c:	bd70      	pop	{r4, r5, r6, pc}
 8013b5e:	2b08      	cmp	r3, #8
 8013b60:	d01d      	beq.n	8013b9e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8013b62:	2b20      	cmp	r3, #32
 8013b64:	d1fa      	bne.n	8013b5c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8013b66:	6823      	ldr	r3, [r4, #0]
 8013b68:	4620      	mov	r0, r4
 8013b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b6c:	4798      	blx	r3
 8013b6e:	e013      	b.n	8013b98 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8013b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b74:	d0f7      	beq.n	8013b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b76:	d804      	bhi.n	8013b82 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8013b78:	2b80      	cmp	r3, #128	; 0x80
 8013b7a:	d0f4      	beq.n	8013b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b80:	e7f0      	b.n	8013b64 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8013b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013b86:	d0ee      	beq.n	8013b66 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8013b88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013b8c:	e7e5      	b.n	8013b5a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8013b8e:	6823      	ldr	r3, [r4, #0]
 8013b90:	7f01      	ldrb	r1, [r0, #28]
 8013b92:	4620      	mov	r0, r4
 8013b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b96:	4798      	blx	r3
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b9c:	e006      	b.n	8013bac <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8013b9e:	6823      	ldr	r3, [r4, #0]
 8013ba0:	7f01      	ldrb	r1, [r0, #28]
 8013ba2:	4620      	mov	r0, r4
 8013ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ba6:	4798      	blx	r3
 8013ba8:	6823      	ldr	r3, [r4, #0]
 8013baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013bac:	4629      	mov	r1, r5
 8013bae:	4620      	mov	r0, r4
 8013bb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013bb4:	4718      	bx	r3
 8013bb6:	6823      	ldr	r3, [r4, #0]
 8013bb8:	4620      	mov	r0, r4
 8013bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bbc:	4798      	blx	r3
 8013bbe:	e7f3      	b.n	8013ba8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08013bc0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8013bc0:	4770      	bx	lr

08013bc2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8013bc2:	4770      	bx	lr

08013bc4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8013bc4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8013bc8:	b510      	push	{r4, lr}
 8013bca:	1ad2      	subs	r2, r2, r3
 8013bcc:	2a00      	cmp	r2, #0
 8013bce:	bfdc      	itt	le
 8013bd0:	6884      	ldrle	r4, [r0, #8]
 8013bd2:	1912      	addle	r2, r2, r4
 8013bd4:	2a01      	cmp	r2, #1
 8013bd6:	dd16      	ble.n	8013c06 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8013bd8:	6842      	ldr	r2, [r0, #4]
 8013bda:	2424      	movs	r4, #36	; 0x24
 8013bdc:	fb04 2303 	mla	r3, r4, r3, r2
 8013be0:	f101 0220 	add.w	r2, r1, #32
 8013be4:	f851 4b04 	ldr.w	r4, [r1], #4
 8013be8:	4291      	cmp	r1, r2
 8013bea:	f843 4b04 	str.w	r4, [r3], #4
 8013bee:	d1f9      	bne.n	8013be4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8013bf0:	780a      	ldrb	r2, [r1, #0]
 8013bf2:	701a      	strb	r2, [r3, #0]
 8013bf4:	68c3      	ldr	r3, [r0, #12]
 8013bf6:	6882      	ldr	r2, [r0, #8]
 8013bf8:	f3bf 8f5b 	dmb	ish
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	429a      	cmp	r2, r3
 8013c00:	bfd8      	it	le
 8013c02:	1a9b      	suble	r3, r3, r2
 8013c04:	60c3      	str	r3, [r0, #12]
 8013c06:	bd10      	pop	{r4, pc}

08013c08 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8013c08:	6903      	ldr	r3, [r0, #16]
 8013c0a:	6882      	ldr	r2, [r0, #8]
 8013c0c:	f3bf 8f5b 	dmb	ish
 8013c10:	3301      	adds	r3, #1
 8013c12:	429a      	cmp	r2, r3
 8013c14:	bfd8      	it	le
 8013c16:	1a9b      	suble	r3, r3, r2
 8013c18:	6103      	str	r3, [r0, #16]
 8013c1a:	4770      	bx	lr

08013c1c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8013c1c:	b570      	push	{r4, r5, r6, lr}
 8013c1e:	4604      	mov	r4, r0
 8013c20:	460e      	mov	r6, r1
 8013c22:	6860      	ldr	r0, [r4, #4]
 8013c24:	6803      	ldr	r3, [r0, #0]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	4798      	blx	r3
 8013c2a:	2800      	cmp	r0, #0
 8013c2c:	d1f9      	bne.n	8013c22 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8013c2e:	4d0d      	ldr	r5, [pc, #52]	; (8013c64 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8013c30:	6828      	ldr	r0, [r5, #0]
 8013c32:	6803      	ldr	r3, [r0, #0]
 8013c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c36:	4798      	blx	r3
 8013c38:	f7ee f98a 	bl	8001f50 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8013c3c:	6828      	ldr	r0, [r5, #0]
 8013c3e:	2101      	movs	r1, #1
 8013c40:	f7ff ff2a 	bl	8013a98 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8013c44:	6860      	ldr	r0, [r4, #4]
 8013c46:	4631      	mov	r1, r6
 8013c48:	6803      	ldr	r3, [r0, #0]
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	4798      	blx	r3
 8013c4e:	6823      	ldr	r3, [r4, #0]
 8013c50:	4620      	mov	r0, r4
 8013c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c54:	4798      	blx	r3
 8013c56:	6828      	ldr	r0, [r5, #0]
 8013c58:	6803      	ldr	r3, [r0, #0]
 8013c5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013c5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c60:	4718      	bx	r3
 8013c62:	bf00      	nop
 8013c64:	2400af34 	.word	0x2400af34

08013c68 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8013c68:	b508      	push	{r3, lr}
 8013c6a:	f7ee f957 	bl	8001f1c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8013c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8013c72:	f7ee b961 	b.w	8001f38 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08013c76 <_ZN8touchgfx13DMA_Interface5startEv>:
 8013c76:	b510      	push	{r4, lr}
 8013c78:	4604      	mov	r4, r0
 8013c7a:	6840      	ldr	r0, [r0, #4]
 8013c7c:	6803      	ldr	r3, [r0, #0]
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	4798      	blx	r3
 8013c82:	b948      	cbnz	r0, 8013c98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c84:	7a63      	ldrb	r3, [r4, #9]
 8013c86:	b13b      	cbz	r3, 8013c98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c88:	7a23      	ldrb	r3, [r4, #8]
 8013c8a:	b92b      	cbnz	r3, 8013c98 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8013c8c:	6823      	ldr	r3, [r4, #0]
 8013c8e:	4620      	mov	r0, r4
 8013c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c96:	4718      	bx	r3
 8013c98:	bd10      	pop	{r4, pc}

08013c9a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8013c9a:	b570      	push	{r4, r5, r6, lr}
 8013c9c:	4604      	mov	r4, r0
 8013c9e:	6840      	ldr	r0, [r0, #4]
 8013ca0:	6803      	ldr	r3, [r0, #0]
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	4798      	blx	r3
 8013ca6:	4605      	mov	r5, r0
 8013ca8:	b930      	cbnz	r0, 8013cb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013caa:	7a23      	ldrb	r3, [r4, #8]
 8013cac:	b123      	cbz	r3, 8013cb8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8013cae:	6860      	ldr	r0, [r4, #4]
 8013cb0:	6803      	ldr	r3, [r0, #0]
 8013cb2:	695b      	ldr	r3, [r3, #20]
 8013cb4:	4798      	blx	r3
 8013cb6:	7225      	strb	r5, [r4, #8]
 8013cb8:	6860      	ldr	r0, [r4, #4]
 8013cba:	6803      	ldr	r3, [r0, #0]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	4798      	blx	r3
 8013cc0:	b928      	cbnz	r0, 8013cce <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8013cc2:	6823      	ldr	r3, [r4, #0]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ccc:	4718      	bx	r3
 8013cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cd2:	f7ee b949 	b.w	8001f68 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08013cd8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8013cd8:	b510      	push	{r4, lr}
 8013cda:	6082      	str	r2, [r0, #8]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	4c03      	ldr	r4, [pc, #12]	; (8013cec <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8013ce0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8013ce4:	e9c0 4100 	strd	r4, r1, [r0]
 8013ce8:	bd10      	pop	{r4, pc}
 8013cea:	bf00      	nop
 8013cec:	08025e28 	.word	0x08025e28

08013cf0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8013cf0:	6840      	ldr	r0, [r0, #4]
 8013cf2:	6803      	ldr	r3, [r0, #0]
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	4718      	bx	r3

08013cf8 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013cf8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8013cfc:	4770      	bx	lr

08013cfe <_ZN8touchgfx14AbstractButton13executeActionEv>:
 8013cfe:	b510      	push	{r4, lr}
 8013d00:	4604      	mov	r4, r0
 8013d02:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8013d04:	b150      	cbz	r0, 8013d1c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013d06:	6803      	ldr	r3, [r0, #0]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	4798      	blx	r3
 8013d0c:	b130      	cbz	r0, 8013d1c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013d0e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8013d10:	4621      	mov	r1, r4
 8013d12:	6803      	ldr	r3, [r0, #0]
 8013d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d18:	689b      	ldr	r3, [r3, #8]
 8013d1a:	4718      	bx	r3
 8013d1c:	bd10      	pop	{r4, pc}

08013d1e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8013d1e:	790b      	ldrb	r3, [r1, #4]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	bf0c      	ite	eq
 8013d24:	2301      	moveq	r3, #1
 8013d26:	2300      	movne	r3, #0
 8013d28:	b570      	push	{r4, r5, r6, lr}
 8013d2a:	4604      	mov	r4, r0
 8013d2c:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8013d30:	460e      	mov	r6, r1
 8013d32:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 8013d36:	d109      	bne.n	8013d4c <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8013d38:	b14d      	cbz	r5, 8013d4e <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8013d3a:	7933      	ldrb	r3, [r6, #4]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	d10c      	bne.n	8013d5a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013d40:	6823      	ldr	r3, [r4, #0]
 8013d42:	4620      	mov	r0, r4
 8013d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013d46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d4a:	4718      	bx	r3
 8013d4c:	b12d      	cbz	r5, 8013d5a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8013d4e:	6823      	ldr	r3, [r4, #0]
 8013d50:	4620      	mov	r0, r4
 8013d52:	695b      	ldr	r3, [r3, #20]
 8013d54:	4798      	blx	r3
 8013d56:	2d00      	cmp	r5, #0
 8013d58:	d1ef      	bne.n	8013d3a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8013d5a:	bd70      	pop	{r4, r5, r6, pc}

08013d5c <_ZNK8touchgfx3Box12getSolidRectEv>:
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	8083      	strh	r3, [r0, #4]
 8013d60:	80c3      	strh	r3, [r0, #6]
 8013d62:	8003      	strh	r3, [r0, #0]
 8013d64:	8043      	strh	r3, [r0, #2]
 8013d66:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 8013d6a:	2bff      	cmp	r3, #255	; 0xff
 8013d6c:	bf01      	itttt	eq
 8013d6e:	890b      	ldrheq	r3, [r1, #8]
 8013d70:	8083      	strheq	r3, [r0, #4]
 8013d72:	894b      	ldrheq	r3, [r1, #10]
 8013d74:	80c3      	strheq	r3, [r0, #6]
 8013d76:	4770      	bx	lr

08013d78 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8013d78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	466b      	mov	r3, sp
 8013d7e:	6808      	ldr	r0, [r1, #0]
 8013d80:	6849      	ldr	r1, [r1, #4]
 8013d82:	c303      	stmia	r3!, {r0, r1}
 8013d84:	6823      	ldr	r3, [r4, #0]
 8013d86:	4669      	mov	r1, sp
 8013d88:	4620      	mov	r0, r4
 8013d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d8c:	4798      	blx	r3
 8013d8e:	4b08      	ldr	r3, [pc, #32]	; (8013db0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013d96:	b10a      	cbz	r2, 8013d9c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8013d98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013d9a:	b900      	cbnz	r0, 8013d9e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8013d9c:	6898      	ldr	r0, [r3, #8]
 8013d9e:	6803      	ldr	r3, [r0, #0]
 8013da0:	4669      	mov	r1, sp
 8013da2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8013da4:	6a1d      	ldr	r5, [r3, #32]
 8013da6:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8013daa:	47a8      	blx	r5
 8013dac:	b003      	add	sp, #12
 8013dae:	bd30      	pop	{r4, r5, pc}
 8013db0:	2400af34 	.word	0x2400af34

08013db4 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8013db4:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8013db8:	b12a      	cbz	r2, 8013dc6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013dba:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013dbe:	b112      	cbz	r2, 8013dc6 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013dc0:	6803      	ldr	r3, [r0, #0]
 8013dc2:	695b      	ldr	r3, [r3, #20]
 8013dc4:	4718      	bx	r3
 8013dc6:	4770      	bx	lr

08013dc8 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013dc8:	b570      	push	{r4, r5, r6, lr}
 8013dca:	880b      	ldrh	r3, [r1, #0]
 8013dcc:	4605      	mov	r5, r0
 8013dce:	4604      	mov	r4, r0
 8013dd0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8013dd2:	8813      	ldrh	r3, [r2, #0]
 8013dd4:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013dd8:	4628      	mov	r0, r5
 8013dda:	f003 fcd1 	bl	8017780 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013dde:	4606      	mov	r6, r0
 8013de0:	4628      	mov	r0, r5
 8013de2:	f003 fd01 	bl	80177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013de6:	6823      	ldr	r3, [r4, #0]
 8013de8:	4605      	mov	r5, r0
 8013dea:	4631      	mov	r1, r6
 8013dec:	4620      	mov	r0, r4
 8013dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013df0:	4798      	blx	r3
 8013df2:	6823      	ldr	r3, [r4, #0]
 8013df4:	4629      	mov	r1, r5
 8013df6:	4620      	mov	r0, r4
 8013df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013dfe:	4718      	bx	r3

08013e00 <_ZNK8touchgfx6Button12getSolidRectEv>:
 8013e00:	b510      	push	{r4, lr}
 8013e02:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8013e06:	4604      	mov	r4, r0
 8013e08:	2bff      	cmp	r3, #255	; 0xff
 8013e0a:	d006      	beq.n	8013e1a <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	8003      	strh	r3, [r0, #0]
 8013e10:	8043      	strh	r3, [r0, #2]
 8013e12:	8083      	strh	r3, [r0, #4]
 8013e14:	80c3      	strh	r3, [r0, #6]
 8013e16:	4620      	mov	r0, r4
 8013e18:	bd10      	pop	{r4, pc}
 8013e1a:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 8013e1e:	b11b      	cbz	r3, 8013e28 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 8013e20:	3130      	adds	r1, #48	; 0x30
 8013e22:	f003 fd15 	bl	8017850 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013e26:	e7f6      	b.n	8013e16 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 8013e28:	312e      	adds	r1, #46	; 0x2e
 8013e2a:	e7fa      	b.n	8013e22 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

08013e2c <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 8013e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e30:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8013e34:	b08a      	sub	sp, #40	; 0x28
 8013e36:	4604      	mov	r4, r0
 8013e38:	4688      	mov	r8, r1
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d066      	beq.n	8013f0c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 8013e3e:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8013e40:	a805      	add	r0, sp, #20
 8013e42:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013e46:	f003 fc9b 	bl	8017780 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8013e4a:	4607      	mov	r7, r0
 8013e4c:	a805      	add	r0, sp, #20
 8013e4e:	f003 fccb 	bl	80177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013e52:	f9b8 6000 	ldrsh.w	r6, [r8]
 8013e56:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 8013e5a:	2300      	movs	r3, #0
 8013e5c:	4432      	add	r2, r6
 8013e5e:	9306      	str	r3, [sp, #24]
 8013e60:	b292      	uxth	r2, r2
 8013e62:	fa0f fc82 	sxth.w	ip, r2
 8013e66:	459c      	cmp	ip, r3
 8013e68:	dd52      	ble.n	8013f10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e6a:	42b7      	cmp	r7, r6
 8013e6c:	dd50      	ble.n	8013f10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e6e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013e72:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013e76:	442b      	add	r3, r5
 8013e78:	b29b      	uxth	r3, r3
 8013e7a:	b219      	sxth	r1, r3
 8013e7c:	2900      	cmp	r1, #0
 8013e7e:	dd47      	ble.n	8013f10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e80:	42a8      	cmp	r0, r5
 8013e82:	dd45      	ble.n	8013f10 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013e84:	4567      	cmp	r7, ip
 8013e86:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8013e8a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8013e8e:	bfb8      	it	lt
 8013e90:	b2ba      	uxthlt	r2, r7
 8013e92:	4288      	cmp	r0, r1
 8013e94:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013e98:	bfb8      	it	lt
 8013e9a:	b283      	uxthlt	r3, r0
 8013e9c:	1b92      	subs	r2, r2, r6
 8013e9e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013ea2:	1b5b      	subs	r3, r3, r5
 8013ea4:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013ea8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8013eac:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013eb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d026      	beq.n	8013f06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013eb8:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	dd22      	ble.n	8013f06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013ec0:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	dd1e      	ble.n	8013f06 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013ec8:	2300      	movs	r3, #0
 8013eca:	a908      	add	r1, sp, #32
 8013ecc:	4620      	mov	r0, r4
 8013ece:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013ed2:	6823      	ldr	r3, [r4, #0]
 8013ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ed6:	4798      	blx	r3
 8013ed8:	4b0f      	ldr	r3, [pc, #60]	; (8013f18 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8013ee0:	b10a      	cbz	r2, 8013ee6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013ee2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8013ee4:	b900      	cbnz	r0, 8013ee8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013ee6:	6898      	ldr	r0, [r3, #8]
 8013ee8:	2501      	movs	r5, #1
 8013eea:	6801      	ldr	r1, [r0, #0]
 8013eec:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8013ef0:	9502      	str	r5, [sp, #8]
 8013ef2:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8013ef6:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8013efa:	9401      	str	r4, [sp, #4]
 8013efc:	ac06      	add	r4, sp, #24
 8013efe:	9400      	str	r4, [sp, #0]
 8013f00:	688c      	ldr	r4, [r1, #8]
 8013f02:	a905      	add	r1, sp, #20
 8013f04:	47a0      	blx	r4
 8013f06:	b00a      	add	sp, #40	; 0x28
 8013f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f0c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8013f0e:	e797      	b.n	8013e40 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 8013f10:	2300      	movs	r3, #0
 8013f12:	9307      	str	r3, [sp, #28]
 8013f14:	e7ca      	b.n	8013eac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 8013f16:	bf00      	nop
 8013f18:	2400af34 	.word	0x2400af34

08013f1c <_ZNK8touchgfx6Button17invalidateContentEv>:
 8013f1c:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 8013f20:	b12a      	cbz	r2, 8013f2e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f22:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8013f26:	b112      	cbz	r2, 8013f2e <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 8013f28:	6803      	ldr	r3, [r0, #0]
 8013f2a:	695b      	ldr	r3, [r3, #20]
 8013f2c:	4718      	bx	r3
 8013f2e:	4770      	bx	lr

08013f30 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8013f30:	b510      	push	{r4, lr}
 8013f32:	6803      	ldr	r3, [r0, #0]
 8013f34:	460c      	mov	r4, r1
 8013f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f38:	4798      	blx	r3
 8013f3a:	1b03      	subs	r3, r0, r4
 8013f3c:	4258      	negs	r0, r3
 8013f3e:	4158      	adcs	r0, r3
 8013f40:	bd10      	pop	{r4, pc}
	...

08013f44 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8013f44:	4b01      	ldr	r3, [pc, #4]	; (8013f4c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8013f46:	6019      	str	r1, [r3, #0]
 8013f48:	4770      	bx	lr
 8013f4a:	bf00      	nop
 8013f4c:	2400af3c 	.word	0x2400af3c

08013f50 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8013f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f54:	4696      	mov	lr, r2
 8013f56:	b097      	sub	sp, #92	; 0x5c
 8013f58:	4605      	mov	r5, r0
 8013f5a:	4614      	mov	r4, r2
 8013f5c:	460e      	mov	r6, r1
 8013f5e:	461f      	mov	r7, r3
 8013f60:	f10d 0c1c 	add.w	ip, sp, #28
 8013f64:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 8013f68:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8013f6c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8013f70:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f78:	f8de 3000 	ldr.w	r3, [lr]
 8013f7c:	f104 0e14 	add.w	lr, r4, #20
 8013f80:	f8cc 3000 	str.w	r3, [ip]
 8013f84:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013f88:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013f8c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013f90:	f8de 3000 	ldr.w	r3, [lr]
 8013f94:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013f98:	f8cc 3000 	str.w	r3, [ip]
 8013f9c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8013fa0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fa4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fa8:	f8de 3000 	ldr.w	r3, [lr]
 8013fac:	4631      	mov	r1, r6
 8013fae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f8cc 3000 	str.w	r3, [ip]
 8013fb6:	682b      	ldr	r3, [r5, #0]
 8013fb8:	9201      	str	r2, [sp, #4]
 8013fba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013fbc:	f8cd 8008 	str.w	r8, [sp, #8]
 8013fc0:	9200      	str	r2, [sp, #0]
 8013fc2:	aa07      	add	r2, sp, #28
 8013fc4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8013fc8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8013fcc:	463b      	mov	r3, r7
 8013fce:	47d8      	blx	fp
 8013fd0:	46a6      	mov	lr, r4
 8013fd2:	f10d 0c1c 	add.w	ip, sp, #28
 8013fd6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013fda:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013fde:	f8de 3000 	ldr.w	r3, [lr]
 8013fe2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8013fe6:	343c      	adds	r4, #60	; 0x3c
 8013fe8:	f8cc 3000 	str.w	r3, [ip]
 8013fec:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013ff0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8013ff4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013ff8:	f8de 3000 	ldr.w	r3, [lr]
 8013ffc:	f8cc 3000 	str.w	r3, [ip]
 8014000:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8014004:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014006:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801400a:	6823      	ldr	r3, [r4, #0]
 801400c:	4631      	mov	r1, r6
 801400e:	4628      	mov	r0, r5
 8014010:	f8cc 3000 	str.w	r3, [ip]
 8014014:	682b      	ldr	r3, [r5, #0]
 8014016:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801401a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801401c:	f8cd 8008 	str.w	r8, [sp, #8]
 8014020:	9201      	str	r2, [sp, #4]
 8014022:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014024:	9200      	str	r2, [sp, #0]
 8014026:	aa07      	add	r2, sp, #28
 8014028:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801402a:	463b      	mov	r3, r7
 801402c:	47a0      	blx	r4
 801402e:	b017      	add	sp, #92	; 0x5c
 8014030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014034 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8014034:	2000      	movs	r0, #0
 8014036:	4770      	bx	lr

08014038 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8014038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801403c:	b08d      	sub	sp, #52	; 0x34
 801403e:	4688      	mov	r8, r1
 8014040:	f8d3 c000 	ldr.w	ip, [r3]
 8014044:	9916      	ldr	r1, [sp, #88]	; 0x58
 8014046:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801404a:	680f      	ldr	r7, [r1, #0]
 801404c:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8014050:	eba7 070c 	sub.w	r7, r7, ip
 8014054:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 8014058:	edd3 6a07 	vldr	s13, [r3, #28]
 801405c:	42bc      	cmp	r4, r7
 801405e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8014060:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8014064:	bfa8      	it	ge
 8014066:	463c      	movge	r4, r7
 8014068:	f9b1 9000 	ldrsh.w	r9, [r1]
 801406c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8014070:	ee07 4a90 	vmov	s15, r4
 8014074:	eb09 0e0c 	add.w	lr, r9, ip
 8014078:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801407c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8014080:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8014084:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8014088:	4571      	cmp	r1, lr
 801408a:	ee25 4a04 	vmul.f32	s8, s10, s8
 801408e:	ee65 4a24 	vmul.f32	s9, s10, s9
 8014092:	ee25 5a27 	vmul.f32	s10, s10, s15
 8014096:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801409a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801409e:	ee32 1a05 	vadd.f32	s2, s4, s10
 80140a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80140a6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80140aa:	ee61 1a87 	vmul.f32	s3, s3, s14
 80140ae:	ee22 2a07 	vmul.f32	s4, s4, s14
 80140b2:	f340 808c 	ble.w	80141ce <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80140b6:	eba1 060e 	sub.w	r6, r1, lr
 80140ba:	fb96 f5f4 	sdiv	r5, r6, r4
 80140be:	ee07 5a10 	vmov	s14, r5
 80140c2:	2d00      	cmp	r5, #0
 80140c4:	fb04 6615 	mls	r6, r4, r5, r6
 80140c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80140cc:	eea7 0a04 	vfma.f32	s0, s14, s8
 80140d0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80140d4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80140d8:	dd12      	ble.n	8014100 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80140da:	ee70 6a44 	vsub.f32	s13, s0, s8
 80140de:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80140e2:	ee31 2a45 	vsub.f32	s4, s2, s10
 80140e6:	eef5 6a40 	vcmp.f32	s13, #0.0
 80140ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80140ee:	bf14      	ite	ne
 80140f0:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80140f4:	eeb0 7a67 	vmoveq.f32	s14, s15
 80140f8:	ee61 1a87 	vmul.f32	s3, s3, s14
 80140fc:	ee22 2a07 	vmul.f32	s4, s4, s14
 8014100:	fb05 f204 	mul.w	r2, r5, r4
 8014104:	1abf      	subs	r7, r7, r2
 8014106:	4494      	add	ip, r2
 8014108:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801410c:	4411      	add	r1, r2
 801410e:	eb09 020c 	add.w	r2, r9, ip
 8014112:	b209      	sxth	r1, r1
 8014114:	443a      	add	r2, r7
 8014116:	428a      	cmp	r2, r1
 8014118:	bfc4      	itt	gt
 801411a:	eba1 0209 	subgt.w	r2, r1, r9
 801411e:	eba2 070c 	subgt.w	r7, r2, ip
 8014122:	2f00      	cmp	r7, #0
 8014124:	dd50      	ble.n	80141c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8014126:	fb97 f1f4 	sdiv	r1, r7, r4
 801412a:	fb04 7211 	mls	r2, r4, r1, r7
 801412e:	b90a      	cbnz	r2, 8014134 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8014130:	3901      	subs	r1, #1
 8014132:	4622      	mov	r2, r4
 8014134:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8014138:	6840      	ldr	r0, [r0, #4]
 801413a:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 801413e:	44b6      	add	lr, r6
 8014140:	f8d0 a000 	ldr.w	sl, [r0]
 8014144:	2900      	cmp	r1, #0
 8014146:	bfcc      	ite	gt
 8014148:	46a1      	movgt	r9, r4
 801414a:	4691      	movle	r9, r2
 801414c:	900b      	str	r0, [sp, #44]	; 0x2c
 801414e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8014150:	fb04 e505 	mla	r5, r4, r5, lr
 8014154:	eef0 6a42 	vmov.f32	s13, s4
 8014158:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801415c:	9008      	str	r0, [sp, #32]
 801415e:	eeb0 7a61 	vmov.f32	s14, s3
 8014162:	9818      	ldr	r0, [sp, #96]	; 0x60
 8014164:	695b      	ldr	r3, [r3, #20]
 8014166:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801416a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801416e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8014172:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8014174:	445b      	add	r3, fp
 8014176:	9307      	str	r3, [sp, #28]
 8014178:	ee16 3a90 	vmov	r3, s13
 801417c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8014180:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8014184:	ee21 3a23 	vmul.f32	s6, s2, s7
 8014188:	ee72 7ae1 	vsub.f32	s15, s5, s3
 801418c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8014190:	ee17 7a90 	vmov	r7, s15
 8014194:	ee73 7a42 	vsub.f32	s15, s6, s4
 8014198:	fb97 f7f4 	sdiv	r7, r7, r4
 801419c:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80141a0:	ee17 ca90 	vmov	ip, s15
 80141a4:	fb9c fcf4 	sdiv	ip, ip, r4
 80141a8:	fb0c 3306 	mla	r3, ip, r6, r3
 80141ac:	9302      	str	r3, [sp, #8]
 80141ae:	ee17 3a10 	vmov	r3, s14
 80141b2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80141b6:	fb07 3706 	mla	r7, r7, r6, r3
 80141ba:	eba9 0306 	sub.w	r3, r9, r6
 80141be:	e9cd 4700 	strd	r4, r7, [sp]
 80141c2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80141c6:	47a0      	blx	r4
 80141c8:	b00d      	add	sp, #52	; 0x34
 80141ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ce:	2500      	movs	r5, #0
 80141d0:	462e      	mov	r6, r5
 80141d2:	e799      	b.n	8014108 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080141d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80141d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141d8:	b0db      	sub	sp, #364	; 0x16c
 80141da:	461d      	mov	r5, r3
 80141dc:	4614      	mov	r4, r2
 80141de:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80141e2:	910f      	str	r1, [sp, #60]	; 0x3c
 80141e4:	4629      	mov	r1, r5
 80141e6:	930a      	str	r3, [sp, #40]	; 0x28
 80141e8:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80141ec:	9009      	str	r0, [sp, #36]	; 0x24
 80141ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80141f0:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80141f4:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80141f8:	9310      	str	r3, [sp, #64]	; 0x40
 80141fa:	6803      	ldr	r3, [r0, #0]
 80141fc:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80141fe:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014202:	47b8      	blx	r7
 8014204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014206:	6058      	str	r0, [r3, #4]
 8014208:	2800      	cmp	r0, #0
 801420a:	f000 83a1 	beq.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801420e:	682b      	ldr	r3, [r5, #0]
 8014210:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8014214:	ed94 7a02 	vldr	s14, [r4, #8]
 8014218:	9314      	str	r3, [sp, #80]	; 0x50
 801421a:	686b      	ldr	r3, [r5, #4]
 801421c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014220:	9315      	str	r3, [sp, #84]	; 0x54
 8014222:	4bc1      	ldr	r3, [pc, #772]	; (8014528 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8014224:	7819      	ldrb	r1, [r3, #0]
 8014226:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801422a:	2900      	cmp	r1, #0
 801422c:	bf16      	itet	ne
 801422e:	4619      	movne	r1, r3
 8014230:	4611      	moveq	r1, r2
 8014232:	4613      	movne	r3, r2
 8014234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014238:	9116      	str	r1, [sp, #88]	; 0x58
 801423a:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 801423e:	f240 8387 	bls.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014242:	ed94 7a07 	vldr	s14, [r4, #28]
 8014246:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801424e:	f240 837f 	bls.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014252:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8014256:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801425e:	f240 8377 	bls.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014262:	6822      	ldr	r2, [r4, #0]
 8014264:	4bb1      	ldr	r3, [pc, #708]	; (801452c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8014266:	429a      	cmp	r2, r3
 8014268:	f2c0 8372 	blt.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801426c:	49b0      	ldr	r1, [pc, #704]	; (8014530 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801426e:	6963      	ldr	r3, [r4, #20]
 8014270:	428a      	cmp	r2, r1
 8014272:	f300 836d 	bgt.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014276:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801427a:	48ae      	ldr	r0, [pc, #696]	; (8014534 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801427c:	33ff      	adds	r3, #255	; 0xff
 801427e:	4283      	cmp	r3, r0
 8014280:	f200 8366 	bhi.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014286:	4dac      	ldr	r5, [pc, #688]	; (8014538 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8014288:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801428c:	33ff      	adds	r3, #255	; 0xff
 801428e:	42ab      	cmp	r3, r5
 8014290:	f200 835e 	bhi.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014294:	6862      	ldr	r2, [r4, #4]
 8014296:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801429a:	33ff      	adds	r3, #255	; 0xff
 801429c:	4283      	cmp	r3, r0
 801429e:	f200 8357 	bhi.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142a2:	69a1      	ldr	r1, [r4, #24]
 80142a4:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 80142a8:	33ff      	adds	r3, #255	; 0xff
 80142aa:	4283      	cmp	r3, r0
 80142ac:	f200 8350 	bhi.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80142b2:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 80142b6:	30ff      	adds	r0, #255	; 0xff
 80142b8:	42a8      	cmp	r0, r5
 80142ba:	f200 8349 	bhi.w	8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80142be:	428a      	cmp	r2, r1
 80142c0:	f280 8110 	bge.w	80144e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80142c4:	429a      	cmp	r2, r3
 80142c6:	f300 8119 	bgt.w	80144fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80142ca:	4299      	cmp	r1, r3
 80142cc:	f280 811d 	bge.w	801450a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80142d0:	2502      	movs	r5, #2
 80142d2:	2701      	movs	r7, #1
 80142d4:	46a9      	mov	r9, r5
 80142d6:	46b8      	mov	r8, r7
 80142d8:	f04f 0a00 	mov.w	sl, #0
 80142dc:	4621      	mov	r1, r4
 80142de:	a849      	add	r0, sp, #292	; 0x124
 80142e0:	f002 ff86 	bl	80171f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80142e4:	4622      	mov	r2, r4
 80142e6:	4653      	mov	r3, sl
 80142e8:	a949      	add	r1, sp, #292	; 0x124
 80142ea:	f8cd 9000 	str.w	r9, [sp]
 80142ee:	a819      	add	r0, sp, #100	; 0x64
 80142f0:	f003 f8ae 	bl	8017450 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80142f4:	4622      	mov	r2, r4
 80142f6:	4653      	mov	r3, sl
 80142f8:	a949      	add	r1, sp, #292	; 0x124
 80142fa:	f8cd 8000 	str.w	r8, [sp]
 80142fe:	a829      	add	r0, sp, #164	; 0xa4
 8014300:	f003 f8a6 	bl	8017450 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014304:	4643      	mov	r3, r8
 8014306:	4622      	mov	r2, r4
 8014308:	a949      	add	r1, sp, #292	; 0x124
 801430a:	f8cd 9000 	str.w	r9, [sp]
 801430e:	a839      	add	r0, sp, #228	; 0xe4
 8014310:	f003 f89e 	bl	8017450 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8014314:	42af      	cmp	r7, r5
 8014316:	af12      	add	r7, sp, #72	; 0x48
 8014318:	bfb7      	itett	lt
 801431a:	2300      	movlt	r3, #0
 801431c:	2301      	movge	r3, #1
 801431e:	ad29      	addlt	r5, sp, #164	; 0xa4
 8014320:	ac19      	addlt	r4, sp, #100	; 0x64
 8014322:	bfb1      	iteee	lt
 8014324:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014326:	ad19      	addge	r5, sp, #100	; 0x64
 8014328:	930e      	strge	r3, [sp, #56]	; 0x38
 801432a:	ac29      	addge	r4, sp, #164	; 0xa4
 801432c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801432e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014332:	e887 0003 	stmia.w	r7, {r0, r1}
 8014336:	b928      	cbnz	r0, 8014344 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8014338:	4b80      	ldr	r3, [pc, #512]	; (801453c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801433a:	6818      	ldr	r0, [r3, #0]
 801433c:	6803      	ldr	r3, [r0, #0]
 801433e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014340:	4798      	blx	r3
 8014342:	6038      	str	r0, [r7, #0]
 8014344:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014346:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801434a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801434e:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8014350:	930c      	str	r3, [sp, #48]	; 0x30
 8014352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014354:	6963      	ldr	r3, [r4, #20]
 8014356:	440b      	add	r3, r1
 8014358:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801435c:	4408      	add	r0, r1
 801435e:	b200      	sxth	r0, r0
 8014360:	4283      	cmp	r3, r0
 8014362:	900d      	str	r0, [sp, #52]	; 0x34
 8014364:	f280 80dd 	bge.w	8014522 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8014368:	428b      	cmp	r3, r1
 801436a:	da08      	bge.n	801437e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801436c:	2a00      	cmp	r2, #0
 801436e:	dd06      	ble.n	801437e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014370:	1acb      	subs	r3, r1, r3
 8014372:	429a      	cmp	r2, r3
 8014374:	f2c0 80e4 	blt.w	8014540 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8014378:	2b00      	cmp	r3, #0
 801437a:	f300 80e2 	bgt.w	8014542 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801437e:	6967      	ldr	r7, [r4, #20]
 8014380:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8014384:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014386:	443b      	add	r3, r7
 8014388:	461f      	mov	r7, r3
 801438a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801438c:	1bdf      	subs	r7, r3, r7
 801438e:	4297      	cmp	r7, r2
 8014390:	bfa8      	it	ge
 8014392:	4617      	movge	r7, r2
 8014394:	2f00      	cmp	r7, #0
 8014396:	f340 8166 	ble.w	8014666 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 801439a:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801439c:	6829      	ldr	r1, [r5, #0]
 801439e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80143a2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80143a6:	4411      	add	r1, r2
 80143a8:	6820      	ldr	r0, [r4, #0]
 80143aa:	4299      	cmp	r1, r3
 80143ac:	dd1a      	ble.n	80143e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80143ae:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80143b2:	4402      	add	r2, r0
 80143b4:	440b      	add	r3, r1
 80143b6:	b21b      	sxth	r3, r3
 80143b8:	429a      	cmp	r2, r3
 80143ba:	dc13      	bgt.n	80143e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80143bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80143be:	a912      	add	r1, sp, #72	; 0x48
 80143c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	9206      	str	r2, [sp, #24]
 80143c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80143ca:	9500      	str	r5, [sp, #0]
 80143cc:	9205      	str	r2, [sp, #20]
 80143ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80143d0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80143d4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 80143d6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80143da:	aa49      	add	r2, sp, #292	; 0x124
 80143dc:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 80143e0:	4623      	mov	r3, r4
 80143e2:	47c8      	blx	r9
 80143e4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 80143e8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80143ec:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80143f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80143f4:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 80143f8:	68a1      	ldr	r1, [r4, #8]
 80143fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80143fe:	ed94 6a08 	vldr	s12, [r4, #32]
 8014402:	edd4 6a07 	vldr	s13, [r4, #28]
 8014406:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 801440a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801440e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014412:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014416:	edc4 6a07 	vstr	s13, [r4, #28]
 801441a:	441a      	add	r2, r3
 801441c:	6963      	ldr	r3, [r4, #20]
 801441e:	3301      	adds	r3, #1
 8014420:	6022      	str	r2, [r4, #0]
 8014422:	6163      	str	r3, [r4, #20]
 8014424:	69a3      	ldr	r3, [r4, #24]
 8014426:	3b01      	subs	r3, #1
 8014428:	61a3      	str	r3, [r4, #24]
 801442a:	6923      	ldr	r3, [r4, #16]
 801442c:	440b      	add	r3, r1
 801442e:	68e1      	ldr	r1, [r4, #12]
 8014430:	428b      	cmp	r3, r1
 8014432:	6123      	str	r3, [r4, #16]
 8014434:	db15      	blt.n	8014462 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8014436:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 801443a:	3201      	adds	r2, #1
 801443c:	1a5b      	subs	r3, r3, r1
 801443e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014442:	6022      	str	r2, [r4, #0]
 8014444:	6123      	str	r3, [r4, #16]
 8014446:	edc4 6a07 	vstr	s13, [r4, #28]
 801444a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801444e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014452:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014456:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801445a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801445e:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014462:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014466:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 801446a:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801446e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014472:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8014476:	68a9      	ldr	r1, [r5, #8]
 8014478:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801447c:	ed95 6a08 	vldr	s12, [r5, #32]
 8014480:	edd5 6a07 	vldr	s13, [r5, #28]
 8014484:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014488:	ee76 6a86 	vadd.f32	s13, s13, s12
 801448c:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8014490:	e9d5 2300 	ldrd	r2, r3, [r5]
 8014494:	edc5 6a07 	vstr	s13, [r5, #28]
 8014498:	441a      	add	r2, r3
 801449a:	696b      	ldr	r3, [r5, #20]
 801449c:	3301      	adds	r3, #1
 801449e:	602a      	str	r2, [r5, #0]
 80144a0:	616b      	str	r3, [r5, #20]
 80144a2:	69ab      	ldr	r3, [r5, #24]
 80144a4:	3b01      	subs	r3, #1
 80144a6:	61ab      	str	r3, [r5, #24]
 80144a8:	692b      	ldr	r3, [r5, #16]
 80144aa:	440b      	add	r3, r1
 80144ac:	68e9      	ldr	r1, [r5, #12]
 80144ae:	428b      	cmp	r3, r1
 80144b0:	612b      	str	r3, [r5, #16]
 80144b2:	db15      	blt.n	80144e0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80144b4:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80144b8:	3201      	adds	r2, #1
 80144ba:	1a5b      	subs	r3, r3, r1
 80144bc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80144c0:	602a      	str	r2, [r5, #0]
 80144c2:	612b      	str	r3, [r5, #16]
 80144c4:	edc5 6a07 	vstr	s13, [r5, #28]
 80144c8:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80144cc:	ee36 7a87 	vadd.f32	s14, s13, s14
 80144d0:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80144d4:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 80144d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144dc:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80144e0:	3f01      	subs	r7, #1
 80144e2:	e757      	b.n	8014394 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80144e4:	4299      	cmp	r1, r3
 80144e6:	dc13      	bgt.n	8014510 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80144e8:	429a      	cmp	r2, r3
 80144ea:	da14      	bge.n	8014516 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80144ec:	2502      	movs	r5, #2
 80144ee:	2703      	movs	r7, #3
 80144f0:	f04f 0800 	mov.w	r8, #0
 80144f4:	46a9      	mov	r9, r5
 80144f6:	f04f 0a01 	mov.w	sl, #1
 80144fa:	e6ef      	b.n	80142dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80144fc:	2501      	movs	r5, #1
 80144fe:	2700      	movs	r7, #0
 8014500:	46a9      	mov	r9, r5
 8014502:	46b8      	mov	r8, r7
 8014504:	f04f 0a02 	mov.w	sl, #2
 8014508:	e6e8      	b.n	80142dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801450a:	2501      	movs	r5, #1
 801450c:	2702      	movs	r7, #2
 801450e:	e6e1      	b.n	80142d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8014510:	2500      	movs	r5, #0
 8014512:	2701      	movs	r7, #1
 8014514:	e7f4      	b.n	8014500 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8014516:	2702      	movs	r7, #2
 8014518:	2503      	movs	r5, #3
 801451a:	f04f 0900 	mov.w	r9, #0
 801451e:	46b8      	mov	r8, r7
 8014520:	e7e9      	b.n	80144f6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8014522:	4613      	mov	r3, r2
 8014524:	e728      	b.n	8014378 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8014526:	bf00      	nop
 8014528:	2400af2c 	.word	0x2400af2c
 801452c:	fffd8f01 	.word	0xfffd8f01
 8014530:	00027100 	.word	0x00027100
 8014534:	0004e1ff 	.word	0x0004e1ff
 8014538:	0004e1fe 	.word	0x0004e1fe
 801453c:	2400af34 	.word	0x2400af34
 8014540:	4613      	mov	r3, r2
 8014542:	992b      	ldr	r1, [sp, #172]	; 0xac
 8014544:	469e      	mov	lr, r3
 8014546:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8014548:	469c      	mov	ip, r3
 801454a:	9111      	str	r1, [sp, #68]	; 0x44
 801454c:	f04f 0900 	mov.w	r9, #0
 8014550:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8014554:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8014558:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 801455c:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8014560:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8014564:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014568:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 801456c:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8014570:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8014574:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8014578:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 801457c:	f1bc 0f00 	cmp.w	ip, #0
 8014580:	d147      	bne.n	8014612 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8014582:	eb03 0c07 	add.w	ip, r3, r7
 8014586:	1ad7      	subs	r7, r2, r3
 8014588:	f1b9 0f00 	cmp.w	r9, #0
 801458c:	d009      	beq.n	80145a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 801458e:	9029      	str	r0, [sp, #164]	; 0xa4
 8014590:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8014594:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8014598:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 801459c:	912d      	str	r1, [sp, #180]	; 0xb4
 801459e:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 80145a2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80145a4:	f04f 0800 	mov.w	r8, #0
 80145a8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 80145ac:	9111      	str	r1, [sp, #68]	; 0x44
 80145ae:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 80145b2:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 80145b6:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 80145ba:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 80145be:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 80145c2:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80145c6:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80145ca:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80145ce:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80145d2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80145d6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80145da:	f1be 0f00 	cmp.w	lr, #0
 80145de:	d031      	beq.n	8014644 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80145e0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80145e2:	4450      	add	r0, sl
 80145e4:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80145e8:	4431      	add	r1, r6
 80145ea:	ee37 7a04 	vadd.f32	s14, s14, s8
 80145ee:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80145f2:	4549      	cmp	r1, r9
 80145f4:	db08      	blt.n	8014608 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80145f6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80145fa:	3001      	adds	r0, #1
 80145fc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8014600:	eba1 0109 	sub.w	r1, r1, r9
 8014604:	ee37 7a06 	vadd.f32	s14, s14, s12
 8014608:	f10e 3eff 	add.w	lr, lr, #4294967295
 801460c:	f04f 0801 	mov.w	r8, #1
 8014610:	e7e3      	b.n	80145da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8014612:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8014614:	4450      	add	r0, sl
 8014616:	ee37 7a24 	vadd.f32	s14, s14, s9
 801461a:	4431      	add	r1, r6
 801461c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8014620:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014624:	4541      	cmp	r1, r8
 8014626:	db08      	blt.n	801463a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8014628:	ee76 6a85 	vadd.f32	s13, s13, s10
 801462c:	3001      	adds	r0, #1
 801462e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8014632:	eba1 0108 	sub.w	r1, r1, r8
 8014636:	ee77 7a86 	vadd.f32	s15, s15, s12
 801463a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801463e:	f04f 0901 	mov.w	r9, #1
 8014642:	e79b      	b.n	801457c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8014644:	449c      	add	ip, r3
 8014646:	1aff      	subs	r7, r7, r3
 8014648:	f1b8 0f00 	cmp.w	r8, #0
 801464c:	d009      	beq.n	8014662 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801464e:	9019      	str	r0, [sp, #100]	; 0x64
 8014650:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8014654:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014658:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 801465c:	911d      	str	r1, [sp, #116]	; 0x74
 801465e:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8014662:	1ad2      	subs	r2, r2, r3
 8014664:	e68b      	b.n	801437e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8014666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014668:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 801466a:	2b00      	cmp	r3, #0
 801466c:	f000 80d1 	beq.w	8014812 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8014670:	ad19      	add	r5, sp, #100	; 0x64
 8014672:	ac39      	add	r4, sp, #228	; 0xe4
 8014674:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8014676:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801467a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801467e:	930c      	str	r3, [sp, #48]	; 0x30
 8014680:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014682:	6963      	ldr	r3, [r4, #20]
 8014684:	440b      	add	r3, r1
 8014686:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801468a:	4408      	add	r0, r1
 801468c:	b200      	sxth	r0, r0
 801468e:	4283      	cmp	r3, r0
 8014690:	900d      	str	r0, [sp, #52]	; 0x34
 8014692:	f280 80c1 	bge.w	8014818 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8014696:	428b      	cmp	r3, r1
 8014698:	da08      	bge.n	80146ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801469a:	2a00      	cmp	r2, #0
 801469c:	dd06      	ble.n	80146ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801469e:	1acb      	subs	r3, r1, r3
 80146a0:	429a      	cmp	r2, r3
 80146a2:	f2c0 80bb 	blt.w	801481c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	f300 80b9 	bgt.w	801481e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80146ac:	6967      	ldr	r7, [r4, #20]
 80146ae:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80146b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80146b4:	443b      	add	r3, r7
 80146b6:	461f      	mov	r7, r3
 80146b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80146ba:	1bdf      	subs	r7, r3, r7
 80146bc:	4297      	cmp	r7, r2
 80146be:	bfa8      	it	ge
 80146c0:	4617      	movge	r7, r2
 80146c2:	2f00      	cmp	r7, #0
 80146c4:	f340 813c 	ble.w	8014940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80146c8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 80146ca:	6829      	ldr	r1, [r5, #0]
 80146cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146d0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80146d4:	4411      	add	r1, r2
 80146d6:	6820      	ldr	r0, [r4, #0]
 80146d8:	4299      	cmp	r1, r3
 80146da:	dd1a      	ble.n	8014712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80146dc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80146e0:	4402      	add	r2, r0
 80146e2:	440b      	add	r3, r1
 80146e4:	b21b      	sxth	r3, r3
 80146e6:	429a      	cmp	r2, r3
 80146e8:	dc13      	bgt.n	8014712 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80146ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80146ec:	a912      	add	r1, sp, #72	; 0x48
 80146ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	9206      	str	r2, [sp, #24]
 80146f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80146f8:	9500      	str	r5, [sp, #0]
 80146fa:	9205      	str	r2, [sp, #20]
 80146fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80146fe:	e9cd b203 	strd	fp, r2, [sp, #12]
 8014702:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8014704:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8014708:	aa49      	add	r2, sp, #292	; 0x124
 801470a:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 801470e:	4623      	mov	r3, r4
 8014710:	47c8      	blx	r9
 8014712:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8014716:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 801471a:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 801471e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014722:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8014726:	68a1      	ldr	r1, [r4, #8]
 8014728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801472c:	ed94 6a08 	vldr	s12, [r4, #32]
 8014730:	edd4 6a07 	vldr	s13, [r4, #28]
 8014734:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014738:	ee76 6a86 	vadd.f32	s13, s13, s12
 801473c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014740:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014744:	edc4 6a07 	vstr	s13, [r4, #28]
 8014748:	441a      	add	r2, r3
 801474a:	6963      	ldr	r3, [r4, #20]
 801474c:	3301      	adds	r3, #1
 801474e:	6022      	str	r2, [r4, #0]
 8014750:	6163      	str	r3, [r4, #20]
 8014752:	69a3      	ldr	r3, [r4, #24]
 8014754:	3b01      	subs	r3, #1
 8014756:	61a3      	str	r3, [r4, #24]
 8014758:	6923      	ldr	r3, [r4, #16]
 801475a:	440b      	add	r3, r1
 801475c:	68e1      	ldr	r1, [r4, #12]
 801475e:	428b      	cmp	r3, r1
 8014760:	6123      	str	r3, [r4, #16]
 8014762:	db15      	blt.n	8014790 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8014764:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8014768:	3201      	adds	r2, #1
 801476a:	1a5b      	subs	r3, r3, r1
 801476c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8014770:	6022      	str	r2, [r4, #0]
 8014772:	6123      	str	r3, [r4, #16]
 8014774:	edc4 6a07 	vstr	s13, [r4, #28]
 8014778:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 801477c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8014780:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8014784:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8014788:	ee77 7a27 	vadd.f32	s15, s14, s15
 801478c:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8014790:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8014794:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8014798:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 801479c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80147a0:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 80147a4:	68a9      	ldr	r1, [r5, #8]
 80147a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80147aa:	ed95 6a08 	vldr	s12, [r5, #32]
 80147ae:	edd5 6a07 	vldr	s13, [r5, #28]
 80147b2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 80147b6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80147ba:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 80147be:	e9d5 2300 	ldrd	r2, r3, [r5]
 80147c2:	edc5 6a07 	vstr	s13, [r5, #28]
 80147c6:	441a      	add	r2, r3
 80147c8:	696b      	ldr	r3, [r5, #20]
 80147ca:	3301      	adds	r3, #1
 80147cc:	602a      	str	r2, [r5, #0]
 80147ce:	616b      	str	r3, [r5, #20]
 80147d0:	69ab      	ldr	r3, [r5, #24]
 80147d2:	3b01      	subs	r3, #1
 80147d4:	61ab      	str	r3, [r5, #24]
 80147d6:	692b      	ldr	r3, [r5, #16]
 80147d8:	440b      	add	r3, r1
 80147da:	68e9      	ldr	r1, [r5, #12]
 80147dc:	428b      	cmp	r3, r1
 80147de:	612b      	str	r3, [r5, #16]
 80147e0:	db15      	blt.n	801480e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 80147e2:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 80147e6:	3201      	adds	r2, #1
 80147e8:	1a5b      	subs	r3, r3, r1
 80147ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80147ee:	602a      	str	r2, [r5, #0]
 80147f0:	612b      	str	r3, [r5, #16]
 80147f2:	edc5 6a07 	vstr	s13, [r5, #28]
 80147f6:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 80147fa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80147fe:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8014802:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8014806:	ee77 7a27 	vadd.f32	s15, s14, s15
 801480a:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 801480e:	3f01      	subs	r7, #1
 8014810:	e757      	b.n	80146c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8014812:	ad39      	add	r5, sp, #228	; 0xe4
 8014814:	ac19      	add	r4, sp, #100	; 0x64
 8014816:	e72d      	b.n	8014674 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8014818:	4613      	mov	r3, r2
 801481a:	e744      	b.n	80146a6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 801481c:	4613      	mov	r3, r2
 801481e:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8014820:	469e      	mov	lr, r3
 8014822:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8014826:	461f      	mov	r7, r3
 8014828:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 801482c:	f04f 0900 	mov.w	r9, #0
 8014830:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8014834:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8014838:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 801483c:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8014840:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8014844:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8014846:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 801484a:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 801484e:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8014852:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8014856:	960e      	str	r6, [sp, #56]	; 0x38
 8014858:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 801485c:	2f00      	cmp	r7, #0
 801485e:	d146      	bne.n	80148ee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8014860:	449c      	add	ip, r3
 8014862:	1ad7      	subs	r7, r2, r3
 8014864:	f1b9 0f00 	cmp.w	r9, #0
 8014868:	d009      	beq.n	801487e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 801486a:	9039      	str	r0, [sp, #228]	; 0xe4
 801486c:	913d      	str	r1, [sp, #244]	; 0xf4
 801486e:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8014872:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8014876:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 801487a:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 801487e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8014880:	f04f 0800 	mov.w	r8, #0
 8014884:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8014888:	910e      	str	r1, [sp, #56]	; 0x38
 801488a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801488e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8014892:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8014896:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801489a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801489e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 80148a2:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 80148a6:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 80148aa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 80148ae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 80148b2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 80148b6:	f1be 0f00 	cmp.w	lr, #0
 80148ba:	d030      	beq.n	801491e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 80148bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80148be:	4450      	add	r0, sl
 80148c0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80148c4:	4431      	add	r1, r6
 80148c6:	ee37 7a04 	vadd.f32	s14, s14, s8
 80148ca:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80148ce:	4549      	cmp	r1, r9
 80148d0:	db08      	blt.n	80148e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 80148d2:	ee77 7a85 	vadd.f32	s15, s15, s10
 80148d6:	3001      	adds	r0, #1
 80148d8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80148dc:	eba1 0109 	sub.w	r1, r1, r9
 80148e0:	ee37 7a06 	vadd.f32	s14, s14, s12
 80148e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80148e8:	f04f 0801 	mov.w	r8, #1
 80148ec:	e7e3      	b.n	80148b6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 80148ee:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80148f0:	4450      	add	r0, sl
 80148f2:	ee37 7a24 	vadd.f32	s14, s14, s9
 80148f6:	4431      	add	r1, r6
 80148f8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80148fc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8014900:	4541      	cmp	r1, r8
 8014902:	db08      	blt.n	8014916 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8014904:	ee76 6a85 	vadd.f32	s13, s13, s10
 8014908:	3001      	adds	r0, #1
 801490a:	ee37 7a25 	vadd.f32	s14, s14, s11
 801490e:	eba1 0108 	sub.w	r1, r1, r8
 8014912:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014916:	3f01      	subs	r7, #1
 8014918:	f04f 0901 	mov.w	r9, #1
 801491c:	e79e      	b.n	801485c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 801491e:	449c      	add	ip, r3
 8014920:	1aff      	subs	r7, r7, r3
 8014922:	f1b8 0f00 	cmp.w	r8, #0
 8014926:	d009      	beq.n	801493c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8014928:	9019      	str	r0, [sp, #100]	; 0x64
 801492a:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 801492e:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8014932:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8014936:	911d      	str	r1, [sp, #116]	; 0x74
 8014938:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801493c:	1ad2      	subs	r2, r2, r3
 801493e:	e6b5      	b.n	80146ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8014940:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	b923      	cbnz	r3, 8014950 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8014946:	4b04      	ldr	r3, [pc, #16]	; (8014958 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8014948:	6818      	ldr	r0, [r3, #0]
 801494a:	6803      	ldr	r3, [r0, #0]
 801494c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801494e:	4798      	blx	r3
 8014950:	b05b      	add	sp, #364	; 0x16c
 8014952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014956:	bf00      	nop
 8014958:	2400af34 	.word	0x2400af34

0801495c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801495c:	2b03      	cmp	r3, #3
 801495e:	d818      	bhi.n	8014992 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8014960:	e8df f003 	tbb	[pc, r3]
 8014964:	130d0602 	.word	0x130d0602
 8014968:	f9b0 2000 	ldrsh.w	r2, [r0]
 801496c:	1850      	adds	r0, r2, r1
 801496e:	4770      	bx	lr
 8014970:	8803      	ldrh	r3, [r0, #0]
 8014972:	8880      	ldrh	r0, [r0, #4]
 8014974:	4418      	add	r0, r3
 8014976:	b200      	sxth	r0, r0
 8014978:	1a80      	subs	r0, r0, r2
 801497a:	3801      	subs	r0, #1
 801497c:	4770      	bx	lr
 801497e:	8803      	ldrh	r3, [r0, #0]
 8014980:	8880      	ldrh	r0, [r0, #4]
 8014982:	4418      	add	r0, r3
 8014984:	b200      	sxth	r0, r0
 8014986:	1a40      	subs	r0, r0, r1
 8014988:	e7f7      	b.n	801497a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801498a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801498e:	4410      	add	r0, r2
 8014990:	4770      	bx	lr
 8014992:	2000      	movs	r0, #0
 8014994:	4770      	bx	lr

08014996 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8014996:	2b03      	cmp	r3, #3
 8014998:	d817      	bhi.n	80149ca <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801499a:	e8df f003 	tbb	[pc, r3]
 801499e:	0602      	.short	0x0602
 80149a0:	1009      	.short	0x1009
 80149a2:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80149a6:	1850      	adds	r0, r2, r1
 80149a8:	4770      	bx	lr
 80149aa:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80149ae:	e7fa      	b.n	80149a6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80149b0:	8843      	ldrh	r3, [r0, #2]
 80149b2:	88c0      	ldrh	r0, [r0, #6]
 80149b4:	4418      	add	r0, r3
 80149b6:	b200      	sxth	r0, r0
 80149b8:	1a80      	subs	r0, r0, r2
 80149ba:	3801      	subs	r0, #1
 80149bc:	4770      	bx	lr
 80149be:	8843      	ldrh	r3, [r0, #2]
 80149c0:	88c0      	ldrh	r0, [r0, #6]
 80149c2:	4418      	add	r0, r3
 80149c4:	b200      	sxth	r0, r0
 80149c6:	1a40      	subs	r0, r0, r1
 80149c8:	e7f7      	b.n	80149ba <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80149ca:	2000      	movs	r0, #0
 80149cc:	4770      	bx	lr
	...

080149d0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80149d0:	4b01      	ldr	r3, [pc, #4]	; (80149d8 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80149d2:	2200      	movs	r2, #0
 80149d4:	601a      	str	r2, [r3, #0]
 80149d6:	4770      	bx	lr
 80149d8:	2400af3c 	.word	0x2400af3c

080149dc <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80149dc:	4603      	mov	r3, r0
 80149de:	b1c8      	cbz	r0, 8014a14 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80149e0:	0c02      	lsrs	r2, r0, #16
 80149e2:	0412      	lsls	r2, r2, #16
 80149e4:	b9a2      	cbnz	r2, 8014a10 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80149e6:	0403      	lsls	r3, r0, #16
 80149e8:	2010      	movs	r0, #16
 80149ea:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80149ee:	bf04      	itt	eq
 80149f0:	021b      	lsleq	r3, r3, #8
 80149f2:	3008      	addeq	r0, #8
 80149f4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80149f8:	bf04      	itt	eq
 80149fa:	011b      	lsleq	r3, r3, #4
 80149fc:	3004      	addeq	r0, #4
 80149fe:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014a02:	bf04      	itt	eq
 8014a04:	009b      	lsleq	r3, r3, #2
 8014a06:	3002      	addeq	r0, #2
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	db04      	blt.n	8014a16 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8014a0c:	3001      	adds	r0, #1
 8014a0e:	4770      	bx	lr
 8014a10:	2000      	movs	r0, #0
 8014a12:	e7ea      	b.n	80149ea <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8014a14:	2020      	movs	r0, #32
 8014a16:	4770      	bx	lr

08014a18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8014a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a1c:	b087      	sub	sp, #28
 8014a1e:	4681      	mov	r9, r0
 8014a20:	4698      	mov	r8, r3
 8014a22:	4610      	mov	r0, r2
 8014a24:	460d      	mov	r5, r1
 8014a26:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8014a2a:	b981      	cbnz	r1, 8014a4e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8014a2c:	b14b      	cbz	r3, 8014a42 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8014a2e:	460b      	mov	r3, r1
 8014a30:	464a      	mov	r2, r9
 8014a32:	4641      	mov	r1, r8
 8014a34:	e9cd 4700 	strd	r4, r7, [sp]
 8014a38:	f7ff ffee 	bl	8014a18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014a3c:	b007      	add	sp, #28
 8014a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a42:	f04f 33ff 	mov.w	r3, #4294967295
 8014a46:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8014a4a:	603b      	str	r3, [r7, #0]
 8014a4c:	e7f6      	b.n	8014a3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014a4e:	fa32 fa01 	lsrs.w	sl, r2, r1
 8014a52:	d107      	bne.n	8014a64 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8014a54:	fb09 f602 	mul.w	r6, r9, r2
 8014a58:	fbb6 f0f4 	udiv	r0, r6, r4
 8014a5c:	fb04 6610 	mls	r6, r4, r0, r6
 8014a60:	603e      	str	r6, [r7, #0]
 8014a62:	e7eb      	b.n	8014a3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8014a64:	2601      	movs	r6, #1
 8014a66:	fa09 fb01 	lsl.w	fp, r9, r1
 8014a6a:	408e      	lsls	r6, r1
 8014a6c:	fbbb f3f4 	udiv	r3, fp, r4
 8014a70:	3e01      	subs	r6, #1
 8014a72:	9302      	str	r3, [sp, #8]
 8014a74:	fb0a f303 	mul.w	r3, sl, r3
 8014a78:	4016      	ands	r6, r2
 8014a7a:	9303      	str	r3, [sp, #12]
 8014a7c:	4630      	mov	r0, r6
 8014a7e:	f7ff ffad 	bl	80149dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014a82:	464a      	mov	r2, r9
 8014a84:	460b      	mov	r3, r1
 8014a86:	4601      	mov	r1, r0
 8014a88:	4630      	mov	r0, r6
 8014a8a:	e9cd 4700 	strd	r4, r7, [sp]
 8014a8e:	f7ff ffc3 	bl	8014a18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014a92:	9b02      	ldr	r3, [sp, #8]
 8014a94:	4606      	mov	r6, r0
 8014a96:	eb05 0108 	add.w	r1, r5, r8
 8014a9a:	fb04 bb13 	mls	fp, r4, r3, fp
 8014a9e:	4658      	mov	r0, fp
 8014aa0:	f7ff ff9c 	bl	80149dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014aa4:	ab05      	add	r3, sp, #20
 8014aa6:	465a      	mov	r2, fp
 8014aa8:	e9cd 4300 	strd	r4, r3, [sp]
 8014aac:	4603      	mov	r3, r0
 8014aae:	4650      	mov	r0, sl
 8014ab0:	f7ff ffb2 	bl	8014a18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014ab4:	6839      	ldr	r1, [r7, #0]
 8014ab6:	9a05      	ldr	r2, [sp, #20]
 8014ab8:	9b03      	ldr	r3, [sp, #12]
 8014aba:	4411      	add	r1, r2
 8014abc:	fbb1 f2f4 	udiv	r2, r1, r4
 8014ac0:	18d3      	adds	r3, r2, r3
 8014ac2:	fb04 1412 	mls	r4, r4, r2, r1
 8014ac6:	441e      	add	r6, r3
 8014ac8:	603c      	str	r4, [r7, #0]
 8014aca:	4430      	add	r0, r6
 8014acc:	e7b6      	b.n	8014a3c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08014ace <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8014ace:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ad2:	b085      	sub	sp, #20
 8014ad4:	f1b0 0900 	subs.w	r9, r0, #0
 8014ad8:	461d      	mov	r5, r3
 8014ada:	4617      	mov	r7, r2
 8014adc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014ade:	bfbb      	ittet	lt
 8014ae0:	f1c9 0900 	rsblt	r9, r9, #0
 8014ae4:	f04f 36ff 	movlt.w	r6, #4294967295
 8014ae8:	2601      	movge	r6, #1
 8014aea:	6823      	ldrlt	r3, [r4, #0]
 8014aec:	bfbc      	itt	lt
 8014aee:	425b      	neglt	r3, r3
 8014af0:	6023      	strlt	r3, [r4, #0]
 8014af2:	2a00      	cmp	r2, #0
 8014af4:	da04      	bge.n	8014b00 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8014af6:	6823      	ldr	r3, [r4, #0]
 8014af8:	4257      	negs	r7, r2
 8014afa:	4276      	negs	r6, r6
 8014afc:	425b      	negs	r3, r3
 8014afe:	6023      	str	r3, [r4, #0]
 8014b00:	2d00      	cmp	r5, #0
 8014b02:	4638      	mov	r0, r7
 8014b04:	bfba      	itte	lt
 8014b06:	426d      	neglt	r5, r5
 8014b08:	f04f 38ff 	movlt.w	r8, #4294967295
 8014b0c:	f04f 0801 	movge.w	r8, #1
 8014b10:	f7ff ff64 	bl	80149dc <_ZN8touchgfx16TouchCalibration4clzuEm>
 8014b14:	ab03      	add	r3, sp, #12
 8014b16:	463a      	mov	r2, r7
 8014b18:	e9cd 5300 	strd	r5, r3, [sp]
 8014b1c:	4603      	mov	r3, r0
 8014b1e:	4648      	mov	r0, r9
 8014b20:	f7ff ff7a 	bl	8014a18 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8014b24:	6823      	ldr	r3, [r4, #0]
 8014b26:	9a03      	ldr	r2, [sp, #12]
 8014b28:	4546      	cmp	r6, r8
 8014b2a:	441a      	add	r2, r3
 8014b2c:	fb92 f3f5 	sdiv	r3, r2, r5
 8014b30:	4418      	add	r0, r3
 8014b32:	fb05 2313 	mls	r3, r5, r3, r2
 8014b36:	bf18      	it	ne
 8014b38:	4240      	negne	r0, r0
 8014b3a:	1c72      	adds	r2, r6, #1
 8014b3c:	6023      	str	r3, [r4, #0]
 8014b3e:	d105      	bne.n	8014b4c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f1c3 0200 	rsb	r2, r3, #0
 8014b46:	db0b      	blt.n	8014b60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8014b48:	6022      	str	r2, [r4, #0]
 8014b4a:	e006      	b.n	8014b5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014b4c:	2e01      	cmp	r6, #1
 8014b4e:	d104      	bne.n	8014b5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	da02      	bge.n	8014b5a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8014b54:	442b      	add	r3, r5
 8014b56:	3801      	subs	r0, #1
 8014b58:	6023      	str	r3, [r4, #0]
 8014b5a:	b005      	add	sp, #20
 8014b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014b60:	3801      	subs	r0, #1
 8014b62:	1b52      	subs	r2, r2, r5
 8014b64:	e7f0      	b.n	8014b48 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08014b68 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8014b68:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8014b6c:	4c1c      	ldr	r4, [pc, #112]	; (8014be0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8014b6e:	4605      	mov	r5, r0
 8014b70:	6807      	ldr	r7, [r0, #0]
 8014b72:	69a3      	ldr	r3, [r4, #24]
 8014b74:	b92b      	cbnz	r3, 8014b82 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8014b76:	6840      	ldr	r0, [r0, #4]
 8014b78:	e9c5 7000 	strd	r7, r0, [r5]
 8014b7c:	b004      	add	sp, #16
 8014b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b82:	f04f 0802 	mov.w	r8, #2
 8014b86:	68a2      	ldr	r2, [r4, #8]
 8014b88:	ae04      	add	r6, sp, #16
 8014b8a:	6820      	ldr	r0, [r4, #0]
 8014b8c:	fb93 f1f8 	sdiv	r1, r3, r8
 8014b90:	440a      	add	r2, r1
 8014b92:	69e1      	ldr	r1, [r4, #28]
 8014b94:	f846 2d04 	str.w	r2, [r6, #-4]!
 8014b98:	463a      	mov	r2, r7
 8014b9a:	9600      	str	r6, [sp, #0]
 8014b9c:	f7ff ff97 	bl	8014ace <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014ba0:	69a3      	ldr	r3, [r4, #24]
 8014ba2:	4607      	mov	r7, r0
 8014ba4:	686a      	ldr	r2, [r5, #4]
 8014ba6:	6a21      	ldr	r1, [r4, #32]
 8014ba8:	9600      	str	r6, [sp, #0]
 8014baa:	6860      	ldr	r0, [r4, #4]
 8014bac:	f7ff ff8f 	bl	8014ace <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014bb0:	69a3      	ldr	r3, [r4, #24]
 8014bb2:	6962      	ldr	r2, [r4, #20]
 8014bb4:	4407      	add	r7, r0
 8014bb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014bb8:	9600      	str	r6, [sp, #0]
 8014bba:	68e0      	ldr	r0, [r4, #12]
 8014bbc:	fb93 f8f8 	sdiv	r8, r3, r8
 8014bc0:	4442      	add	r2, r8
 8014bc2:	9203      	str	r2, [sp, #12]
 8014bc4:	682a      	ldr	r2, [r5, #0]
 8014bc6:	f7ff ff82 	bl	8014ace <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014bca:	4680      	mov	r8, r0
 8014bcc:	9600      	str	r6, [sp, #0]
 8014bce:	69a3      	ldr	r3, [r4, #24]
 8014bd0:	686a      	ldr	r2, [r5, #4]
 8014bd2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8014bd4:	6920      	ldr	r0, [r4, #16]
 8014bd6:	f7ff ff7a 	bl	8014ace <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8014bda:	4440      	add	r0, r8
 8014bdc:	e7cc      	b.n	8014b78 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8014bde:	bf00      	nop
 8014be0:	2400af40 	.word	0x2400af40

08014be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8014be4:	4b07      	ldr	r3, [pc, #28]	; (8014c04 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	2b01      	cmp	r3, #1
 8014bea:	d109      	bne.n	8014c00 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8014bec:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014bf0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014bf4:	8003      	strh	r3, [r0, #0]
 8014bf6:	4b04      	ldr	r3, [pc, #16]	; (8014c08 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8014bf8:	881b      	ldrh	r3, [r3, #0]
 8014bfa:	3b01      	subs	r3, #1
 8014bfc:	1a9b      	subs	r3, r3, r2
 8014bfe:	800b      	strh	r3, [r1, #0]
 8014c00:	4770      	bx	lr
 8014c02:	bf00      	nop
 8014c04:	2400af2c 	.word	0x2400af2c
 8014c08:	2400af28 	.word	0x2400af28

08014c0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8014c0c:	4b07      	ldr	r3, [pc, #28]	; (8014c2c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8014c0e:	b510      	push	{r4, lr}
 8014c10:	781b      	ldrb	r3, [r3, #0]
 8014c12:	2b01      	cmp	r3, #1
 8014c14:	d108      	bne.n	8014c28 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8014c16:	4b06      	ldr	r3, [pc, #24]	; (8014c30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8014c18:	880c      	ldrh	r4, [r1, #0]
 8014c1a:	881b      	ldrh	r3, [r3, #0]
 8014c1c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8014c20:	3b01      	subs	r3, #1
 8014c22:	1b1b      	subs	r3, r3, r4
 8014c24:	8003      	strh	r3, [r0, #0]
 8014c26:	800a      	strh	r2, [r1, #0]
 8014c28:	bd10      	pop	{r4, pc}
 8014c2a:	bf00      	nop
 8014c2c:	2400af2c 	.word	0x2400af2c
 8014c30:	2400af28 	.word	0x2400af28

08014c34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8014c34:	4b0a      	ldr	r3, [pc, #40]	; (8014c60 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8014c36:	b510      	push	{r4, lr}
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d10e      	bne.n	8014c5c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8014c3e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8014c42:	8843      	ldrh	r3, [r0, #2]
 8014c44:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014c48:	18ca      	adds	r2, r1, r3
 8014c4a:	4b06      	ldr	r3, [pc, #24]	; (8014c64 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8014c4c:	8044      	strh	r4, [r0, #2]
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	1a9b      	subs	r3, r3, r2
 8014c52:	8003      	strh	r3, [r0, #0]
 8014c54:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014c58:	8081      	strh	r1, [r0, #4]
 8014c5a:	80c3      	strh	r3, [r0, #6]
 8014c5c:	bd10      	pop	{r4, pc}
 8014c5e:	bf00      	nop
 8014c60:	2400af2c 	.word	0x2400af2c
 8014c64:	2400af28 	.word	0x2400af28

08014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8014c68:	4b08      	ldr	r3, [pc, #32]	; (8014c8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	2b01      	cmp	r3, #1
 8014c6e:	d10c      	bne.n	8014c8a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8014c70:	8803      	ldrh	r3, [r0, #0]
 8014c72:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8014c76:	8842      	ldrh	r2, [r0, #2]
 8014c78:	8002      	strh	r2, [r0, #0]
 8014c7a:	185a      	adds	r2, r3, r1
 8014c7c:	4b04      	ldr	r3, [pc, #16]	; (8014c90 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8014c7e:	881b      	ldrh	r3, [r3, #0]
 8014c80:	1a9b      	subs	r3, r3, r2
 8014c82:	8043      	strh	r3, [r0, #2]
 8014c84:	88c3      	ldrh	r3, [r0, #6]
 8014c86:	80c1      	strh	r1, [r0, #6]
 8014c88:	8083      	strh	r3, [r0, #4]
 8014c8a:	4770      	bx	lr
 8014c8c:	2400af2c 	.word	0x2400af2c
 8014c90:	2400af28 	.word	0x2400af28

08014c94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8014c94:	4b07      	ldr	r3, [pc, #28]	; (8014cb4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8014c96:	b510      	push	{r4, lr}
 8014c98:	781b      	ldrb	r3, [r3, #0]
 8014c9a:	2b01      	cmp	r3, #1
 8014c9c:	d108      	bne.n	8014cb0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8014c9e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8014ca2:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014ca6:	8003      	strh	r3, [r0, #0]
 8014ca8:	8893      	ldrh	r3, [r2, #4]
 8014caa:	3b01      	subs	r3, #1
 8014cac:	1b1b      	subs	r3, r3, r4
 8014cae:	800b      	strh	r3, [r1, #0]
 8014cb0:	bd10      	pop	{r4, pc}
 8014cb2:	bf00      	nop
 8014cb4:	2400af2c 	.word	0x2400af2c

08014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8014cb8:	4b0a      	ldr	r3, [pc, #40]	; (8014ce4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8014cba:	460a      	mov	r2, r1
 8014cbc:	b510      	push	{r4, lr}
 8014cbe:	781b      	ldrb	r3, [r3, #0]
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d10d      	bne.n	8014ce0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8014cc4:	8881      	ldrh	r1, [r0, #4]
 8014cc6:	8803      	ldrh	r3, [r0, #0]
 8014cc8:	440b      	add	r3, r1
 8014cca:	4601      	mov	r1, r0
 8014ccc:	3b01      	subs	r3, #1
 8014cce:	f821 3b02 	strh.w	r3, [r1], #2
 8014cd2:	f7ff ffdf 	bl	8014c94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8014cd6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014cda:	88c2      	ldrh	r2, [r0, #6]
 8014cdc:	80c3      	strh	r3, [r0, #6]
 8014cde:	8082      	strh	r2, [r0, #4]
 8014ce0:	bd10      	pop	{r4, pc}
 8014ce2:	bf00      	nop
 8014ce4:	2400af2c 	.word	0x2400af2c

08014ce8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8014ce8:	b570      	push	{r4, r5, r6, lr}
 8014cea:	2300      	movs	r3, #0
 8014cec:	4c0a      	ldr	r4, [pc, #40]	; (8014d18 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8014cee:	4605      	mov	r5, r0
 8014cf0:	460e      	mov	r6, r1
 8014cf2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8014cf6:	6820      	ldr	r0, [r4, #0]
 8014cf8:	b110      	cbz	r0, 8014d00 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8014cfa:	6803      	ldr	r3, [r0, #0]
 8014cfc:	695b      	ldr	r3, [r3, #20]
 8014cfe:	4798      	blx	r3
 8014d00:	6026      	str	r6, [r4, #0]
 8014d02:	4630      	mov	r0, r6
 8014d04:	6833      	ldr	r3, [r6, #0]
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	4798      	blx	r3
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	4628      	mov	r0, r5
 8014d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d14:	4718      	bx	r3
 8014d16:	bf00      	nop
 8014d18:	2400af70 	.word	0x2400af70

08014d1c <_ZN8touchgfx11Application13requestRedrawEv>:
 8014d1c:	4b06      	ldr	r3, [pc, #24]	; (8014d38 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8014d1e:	2100      	movs	r1, #0
 8014d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d24:	4b05      	ldr	r3, [pc, #20]	; (8014d3c <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8014d26:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8014d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d2e:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8014d32:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8014d36:	4770      	bx	lr
 8014d38:	2400af28 	.word	0x2400af28
 8014d3c:	2400af2a 	.word	0x2400af2a

08014d40 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8014d40:	4b03      	ldr	r3, [pc, #12]	; (8014d50 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8014d42:	6818      	ldr	r0, [r3, #0]
 8014d44:	b110      	cbz	r0, 8014d4c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8014d46:	6803      	ldr	r3, [r0, #0]
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	4718      	bx	r3
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	2400af70 	.word	0x2400af70

08014d54 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8014d54:	4770      	bx	lr
	...

08014d58 <_ZN8touchgfx11Application4drawEv>:
 8014d58:	4b09      	ldr	r3, [pc, #36]	; (8014d80 <_ZN8touchgfx11Application4drawEv+0x28>)
 8014d5a:	b507      	push	{r0, r1, r2, lr}
 8014d5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d60:	2100      	movs	r1, #0
 8014d62:	4b08      	ldr	r3, [pc, #32]	; (8014d84 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8014d64:	9100      	str	r1, [sp, #0]
 8014d66:	4669      	mov	r1, sp
 8014d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014d70:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014d74:	6803      	ldr	r3, [r0, #0]
 8014d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d78:	4798      	blx	r3
 8014d7a:	b003      	add	sp, #12
 8014d7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d80:	2400af28 	.word	0x2400af28
 8014d84:	2400af2a 	.word	0x2400af2a

08014d88 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8014d88:	4b03      	ldr	r3, [pc, #12]	; (8014d98 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8014d8a:	6818      	ldr	r0, [r3, #0]
 8014d8c:	b110      	cbz	r0, 8014d94 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8014d8e:	6803      	ldr	r3, [r0, #0]
 8014d90:	69db      	ldr	r3, [r3, #28]
 8014d92:	4718      	bx	r3
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	2400af70 	.word	0x2400af70

08014d9c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8014d9c:	4b03      	ldr	r3, [pc, #12]	; (8014dac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8014d9e:	6818      	ldr	r0, [r3, #0]
 8014da0:	b110      	cbz	r0, 8014da8 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8014da2:	6803      	ldr	r3, [r0, #0]
 8014da4:	6a1b      	ldr	r3, [r3, #32]
 8014da6:	4718      	bx	r3
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	2400af70 	.word	0x2400af70

08014db0 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8014db0:	2300      	movs	r3, #0
 8014db2:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8014db6:	4770      	bx	lr

08014db8 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8014db8:	4b03      	ldr	r3, [pc, #12]	; (8014dc8 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8014dba:	6818      	ldr	r0, [r3, #0]
 8014dbc:	b110      	cbz	r0, 8014dc4 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8014dbe:	6803      	ldr	r3, [r0, #0]
 8014dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014dc2:	4718      	bx	r3
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	2400af70 	.word	0x2400af70

08014dcc <_ZN8touchgfx11Application15handleTickEventEv>:
 8014dcc:	b570      	push	{r4, r5, r6, lr}
 8014dce:	4d32      	ldr	r5, [pc, #200]	; (8014e98 <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8014dd0:	4604      	mov	r4, r0
 8014dd2:	6828      	ldr	r0, [r5, #0]
 8014dd4:	b140      	cbz	r0, 8014de8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014dd6:	7a03      	ldrb	r3, [r0, #8]
 8014dd8:	b933      	cbnz	r3, 8014de8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8014dda:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8014dde:	6803      	ldr	r3, [r0, #0]
 8014de0:	689b      	ldr	r3, [r3, #8]
 8014de2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014de6:	4718      	bx	r3
 8014de8:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8014dec:	b97b      	cbnz	r3, 8014e0e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014dee:	b170      	cbz	r0, 8014e0e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014df0:	7a03      	ldrb	r3, [r0, #8]
 8014df2:	b163      	cbz	r3, 8014e0e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8014df4:	4b29      	ldr	r3, [pc, #164]	; (8014e9c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8014df6:	6818      	ldr	r0, [r3, #0]
 8014df8:	b110      	cbz	r0, 8014e00 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8014dfa:	6803      	ldr	r3, [r0, #0]
 8014dfc:	691b      	ldr	r3, [r3, #16]
 8014dfe:	4798      	blx	r3
 8014e00:	6828      	ldr	r0, [r5, #0]
 8014e02:	6803      	ldr	r3, [r0, #0]
 8014e04:	68db      	ldr	r3, [r3, #12]
 8014e06:	4798      	blx	r3
 8014e08:	2301      	movs	r3, #1
 8014e0a:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8014e0e:	2500      	movs	r5, #0
 8014e10:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8014e14:	42a8      	cmp	r0, r5
 8014e16:	dd0c      	ble.n	8014e32 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8014e18:	1963      	adds	r3, r4, r5
 8014e1a:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8014e1e:	b132      	cbz	r2, 8014e2e <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8014e20:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8014e24:	4413      	add	r3, r2
 8014e26:	6858      	ldr	r0, [r3, #4]
 8014e28:	6803      	ldr	r3, [r0, #0]
 8014e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e2c:	4798      	blx	r3
 8014e2e:	3501      	adds	r5, #1
 8014e30:	e7ee      	b.n	8014e10 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8014e32:	2300      	movs	r3, #0
 8014e34:	461a      	mov	r2, r3
 8014e36:	4298      	cmp	r0, r3
 8014e38:	d015      	beq.n	8014e66 <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8014e3a:	18e1      	adds	r1, r4, r3
 8014e3c:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8014e40:	b16d      	cbz	r5, 8014e5e <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8014e42:	429a      	cmp	r2, r3
 8014e44:	d00a      	beq.n	8014e5c <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8014e46:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8014e4a:	4431      	add	r1, r6
 8014e4c:	684e      	ldr	r6, [r1, #4]
 8014e4e:	b291      	uxth	r1, r2
 8014e50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8014e54:	604e      	str	r6, [r1, #4]
 8014e56:	18a1      	adds	r1, r4, r2
 8014e58:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8014e5c:	3201      	adds	r2, #1
 8014e5e:	3301      	adds	r3, #1
 8014e60:	e7e9      	b.n	8014e36 <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8014e62:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8014e66:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8014e6a:	4295      	cmp	r5, r2
 8014e6c:	dd0d      	ble.n	8014e8a <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8014e6e:	1e6b      	subs	r3, r5, #1
 8014e70:	b29b      	uxth	r3, r3
 8014e72:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8014e76:	4618      	mov	r0, r3
 8014e78:	3104      	adds	r1, #4
 8014e7a:	4285      	cmp	r5, r0
 8014e7c:	ddf1      	ble.n	8014e62 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8014e7e:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8014e82:	3001      	adds	r0, #1
 8014e84:	f841 6c04 	str.w	r6, [r1, #-4]
 8014e88:	e7f7      	b.n	8014e7a <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8014e8a:	4b04      	ldr	r3, [pc, #16]	; (8014e9c <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8014e8c:	6818      	ldr	r0, [r3, #0]
 8014e8e:	b110      	cbz	r0, 8014e96 <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8014e90:	6803      	ldr	r3, [r0, #0]
 8014e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e94:	e7a5      	b.n	8014de2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8014e96:	bd70      	pop	{r4, r5, r6, pc}
 8014e98:	2400af74 	.word	0x2400af74
 8014e9c:	2400af70 	.word	0x2400af70

08014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8014ea0:	b510      	push	{r4, lr}
 8014ea2:	f9b1 4000 	ldrsh.w	r4, [r1]
 8014ea6:	888a      	ldrh	r2, [r1, #4]
 8014ea8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014eac:	4422      	add	r2, r4
 8014eae:	b212      	sxth	r2, r2
 8014eb0:	4293      	cmp	r3, r2
 8014eb2:	da15      	bge.n	8014ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014eb4:	8882      	ldrh	r2, [r0, #4]
 8014eb6:	4413      	add	r3, r2
 8014eb8:	b21b      	sxth	r3, r3
 8014eba:	429c      	cmp	r4, r3
 8014ebc:	da10      	bge.n	8014ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014ebe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014ec2:	88c9      	ldrh	r1, [r1, #6]
 8014ec4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8014ec8:	4419      	add	r1, r3
 8014eca:	b209      	sxth	r1, r1
 8014ecc:	428a      	cmp	r2, r1
 8014ece:	da07      	bge.n	8014ee0 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8014ed0:	88c0      	ldrh	r0, [r0, #6]
 8014ed2:	4410      	add	r0, r2
 8014ed4:	b200      	sxth	r0, r0
 8014ed6:	4283      	cmp	r3, r0
 8014ed8:	bfac      	ite	ge
 8014eda:	2000      	movge	r0, #0
 8014edc:	2001      	movlt	r0, #1
 8014ede:	bd10      	pop	{r4, pc}
 8014ee0:	2000      	movs	r0, #0
 8014ee2:	e7fc      	b.n	8014ede <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08014ee4 <_ZN8touchgfx4Rect10restrictToEss>:
 8014ee4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	b510      	push	{r4, lr}
 8014eec:	da04      	bge.n	8014ef8 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8014eee:	8884      	ldrh	r4, [r0, #4]
 8014ef0:	4423      	add	r3, r4
 8014ef2:	8083      	strh	r3, [r0, #4]
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	8003      	strh	r3, [r0, #0]
 8014ef8:	f9b0 4000 	ldrsh.w	r4, [r0]
 8014efc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8014f00:	1b09      	subs	r1, r1, r4
 8014f02:	428b      	cmp	r3, r1
 8014f04:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8014f08:	bfc8      	it	gt
 8014f0a:	8081      	strhgt	r1, [r0, #4]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	da04      	bge.n	8014f1a <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8014f10:	88c1      	ldrh	r1, [r0, #6]
 8014f12:	440b      	add	r3, r1
 8014f14:	80c3      	strh	r3, [r0, #6]
 8014f16:	2300      	movs	r3, #0
 8014f18:	8043      	strh	r3, [r0, #2]
 8014f1a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8014f1e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8014f22:	1a52      	subs	r2, r2, r1
 8014f24:	4293      	cmp	r3, r2
 8014f26:	bfc8      	it	gt
 8014f28:	80c2      	strhgt	r2, [r0, #6]
 8014f2a:	bd10      	pop	{r4, pc}

08014f2c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8014f2c:	4b10      	ldr	r3, [pc, #64]	; (8014f70 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8014f2e:	b510      	push	{r4, lr}
 8014f30:	460c      	mov	r4, r1
 8014f32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f36:	4b0f      	ldr	r3, [pc, #60]	; (8014f74 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8014f38:	4620      	mov	r0, r4
 8014f3a:	f9b3 1000 	ldrsh.w	r1, [r3]
 8014f3e:	f7ff ffd1 	bl	8014ee4 <_ZN8touchgfx4Rect10restrictToEss>
 8014f42:	4b0d      	ldr	r3, [pc, #52]	; (8014f78 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8014f44:	6818      	ldr	r0, [r3, #0]
 8014f46:	b190      	cbz	r0, 8014f6e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8014f48:	6803      	ldr	r3, [r0, #0]
 8014f4a:	4621      	mov	r1, r4
 8014f4c:	689b      	ldr	r3, [r3, #8]
 8014f4e:	4798      	blx	r3
 8014f50:	4b0a      	ldr	r3, [pc, #40]	; (8014f7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8014f52:	6818      	ldr	r0, [r3, #0]
 8014f54:	b118      	cbz	r0, 8014f5e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8014f56:	6803      	ldr	r3, [r0, #0]
 8014f58:	4621      	mov	r1, r4
 8014f5a:	689b      	ldr	r3, [r3, #8]
 8014f5c:	4798      	blx	r3
 8014f5e:	4b08      	ldr	r3, [pc, #32]	; (8014f80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8014f60:	4621      	mov	r1, r4
 8014f62:	6818      	ldr	r0, [r3, #0]
 8014f64:	6803      	ldr	r3, [r0, #0]
 8014f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f6a:	69db      	ldr	r3, [r3, #28]
 8014f6c:	4718      	bx	r3
 8014f6e:	bd10      	pop	{r4, pc}
 8014f70:	2400af2a 	.word	0x2400af2a
 8014f74:	2400af28 	.word	0x2400af28
 8014f78:	2400af70 	.word	0x2400af70
 8014f7c:	2400af6c 	.word	0x2400af6c
 8014f80:	2400af34 	.word	0x2400af34

08014f84 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8014f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f86:	4606      	mov	r6, r0
 8014f88:	4608      	mov	r0, r1
 8014f8a:	460f      	mov	r7, r1
 8014f8c:	f7fd ff01 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014f90:	b9e8      	cbnz	r0, 8014fce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014f92:	f9b7 5000 	ldrsh.w	r5, [r7]
 8014f96:	f9b6 4000 	ldrsh.w	r4, [r6]
 8014f9a:	42a5      	cmp	r5, r4
 8014f9c:	db17      	blt.n	8014fce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014f9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8014fa2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014fa6:	429a      	cmp	r2, r3
 8014fa8:	db11      	blt.n	8014fce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014faa:	88b9      	ldrh	r1, [r7, #4]
 8014fac:	440d      	add	r5, r1
 8014fae:	88b1      	ldrh	r1, [r6, #4]
 8014fb0:	440c      	add	r4, r1
 8014fb2:	b22d      	sxth	r5, r5
 8014fb4:	b224      	sxth	r4, r4
 8014fb6:	42a5      	cmp	r5, r4
 8014fb8:	dc09      	bgt.n	8014fce <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8014fba:	88f8      	ldrh	r0, [r7, #6]
 8014fbc:	4410      	add	r0, r2
 8014fbe:	88f2      	ldrh	r2, [r6, #6]
 8014fc0:	4413      	add	r3, r2
 8014fc2:	b200      	sxth	r0, r0
 8014fc4:	b21b      	sxth	r3, r3
 8014fc6:	4298      	cmp	r0, r3
 8014fc8:	bfcc      	ite	gt
 8014fca:	2000      	movgt	r0, #0
 8014fcc:	2001      	movle	r0, #1
 8014fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8014fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014fd2:	4604      	mov	r4, r0
 8014fd4:	4608      	mov	r0, r1
 8014fd6:	460d      	mov	r5, r1
 8014fd8:	f7fd fedb 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014fdc:	b978      	cbnz	r0, 8014ffe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8014fde:	4620      	mov	r0, r4
 8014fe0:	f7fd fed7 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014fe4:	f9b5 6000 	ldrsh.w	r6, [r5]
 8014fe8:	b150      	cbz	r0, 8015000 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8014fea:	8026      	strh	r6, [r4, #0]
 8014fec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014ff0:	8063      	strh	r3, [r4, #2]
 8014ff2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8014ff6:	80a3      	strh	r3, [r4, #4]
 8014ff8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8014ffc:	80e3      	strh	r3, [r4, #6]
 8014ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015000:	f9b4 1000 	ldrsh.w	r1, [r4]
 8015004:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8015008:	42b1      	cmp	r1, r6
 801500a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801500e:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8015012:	460f      	mov	r7, r1
 8015014:	88ed      	ldrh	r5, [r5, #6]
 8015016:	bfa8      	it	ge
 8015018:	4637      	movge	r7, r6
 801501a:	4293      	cmp	r3, r2
 801501c:	4618      	mov	r0, r3
 801501e:	4466      	add	r6, ip
 8015020:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8015024:	bfa8      	it	ge
 8015026:	4610      	movge	r0, r2
 8015028:	442a      	add	r2, r5
 801502a:	88e5      	ldrh	r5, [r4, #6]
 801502c:	4461      	add	r1, ip
 801502e:	b236      	sxth	r6, r6
 8015030:	8027      	strh	r7, [r4, #0]
 8015032:	442b      	add	r3, r5
 8015034:	b209      	sxth	r1, r1
 8015036:	b212      	sxth	r2, r2
 8015038:	8060      	strh	r0, [r4, #2]
 801503a:	b21b      	sxth	r3, r3
 801503c:	428e      	cmp	r6, r1
 801503e:	bfac      	ite	ge
 8015040:	ebc7 0106 	rsbge	r1, r7, r6
 8015044:	ebc7 0101 	rsblt	r1, r7, r1
 8015048:	429a      	cmp	r2, r3
 801504a:	bfac      	ite	ge
 801504c:	ebc0 0202 	rsbge	r2, r0, r2
 8015050:	ebc0 0203 	rsblt	r2, r0, r3
 8015054:	80a1      	strh	r1, [r4, #4]
 8015056:	80e2      	strh	r2, [r4, #6]
 8015058:	e7d1      	b.n	8014ffe <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801505c <_ZN8touchgfx11Application11getInstanceEv>:
 801505c:	4b01      	ldr	r3, [pc, #4]	; (8015064 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801505e:	6818      	ldr	r0, [r3, #0]
 8015060:	4770      	bx	lr
 8015062:	bf00      	nop
 8015064:	2400af80 	.word	0x2400af80

08015068 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 8015068:	2300      	movs	r3, #0
 801506a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801506e:	30a8      	adds	r0, #168	; 0xa8
 8015070:	f820 3c24 	strh.w	r3, [r0, #-36]
 8015074:	f802 3b01 	strb.w	r3, [r2], #1
 8015078:	4282      	cmp	r2, r0
 801507a:	d1fb      	bne.n	8015074 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801507c:	4770      	bx	lr

0801507e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801507e:	4603      	mov	r3, r0
 8015080:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8015084:	2200      	movs	r2, #0
 8015086:	801a      	strh	r2, [r3, #0]
 8015088:	3308      	adds	r3, #8
 801508a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801508e:	f823 2c04 	strh.w	r2, [r3, #-4]
 8015092:	f823 2c02 	strh.w	r2, [r3, #-2]
 8015096:	428b      	cmp	r3, r1
 8015098:	d1f5      	bne.n	8015086 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801509a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801509e:	4770      	bx	lr

080150a0 <_ZN8touchgfx11ApplicationC1Ev>:
 80150a0:	b570      	push	{r4, r5, r6, lr}
 80150a2:	4b19      	ldr	r3, [pc, #100]	; (8015108 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 80150a4:	2500      	movs	r5, #0
 80150a6:	4604      	mov	r4, r0
 80150a8:	30a8      	adds	r0, #168	; 0xa8
 80150aa:	f840 3ca8 	str.w	r3, [r0, #-168]
 80150ae:	f820 5c24 	strh.w	r5, [r0, #-36]
 80150b2:	f7ff ffe4 	bl	801507e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80150b6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 80150ba:	f7ff ffe0 	bl	801507e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80150be:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 80150c2:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 80150c6:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 80150ca:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 80150ce:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 80150d2:	490e      	ldr	r1, [pc, #56]	; (801510c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 80150d4:	480e      	ldr	r0, [pc, #56]	; (8015110 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 80150d6:	f00e f823 	bl	8023120 <CRC_Lock>
 80150da:	4e0e      	ldr	r6, [pc, #56]	; (8015114 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 80150dc:	4b0e      	ldr	r3, [pc, #56]	; (8015118 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80150de:	b158      	cbz	r0, 80150f8 <_ZN8touchgfx11ApplicationC1Ev+0x58>
 80150e0:	801d      	strh	r5, [r3, #0]
 80150e2:	2300      	movs	r3, #0
 80150e4:	4a0d      	ldr	r2, [pc, #52]	; (801511c <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80150e6:	4620      	mov	r0, r4
 80150e8:	6013      	str	r3, [r2, #0]
 80150ea:	4a0d      	ldr	r2, [pc, #52]	; (8015120 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80150ec:	6033      	str	r3, [r6, #0]
 80150ee:	6013      	str	r3, [r2, #0]
 80150f0:	f7ff ffba 	bl	8015068 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 80150f4:	4620      	mov	r0, r4
 80150f6:	bd70      	pop	{r4, r5, r6, pc}
 80150f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80150fc:	2002      	movs	r0, #2
 80150fe:	801a      	strh	r2, [r3, #0]
 8015100:	6030      	str	r0, [r6, #0]
 8015102:	f001 fa15 	bl	8016530 <_ZN8touchgfx6Screen4drawEv>
 8015106:	e7ec      	b.n	80150e2 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 8015108:	08025ff0 	.word	0x08025ff0
 801510c:	b5e8b5cd 	.word	0xb5e8b5cd
 8015110:	f407a5c2 	.word	0xf407a5c2
 8015114:	2400af70 	.word	0x2400af70
 8015118:	2400004e 	.word	0x2400004e
 801511c:	2400af80 	.word	0x2400af80
 8015120:	2400af74 	.word	0x2400af74

08015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8015124:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8015128:	3b01      	subs	r3, #1
 801512a:	b29b      	uxth	r3, r3
 801512c:	428b      	cmp	r3, r1
 801512e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8015132:	b510      	push	{r4, lr}
 8015134:	d908      	bls.n	8015148 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8015136:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801513a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8015144:	685a      	ldr	r2, [r3, #4]
 8015146:	6062      	str	r2, [r4, #4]
 8015148:	bd10      	pop	{r4, pc}
	...

0801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015150:	b08f      	sub	sp, #60	; 0x3c
 8015152:	4b94      	ldr	r3, [pc, #592]	; (80153a4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 8015154:	4683      	mov	fp, r0
 8015156:	ac0a      	add	r4, sp, #40	; 0x28
 8015158:	e884 0006 	stmia.w	r4, {r1, r2}
 801515c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015160:	4620      	mov	r0, r4
 8015162:	4b91      	ldr	r3, [pc, #580]	; (80153a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 8015164:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015168:	f7ff febc 	bl	8014ee4 <_ZN8touchgfx4Rect10restrictToEss>
 801516c:	4620      	mov	r0, r4
 801516e:	f7fd fe10 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015172:	2800      	cmp	r0, #0
 8015174:	d16a      	bne.n	801524c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015176:	9403      	str	r4, [sp, #12]
 8015178:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801517c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 8015180:	2400      	movs	r4, #0
 8015182:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	36a0      	adds	r6, #160	; 0xa0
 801518a:	42a5      	cmp	r5, r4
 801518c:	d00d      	beq.n	80151aa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801518e:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 8015192:	9803      	ldr	r0, [sp, #12]
 8015194:	f7ff fef6 	bl	8014f84 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015198:	b128      	cbz	r0, 80151a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801519a:	1e69      	subs	r1, r5, #1
 801519c:	9801      	ldr	r0, [sp, #4]
 801519e:	1b09      	subs	r1, r1, r4
 80151a0:	b289      	uxth	r1, r1
 80151a2:	f7ff ffbf 	bl	8015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80151a6:	3401      	adds	r4, #1
 80151a8:	e7ef      	b.n	801518a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 80151aa:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 80151ae:	1e7b      	subs	r3, r7, #1
 80151b0:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 80151b4:	9704      	str	r7, [sp, #16]
 80151b6:	9302      	str	r3, [sp, #8]
 80151b8:	2400      	movs	r4, #0
 80151ba:	4655      	mov	r5, sl
 80151bc:	9705      	str	r7, [sp, #20]
 80151be:	4626      	mov	r6, r4
 80151c0:	9b05      	ldr	r3, [sp, #20]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d078      	beq.n	80152b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 80151c6:	9903      	ldr	r1, [sp, #12]
 80151c8:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 80151cc:	f7ff fe68 	bl	8014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80151d0:	b360      	cbz	r0, 801522c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80151d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80151d6:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 80151da:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 80151de:	45e6      	cmp	lr, ip
 80151e0:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 80151e4:	db35      	blt.n	8015252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80151e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80151ea:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 80151ee:	4472      	add	r2, lr
 80151f0:	4463      	add	r3, ip
 80151f2:	b212      	sxth	r2, r2
 80151f4:	b21b      	sxth	r3, r3
 80151f6:	429a      	cmp	r2, r3
 80151f8:	dc2b      	bgt.n	8015252 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80151fa:	fa1f f288 	uxth.w	r2, r8
 80151fe:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015202:	45c1      	cmp	r9, r8
 8015204:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8015208:	4413      	add	r3, r2
 801520a:	fa1f fc89 	uxth.w	ip, r9
 801520e:	b29b      	uxth	r3, r3
 8015210:	fa0f fe83 	sxth.w	lr, r3
 8015214:	db0f      	blt.n	8015236 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8015216:	eba3 030c 	sub.w	r3, r3, ip
 801521a:	1ac9      	subs	r1, r1, r3
 801521c:	b209      	sxth	r1, r1
 801521e:	2900      	cmp	r1, #0
 8015220:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015224:	dd12      	ble.n	801524c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8015226:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801522a:	4604      	mov	r4, r0
 801522c:	9b05      	ldr	r3, [sp, #20]
 801522e:	3d08      	subs	r5, #8
 8015230:	3b01      	subs	r3, #1
 8015232:	9305      	str	r3, [sp, #20]
 8015234:	e7c4      	b.n	80151c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 8015236:	4461      	add	r1, ip
 8015238:	b209      	sxth	r1, r1
 801523a:	4571      	cmp	r1, lr
 801523c:	dc3a      	bgt.n	80152b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801523e:	eba2 020c 	sub.w	r2, r2, ip
 8015242:	b212      	sxth	r2, r2
 8015244:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8015248:	2a00      	cmp	r2, #0
 801524a:	dcee      	bgt.n	801522a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801524c:	b00f      	add	sp, #60	; 0x3c
 801524e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015252:	45c1      	cmp	r9, r8
 8015254:	db2e      	blt.n	80152b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8015256:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801525a:	4499      	add	r9, r3
 801525c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 8015260:	4498      	add	r8, r3
 8015262:	fa0f f989 	sxth.w	r9, r9
 8015266:	fa0f f888 	sxth.w	r8, r8
 801526a:	45c1      	cmp	r9, r8
 801526c:	dc22      	bgt.n	80152b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801526e:	fa1f f28c 	uxth.w	r2, ip
 8015272:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 8015276:	45e6      	cmp	lr, ip
 8015278:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801527c:	4413      	add	r3, r2
 801527e:	fa1f f88e 	uxth.w	r8, lr
 8015282:	b29b      	uxth	r3, r3
 8015284:	fa0f f983 	sxth.w	r9, r3
 8015288:	db0a      	blt.n	80152a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801528a:	eba3 0308 	sub.w	r3, r3, r8
 801528e:	1ac9      	subs	r1, r1, r3
 8015290:	b209      	sxth	r1, r1
 8015292:	2900      	cmp	r1, #0
 8015294:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8015298:	ddd8      	ble.n	801524c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801529a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801529e:	e7c4      	b.n	801522a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80152a0:	4441      	add	r1, r8
 80152a2:	b209      	sxth	r1, r1
 80152a4:	4549      	cmp	r1, r9
 80152a6:	dc05      	bgt.n	80152b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80152a8:	eba2 0208 	sub.w	r2, r2, r8
 80152ac:	b212      	sxth	r2, r2
 80152ae:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80152b2:	e7c9      	b.n	8015248 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80152b4:	4606      	mov	r6, r0
 80152b6:	e7b9      	b.n	801522c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80152b8:	2c00      	cmp	r4, #0
 80152ba:	f47f af7d 	bne.w	80151b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 80152be:	2e00      	cmp	r6, #0
 80152c0:	f000 81e1 	beq.w	8015686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80152c4:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 80152c8:	4655      	mov	r5, sl
 80152ca:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 80152ce:	b2b9      	uxth	r1, r7
 80152d0:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80152d4:	b2b3      	uxth	r3, r6
 80152d6:	9105      	str	r1, [sp, #20]
 80152d8:	9805      	ldr	r0, [sp, #20]
 80152da:	441a      	add	r2, r3
 80152dc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80152e0:	b292      	uxth	r2, r2
 80152e2:	4401      	add	r1, r0
 80152e4:	fa0f f882 	sxth.w	r8, r2
 80152e8:	b289      	uxth	r1, r1
 80152ea:	9106      	str	r1, [sp, #24]
 80152ec:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 80152f0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80152f4:	9b04      	ldr	r3, [sp, #16]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d058      	beq.n	80153ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 80152fa:	9903      	ldr	r1, [sp, #12]
 80152fc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 8015300:	f7ff fdce 	bl	8014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015304:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8015308:	b1d8      	cbz	r0, 8015342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801530a:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801530e:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 8015312:	4576      	cmp	r6, lr
 8015314:	dc26      	bgt.n	8015364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015316:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801531a:	44f4      	add	ip, lr
 801531c:	fa0f fc8c 	sxth.w	ip, ip
 8015320:	45e0      	cmp	r8, ip
 8015322:	db1f      	blt.n	8015364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 8015324:	428f      	cmp	r7, r1
 8015326:	fa1f fc81 	uxth.w	ip, r1
 801532a:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801532e:	dc0f      	bgt.n	8015350 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 8015330:	9806      	ldr	r0, [sp, #24]
 8015332:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 8015336:	eba0 0c0c 	sub.w	ip, r0, ip
 801533a:	eba1 010c 	sub.w	r1, r1, ip
 801533e:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 8015342:	4620      	mov	r0, r4
 8015344:	9904      	ldr	r1, [sp, #16]
 8015346:	3d08      	subs	r5, #8
 8015348:	4604      	mov	r4, r0
 801534a:	3901      	subs	r1, #1
 801534c:	9104      	str	r1, [sp, #16]
 801534e:	e7cf      	b.n	80152f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 8015350:	4461      	add	r1, ip
 8015352:	b209      	sxth	r1, r1
 8015354:	4549      	cmp	r1, r9
 8015356:	dcf5      	bgt.n	8015344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015358:	9905      	ldr	r1, [sp, #20]
 801535a:	eba1 0c0c 	sub.w	ip, r1, ip
 801535e:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 8015362:	e7ee      	b.n	8015342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015364:	428f      	cmp	r7, r1
 8015366:	dced      	bgt.n	8015344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015368:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801536c:	4461      	add	r1, ip
 801536e:	b209      	sxth	r1, r1
 8015370:	4589      	cmp	r9, r1
 8015372:	dbe7      	blt.n	8015344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 8015374:	4576      	cmp	r6, lr
 8015376:	fa1f fc8e 	uxth.w	ip, lr
 801537a:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801537e:	dc08      	bgt.n	8015392 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 8015380:	eba2 0c0c 	sub.w	ip, r2, ip
 8015384:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 8015388:	eba1 010c 	sub.w	r1, r1, ip
 801538c:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 8015390:	e7d7      	b.n	8015342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 8015392:	4461      	add	r1, ip
 8015394:	b209      	sxth	r1, r1
 8015396:	4588      	cmp	r8, r1
 8015398:	dbd4      	blt.n	8015344 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801539a:	eba3 0c0c 	sub.w	ip, r3, ip
 801539e:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 80153a2:	e7ce      	b.n	8015342 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 80153a4:	2400af2a 	.word	0x2400af2a
 80153a8:	2400af28 	.word	0x2400af28
 80153ac:	2c00      	cmp	r4, #0
 80153ae:	f000 816a 	beq.w	8015686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80153b2:	9b02      	ldr	r3, [sp, #8]
 80153b4:	3301      	adds	r3, #1
 80153b6:	f000 8166 	beq.w	8015686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 80153ba:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 80153be:	9803      	ldr	r0, [sp, #12]
 80153c0:	4621      	mov	r1, r4
 80153c2:	f7ff fddf 	bl	8014f84 <_ZNK8touchgfx4Rect8includesERKS0_>
 80153c6:	b120      	cbz	r0, 80153d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 80153c8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80153cc:	9801      	ldr	r0, [sp, #4]
 80153ce:	f7ff fea9 	bl	8015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80153d2:	9903      	ldr	r1, [sp, #12]
 80153d4:	4620      	mov	r0, r4
 80153d6:	f7ff fd63 	bl	8014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80153da:	2800      	cmp	r0, #0
 80153dc:	f000 809b 	beq.w	8015516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 80153e0:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 80153e4:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 80153e8:	b281      	uxth	r1, r0
 80153ea:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 80153ee:	9309      	str	r3, [sp, #36]	; 0x24
 80153f0:	eb01 0c03 	add.w	ip, r1, r3
 80153f4:	b2ab      	uxth	r3, r5
 80153f6:	4285      	cmp	r5, r0
 80153f8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 80153fc:	fa1f f98c 	uxth.w	r9, ip
 8015400:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8015404:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 8015408:	eb03 040c 	add.w	r4, r3, ip
 801540c:	b2a4      	uxth	r4, r4
 801540e:	9405      	str	r4, [sp, #20]
 8015410:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8015414:	9404      	str	r4, [sp, #16]
 8015416:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801541a:	f340 809a 	ble.w	8015552 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801541e:	1a5b      	subs	r3, r3, r1
 8015420:	4596      	cmp	lr, r2
 8015422:	fa0f f589 	sxth.w	r5, r9
 8015426:	b29b      	uxth	r3, r3
 8015428:	b21e      	sxth	r6, r3
 801542a:	dd2e      	ble.n	801548a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801542c:	9f02      	ldr	r7, [sp, #8]
 801542e:	fa1f fe8e 	uxth.w	lr, lr
 8015432:	b292      	uxth	r2, r2
 8015434:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 8015438:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801543c:	9f04      	ldr	r7, [sp, #16]
 801543e:	ebae 0102 	sub.w	r1, lr, r2
 8015442:	4486      	add	lr, r0
 8015444:	1b7f      	subs	r7, r7, r5
 8015446:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801544a:	b289      	uxth	r1, r1
 801544c:	442a      	add	r2, r5
 801544e:	fa0f fe8e 	sxth.w	lr, lr
 8015452:	b20c      	sxth	r4, r1
 8015454:	b212      	sxth	r2, r2
 8015456:	4367      	muls	r7, r4
 8015458:	ebae 0202 	sub.w	r2, lr, r2
 801545c:	4372      	muls	r2, r6
 801545e:	4297      	cmp	r7, r2
 8015460:	db09      	blt.n	8015476 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 8015462:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 8015466:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801546a:	449c      	add	ip, r3
 801546c:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8015470:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015474:	e680      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015476:	4401      	add	r1, r0
 8015478:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801547c:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 8015480:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015484:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015488:	e676      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801548a:	9f04      	ldr	r7, [sp, #16]
 801548c:	42bd      	cmp	r5, r7
 801548e:	da27      	bge.n	80154e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 8015490:	9902      	ldr	r1, [sp, #8]
 8015492:	1b7f      	subs	r7, r7, r5
 8015494:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8015498:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801549c:	eb04 010e 	add.w	r1, r4, lr
 80154a0:	fa1f f881 	uxth.w	r8, r1
 80154a4:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 80154a8:	4411      	add	r1, r2
 80154aa:	fa0f f988 	sxth.w	r9, r8
 80154ae:	eba2 020e 	sub.w	r2, r2, lr
 80154b2:	eba1 0108 	sub.w	r1, r1, r8
 80154b6:	4372      	muls	r2, r6
 80154b8:	b289      	uxth	r1, r1
 80154ba:	fa0f f881 	sxth.w	r8, r1
 80154be:	fb08 f707 	mul.w	r7, r8, r7
 80154c2:	42ba      	cmp	r2, r7
 80154c4:	dc06      	bgt.n	80154d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80154c6:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 80154ca:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 80154ce:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 80154d2:	e7ca      	b.n	801546a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 80154d4:	4421      	add	r1, r4
 80154d6:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 80154da:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80154de:	e64b      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80154e0:	9d05      	ldr	r5, [sp, #20]
 80154e2:	2c06      	cmp	r4, #6
 80154e4:	eba9 0505 	sub.w	r5, r9, r5
 80154e8:	b2ad      	uxth	r5, r5
 80154ea:	fa0f fe85 	sxth.w	lr, r5
 80154ee:	d818      	bhi.n	8015522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 80154f0:	9b04      	ldr	r3, [sp, #16]
 80154f2:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 80154f6:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 80154fa:	1c63      	adds	r3, r4, #1
 80154fc:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 8015500:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	9d01      	ldr	r5, [sp, #4]
 8015508:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801550c:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 8015510:	805a      	strh	r2, [r3, #2]
 8015512:	809e      	strh	r6, [r3, #4]
 8015514:	80d9      	strh	r1, [r3, #6]
 8015516:	9b02      	ldr	r3, [sp, #8]
 8015518:	f1aa 0a08 	sub.w	sl, sl, #8
 801551c:	3b01      	subs	r3, #1
 801551e:	9302      	str	r3, [sp, #8]
 8015520:	e747      	b.n	80153b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 8015522:	9a02      	ldr	r2, [sp, #8]
 8015524:	45b6      	cmp	lr, r6
 8015526:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801552a:	db0d      	blt.n	8015548 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801552c:	449c      	add	ip, r3
 801552e:	445a      	add	r2, fp
 8015530:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 8015534:	fa1f fc8c 	uxth.w	ip, ip
 8015538:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801553c:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8015540:	448c      	add	ip, r1
 8015542:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 8015546:	e617      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8015548:	445a      	add	r2, fp
 801554a:	44ac      	add	ip, r5
 801554c:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 8015550:	e78e      	b.n	8015470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 8015552:	fa1f f18e 	uxth.w	r1, lr
 8015556:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801555a:	b293      	uxth	r3, r2
 801555c:	4596      	cmp	lr, r2
 801555e:	eb01 0806 	add.w	r8, r1, r6
 8015562:	9306      	str	r3, [sp, #24]
 8015564:	fa1f f888 	uxth.w	r8, r8
 8015568:	9f06      	ldr	r7, [sp, #24]
 801556a:	fa0f f388 	sxth.w	r3, r8
 801556e:	9307      	str	r3, [sp, #28]
 8015570:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 8015574:	443b      	add	r3, r7
 8015576:	b29b      	uxth	r3, r3
 8015578:	9308      	str	r3, [sp, #32]
 801557a:	da25      	bge.n	80155c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801557c:	9905      	ldr	r1, [sp, #20]
 801557e:	eba3 0308 	sub.w	r3, r3, r8
 8015582:	eba2 020e 	sub.w	r2, r2, lr
 8015586:	1b40      	subs	r0, r0, r5
 8015588:	eba9 0401 	sub.w	r4, r9, r1
 801558c:	b29b      	uxth	r3, r3
 801558e:	b2a4      	uxth	r4, r4
 8015590:	b219      	sxth	r1, r3
 8015592:	fa0f f984 	sxth.w	r9, r4
 8015596:	4348      	muls	r0, r1
 8015598:	fb09 f202 	mul.w	r2, r9, r2
 801559c:	4282      	cmp	r2, r0
 801559e:	9a02      	ldr	r2, [sp, #8]
 80155a0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80155a4:	445a      	add	r2, fp
 80155a6:	dc06      	bgt.n	80155b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 80155a8:	9b07      	ldr	r3, [sp, #28]
 80155aa:	44a4      	add	ip, r4
 80155ac:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 80155b0:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 80155b4:	e75c      	b.n	8015470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 80155b6:	9904      	ldr	r1, [sp, #16]
 80155b8:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 80155bc:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 80155c0:	4433      	add	r3, r6
 80155c2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80155c6:	e5d7      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80155c8:	9f06      	ldr	r7, [sp, #24]
 80155ca:	9b04      	ldr	r3, [sp, #16]
 80155cc:	1bc9      	subs	r1, r1, r7
 80155ce:	fa0f f789 	sxth.w	r7, r9
 80155d2:	b289      	uxth	r1, r1
 80155d4:	429f      	cmp	r7, r3
 80155d6:	fa0f fe81 	sxth.w	lr, r1
 80155da:	dd22      	ble.n	8015622 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 80155dc:	9a05      	ldr	r2, [sp, #20]
 80155de:	1b40      	subs	r0, r0, r5
 80155e0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80155e4:	eba9 0202 	sub.w	r2, r9, r2
 80155e8:	9d07      	ldr	r5, [sp, #28]
 80155ea:	fb0e f000 	mul.w	r0, lr, r0
 80155ee:	b292      	uxth	r2, r2
 80155f0:	eba5 0a03 	sub.w	sl, r5, r3
 80155f4:	9b02      	ldr	r3, [sp, #8]
 80155f6:	b214      	sxth	r4, r2
 80155f8:	00db      	lsls	r3, r3, #3
 80155fa:	fb04 fa0a 	mul.w	sl, r4, sl
 80155fe:	445b      	add	r3, fp
 8015600:	4550      	cmp	r0, sl
 8015602:	db03      	blt.n	801560c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 8015604:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 8015608:	4494      	add	ip, r2
 801560a:	e731      	b.n	8015470 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801560c:	9a04      	ldr	r2, [sp, #16]
 801560e:	4431      	add	r1, r6
 8015610:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 8015614:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 8015618:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801561c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8015620:	e75b      	b.n	80154da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 8015622:	9b08      	ldr	r3, [sp, #32]
 8015624:	2c06      	cmp	r4, #6
 8015626:	eba3 0308 	sub.w	r3, r3, r8
 801562a:	b29b      	uxth	r3, r3
 801562c:	b21d      	sxth	r5, r3
 801562e:	d813      	bhi.n	8015658 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 8015630:	9b07      	ldr	r3, [sp, #28]
 8015632:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 8015636:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801563a:	1c63      	adds	r3, r4, #1
 801563c:	9901      	ldr	r1, [sp, #4]
 801563e:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 8015642:	9b01      	ldr	r3, [sp, #4]
 8015644:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 8015648:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801564c:	805a      	strh	r2, [r3, #2]
 801564e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015650:	f8a3 e006 	strh.w	lr, [r3, #6]
 8015654:	809a      	strh	r2, [r3, #4]
 8015656:	e75e      	b.n	8015516 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 8015658:	9802      	ldr	r0, [sp, #8]
 801565a:	4575      	cmp	r5, lr
 801565c:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 8015660:	db0d      	blt.n	801567e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 8015662:	4431      	add	r1, r6
 8015664:	9b06      	ldr	r3, [sp, #24]
 8015666:	4458      	add	r0, fp
 8015668:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801566c:	b289      	uxth	r1, r1
 801566e:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 8015672:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8015676:	4419      	add	r1, r3
 8015678:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801567c:	e57c      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801567e:	4458      	add	r0, fp
 8015680:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 8015684:	e79c      	b.n	80155c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 8015686:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801568a:	2e07      	cmp	r6, #7
 801568c:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8015690:	d812      	bhi.n	80156b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 8015692:	1c75      	adds	r5, r6, #1
 8015694:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8015698:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801569c:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 80156a0:	9d01      	ldr	r5, [sp, #4]
 80156a2:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 80156a6:	442c      	add	r4, r5
 80156a8:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80156ac:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 80156b0:	8061      	strh	r1, [r4, #2]
 80156b2:	80a2      	strh	r2, [r4, #4]
 80156b4:	80e3      	strh	r3, [r4, #6]
 80156b6:	e5c9      	b.n	801524c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80156b8:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 80156bc:	3e01      	subs	r6, #1
 80156be:	445c      	add	r4, fp
 80156c0:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 80156c4:	f04f 37ff 	mov.w	r7, #4294967295
 80156c8:	2500      	movs	r5, #0
 80156ca:	9305      	str	r3, [sp, #20]
 80156cc:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 80156d0:	1e72      	subs	r2, r6, #1
 80156d2:	9302      	str	r3, [sp, #8]
 80156d4:	4691      	mov	r9, r2
 80156d6:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 80156da:	9304      	str	r3, [sp, #16]
 80156dc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 80156e0:	f1b9 3fff 	cmp.w	r9, #4294967295
 80156e4:	6818      	ldr	r0, [r3, #0]
 80156e6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80156ea:	9207      	str	r2, [sp, #28]
 80156ec:	bf16      	itet	ne
 80156ee:	9905      	ldrne	r1, [sp, #20]
 80156f0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 80156f4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 80156f8:	9306      	str	r3, [sp, #24]
 80156fa:	f8be 1006 	ldrh.w	r1, [lr, #6]
 80156fe:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8015702:	fb18 f801 	smulbb	r8, r8, r1
 8015706:	6859      	ldr	r1, [r3, #4]
 8015708:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801570c:	4671      	mov	r1, lr
 801570e:	a80c      	add	r0, sp, #48	; 0x30
 8015710:	f7ff fc5e 	bl	8014fd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015714:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8015718:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801571c:	f04f 0c08 	mov.w	ip, #8
 8015720:	9b04      	ldr	r3, [sp, #16]
 8015722:	9a02      	ldr	r2, [sp, #8]
 8015724:	fb10 f001 	smulbb	r0, r0, r1
 8015728:	fb02 8803 	mla	r8, r2, r3, r8
 801572c:	eba0 0108 	sub.w	r1, r0, r8
 8015730:	fb90 f0fc 	sdiv	r0, r0, ip
 8015734:	4288      	cmp	r0, r1
 8015736:	dc20      	bgt.n	801577a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8015738:	4551      	cmp	r1, sl
 801573a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801573e:	da03      	bge.n	8015748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8015740:	b1d9      	cbz	r1, 801577a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 8015742:	468a      	mov	sl, r1
 8015744:	464f      	mov	r7, r9
 8015746:	4635      	mov	r5, r6
 8015748:	f109 39ff 	add.w	r9, r9, #4294967295
 801574c:	f119 0f02 	cmn.w	r9, #2
 8015750:	d1c6      	bne.n	80156e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8015752:	4616      	mov	r6, r2
 8015754:	3201      	adds	r2, #1
 8015756:	f1a4 0408 	sub.w	r4, r4, #8
 801575a:	d1b7      	bne.n	80156cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801575c:	9b01      	ldr	r3, [sp, #4]
 801575e:	b2ac      	uxth	r4, r5
 8015760:	00ed      	lsls	r5, r5, #3
 8015762:	1958      	adds	r0, r3, r5
 8015764:	1c7b      	adds	r3, r7, #1
 8015766:	d10b      	bne.n	8015780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 8015768:	4601      	mov	r1, r0
 801576a:	9803      	ldr	r0, [sp, #12]
 801576c:	f7ff fc30 	bl	8014fd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015770:	4621      	mov	r1, r4
 8015772:	9801      	ldr	r0, [sp, #4]
 8015774:	f7ff fcd6 	bl	8015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015778:	e4fe      	b.n	8015178 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801577a:	464f      	mov	r7, r9
 801577c:	4635      	mov	r5, r6
 801577e:	e7ed      	b.n	801575c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8015780:	9b01      	ldr	r3, [sp, #4]
 8015782:	00ff      	lsls	r7, r7, #3
 8015784:	445d      	add	r5, fp
 8015786:	19d9      	adds	r1, r3, r7
 8015788:	445f      	add	r7, fp
 801578a:	f7ff fc21 	bl	8014fd0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801578e:	9b03      	ldr	r3, [sp, #12]
 8015790:	cb03      	ldmia	r3!, {r0, r1}
 8015792:	9b03      	ldr	r3, [sp, #12]
 8015794:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 8015798:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801579c:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 80157a0:	6869      	ldr	r1, [r5, #4]
 80157a2:	c303      	stmia	r3!, {r0, r1}
 80157a4:	e7e4      	b.n	8015770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80157a6:	bf00      	nop

080157a8 <_ZN8touchgfx11Application10invalidateEv>:
 80157a8:	4b09      	ldr	r3, [pc, #36]	; (80157d0 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80157aa:	b082      	sub	sp, #8
 80157ac:	2100      	movs	r1, #0
 80157ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80157b2:	4b08      	ldr	r3, [pc, #32]	; (80157d4 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80157b4:	9100      	str	r1, [sp, #0]
 80157b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80157ba:	f8ad 2004 	strh.w	r2, [sp, #4]
 80157be:	f8ad 3006 	strh.w	r3, [sp, #6]
 80157c2:	ab02      	add	r3, sp, #8
 80157c4:	e913 0006 	ldmdb	r3, {r1, r2}
 80157c8:	b002      	add	sp, #8
 80157ca:	f7ff bcbf 	b.w	801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80157ce:	bf00      	nop
 80157d0:	2400af28 	.word	0x2400af28
 80157d4:	2400af2a 	.word	0x2400af2a

080157d8 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 80157d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157dc:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 80157e0:	b09b      	sub	sp, #108	; 0x6c
 80157e2:	4604      	mov	r4, r0
 80157e4:	4630      	mov	r0, r6
 80157e6:	f7fd fad4 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 80157ea:	4605      	mov	r5, r0
 80157ec:	b940      	cbnz	r0, 8015800 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 80157ee:	4620      	mov	r0, r4
 80157f0:	e896 0006 	ldmia.w	r6, {r1, r2}
 80157f4:	f7ff fcaa 	bl	801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80157f8:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 80157fc:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8015800:	4bc8      	ldr	r3, [pc, #800]	; (8015b24 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	2b00      	cmp	r3, #0
 8015806:	d03e      	beq.n	8015886 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8015808:	4dc7      	ldr	r5, [pc, #796]	; (8015b28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801580a:	4628      	mov	r0, r5
 801580c:	f7fd fac1 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015810:	4606      	mov	r6, r0
 8015812:	2800      	cmp	r0, #0
 8015814:	d137      	bne.n	8015886 <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8015816:	4628      	mov	r0, r5
 8015818:	f7ff fa0c 	bl	8014c34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801581c:	6829      	ldr	r1, [r5, #0]
 801581e:	686a      	ldr	r2, [r5, #4]
 8015820:	4620      	mov	r0, r4
 8015822:	f7ff fc93 	bl	801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8015826:	802e      	strh	r6, [r5, #0]
 8015828:	806e      	strh	r6, [r5, #2]
 801582a:	80ae      	strh	r6, [r5, #4]
 801582c:	80ee      	strh	r6, [r5, #6]
 801582e:	ae09      	add	r6, sp, #36	; 0x24
 8015830:	4630      	mov	r0, r6
 8015832:	f7ff fc24 	bl	801507e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8015836:	4abd      	ldr	r2, [pc, #756]	; (8015b2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8015838:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801583c:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 8015840:	8815      	ldrh	r5, [r2, #0]
 8015842:	9202      	str	r2, [sp, #8]
 8015844:	462b      	mov	r3, r5
 8015846:	429f      	cmp	r7, r3
 8015848:	d924      	bls.n	8015894 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801584a:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801584e:	2907      	cmp	r1, #7
 8015850:	d816      	bhi.n	8015880 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 8015852:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8015856:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801585a:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801585e:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8015862:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8015866:	1c4a      	adds	r2, r1, #1
 8015868:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801586c:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8015870:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 8015874:	f8a2 9002 	strh.w	r9, [r2, #2]
 8015878:	f8a2 e004 	strh.w	lr, [r2, #4]
 801587c:	f8a2 c006 	strh.w	ip, [r2, #6]
 8015880:	3301      	adds	r3, #1
 8015882:	b29b      	uxth	r3, r3
 8015884:	e7df      	b.n	8015846 <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 8015886:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801588a:	2b00      	cmp	r3, #0
 801588c:	d1cf      	bne.n	801582e <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801588e:	b01b      	add	sp, #108	; 0x6c
 8015890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015894:	462f      	mov	r7, r5
 8015896:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801589a:	42bb      	cmp	r3, r7
 801589c:	d90b      	bls.n	80158b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801589e:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 80158a2:	3701      	adds	r7, #1
 80158a4:	4620      	mov	r0, r4
 80158a6:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 80158aa:	b2bf      	uxth	r7, r7
 80158ac:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 80158b0:	f7ff fc4c 	bl	801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 80158b4:	e7ef      	b.n	8015896 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 80158b6:	4a9e      	ldr	r2, [pc, #632]	; (8015b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 80158b8:	6813      	ldr	r3, [r2, #0]
 80158ba:	4690      	mov	r8, r2
 80158bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80158c0:	2b01      	cmp	r3, #1
 80158c2:	f040 80e4 	bne.w	8015a8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 80158c6:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 80158ca:	4629      	mov	r1, r5
 80158cc:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 80158d0:	2500      	movs	r5, #0
 80158d2:	33aa      	adds	r3, #170	; 0xaa
 80158d4:	428f      	cmp	r7, r1
 80158d6:	f103 0308 	add.w	r3, r3, #8
 80158da:	dd0a      	ble.n	80158f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80158dc:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80158e0:	3101      	adds	r1, #1
 80158e2:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80158e6:	4402      	add	r2, r0
 80158e8:	b212      	sxth	r2, r2
 80158ea:	4295      	cmp	r5, r2
 80158ec:	bfb8      	it	lt
 80158ee:	4615      	movlt	r5, r2
 80158f0:	e7f0      	b.n	80158d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80158f2:	4b90      	ldr	r3, [pc, #576]	; (8015b34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80158f4:	f8df b238 	ldr.w	fp, [pc, #568]	; 8015b30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 80158f8:	881b      	ldrh	r3, [r3, #0]
 80158fa:	46d8      	mov	r8, fp
 80158fc:	2b0f      	cmp	r3, #15
 80158fe:	bf8c      	ite	hi
 8015900:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 8015904:	f04f 0a01 	movls.w	sl, #1
 8015908:	2300      	movs	r3, #0
 801590a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801590e:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 8015912:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8015916:	4438      	add	r0, r7
 8015918:	b207      	sxth	r7, r0
 801591a:	f8db 0000 	ldr.w	r0, [fp]
 801591e:	42bd      	cmp	r5, r7
 8015920:	6803      	ldr	r3, [r0, #0]
 8015922:	f340 8084 	ble.w	8015a2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8015926:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801592a:	4798      	blx	r3
 801592c:	eb07 030a 	add.w	r3, r7, sl
 8015930:	4298      	cmp	r0, r3
 8015932:	da07      	bge.n	8015944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8015934:	4285      	cmp	r5, r0
 8015936:	dd05      	ble.n	8015944 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8015938:	4287      	cmp	r7, r0
 801593a:	dd6d      	ble.n	8015a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801593c:	2f00      	cmp	r7, #0
 801593e:	dd6b      	ble.n	8015a18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8015940:	4628      	mov	r0, r5
 8015942:	e004      	b.n	801594e <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 8015944:	4287      	cmp	r7, r0
 8015946:	dcfb      	bgt.n	8015940 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 8015948:	42a8      	cmp	r0, r5
 801594a:	bfa8      	it	ge
 801594c:	4628      	movge	r0, r5
 801594e:	4b7a      	ldr	r3, [pc, #488]	; (8015b38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 8015950:	1bc0      	subs	r0, r0, r7
 8015952:	2200      	movs	r2, #0
 8015954:	f8ad 7016 	strh.w	r7, [sp, #22]
 8015958:	f9b3 3000 	ldrsh.w	r3, [r3]
 801595c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015960:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015964:	9b02      	ldr	r3, [sp, #8]
 8015966:	f8ad 001a 	strh.w	r0, [sp, #26]
 801596a:	881f      	ldrh	r7, [r3, #0]
 801596c:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015970:	42bb      	cmp	r3, r7
 8015972:	d9cc      	bls.n	801590e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8015974:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8015978:	ab07      	add	r3, sp, #28
 801597a:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801597e:	6851      	ldr	r1, [r2, #4]
 8015980:	c303      	stmia	r3!, {r0, r1}
 8015982:	a905      	add	r1, sp, #20
 8015984:	a807      	add	r0, sp, #28
 8015986:	f7ff fa8b 	bl	8014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801598a:	2800      	cmp	r0, #0
 801598c:	d04c      	beq.n	8015a28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801598e:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8015992:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8015996:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801599a:	4686      	mov	lr, r0
 801599c:	4290      	cmp	r0, r2
 801599e:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 80159a2:	4448      	add	r0, r9
 80159a4:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 80159a8:	bfb8      	it	lt
 80159aa:	4696      	movlt	lr, r2
 80159ac:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80159b0:	444a      	add	r2, r9
 80159b2:	b280      	uxth	r0, r0
 80159b4:	4299      	cmp	r1, r3
 80159b6:	468c      	mov	ip, r1
 80159b8:	b292      	uxth	r2, r2
 80159ba:	9303      	str	r3, [sp, #12]
 80159bc:	bfb8      	it	lt
 80159be:	469c      	movlt	ip, r3
 80159c0:	b203      	sxth	r3, r0
 80159c2:	fa0f f982 	sxth.w	r9, r2
 80159c6:	f8ad e01c 	strh.w	lr, [sp, #28]
 80159ca:	f8ad c01e 	strh.w	ip, [sp, #30]
 80159ce:	454b      	cmp	r3, r9
 80159d0:	bfb8      	it	lt
 80159d2:	4602      	movlt	r2, r0
 80159d4:	9b03      	ldr	r3, [sp, #12]
 80159d6:	eba2 020e 	sub.w	r2, r2, lr
 80159da:	f8ad 2020 	strh.w	r2, [sp, #32]
 80159de:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80159e2:	4411      	add	r1, r2
 80159e4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80159e8:	4413      	add	r3, r2
 80159ea:	b289      	uxth	r1, r1
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	b208      	sxth	r0, r1
 80159f0:	b21a      	sxth	r2, r3
 80159f2:	4290      	cmp	r0, r2
 80159f4:	bfb8      	it	lt
 80159f6:	460b      	movlt	r3, r1
 80159f8:	eba3 030c 	sub.w	r3, r3, ip
 80159fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8015a00:	a807      	add	r0, sp, #28
 8015a02:	f7fd f9c6 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015a06:	b920      	cbnz	r0, 8015a12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8015a08:	6823      	ldr	r3, [r4, #0]
 8015a0a:	a907      	add	r1, sp, #28
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015a10:	4798      	blx	r3
 8015a12:	3701      	adds	r7, #1
 8015a14:	b2bf      	uxth	r7, r7
 8015a16:	e7a9      	b.n	801596c <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8015a18:	f8d8 0000 	ldr.w	r0, [r8]
 8015a1c:	2101      	movs	r1, #1
 8015a1e:	6803      	ldr	r3, [r0, #0]
 8015a20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015a24:	4798      	blx	r3
 8015a26:	e772      	b.n	801590e <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 8015a28:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8015a2c:	e7e8      	b.n	8015a00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8015a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a30:	4798      	blx	r3
 8015a32:	4b42      	ldr	r3, [pc, #264]	; (8015b3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	f43f af29 	beq.w	801588e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8015a42:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 8015a46:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 8015a4a:	9b02      	ldr	r3, [sp, #8]
 8015a4c:	881b      	ldrh	r3, [r3, #0]
 8015a4e:	429d      	cmp	r5, r3
 8015a50:	f67f af1d 	bls.w	801588e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8015a54:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 8015a58:	2907      	cmp	r1, #7
 8015a5a:	d815      	bhi.n	8015a88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 8015a5c:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 8015a60:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 8015a64:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8015a68:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8015a6c:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8015a70:	1c4a      	adds	r2, r1, #1
 8015a72:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 8015a76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8015a7a:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 8015a7e:	f8a2 e002 	strh.w	lr, [r2, #2]
 8015a82:	f8a2 c004 	strh.w	ip, [r2, #4]
 8015a86:	80d7      	strh	r7, [r2, #6]
 8015a88:	3301      	adds	r3, #1
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	e7df      	b.n	8015a4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 8015a8e:	2b02      	cmp	r3, #2
 8015a90:	f040 8135 	bne.w	8015cfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015a94:	4b2a      	ldr	r3, [pc, #168]	; (8015b40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8015a96:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 8015a9a:	781b      	ldrb	r3, [r3, #0]
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	f000 809c 	beq.w	8015bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015aa2:	9b02      	ldr	r3, [sp, #8]
 8015aa4:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 8015aa8:	f8b3 b000 	ldrh.w	fp, [r3]
 8015aac:	f10b 0b01 	add.w	fp, fp, #1
 8015ab0:	fa1f fb8b 	uxth.w	fp, fp
 8015ab4:	2a00      	cmp	r2, #0
 8015ab6:	d0bc      	beq.n	8015a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015ab8:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 8015abc:	4659      	mov	r1, fp
 8015abe:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 8015ac2:	f04f 0800 	mov.w	r8, #0
 8015ac6:	441d      	add	r5, r3
 8015ac8:	b22d      	sxth	r5, r5
 8015aca:	b28b      	uxth	r3, r1
 8015acc:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 8015ad0:	429a      	cmp	r2, r3
 8015ad2:	f240 80c0 	bls.w	8015c56 <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 8015ad6:	4427      	add	r7, r4
 8015ad8:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 8015adc:	4608      	mov	r0, r1
 8015ade:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 8015ae2:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 8015ae6:	4563      	cmp	r3, ip
 8015ae8:	f340 80a2 	ble.w	8015c30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 8015aec:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 8015af0:	4465      	add	r5, ip
 8015af2:	b22d      	sxth	r5, r5
 8015af4:	429d      	cmp	r5, r3
 8015af6:	bfa8      	it	ge
 8015af8:	461d      	movge	r5, r3
 8015afa:	3101      	adds	r1, #1
 8015afc:	4680      	mov	r8, r0
 8015afe:	e7e4      	b.n	8015aca <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 8015b00:	d10b      	bne.n	8015b1a <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 8015b02:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 8015b06:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 8015b0a:	458c      	cmp	ip, r1
 8015b0c:	bfb4      	ite	lt
 8015b0e:	469c      	movlt	ip, r3
 8015b10:	46bc      	movge	ip, r7
 8015b12:	4572      	cmp	r2, lr
 8015b14:	bfb8      	it	lt
 8015b16:	4672      	movlt	r2, lr
 8015b18:	e087      	b.n	8015c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015b1a:	428a      	cmp	r2, r1
 8015b1c:	46bc      	mov	ip, r7
 8015b1e:	bfb8      	it	lt
 8015b20:	460a      	movlt	r2, r1
 8015b22:	e082      	b.n	8015c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 8015b24:	2400af6c 	.word	0x2400af6c
 8015b28:	2400af78 	.word	0x2400af78
 8015b2c:	2400004e 	.word	0x2400004e
 8015b30:	2400af34 	.word	0x2400af34
 8015b34:	2400af2a 	.word	0x2400af2a
 8015b38:	2400af28 	.word	0x2400af28
 8015b3c:	2400af32 	.word	0x2400af32
 8015b40:	2400af2c 	.word	0x2400af2c
 8015b44:	1961      	adds	r1, r4, r5
 8015b46:	ab07      	add	r3, sp, #28
 8015b48:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 8015b4c:	6849      	ldr	r1, [r1, #4]
 8015b4e:	c303      	stmia	r3!, {r0, r1}
 8015b50:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8015b54:	a807      	add	r0, sp, #28
 8015b56:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015b5a:	2b13      	cmp	r3, #19
 8015b5c:	440b      	add	r3, r1
 8015b5e:	bfd8      	it	le
 8015b60:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8015b64:	1a9b      	subs	r3, r3, r2
 8015b66:	f8ad 201c 	strh.w	r2, [sp, #28]
 8015b6a:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015b6e:	f7ff f87b 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8015b72:	a807      	add	r0, sp, #28
 8015b74:	f7fd f90d 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015b78:	bb78      	cbnz	r0, 8015bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015b7a:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 8015b7e:	4425      	add	r5, r4
 8015b80:	f8d8 0000 	ldr.w	r0, [r8]
 8015b84:	f1bc 0f14 	cmp.w	ip, #20
 8015b88:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8015b8c:	f8d0 e000 	ldr.w	lr, [r0]
 8015b90:	bfa8      	it	ge
 8015b92:	f04f 0c14 	movge.w	ip, #20
 8015b96:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8015b9a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8015b9e:	fa1f fc8c 	uxth.w	ip, ip
 8015ba2:	f8cd c000 	str.w	ip, [sp]
 8015ba6:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8015baa:	47d0      	blx	sl
 8015bac:	4682      	mov	sl, r0
 8015bae:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015bb2:	a807      	add	r0, sp, #28
 8015bb4:	f7ff f83e 	bl	8014c34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8015bb8:	6823      	ldr	r3, [r4, #0]
 8015bba:	4620      	mov	r0, r4
 8015bbc:	a907      	add	r1, sp, #28
 8015bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015bc0:	4798      	blx	r3
 8015bc2:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 8015bc6:	eba0 000a 	sub.w	r0, r0, sl
 8015bca:	b200      	sxth	r0, r0
 8015bcc:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 8015bd0:	b918      	cbnz	r0, 8015bda <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 8015bd2:	b2b9      	uxth	r1, r7
 8015bd4:	4648      	mov	r0, r9
 8015bd6:	f7ff faa5 	bl	8015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015bda:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 8015bde:	f1bb 0f00 	cmp.w	fp, #0
 8015be2:	f43f af26 	beq.w	8015a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015be6:	9b02      	ldr	r3, [sp, #8]
 8015be8:	2700      	movs	r7, #0
 8015bea:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 8015bee:	881b      	ldrh	r3, [r3, #0]
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	b299      	uxth	r1, r3
 8015bf6:	00fd      	lsls	r5, r7, #3
 8015bf8:	458b      	cmp	fp, r1
 8015bfa:	d9a3      	bls.n	8015b44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 8015bfc:	4425      	add	r5, r4
 8015bfe:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 8015c02:	469c      	mov	ip, r3
 8015c04:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 8015c08:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 8015c0c:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 8015c10:	4408      	add	r0, r1
 8015c12:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 8015c16:	4471      	add	r1, lr
 8015c18:	b200      	sxth	r0, r0
 8015c1a:	b209      	sxth	r1, r1
 8015c1c:	4288      	cmp	r0, r1
 8015c1e:	f6bf af6f 	bge.w	8015b00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 8015c22:	4586      	cmp	lr, r0
 8015c24:	4672      	mov	r2, lr
 8015c26:	bfb8      	it	lt
 8015c28:	4602      	movlt	r2, r0
 8015c2a:	3301      	adds	r3, #1
 8015c2c:	4667      	mov	r7, ip
 8015c2e:	e7e1      	b.n	8015bf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 8015c30:	d10c      	bne.n	8015c4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 8015c32:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 8015c36:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 8015c3a:	4287      	cmp	r7, r0
 8015c3c:	bfb4      	ite	lt
 8015c3e:	4608      	movlt	r0, r1
 8015c40:	4640      	movge	r0, r8
 8015c42:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 8015c46:	443b      	add	r3, r7
 8015c48:	b21b      	sxth	r3, r3
 8015c4a:	e753      	b.n	8015af4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 8015c4c:	4565      	cmp	r5, ip
 8015c4e:	4640      	mov	r0, r8
 8015c50:	bfa8      	it	ge
 8015c52:	4665      	movge	r5, ip
 8015c54:	e751      	b.n	8015afa <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 8015c56:	eb09 0007 	add.w	r0, r9, r7
 8015c5a:	4427      	add	r7, r4
 8015c5c:	9203      	str	r2, [sp, #12]
 8015c5e:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 8015c62:	f1ba 0f13 	cmp.w	sl, #19
 8015c66:	bfde      	ittt	le
 8015c68:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 8015c6c:	4455      	addle	r5, sl
 8015c6e:	b22d      	sxthle	r5, r5
 8015c70:	f7fd f88f 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015c74:	9a03      	ldr	r2, [sp, #12]
 8015c76:	2800      	cmp	r0, #0
 8015c78:	f47f af1c 	bne.w	8015ab4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 8015c7c:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 8015c80:	fa1f fa8a 	uxth.w	sl, sl
 8015c84:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015c88:	1aad      	subs	r5, r5, r2
 8015c8a:	4829      	ldr	r0, [pc, #164]	; (8015d30 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 8015c8c:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 8015c90:	2d14      	cmp	r5, #20
 8015c92:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 8015c96:	6800      	ldr	r0, [r0, #0]
 8015c98:	bfa8      	it	ge
 8015c9a:	2514      	movge	r5, #20
 8015c9c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8015ca0:	f8ad 201e 	strh.w	r2, [sp, #30]
 8015ca4:	b289      	uxth	r1, r1
 8015ca6:	f8ad 3020 	strh.w	r3, [sp, #32]
 8015caa:	b2ad      	uxth	r5, r5
 8015cac:	f8d0 c000 	ldr.w	ip, [r0]
 8015cb0:	b292      	uxth	r2, r2
 8015cb2:	4555      	cmp	r5, sl
 8015cb4:	bf94      	ite	ls
 8015cb6:	9500      	strls	r5, [sp, #0]
 8015cb8:	f8cd a000 	strhi.w	sl, [sp]
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 8015cc2:	47a8      	blx	r5
 8015cc4:	6823      	ldr	r3, [r4, #0]
 8015cc6:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8015cca:	a907      	add	r1, sp, #28
 8015ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015cce:	4620      	mov	r0, r4
 8015cd0:	4798      	blx	r3
 8015cd2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8015cd6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8015cda:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 8015cde:	1a5b      	subs	r3, r3, r1
 8015ce0:	440a      	add	r2, r1
 8015ce2:	b21b      	sxth	r3, r3
 8015ce4:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8015ce8:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	f47f aed8 	bne.w	8015aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015cf2:	fa1f f188 	uxth.w	r1, r8
 8015cf6:	4648      	mov	r0, r9
 8015cf8:	f7ff fa14 	bl	8015124 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8015cfc:	e6d1      	b.n	8015aa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 8015cfe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 8015d02:	42ab      	cmp	r3, r5
 8015d04:	f67f ae95 	bls.w	8015a32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8015d08:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 8015d0c:	ab07      	add	r3, sp, #28
 8015d0e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 8015d12:	6851      	ldr	r1, [r2, #4]
 8015d14:	c303      	stmia	r3!, {r0, r1}
 8015d16:	a807      	add	r0, sp, #28
 8015d18:	f7fd f83b 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015d1c:	b920      	cbnz	r0, 8015d28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 8015d1e:	6823      	ldr	r3, [r4, #0]
 8015d20:	a907      	add	r1, sp, #28
 8015d22:	4620      	mov	r0, r4
 8015d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015d26:	4798      	blx	r3
 8015d28:	3501      	adds	r5, #1
 8015d2a:	b2ad      	uxth	r5, r5
 8015d2c:	e7e7      	b.n	8015cfe <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 8015d2e:	bf00      	nop
 8015d30:	2400af34 	.word	0x2400af34

08015d34 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8015d34:	4b03      	ldr	r3, [pc, #12]	; (8015d44 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8015d36:	2200      	movs	r2, #0
 8015d38:	801a      	strh	r2, [r3, #0]
 8015d3a:	805a      	strh	r2, [r3, #2]
 8015d3c:	809a      	strh	r2, [r3, #4]
 8015d3e:	80da      	strh	r2, [r3, #6]
 8015d40:	4770      	bx	lr
 8015d42:	bf00      	nop
 8015d44:	2400af78 	.word	0x2400af78

08015d48 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8015d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d4c:	b09d      	sub	sp, #116	; 0x74
 8015d4e:	4606      	mov	r6, r0
 8015d50:	4614      	mov	r4, r2
 8015d52:	468a      	mov	sl, r1
 8015d54:	a803      	add	r0, sp, #12
 8015d56:	461d      	mov	r5, r3
 8015d58:	f000 fd64 	bl	8016824 <_ZN8touchgfx12TextProviderC1Ev>
 8015d5c:	6833      	ldr	r3, [r6, #0]
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8015d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d66:	4798      	blx	r3
 8015d68:	6833      	ldr	r3, [r6, #0]
 8015d6a:	4607      	mov	r7, r0
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015d70:	4798      	blx	r3
 8015d72:	462a      	mov	r2, r5
 8015d74:	2500      	movs	r5, #0
 8015d76:	4621      	mov	r1, r4
 8015d78:	9000      	str	r0, [sp, #0]
 8015d7a:	463b      	mov	r3, r7
 8015d7c:	462c      	mov	r4, r5
 8015d7e:	46a9      	mov	r9, r5
 8015d80:	46a8      	mov	r8, r5
 8015d82:	a803      	add	r0, sp, #12
 8015d84:	f000 fda1 	bl	80168ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015d88:	2300      	movs	r3, #0
 8015d8a:	9302      	str	r3, [sp, #8]
 8015d8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8015d90:	429c      	cmp	r4, r3
 8015d92:	d002      	beq.n	8015d9a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8015d94:	455c      	cmp	r4, fp
 8015d96:	bf18      	it	ne
 8015d98:	4625      	movne	r5, r4
 8015d9a:	ab02      	add	r3, sp, #8
 8015d9c:	4632      	mov	r2, r6
 8015d9e:	4651      	mov	r1, sl
 8015da0:	a803      	add	r0, sp, #12
 8015da2:	f001 f887 	bl	8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015da6:	4604      	mov	r4, r0
 8015da8:	b108      	cbz	r0, 8015dae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8015daa:	280a      	cmp	r0, #10
 8015dac:	d10a      	bne.n	8015dc4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8015dae:	45c1      	cmp	r9, r8
 8015db0:	bf38      	it	cc
 8015db2:	46c1      	movcc	r9, r8
 8015db4:	f04f 0800 	mov.w	r8, #0
 8015db8:	2c00      	cmp	r4, #0
 8015dba:	d1e5      	bne.n	8015d88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015dbc:	4648      	mov	r0, r9
 8015dbe:	b01d      	add	sp, #116	; 0x74
 8015dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dc4:	9a02      	ldr	r2, [sp, #8]
 8015dc6:	2a00      	cmp	r2, #0
 8015dc8:	d0de      	beq.n	8015d88 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8015dca:	7b57      	ldrb	r7, [r2, #13]
 8015dcc:	4629      	mov	r1, r5
 8015dce:	6833      	ldr	r3, [r6, #0]
 8015dd0:	007f      	lsls	r7, r7, #1
 8015dd2:	8894      	ldrh	r4, [r2, #4]
 8015dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015dd6:	f407 7080 	and.w	r0, r7, #256	; 0x100
 8015dda:	7a97      	ldrb	r7, [r2, #10]
 8015ddc:	4307      	orrs	r7, r0
 8015dde:	4630      	mov	r0, r6
 8015de0:	4798      	blx	r3
 8015de2:	4438      	add	r0, r7
 8015de4:	4480      	add	r8, r0
 8015de6:	fa1f f888 	uxth.w	r8, r8
 8015dea:	e7e5      	b.n	8015db8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08015dec <_ZNK8touchgfx4Font12getCharWidthEt>:
 8015dec:	b508      	push	{r3, lr}
 8015dee:	6803      	ldr	r3, [r0, #0]
 8015df0:	68db      	ldr	r3, [r3, #12]
 8015df2:	4798      	blx	r3
 8015df4:	b128      	cbz	r0, 8015e02 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8015df6:	7b43      	ldrb	r3, [r0, #13]
 8015df8:	7a80      	ldrb	r0, [r0, #10]
 8015dfa:	005b      	lsls	r3, r3, #1
 8015dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015e00:	4318      	orrs	r0, r3
 8015e02:	bd08      	pop	{r3, pc}

08015e04 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8015e04:	b40e      	push	{r1, r2, r3}
 8015e06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e08:	b09e      	sub	sp, #120	; 0x78
 8015e0a:	4605      	mov	r5, r0
 8015e0c:	ab23      	add	r3, sp, #140	; 0x8c
 8015e0e:	a805      	add	r0, sp, #20
 8015e10:	f853 4b04 	ldr.w	r4, [r3], #4
 8015e14:	9303      	str	r3, [sp, #12]
 8015e16:	f000 fd05 	bl	8016824 <_ZN8touchgfx12TextProviderC1Ev>
 8015e1a:	682b      	ldr	r3, [r5, #0]
 8015e1c:	4628      	mov	r0, r5
 8015e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e20:	4798      	blx	r3
 8015e22:	682b      	ldr	r3, [r5, #0]
 8015e24:	4606      	mov	r6, r0
 8015e26:	4628      	mov	r0, r5
 8015e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e2a:	4798      	blx	r3
 8015e2c:	4633      	mov	r3, r6
 8015e2e:	4621      	mov	r1, r4
 8015e30:	ae1e      	add	r6, sp, #120	; 0x78
 8015e32:	2400      	movs	r4, #0
 8015e34:	9000      	str	r0, [sp, #0]
 8015e36:	9a03      	ldr	r2, [sp, #12]
 8015e38:	a805      	add	r0, sp, #20
 8015e3a:	f000 fd46 	bl	80168ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015e3e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8015e42:	462a      	mov	r2, r5
 8015e44:	4633      	mov	r3, r6
 8015e46:	4621      	mov	r1, r4
 8015e48:	a805      	add	r0, sp, #20
 8015e4a:	f001 f833 	bl	8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015e4e:	b300      	cbz	r0, 8015e92 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8015e50:	280a      	cmp	r0, #10
 8015e52:	d01a      	beq.n	8015e8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015e54:	9f04      	ldr	r7, [sp, #16]
 8015e56:	b1c7      	cbz	r7, 8015e8a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8015e58:	7b78      	ldrb	r0, [r7, #13]
 8015e5a:	7a3b      	ldrb	r3, [r7, #8]
 8015e5c:	00c1      	lsls	r1, r0, #3
 8015e5e:	88aa      	ldrh	r2, [r5, #4]
 8015e60:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8015e64:	4319      	orrs	r1, r3
 8015e66:	0643      	lsls	r3, r0, #25
 8015e68:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8015e6c:	bf48      	it	mi
 8015e6e:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8015e72:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8015e76:	bf48      	it	mi
 8015e78:	b219      	sxthmi	r1, r3
 8015e7a:	79fb      	ldrb	r3, [r7, #7]
 8015e7c:	4303      	orrs	r3, r0
 8015e7e:	4413      	add	r3, r2
 8015e80:	1a5b      	subs	r3, r3, r1
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	42a3      	cmp	r3, r4
 8015e86:	bfc8      	it	gt
 8015e88:	b21c      	sxthgt	r4, r3
 8015e8a:	4633      	mov	r3, r6
 8015e8c:	462a      	mov	r2, r5
 8015e8e:	2100      	movs	r1, #0
 8015e90:	e7da      	b.n	8015e48 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8015e92:	b2a0      	uxth	r0, r4
 8015e94:	b01e      	add	sp, #120	; 0x78
 8015e96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015e9a:	b003      	add	sp, #12
 8015e9c:	4770      	bx	lr

08015e9e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8015e9e:	b40e      	push	{r1, r2, r3}
 8015ea0:	b570      	push	{r4, r5, r6, lr}
 8015ea2:	b09d      	sub	sp, #116	; 0x74
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	ab21      	add	r3, sp, #132	; 0x84
 8015ea8:	a803      	add	r0, sp, #12
 8015eaa:	f853 5b04 	ldr.w	r5, [r3], #4
 8015eae:	9302      	str	r3, [sp, #8]
 8015eb0:	f000 fcb8 	bl	8016824 <_ZN8touchgfx12TextProviderC1Ev>
 8015eb4:	6823      	ldr	r3, [r4, #0]
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015eba:	4798      	blx	r3
 8015ebc:	6823      	ldr	r3, [r4, #0]
 8015ebe:	4606      	mov	r6, r0
 8015ec0:	4620      	mov	r0, r4
 8015ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015ec4:	2401      	movs	r4, #1
 8015ec6:	4798      	blx	r3
 8015ec8:	4633      	mov	r3, r6
 8015eca:	9000      	str	r0, [sp, #0]
 8015ecc:	4629      	mov	r1, r5
 8015ece:	9a02      	ldr	r2, [sp, #8]
 8015ed0:	a803      	add	r0, sp, #12
 8015ed2:	f000 fcfa 	bl	80168ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015ed6:	a803      	add	r0, sp, #12
 8015ed8:	f001 f86c 	bl	8016fb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015edc:	b2a3      	uxth	r3, r4
 8015ede:	b138      	cbz	r0, 8015ef0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8015ee0:	280a      	cmp	r0, #10
 8015ee2:	a803      	add	r0, sp, #12
 8015ee4:	bf04      	itt	eq
 8015ee6:	3301      	addeq	r3, #1
 8015ee8:	b21c      	sxtheq	r4, r3
 8015eea:	f001 f863 	bl	8016fb4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8015eee:	e7f5      	b.n	8015edc <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	b01d      	add	sp, #116	; 0x74
 8015ef4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015ef8:	b003      	add	sp, #12
 8015efa:	4770      	bx	lr

08015efc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8015efc:	b40e      	push	{r1, r2, r3}
 8015efe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015f00:	b09e      	sub	sp, #120	; 0x78
 8015f02:	4604      	mov	r4, r0
 8015f04:	ab23      	add	r3, sp, #140	; 0x8c
 8015f06:	a805      	add	r0, sp, #20
 8015f08:	f853 5b04 	ldr.w	r5, [r3], #4
 8015f0c:	9303      	str	r3, [sp, #12]
 8015f0e:	f000 fc89 	bl	8016824 <_ZN8touchgfx12TextProviderC1Ev>
 8015f12:	6823      	ldr	r3, [r4, #0]
 8015f14:	4620      	mov	r0, r4
 8015f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f18:	4798      	blx	r3
 8015f1a:	6823      	ldr	r3, [r4, #0]
 8015f1c:	4606      	mov	r6, r0
 8015f1e:	4620      	mov	r0, r4
 8015f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f22:	4798      	blx	r3
 8015f24:	4633      	mov	r3, r6
 8015f26:	4629      	mov	r1, r5
 8015f28:	9000      	str	r0, [sp, #0]
 8015f2a:	9a03      	ldr	r2, [sp, #12]
 8015f2c:	a805      	add	r0, sp, #20
 8015f2e:	f000 fccc 	bl	80168ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8015f32:	ad1e      	add	r5, sp, #120	; 0x78
 8015f34:	2100      	movs	r1, #0
 8015f36:	26ff      	movs	r6, #255	; 0xff
 8015f38:	4622      	mov	r2, r4
 8015f3a:	a805      	add	r0, sp, #20
 8015f3c:	f845 1d68 	str.w	r1, [r5, #-104]!
 8015f40:	462b      	mov	r3, r5
 8015f42:	f000 ffb7 	bl	8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015f46:	b1d8      	cbz	r0, 8015f80 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 8015f48:	280a      	cmp	r0, #10
 8015f4a:	d012      	beq.n	8015f72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015f4c:	9804      	ldr	r0, [sp, #16]
 8015f4e:	b180      	cbz	r0, 8015f72 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 8015f50:	7b47      	ldrb	r7, [r0, #13]
 8015f52:	7922      	ldrb	r2, [r4, #4]
 8015f54:	00fb      	lsls	r3, r7, #3
 8015f56:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015f5a:	7a03      	ldrb	r3, [r0, #8]
 8015f5c:	430b      	orrs	r3, r1
 8015f5e:	0679      	lsls	r1, r7, #25
 8015f60:	bf44      	itt	mi
 8015f62:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015f66:	b21b      	sxthmi	r3, r3
 8015f68:	1ad3      	subs	r3, r2, r3
 8015f6a:	b2db      	uxtb	r3, r3
 8015f6c:	429e      	cmp	r6, r3
 8015f6e:	bf28      	it	cs
 8015f70:	461e      	movcs	r6, r3
 8015f72:	462b      	mov	r3, r5
 8015f74:	4622      	mov	r2, r4
 8015f76:	2100      	movs	r1, #0
 8015f78:	a805      	add	r0, sp, #20
 8015f7a:	f000 ff9b 	bl	8016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015f7e:	e7e2      	b.n	8015f46 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 8015f80:	4630      	mov	r0, r6
 8015f82:	b01e      	add	sp, #120	; 0x78
 8015f84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8015f88:	b003      	add	sp, #12
 8015f8a:	4770      	bx	lr

08015f8c <_ZNK8touchgfx8Drawable10invalidateEv>:
 8015f8c:	b513      	push	{r0, r1, r4, lr}
 8015f8e:	6803      	ldr	r3, [r0, #0]
 8015f90:	2400      	movs	r4, #0
 8015f92:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8015f96:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8015f9a:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015f9e:	4669      	mov	r1, sp
 8015fa0:	691b      	ldr	r3, [r3, #16]
 8015fa2:	9400      	str	r4, [sp, #0]
 8015fa4:	f8ad 2006 	strh.w	r2, [sp, #6]
 8015fa8:	4798      	blx	r3
 8015faa:	b002      	add	sp, #8
 8015fac:	bd10      	pop	{r4, pc}

08015fae <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8015fae:	b538      	push	{r3, r4, r5, lr}
 8015fb0:	680b      	ldr	r3, [r1, #0]
 8015fb2:	460c      	mov	r4, r1
 8015fb4:	4605      	mov	r5, r0
 8015fb6:	68db      	ldr	r3, [r3, #12]
 8015fb8:	4798      	blx	r3
 8015fba:	6823      	ldr	r3, [r4, #0]
 8015fbc:	4620      	mov	r0, r4
 8015fbe:	4629      	mov	r1, r5
 8015fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fc2:	4798      	blx	r3
 8015fc4:	4628      	mov	r0, r5
 8015fc6:	bd38      	pop	{r3, r4, r5, pc}

08015fc8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8015fc8:	b410      	push	{r4}
 8015fca:	880a      	ldrh	r2, [r1, #0]
 8015fcc:	8884      	ldrh	r4, [r0, #4]
 8015fce:	4422      	add	r2, r4
 8015fd0:	800a      	strh	r2, [r1, #0]
 8015fd2:	884a      	ldrh	r2, [r1, #2]
 8015fd4:	88c4      	ldrh	r4, [r0, #6]
 8015fd6:	4422      	add	r2, r4
 8015fd8:	804a      	strh	r2, [r1, #2]
 8015fda:	6940      	ldr	r0, [r0, #20]
 8015fdc:	b120      	cbz	r0, 8015fe8 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8015fde:	6803      	ldr	r3, [r0, #0]
 8015fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fe6:	4718      	bx	r3
 8015fe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8015fee:	b570      	push	{r4, r5, r6, lr}
 8015ff0:	8882      	ldrh	r2, [r0, #4]
 8015ff2:	460c      	mov	r4, r1
 8015ff4:	880b      	ldrh	r3, [r1, #0]
 8015ff6:	4605      	mov	r5, r0
 8015ff8:	4413      	add	r3, r2
 8015ffa:	800b      	strh	r3, [r1, #0]
 8015ffc:	884b      	ldrh	r3, [r1, #2]
 8015ffe:	88c2      	ldrh	r2, [r0, #6]
 8016000:	4413      	add	r3, r2
 8016002:	804b      	strh	r3, [r1, #2]
 8016004:	1d01      	adds	r1, r0, #4
 8016006:	4620      	mov	r0, r4
 8016008:	f7fc fe80 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801600c:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016010:	2b00      	cmp	r3, #0
 8016012:	dd0b      	ble.n	801602c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016014:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8016018:	2b00      	cmp	r3, #0
 801601a:	dd07      	ble.n	801602c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801601c:	6968      	ldr	r0, [r5, #20]
 801601e:	b128      	cbz	r0, 801602c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8016020:	6803      	ldr	r3, [r0, #0]
 8016022:	4621      	mov	r1, r4
 8016024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016026:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801602a:	4718      	bx	r3
 801602c:	bd70      	pop	{r4, r5, r6, pc}
	...

08016030 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8016030:	b570      	push	{r4, r5, r6, lr}
 8016032:	8882      	ldrh	r2, [r0, #4]
 8016034:	460c      	mov	r4, r1
 8016036:	880b      	ldrh	r3, [r1, #0]
 8016038:	4605      	mov	r5, r0
 801603a:	4413      	add	r3, r2
 801603c:	800b      	strh	r3, [r1, #0]
 801603e:	884b      	ldrh	r3, [r1, #2]
 8016040:	88c2      	ldrh	r2, [r0, #6]
 8016042:	4413      	add	r3, r2
 8016044:	804b      	strh	r3, [r1, #2]
 8016046:	1d01      	adds	r1, r0, #4
 8016048:	4620      	mov	r0, r4
 801604a:	f7fc fe5f 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801604e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8016052:	2b00      	cmp	r3, #0
 8016054:	dd18      	ble.n	8016088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016056:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801605a:	2b00      	cmp	r3, #0
 801605c:	dd14      	ble.n	8016088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801605e:	6968      	ldr	r0, [r5, #20]
 8016060:	b128      	cbz	r0, 801606e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8016062:	6803      	ldr	r3, [r0, #0]
 8016064:	4621      	mov	r1, r4
 8016066:	691b      	ldr	r3, [r3, #16]
 8016068:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801606c:	4718      	bx	r3
 801606e:	4b07      	ldr	r3, [pc, #28]	; (801608c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	3304      	adds	r3, #4
 8016074:	429d      	cmp	r5, r3
 8016076:	d107      	bne.n	8016088 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8016078:	f7fe fff0 	bl	801505c <_ZN8touchgfx11Application11getInstanceEv>
 801607c:	6821      	ldr	r1, [r4, #0]
 801607e:	6862      	ldr	r2, [r4, #4]
 8016080:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016084:	f7ff b862 	b.w	801514c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8016088:	bd70      	pop	{r4, r5, r6, pc}
 801608a:	bf00      	nop
 801608c:	2400af70 	.word	0x2400af70

08016090 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8016090:	b570      	push	{r4, r5, r6, lr}
 8016092:	4604      	mov	r4, r0
 8016094:	4616      	mov	r6, r2
 8016096:	460d      	mov	r5, r1
 8016098:	b901      	cbnz	r1, 801609c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801609a:	b192      	cbz	r2, 80160c2 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801609c:	6823      	ldr	r3, [r4, #0]
 801609e:	4620      	mov	r0, r4
 80160a0:	699b      	ldr	r3, [r3, #24]
 80160a2:	4798      	blx	r3
 80160a4:	88e2      	ldrh	r2, [r4, #6]
 80160a6:	88a1      	ldrh	r1, [r4, #4]
 80160a8:	4620      	mov	r0, r4
 80160aa:	4432      	add	r2, r6
 80160ac:	4429      	add	r1, r5
 80160ae:	b212      	sxth	r2, r2
 80160b0:	b209      	sxth	r1, r1
 80160b2:	f7ee fe9e 	bl	8004df2 <_ZN8touchgfx8Drawable5setXYEss>
 80160b6:	6823      	ldr	r3, [r4, #0]
 80160b8:	4620      	mov	r0, r4
 80160ba:	699b      	ldr	r3, [r3, #24]
 80160bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160c0:	4718      	bx	r3
 80160c2:	bd70      	pop	{r4, r5, r6, pc}

080160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80160c4:	b510      	push	{r4, lr}
 80160c6:	2300      	movs	r3, #0
 80160c8:	4604      	mov	r4, r0
 80160ca:	4608      	mov	r0, r1
 80160cc:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80160d0:	8023      	strh	r3, [r4, #0]
 80160d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80160d6:	8063      	strh	r3, [r4, #2]
 80160d8:	6803      	ldr	r3, [r0, #0]
 80160da:	80a1      	strh	r1, [r4, #4]
 80160dc:	4621      	mov	r1, r4
 80160de:	80e2      	strh	r2, [r4, #6]
 80160e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80160e2:	4798      	blx	r3
 80160e4:	4620      	mov	r0, r4
 80160e6:	bd10      	pop	{r4, pc}

080160e8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 80160e8:	b530      	push	{r4, r5, lr}
 80160ea:	8083      	strh	r3, [r0, #4]
 80160ec:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80160f0:	f89d 5010 	ldrb.w	r5, [sp, #16]
 80160f4:	7183      	strb	r3, [r0, #6]
 80160f6:	79c3      	ldrb	r3, [r0, #7]
 80160f8:	6101      	str	r1, [r0, #16]
 80160fa:	f365 0306 	bfi	r3, r5, #0, #7
 80160fe:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8016102:	8282      	strh	r2, [r0, #20]
 8016104:	f365 13c7 	bfi	r3, r5, #7, #1
 8016108:	71c3      	strb	r3, [r0, #7]
 801610a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801610e:	7203      	strb	r3, [r0, #8]
 8016110:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8016114:	7243      	strb	r3, [r0, #9]
 8016116:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801611a:	8143      	strh	r3, [r0, #10]
 801611c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8016120:	8183      	strh	r3, [r0, #12]
 8016122:	4b01      	ldr	r3, [pc, #4]	; (8016128 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 8016124:	6003      	str	r3, [r0, #0]
 8016126:	bd30      	pop	{r4, r5, pc}
 8016128:	080260a4 	.word	0x080260a4

0801612c <_ZNK8touchgfx9ConstFont4findEt>:
 801612c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801612e:	6904      	ldr	r4, [r0, #16]
 8016130:	b3bc      	cbz	r4, 80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016132:	88a3      	ldrh	r3, [r4, #4]
 8016134:	8a82      	ldrh	r2, [r0, #20]
 8016136:	1acb      	subs	r3, r1, r3
 8016138:	f102 32ff 	add.w	r2, r2, #4294967295
 801613c:	d431      	bmi.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801613e:	4293      	cmp	r3, r2
 8016140:	dd0c      	ble.n	801615c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8016142:	230e      	movs	r3, #14
 8016144:	fb03 4302 	mla	r3, r3, r2, r4
 8016148:	889b      	ldrh	r3, [r3, #4]
 801614a:	1a5b      	subs	r3, r3, r1
 801614c:	1ad3      	subs	r3, r2, r3
 801614e:	429a      	cmp	r2, r3
 8016150:	db27      	blt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016152:	2b00      	cmp	r3, #0
 8016154:	bfbc      	itt	lt
 8016156:	2302      	movlt	r3, #2
 8016158:	fb92 f3f3 	sdivlt	r3, r2, r3
 801615c:	2500      	movs	r5, #0
 801615e:	260e      	movs	r6, #14
 8016160:	4295      	cmp	r5, r2
 8016162:	dc1e      	bgt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016164:	fb06 4003 	mla	r0, r6, r3, r4
 8016168:	8887      	ldrh	r7, [r0, #4]
 801616a:	42b9      	cmp	r1, r7
 801616c:	d01a      	beq.n	80161a4 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801616e:	d20d      	bcs.n	801618c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8016170:	1e5a      	subs	r2, r3, #1
 8016172:	4295      	cmp	r5, r2
 8016174:	dc15      	bgt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016176:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801617a:	1a5b      	subs	r3, r3, r1
 801617c:	1ad3      	subs	r3, r2, r3
 801617e:	429a      	cmp	r2, r3
 8016180:	db0f      	blt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016182:	429d      	cmp	r5, r3
 8016184:	ddec      	ble.n	8016160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8016186:	1953      	adds	r3, r2, r5
 8016188:	105b      	asrs	r3, r3, #1
 801618a:	e7e9      	b.n	8016160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801618c:	1c5d      	adds	r5, r3, #1
 801618e:	42aa      	cmp	r2, r5
 8016190:	db07      	blt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8016192:	8a43      	ldrh	r3, [r0, #18]
 8016194:	1acb      	subs	r3, r1, r3
 8016196:	442b      	add	r3, r5
 8016198:	429d      	cmp	r5, r3
 801619a:	dc02      	bgt.n	80161a2 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801619c:	429a      	cmp	r2, r3
 801619e:	dadf      	bge.n	8016160 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 80161a0:	e7f1      	b.n	8016186 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 80161a2:	2000      	movs	r0, #0
 80161a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080161a6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 80161a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80161a8:	4604      	mov	r4, r0
 80161aa:	4617      	mov	r7, r2
 80161ac:	461e      	mov	r6, r3
 80161ae:	b911      	cbnz	r1, 80161b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 80161b0:	2500      	movs	r5, #0
 80161b2:	4628      	mov	r0, r5
 80161b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80161b6:	290a      	cmp	r1, #10
 80161b8:	d0fa      	beq.n	80161b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80161ba:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80161be:	4291      	cmp	r1, r2
 80161c0:	d0f6      	beq.n	80161b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80161c2:	f242 020b 	movw	r2, #8203	; 0x200b
 80161c6:	4291      	cmp	r1, r2
 80161c8:	d0f2      	beq.n	80161b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80161ca:	f7ff ffaf 	bl	801612c <_ZNK8touchgfx9ConstFont4findEt>
 80161ce:	4605      	mov	r5, r0
 80161d0:	b950      	cbnz	r0, 80161e8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80161d2:	6823      	ldr	r3, [r4, #0]
 80161d4:	4620      	mov	r0, r4
 80161d6:	691b      	ldr	r3, [r3, #16]
 80161d8:	4798      	blx	r3
 80161da:	4601      	mov	r1, r0
 80161dc:	4620      	mov	r0, r4
 80161de:	f7ff ffa5 	bl	801612c <_ZNK8touchgfx9ConstFont4findEt>
 80161e2:	4605      	mov	r5, r0
 80161e4:	2800      	cmp	r0, #0
 80161e6:	d0e3      	beq.n	80161b0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80161e8:	6823      	ldr	r3, [r4, #0]
 80161ea:	4629      	mov	r1, r5
 80161ec:	4620      	mov	r0, r4
 80161ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80161f0:	4798      	blx	r3
 80161f2:	6038      	str	r0, [r7, #0]
 80161f4:	6823      	ldr	r3, [r4, #0]
 80161f6:	4620      	mov	r0, r4
 80161f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80161fa:	4798      	blx	r3
 80161fc:	7030      	strb	r0, [r6, #0]
 80161fe:	e7d8      	b.n	80161b2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08016200 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8016200:	2000      	movs	r0, #0
 8016202:	4770      	bx	lr

08016204 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8016204:	2001      	movs	r0, #1
 8016206:	4770      	bx	lr

08016208 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8016208:	2002      	movs	r0, #2
 801620a:	4770      	bx	lr

0801620c <_ZN8touchgfx12GestureEventD1Ev>:
 801620c:	4770      	bx	lr

0801620e <_ZN8touchgfx9DragEventD1Ev>:
 801620e:	4770      	bx	lr

08016210 <_ZN8touchgfx10ClickEventD1Ev>:
 8016210:	4770      	bx	lr

08016212 <_ZN8touchgfx10ClickEventD0Ev>:
 8016212:	b510      	push	{r4, lr}
 8016214:	4604      	mov	r4, r0
 8016216:	210c      	movs	r1, #12
 8016218:	f00d f88b 	bl	8023332 <_ZdlPvj>
 801621c:	4620      	mov	r0, r4
 801621e:	bd10      	pop	{r4, pc}

08016220 <_ZN8touchgfx9DragEventD0Ev>:
 8016220:	b510      	push	{r4, lr}
 8016222:	4604      	mov	r4, r0
 8016224:	2110      	movs	r1, #16
 8016226:	f00d f884 	bl	8023332 <_ZdlPvj>
 801622a:	4620      	mov	r0, r4
 801622c:	bd10      	pop	{r4, pc}

0801622e <_ZN8touchgfx12GestureEventD0Ev>:
 801622e:	b510      	push	{r4, lr}
 8016230:	4604      	mov	r4, r0
 8016232:	210c      	movs	r1, #12
 8016234:	f00d f87d 	bl	8023332 <_ZdlPvj>
 8016238:	4620      	mov	r0, r4
 801623a:	bd10      	pop	{r4, pc}

0801623c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801623c:	b530      	push	{r4, r5, lr}
 801623e:	460d      	mov	r5, r1
 8016240:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016242:	b087      	sub	sp, #28
 8016244:	4604      	mov	r4, r0
 8016246:	b301      	cbz	r1, 801628a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8016248:	a801      	add	r0, sp, #4
 801624a:	f7ff ff3b 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801624e:	892a      	ldrh	r2, [r5, #8]
 8016250:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8016254:	7928      	ldrb	r0, [r5, #4]
 8016256:	1ad2      	subs	r2, r2, r3
 8016258:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801625a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801625e:	441a      	add	r2, r3
 8016260:	896b      	ldrh	r3, [r5, #10]
 8016262:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8016266:	f88d 0010 	strb.w	r0, [sp, #16]
 801626a:	1b5b      	subs	r3, r3, r5
 801626c:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801626e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8016270:	442b      	add	r3, r5
 8016272:	4d07      	ldr	r5, [pc, #28]	; (8016290 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8016274:	f8ad 1012 	strh.w	r1, [sp, #18]
 8016278:	a903      	add	r1, sp, #12
 801627a:	9503      	str	r5, [sp, #12]
 801627c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016280:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016284:	6803      	ldr	r3, [r0, #0]
 8016286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016288:	4798      	blx	r3
 801628a:	b007      	add	sp, #28
 801628c:	bd30      	pop	{r4, r5, pc}
 801628e:	bf00      	nop
 8016290:	08026124 	.word	0x08026124

08016294 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8016294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016298:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801629a:	b08a      	sub	sp, #40	; 0x28
 801629c:	4604      	mov	r4, r0
 801629e:	460d      	mov	r5, r1
 80162a0:	b113      	cbz	r3, 80162a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80162a2:	790b      	ldrb	r3, [r1, #4]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d044      	beq.n	8016332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80162a8:	f104 0804 	add.w	r8, r4, #4
 80162ac:	a803      	add	r0, sp, #12
 80162ae:	4641      	mov	r1, r8
 80162b0:	f7ff ff08 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162b4:	792b      	ldrb	r3, [r5, #4]
 80162b6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80162ba:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80162be:	b983      	cbnz	r3, 80162e2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80162c0:	f104 0336 	add.w	r3, r4, #54	; 0x36
 80162c4:	892a      	ldrh	r2, [r5, #8]
 80162c6:	88e9      	ldrh	r1, [r5, #6]
 80162c8:	4640      	mov	r0, r8
 80162ca:	1b92      	subs	r2, r2, r6
 80162cc:	9301      	str	r3, [sp, #4]
 80162ce:	1bc9      	subs	r1, r1, r7
 80162d0:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80162d4:	b212      	sxth	r2, r2
 80162d6:	9300      	str	r3, [sp, #0]
 80162d8:	b209      	sxth	r1, r1
 80162da:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80162de:	f7fc fc33 	bl	8012b48 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80162e2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80162e4:	b329      	cbz	r1, 8016332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80162e6:	a805      	add	r0, sp, #20
 80162e8:	f7ff feec 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80162ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80162f0:	792b      	ldrb	r3, [r5, #4]
 80162f2:	a907      	add	r1, sp, #28
 80162f4:	1abf      	subs	r7, r7, r2
 80162f6:	88ea      	ldrh	r2, [r5, #6]
 80162f8:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80162fa:	4417      	add	r7, r2
 80162fc:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 80162fe:	f88d 3020 	strb.w	r3, [sp, #32]
 8016302:	4417      	add	r7, r2
 8016304:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8016308:	1ab6      	subs	r6, r6, r2
 801630a:	892a      	ldrh	r2, [r5, #8]
 801630c:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8016310:	4416      	add	r6, r2
 8016312:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016314:	4416      	add	r6, r2
 8016316:	4a08      	ldr	r2, [pc, #32]	; (8016338 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8016318:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801631c:	2600      	movs	r6, #0
 801631e:	9207      	str	r2, [sp, #28]
 8016320:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8016324:	6803      	ldr	r3, [r0, #0]
 8016326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016328:	4798      	blx	r3
 801632a:	792b      	ldrb	r3, [r5, #4]
 801632c:	b10b      	cbz	r3, 8016332 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801632e:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8016332:	b00a      	add	sp, #40	; 0x28
 8016334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016338:	080260fc 	.word	0x080260fc

0801633c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016340:	460c      	mov	r4, r1
 8016342:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8016344:	b088      	sub	sp, #32
 8016346:	4605      	mov	r5, r0
 8016348:	2900      	cmp	r1, #0
 801634a:	d06d      	beq.n	8016428 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801634c:	4668      	mov	r0, sp
 801634e:	f7ff feb9 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016352:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8016354:	88e3      	ldrh	r3, [r4, #6]
 8016356:	f9bd 8000 	ldrsh.w	r8, [sp]
 801635a:	440b      	add	r3, r1
 801635c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8016360:	b21b      	sxth	r3, r3
 8016362:	4543      	cmp	r3, r8
 8016364:	db31      	blt.n	80163ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016366:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801636a:	44c4      	add	ip, r8
 801636c:	fa0f fc8c 	sxth.w	ip, ip
 8016370:	4563      	cmp	r3, ip
 8016372:	da2a      	bge.n	80163ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016374:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8016376:	8926      	ldrh	r6, [r4, #8]
 8016378:	4416      	add	r6, r2
 801637a:	b236      	sxth	r6, r6
 801637c:	42be      	cmp	r6, r7
 801637e:	db24      	blt.n	80163ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8016380:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8016384:	4438      	add	r0, r7
 8016386:	b200      	sxth	r0, r0
 8016388:	4286      	cmp	r6, r0
 801638a:	da1e      	bge.n	80163ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801638c:	8963      	ldrh	r3, [r4, #10]
 801638e:	4419      	add	r1, r3
 8016390:	b209      	sxth	r1, r1
 8016392:	4541      	cmp	r1, r8
 8016394:	db08      	blt.n	80163a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8016396:	4561      	cmp	r1, ip
 8016398:	da06      	bge.n	80163a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801639a:	89a3      	ldrh	r3, [r4, #12]
 801639c:	441a      	add	r2, r3
 801639e:	b212      	sxth	r2, r2
 80163a0:	42ba      	cmp	r2, r7
 80163a2:	db01      	blt.n	80163a8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80163a4:	4282      	cmp	r2, r0
 80163a6:	db10      	blt.n	80163ca <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80163a8:	4b21      	ldr	r3, [pc, #132]	; (8016430 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80163aa:	a904      	add	r1, sp, #16
 80163ac:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80163ae:	9304      	str	r3, [sp, #16]
 80163b0:	2302      	movs	r3, #2
 80163b2:	f88d 3014 	strb.w	r3, [sp, #20]
 80163b6:	2300      	movs	r3, #0
 80163b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80163bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80163c0:	f8ad 301a 	strh.w	r3, [sp, #26]
 80163c4:	6803      	ldr	r3, [r0, #0]
 80163c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80163c8:	4798      	blx	r3
 80163ca:	1d29      	adds	r1, r5, #4
 80163cc:	a802      	add	r0, sp, #8
 80163ce:	f7ff fe79 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80163d2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80163d6:	88e0      	ldrh	r0, [r4, #6]
 80163d8:	eba3 0808 	sub.w	r8, r3, r8
 80163dc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80163e0:	7921      	ldrb	r1, [r4, #4]
 80163e2:	fa1f f888 	uxth.w	r8, r8
 80163e6:	1bdf      	subs	r7, r3, r7
 80163e8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 80163ec:	b2bb      	uxth	r3, r7
 80163ee:	4440      	add	r0, r8
 80163f0:	8922      	ldrh	r2, [r4, #8]
 80163f2:	8967      	ldrh	r7, [r4, #10]
 80163f4:	4460      	add	r0, ip
 80163f6:	89a4      	ldrh	r4, [r4, #12]
 80163f8:	441a      	add	r2, r3
 80163fa:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 80163fc:	44b8      	add	r8, r7
 80163fe:	4423      	add	r3, r4
 8016400:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016404:	4432      	add	r2, r6
 8016406:	44e0      	add	r8, ip
 8016408:	4433      	add	r3, r6
 801640a:	4c0a      	ldr	r4, [pc, #40]	; (8016434 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801640c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801640e:	f88d 1014 	strb.w	r1, [sp, #20]
 8016412:	a904      	add	r1, sp, #16
 8016414:	9404      	str	r4, [sp, #16]
 8016416:	f8ad 2018 	strh.w	r2, [sp, #24]
 801641a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801641e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016422:	6803      	ldr	r3, [r0, #0]
 8016424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016426:	4798      	blx	r3
 8016428:	b008      	add	sp, #32
 801642a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801642e:	bf00      	nop
 8016430:	080260fc 	.word	0x080260fc
 8016434:	08026110 	.word	0x08026110

08016438 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8016438:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801643a:	4604      	mov	r4, r0
 801643c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8016440:	3201      	adds	r2, #1
 8016442:	d112      	bne.n	801646a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8016444:	2500      	movs	r5, #0
 8016446:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801644a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801644e:	6803      	ldr	r3, [r0, #0]
 8016450:	9500      	str	r5, [sp, #0]
 8016452:	466d      	mov	r5, sp
 8016454:	f8ad 1004 	strh.w	r1, [sp, #4]
 8016458:	f8ad 2006 	strh.w	r2, [sp, #6]
 801645c:	4629      	mov	r1, r5
 801645e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016460:	4798      	blx	r3
 8016462:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016466:	e884 0003 	stmia.w	r4, {r0, r1}
 801646a:	4620      	mov	r0, r4
 801646c:	b003      	add	sp, #12
 801646e:	bd30      	pop	{r4, r5, pc}

08016470 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8016470:	b513      	push	{r0, r1, r4, lr}
 8016472:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8016476:	4604      	mov	r4, r0
 8016478:	3301      	adds	r3, #1
 801647a:	d109      	bne.n	8016490 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801647c:	4601      	mov	r1, r0
 801647e:	4668      	mov	r0, sp
 8016480:	f7ff fe20 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016484:	f8bd 3000 	ldrh.w	r3, [sp]
 8016488:	8423      	strh	r3, [r4, #32]
 801648a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801648e:	8463      	strh	r3, [r4, #34]	; 0x22
 8016490:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8016494:	b002      	add	sp, #8
 8016496:	bd10      	pop	{r4, pc}

08016498 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8016498:	b513      	push	{r0, r1, r4, lr}
 801649a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801649e:	4604      	mov	r4, r0
 80164a0:	3301      	adds	r3, #1
 80164a2:	d109      	bne.n	80164b8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80164a4:	4601      	mov	r1, r0
 80164a6:	4668      	mov	r0, sp
 80164a8:	f7ff fe0c 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80164ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80164b0:	8423      	strh	r3, [r4, #32]
 80164b2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80164b6:	8463      	strh	r3, [r4, #34]	; 0x22
 80164b8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 80164bc:	b002      	add	sp, #8
 80164be:	bd10      	pop	{r4, pc}

080164c0 <_ZN8touchgfx6ScreenC1Ev>:
 80164c0:	b570      	push	{r4, r5, r6, lr}
 80164c2:	4b17      	ldr	r3, [pc, #92]	; (8016520 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80164c4:	4605      	mov	r5, r0
 80164c6:	4a17      	ldr	r2, [pc, #92]	; (8016524 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80164c8:	2101      	movs	r1, #1
 80164ca:	f845 3b04 	str.w	r3, [r5], #4
 80164ce:	2300      	movs	r3, #0
 80164d0:	6042      	str	r2, [r0, #4]
 80164d2:	4604      	mov	r4, r0
 80164d4:	8103      	strh	r3, [r0, #8]
 80164d6:	8143      	strh	r3, [r0, #10]
 80164d8:	8183      	strh	r3, [r0, #12]
 80164da:	81c3      	strh	r3, [r0, #14]
 80164dc:	8203      	strh	r3, [r0, #16]
 80164de:	8243      	strh	r3, [r0, #18]
 80164e0:	8283      	strh	r3, [r0, #20]
 80164e2:	82c3      	strh	r3, [r0, #22]
 80164e4:	6203      	str	r3, [r0, #32]
 80164e6:	8483      	strh	r3, [r0, #36]	; 0x24
 80164e8:	84c3      	strh	r3, [r0, #38]	; 0x26
 80164ea:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 80164ee:	6343      	str	r3, [r0, #52]	; 0x34
 80164f0:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 80164f4:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 80164f8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80164fc:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8016500:	4b09      	ldr	r3, [pc, #36]	; (8016528 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8016502:	4628      	mov	r0, r5
 8016504:	f9b3 6000 	ldrsh.w	r6, [r3]
 8016508:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801650a:	4a08      	ldr	r2, [pc, #32]	; (801652c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801650c:	f9b2 1000 	ldrsh.w	r1, [r2]
 8016510:	4798      	blx	r3
 8016512:	6863      	ldr	r3, [r4, #4]
 8016514:	4628      	mov	r0, r5
 8016516:	4631      	mov	r1, r6
 8016518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801651a:	4798      	blx	r3
 801651c:	4620      	mov	r0, r4
 801651e:	bd70      	pop	{r4, r5, r6, pc}
 8016520:	08026138 	.word	0x08026138
 8016524:	08025c64 	.word	0x08025c64
 8016528:	2400af2a 	.word	0x2400af2a
 801652c:	2400af28 	.word	0x2400af28

08016530 <_ZN8touchgfx6Screen4drawEv>:
 8016530:	4b09      	ldr	r3, [pc, #36]	; (8016558 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8016532:	b507      	push	{r0, r1, r2, lr}
 8016534:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016538:	2100      	movs	r1, #0
 801653a:	4b08      	ldr	r3, [pc, #32]	; (801655c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801653c:	9100      	str	r1, [sp, #0]
 801653e:	4669      	mov	r1, sp
 8016540:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016544:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016548:	f8ad 3006 	strh.w	r3, [sp, #6]
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	689b      	ldr	r3, [r3, #8]
 8016550:	4798      	blx	r3
 8016552:	b003      	add	sp, #12
 8016554:	f85d fb04 	ldr.w	pc, [sp], #4
 8016558:	2400af28 	.word	0x2400af28
 801655c:	2400af2a 	.word	0x2400af2a

08016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8016560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016564:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8016568:	b089      	sub	sp, #36	; 0x24
 801656a:	4680      	mov	r8, r0
 801656c:	460c      	mov	r4, r1
 801656e:	2b00      	cmp	r3, #0
 8016570:	4615      	mov	r5, r2
 8016572:	dd0e      	ble.n	8016592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016574:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8016578:	2b00      	cmp	r3, #0
 801657a:	dd0a      	ble.n	8016592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801657c:	4628      	mov	r0, r5
 801657e:	f7ff ff5b 	bl	8016438 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016582:	4621      	mov	r1, r4
 8016584:	f7fe fc8c 	bl	8014ea0 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016588:	69eb      	ldr	r3, [r5, #28]
 801658a:	b928      	cbnz	r0, 8016598 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801658c:	461d      	mov	r5, r3
 801658e:	2b00      	cmp	r3, #0
 8016590:	d1f4      	bne.n	801657c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8016592:	b009      	add	sp, #36	; 0x24
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016598:	ae04      	add	r6, sp, #16
 801659a:	2b00      	cmp	r3, #0
 801659c:	f000 80b5 	beq.w	801670a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80165a0:	682b      	ldr	r3, [r5, #0]
 80165a2:	4629      	mov	r1, r5
 80165a4:	a802      	add	r0, sp, #8
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	4798      	blx	r3
 80165aa:	4628      	mov	r0, r5
 80165ac:	f7ff ff60 	bl	8016470 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80165b0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80165b4:	4407      	add	r7, r0
 80165b6:	4628      	mov	r0, r5
 80165b8:	f7ff ff6e 	bl	8016498 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80165bc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80165c0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80165c4:	b23f      	sxth	r7, r7
 80165c6:	4418      	add	r0, r3
 80165c8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80165cc:	4621      	mov	r1, r4
 80165ce:	f8ad 2014 	strh.w	r2, [sp, #20]
 80165d2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80165d6:	4630      	mov	r0, r6
 80165d8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80165dc:	f8ad 7010 	strh.w	r7, [sp, #16]
 80165e0:	f7fc fb94 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 80165e4:	4628      	mov	r0, r5
 80165e6:	f7ff ff27 	bl	8016438 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80165ea:	ab06      	add	r3, sp, #24
 80165ec:	4602      	mov	r2, r0
 80165ee:	e896 0003 	ldmia.w	r6, {r0, r1}
 80165f2:	e883 0003 	stmia.w	r3, {r0, r1}
 80165f6:	4611      	mov	r1, r2
 80165f8:	4618      	mov	r0, r3
 80165fa:	f7fc fb87 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 80165fe:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8016602:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016606:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801660a:	4299      	cmp	r1, r3
 801660c:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8016610:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8016614:	d10b      	bne.n	801662e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016616:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801661a:	4552      	cmp	r2, sl
 801661c:	d107      	bne.n	801662e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801661e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016622:	455a      	cmp	r2, fp
 8016624:	d103      	bne.n	801662e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8016626:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801662a:	454a      	cmp	r2, r9
 801662c:	d06d      	beq.n	801670a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801662e:	f1bb 0f00 	cmp.w	fp, #0
 8016632:	dd65      	ble.n	8016700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8016634:	f1b9 0f00 	cmp.w	r9, #0
 8016638:	dd62      	ble.n	8016700 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801663a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801663e:	fa1f f08a 	uxth.w	r0, sl
 8016642:	4552      	cmp	r2, sl
 8016644:	9000      	str	r0, [sp, #0]
 8016646:	da12      	bge.n	801666e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8016648:	9301      	str	r3, [sp, #4]
 801664a:	9b00      	ldr	r3, [sp, #0]
 801664c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8016650:	f8ad 2012 	strh.w	r2, [sp, #18]
 8016654:	1a9a      	subs	r2, r3, r2
 8016656:	f8ad 1010 	strh.w	r1, [sp, #16]
 801665a:	4631      	mov	r1, r6
 801665c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016660:	4640      	mov	r0, r8
 8016662:	f8ad 2016 	strh.w	r2, [sp, #22]
 8016666:	69ea      	ldr	r2, [r5, #28]
 8016668:	f7ff ff7a 	bl	8016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801666c:	9b01      	ldr	r3, [sp, #4]
 801666e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8016672:	b29f      	uxth	r7, r3
 8016674:	429a      	cmp	r2, r3
 8016676:	da0d      	bge.n	8016694 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8016678:	f8ad 2010 	strh.w	r2, [sp, #16]
 801667c:	1aba      	subs	r2, r7, r2
 801667e:	f8ad a012 	strh.w	sl, [sp, #18]
 8016682:	4631      	mov	r1, r6
 8016684:	f8ad 2014 	strh.w	r2, [sp, #20]
 8016688:	4640      	mov	r0, r8
 801668a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801668e:	69ea      	ldr	r2, [r5, #28]
 8016690:	f7ff ff66 	bl	8016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8016694:	8822      	ldrh	r2, [r4, #0]
 8016696:	445f      	add	r7, fp
 8016698:	88a3      	ldrh	r3, [r4, #4]
 801669a:	b2bf      	uxth	r7, r7
 801669c:	4413      	add	r3, r2
 801669e:	b23a      	sxth	r2, r7
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	b219      	sxth	r1, r3
 80166a4:	4291      	cmp	r1, r2
 80166a6:	dd0d      	ble.n	80166c4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 80166a8:	1bdb      	subs	r3, r3, r7
 80166aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80166ae:	f8ad a012 	strh.w	sl, [sp, #18]
 80166b2:	4631      	mov	r1, r6
 80166b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80166b8:	4640      	mov	r0, r8
 80166ba:	f8ad 9016 	strh.w	r9, [sp, #22]
 80166be:	69ea      	ldr	r2, [r5, #28]
 80166c0:	f7ff ff4e 	bl	8016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80166c4:	88e2      	ldrh	r2, [r4, #6]
 80166c6:	8863      	ldrh	r3, [r4, #2]
 80166c8:	4413      	add	r3, r2
 80166ca:	9a00      	ldr	r2, [sp, #0]
 80166cc:	444a      	add	r2, r9
 80166ce:	b29b      	uxth	r3, r3
 80166d0:	fa1f f982 	uxth.w	r9, r2
 80166d4:	b219      	sxth	r1, r3
 80166d6:	fa0f f289 	sxth.w	r2, r9
 80166da:	428a      	cmp	r2, r1
 80166dc:	da15      	bge.n	801670a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80166de:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80166e2:	eba3 0309 	sub.w	r3, r3, r9
 80166e6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80166ea:	f8ad 1014 	strh.w	r1, [sp, #20]
 80166ee:	4631      	mov	r1, r6
 80166f0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80166f4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80166f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80166fc:	69ea      	ldr	r2, [r5, #28]
 80166fe:	e001      	b.n	8016704 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8016700:	69ea      	ldr	r2, [r5, #28]
 8016702:	4621      	mov	r1, r4
 8016704:	4640      	mov	r0, r8
 8016706:	f7ff ff2b 	bl	8016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801670a:	4628      	mov	r0, r5
 801670c:	f7ff fe94 	bl	8016438 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8016710:	6861      	ldr	r1, [r4, #4]
 8016712:	4602      	mov	r2, r0
 8016714:	4633      	mov	r3, r6
 8016716:	6820      	ldr	r0, [r4, #0]
 8016718:	c303      	stmia	r3!, {r0, r1}
 801671a:	4611      	mov	r1, r2
 801671c:	4630      	mov	r0, r6
 801671e:	f7fc faf5 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 8016722:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8016726:	2b00      	cmp	r3, #0
 8016728:	f77f af33 	ble.w	8016592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801672c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8016730:	2b00      	cmp	r3, #0
 8016732:	f77f af2e 	ble.w	8016592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8016736:	4628      	mov	r0, r5
 8016738:	f7ff fe9a 	bl	8016470 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801673c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8016740:	1a18      	subs	r0, r3, r0
 8016742:	f8ad 0010 	strh.w	r0, [sp, #16]
 8016746:	4628      	mov	r0, r5
 8016748:	f7ff fea6 	bl	8016498 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801674c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8016750:	4631      	mov	r1, r6
 8016752:	1a18      	subs	r0, r3, r0
 8016754:	f8ad 0012 	strh.w	r0, [sp, #18]
 8016758:	4628      	mov	r0, r5
 801675a:	682b      	ldr	r3, [r5, #0]
 801675c:	689b      	ldr	r3, [r3, #8]
 801675e:	4798      	blx	r3
 8016760:	e717      	b.n	8016592 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08016762 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8016762:	b570      	push	{r4, r5, r6, lr}
 8016764:	1d06      	adds	r6, r0, #4
 8016766:	b086      	sub	sp, #24
 8016768:	460c      	mov	r4, r1
 801676a:	2300      	movs	r3, #0
 801676c:	4631      	mov	r1, r6
 801676e:	4605      	mov	r5, r0
 8016770:	a802      	add	r0, sp, #8
 8016772:	9301      	str	r3, [sp, #4]
 8016774:	f7ff fca6 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016778:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801677c:	8822      	ldrh	r2, [r4, #0]
 801677e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8016782:	1ad2      	subs	r2, r2, r3
 8016784:	8863      	ldrh	r3, [r4, #2]
 8016786:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801678a:	1a5b      	subs	r3, r3, r1
 801678c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8016790:	f8ad 2010 	strh.w	r2, [sp, #16]
 8016794:	aa01      	add	r2, sp, #4
 8016796:	f8ad 0014 	strh.w	r0, [sp, #20]
 801679a:	4630      	mov	r0, r6
 801679c:	f8ad 1016 	strh.w	r1, [sp, #22]
 80167a0:	a904      	add	r1, sp, #16
 80167a2:	f8ad 3012 	strh.w	r3, [sp, #18]
 80167a6:	f7fc fb89 	bl	8012ebc <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 80167aa:	9a01      	ldr	r2, [sp, #4]
 80167ac:	b11a      	cbz	r2, 80167b6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 80167ae:	4621      	mov	r1, r4
 80167b0:	4628      	mov	r0, r5
 80167b2:	f7ff fed5 	bl	8016560 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80167b6:	b006      	add	sp, #24
 80167b8:	bd70      	pop	{r4, r5, r6, pc}

080167ba <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80167ba:	4602      	mov	r2, r0
 80167bc:	b530      	push	{r4, r5, lr}
 80167be:	4604      	mov	r4, r0
 80167c0:	b085      	sub	sp, #20
 80167c2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80167c6:	460d      	mov	r5, r1
 80167c8:	466b      	mov	r3, sp
 80167ca:	6851      	ldr	r1, [r2, #4]
 80167cc:	c303      	stmia	r3!, {r0, r1}
 80167ce:	4629      	mov	r1, r5
 80167d0:	4668      	mov	r0, sp
 80167d2:	f7fc fa9b 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 80167d6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80167da:	b12b      	cbz	r3, 80167e8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80167dc:	4669      	mov	r1, sp
 80167de:	4620      	mov	r0, r4
 80167e0:	f7ff ffbf 	bl	8016762 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80167e4:	b005      	add	sp, #20
 80167e6:	bd30      	pop	{r4, r5, pc}
 80167e8:	3404      	adds	r4, #4
 80167ea:	a802      	add	r0, sp, #8
 80167ec:	4621      	mov	r1, r4
 80167ee:	f7ff fc69 	bl	80160c4 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80167f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80167f6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80167fa:	4669      	mov	r1, sp
 80167fc:	4620      	mov	r0, r4
 80167fe:	1a9b      	subs	r3, r3, r2
 8016800:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8016804:	f8ad 3000 	strh.w	r3, [sp]
 8016808:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801680c:	1a9b      	subs	r3, r3, r2
 801680e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016812:	f7fc fb1a 	bl	8012e4a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8016816:	e7e5      	b.n	80167e4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08016818 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8016818:	460b      	mov	r3, r1
 801681a:	680a      	ldr	r2, [r1, #0]
 801681c:	1d01      	adds	r1, r0, #4
 801681e:	6992      	ldr	r2, [r2, #24]
 8016820:	4618      	mov	r0, r3
 8016822:	4710      	bx	r2

08016824 <_ZN8touchgfx12TextProviderC1Ev>:
 8016824:	b538      	push	{r3, r4, r5, lr}
 8016826:	2500      	movs	r5, #0
 8016828:	2302      	movs	r3, #2
 801682a:	4604      	mov	r4, r0
 801682c:	220e      	movs	r2, #14
 801682e:	7403      	strb	r3, [r0, #16]
 8016830:	4629      	mov	r1, r5
 8016832:	6145      	str	r5, [r0, #20]
 8016834:	7605      	strb	r5, [r0, #24]
 8016836:	83c5      	strh	r5, [r0, #30]
 8016838:	8405      	strh	r5, [r0, #32]
 801683a:	86c5      	strh	r5, [r0, #54]	; 0x36
 801683c:	8705      	strh	r5, [r0, #56]	; 0x38
 801683e:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8016840:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 8016844:	e9c0 5500 	strd	r5, r5, [r0]
 8016848:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801684c:	304c      	adds	r0, #76	; 0x4c
 801684e:	f00c ff25 	bl	802369c <memset>
 8016852:	2301      	movs	r3, #1
 8016854:	4620      	mov	r0, r4
 8016856:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801685a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801685e:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 8016862:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8016866:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801686a:	f7ef fcdd 	bl	8006228 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801686e:	4620      	mov	r0, r4
 8016870:	bd38      	pop	{r3, r4, r5, pc}

08016872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8016872:	b530      	push	{r4, r5, lr}
 8016874:	2500      	movs	r5, #0
 8016876:	2401      	movs	r4, #1
 8016878:	6843      	ldr	r3, [r0, #4]
 801687a:	b913      	cbnz	r3, 8016882 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801687c:	6803      	ldr	r3, [r0, #0]
 801687e:	b313      	cbz	r3, 80168c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8016880:	6043      	str	r3, [r0, #4]
 8016882:	7e03      	ldrb	r3, [r0, #24]
 8016884:	b143      	cbz	r3, 8016898 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8016886:	6943      	ldr	r3, [r0, #20]
 8016888:	b12b      	cbz	r3, 8016896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801688a:	881a      	ldrh	r2, [r3, #0]
 801688c:	b11a      	cbz	r2, 8016896 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801688e:	1c9a      	adds	r2, r3, #2
 8016890:	6142      	str	r2, [r0, #20]
 8016892:	8818      	ldrh	r0, [r3, #0]
 8016894:	bd30      	pop	{r4, r5, pc}
 8016896:	7605      	strb	r5, [r0, #24]
 8016898:	6843      	ldr	r3, [r0, #4]
 801689a:	8819      	ldrh	r1, [r3, #0]
 801689c:	b199      	cbz	r1, 80168c6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801689e:	1c9a      	adds	r2, r3, #2
 80168a0:	2902      	cmp	r1, #2
 80168a2:	6042      	str	r2, [r0, #4]
 80168a4:	d1f5      	bne.n	8016892 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 80168a6:	7c03      	ldrb	r3, [r0, #16]
 80168a8:	2b01      	cmp	r3, #1
 80168aa:	d8e5      	bhi.n	8016878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80168ac:	1c5a      	adds	r2, r3, #1
 80168ae:	3302      	adds	r3, #2
 80168b0:	7402      	strb	r2, [r0, #16]
 80168b2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80168b6:	6143      	str	r3, [r0, #20]
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d0dd      	beq.n	8016878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80168bc:	881b      	ldrh	r3, [r3, #0]
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d0da      	beq.n	8016878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80168c2:	7604      	strb	r4, [r0, #24]
 80168c4:	e7d8      	b.n	8016878 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80168c6:	2000      	movs	r0, #0
 80168c8:	e7e4      	b.n	8016894 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080168ca <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80168ca:	6001      	str	r1, [r0, #0]
 80168cc:	2100      	movs	r1, #0
 80168ce:	b430      	push	{r4, r5}
 80168d0:	6041      	str	r1, [r0, #4]
 80168d2:	6815      	ldr	r5, [r2, #0]
 80168d4:	6085      	str	r5, [r0, #8]
 80168d6:	6852      	ldr	r2, [r2, #4]
 80168d8:	6443      	str	r3, [r0, #68]	; 0x44
 80168da:	9b02      	ldr	r3, [sp, #8]
 80168dc:	60c2      	str	r2, [r0, #12]
 80168de:	7401      	strb	r1, [r0, #16]
 80168e0:	6141      	str	r1, [r0, #20]
 80168e2:	7601      	strb	r1, [r0, #24]
 80168e4:	8701      	strh	r1, [r0, #56]	; 0x38
 80168e6:	8401      	strh	r1, [r0, #32]
 80168e8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80168ec:	6483      	str	r3, [r0, #72]	; 0x48
 80168ee:	bc30      	pop	{r4, r5}
 80168f0:	f7ef bc9a 	b.w	8006228 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080168f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80168f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168f6:	4605      	mov	r5, r0
 80168f8:	4608      	mov	r0, r1
 80168fa:	b1f1      	cbz	r1, 801693a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80168fc:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 8016900:	460b      	mov	r3, r1
 8016902:	f101 0708 	add.w	r7, r1, #8
 8016906:	4622      	mov	r2, r4
 8016908:	6818      	ldr	r0, [r3, #0]
 801690a:	3308      	adds	r3, #8
 801690c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8016910:	4626      	mov	r6, r4
 8016912:	42bb      	cmp	r3, r7
 8016914:	c603      	stmia	r6!, {r0, r1}
 8016916:	4634      	mov	r4, r6
 8016918:	d1f6      	bne.n	8016908 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801691a:	6818      	ldr	r0, [r3, #0]
 801691c:	6030      	str	r0, [r6, #0]
 801691e:	4610      	mov	r0, r2
 8016920:	889b      	ldrh	r3, [r3, #4]
 8016922:	80b3      	strh	r3, [r6, #4]
 8016924:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 8016928:	015b      	lsls	r3, r3, #5
 801692a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801692e:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8016932:	430b      	orrs	r3, r1
 8016934:	425b      	negs	r3, r3
 8016936:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801693a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801693c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801693c:	b538      	push	{r3, r4, r5, lr}
 801693e:	460c      	mov	r4, r1
 8016940:	6811      	ldr	r1, [r2, #0]
 8016942:	4610      	mov	r0, r2
 8016944:	68cd      	ldr	r5, [r1, #12]
 8016946:	4619      	mov	r1, r3
 8016948:	47a8      	blx	r5
 801694a:	2800      	cmp	r0, #0
 801694c:	bf08      	it	eq
 801694e:	4620      	moveq	r0, r4
 8016950:	bd38      	pop	{r3, r4, r5, pc}
	...

08016954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8016954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016956:	4604      	mov	r4, r0
 8016958:	4615      	mov	r5, r2
 801695a:	4608      	mov	r0, r1
 801695c:	b93a      	cbnz	r2, 801696e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801695e:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016962:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8016966:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801696a:	4628      	mov	r0, r5
 801696c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801696e:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8016972:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8016976:	8893      	ldrh	r3, [r2, #4]
 8016978:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801697c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016980:	79ee      	ldrb	r6, [r5, #7]
 8016982:	4316      	orrs	r6, r2
 8016984:	19da      	adds	r2, r3, r7
 8016986:	b291      	uxth	r1, r2
 8016988:	b2b7      	uxth	r7, r6
 801698a:	291d      	cmp	r1, #29
 801698c:	d87b      	bhi.n	8016a86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801698e:	2201      	movs	r2, #1
 8016990:	10f6      	asrs	r6, r6, #3
 8016992:	408a      	lsls	r2, r1
 8016994:	4974      	ldr	r1, [pc, #464]	; (8016b68 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 8016996:	420a      	tst	r2, r1
 8016998:	d12e      	bne.n	80169f8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801699a:	f412 7f60 	tst.w	r2, #896	; 0x380
 801699e:	d072      	beq.n	8016a86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 80169a0:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 80169a4:	462b      	mov	r3, r5
 80169a6:	f105 0e08 	add.w	lr, r5, #8
 80169aa:	4615      	mov	r5, r2
 80169ac:	6818      	ldr	r0, [r3, #0]
 80169ae:	3308      	adds	r3, #8
 80169b0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80169b4:	4694      	mov	ip, r2
 80169b6:	4573      	cmp	r3, lr
 80169b8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80169bc:	4662      	mov	r2, ip
 80169be:	d1f5      	bne.n	80169ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80169c0:	6818      	ldr	r0, [r3, #0]
 80169c2:	f8cc 0000 	str.w	r0, [ip]
 80169c6:	889b      	ldrh	r3, [r3, #4]
 80169c8:	f8ac 3004 	strh.w	r3, [ip, #4]
 80169cc:	b2b3      	uxth	r3, r6
 80169ce:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80169d2:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80169d6:	1aca      	subs	r2, r1, r3
 80169d8:	1bcf      	subs	r7, r1, r7
 80169da:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80169de:	b292      	uxth	r2, r2
 80169e0:	1afb      	subs	r3, r7, r3
 80169e2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80169e6:	10d2      	asrs	r2, r2, #3
 80169e8:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80169ec:	4302      	orrs	r2, r0
 80169ee:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80169f2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80169f6:	e7b8      	b.n	801696a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80169f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80169fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80169fe:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 8016a00:	f640 6333 	movw	r3, #3635	; 0xe33
 8016a04:	4299      	cmp	r1, r3
 8016a06:	d110      	bne.n	8016a2a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 8016a08:	6803      	ldr	r3, [r0, #0]
 8016a0a:	68db      	ldr	r3, [r3, #12]
 8016a0c:	4798      	blx	r3
 8016a0e:	7b41      	ldrb	r1, [r0, #13]
 8016a10:	00cb      	lsls	r3, r1, #3
 8016a12:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016a16:	7a03      	ldrb	r3, [r0, #8]
 8016a18:	0648      	lsls	r0, r1, #25
 8016a1a:	ea43 0302 	orr.w	r3, r3, r2
 8016a1e:	bf44      	itt	mi
 8016a20:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016a24:	b21b      	sxthmi	r3, r3
 8016a26:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016a2a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8016a2e:	462a      	mov	r2, r5
 8016a30:	f105 0c08 	add.w	ip, r5, #8
 8016a34:	443b      	add	r3, r7
 8016a36:	4433      	add	r3, r6
 8016a38:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 8016a3c:	b29b      	uxth	r3, r3
 8016a3e:	4635      	mov	r5, r6
 8016a40:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016a44:	6810      	ldr	r0, [r2, #0]
 8016a46:	3208      	adds	r2, #8
 8016a48:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8016a4c:	4637      	mov	r7, r6
 8016a4e:	4562      	cmp	r2, ip
 8016a50:	c703      	stmia	r7!, {r0, r1}
 8016a52:	463e      	mov	r6, r7
 8016a54:	d1f6      	bne.n	8016a44 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 8016a56:	6810      	ldr	r0, [r2, #0]
 8016a58:	6038      	str	r0, [r7, #0]
 8016a5a:	8892      	ldrh	r2, [r2, #4]
 8016a5c:	80ba      	strh	r2, [r7, #4]
 8016a5e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016a62:	10db      	asrs	r3, r3, #3
 8016a64:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016a68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016a6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016a70:	4313      	orrs	r3, r2
 8016a72:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 8016a76:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016a7a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8016a7e:	1a9b      	subs	r3, r3, r2
 8016a80:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8016a84:	e771      	b.n	801696a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8016a86:	f023 0204 	bic.w	r2, r3, #4
 8016a8a:	f640 611b 	movw	r1, #3611	; 0xe1b
 8016a8e:	428a      	cmp	r2, r1
 8016a90:	d003      	beq.n	8016a9a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 8016a92:	f640 621d 	movw	r2, #3613	; 0xe1d
 8016a96:	4293      	cmp	r3, r2
 8016a98:	d120      	bne.n	8016adc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 8016a9a:	3b01      	subs	r3, #1
 8016a9c:	4602      	mov	r2, r0
 8016a9e:	4629      	mov	r1, r5
 8016aa0:	4620      	mov	r0, r4
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	f7ff ff4a 	bl	801693c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016aa8:	7b41      	ldrb	r1, [r0, #13]
 8016aaa:	00cb      	lsls	r3, r1, #3
 8016aac:	0649      	lsls	r1, r1, #25
 8016aae:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016ab2:	7a03      	ldrb	r3, [r0, #8]
 8016ab4:	ea43 0302 	orr.w	r3, r3, r2
 8016ab8:	bf44      	itt	mi
 8016aba:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016abe:	b21b      	sxthmi	r3, r3
 8016ac0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016ac4:	7b6b      	ldrb	r3, [r5, #13]
 8016ac6:	7aaa      	ldrb	r2, [r5, #10]
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016ace:	4313      	orrs	r3, r2
 8016ad0:	115a      	asrs	r2, r3, #5
 8016ad2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8016ad6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016ada:	e035      	b.n	8016b48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 8016adc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 8016ae0:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8016ae4:	f402 7180 	and.w	r1, r2, #256	; 0x100
 8016ae8:	7a2a      	ldrb	r2, [r5, #8]
 8016aea:	ea42 0201 	orr.w	r2, r2, r1
 8016aee:	f640 6109 	movw	r1, #3593	; 0xe09
 8016af2:	bf1c      	itt	ne
 8016af4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 8016af8:	b212      	sxthne	r2, r2
 8016afa:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8016afe:	f023 0210 	bic.w	r2, r3, #16
 8016b02:	428a      	cmp	r2, r1
 8016b04:	d003      	beq.n	8016b0e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8016b06:	f640 6213 	movw	r2, #3603	; 0xe13
 8016b0a:	4293      	cmp	r3, r2
 8016b0c:	d129      	bne.n	8016b62 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 8016b0e:	7b6e      	ldrb	r6, [r5, #13]
 8016b10:	4629      	mov	r1, r5
 8016b12:	0076      	lsls	r6, r6, #1
 8016b14:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8016b18:	7aae      	ldrb	r6, [r5, #10]
 8016b1a:	4316      	orrs	r6, r2
 8016b1c:	f640 6213 	movw	r2, #3603	; 0xe13
 8016b20:	4293      	cmp	r3, r2
 8016b22:	4602      	mov	r2, r0
 8016b24:	4620      	mov	r0, r4
 8016b26:	bf16      	itet	ne
 8016b28:	f103 33ff 	addne.w	r3, r3, #4294967295
 8016b2c:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8016b30:	b29b      	uxthne	r3, r3
 8016b32:	f7ff ff03 	bl	801693c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8016b36:	7b43      	ldrb	r3, [r0, #13]
 8016b38:	7a82      	ldrb	r2, [r0, #10]
 8016b3a:	005b      	lsls	r3, r3, #1
 8016b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016b40:	4313      	orrs	r3, r2
 8016b42:	1af6      	subs	r6, r6, r3
 8016b44:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 8016b48:	7b69      	ldrb	r1, [r5, #13]
 8016b4a:	00cb      	lsls	r3, r1, #3
 8016b4c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016b50:	7a2b      	ldrb	r3, [r5, #8]
 8016b52:	4313      	orrs	r3, r2
 8016b54:	064a      	lsls	r2, r1, #25
 8016b56:	bf44      	itt	mi
 8016b58:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016b5c:	b21b      	sxthmi	r3, r3
 8016b5e:	1bdb      	subs	r3, r3, r7
 8016b60:	e747      	b.n	80169f2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8016b62:	2300      	movs	r3, #0
 8016b64:	e7b7      	b.n	8016ad6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 8016b66:	bf00      	nop
 8016b68:	3fc00079 	.word	0x3fc00079

08016b6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8016b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b70:	4604      	mov	r4, r0
 8016b72:	b942      	cbnz	r2, 8016b86 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8016b74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016b78:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 8016b7c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8016b80:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8016b84:	e047      	b.n	8016c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016b86:	7b51      	ldrb	r1, [r2, #13]
 8016b88:	8893      	ldrh	r3, [r2, #4]
 8016b8a:	010d      	lsls	r5, r1, #4
 8016b8c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8016b90:	79d5      	ldrb	r5, [r2, #7]
 8016b92:	4305      	orrs	r5, r0
 8016b94:	2d04      	cmp	r5, #4
 8016b96:	bfcc      	ite	gt
 8016b98:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 8016b9c:	f04f 0e01 	movle.w	lr, #1
 8016ba0:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8016ba4:	f200 80ab 	bhi.w	8016cfe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8016ba8:	f240 60e7 	movw	r0, #1767	; 0x6e7
 8016bac:	4283      	cmp	r3, r0
 8016bae:	d216      	bcs.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bb0:	f240 605b 	movw	r0, #1627	; 0x65b
 8016bb4:	4283      	cmp	r3, r0
 8016bb6:	d859      	bhi.n	8016c6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8016bb8:	f240 6057 	movw	r0, #1623	; 0x657
 8016bbc:	4283      	cmp	r3, r0
 8016bbe:	d20e      	bcs.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bc0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016bc4:	d24a      	bcs.n	8016c5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8016bc6:	f240 604e 	movw	r0, #1614	; 0x64e
 8016bca:	4283      	cmp	r3, r0
 8016bcc:	d207      	bcs.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016bce:	f240 601a 	movw	r0, #1562	; 0x61a
 8016bd2:	4283      	cmp	r3, r0
 8016bd4:	d02a      	beq.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016bd6:	d821      	bhi.n	8016c1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8016bd8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8016bdc:	d35b      	bcc.n	8016c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016bde:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 8016be2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016be6:	f040 80d0 	bne.w	8016d8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016bea:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 8016bee:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016bf2:	f040 80ca 	bne.w	8016d8a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8016bf6:	00cb      	lsls	r3, r1, #3
 8016bf8:	0649      	lsls	r1, r1, #25
 8016bfa:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016bfe:	7a13      	ldrb	r3, [r2, #8]
 8016c00:	ea43 0300 	orr.w	r3, r3, r0
 8016c04:	bf44      	itt	mi
 8016c06:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c0a:	b21b      	sxthmi	r3, r3
 8016c0c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016c10:	1b5d      	subs	r5, r3, r5
 8016c12:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016c16:	4610      	mov	r0, r2
 8016c18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c1c:	f240 604b 	movw	r0, #1611	; 0x64b
 8016c20:	4283      	cmp	r3, r0
 8016c22:	d338      	bcc.n	8016c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016c24:	f240 604c 	movw	r0, #1612	; 0x64c
 8016c28:	4283      	cmp	r3, r0
 8016c2a:	d9d8      	bls.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c2c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8016c30:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8016c34:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016c38:	f040 80f3 	bne.w	8016e22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016c3c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016c40:	f040 80ef 	bne.w	8016e22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8016c44:	00cb      	lsls	r3, r1, #3
 8016c46:	064e      	lsls	r6, r1, #25
 8016c48:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016c4c:	7a13      	ldrb	r3, [r2, #8]
 8016c4e:	ea43 0300 	orr.w	r3, r3, r0
 8016c52:	bf44      	itt	mi
 8016c54:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016c58:	b21b      	sxthmi	r3, r3
 8016c5a:	e7d9      	b.n	8016c10 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8016c5c:	f240 6054 	movw	r0, #1620	; 0x654
 8016c60:	4283      	cmp	r3, r0
 8016c62:	d8e3      	bhi.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c64:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8016c68:	d9e0      	bls.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c6a:	e7b8      	b.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c6c:	f240 6074 	movw	r0, #1652	; 0x674
 8016c70:	4283      	cmp	r3, r0
 8016c72:	d0b4      	beq.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c74:	d82d      	bhi.n	8016cd2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8016c76:	f240 605e 	movw	r0, #1630	; 0x65e
 8016c7a:	4283      	cmp	r3, r0
 8016c7c:	d804      	bhi.n	8016c88 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 8016c7e:	f240 605d 	movw	r0, #1629	; 0x65d
 8016c82:	4283      	cmp	r3, r0
 8016c84:	d3d2      	bcc.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c86:	e7aa      	b.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c88:	f240 605f 	movw	r0, #1631	; 0x65f
 8016c8c:	4283      	cmp	r3, r0
 8016c8e:	d0cd      	beq.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016c90:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8016c94:	d0a3      	beq.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016c96:	00cb      	lsls	r3, r1, #3
 8016c98:	0649      	lsls	r1, r1, #25
 8016c9a:	f403 7080 	and.w	r0, r3, #256	; 0x100
 8016c9e:	7a13      	ldrb	r3, [r2, #8]
 8016ca0:	ea43 0300 	orr.w	r3, r3, r0
 8016ca4:	bf44      	itt	mi
 8016ca6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016caa:	b21b      	sxthmi	r3, r3
 8016cac:	1b5d      	subs	r5, r3, r5
 8016cae:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016cb2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016cb6:	7b53      	ldrb	r3, [r2, #13]
 8016cb8:	015b      	lsls	r3, r3, #5
 8016cba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8016cbe:	7993      	ldrb	r3, [r2, #6]
 8016cc0:	430b      	orrs	r3, r1
 8016cc2:	2105      	movs	r1, #5
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	fb93 f3f1 	sdiv	r3, r3, r1
 8016cca:	f992 1009 	ldrsb.w	r1, [r2, #9]
 8016cce:	440b      	add	r3, r1
 8016cd0:	e756      	b.n	8016b80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8016cd2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 8016cd6:	4283      	cmp	r3, r0
 8016cd8:	d809      	bhi.n	8016cee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8016cda:	f240 60df 	movw	r0, #1759	; 0x6df
 8016cde:	4283      	cmp	r3, r0
 8016ce0:	f4bf af7d 	bcs.w	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016ce4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 8016ce8:	2b05      	cmp	r3, #5
 8016cea:	d8d4      	bhi.n	8016c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016cec:	e777      	b.n	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016cee:	f240 60e3 	movw	r0, #1763	; 0x6e3
 8016cf2:	4283      	cmp	r3, r0
 8016cf4:	d09a      	beq.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016cf6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 8016cfa:	4283      	cmp	r3, r0
 8016cfc:	e7ca      	b.n	8016c94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8016cfe:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 8016d02:	d22b      	bcs.n	8016d5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8016d04:	f640 00ed 	movw	r0, #2285	; 0x8ed
 8016d08:	4283      	cmp	r3, r0
 8016d0a:	d28f      	bcs.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d0c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8016d10:	4283      	cmp	r3, r0
 8016d12:	d816      	bhi.n	8016d42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8016d14:	f640 00e4 	movw	r0, #2276	; 0x8e4
 8016d18:	4283      	cmp	r3, r0
 8016d1a:	f4bf af60 	bcs.w	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d1e:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8016d22:	4283      	cmp	r3, r0
 8016d24:	d80a      	bhi.n	8016d3c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8016d26:	f240 60eb 	movw	r0, #1771	; 0x6eb
 8016d2a:	4283      	cmp	r3, r0
 8016d2c:	f4bf af57 	bcs.w	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d30:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8016d34:	4283      	cmp	r3, r0
 8016d36:	f43f af79 	beq.w	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d3a:	e7ac      	b.n	8016c96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8016d3c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8016d40:	e7f8      	b.n	8016d34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8016d42:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8016d46:	4283      	cmp	r3, r0
 8016d48:	d802      	bhi.n	8016d50 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8016d4a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8016d4e:	e798      	b.n	8016c82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8016d50:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8016d54:	4283      	cmp	r3, r0
 8016d56:	f47f af42 	bne.w	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d5a:	e767      	b.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d5c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8016d60:	4283      	cmp	r3, r0
 8016d62:	f43f af63 	beq.w	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d66:	d802      	bhi.n	8016d6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8016d68:	f640 00f2 	movw	r0, #2290	; 0x8f2
 8016d6c:	e7f2      	b.n	8016d54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8016d6e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8016d72:	4283      	cmp	r3, r0
 8016d74:	d805      	bhi.n	8016d82 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8016d76:	f640 00f9 	movw	r0, #2297	; 0x8f9
 8016d7a:	4283      	cmp	r3, r0
 8016d7c:	f4ff af2f 	bcc.w	8016bde <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8016d80:	e754      	b.n	8016c2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8016d82:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8016d86:	4283      	cmp	r3, r0
 8016d88:	e7af      	b.n	8016cea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8016d8a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016d8e:	4617      	mov	r7, r2
 8016d90:	f102 0808 	add.w	r8, r2, #8
 8016d94:	4666      	mov	r6, ip
 8016d96:	6838      	ldr	r0, [r7, #0]
 8016d98:	3708      	adds	r7, #8
 8016d9a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016d9e:	46e6      	mov	lr, ip
 8016da0:	4547      	cmp	r7, r8
 8016da2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8016da6:	46f4      	mov	ip, lr
 8016da8:	d1f5      	bne.n	8016d96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8016daa:	6838      	ldr	r0, [r7, #0]
 8016dac:	f8ce 0000 	str.w	r0, [lr]
 8016db0:	88b9      	ldrh	r1, [r7, #4]
 8016db2:	f8ae 1004 	strh.w	r1, [lr, #4]
 8016db6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016dba:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016dbe:	d009      	beq.n	8016dd4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8016dc0:	7b51      	ldrb	r1, [r2, #13]
 8016dc2:	7992      	ldrb	r2, [r2, #6]
 8016dc4:	0149      	lsls	r1, r1, #5
 8016dc6:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016dca:	4311      	orrs	r1, r2
 8016dcc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016dd0:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016dd4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016dd8:	b2ad      	uxth	r5, r5
 8016dda:	d00d      	beq.n	8016df8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8016ddc:	442b      	add	r3, r5
 8016dde:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016de8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016dec:	10db      	asrs	r3, r3, #3
 8016dee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016df2:	4313      	orrs	r3, r2
 8016df4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016df8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016dfc:	00cb      	lsls	r3, r1, #3
 8016dfe:	064f      	lsls	r7, r1, #25
 8016e00:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016e04:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016e08:	ea43 0302 	orr.w	r3, r3, r2
 8016e0c:	bf44      	itt	mi
 8016e0e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016e12:	b21b      	sxthmi	r3, r3
 8016e14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8016e18:	1b5b      	subs	r3, r3, r5
 8016e1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 8016e1e:	4632      	mov	r2, r6
 8016e20:	e6f9      	b.n	8016c16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8016e22:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8016e26:	4617      	mov	r7, r2
 8016e28:	f102 0908 	add.w	r9, r2, #8
 8016e2c:	4666      	mov	r6, ip
 8016e2e:	6838      	ldr	r0, [r7, #0]
 8016e30:	3708      	adds	r7, #8
 8016e32:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8016e36:	46e0      	mov	r8, ip
 8016e38:	454f      	cmp	r7, r9
 8016e3a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8016e3e:	46c4      	mov	ip, r8
 8016e40:	d1f5      	bne.n	8016e2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8016e42:	6838      	ldr	r0, [r7, #0]
 8016e44:	f8c8 0000 	str.w	r0, [r8]
 8016e48:	88b9      	ldrh	r1, [r7, #4]
 8016e4a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8016e4e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8016e52:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8016e56:	d009      	beq.n	8016e6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8016e58:	7b51      	ldrb	r1, [r2, #13]
 8016e5a:	7992      	ldrb	r2, [r2, #6]
 8016e5c:	0149      	lsls	r1, r1, #5
 8016e5e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 8016e62:	4311      	orrs	r1, r2
 8016e64:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8016e68:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8016e6c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8016e70:	d00e      	beq.n	8016e90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8016e72:	eba3 030e 	sub.w	r3, r3, lr
 8016e76:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016e80:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8016e84:	10db      	asrs	r3, r3, #3
 8016e86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016e8a:	4313      	orrs	r3, r2
 8016e8c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8016e90:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8016e94:	00cb      	lsls	r3, r1, #3
 8016e96:	0648      	lsls	r0, r1, #25
 8016e98:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8016e9c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8016ea0:	ea43 0302 	orr.w	r3, r3, r2
 8016ea4:	bf44      	itt	mi
 8016ea6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8016eaa:	b21b      	sxthmi	r3, r3
 8016eac:	1b5d      	subs	r5, r3, r5
 8016eae:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8016eb2:	e7b4      	b.n	8016e1e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08016eb4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8016eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016eb8:	461e      	mov	r6, r3
 8016eba:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	4617      	mov	r7, r2
 8016ec0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8016ec4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 8016ec8:	f7ef f908 	bl	80060dc <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8016ecc:	4605      	mov	r5, r0
 8016ece:	b918      	cbnz	r0, 8016ed8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8016ed0:	6030      	str	r0, [r6, #0]
 8016ed2:	4628      	mov	r0, r5
 8016ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ed8:	683b      	ldr	r3, [r7, #0]
 8016eda:	4601      	mov	r1, r0
 8016edc:	4638      	mov	r0, r7
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	4798      	blx	r3
 8016ee2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	6030      	str	r0, [r6, #0]
 8016eea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016eee:	d213      	bcs.n	8016f18 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8016ef0:	4643      	mov	r3, r8
 8016ef2:	4639      	mov	r1, r7
 8016ef4:	4620      	mov	r0, r4
 8016ef6:	f7ff fe39 	bl	8016b6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8016efa:	6030      	str	r0, [r6, #0]
 8016efc:	6833      	ldr	r3, [r6, #0]
 8016efe:	b143      	cbz	r3, 8016f12 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8016f00:	7b5a      	ldrb	r2, [r3, #13]
 8016f02:	7a9b      	ldrb	r3, [r3, #10]
 8016f04:	0052      	lsls	r2, r2, #1
 8016f06:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8016f0a:	4313      	orrs	r3, r2
 8016f0c:	bf0c      	ite	eq
 8016f0e:	2301      	moveq	r3, #1
 8016f10:	2300      	movne	r3, #0
 8016f12:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8016f16:	e7dc      	b.n	8016ed2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8016f18:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 8016f1c:	b29b      	uxth	r3, r3
 8016f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8016f20:	d804      	bhi.n	8016f2c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8016f22:	4639      	mov	r1, r7
 8016f24:	4620      	mov	r0, r4
 8016f26:	f7ff fd15 	bl	8016954 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8016f2a:	e7e6      	b.n	8016efa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8016f2c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d0e3      	beq.n	8016efc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016f34:	f640 1302 	movw	r3, #2306	; 0x902
 8016f38:	429d      	cmp	r5, r3
 8016f3a:	d1df      	bne.n	8016efc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8016f3c:	4601      	mov	r1, r0
 8016f3e:	4620      	mov	r0, r4
 8016f40:	f7ff fcd8 	bl	80168f4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8016f44:	e7d9      	b.n	8016efa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08016f46 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8016f46:	b510      	push	{r4, lr}
 8016f48:	4604      	mov	r4, r0
 8016f4a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 8016f4e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016f50:	b1e1      	cbz	r1, 8016f8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016f52:	2b0a      	cmp	r3, #10
 8016f54:	d02d      	beq.n	8016fb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016f56:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8016f58:	3901      	subs	r1, #1
 8016f5a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8016f5e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 8016f60:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8016f64:	1c51      	adds	r1, r2, #1
 8016f66:	b289      	uxth	r1, r1
 8016f68:	2901      	cmp	r1, #1
 8016f6a:	bf8a      	itet	hi
 8016f6c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8016f70:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 8016f72:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 8016f74:	1c5a      	adds	r2, r3, #1
 8016f76:	8722      	strh	r2, [r4, #56]	; 0x38
 8016f78:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016f7a:	4413      	add	r3, r2
 8016f7c:	b29b      	uxth	r3, r3
 8016f7e:	2b09      	cmp	r3, #9
 8016f80:	bf88      	it	hi
 8016f82:	3b0a      	subhi	r3, #10
 8016f84:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016f88:	8458      	strh	r0, [r3, #34]	; 0x22
 8016f8a:	e7de      	b.n	8016f4a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8016f8c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016f8e:	2b0a      	cmp	r3, #10
 8016f90:	d00f      	beq.n	8016fb2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8016f92:	4620      	mov	r0, r4
 8016f94:	f7ff fc6d 	bl	8016872 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8016f98:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8016f9a:	1c5a      	adds	r2, r3, #1
 8016f9c:	8722      	strh	r2, [r4, #56]	; 0x38
 8016f9e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8016fa0:	4413      	add	r3, r2
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	2b09      	cmp	r3, #9
 8016fa6:	bf88      	it	hi
 8016fa8:	3b0a      	subhi	r3, #10
 8016faa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8016fae:	8458      	strh	r0, [r3, #34]	; 0x22
 8016fb0:	e7ec      	b.n	8016f8c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8016fb2:	bd10      	pop	{r4, pc}

08016fb4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8016fb4:	b538      	push	{r3, r4, r5, lr}
 8016fb6:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8016fb8:	4604      	mov	r4, r0
 8016fba:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8016fbe:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 8016fc0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 8016fc2:	3a01      	subs	r2, #1
 8016fc4:	8702      	strh	r2, [r0, #56]	; 0x38
 8016fc6:	1c5a      	adds	r2, r3, #1
 8016fc8:	b292      	uxth	r2, r2
 8016fca:	2a09      	cmp	r2, #9
 8016fcc:	bf8a      	itet	hi
 8016fce:	3b09      	subhi	r3, #9
 8016fd0:	86c2      	strhls	r2, [r0, #54]	; 0x36
 8016fd2:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 8016fd4:	f7ff ffb7 	bl	8016f46 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8016fd8:	8c23      	ldrh	r3, [r4, #32]
 8016fda:	2b01      	cmp	r3, #1
 8016fdc:	bf9c      	itt	ls
 8016fde:	3301      	addls	r3, #1
 8016fe0:	8423      	strhls	r3, [r4, #32]
 8016fe2:	8be3      	ldrh	r3, [r4, #30]
 8016fe4:	b90b      	cbnz	r3, 8016fea <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8016fe6:	2302      	movs	r3, #2
 8016fe8:	83e3      	strh	r3, [r4, #30]
 8016fea:	8be3      	ldrh	r3, [r4, #30]
 8016fec:	4628      	mov	r0, r5
 8016fee:	3b01      	subs	r3, #1
 8016ff0:	b29b      	uxth	r3, r3
 8016ff2:	83e3      	strh	r3, [r4, #30]
 8016ff4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016ff8:	8365      	strh	r5, [r4, #26]
 8016ffa:	bd38      	pop	{r3, r4, r5, pc}

08016ffc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8016ffc:	428a      	cmp	r2, r1
 8016ffe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017002:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 8017004:	d932      	bls.n	801706c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8017006:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 8017008:	1a54      	subs	r4, r2, r1
 801700a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801700e:	19ee      	adds	r6, r5, r7
 8017010:	fa1f fe84 	uxth.w	lr, r4
 8017014:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8017018:	3e01      	subs	r6, #1
 801701a:	b2b4      	uxth	r4, r6
 801701c:	eba4 090e 	sub.w	r9, r4, lr
 8017020:	fa1f f989 	uxth.w	r9, r9
 8017024:	2c09      	cmp	r4, #9
 8017026:	4626      	mov	r6, r4
 8017028:	bf88      	it	hi
 801702a:	f1a4 060a 	subhi.w	r6, r4, #10
 801702e:	f1bc 0f00 	cmp.w	ip, #0
 8017032:	f104 34ff 	add.w	r4, r4, #4294967295
 8017036:	bf08      	it	eq
 8017038:	f04f 0c02 	moveq.w	ip, #2
 801703c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8017040:	b2a4      	uxth	r4, r4
 8017042:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017046:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801704a:	454c      	cmp	r4, r9
 801704c:	fa1f fc8c 	uxth.w	ip, ip
 8017050:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8017054:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8017058:	d1e4      	bne.n	8017024 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801705a:	eba5 050e 	sub.w	r5, r5, lr
 801705e:	eb0e 0408 	add.w	r4, lr, r8
 8017062:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 8017066:	8705      	strh	r5, [r0, #56]	; 0x38
 8017068:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801706c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801706e:	250a      	movs	r5, #10
 8017070:	1a64      	subs	r4, r4, r1
 8017072:	4439      	add	r1, r7
 8017074:	b289      	uxth	r1, r1
 8017076:	8704      	strh	r4, [r0, #56]	; 0x38
 8017078:	2909      	cmp	r1, #9
 801707a:	bf88      	it	hi
 801707c:	390a      	subhi	r1, #10
 801707e:	86c1      	strh	r1, [r0, #54]	; 0x36
 8017080:	b18a      	cbz	r2, 80170a6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8017082:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8017084:	3a01      	subs	r2, #1
 8017086:	3101      	adds	r1, #1
 8017088:	b292      	uxth	r2, r2
 801708a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801708e:	8701      	strh	r1, [r0, #56]	; 0x38
 8017090:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017092:	b901      	cbnz	r1, 8017096 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8017094:	86c5      	strh	r5, [r0, #54]	; 0x36
 8017096:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8017098:	3901      	subs	r1, #1
 801709a:	b289      	uxth	r1, r1
 801709c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801709e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80170a2:	844c      	strh	r4, [r1, #34]	; 0x22
 80170a4:	e7ec      	b.n	8017080 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80170a6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170aa:	f7ff bf4c 	b.w	8016f46 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080170ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80170ae:	b570      	push	{r4, r5, r6, lr}
 80170b0:	2500      	movs	r5, #0
 80170b2:	4295      	cmp	r5, r2
 80170b4:	d011      	beq.n	80170da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80170b6:	8bc4      	ldrh	r4, [r0, #30]
 80170b8:	f831 6b02 	ldrh.w	r6, [r1], #2
 80170bc:	4414      	add	r4, r2
 80170be:	3c01      	subs	r4, #1
 80170c0:	1b64      	subs	r4, r4, r5
 80170c2:	b2a4      	uxth	r4, r4
 80170c4:	2c01      	cmp	r4, #1
 80170c6:	bf88      	it	hi
 80170c8:	3c02      	subhi	r4, #2
 80170ca:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80170ce:	8b64      	ldrh	r4, [r4, #26]
 80170d0:	42b4      	cmp	r4, r6
 80170d2:	d117      	bne.n	8017104 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80170d4:	3501      	adds	r5, #1
 80170d6:	b2ad      	uxth	r5, r5
 80170d8:	e7eb      	b.n	80170b2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80170da:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80170de:	2400      	movs	r4, #0
 80170e0:	4413      	add	r3, r2
 80170e2:	b2a2      	uxth	r2, r4
 80170e4:	429a      	cmp	r2, r3
 80170e6:	da0f      	bge.n	8017108 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80170e8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80170ea:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80170ee:	3401      	adds	r4, #1
 80170f0:	4432      	add	r2, r6
 80170f2:	b292      	uxth	r2, r2
 80170f4:	2a09      	cmp	r2, #9
 80170f6:	bf88      	it	hi
 80170f8:	3a0a      	subhi	r2, #10
 80170fa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80170fe:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8017100:	42aa      	cmp	r2, r5
 8017102:	d0ee      	beq.n	80170e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8017104:	2000      	movs	r0, #0
 8017106:	bd70      	pop	{r4, r5, r6, pc}
 8017108:	2001      	movs	r0, #1
 801710a:	e7fc      	b.n	8017106 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801710c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801710c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017110:	4605      	mov	r5, r0
 8017112:	4616      	mov	r6, r2
 8017114:	1c8c      	adds	r4, r1, #2
 8017116:	8809      	ldrh	r1, [r1, #0]
 8017118:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801711c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8017120:	42b3      	cmp	r3, r6
 8017122:	d124      	bne.n	801716e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8017124:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8017128:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801712c:	f001 070f 	and.w	r7, r1, #15
 8017130:	4652      	mov	r2, sl
 8017132:	f8cd 8000 	str.w	r8, [sp]
 8017136:	464b      	mov	r3, r9
 8017138:	4621      	mov	r1, r4
 801713a:	4628      	mov	r0, r5
 801713c:	f7ff ffb7 	bl	80170ae <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8017140:	4683      	mov	fp, r0
 8017142:	b168      	cbz	r0, 8017160 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8017144:	eb0a 0109 	add.w	r1, sl, r9
 8017148:	463a      	mov	r2, r7
 801714a:	4628      	mov	r0, r5
 801714c:	4441      	add	r1, r8
 801714e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8017152:	4649      	mov	r1, r9
 8017154:	f7ff ff52 	bl	8016ffc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8017158:	4658      	mov	r0, fp
 801715a:	b003      	add	sp, #12
 801715c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017160:	eb07 010a 	add.w	r1, r7, sl
 8017164:	4449      	add	r1, r9
 8017166:	4441      	add	r1, r8
 8017168:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801716c:	e7d2      	b.n	8017114 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801716e:	f04f 0b00 	mov.w	fp, #0
 8017172:	e7f1      	b.n	8017158 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08017174 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8017174:	b570      	push	{r4, r5, r6, lr}
 8017176:	8810      	ldrh	r0, [r2, #0]
 8017178:	4298      	cmp	r0, r3
 801717a:	d817      	bhi.n	80171ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801717c:	1e48      	subs	r0, r1, #1
 801717e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8017182:	4298      	cmp	r0, r3
 8017184:	d312      	bcc.n	80171ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8017186:	2400      	movs	r4, #0
 8017188:	428c      	cmp	r4, r1
 801718a:	d20f      	bcs.n	80171ac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801718c:	1860      	adds	r0, r4, r1
 801718e:	1040      	asrs	r0, r0, #1
 8017190:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8017194:	0085      	lsls	r5, r0, #2
 8017196:	42b3      	cmp	r3, r6
 8017198:	d902      	bls.n	80171a0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801719a:	3001      	adds	r0, #1
 801719c:	b284      	uxth	r4, r0
 801719e:	e7f3      	b.n	8017188 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171a0:	d201      	bcs.n	80171a6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80171a2:	b281      	uxth	r1, r0
 80171a4:	e7f0      	b.n	8017188 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80171a6:	442a      	add	r2, r5
 80171a8:	8850      	ldrh	r0, [r2, #2]
 80171aa:	bd70      	pop	{r4, r5, r6, pc}
 80171ac:	2000      	movs	r0, #0
 80171ae:	e7fc      	b.n	80171aa <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080171b0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80171b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171b4:	6c45      	ldr	r5, [r0, #68]	; 0x44
 80171b6:	4604      	mov	r4, r0
 80171b8:	260b      	movs	r6, #11
 80171ba:	886f      	ldrh	r7, [r5, #2]
 80171bc:	087f      	lsrs	r7, r7, #1
 80171be:	3e01      	subs	r6, #1
 80171c0:	d013      	beq.n	80171ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80171c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80171c4:	462a      	mov	r2, r5
 80171c6:	4639      	mov	r1, r7
 80171c8:	4620      	mov	r0, r4
 80171ca:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80171ce:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80171d2:	4643      	mov	r3, r8
 80171d4:	f7ff ffce 	bl	8017174 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80171d8:	b138      	cbz	r0, 80171ea <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80171da:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80171de:	4642      	mov	r2, r8
 80171e0:	4620      	mov	r0, r4
 80171e2:	f7ff ff93 	bl	801710c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80171e6:	2800      	cmp	r0, #0
 80171e8:	d1e9      	bne.n	80171be <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80171ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080171f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80171f0:	b570      	push	{r4, r5, r6, lr}
 80171f2:	694a      	ldr	r2, [r1, #20]
 80171f4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80171f6:	684b      	ldr	r3, [r1, #4]
 80171f8:	1b54      	subs	r4, r2, r5
 80171fa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80171fc:	f000 8106 	beq.w	801740c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8017200:	1b9b      	subs	r3, r3, r6
 8017202:	d003      	beq.n	801720c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017204:	4363      	muls	r3, r4
 8017206:	2210      	movs	r2, #16
 8017208:	fb93 f3f2 	sdiv	r3, r3, r2
 801720c:	680c      	ldr	r4, [r1, #0]
 801720e:	698a      	ldr	r2, [r1, #24]
 8017210:	1b65      	subs	r5, r4, r5
 8017212:	f000 80fd 	beq.w	8017410 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8017216:	1b92      	subs	r2, r2, r6
 8017218:	d003      	beq.n	8017222 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801721a:	436a      	muls	r2, r5
 801721c:	2410      	movs	r4, #16
 801721e:	fb92 f2f4 	sdiv	r2, r2, r4
 8017222:	1a9b      	subs	r3, r3, r2
 8017224:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801744c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8017228:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801722c:	460a      	mov	r2, r1
 801722e:	ee07 3a90 	vmov	s15, r3
 8017232:	f100 040c 	add.w	r4, r0, #12
 8017236:	4603      	mov	r3, r0
 8017238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801723c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8017240:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8017244:	eeb1 6a43 	vneg.f32	s12, s6
 8017248:	edd2 7a02 	vldr	s15, [r2, #8]
 801724c:	3214      	adds	r2, #20
 801724e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8017252:	ece3 6a01 	vstmia	r3!, {s13}
 8017256:	429c      	cmp	r4, r3
 8017258:	ed52 7a02 	vldr	s15, [r2, #-8]
 801725c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8017260:	edc3 7a02 	vstr	s15, [r3, #8]
 8017264:	ed52 7a01 	vldr	s15, [r2, #-4]
 8017268:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801726c:	edc3 7a05 	vstr	s15, [r3, #20]
 8017270:	d1ea      	bne.n	8017248 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8017272:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017274:	698b      	ldr	r3, [r1, #24]
 8017276:	edd0 4a02 	vldr	s9, [r0, #8]
 801727a:	1a9b      	subs	r3, r3, r2
 801727c:	edd0 3a00 	vldr	s7, [r0]
 8017280:	edd0 6a01 	vldr	s13, [r0, #4]
 8017284:	ee07 3a90 	vmov	s15, r3
 8017288:	684b      	ldr	r3, [r1, #4]
 801728a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801728e:	ed90 5a05 	vldr	s10, [r0, #20]
 8017292:	1a9b      	subs	r3, r3, r2
 8017294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017298:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801729c:	ed90 2a03 	vldr	s4, [r0, #12]
 80172a0:	ee07 3a10 	vmov	s14, r3
 80172a4:	edd0 5a04 	vldr	s11, [r0, #16]
 80172a8:	ee67 7a84 	vmul.f32	s15, s15, s8
 80172ac:	ed90 1a07 	vldr	s2, [r0, #28]
 80172b0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172b4:	edd0 2a06 	vldr	s5, [r0, #24]
 80172b8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80172bc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80172c0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80172c4:	ee32 5a45 	vsub.f32	s10, s4, s10
 80172c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80172cc:	ee67 7a83 	vmul.f32	s15, s15, s6
 80172d0:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 80172d4:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80172d6:	694a      	ldr	r2, [r1, #20]
 80172d8:	1b13      	subs	r3, r2, r4
 80172da:	ee07 3a10 	vmov	s14, r3
 80172de:	680b      	ldr	r3, [r1, #0]
 80172e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172e4:	1b1b      	subs	r3, r3, r4
 80172e6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80172ea:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 80172ee:	ee07 3a10 	vmov	s14, r3
 80172f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80172f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80172fa:	eee6 4a87 	vfma.f32	s9, s13, s14
 80172fe:	ee64 4a86 	vmul.f32	s9, s9, s12
 8017302:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8017306:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017308:	698b      	ldr	r3, [r1, #24]
 801730a:	1a9b      	subs	r3, r3, r2
 801730c:	ee06 3a90 	vmov	s13, r3
 8017310:	684b      	ldr	r3, [r1, #4]
 8017312:	1a9b      	subs	r3, r3, r2
 8017314:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017318:	ee07 3a10 	vmov	s14, r3
 801731c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8017320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017324:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8017328:	ee27 7a04 	vmul.f32	s14, s14, s8
 801732c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8017330:	ee66 6a83 	vmul.f32	s13, s13, s6
 8017334:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8017338:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801733a:	694a      	ldr	r2, [r1, #20]
 801733c:	1b13      	subs	r3, r2, r4
 801733e:	ee07 3a10 	vmov	s14, r3
 8017342:	680b      	ldr	r3, [r1, #0]
 8017344:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017348:	1b1b      	subs	r3, r3, r4
 801734a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801734e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8017352:	ee07 3a10 	vmov	s14, r3
 8017356:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801735a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801735e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8017362:	edd0 5a08 	vldr	s11, [r0, #32]
 8017366:	ee31 1a65 	vsub.f32	s2, s2, s11
 801736a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801736e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8017372:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8017376:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017378:	698b      	ldr	r3, [r1, #24]
 801737a:	1a9b      	subs	r3, r3, r2
 801737c:	ee07 3a10 	vmov	s14, r3
 8017380:	684b      	ldr	r3, [r1, #4]
 8017382:	1a9b      	subs	r3, r3, r2
 8017384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017388:	ee01 3a90 	vmov	s3, r3
 801738c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8017390:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8017394:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8017398:	ee61 1a84 	vmul.f32	s3, s3, s8
 801739c:	eea1 7a21 	vfma.f32	s14, s2, s3
 80173a0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80173a4:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 80173a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80173aa:	694a      	ldr	r2, [r1, #20]
 80173ac:	1b13      	subs	r3, r2, r4
 80173ae:	ee03 3a10 	vmov	s6, r3
 80173b2:	680b      	ldr	r3, [r1, #0]
 80173b4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80173b8:	1b1b      	subs	r3, r3, r4
 80173ba:	ee23 3a04 	vmul.f32	s6, s6, s8
 80173be:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80173c2:	ee03 3a10 	vmov	s6, r3
 80173c6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80173ca:	ee23 4a04 	vmul.f32	s8, s6, s8
 80173ce:	eee1 5a04 	vfma.f32	s11, s2, s8
 80173d2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80173d6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80173da:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 80173de:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80173e2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80173e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ea:	dd13      	ble.n	8017414 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80173ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80173f0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 80173f4:	63c3      	str	r3, [r0, #60]	; 0x3c
 80173f6:	eee3 7a87 	vfma.f32	s15, s7, s14
 80173fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80173fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017402:	dd15      	ble.n	8017430 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8017404:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8017408:	6403      	str	r3, [r0, #64]	; 0x40
 801740a:	bd70      	pop	{r4, r5, r6, pc}
 801740c:	4623      	mov	r3, r4
 801740e:	e6fd      	b.n	801720c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8017410:	462a      	mov	r2, r5
 8017412:	e706      	b.n	8017222 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8017414:	d502      	bpl.n	801741c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8017416:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801741a:	e7e9      	b.n	80173f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801741c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8017420:	eea3 2a85 	vfma.f32	s4, s7, s10
 8017424:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8017428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801742c:	dade      	bge.n	80173ec <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801742e:	e7f2      	b.n	8017416 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8017430:	d502      	bpl.n	8017438 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8017432:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8017436:	e7e7      	b.n	8017408 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8017438:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801743c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8017440:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8017444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017448:	dadc      	bge.n	8017404 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801744a:	e7f2      	b.n	8017432 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801744c:	3d800000 	.word	0x3d800000

08017450 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8017450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017454:	2714      	movs	r7, #20
 8017456:	435f      	muls	r7, r3
 8017458:	eb02 0c07 	add.w	ip, r2, r7
 801745c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8017460:	f115 0e0f 	adds.w	lr, r5, #15
 8017464:	f100 80a2 	bmi.w	80175ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8017468:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801746c:	9c08      	ldr	r4, [sp, #32]
 801746e:	2614      	movs	r6, #20
 8017470:	f8c0 e014 	str.w	lr, [r0, #20]
 8017474:	4366      	muls	r6, r4
 8017476:	eb02 0806 	add.w	r8, r2, r6
 801747a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801747e:	f115 040f 	adds.w	r4, r5, #15
 8017482:	f100 809f 	bmi.w	80175c4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8017486:	1124      	asrs	r4, r4, #4
 8017488:	eba4 040e 	sub.w	r4, r4, lr
 801748c:	6184      	str	r4, [r0, #24]
 801748e:	2c00      	cmp	r4, #0
 8017490:	f000 808a 	beq.w	80175a8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8017494:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8017498:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801749c:	5995      	ldr	r5, [r2, r6]
 801749e:	eba4 0809 	sub.w	r8, r4, r9
 80174a2:	59d4      	ldr	r4, [r2, r7]
 80174a4:	eba5 0a04 	sub.w	sl, r5, r4
 80174a8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80174ac:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80174b0:	fb0e fe05 	mul.w	lr, lr, r5
 80174b4:	fb0a ee19 	mls	lr, sl, r9, lr
 80174b8:	fb08 e404 	mla	r4, r8, r4, lr
 80174bc:	3c01      	subs	r4, #1
 80174be:	19a4      	adds	r4, r4, r6
 80174c0:	f100 808c 	bmi.w	80175dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80174c4:	fb94 fef6 	sdiv	lr, r4, r6
 80174c8:	fb06 441e 	mls	r4, r6, lr, r4
 80174cc:	f8c0 e000 	str.w	lr, [r0]
 80174d0:	6104      	str	r4, [r0, #16]
 80174d2:	2d00      	cmp	r5, #0
 80174d4:	f2c0 8095 	blt.w	8017602 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80174d8:	fb95 f4f6 	sdiv	r4, r5, r6
 80174dc:	fb06 5514 	mls	r5, r6, r4, r5
 80174e0:	6044      	str	r4, [r0, #4]
 80174e2:	6085      	str	r5, [r0, #8]
 80174e4:	60c6      	str	r6, [r0, #12]
 80174e6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80174ea:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80174ee:	6945      	ldr	r5, [r0, #20]
 80174f0:	59d2      	ldr	r2, [r2, r7]
 80174f2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 80174f6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8017624 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 80174fa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80174fe:	ee07 4a10 	vmov	s14, r4
 8017502:	6804      	ldr	r4, [r0, #0]
 8017504:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8017508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801750c:	ee07 2a90 	vmov	s15, r2
 8017510:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017518:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801751c:	edd3 6a00 	vldr	s13, [r3]
 8017520:	eee6 6a07 	vfma.f32	s13, s12, s14
 8017524:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8017528:	eee6 6a27 	vfma.f32	s13, s12, s15
 801752c:	edc0 6a07 	vstr	s13, [r0, #28]
 8017530:	edd0 6a01 	vldr	s13, [r0, #4]
 8017534:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8017538:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801753c:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8017540:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017544:	ed80 6a08 	vstr	s12, [r0, #32]
 8017548:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801754a:	6242      	str	r2, [r0, #36]	; 0x24
 801754c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8017550:	ed93 6a03 	vldr	s12, [r3, #12]
 8017554:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017558:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801755c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8017560:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8017564:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8017568:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801756c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8017570:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8017574:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8017576:	6302      	str	r2, [r0, #48]	; 0x30
 8017578:	ed93 6a06 	vldr	s12, [r3, #24]
 801757c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8017580:	eea5 6a87 	vfma.f32	s12, s11, s14
 8017584:	eeb0 7a46 	vmov.f32	s14, s12
 8017588:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801758c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8017590:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8017594:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8017598:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801759c:	eee6 7a87 	vfma.f32	s15, s13, s14
 80175a0:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 80175a4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80175a6:	63c3      	str	r3, [r0, #60]	; 0x3c
 80175a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80175ac:	2410      	movs	r4, #16
 80175ae:	f1c5 0501 	rsb	r5, r5, #1
 80175b2:	fb9e fef4 	sdiv	lr, lr, r4
 80175b6:	f015 050f 	ands.w	r5, r5, #15
 80175ba:	bf18      	it	ne
 80175bc:	2501      	movne	r5, #1
 80175be:	ebae 0e05 	sub.w	lr, lr, r5
 80175c2:	e753      	b.n	801746c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80175c4:	f04f 0910 	mov.w	r9, #16
 80175c8:	f1c5 0501 	rsb	r5, r5, #1
 80175cc:	fb94 f4f9 	sdiv	r4, r4, r9
 80175d0:	f015 050f 	ands.w	r5, r5, #15
 80175d4:	bf18      	it	ne
 80175d6:	2501      	movne	r5, #1
 80175d8:	1b64      	subs	r4, r4, r5
 80175da:	e755      	b.n	8017488 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80175dc:	4264      	negs	r4, r4
 80175de:	fb94 fef6 	sdiv	lr, r4, r6
 80175e2:	f1ce 0800 	rsb	r8, lr, #0
 80175e6:	fb06 441e 	mls	r4, r6, lr, r4
 80175ea:	f8c0 8000 	str.w	r8, [r0]
 80175ee:	6104      	str	r4, [r0, #16]
 80175f0:	2c00      	cmp	r4, #0
 80175f2:	f43f af6e 	beq.w	80174d2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 80175f6:	ea6f 0e0e 	mvn.w	lr, lr
 80175fa:	1b34      	subs	r4, r6, r4
 80175fc:	f8c0 e000 	str.w	lr, [r0]
 8017600:	e766      	b.n	80174d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8017602:	426d      	negs	r5, r5
 8017604:	fb95 f4f6 	sdiv	r4, r5, r6
 8017608:	f1c4 0e00 	rsb	lr, r4, #0
 801760c:	fb06 5514 	mls	r5, r6, r4, r5
 8017610:	f8c0 e004 	str.w	lr, [r0, #4]
 8017614:	6085      	str	r5, [r0, #8]
 8017616:	2d00      	cmp	r5, #0
 8017618:	f43f af64 	beq.w	80174e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801761c:	43e4      	mvns	r4, r4
 801761e:	1b75      	subs	r5, r6, r5
 8017620:	6044      	str	r4, [r0, #4]
 8017622:	e75e      	b.n	80174e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8017624:	3d800000 	.word	0x3d800000

08017628 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8017628:	4b01      	ldr	r3, [pc, #4]	; (8017630 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801762a:	6018      	str	r0, [r3, #0]
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	2400af94 	.word	0x2400af94

08017634 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8017634:	4b06      	ldr	r3, [pc, #24]	; (8017650 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8017636:	881a      	ldrh	r2, [r3, #0]
 8017638:	4282      	cmp	r2, r0
 801763a:	d807      	bhi.n	801764c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801763c:	4b05      	ldr	r3, [pc, #20]	; (8017654 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801763e:	881b      	ldrh	r3, [r3, #0]
 8017640:	4413      	add	r3, r2
 8017642:	4298      	cmp	r0, r3
 8017644:	bfac      	ite	ge
 8017646:	2000      	movge	r0, #0
 8017648:	2001      	movlt	r0, #1
 801764a:	4770      	bx	lr
 801764c:	2000      	movs	r0, #0
 801764e:	4770      	bx	lr
 8017650:	2400afb4 	.word	0x2400afb4
 8017654:	2400afb8 	.word	0x2400afb8

08017658 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8017658:	b508      	push	{r3, lr}
 801765a:	4601      	mov	r1, r0
 801765c:	f7ff ffea 	bl	8017634 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8017660:	b118      	cbz	r0, 801766a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8017662:	4b02      	ldr	r3, [pc, #8]	; (801766c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801766a:	bd08      	pop	{r3, pc}
 801766c:	2400af98 	.word	0x2400af98

08017670 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8017670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017672:	4c24      	ldr	r4, [pc, #144]	; (8017704 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8017674:	6823      	ldr	r3, [r4, #0]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d042      	beq.n	8017700 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801767a:	4a23      	ldr	r2, [pc, #140]	; (8017708 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801767c:	4d23      	ldr	r5, [pc, #140]	; (801770c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801767e:	8811      	ldrh	r1, [r2, #0]
 8017680:	f8b5 c000 	ldrh.w	ip, [r5]
 8017684:	4822      	ldr	r0, [pc, #136]	; (8017710 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8017686:	4461      	add	r1, ip
 8017688:	1c4a      	adds	r2, r1, #1
 801768a:	008f      	lsls	r7, r1, #2
 801768c:	f022 0201 	bic.w	r2, r2, #1
 8017690:	19de      	adds	r6, r3, r7
 8017692:	0412      	lsls	r2, r2, #16
 8017694:	6006      	str	r6, [r0, #0]
 8017696:	4e1f      	ldr	r6, [pc, #124]	; (8017714 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8017698:	0c12      	lsrs	r2, r2, #16
 801769a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801769e:	19da      	adds	r2, r3, r7
 80176a0:	6032      	str	r2, [r6, #0]
 80176a2:	220e      	movs	r2, #14
 80176a4:	fb02 f20c 	mul.w	r2, r2, ip
 80176a8:	3203      	adds	r2, #3
 80176aa:	f022 0203 	bic.w	r2, r2, #3
 80176ae:	443a      	add	r2, r7
 80176b0:	4f19      	ldr	r7, [pc, #100]	; (8017718 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80176b2:	4413      	add	r3, r2
 80176b4:	603b      	str	r3, [r7, #0]
 80176b6:	2300      	movs	r3, #0
 80176b8:	4f18      	ldr	r7, [pc, #96]	; (801771c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80176ba:	469c      	mov	ip, r3
 80176bc:	803b      	strh	r3, [r7, #0]
 80176be:	4f18      	ldr	r7, [pc, #96]	; (8017720 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80176c0:	683f      	ldr	r7, [r7, #0]
 80176c2:	1aba      	subs	r2, r7, r2
 80176c4:	4f17      	ldr	r7, [pc, #92]	; (8017724 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80176c6:	603a      	str	r2, [r7, #0]
 80176c8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80176cc:	4a16      	ldr	r2, [pc, #88]	; (8017728 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 80176ce:	8013      	strh	r3, [r2, #0]
 80176d0:	428b      	cmp	r3, r1
 80176d2:	d10d      	bne.n	80176f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 80176d4:	882d      	ldrh	r5, [r5, #0]
 80176d6:	2300      	movs	r3, #0
 80176d8:	6830      	ldr	r0, [r6, #0]
 80176da:	240e      	movs	r4, #14
 80176dc:	429d      	cmp	r5, r3
 80176de:	d90f      	bls.n	8017700 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80176e0:	fb04 0203 	mla	r2, r4, r3, r0
 80176e4:	3301      	adds	r3, #1
 80176e6:	7b11      	ldrb	r1, [r2, #12]
 80176e8:	f36f 1145 	bfc	r1, #5, #1
 80176ec:	7311      	strb	r1, [r2, #12]
 80176ee:	e7f5      	b.n	80176dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80176f0:	6822      	ldr	r2, [r4, #0]
 80176f2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80176f6:	6802      	ldr	r2, [r0, #0]
 80176f8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80176fc:	3301      	adds	r3, #1
 80176fe:	e7e7      	b.n	80176d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8017700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017702:	bf00      	nop
 8017704:	2400af98 	.word	0x2400af98
 8017708:	2400afb4 	.word	0x2400afb4
 801770c:	2400afb8 	.word	0x2400afb8
 8017710:	2400afac 	.word	0x2400afac
 8017714:	2400af9c 	.word	0x2400af9c
 8017718:	2400afa4 	.word	0x2400afa4
 801771c:	2400afb6 	.word	0x2400afb6
 8017720:	2400afa0 	.word	0x2400afa0
 8017724:	2400afb0 	.word	0x2400afb0
 8017728:	2400afa8 	.word	0x2400afa8

0801772c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801772c:	4b06      	ldr	r3, [pc, #24]	; (8017748 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	b943      	cbnz	r3, 8017744 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017732:	b139      	cbz	r1, 8017744 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8017734:	4b05      	ldr	r3, [pc, #20]	; (801774c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8017736:	801a      	strh	r2, [r3, #0]
 8017738:	4b05      	ldr	r3, [pc, #20]	; (8017750 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801773a:	6019      	str	r1, [r3, #0]
 801773c:	4b05      	ldr	r3, [pc, #20]	; (8017754 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801773e:	6018      	str	r0, [r3, #0]
 8017740:	f7ff bf96 	b.w	8017670 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8017744:	4770      	bx	lr
 8017746:	bf00      	nop
 8017748:	2400afa4 	.word	0x2400afa4
 801774c:	2400afb8 	.word	0x2400afb8
 8017750:	2400afa0 	.word	0x2400afa0
 8017754:	2400af98 	.word	0x2400af98

08017758 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8017758:	b470      	push	{r4, r5, r6}
 801775a:	4c07      	ldr	r4, [pc, #28]	; (8017778 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801775c:	4605      	mov	r5, r0
 801775e:	4610      	mov	r0, r2
 8017760:	9a03      	ldr	r2, [sp, #12]
 8017762:	6826      	ldr	r6, [r4, #0]
 8017764:	b936      	cbnz	r6, 8017774 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8017766:	6025      	str	r5, [r4, #0]
 8017768:	4c04      	ldr	r4, [pc, #16]	; (801777c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801776a:	8021      	strh	r1, [r4, #0]
 801776c:	4619      	mov	r1, r3
 801776e:	bc70      	pop	{r4, r5, r6}
 8017770:	f7ff bfdc 	b.w	801772c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8017774:	bc70      	pop	{r4, r5, r6}
 8017776:	4770      	bx	lr
 8017778:	2400afbc 	.word	0x2400afbc
 801777c:	2400afb4 	.word	0x2400afb4

08017780 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8017780:	4a12      	ldr	r2, [pc, #72]	; (80177cc <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8017782:	8803      	ldrh	r3, [r0, #0]
 8017784:	8812      	ldrh	r2, [r2, #0]
 8017786:	4293      	cmp	r3, r2
 8017788:	d207      	bcs.n	801779a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801778a:	4a11      	ldr	r2, [pc, #68]	; (80177d0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801778c:	2114      	movs	r1, #20
 801778e:	6812      	ldr	r2, [r2, #0]
 8017790:	fb01 2303 	mla	r3, r1, r3, r2
 8017794:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8017798:	4770      	bx	lr
 801779a:	490e      	ldr	r1, [pc, #56]	; (80177d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801779c:	8809      	ldrh	r1, [r1, #0]
 801779e:	4411      	add	r1, r2
 80177a0:	428b      	cmp	r3, r1
 80177a2:	da04      	bge.n	80177ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 80177a4:	1a9b      	subs	r3, r3, r2
 80177a6:	4a0c      	ldr	r2, [pc, #48]	; (80177d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 80177a8:	210e      	movs	r1, #14
 80177aa:	6812      	ldr	r2, [r2, #0]
 80177ac:	e7f0      	b.n	8017790 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 80177ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80177b2:	4293      	cmp	r3, r2
 80177b4:	d108      	bne.n	80177c8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 80177b6:	4b09      	ldr	r3, [pc, #36]	; (80177dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 80177b8:	781b      	ldrb	r3, [r3, #0]
 80177ba:	b91b      	cbnz	r3, 80177c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 80177bc:	4b08      	ldr	r3, [pc, #32]	; (80177e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 80177be:	f9b3 0000 	ldrsh.w	r0, [r3]
 80177c2:	4770      	bx	lr
 80177c4:	4b07      	ldr	r3, [pc, #28]	; (80177e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80177c6:	e7fa      	b.n	80177be <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 80177c8:	2000      	movs	r0, #0
 80177ca:	4770      	bx	lr
 80177cc:	2400afb4 	.word	0x2400afb4
 80177d0:	2400afbc 	.word	0x2400afbc
 80177d4:	2400afb8 	.word	0x2400afb8
 80177d8:	2400af9c 	.word	0x2400af9c
 80177dc:	2400af2c 	.word	0x2400af2c
 80177e0:	2400af2e 	.word	0x2400af2e
 80177e4:	2400af30 	.word	0x2400af30

080177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80177e8:	4a12      	ldr	r2, [pc, #72]	; (8017834 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80177ea:	8803      	ldrh	r3, [r0, #0]
 80177ec:	8812      	ldrh	r2, [r2, #0]
 80177ee:	4293      	cmp	r3, r2
 80177f0:	d207      	bcs.n	8017802 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80177f2:	4a11      	ldr	r2, [pc, #68]	; (8017838 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80177f4:	2114      	movs	r1, #20
 80177f6:	6812      	ldr	r2, [r2, #0]
 80177f8:	fb01 2303 	mla	r3, r1, r3, r2
 80177fc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8017800:	4770      	bx	lr
 8017802:	490e      	ldr	r1, [pc, #56]	; (801783c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8017804:	8809      	ldrh	r1, [r1, #0]
 8017806:	4411      	add	r1, r2
 8017808:	428b      	cmp	r3, r1
 801780a:	da04      	bge.n	8017816 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801780c:	1a9b      	subs	r3, r3, r2
 801780e:	4a0c      	ldr	r2, [pc, #48]	; (8017840 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8017810:	210e      	movs	r1, #14
 8017812:	6812      	ldr	r2, [r2, #0]
 8017814:	e7f0      	b.n	80177f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8017816:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801781a:	4293      	cmp	r3, r2
 801781c:	d108      	bne.n	8017830 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801781e:	4b09      	ldr	r3, [pc, #36]	; (8017844 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8017820:	781b      	ldrb	r3, [r3, #0]
 8017822:	b91b      	cbnz	r3, 801782c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8017824:	4b08      	ldr	r3, [pc, #32]	; (8017848 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8017826:	f9b3 0000 	ldrsh.w	r0, [r3]
 801782a:	4770      	bx	lr
 801782c:	4b07      	ldr	r3, [pc, #28]	; (801784c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801782e:	e7fa      	b.n	8017826 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8017830:	2000      	movs	r0, #0
 8017832:	4770      	bx	lr
 8017834:	2400afb4 	.word	0x2400afb4
 8017838:	2400afbc 	.word	0x2400afbc
 801783c:	2400afb8 	.word	0x2400afb8
 8017840:	2400af9c 	.word	0x2400af9c
 8017844:	2400af2c 	.word	0x2400af2c
 8017848:	2400af30 	.word	0x2400af30
 801784c:	2400af2e 	.word	0x2400af2e

08017850 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8017850:	4a1f      	ldr	r2, [pc, #124]	; (80178d0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8017852:	b510      	push	{r4, lr}
 8017854:	880b      	ldrh	r3, [r1, #0]
 8017856:	8812      	ldrh	r2, [r2, #0]
 8017858:	4293      	cmp	r3, r2
 801785a:	d213      	bcs.n	8017884 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801785c:	4a1d      	ldr	r2, [pc, #116]	; (80178d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 801785e:	2114      	movs	r1, #20
 8017860:	6812      	ldr	r2, [r2, #0]
 8017862:	fb01 2303 	mla	r3, r1, r3, r2
 8017866:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801786a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801786e:	8a1a      	ldrh	r2, [r3, #16]
 8017870:	8a5b      	ldrh	r3, [r3, #18]
 8017872:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017876:	8004      	strh	r4, [r0, #0]
 8017878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801787c:	8041      	strh	r1, [r0, #2]
 801787e:	8082      	strh	r2, [r0, #4]
 8017880:	80c3      	strh	r3, [r0, #6]
 8017882:	e00e      	b.n	80178a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8017884:	4914      	ldr	r1, [pc, #80]	; (80178d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8017886:	8809      	ldrh	r1, [r1, #0]
 8017888:	4411      	add	r1, r2
 801788a:	428b      	cmp	r3, r1
 801788c:	da0a      	bge.n	80178a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801788e:	1a9b      	subs	r3, r3, r2
 8017890:	4a12      	ldr	r2, [pc, #72]	; (80178dc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8017892:	210e      	movs	r1, #14
 8017894:	6812      	ldr	r2, [r2, #0]
 8017896:	fb01 2303 	mla	r3, r1, r3, r2
 801789a:	681a      	ldr	r2, [r3, #0]
 801789c:	6002      	str	r2, [r0, #0]
 801789e:	685a      	ldr	r2, [r3, #4]
 80178a0:	6042      	str	r2, [r0, #4]
 80178a2:	bd10      	pop	{r4, pc}
 80178a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80178a8:	4293      	cmp	r3, r2
 80178aa:	d10b      	bne.n	80178c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 80178ac:	4b0c      	ldr	r3, [pc, #48]	; (80178e0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80178ae:	f9b3 1000 	ldrsh.w	r1, [r3]
 80178b2:	4b0c      	ldr	r3, [pc, #48]	; (80178e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80178b4:	8081      	strh	r1, [r0, #4]
 80178b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80178ba:	2300      	movs	r3, #0
 80178bc:	80c2      	strh	r2, [r0, #6]
 80178be:	8003      	strh	r3, [r0, #0]
 80178c0:	8043      	strh	r3, [r0, #2]
 80178c2:	e7ee      	b.n	80178a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80178c4:	2300      	movs	r3, #0
 80178c6:	8003      	strh	r3, [r0, #0]
 80178c8:	8043      	strh	r3, [r0, #2]
 80178ca:	8083      	strh	r3, [r0, #4]
 80178cc:	e7d8      	b.n	8017880 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80178ce:	bf00      	nop
 80178d0:	2400afb4 	.word	0x2400afb4
 80178d4:	2400afbc 	.word	0x2400afbc
 80178d8:	2400afb8 	.word	0x2400afb8
 80178dc:	2400af9c 	.word	0x2400af9c
 80178e0:	2400af28 	.word	0x2400af28
 80178e4:	2400af2a 	.word	0x2400af2a

080178e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80178e8:	4a17      	ldr	r2, [pc, #92]	; (8017948 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80178ea:	8803      	ldrh	r3, [r0, #0]
 80178ec:	8812      	ldrh	r2, [r2, #0]
 80178ee:	4293      	cmp	r3, r2
 80178f0:	d213      	bcs.n	801791a <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80178f2:	4a16      	ldr	r2, [pc, #88]	; (801794c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80178f4:	2114      	movs	r1, #20
 80178f6:	6812      	ldr	r2, [r2, #0]
 80178f8:	fb01 2303 	mla	r3, r1, r3, r2
 80178fc:	8a1a      	ldrh	r2, [r3, #16]
 80178fe:	8919      	ldrh	r1, [r3, #8]
 8017900:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8017904:	428a      	cmp	r2, r1
 8017906:	db1d      	blt.n	8017944 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 8017908:	8a58      	ldrh	r0, [r3, #18]
 801790a:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801790e:	895b      	ldrh	r3, [r3, #10]
 8017910:	4298      	cmp	r0, r3
 8017912:	bfac      	ite	ge
 8017914:	2000      	movge	r0, #0
 8017916:	2001      	movlt	r0, #1
 8017918:	4770      	bx	lr
 801791a:	490d      	ldr	r1, [pc, #52]	; (8017950 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801791c:	8809      	ldrh	r1, [r1, #0]
 801791e:	4411      	add	r1, r2
 8017920:	428b      	cmp	r3, r1
 8017922:	da0d      	bge.n	8017940 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8017924:	1a9b      	subs	r3, r3, r2
 8017926:	4a0b      	ldr	r2, [pc, #44]	; (8017954 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 8017928:	210e      	movs	r1, #14
 801792a:	6812      	ldr	r2, [r2, #0]
 801792c:	fb01 2303 	mla	r3, r1, r3, r2
 8017930:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8017934:	891a      	ldrh	r2, [r3, #8]
 8017936:	4291      	cmp	r1, r2
 8017938:	db04      	blt.n	8017944 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801793a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801793e:	e7e6      	b.n	801790e <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8017940:	2000      	movs	r0, #0
 8017942:	4770      	bx	lr
 8017944:	2001      	movs	r0, #1
 8017946:	4770      	bx	lr
 8017948:	2400afb4 	.word	0x2400afb4
 801794c:	2400afbc 	.word	0x2400afbc
 8017950:	2400afb8 	.word	0x2400afb8
 8017954:	2400af9c 	.word	0x2400af9c

08017958 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8017958:	4a12      	ldr	r2, [pc, #72]	; (80179a4 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801795a:	8803      	ldrh	r3, [r0, #0]
 801795c:	8811      	ldrh	r1, [r2, #0]
 801795e:	428b      	cmp	r3, r1
 8017960:	d20b      	bcs.n	801797a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8017962:	4a11      	ldr	r2, [pc, #68]	; (80179a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017964:	6812      	ldr	r2, [r2, #0]
 8017966:	b112      	cbz	r2, 801796e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8017968:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801796c:	b9c0      	cbnz	r0, 80179a0 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801796e:	4a0f      	ldr	r2, [pc, #60]	; (80179ac <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8017970:	6811      	ldr	r1, [r2, #0]
 8017972:	2214      	movs	r2, #20
 8017974:	4353      	muls	r3, r2
 8017976:	58c8      	ldr	r0, [r1, r3]
 8017978:	4770      	bx	lr
 801797a:	4a0d      	ldr	r2, [pc, #52]	; (80179b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801797c:	8812      	ldrh	r2, [r2, #0]
 801797e:	440a      	add	r2, r1
 8017980:	4293      	cmp	r3, r2
 8017982:	da04      	bge.n	801798e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8017984:	4a08      	ldr	r2, [pc, #32]	; (80179a8 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8017986:	6812      	ldr	r2, [r2, #0]
 8017988:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801798c:	4770      	bx	lr
 801798e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017992:	4293      	cmp	r3, r2
 8017994:	d103      	bne.n	801799e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8017996:	4b07      	ldr	r3, [pc, #28]	; (80179b4 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801799c:	4770      	bx	lr
 801799e:	2000      	movs	r0, #0
 80179a0:	4770      	bx	lr
 80179a2:	bf00      	nop
 80179a4:	2400afb4 	.word	0x2400afb4
 80179a8:	2400af98 	.word	0x2400af98
 80179ac:	2400afbc 	.word	0x2400afbc
 80179b0:	2400afb8 	.word	0x2400afb8
 80179b4:	2400af34 	.word	0x2400af34

080179b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 80179b8:	4b24      	ldr	r3, [pc, #144]	; (8017a4c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 80179ba:	8802      	ldrh	r2, [r0, #0]
 80179bc:	8818      	ldrh	r0, [r3, #0]
 80179be:	4282      	cmp	r2, r0
 80179c0:	d221      	bcs.n	8017a06 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80179c2:	4b23      	ldr	r3, [pc, #140]	; (8017a50 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80179c4:	6819      	ldr	r1, [r3, #0]
 80179c6:	2314      	movs	r3, #20
 80179c8:	fb03 1302 	mla	r3, r3, r2, r1
 80179cc:	6858      	ldr	r0, [r3, #4]
 80179ce:	2800      	cmp	r0, #0
 80179d0:	d03a      	beq.n	8017a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80179d2:	4920      	ldr	r1, [pc, #128]	; (8017a54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80179d4:	6809      	ldr	r1, [r1, #0]
 80179d6:	2900      	cmp	r1, #0
 80179d8:	d036      	beq.n	8017a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80179da:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80179de:	2900      	cmp	r1, #0
 80179e0:	d032      	beq.n	8017a48 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80179e2:	891a      	ldrh	r2, [r3, #8]
 80179e4:	8958      	ldrh	r0, [r3, #10]
 80179e6:	4350      	muls	r0, r2
 80179e8:	7c5a      	ldrb	r2, [r3, #17]
 80179ea:	7cdb      	ldrb	r3, [r3, #19]
 80179ec:	0952      	lsrs	r2, r2, #5
 80179ee:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80179f2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80179f6:	2b0b      	cmp	r3, #11
 80179f8:	bf18      	it	ne
 80179fa:	0040      	lslne	r0, r0, #1
 80179fc:	3003      	adds	r0, #3
 80179fe:	f020 0003 	bic.w	r0, r0, #3
 8017a02:	4408      	add	r0, r1
 8017a04:	4770      	bx	lr
 8017a06:	4b14      	ldr	r3, [pc, #80]	; (8017a58 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 8017a08:	881b      	ldrh	r3, [r3, #0]
 8017a0a:	4403      	add	r3, r0
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	da1a      	bge.n	8017a46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017a10:	4b12      	ldr	r3, [pc, #72]	; (8017a5c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 8017a12:	1a10      	subs	r0, r2, r0
 8017a14:	210e      	movs	r1, #14
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	fb01 3000 	mla	r0, r1, r0, r3
 8017a1c:	7b03      	ldrb	r3, [r0, #12]
 8017a1e:	f003 031f 	and.w	r3, r3, #31
 8017a22:	2b0b      	cmp	r3, #11
 8017a24:	d10b      	bne.n	8017a3e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8017a26:	8903      	ldrh	r3, [r0, #8]
 8017a28:	8940      	ldrh	r0, [r0, #10]
 8017a2a:	4358      	muls	r0, r3
 8017a2c:	4b09      	ldr	r3, [pc, #36]	; (8017a54 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8017a2e:	3003      	adds	r0, #3
 8017a30:	6819      	ldr	r1, [r3, #0]
 8017a32:	f020 0303 	bic.w	r3, r0, #3
 8017a36:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 8017a3a:	4418      	add	r0, r3
 8017a3c:	4770      	bx	lr
 8017a3e:	2b0d      	cmp	r3, #13
 8017a40:	d101      	bne.n	8017a46 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8017a42:	300d      	adds	r0, #13
 8017a44:	4770      	bx	lr
 8017a46:	2000      	movs	r0, #0
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	2400afb4 	.word	0x2400afb4
 8017a50:	2400afbc 	.word	0x2400afbc
 8017a54:	2400af98 	.word	0x2400af98
 8017a58:	2400afb8 	.word	0x2400afb8
 8017a5c:	2400af9c 	.word	0x2400af9c

08017a60 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8017a60:	4a17      	ldr	r2, [pc, #92]	; (8017ac0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8017a62:	b510      	push	{r4, lr}
 8017a64:	8803      	ldrh	r3, [r0, #0]
 8017a66:	8812      	ldrh	r2, [r2, #0]
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	d20c      	bcs.n	8017a86 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 8017a6c:	4a15      	ldr	r2, [pc, #84]	; (8017ac4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8017a6e:	2114      	movs	r1, #20
 8017a70:	6812      	ldr	r2, [r2, #0]
 8017a72:	fb01 2303 	mla	r3, r1, r3, r2
 8017a76:	7c58      	ldrb	r0, [r3, #17]
 8017a78:	0942      	lsrs	r2, r0, #5
 8017a7a:	7cd8      	ldrb	r0, [r3, #19]
 8017a7c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8017a80:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8017a84:	bd10      	pop	{r4, pc}
 8017a86:	4910      	ldr	r1, [pc, #64]	; (8017ac8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8017a88:	8809      	ldrh	r1, [r1, #0]
 8017a8a:	4411      	add	r1, r2
 8017a8c:	428b      	cmp	r3, r1
 8017a8e:	da09      	bge.n	8017aa4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8017a90:	1a9b      	subs	r3, r3, r2
 8017a92:	4a0e      	ldr	r2, [pc, #56]	; (8017acc <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8017a94:	210e      	movs	r1, #14
 8017a96:	6812      	ldr	r2, [r2, #0]
 8017a98:	fb01 2303 	mla	r3, r1, r3, r2
 8017a9c:	7b18      	ldrb	r0, [r3, #12]
 8017a9e:	f000 001f 	and.w	r0, r0, #31
 8017aa2:	e7ef      	b.n	8017a84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017aa4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d106      	bne.n	8017aba <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 8017aac:	f7ec f9a2 	bl	8003df4 <_ZN8touchgfx3HAL3lcdEv>
 8017ab0:	6803      	ldr	r3, [r0, #0]
 8017ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ab8:	4718      	bx	r3
 8017aba:	2000      	movs	r0, #0
 8017abc:	e7e2      	b.n	8017a84 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8017abe:	bf00      	nop
 8017ac0:	2400afb4 	.word	0x2400afb4
 8017ac4:	2400afbc 	.word	0x2400afbc
 8017ac8:	2400afb8 	.word	0x2400afb8
 8017acc:	2400af9c 	.word	0x2400af9c

08017ad0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8017ad0:	2010      	movs	r0, #16
 8017ad2:	4770      	bx	lr

08017ad4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 8017ad4:	2000      	movs	r0, #0
 8017ad6:	4770      	bx	lr

08017ad8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 8017ad8:	4b02      	ldr	r3, [pc, #8]	; (8017ae4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 8017ada:	8818      	ldrh	r0, [r3, #0]
 8017adc:	0040      	lsls	r0, r0, #1
 8017ade:	b280      	uxth	r0, r0
 8017ae0:	4770      	bx	lr
 8017ae2:	bf00      	nop
 8017ae4:	2400af2e 	.word	0x2400af2e

08017ae8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 8017ae8:	2bff      	cmp	r3, #255	; 0xff
 8017aea:	d050      	beq.n	8017b8e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 8017aec:	2a0b      	cmp	r2, #11
 8017aee:	d04a      	beq.n	8017b86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017af0:	d80e      	bhi.n	8017b10 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 8017af2:	2a03      	cmp	r2, #3
 8017af4:	d03f      	beq.n	8017b76 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 8017af6:	d804      	bhi.n	8017b02 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 8017af8:	2a01      	cmp	r2, #1
 8017afa:	d03e      	beq.n	8017b7a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 8017afc:	d93f      	bls.n	8017b7e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 8017afe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8017b00:	4770      	bx	lr
 8017b02:	2a09      	cmp	r2, #9
 8017b04:	d03f      	beq.n	8017b86 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 8017b06:	d83c      	bhi.n	8017b82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017b08:	2a08      	cmp	r2, #8
 8017b0a:	d03a      	beq.n	8017b82 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8017b0c:	2000      	movs	r0, #0
 8017b0e:	4770      	bx	lr
 8017b10:	2a2f      	cmp	r2, #47	; 0x2f
 8017b12:	d024      	beq.n	8017b5e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 8017b14:	d80d      	bhi.n	8017b32 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 8017b16:	2a2d      	cmp	r2, #45	; 0x2d
 8017b18:	d014      	beq.n	8017b44 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 8017b1a:	d826      	bhi.n	8017b6a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 8017b1c:	2a2c      	cmp	r2, #44	; 0x2c
 8017b1e:	d1f5      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b20:	684b      	ldr	r3, [r1, #4]
 8017b22:	781b      	ldrb	r3, [r3, #0]
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d018      	beq.n	8017b5a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8017b28:	d323      	bcc.n	8017b72 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8017b2a:	2b02      	cmp	r3, #2
 8017b2c:	d1ee      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b2e:	6880      	ldr	r0, [r0, #8]
 8017b30:	4770      	bx	lr
 8017b32:	2a31      	cmp	r2, #49	; 0x31
 8017b34:	d004      	beq.n	8017b40 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8017b36:	d328      	bcc.n	8017b8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017b38:	2a32      	cmp	r2, #50	; 0x32
 8017b3a:	d026      	beq.n	8017b8a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8017b3c:	2a33      	cmp	r2, #51	; 0x33
 8017b3e:	d1e5      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b40:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8017b42:	4770      	bx	lr
 8017b44:	684b      	ldr	r3, [r1, #4]
 8017b46:	781b      	ldrb	r3, [r3, #0]
 8017b48:	2b01      	cmp	r3, #1
 8017b4a:	d004      	beq.n	8017b56 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 8017b4c:	d30b      	bcc.n	8017b66 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 8017b4e:	2b02      	cmp	r3, #2
 8017b50:	d1dc      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b52:	6900      	ldr	r0, [r0, #16]
 8017b54:	4770      	bx	lr
 8017b56:	6a00      	ldr	r0, [r0, #32]
 8017b58:	4770      	bx	lr
 8017b5a:	6980      	ldr	r0, [r0, #24]
 8017b5c:	4770      	bx	lr
 8017b5e:	684b      	ldr	r3, [r1, #4]
 8017b60:	781b      	ldrb	r3, [r3, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d1d2      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b66:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8017b68:	4770      	bx	lr
 8017b6a:	684b      	ldr	r3, [r1, #4]
 8017b6c:	781b      	ldrb	r3, [r3, #0]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d1cc      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017b72:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8017b74:	4770      	bx	lr
 8017b76:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8017b78:	4770      	bx	lr
 8017b7a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8017b7c:	4770      	bx	lr
 8017b7e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8017b80:	4770      	bx	lr
 8017b82:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8017b84:	4770      	bx	lr
 8017b86:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8017b88:	4770      	bx	lr
 8017b8a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8017b8c:	4770      	bx	lr
 8017b8e:	2a0b      	cmp	r2, #11
 8017b90:	d049      	beq.n	8017c26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017b92:	d80e      	bhi.n	8017bb2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8017b94:	2a03      	cmp	r2, #3
 8017b96:	d040      	beq.n	8017c1a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8017b98:	d804      	bhi.n	8017ba4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 8017b9a:	2a01      	cmp	r2, #1
 8017b9c:	d03f      	beq.n	8017c1e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 8017b9e:	d940      	bls.n	8017c22 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8017ba0:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8017ba2:	4770      	bx	lr
 8017ba4:	2a09      	cmp	r2, #9
 8017ba6:	d03e      	beq.n	8017c26 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8017ba8:	d801      	bhi.n	8017bae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 8017baa:	2a08      	cmp	r2, #8
 8017bac:	d1ae      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017bae:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8017bb0:	4770      	bx	lr
 8017bb2:	2a2f      	cmp	r2, #47	; 0x2f
 8017bb4:	d024      	beq.n	8017c00 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8017bb6:	d80d      	bhi.n	8017bd4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8017bb8:	2a2d      	cmp	r2, #45	; 0x2d
 8017bba:	d014      	beq.n	8017be6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 8017bbc:	d826      	bhi.n	8017c0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 8017bbe:	2a2c      	cmp	r2, #44	; 0x2c
 8017bc0:	d1a4      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017bc2:	684b      	ldr	r3, [r1, #4]
 8017bc4:	781b      	ldrb	r3, [r3, #0]
 8017bc6:	2b01      	cmp	r3, #1
 8017bc8:	d018      	beq.n	8017bfc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 8017bca:	d324      	bcc.n	8017c16 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8017bcc:	2b02      	cmp	r3, #2
 8017bce:	d19d      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017bd0:	68c0      	ldr	r0, [r0, #12]
 8017bd2:	4770      	bx	lr
 8017bd4:	2a31      	cmp	r2, #49	; 0x31
 8017bd6:	d004      	beq.n	8017be2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 8017bd8:	d327      	bcc.n	8017c2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017bda:	2a32      	cmp	r2, #50	; 0x32
 8017bdc:	d025      	beq.n	8017c2a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 8017bde:	2a33      	cmp	r2, #51	; 0x33
 8017be0:	d194      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017be2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8017be4:	4770      	bx	lr
 8017be6:	684b      	ldr	r3, [r1, #4]
 8017be8:	781b      	ldrb	r3, [r3, #0]
 8017bea:	2b01      	cmp	r3, #1
 8017bec:	d004      	beq.n	8017bf8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 8017bee:	d30b      	bcc.n	8017c08 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 8017bf0:	2b02      	cmp	r3, #2
 8017bf2:	d18b      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017bf4:	6940      	ldr	r0, [r0, #20]
 8017bf6:	4770      	bx	lr
 8017bf8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8017bfa:	4770      	bx	lr
 8017bfc:	69c0      	ldr	r0, [r0, #28]
 8017bfe:	4770      	bx	lr
 8017c00:	684b      	ldr	r3, [r1, #4]
 8017c02:	781b      	ldrb	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d181      	bne.n	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c08:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8017c0a:	4770      	bx	lr
 8017c0c:	684b      	ldr	r3, [r1, #4]
 8017c0e:	781b      	ldrb	r3, [r3, #0]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	f47f af7b 	bne.w	8017b0c <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8017c16:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8017c18:	4770      	bx	lr
 8017c1a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8017c1c:	4770      	bx	lr
 8017c1e:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8017c20:	4770      	bx	lr
 8017c22:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8017c24:	4770      	bx	lr
 8017c26:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8017c28:	4770      	bx	lr
 8017c2a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 8017c2c:	4770      	bx	lr

08017c2e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c32:	b087      	sub	sp, #28
 8017c34:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017c36:	9205      	str	r2, [sp, #20]
 8017c38:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017c3c:	9101      	str	r1, [sp, #4]
 8017c3e:	9202      	str	r2, [sp, #8]
 8017c40:	6841      	ldr	r1, [r0, #4]
 8017c42:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017c46:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8017c4a:	fb01 2404 	mla	r4, r1, r4, r2
 8017c4e:	6802      	ldr	r2, [r0, #0]
 8017c50:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017c54:	f8de 2000 	ldr.w	r2, [lr]
 8017c58:	9203      	str	r2, [sp, #12]
 8017c5a:	f8de 2004 	ldr.w	r2, [lr, #4]
 8017c5e:	3204      	adds	r2, #4
 8017c60:	9204      	str	r2, [sp, #16]
 8017c62:	9a02      	ldr	r2, [sp, #8]
 8017c64:	43d6      	mvns	r6, r2
 8017c66:	b2f6      	uxtb	r6, r6
 8017c68:	9a01      	ldr	r2, [sp, #4]
 8017c6a:	2a00      	cmp	r2, #0
 8017c6c:	dc03      	bgt.n	8017c76 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017c6e:	9a05      	ldr	r2, [sp, #20]
 8017c70:	2a00      	cmp	r2, #0
 8017c72:	f340 8129 	ble.w	8017ec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017c76:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c78:	f9be c008 	ldrsh.w	ip, [lr, #8]
 8017c7c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017c80:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c82:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017c86:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	dd0e      	ble.n	8017cac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017c8e:	1408      	asrs	r0, r1, #16
 8017c90:	d405      	bmi.n	8017c9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017c92:	4560      	cmp	r0, ip
 8017c94:	da03      	bge.n	8017c9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017c96:	1410      	asrs	r0, r2, #16
 8017c98:	d401      	bmi.n	8017c9e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017c9a:	42b8      	cmp	r0, r7
 8017c9c:	db07      	blt.n	8017cae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8017c9e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017ca0:	3b01      	subs	r3, #1
 8017ca2:	3402      	adds	r4, #2
 8017ca4:	4401      	add	r1, r0
 8017ca6:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017ca8:	4402      	add	r2, r0
 8017caa:	e7ee      	b.n	8017c8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017cac:	d071      	beq.n	8017d92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017cae:	1e58      	subs	r0, r3, #1
 8017cb0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8017cb2:	fb05 1500 	mla	r5, r5, r0, r1
 8017cb6:	142d      	asrs	r5, r5, #16
 8017cb8:	d45f      	bmi.n	8017d7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017cba:	4565      	cmp	r5, ip
 8017cbc:	da5d      	bge.n	8017d7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017cbe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8017cc0:	fb05 2000 	mla	r0, r5, r0, r2
 8017cc4:	1400      	asrs	r0, r0, #16
 8017cc6:	d458      	bmi.n	8017d7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017cc8:	42b8      	cmp	r0, r7
 8017cca:	da56      	bge.n	8017d7a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8017ccc:	4699      	mov	r9, r3
 8017cce:	46a2      	mov	sl, r4
 8017cd0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 8017cd4:	f1b9 0f00 	cmp.w	r9, #0
 8017cd8:	dd57      	ble.n	8017d8a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 8017cda:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017cde:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8017ce2:	9803      	ldr	r0, [sp, #12]
 8017ce4:	140d      	asrs	r5, r1, #16
 8017ce6:	f109 39ff 	add.w	r9, r9, #4294967295
 8017cea:	fb07 000c 	mla	r0, r7, ip, r0
 8017cee:	5d40      	ldrb	r0, [r0, r5]
 8017cf0:	9d04      	ldr	r5, [sp, #16]
 8017cf2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017cf6:	f8ba 5000 	ldrh.w	r5, [sl]
 8017cfa:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017cfe:	122f      	asrs	r7, r5, #8
 8017d00:	ea4f 08e5 	mov.w	r8, r5, asr #3
 8017d04:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017d08:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017d0c:	00ed      	lsls	r5, r5, #3
 8017d0e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8017d12:	fb17 f706 	smulbb	r7, r7, r6
 8017d16:	b2ed      	uxtb	r5, r5
 8017d18:	fb18 f806 	smulbb	r8, r8, r6
 8017d1c:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8017d20:	10c7      	asrs	r7, r0, #3
 8017d22:	fb15 f506 	smulbb	r5, r5, r6
 8017d26:	00c0      	lsls	r0, r0, #3
 8017d28:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017d2c:	fa1f fc8c 	uxth.w	ip, ip
 8017d30:	b2c0      	uxtb	r0, r0
 8017d32:	fb07 870b 	mla	r7, r7, fp, r8
 8017d36:	fb00 500b 	mla	r0, r0, fp, r5
 8017d3a:	f10c 0501 	add.w	r5, ip, #1
 8017d3e:	b2bf      	uxth	r7, r7
 8017d40:	b280      	uxth	r0, r0
 8017d42:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017d46:	f107 0801 	add.w	r8, r7, #1
 8017d4a:	1c45      	adds	r5, r0, #1
 8017d4c:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8017d50:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017d54:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017d58:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017d5a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8017d5e:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017d62:	4401      	add	r1, r0
 8017d64:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017d68:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017d6a:	ea45 0c0c 	orr.w	ip, r5, ip
 8017d6e:	4402      	add	r2, r0
 8017d70:	ea4c 0c08 	orr.w	ip, ip, r8
 8017d74:	f82a cb02 	strh.w	ip, [sl], #2
 8017d78:	e7ac      	b.n	8017cd4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017d7a:	f04f 0800 	mov.w	r8, #0
 8017d7e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8017d82:	eb03 0008 	add.w	r0, r3, r8
 8017d86:	2800      	cmp	r0, #0
 8017d88:	dc41      	bgt.n	8017e0e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 8017d8a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d8e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017d92:	9b01      	ldr	r3, [sp, #4]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	f340 8097 	ble.w	8017ec8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017d9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017d9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017da0:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017da4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017da8:	eef0 6a62 	vmov.f32	s13, s5
 8017dac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017db0:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017db4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017db8:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 8017dbc:	eef0 6a43 	vmov.f32	s13, s6
 8017dc0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8017dc4:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 8017dc8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017dcc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017dd0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017dd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017dd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017ddc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017de0:	ee12 2a90 	vmov	r2, s5
 8017de4:	eef0 2a47 	vmov.f32	s5, s14
 8017de8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017dec:	ee13 2a10 	vmov	r2, s6
 8017df0:	9313      	str	r3, [sp, #76]	; 0x4c
 8017df2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017df4:	eeb0 3a67 	vmov.f32	s6, s15
 8017df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8017dfc:	9314      	str	r3, [sp, #80]	; 0x50
 8017dfe:	9b01      	ldr	r3, [sp, #4]
 8017e00:	9a05      	ldr	r2, [sp, #20]
 8017e02:	3b01      	subs	r3, #1
 8017e04:	9301      	str	r3, [sp, #4]
 8017e06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017e08:	bf08      	it	eq
 8017e0a:	4613      	moveq	r3, r2
 8017e0c:	e72c      	b.n	8017c68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8017e0e:	140f      	asrs	r7, r1, #16
 8017e10:	d453      	bmi.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017e12:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017e16:	42bd      	cmp	r5, r7
 8017e18:	dd4f      	ble.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017e1a:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017e1e:	d44c      	bmi.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017e20:	f8de 000c 	ldr.w	r0, [lr, #12]
 8017e24:	4560      	cmp	r0, ip
 8017e26:	dd48      	ble.n	8017eba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8017e28:	9803      	ldr	r0, [sp, #12]
 8017e2a:	b22d      	sxth	r5, r5
 8017e2c:	fb0c 0505 	mla	r5, ip, r5, r0
 8017e30:	5de8      	ldrb	r0, [r5, r7]
 8017e32:	9d04      	ldr	r5, [sp, #16]
 8017e34:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8017e38:	f06f 0501 	mvn.w	r5, #1
 8017e3c:	fb05 fb08 	mul.w	fp, r5, r8
 8017e40:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017e44:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017e48:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017e4c:	122f      	asrs	r7, r5, #8
 8017e4e:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8017e52:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017e56:	00ed      	lsls	r5, r5, #3
 8017e58:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017e5c:	fb17 f706 	smulbb	r7, r7, r6
 8017e60:	b2ed      	uxtb	r5, r5
 8017e62:	fb19 f906 	smulbb	r9, r9, r6
 8017e66:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017e6a:	10c7      	asrs	r7, r0, #3
 8017e6c:	fb15 f506 	smulbb	r5, r5, r6
 8017e70:	00c0      	lsls	r0, r0, #3
 8017e72:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017e76:	fa1f fc8c 	uxth.w	ip, ip
 8017e7a:	b2c0      	uxtb	r0, r0
 8017e7c:	fb07 970a 	mla	r7, r7, sl, r9
 8017e80:	fb00 500a 	mla	r0, r0, sl, r5
 8017e84:	f10c 0501 	add.w	r5, ip, #1
 8017e88:	b2bf      	uxth	r7, r7
 8017e8a:	b280      	uxth	r0, r0
 8017e8c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017e90:	f107 0901 	add.w	r9, r7, #1
 8017e94:	1c45      	adds	r5, r0, #1
 8017e96:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017e9a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017e9e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017ea2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017ea6:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017eaa:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017eae:	ea45 0c0c 	orr.w	ip, r5, ip
 8017eb2:	ea4c 0c09 	orr.w	ip, ip, r9
 8017eb6:	f824 c00b 	strh.w	ip, [r4, fp]
 8017eba:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017ebc:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ec0:	4401      	add	r1, r0
 8017ec2:	9814      	ldr	r0, [sp, #80]	; 0x50
 8017ec4:	4402      	add	r2, r0
 8017ec6:	e75c      	b.n	8017d82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8017ec8:	b007      	add	sp, #28
 8017eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017ece <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017ece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ed2:	b085      	sub	sp, #20
 8017ed4:	4693      	mov	fp, r2
 8017ed6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017eda:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017edc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017ede:	6870      	ldr	r0, [r6, #4]
 8017ee0:	9100      	str	r1, [sp, #0]
 8017ee2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017ee6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017eea:	fb00 2404 	mla	r4, r0, r4, r2
 8017eee:	6832      	ldr	r2, [r6, #0]
 8017ef0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017ef4:	682a      	ldr	r2, [r5, #0]
 8017ef6:	9201      	str	r2, [sp, #4]
 8017ef8:	686a      	ldr	r2, [r5, #4]
 8017efa:	3204      	adds	r2, #4
 8017efc:	9202      	str	r2, [sp, #8]
 8017efe:	9a00      	ldr	r2, [sp, #0]
 8017f00:	2a00      	cmp	r2, #0
 8017f02:	dc03      	bgt.n	8017f0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017f04:	f1bb 0f00 	cmp.w	fp, #0
 8017f08:	f340 80a0 	ble.w	801804c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017f0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f0e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017f12:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017f16:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f18:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017f1c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	dd0c      	ble.n	8017f3e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017f24:	1406      	asrs	r6, r0, #16
 8017f26:	d405      	bmi.n	8017f34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f28:	454e      	cmp	r6, r9
 8017f2a:	da03      	bge.n	8017f34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f2c:	1416      	asrs	r6, r2, #16
 8017f2e:	d401      	bmi.n	8017f34 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017f30:	4546      	cmp	r6, r8
 8017f32:	db05      	blt.n	8017f40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8017f34:	4470      	add	r0, lr
 8017f36:	4462      	add	r2, ip
 8017f38:	3b01      	subs	r3, #1
 8017f3a:	3402      	adds	r4, #2
 8017f3c:	e7f0      	b.n	8017f20 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017f3e:	d00f      	beq.n	8017f60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8017f40:	1e5e      	subs	r6, r3, #1
 8017f42:	fb0e 0706 	mla	r7, lr, r6, r0
 8017f46:	143f      	asrs	r7, r7, #16
 8017f48:	d541      	bpl.n	8017fce <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 8017f4a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017f4e:	4698      	mov	r8, r3
 8017f50:	9603      	str	r6, [sp, #12]
 8017f52:	f1b8 0f00 	cmp.w	r8, #0
 8017f56:	dc59      	bgt.n	801800c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017f58:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f5c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017f60:	9b00      	ldr	r3, [sp, #0]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	dd72      	ble.n	801804c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8017f66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017f6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017f6c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017f70:	eeb0 6a62 	vmov.f32	s12, s5
 8017f74:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017f78:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017f7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f80:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017f84:	eeb0 6a43 	vmov.f32	s12, s6
 8017f88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017f8c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017f90:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017f94:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017f98:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017f9c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fa0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fa4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fa8:	ee12 2a90 	vmov	r2, s5
 8017fac:	eef0 2a47 	vmov.f32	s5, s14
 8017fb0:	fb92 fef3 	sdiv	lr, r2, r3
 8017fb4:	ee13 2a10 	vmov	r2, s6
 8017fb8:	eeb0 3a67 	vmov.f32	s6, s15
 8017fbc:	fb92 fcf3 	sdiv	ip, r2, r3
 8017fc0:	9b00      	ldr	r3, [sp, #0]
 8017fc2:	3b01      	subs	r3, #1
 8017fc4:	9300      	str	r3, [sp, #0]
 8017fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fc8:	bf08      	it	eq
 8017fca:	465b      	moveq	r3, fp
 8017fcc:	e797      	b.n	8017efe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017fce:	454f      	cmp	r7, r9
 8017fd0:	dabb      	bge.n	8017f4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017fd2:	fb0c 2606 	mla	r6, ip, r6, r2
 8017fd6:	1436      	asrs	r6, r6, #16
 8017fd8:	d4b7      	bmi.n	8017f4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017fda:	4546      	cmp	r6, r8
 8017fdc:	dab5      	bge.n	8017f4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017fde:	461e      	mov	r6, r3
 8017fe0:	46a0      	mov	r8, r4
 8017fe2:	2e00      	cmp	r6, #0
 8017fe4:	ddb8      	ble.n	8017f58 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8017fe6:	1417      	asrs	r7, r2, #16
 8017fe8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017fec:	9901      	ldr	r1, [sp, #4]
 8017fee:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017ff2:	4462      	add	r2, ip
 8017ff4:	4470      	add	r0, lr
 8017ff6:	fb0a 1707 	mla	r7, sl, r7, r1
 8017ffa:	9902      	ldr	r1, [sp, #8]
 8017ffc:	3e01      	subs	r6, #1
 8017ffe:	f817 7009 	ldrb.w	r7, [r7, r9]
 8018002:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8018006:	f828 7b02 	strh.w	r7, [r8], #2
 801800a:	e7ea      	b.n	8017fe2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801800c:	ea5f 4920 	movs.w	r9, r0, asr #16
 8018010:	d417      	bmi.n	8018042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018012:	68ae      	ldr	r6, [r5, #8]
 8018014:	454e      	cmp	r6, r9
 8018016:	dd14      	ble.n	8018042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018018:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801801c:	d411      	bmi.n	8018042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 801801e:	68ef      	ldr	r7, [r5, #12]
 8018020:	4557      	cmp	r7, sl
 8018022:	dd0e      	ble.n	8018042 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8018024:	9f01      	ldr	r7, [sp, #4]
 8018026:	b236      	sxth	r6, r6
 8018028:	f06f 0101 	mvn.w	r1, #1
 801802c:	fb0a 7606 	mla	r6, sl, r6, r7
 8018030:	9f02      	ldr	r7, [sp, #8]
 8018032:	f816 6009 	ldrb.w	r6, [r6, r9]
 8018036:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801803a:	fb01 f608 	mul.w	r6, r1, r8
 801803e:	9903      	ldr	r1, [sp, #12]
 8018040:	538f      	strh	r7, [r1, r6]
 8018042:	4470      	add	r0, lr
 8018044:	4462      	add	r2, ip
 8018046:	f108 38ff 	add.w	r8, r8, #4294967295
 801804a:	e782      	b.n	8017f52 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801804c:	b005      	add	sp, #20
 801804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018052 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018052:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018056:	b087      	sub	sp, #28
 8018058:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801805a:	9205      	str	r2, [sp, #20]
 801805c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018060:	9102      	str	r1, [sp, #8]
 8018062:	9203      	str	r2, [sp, #12]
 8018064:	6861      	ldr	r1, [r4, #4]
 8018066:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 801806a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801806e:	fb01 2000 	mla	r0, r1, r0, r2
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8018078:	9200      	str	r2, [sp, #0]
 801807a:	f8dc 2000 	ldr.w	r2, [ip]
 801807e:	9204      	str	r2, [sp, #16]
 8018080:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018084:	3204      	adds	r2, #4
 8018086:	9201      	str	r2, [sp, #4]
 8018088:	9a03      	ldr	r2, [sp, #12]
 801808a:	43d5      	mvns	r5, r2
 801808c:	b2ed      	uxtb	r5, r5
 801808e:	9a02      	ldr	r2, [sp, #8]
 8018090:	2a00      	cmp	r2, #0
 8018092:	dc03      	bgt.n	801809c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8018094:	9a05      	ldr	r2, [sp, #20]
 8018096:	2a00      	cmp	r2, #0
 8018098:	f340 812c 	ble.w	80182f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801809c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801809e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 80180a2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80180a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80180a8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80180ac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	dd10      	ble.n	80180d6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80180b4:	140c      	asrs	r4, r1, #16
 80180b6:	d405      	bmi.n	80180c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80180b8:	4574      	cmp	r4, lr
 80180ba:	da03      	bge.n	80180c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80180bc:	1414      	asrs	r4, r2, #16
 80180be:	d401      	bmi.n	80180c4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80180c0:	42bc      	cmp	r4, r7
 80180c2:	db09      	blt.n	80180d8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80180c4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80180c6:	3b01      	subs	r3, #1
 80180c8:	9800      	ldr	r0, [sp, #0]
 80180ca:	4421      	add	r1, r4
 80180cc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80180ce:	3002      	adds	r0, #2
 80180d0:	4422      	add	r2, r4
 80180d2:	9000      	str	r0, [sp, #0]
 80180d4:	e7ec      	b.n	80180b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80180d6:	d071      	beq.n	80181bc <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80180d8:	1e5c      	subs	r4, r3, #1
 80180da:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80180dc:	fb06 1604 	mla	r6, r6, r4, r1
 80180e0:	1436      	asrs	r6, r6, #16
 80180e2:	d45d      	bmi.n	80181a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80180e4:	4576      	cmp	r6, lr
 80180e6:	da5b      	bge.n	80181a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80180e8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80180ea:	fb06 2404 	mla	r4, r6, r4, r2
 80180ee:	1424      	asrs	r4, r4, #16
 80180f0:	d456      	bmi.n	80181a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80180f2:	42bc      	cmp	r4, r7
 80180f4:	da54      	bge.n	80181a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80180f6:	4698      	mov	r8, r3
 80180f8:	f8dd 9000 	ldr.w	r9, [sp]
 80180fc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 8018100:	f1b8 0f00 	cmp.w	r8, #0
 8018104:	dd54      	ble.n	80181b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018106:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 801810a:	1414      	asrs	r4, r2, #16
 801810c:	9804      	ldr	r0, [sp, #16]
 801810e:	140e      	asrs	r6, r1, #16
 8018110:	f108 38ff 	add.w	r8, r8, #4294967295
 8018114:	fb07 0404 	mla	r4, r7, r4, r0
 8018118:	9801      	ldr	r0, [sp, #4]
 801811a:	f814 e006 	ldrb.w	lr, [r4, r6]
 801811e:	f8b9 4000 	ldrh.w	r4, [r9]
 8018122:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018126:	1227      	asrs	r7, r4, #8
 8018128:	eb00 0b0e 	add.w	fp, r0, lr
 801812c:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8018130:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018134:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8018136:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801813a:	f89b b001 	ldrb.w	fp, [fp, #1]
 801813e:	4401      	add	r1, r0
 8018140:	fb16 f60a 	smulbb	r6, r6, sl
 8018144:	9814      	ldr	r0, [sp, #80]	; 0x50
 8018146:	fb1b fb0a 	smulbb	fp, fp, sl
 801814a:	fb07 6705 	mla	r7, r7, r5, r6
 801814e:	10e6      	asrs	r6, r4, #3
 8018150:	00e4      	lsls	r4, r4, #3
 8018152:	4402      	add	r2, r0
 8018154:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018158:	b2bf      	uxth	r7, r7
 801815a:	b2e4      	uxtb	r4, r4
 801815c:	fb06 b605 	mla	r6, r6, r5, fp
 8018160:	fb14 f405 	smulbb	r4, r4, r5
 8018164:	b2b6      	uxth	r6, r6
 8018166:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801816a:	1c7c      	adds	r4, r7, #1
 801816c:	f106 0b01 	add.w	fp, r6, #1
 8018170:	fa1f fe8e 	uxth.w	lr, lr
 8018174:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8018178:	f10e 0401 	add.w	r4, lr, #1
 801817c:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8018180:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018184:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8018188:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 801818c:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8018190:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8018194:	4327      	orrs	r7, r4
 8018196:	ea47 070b 	orr.w	r7, r7, fp
 801819a:	f829 7b02 	strh.w	r7, [r9], #2
 801819e:	e7af      	b.n	8018100 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 80181a0:	f04f 0e00 	mov.w	lr, #0
 80181a4:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 80181a8:	eb03 040e 	add.w	r4, r3, lr
 80181ac:	2c00      	cmp	r4, #0
 80181ae:	dc43      	bgt.n	8018238 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 80181b0:	9a00      	ldr	r2, [sp, #0]
 80181b2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80181b6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	9b02      	ldr	r3, [sp, #8]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	f340 8098 	ble.w	80182f4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80181c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80181c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80181ca:	ee30 0a04 	vadd.f32	s0, s0, s8
 80181ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80181d2:	eef0 6a62 	vmov.f32	s13, s5
 80181d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80181da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80181de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80181e2:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80181e6:	eef0 6a43 	vmov.f32	s13, s6
 80181ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80181ee:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80181f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80181f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80181fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80181fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018202:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018206:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801820a:	ee12 2a90 	vmov	r2, s5
 801820e:	eef0 2a47 	vmov.f32	s5, s14
 8018212:	fb92 f3f3 	sdiv	r3, r2, r3
 8018216:	ee13 2a10 	vmov	r2, s6
 801821a:	9313      	str	r3, [sp, #76]	; 0x4c
 801821c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801821e:	eeb0 3a67 	vmov.f32	s6, s15
 8018222:	fb92 f3f3 	sdiv	r3, r2, r3
 8018226:	9314      	str	r3, [sp, #80]	; 0x50
 8018228:	9b02      	ldr	r3, [sp, #8]
 801822a:	9a05      	ldr	r2, [sp, #20]
 801822c:	3b01      	subs	r3, #1
 801822e:	9302      	str	r3, [sp, #8]
 8018230:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018232:	bf08      	it	eq
 8018234:	4613      	moveq	r3, r2
 8018236:	e72a      	b.n	801808e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018238:	140f      	asrs	r7, r1, #16
 801823a:	d454      	bmi.n	80182e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801823c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8018240:	42be      	cmp	r6, r7
 8018242:	dd50      	ble.n	80182e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018244:	ea5f 4822 	movs.w	r8, r2, asr #16
 8018248:	d44d      	bmi.n	80182e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801824a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 801824e:	4544      	cmp	r4, r8
 8018250:	dd49      	ble.n	80182e6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8018252:	9c04      	ldr	r4, [sp, #16]
 8018254:	b236      	sxth	r6, r6
 8018256:	f06f 0001 	mvn.w	r0, #1
 801825a:	fb08 4606 	mla	r6, r8, r6, r4
 801825e:	9c01      	ldr	r4, [sp, #4]
 8018260:	fb00 fa0e 	mul.w	sl, r0, lr
 8018264:	9800      	ldr	r0, [sp, #0]
 8018266:	f816 8007 	ldrb.w	r8, [r6, r7]
 801826a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801826e:	eb04 0b08 	add.w	fp, r4, r8
 8018272:	f830 400a 	ldrh.w	r4, [r0, sl]
 8018276:	9801      	ldr	r0, [sp, #4]
 8018278:	f89b 6002 	ldrb.w	r6, [fp, #2]
 801827c:	1227      	asrs	r7, r4, #8
 801827e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8018282:	fb16 f609 	smulbb	r6, r6, r9
 8018286:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801828a:	f810 8008 	ldrb.w	r8, [r0, r8]
 801828e:	fb1b fb09 	smulbb	fp, fp, r9
 8018292:	fb07 6705 	mla	r7, r7, r5, r6
 8018296:	10e6      	asrs	r6, r4, #3
 8018298:	00e4      	lsls	r4, r4, #3
 801829a:	9800      	ldr	r0, [sp, #0]
 801829c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80182a0:	b2bf      	uxth	r7, r7
 80182a2:	b2e4      	uxtb	r4, r4
 80182a4:	fb06 b605 	mla	r6, r6, r5, fp
 80182a8:	fb14 f405 	smulbb	r4, r4, r5
 80182ac:	b2b6      	uxth	r6, r6
 80182ae:	fb08 4809 	mla	r8, r8, r9, r4
 80182b2:	1c7c      	adds	r4, r7, #1
 80182b4:	f106 0b01 	add.w	fp, r6, #1
 80182b8:	fa1f f888 	uxth.w	r8, r8
 80182bc:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 80182c0:	f108 0401 	add.w	r4, r8, #1
 80182c4:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 80182c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80182cc:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 80182d0:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 80182d4:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 80182d8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 80182dc:	4327      	orrs	r7, r4
 80182de:	ea47 070b 	orr.w	r7, r7, fp
 80182e2:	f820 700a 	strh.w	r7, [r0, sl]
 80182e6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80182e8:	f10e 3eff 	add.w	lr, lr, #4294967295
 80182ec:	4401      	add	r1, r0
 80182ee:	9814      	ldr	r0, [sp, #80]	; 0x50
 80182f0:	4402      	add	r2, r0
 80182f2:	e759      	b.n	80181a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80182f4:	b007      	add	sp, #28
 80182f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080182fc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80182fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018300:	b085      	sub	sp, #20
 8018302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018306:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8018308:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801830a:	9203      	str	r2, [sp, #12]
 801830c:	6870      	ldr	r0, [r6, #4]
 801830e:	686f      	ldr	r7, [r5, #4]
 8018310:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8018314:	3704      	adds	r7, #4
 8018316:	9101      	str	r1, [sp, #4]
 8018318:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 801831c:	fb00 2404 	mla	r4, r0, r4, r2
 8018320:	6832      	ldr	r2, [r6, #0]
 8018322:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018326:	682a      	ldr	r2, [r5, #0]
 8018328:	9202      	str	r2, [sp, #8]
 801832a:	9a01      	ldr	r2, [sp, #4]
 801832c:	2a00      	cmp	r2, #0
 801832e:	dc03      	bgt.n	8018338 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018330:	9a03      	ldr	r2, [sp, #12]
 8018332:	2a00      	cmp	r2, #0
 8018334:	f340 80cc 	ble.w	80184d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018338:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801833a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 801833e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018342:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018344:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8018348:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801834c:	2b00      	cmp	r3, #0
 801834e:	dd0d      	ble.n	801836c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018350:	1406      	asrs	r6, r0, #16
 8018352:	d405      	bmi.n	8018360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018354:	454e      	cmp	r6, r9
 8018356:	da03      	bge.n	8018360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8018358:	1416      	asrs	r6, r2, #16
 801835a:	d401      	bmi.n	8018360 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801835c:	4546      	cmp	r6, r8
 801835e:	db06      	blt.n	801836e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018360:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8018362:	4460      	add	r0, ip
 8018364:	3b01      	subs	r3, #1
 8018366:	3402      	adds	r4, #2
 8018368:	4432      	add	r2, r6
 801836a:	e7ef      	b.n	801834c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801836c:	d00f      	beq.n	801838e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801836e:	1e5e      	subs	r6, r3, #1
 8018370:	fb0c 0e06 	mla	lr, ip, r6, r0
 8018374:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8018378:	d543      	bpl.n	8018402 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801837a:	4698      	mov	r8, r3
 801837c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8018380:	f1b8 0f00 	cmp.w	r8, #0
 8018384:	dc71      	bgt.n	801846a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8018386:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801838a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801838e:	9b01      	ldr	r3, [sp, #4]
 8018390:	2b00      	cmp	r3, #0
 8018392:	f340 809d 	ble.w	80184d0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8018396:	ee30 0a04 	vadd.f32	s0, s0, s8
 801839a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801839c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80183a0:	eeb0 6a62 	vmov.f32	s12, s5
 80183a4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80183a8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80183ac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183b0:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80183b4:	eeb0 6a43 	vmov.f32	s12, s6
 80183b8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80183bc:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80183c0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80183c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80183c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80183cc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80183d0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80183d4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80183d8:	ee12 2a90 	vmov	r2, s5
 80183dc:	eef0 2a47 	vmov.f32	s5, s14
 80183e0:	fb92 fcf3 	sdiv	ip, r2, r3
 80183e4:	ee13 2a10 	vmov	r2, s6
 80183e8:	eeb0 3a67 	vmov.f32	s6, s15
 80183ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80183f0:	9312      	str	r3, [sp, #72]	; 0x48
 80183f2:	9b01      	ldr	r3, [sp, #4]
 80183f4:	9a03      	ldr	r2, [sp, #12]
 80183f6:	3b01      	subs	r3, #1
 80183f8:	9301      	str	r3, [sp, #4]
 80183fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80183fc:	bf08      	it	eq
 80183fe:	4613      	moveq	r3, r2
 8018400:	e793      	b.n	801832a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8018402:	45ce      	cmp	lr, r9
 8018404:	dab9      	bge.n	801837a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018406:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018408:	fb01 2606 	mla	r6, r1, r6, r2
 801840c:	1436      	asrs	r6, r6, #16
 801840e:	d4b4      	bmi.n	801837a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018410:	4546      	cmp	r6, r8
 8018412:	dab2      	bge.n	801837a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018414:	4698      	mov	r8, r3
 8018416:	46a2      	mov	sl, r4
 8018418:	f1b8 0f00 	cmp.w	r8, #0
 801841c:	ddb3      	ble.n	8018386 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801841e:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8018422:	1416      	asrs	r6, r2, #16
 8018424:	9902      	ldr	r1, [sp, #8]
 8018426:	ea4f 4e20 	mov.w	lr, r0, asr #16
 801842a:	f108 38ff 	add.w	r8, r8, #4294967295
 801842e:	4460      	add	r0, ip
 8018430:	fb09 1606 	mla	r6, r9, r6, r1
 8018434:	4928      	ldr	r1, [pc, #160]	; (80184d8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8018436:	f816 e00e 	ldrb.w	lr, [r6, lr]
 801843a:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801843e:	eb07 0b0e 	add.w	fp, r7, lr
 8018442:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8018446:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801844a:	00f6      	lsls	r6, r6, #3
 801844c:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8018450:	9912      	ldr	r1, [sp, #72]	; 0x48
 8018452:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018456:	440a      	add	r2, r1
 8018458:	ea49 0606 	orr.w	r6, r9, r6
 801845c:	f817 900e 	ldrb.w	r9, [r7, lr]
 8018460:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8018464:	f82a 6b02 	strh.w	r6, [sl], #2
 8018468:	e7d6      	b.n	8018418 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801846a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801846e:	d429      	bmi.n	80184c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018470:	68ae      	ldr	r6, [r5, #8]
 8018472:	454e      	cmp	r6, r9
 8018474:	dd26      	ble.n	80184c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018476:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801847a:	d423      	bmi.n	80184c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801847c:	68e9      	ldr	r1, [r5, #12]
 801847e:	4559      	cmp	r1, fp
 8018480:	dd20      	ble.n	80184c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8018482:	fa0f fe86 	sxth.w	lr, r6
 8018486:	9902      	ldr	r1, [sp, #8]
 8018488:	fb0b 1e0e 	mla	lr, fp, lr, r1
 801848c:	f06f 0101 	mvn.w	r1, #1
 8018490:	f81e e009 	ldrb.w	lr, [lr, r9]
 8018494:	fb01 f908 	mul.w	r9, r1, r8
 8018498:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 801849c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80184a0:	eb07 060e 	add.w	r6, r7, lr
 80184a4:	f896 b002 	ldrb.w	fp, [r6, #2]
 80184a8:	7876      	ldrb	r6, [r6, #1]
 80184aa:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 80184ae:	00f6      	lsls	r6, r6, #3
 80184b0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80184b4:	ea4b 0606 	orr.w	r6, fp, r6
 80184b8:	f817 b00e 	ldrb.w	fp, [r7, lr]
 80184bc:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 80184c0:	f82a 6009 	strh.w	r6, [sl, r9]
 80184c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80184c6:	4460      	add	r0, ip
 80184c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80184cc:	440a      	add	r2, r1
 80184ce:	e757      	b.n	8018380 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80184d0:	b005      	add	sp, #20
 80184d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184d6:	bf00      	nop
 80184d8:	fffff800 	.word	0xfffff800

080184dc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80184dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184e0:	b087      	sub	sp, #28
 80184e2:	468b      	mov	fp, r1
 80184e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80184e8:	9815      	ldr	r0, [sp, #84]	; 0x54
 80184ea:	9204      	str	r2, [sp, #16]
 80184ec:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80184f0:	6841      	ldr	r1, [r0, #4]
 80184f2:	9205      	str	r2, [sp, #20]
 80184f4:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 80184f8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80184fc:	fb01 2404 	mla	r4, r1, r4, r2
 8018500:	6802      	ldr	r2, [r0, #0]
 8018502:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018506:	f8dc 2000 	ldr.w	r2, [ip]
 801850a:	9201      	str	r2, [sp, #4]
 801850c:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8018510:	3204      	adds	r2, #4
 8018512:	9202      	str	r2, [sp, #8]
 8018514:	f1bb 0f00 	cmp.w	fp, #0
 8018518:	dc03      	bgt.n	8018522 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801851a:	9a04      	ldr	r2, [sp, #16]
 801851c:	2a00      	cmp	r2, #0
 801851e:	f340 8138 	ble.w	8018792 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018522:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018524:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8018528:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801852c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801852e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8018532:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018536:	2b00      	cmp	r3, #0
 8018538:	dd0e      	ble.n	8018558 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801853a:	1402      	asrs	r2, r0, #16
 801853c:	d405      	bmi.n	801854a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801853e:	42ba      	cmp	r2, r7
 8018540:	da03      	bge.n	801854a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018542:	140a      	asrs	r2, r1, #16
 8018544:	d401      	bmi.n	801854a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8018546:	42b2      	cmp	r2, r6
 8018548:	db07      	blt.n	801855a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801854a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801854c:	3b01      	subs	r3, #1
 801854e:	3402      	adds	r4, #2
 8018550:	4410      	add	r0, r2
 8018552:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018554:	4411      	add	r1, r2
 8018556:	e7ee      	b.n	8018536 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8018558:	d019      	beq.n	801858e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801855a:	1e5a      	subs	r2, r3, #1
 801855c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801855e:	fb05 0502 	mla	r5, r5, r2, r0
 8018562:	142d      	asrs	r5, r5, #16
 8018564:	d409      	bmi.n	801857a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018566:	42bd      	cmp	r5, r7
 8018568:	da07      	bge.n	801857a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801856a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801856c:	fb05 1202 	mla	r2, r5, r2, r1
 8018570:	1412      	asrs	r2, r2, #16
 8018572:	d402      	bmi.n	801857a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018574:	42b2      	cmp	r2, r6
 8018576:	f2c0 80ac 	blt.w	80186d2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801857a:	f04f 0e00 	mov.w	lr, #0
 801857e:	eb03 020e 	add.w	r2, r3, lr
 8018582:	2a00      	cmp	r2, #0
 8018584:	dc3e      	bgt.n	8018604 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018586:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801858a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801858e:	f1bb 0f00 	cmp.w	fp, #0
 8018592:	f340 80fe 	ble.w	8018792 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8018596:	ee30 0a04 	vadd.f32	s0, s0, s8
 801859a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801859c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185a0:	f1bb 0b01 	subs.w	fp, fp, #1
 80185a4:	eeb0 6a62 	vmov.f32	s12, s5
 80185a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185b4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80185b8:	eeb0 6a43 	vmov.f32	s12, s6
 80185bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185c0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80185c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80185dc:	ee12 2a90 	vmov	r2, s5
 80185e0:	eef0 2a47 	vmov.f32	s5, s14
 80185e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80185e8:	ee13 2a10 	vmov	r2, s6
 80185ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80185ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185f0:	eeb0 3a67 	vmov.f32	s6, s15
 80185f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80185f8:	9a04      	ldr	r2, [sp, #16]
 80185fa:	9314      	str	r3, [sp, #80]	; 0x50
 80185fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185fe:	bf08      	it	eq
 8018600:	4613      	moveq	r3, r2
 8018602:	e787      	b.n	8018514 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018604:	1406      	asrs	r6, r0, #16
 8018606:	d45d      	bmi.n	80186c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018608:	f8dc 5008 	ldr.w	r5, [ip, #8]
 801860c:	42b5      	cmp	r5, r6
 801860e:	dd59      	ble.n	80186c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018610:	140f      	asrs	r7, r1, #16
 8018612:	d457      	bmi.n	80186c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018614:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8018618:	42ba      	cmp	r2, r7
 801861a:	dd53      	ble.n	80186c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801861c:	9a01      	ldr	r2, [sp, #4]
 801861e:	b22d      	sxth	r5, r5
 8018620:	fb07 2505 	mla	r5, r7, r5, r2
 8018624:	5daa      	ldrb	r2, [r5, r6]
 8018626:	9d02      	ldr	r5, [sp, #8]
 8018628:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 801862c:	0e2e      	lsrs	r6, r5, #24
 801862e:	d049      	beq.n	80186c4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8018630:	f06f 0201 	mvn.w	r2, #1
 8018634:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018638:	fb02 f20e 	mul.w	r2, r2, lr
 801863c:	f834 8002 	ldrh.w	r8, [r4, r2]
 8018640:	9203      	str	r2, [sp, #12]
 8018642:	9a05      	ldr	r2, [sp, #20]
 8018644:	ea4f 2728 	mov.w	r7, r8, asr #8
 8018648:	4356      	muls	r6, r2
 801864a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801864e:	1c72      	adds	r2, r6, #1
 8018650:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018654:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018658:	b2ed      	uxtb	r5, r5
 801865a:	1212      	asrs	r2, r2, #8
 801865c:	fa1f f982 	uxth.w	r9, r2
 8018660:	43d2      	mvns	r2, r2
 8018662:	fb16 f609 	smulbb	r6, r6, r9
 8018666:	b2d2      	uxtb	r2, r2
 8018668:	fb15 f509 	smulbb	r5, r5, r9
 801866c:	fb07 6702 	mla	r7, r7, r2, r6
 8018670:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018674:	fb1a fa09 	smulbb	sl, sl, r9
 8018678:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 801867c:	b2bf      	uxth	r7, r7
 801867e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018682:	fa5f f888 	uxtb.w	r8, r8
 8018686:	fb06 a602 	mla	r6, r6, r2, sl
 801868a:	fb08 5502 	mla	r5, r8, r2, r5
 801868e:	1c7a      	adds	r2, r7, #1
 8018690:	b2b6      	uxth	r6, r6
 8018692:	b2ad      	uxth	r5, r5
 8018694:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018698:	9a03      	ldr	r2, [sp, #12]
 801869a:	f105 0a01 	add.w	sl, r5, #1
 801869e:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80186a2:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80186a6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80186aa:	ea4a 0707 	orr.w	r7, sl, r7
 80186ae:	f106 0a01 	add.w	sl, r6, #1
 80186b2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80186b6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80186ba:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80186be:	ea47 070a 	orr.w	r7, r7, sl
 80186c2:	52a7      	strh	r7, [r4, r2]
 80186c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80186c6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80186ca:	4410      	add	r0, r2
 80186cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80186ce:	4411      	add	r1, r2
 80186d0:	e755      	b.n	801857e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 80186d2:	f04f 0800 	mov.w	r8, #0
 80186d6:	eba3 0208 	sub.w	r2, r3, r8
 80186da:	2a00      	cmp	r2, #0
 80186dc:	f77f af53 	ble.w	8018586 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 80186e0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 80186e4:	140a      	asrs	r2, r1, #16
 80186e6:	9f01      	ldr	r7, [sp, #4]
 80186e8:	1405      	asrs	r5, r0, #16
 80186ea:	fb06 7202 	mla	r2, r6, r2, r7
 80186ee:	5d52      	ldrb	r2, [r2, r5]
 80186f0:	9d02      	ldr	r5, [sp, #8]
 80186f2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80186f6:	0e2e      	lsrs	r6, r5, #24
 80186f8:	d044      	beq.n	8018784 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 80186fa:	9a05      	ldr	r2, [sp, #20]
 80186fc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018700:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8018704:	4356      	muls	r6, r2
 8018706:	ea4f 272e 	mov.w	r7, lr, asr #8
 801870a:	1c72      	adds	r2, r6, #1
 801870c:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018710:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8018714:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018718:	b2ed      	uxtb	r5, r5
 801871a:	1212      	asrs	r2, r2, #8
 801871c:	fa1f f982 	uxth.w	r9, r2
 8018720:	43d2      	mvns	r2, r2
 8018722:	fb16 f609 	smulbb	r6, r6, r9
 8018726:	b2d2      	uxtb	r2, r2
 8018728:	fb15 f509 	smulbb	r5, r5, r9
 801872c:	fb07 6702 	mla	r7, r7, r2, r6
 8018730:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018734:	fb1a fa09 	smulbb	sl, sl, r9
 8018738:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801873c:	b2bf      	uxth	r7, r7
 801873e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018742:	fa5f fe8e 	uxtb.w	lr, lr
 8018746:	fb06 a602 	mla	r6, r6, r2, sl
 801874a:	fb0e 5502 	mla	r5, lr, r2, r5
 801874e:	1c7a      	adds	r2, r7, #1
 8018750:	b2b6      	uxth	r6, r6
 8018752:	b2ad      	uxth	r5, r5
 8018754:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8018758:	f105 0a01 	add.w	sl, r5, #1
 801875c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018760:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018764:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018768:	ea4a 0707 	orr.w	r7, sl, r7
 801876c:	f106 0a01 	add.w	sl, r6, #1
 8018770:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018774:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018778:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801877c:	ea47 070a 	orr.w	r7, r7, sl
 8018780:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018784:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018786:	f108 0801 	add.w	r8, r8, #1
 801878a:	4410      	add	r0, r2
 801878c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801878e:	4411      	add	r1, r2
 8018790:	e7a1      	b.n	80186d6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8018792:	b007      	add	sp, #28
 8018794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018798 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801879c:	b085      	sub	sp, #20
 801879e:	468b      	mov	fp, r1
 80187a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80187a4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80187a6:	9203      	str	r2, [sp, #12]
 80187a8:	6841      	ldr	r1, [r0, #4]
 80187aa:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 80187ae:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80187b2:	fb01 2404 	mla	r4, r1, r4, r2
 80187b6:	6802      	ldr	r2, [r0, #0]
 80187b8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80187bc:	f8de 2000 	ldr.w	r2, [lr]
 80187c0:	9200      	str	r2, [sp, #0]
 80187c2:	f8de 2004 	ldr.w	r2, [lr, #4]
 80187c6:	3204      	adds	r2, #4
 80187c8:	9201      	str	r2, [sp, #4]
 80187ca:	f1bb 0f00 	cmp.w	fp, #0
 80187ce:	dc03      	bgt.n	80187d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80187d0:	9a03      	ldr	r2, [sp, #12]
 80187d2:	2a00      	cmp	r2, #0
 80187d4:	f340 8153 	ble.w	8018a7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 80187d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80187da:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80187de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80187e2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80187e4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80187e8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	dd0e      	ble.n	801880e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80187f0:	1408      	asrs	r0, r1, #16
 80187f2:	d405      	bmi.n	8018800 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80187f4:	42b8      	cmp	r0, r7
 80187f6:	da03      	bge.n	8018800 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80187f8:	1410      	asrs	r0, r2, #16
 80187fa:	d401      	bmi.n	8018800 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80187fc:	42b0      	cmp	r0, r6
 80187fe:	db07      	blt.n	8018810 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8018800:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018802:	3b01      	subs	r3, #1
 8018804:	3402      	adds	r4, #2
 8018806:	4401      	add	r1, r0
 8018808:	9812      	ldr	r0, [sp, #72]	; 0x48
 801880a:	4402      	add	r2, r0
 801880c:	e7ee      	b.n	80187ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801880e:	d017      	beq.n	8018840 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018810:	1e58      	subs	r0, r3, #1
 8018812:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018814:	fb05 1500 	mla	r5, r5, r0, r1
 8018818:	142d      	asrs	r5, r5, #16
 801881a:	d409      	bmi.n	8018830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801881c:	42bd      	cmp	r5, r7
 801881e:	da07      	bge.n	8018830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018820:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018822:	fb05 2000 	mla	r0, r5, r0, r2
 8018826:	1400      	asrs	r0, r0, #16
 8018828:	d402      	bmi.n	8018830 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801882a:	42b0      	cmp	r0, r6
 801882c:	f2c0 80bc 	blt.w	80189a8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8018830:	2600      	movs	r6, #0
 8018832:	1998      	adds	r0, r3, r6
 8018834:	2800      	cmp	r0, #0
 8018836:	dc3e      	bgt.n	80188b6 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8018838:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801883c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018840:	f1bb 0f00 	cmp.w	fp, #0
 8018844:	f340 811b 	ble.w	8018a7e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8018848:	ee30 0a04 	vadd.f32	s0, s0, s8
 801884c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801884e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018852:	f1bb 0b01 	subs.w	fp, fp, #1
 8018856:	eeb0 6a62 	vmov.f32	s12, s5
 801885a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801885e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018862:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018866:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801886a:	eeb0 6a43 	vmov.f32	s12, s6
 801886e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018872:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018876:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801887a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801887e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018882:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018886:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801888a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801888e:	ee12 2a90 	vmov	r2, s5
 8018892:	eef0 2a47 	vmov.f32	s5, s14
 8018896:	fb92 f3f3 	sdiv	r3, r2, r3
 801889a:	ee13 2a10 	vmov	r2, s6
 801889e:	9311      	str	r3, [sp, #68]	; 0x44
 80188a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188a2:	eeb0 3a67 	vmov.f32	s6, s15
 80188a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80188aa:	9a03      	ldr	r2, [sp, #12]
 80188ac:	9312      	str	r3, [sp, #72]	; 0x48
 80188ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188b0:	bf08      	it	eq
 80188b2:	4613      	moveq	r3, r2
 80188b4:	e789      	b.n	80187ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80188b6:	140f      	asrs	r7, r1, #16
 80188b8:	d426      	bmi.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80188ba:	f8de 5008 	ldr.w	r5, [lr, #8]
 80188be:	42bd      	cmp	r5, r7
 80188c0:	dd22      	ble.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80188c2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80188c6:	d41f      	bmi.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80188c8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80188cc:	4560      	cmp	r0, ip
 80188ce:	dd1b      	ble.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80188d0:	9800      	ldr	r0, [sp, #0]
 80188d2:	b22d      	sxth	r5, r5
 80188d4:	fb0c 0505 	mla	r5, ip, r5, r0
 80188d8:	5de8      	ldrb	r0, [r5, r7]
 80188da:	9d01      	ldr	r5, [sp, #4]
 80188dc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80188e0:	0e07      	lsrs	r7, r0, #24
 80188e2:	2fff      	cmp	r7, #255	; 0xff
 80188e4:	d116      	bne.n	8018914 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80188e6:	f06f 0501 	mvn.w	r5, #1
 80188ea:	fb05 f706 	mul.w	r7, r5, r6
 80188ee:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80188f2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80188f6:	0945      	lsrs	r5, r0, #5
 80188f8:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80188fc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018900:	ea4c 0505 	orr.w	r5, ip, r5
 8018904:	4305      	orrs	r5, r0
 8018906:	53e5      	strh	r5, [r4, r7]
 8018908:	9811      	ldr	r0, [sp, #68]	; 0x44
 801890a:	3e01      	subs	r6, #1
 801890c:	4401      	add	r1, r0
 801890e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018910:	4402      	add	r2, r0
 8018912:	e78e      	b.n	8018832 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8018914:	b2fd      	uxtb	r5, r7
 8018916:	2f00      	cmp	r7, #0
 8018918:	d0f6      	beq.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801891a:	f06f 0701 	mvn.w	r7, #1
 801891e:	fa1f f985 	uxth.w	r9, r5
 8018922:	43ed      	mvns	r5, r5
 8018924:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018928:	4377      	muls	r7, r6
 801892a:	fb1a fa09 	smulbb	sl, sl, r9
 801892e:	b2ed      	uxtb	r5, r5
 8018930:	f834 8007 	ldrh.w	r8, [r4, r7]
 8018934:	9702      	str	r7, [sp, #8]
 8018936:	f3c0 4707 	ubfx	r7, r0, #16, #8
 801893a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801893e:	fb17 f709 	smulbb	r7, r7, r9
 8018942:	b2c0      	uxtb	r0, r0
 8018944:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018948:	fb10 f009 	smulbb	r0, r0, r9
 801894c:	fb0c 7c05 	mla	ip, ip, r5, r7
 8018950:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8018954:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018958:	fa1f fc8c 	uxth.w	ip, ip
 801895c:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018960:	fa5f f888 	uxtb.w	r8, r8
 8018964:	fb07 a705 	mla	r7, r7, r5, sl
 8018968:	fb08 0005 	mla	r0, r8, r5, r0
 801896c:	f10c 0501 	add.w	r5, ip, #1
 8018970:	b2bf      	uxth	r7, r7
 8018972:	b280      	uxth	r0, r0
 8018974:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8018978:	f100 0a01 	add.w	sl, r0, #1
 801897c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018980:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 8018984:	9802      	ldr	r0, [sp, #8]
 8018986:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801898a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801898e:	f107 0a01 	add.w	sl, r7, #1
 8018992:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018996:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801899a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801899e:	ea4c 0c0a 	orr.w	ip, ip, sl
 80189a2:	f824 c000 	strh.w	ip, [r4, r0]
 80189a6:	e7af      	b.n	8018908 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80189a8:	f04f 0800 	mov.w	r8, #0
 80189ac:	eba3 0008 	sub.w	r0, r3, r8
 80189b0:	2800      	cmp	r0, #0
 80189b2:	f77f af41 	ble.w	8018838 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80189b6:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 80189ba:	1410      	asrs	r0, r2, #16
 80189bc:	9f00      	ldr	r7, [sp, #0]
 80189be:	140d      	asrs	r5, r1, #16
 80189c0:	fb06 7000 	mla	r0, r6, r0, r7
 80189c4:	5d40      	ldrb	r0, [r0, r5]
 80189c6:	9d01      	ldr	r5, [sp, #4]
 80189c8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80189cc:	0e2e      	lsrs	r6, r5, #24
 80189ce:	2eff      	cmp	r6, #255	; 0xff
 80189d0:	d112      	bne.n	80189f8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80189d2:	482c      	ldr	r0, [pc, #176]	; (8018a84 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80189d4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80189d8:	0968      	lsrs	r0, r5, #5
 80189da:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80189de:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80189e2:	4330      	orrs	r0, r6
 80189e4:	4328      	orrs	r0, r5
 80189e6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80189ea:	9811      	ldr	r0, [sp, #68]	; 0x44
 80189ec:	f108 0801 	add.w	r8, r8, #1
 80189f0:	4401      	add	r1, r0
 80189f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80189f4:	4402      	add	r2, r0
 80189f6:	e7d9      	b.n	80189ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80189f8:	b2f0      	uxtb	r0, r6
 80189fa:	2e00      	cmp	r6, #0
 80189fc:	d0f5      	beq.n	80189ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80189fe:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 8018a02:	fa1f f980 	uxth.w	r9, r0
 8018a06:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8018a0a:	43c0      	mvns	r0, r0
 8018a0c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8018a10:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018a14:	fb16 f609 	smulbb	r6, r6, r9
 8018a18:	b2c0      	uxtb	r0, r0
 8018a1a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018a1e:	b2ed      	uxtb	r5, r5
 8018a20:	fb1a fa09 	smulbb	sl, sl, r9
 8018a24:	fb07 6700 	mla	r7, r7, r0, r6
 8018a28:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018a2c:	fb15 f509 	smulbb	r5, r5, r9
 8018a30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018a34:	b2bf      	uxth	r7, r7
 8018a36:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018a3a:	fa5f fc8c 	uxtb.w	ip, ip
 8018a3e:	fb06 a600 	mla	r6, r6, r0, sl
 8018a42:	fb0c 5500 	mla	r5, ip, r0, r5
 8018a46:	1c78      	adds	r0, r7, #1
 8018a48:	b2b6      	uxth	r6, r6
 8018a4a:	b2ad      	uxth	r5, r5
 8018a4c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8018a50:	f105 0a01 	add.w	sl, r5, #1
 8018a54:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8018a58:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018a5c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018a60:	ea4a 0707 	orr.w	r7, sl, r7
 8018a64:	f106 0a01 	add.w	sl, r6, #1
 8018a68:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018a6c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018a70:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018a74:	ea47 070a 	orr.w	r7, r7, sl
 8018a78:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8018a7c:	e7b5      	b.n	80189ea <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 8018a7e:	b005      	add	sp, #20
 8018a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a84:	fffff800 	.word	0xfffff800

08018a88 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a8c:	b087      	sub	sp, #28
 8018a8e:	468b      	mov	fp, r1
 8018a90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018a94:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8018a96:	9204      	str	r2, [sp, #16]
 8018a98:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8018a9c:	6861      	ldr	r1, [r4, #4]
 8018a9e:	9205      	str	r2, [sp, #20]
 8018aa0:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8018aa4:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8018aa8:	fb01 2000 	mla	r0, r1, r0, r2
 8018aac:	6822      	ldr	r2, [r4, #0]
 8018aae:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018ab2:	f8de 2000 	ldr.w	r2, [lr]
 8018ab6:	9201      	str	r2, [sp, #4]
 8018ab8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8018abc:	9202      	str	r2, [sp, #8]
 8018abe:	f1bb 0f00 	cmp.w	fp, #0
 8018ac2:	dc03      	bgt.n	8018acc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8018ac4:	9a04      	ldr	r2, [sp, #16]
 8018ac6:	2a00      	cmp	r2, #0
 8018ac8:	f340 8142 	ble.w	8018d50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018acc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018ace:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8018ad2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018ad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018ad8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8018adc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	dd0e      	ble.n	8018b02 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 8018ae4:	140c      	asrs	r4, r1, #16
 8018ae6:	d405      	bmi.n	8018af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018ae8:	42bc      	cmp	r4, r7
 8018aea:	da03      	bge.n	8018af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018aec:	1414      	asrs	r4, r2, #16
 8018aee:	d401      	bmi.n	8018af4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8018af0:	42b4      	cmp	r4, r6
 8018af2:	db07      	blt.n	8018b04 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8018af4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018af6:	3b01      	subs	r3, #1
 8018af8:	3002      	adds	r0, #2
 8018afa:	4421      	add	r1, r4
 8018afc:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018afe:	4422      	add	r2, r4
 8018b00:	e7ee      	b.n	8018ae0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8018b02:	d019      	beq.n	8018b38 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018b04:	1e5c      	subs	r4, r3, #1
 8018b06:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018b08:	fb05 1504 	mla	r5, r5, r4, r1
 8018b0c:	142d      	asrs	r5, r5, #16
 8018b0e:	d409      	bmi.n	8018b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018b10:	42bd      	cmp	r5, r7
 8018b12:	da07      	bge.n	8018b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018b14:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018b16:	fb05 2404 	mla	r4, r5, r4, r2
 8018b1a:	1424      	asrs	r4, r4, #16
 8018b1c:	d402      	bmi.n	8018b24 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8018b1e:	42b4      	cmp	r4, r6
 8018b20:	f2c0 80b1 	blt.w	8018c86 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8018b24:	f04f 0800 	mov.w	r8, #0
 8018b28:	eb03 0408 	add.w	r4, r3, r8
 8018b2c:	2c00      	cmp	r4, #0
 8018b2e:	dc3e      	bgt.n	8018bae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8018b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018b34:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018b38:	f1bb 0f00 	cmp.w	fp, #0
 8018b3c:	f340 8108 	ble.w	8018d50 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8018b40:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018b44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018b4a:	f1bb 0b01 	subs.w	fp, fp, #1
 8018b4e:	eeb0 6a62 	vmov.f32	s12, s5
 8018b52:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018b56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018b5a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b5e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8018b62:	eeb0 6a43 	vmov.f32	s12, s6
 8018b66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018b6a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8018b6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018b72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018b76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018b7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018b7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018b82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018b86:	ee12 2a90 	vmov	r2, s5
 8018b8a:	eef0 2a47 	vmov.f32	s5, s14
 8018b8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018b92:	ee13 2a10 	vmov	r2, s6
 8018b96:	9313      	str	r3, [sp, #76]	; 0x4c
 8018b98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018b9a:	eeb0 3a67 	vmov.f32	s6, s15
 8018b9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018ba2:	9a04      	ldr	r2, [sp, #16]
 8018ba4:	9314      	str	r3, [sp, #80]	; 0x50
 8018ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018ba8:	bf08      	it	eq
 8018baa:	4613      	moveq	r3, r2
 8018bac:	e787      	b.n	8018abe <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8018bae:	140e      	asrs	r6, r1, #16
 8018bb0:	d462      	bmi.n	8018c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018bb2:	f8de 5008 	ldr.w	r5, [lr, #8]
 8018bb6:	42b5      	cmp	r5, r6
 8018bb8:	dd5e      	ble.n	8018c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018bba:	1417      	asrs	r7, r2, #16
 8018bbc:	d45c      	bmi.n	8018c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018bbe:	f8de 400c 	ldr.w	r4, [lr, #12]
 8018bc2:	42bc      	cmp	r4, r7
 8018bc4:	dd58      	ble.n	8018c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018bc6:	b22d      	sxth	r5, r5
 8018bc8:	9c02      	ldr	r4, [sp, #8]
 8018bca:	fb07 6505 	mla	r5, r7, r5, r6
 8018bce:	5d66      	ldrb	r6, [r4, r5]
 8018bd0:	2e00      	cmp	r6, #0
 8018bd2:	d051      	beq.n	8018c78 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8018bd4:	9c01      	ldr	r4, [sp, #4]
 8018bd6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 8018bda:	f06f 0401 	mvn.w	r4, #1
 8018bde:	fb04 f408 	mul.w	r4, r4, r8
 8018be2:	ea4f 2c29 	mov.w	ip, r9, asr #8
 8018be6:	5b05      	ldrh	r5, [r0, r4]
 8018be8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018bec:	9403      	str	r4, [sp, #12]
 8018bee:	9c05      	ldr	r4, [sp, #20]
 8018bf0:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018bf4:	4366      	muls	r6, r4
 8018bf6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018bfa:	1c74      	adds	r4, r6, #1
 8018bfc:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018c00:	122e      	asrs	r6, r5, #8
 8018c02:	1224      	asrs	r4, r4, #8
 8018c04:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018c08:	00ed      	lsls	r5, r5, #3
 8018c0a:	b2a7      	uxth	r7, r4
 8018c0c:	43e4      	mvns	r4, r4
 8018c0e:	b2ed      	uxtb	r5, r5
 8018c10:	b2e4      	uxtb	r4, r4
 8018c12:	fb16 f604 	smulbb	r6, r6, r4
 8018c16:	fb15 f504 	smulbb	r5, r5, r4
 8018c1a:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018c1e:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8018c22:	fb1a fa04 	smulbb	sl, sl, r4
 8018c26:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018c2a:	fa1f fc8c 	uxth.w	ip, ip
 8018c2e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018c32:	fa5f f989 	uxtb.w	r9, r9
 8018c36:	fb06 a607 	mla	r6, r6, r7, sl
 8018c3a:	f10c 0401 	add.w	r4, ip, #1
 8018c3e:	fb09 5507 	mla	r5, r9, r7, r5
 8018c42:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018c46:	9c03      	ldr	r4, [sp, #12]
 8018c48:	b2ad      	uxth	r5, r5
 8018c4a:	b2b6      	uxth	r6, r6
 8018c4c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018c50:	f105 0a01 	add.w	sl, r5, #1
 8018c54:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018c58:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018c5c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018c60:	f106 0a01 	add.w	sl, r6, #1
 8018c64:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018c68:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018c6c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018c70:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018c74:	f820 c004 	strh.w	ip, [r0, r4]
 8018c78:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018c7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8018c7e:	4421      	add	r1, r4
 8018c80:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018c82:	4422      	add	r2, r4
 8018c84:	e750      	b.n	8018b28 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018c86:	f04f 0900 	mov.w	r9, #0
 8018c8a:	eba3 0409 	sub.w	r4, r3, r9
 8018c8e:	2c00      	cmp	r4, #0
 8018c90:	f77f af4e 	ble.w	8018b30 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018c94:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8018c98:	140d      	asrs	r5, r1, #16
 8018c9a:	1414      	asrs	r4, r2, #16
 8018c9c:	fb06 5404 	mla	r4, r6, r4, r5
 8018ca0:	9d02      	ldr	r5, [sp, #8]
 8018ca2:	5d2e      	ldrb	r6, [r5, r4]
 8018ca4:	2e00      	cmp	r6, #0
 8018ca6:	d04c      	beq.n	8018d42 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8018ca8:	9d01      	ldr	r5, [sp, #4]
 8018caa:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 8018cae:	9c05      	ldr	r4, [sp, #20]
 8018cb0:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018cb4:	ea4f 2c28 	mov.w	ip, r8, asr #8
 8018cb8:	4366      	muls	r6, r4
 8018cba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018cbe:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018cc2:	1c74      	adds	r4, r6, #1
 8018cc4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018cc8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8018ccc:	122e      	asrs	r6, r5, #8
 8018cce:	1224      	asrs	r4, r4, #8
 8018cd0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018cd4:	00ed      	lsls	r5, r5, #3
 8018cd6:	b2a7      	uxth	r7, r4
 8018cd8:	43e4      	mvns	r4, r4
 8018cda:	b2ed      	uxtb	r5, r5
 8018cdc:	b2e4      	uxtb	r4, r4
 8018cde:	fb16 f604 	smulbb	r6, r6, r4
 8018ce2:	fb15 f504 	smulbb	r5, r5, r4
 8018ce6:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018cea:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8018cee:	fb1a fa04 	smulbb	sl, sl, r4
 8018cf2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8018cf6:	fa1f fc8c 	uxth.w	ip, ip
 8018cfa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018cfe:	fa5f f888 	uxtb.w	r8, r8
 8018d02:	fb06 a607 	mla	r6, r6, r7, sl
 8018d06:	f10c 0401 	add.w	r4, ip, #1
 8018d0a:	fb08 5507 	mla	r5, r8, r7, r5
 8018d0e:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018d12:	b2ad      	uxth	r5, r5
 8018d14:	b2b6      	uxth	r6, r6
 8018d16:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018d1a:	f105 0a01 	add.w	sl, r5, #1
 8018d1e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018d22:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018d26:	ea4a 0c0c 	orr.w	ip, sl, ip
 8018d2a:	f106 0a01 	add.w	sl, r6, #1
 8018d2e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018d32:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018d36:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018d3a:	ea4c 0c0a 	orr.w	ip, ip, sl
 8018d3e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8018d42:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d44:	f109 0901 	add.w	r9, r9, #1
 8018d48:	4421      	add	r1, r4
 8018d4a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8018d4c:	4422      	add	r2, r4
 8018d4e:	e79c      	b.n	8018c8a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8018d50:	b007      	add	sp, #28
 8018d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018d56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018d56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d5a:	b085      	sub	sp, #20
 8018d5c:	468b      	mov	fp, r1
 8018d5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018d62:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8018d64:	9203      	str	r2, [sp, #12]
 8018d66:	6861      	ldr	r1, [r4, #4]
 8018d68:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8018d6c:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 8018d70:	fb01 2000 	mla	r0, r1, r0, r2
 8018d74:	6822      	ldr	r2, [r4, #0]
 8018d76:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8018d7a:	f8d8 2000 	ldr.w	r2, [r8]
 8018d7e:	9200      	str	r2, [sp, #0]
 8018d80:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8018d84:	9201      	str	r2, [sp, #4]
 8018d86:	f1bb 0f00 	cmp.w	fp, #0
 8018d8a:	dc03      	bgt.n	8018d94 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8018d8c:	9a03      	ldr	r2, [sp, #12]
 8018d8e:	2a00      	cmp	r2, #0
 8018d90:	f340 8146 	ble.w	8019020 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018d94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018d96:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8018d9a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018d9e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018da0:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8018da4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8018da8:	2b00      	cmp	r3, #0
 8018daa:	dd0e      	ble.n	8018dca <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8018dac:	140c      	asrs	r4, r1, #16
 8018dae:	d405      	bmi.n	8018dbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018db0:	42bc      	cmp	r4, r7
 8018db2:	da03      	bge.n	8018dbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018db4:	1414      	asrs	r4, r2, #16
 8018db6:	d401      	bmi.n	8018dbc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8018db8:	42b4      	cmp	r4, r6
 8018dba:	db07      	blt.n	8018dcc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8018dbc:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018dbe:	3b01      	subs	r3, #1
 8018dc0:	3002      	adds	r0, #2
 8018dc2:	4421      	add	r1, r4
 8018dc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018dc6:	4422      	add	r2, r4
 8018dc8:	e7ee      	b.n	8018da8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8018dca:	d017      	beq.n	8018dfc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8018dcc:	1e5c      	subs	r4, r3, #1
 8018dce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8018dd0:	fb05 1504 	mla	r5, r5, r4, r1
 8018dd4:	142d      	asrs	r5, r5, #16
 8018dd6:	d409      	bmi.n	8018dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018dd8:	42bd      	cmp	r5, r7
 8018dda:	da07      	bge.n	8018dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018ddc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8018dde:	fb05 2404 	mla	r4, r5, r4, r2
 8018de2:	1424      	asrs	r4, r4, #16
 8018de4:	d402      	bmi.n	8018dec <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8018de6:	42b4      	cmp	r4, r6
 8018de8:	f2c0 80b3 	blt.w	8018f52 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8018dec:	2600      	movs	r6, #0
 8018dee:	199c      	adds	r4, r3, r6
 8018df0:	2c00      	cmp	r4, #0
 8018df2:	dc3e      	bgt.n	8018e72 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8018df4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8018df8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018dfc:	f1bb 0f00 	cmp.w	fp, #0
 8018e00:	f340 810e 	ble.w	8019020 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8018e04:	ee30 0a04 	vadd.f32	s0, s0, s8
 8018e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8018e0e:	f1bb 0b01 	subs.w	fp, fp, #1
 8018e12:	eeb0 6a62 	vmov.f32	s12, s5
 8018e16:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8018e1a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8018e1e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e22:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8018e26:	eeb0 6a43 	vmov.f32	s12, s6
 8018e2a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8018e2e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018e32:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8018e36:	ee61 7a27 	vmul.f32	s15, s2, s15
 8018e3a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8018e3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8018e42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018e46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018e4a:	ee12 2a90 	vmov	r2, s5
 8018e4e:	eef0 2a47 	vmov.f32	s5, s14
 8018e52:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e56:	ee13 2a10 	vmov	r2, s6
 8018e5a:	9311      	str	r3, [sp, #68]	; 0x44
 8018e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e5e:	eeb0 3a67 	vmov.f32	s6, s15
 8018e62:	fb92 f3f3 	sdiv	r3, r2, r3
 8018e66:	9a03      	ldr	r2, [sp, #12]
 8018e68:	9312      	str	r3, [sp, #72]	; 0x48
 8018e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e6c:	bf08      	it	eq
 8018e6e:	4613      	moveq	r3, r2
 8018e70:	e789      	b.n	8018d86 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8018e72:	140f      	asrs	r7, r1, #16
 8018e74:	d418      	bmi.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018e76:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8018e7a:	42bd      	cmp	r5, r7
 8018e7c:	dd14      	ble.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018e7e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018e82:	d411      	bmi.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018e84:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8018e88:	4564      	cmp	r4, ip
 8018e8a:	dd0d      	ble.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018e8c:	b22d      	sxth	r5, r5
 8018e8e:	9c01      	ldr	r4, [sp, #4]
 8018e90:	fb0c 7505 	mla	r5, ip, r5, r7
 8018e94:	5d64      	ldrb	r4, [r4, r5]
 8018e96:	2cff      	cmp	r4, #255	; 0xff
 8018e98:	d10c      	bne.n	8018eb4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8018e9a:	9c00      	ldr	r4, [sp, #0]
 8018e9c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8018ea0:	f06f 0401 	mvn.w	r4, #1
 8018ea4:	4374      	muls	r4, r6
 8018ea6:	5305      	strh	r5, [r0, r4]
 8018ea8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018eaa:	3e01      	subs	r6, #1
 8018eac:	4421      	add	r1, r4
 8018eae:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018eb0:	4422      	add	r2, r4
 8018eb2:	e79c      	b.n	8018dee <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8018eb4:	2c00      	cmp	r4, #0
 8018eb6:	d0f7      	beq.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018eb8:	9f00      	ldr	r7, [sp, #0]
 8018eba:	fa1f fc84 	uxth.w	ip, r4
 8018ebe:	43e4      	mvns	r4, r4
 8018ec0:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 8018ec4:	f06f 0501 	mvn.w	r5, #1
 8018ec8:	b2e4      	uxtb	r4, r4
 8018eca:	4375      	muls	r5, r6
 8018ecc:	ea4f 2e29 	mov.w	lr, r9, asr #8
 8018ed0:	9502      	str	r5, [sp, #8]
 8018ed2:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8018ed6:	5b45      	ldrh	r5, [r0, r5]
 8018ed8:	122f      	asrs	r7, r5, #8
 8018eda:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018ede:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018ee2:	00ed      	lsls	r5, r5, #3
 8018ee4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018ee8:	fb17 f704 	smulbb	r7, r7, r4
 8018eec:	b2ed      	uxtb	r5, r5
 8018eee:	fb1a fa04 	smulbb	sl, sl, r4
 8018ef2:	fb0e 7e0c 	mla	lr, lr, ip, r7
 8018ef6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 8018efa:	fb15 f504 	smulbb	r5, r5, r4
 8018efe:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8018f02:	fa1f fe8e 	uxth.w	lr, lr
 8018f06:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8018f0a:	fa5f f989 	uxtb.w	r9, r9
 8018f0e:	fb07 a70c 	mla	r7, r7, ip, sl
 8018f12:	f10e 0401 	add.w	r4, lr, #1
 8018f16:	fb09 550c 	mla	r5, r9, ip, r5
 8018f1a:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8018f1e:	9c02      	ldr	r4, [sp, #8]
 8018f20:	b2ad      	uxth	r5, r5
 8018f22:	b2bf      	uxth	r7, r7
 8018f24:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8018f28:	f105 0a01 	add.w	sl, r5, #1
 8018f2c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018f30:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018f34:	ea4a 0e0e 	orr.w	lr, sl, lr
 8018f38:	f107 0a01 	add.w	sl, r7, #1
 8018f3c:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8018f40:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018f44:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018f48:	ea4e 0e0a 	orr.w	lr, lr, sl
 8018f4c:	f820 e004 	strh.w	lr, [r0, r4]
 8018f50:	e7aa      	b.n	8018ea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8018f52:	f04f 0900 	mov.w	r9, #0
 8018f56:	eba3 0409 	sub.w	r4, r3, r9
 8018f5a:	2c00      	cmp	r4, #0
 8018f5c:	f77f af4a 	ble.w	8018df4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8018f60:	1414      	asrs	r4, r2, #16
 8018f62:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018f66:	140d      	asrs	r5, r1, #16
 8018f68:	fb06 5504 	mla	r5, r6, r4, r5
 8018f6c:	9c01      	ldr	r4, [sp, #4]
 8018f6e:	5d64      	ldrb	r4, [r4, r5]
 8018f70:	2cff      	cmp	r4, #255	; 0xff
 8018f72:	d10b      	bne.n	8018f8c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8018f74:	9c00      	ldr	r4, [sp, #0]
 8018f76:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 8018f7a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 8018f7e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8018f80:	f109 0901 	add.w	r9, r9, #1
 8018f84:	4421      	add	r1, r4
 8018f86:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8018f88:	4422      	add	r2, r4
 8018f8a:	e7e4      	b.n	8018f56 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8018f8c:	2c00      	cmp	r4, #0
 8018f8e:	d0f6      	beq.n	8018f7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8018f90:	9e00      	ldr	r6, [sp, #0]
 8018f92:	b2a7      	uxth	r7, r4
 8018f94:	43e4      	mvns	r4, r4
 8018f96:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 8018f9a:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8018f9e:	b2e4      	uxtb	r4, r4
 8018fa0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018fa4:	122e      	asrs	r6, r5, #8
 8018fa6:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8018faa:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018fae:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8018fb2:	00ed      	lsls	r5, r5, #3
 8018fb4:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8018fb8:	fb16 f604 	smulbb	r6, r6, r4
 8018fbc:	b2ed      	uxtb	r5, r5
 8018fbe:	fb1a fa04 	smulbb	sl, sl, r4
 8018fc2:	fb0c 6c07 	mla	ip, ip, r7, r6
 8018fc6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8018fca:	fb15 f504 	smulbb	r5, r5, r4
 8018fce:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8018fd2:	fa1f fc8c 	uxth.w	ip, ip
 8018fd6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018fda:	fa5f fe8e 	uxtb.w	lr, lr
 8018fde:	fb06 a607 	mla	r6, r6, r7, sl
 8018fe2:	f10c 0401 	add.w	r4, ip, #1
 8018fe6:	fb0e 5507 	mla	r5, lr, r7, r5
 8018fea:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 8018fee:	b2ad      	uxth	r5, r5
 8018ff0:	b2b6      	uxth	r6, r6
 8018ff2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8018ff6:	f105 0a01 	add.w	sl, r5, #1
 8018ffa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8018ffe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019002:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019006:	f106 0a01 	add.w	sl, r6, #1
 801900a:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801900e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019012:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019016:	ea4c 0c0a 	orr.w	ip, ip, sl
 801901a:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 801901e:	e7ae      	b.n	8018f7e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8019020:	b005      	add	sp, #20
 8019022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019026 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019026:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801902a:	b085      	sub	sp, #20
 801902c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801902e:	9203      	str	r2, [sp, #12]
 8019030:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8019034:	9100      	str	r1, [sp, #0]
 8019036:	9201      	str	r2, [sp, #4]
 8019038:	6841      	ldr	r1, [r0, #4]
 801903a:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801903e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019042:	fb01 2404 	mla	r4, r1, r4, r2
 8019046:	6802      	ldr	r2, [r0, #0]
 8019048:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801904c:	f8de 2000 	ldr.w	r2, [lr]
 8019050:	9202      	str	r2, [sp, #8]
 8019052:	9a01      	ldr	r2, [sp, #4]
 8019054:	43d6      	mvns	r6, r2
 8019056:	b2f6      	uxtb	r6, r6
 8019058:	9a00      	ldr	r2, [sp, #0]
 801905a:	2a00      	cmp	r2, #0
 801905c:	dc03      	bgt.n	8019066 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801905e:	9a03      	ldr	r2, [sp, #12]
 8019060:	2a00      	cmp	r2, #0
 8019062:	f340 8124 	ble.w	80192ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019066:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019068:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801906c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019070:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019072:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8019076:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801907a:	2b00      	cmp	r3, #0
 801907c:	dd0e      	ble.n	801909c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801907e:	1408      	asrs	r0, r1, #16
 8019080:	d405      	bmi.n	801908e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019082:	4560      	cmp	r0, ip
 8019084:	da03      	bge.n	801908e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8019086:	1410      	asrs	r0, r2, #16
 8019088:	d401      	bmi.n	801908e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801908a:	42b8      	cmp	r0, r7
 801908c:	db07      	blt.n	801909e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801908e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019090:	3b01      	subs	r3, #1
 8019092:	3402      	adds	r4, #2
 8019094:	4401      	add	r1, r0
 8019096:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019098:	4402      	add	r2, r0
 801909a:	e7ee      	b.n	801907a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801909c:	d06e      	beq.n	801917c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801909e:	1e58      	subs	r0, r3, #1
 80190a0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80190a2:	fb05 1500 	mla	r5, r5, r0, r1
 80190a6:	142d      	asrs	r5, r5, #16
 80190a8:	d45c      	bmi.n	8019164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80190aa:	4565      	cmp	r5, ip
 80190ac:	da5a      	bge.n	8019164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80190ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80190b0:	fb05 2000 	mla	r0, r5, r0, r2
 80190b4:	1400      	asrs	r0, r0, #16
 80190b6:	d455      	bmi.n	8019164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80190b8:	42b8      	cmp	r0, r7
 80190ba:	da53      	bge.n	8019164 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80190bc:	4699      	mov	r9, r3
 80190be:	46a2      	mov	sl, r4
 80190c0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80190c4:	f1b9 0f00 	cmp.w	r9, #0
 80190c8:	dd54      	ble.n	8019174 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80190ca:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80190ce:	140d      	asrs	r5, r1, #16
 80190d0:	1410      	asrs	r0, r2, #16
 80190d2:	f109 39ff 	add.w	r9, r9, #4294967295
 80190d6:	fb07 5000 	mla	r0, r7, r0, r5
 80190da:	9d02      	ldr	r5, [sp, #8]
 80190dc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80190e0:	f8ba 5000 	ldrh.w	r5, [sl]
 80190e4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80190e8:	122f      	asrs	r7, r5, #8
 80190ea:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80190ee:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80190f2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80190f6:	00ed      	lsls	r5, r5, #3
 80190f8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80190fc:	fb17 f706 	smulbb	r7, r7, r6
 8019100:	b2ed      	uxtb	r5, r5
 8019102:	fb18 f806 	smulbb	r8, r8, r6
 8019106:	fb0c 7c0b 	mla	ip, ip, fp, r7
 801910a:	10c7      	asrs	r7, r0, #3
 801910c:	fb15 f506 	smulbb	r5, r5, r6
 8019110:	00c0      	lsls	r0, r0, #3
 8019112:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019116:	fa1f fc8c 	uxth.w	ip, ip
 801911a:	b2c0      	uxtb	r0, r0
 801911c:	fb07 870b 	mla	r7, r7, fp, r8
 8019120:	fb00 500b 	mla	r0, r0, fp, r5
 8019124:	f10c 0501 	add.w	r5, ip, #1
 8019128:	b2bf      	uxth	r7, r7
 801912a:	b280      	uxth	r0, r0
 801912c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019130:	f107 0801 	add.w	r8, r7, #1
 8019134:	1c45      	adds	r5, r0, #1
 8019136:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801913a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801913e:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019142:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019144:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019148:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801914c:	4401      	add	r1, r0
 801914e:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019152:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019154:	ea45 0c0c 	orr.w	ip, r5, ip
 8019158:	4402      	add	r2, r0
 801915a:	ea4c 0c08 	orr.w	ip, ip, r8
 801915e:	f82a cb02 	strh.w	ip, [sl], #2
 8019162:	e7af      	b.n	80190c4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019164:	f04f 0800 	mov.w	r8, #0
 8019168:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801916c:	eb03 0008 	add.w	r0, r3, r8
 8019170:	2800      	cmp	r0, #0
 8019172:	dc41      	bgt.n	80191f8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8019174:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019178:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801917c:	9b00      	ldr	r3, [sp, #0]
 801917e:	2b00      	cmp	r3, #0
 8019180:	f340 8095 	ble.w	80192ae <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8019184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801918a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801918e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019192:	eef0 6a62 	vmov.f32	s13, s5
 8019196:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801919a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801919e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191a2:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 80191a6:	eef0 6a43 	vmov.f32	s13, s6
 80191aa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80191ae:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80191b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80191b6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80191ba:	ee77 2a62 	vsub.f32	s5, s14, s5
 80191be:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80191c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80191c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80191ca:	ee12 2a90 	vmov	r2, s5
 80191ce:	eef0 2a47 	vmov.f32	s5, s14
 80191d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80191d6:	ee13 2a10 	vmov	r2, s6
 80191da:	9311      	str	r3, [sp, #68]	; 0x44
 80191dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191de:	eeb0 3a67 	vmov.f32	s6, s15
 80191e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80191e6:	9312      	str	r3, [sp, #72]	; 0x48
 80191e8:	9b00      	ldr	r3, [sp, #0]
 80191ea:	9a03      	ldr	r2, [sp, #12]
 80191ec:	3b01      	subs	r3, #1
 80191ee:	9300      	str	r3, [sp, #0]
 80191f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191f2:	bf08      	it	eq
 80191f4:	4613      	moveq	r3, r2
 80191f6:	e72f      	b.n	8019058 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80191f8:	140f      	asrs	r7, r1, #16
 80191fa:	d451      	bmi.n	80192a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80191fc:	f8de 5008 	ldr.w	r5, [lr, #8]
 8019200:	42bd      	cmp	r5, r7
 8019202:	dd4d      	ble.n	80192a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019204:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019208:	d44a      	bmi.n	80192a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801920a:	f8de 000c 	ldr.w	r0, [lr, #12]
 801920e:	4560      	cmp	r0, ip
 8019210:	dd46      	ble.n	80192a0 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8019212:	b22d      	sxth	r5, r5
 8019214:	9802      	ldr	r0, [sp, #8]
 8019216:	fb0c 7505 	mla	r5, ip, r5, r7
 801921a:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 801921e:	f06f 0501 	mvn.w	r5, #1
 8019222:	fb05 fb08 	mul.w	fp, r5, r8
 8019226:	ea4f 2c20 	mov.w	ip, r0, asr #8
 801922a:	f834 500b 	ldrh.w	r5, [r4, fp]
 801922e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019232:	122f      	asrs	r7, r5, #8
 8019234:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8019238:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801923c:	00ed      	lsls	r5, r5, #3
 801923e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019242:	fb17 f706 	smulbb	r7, r7, r6
 8019246:	b2ed      	uxtb	r5, r5
 8019248:	fb19 f906 	smulbb	r9, r9, r6
 801924c:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8019250:	10c7      	asrs	r7, r0, #3
 8019252:	fb15 f506 	smulbb	r5, r5, r6
 8019256:	00c0      	lsls	r0, r0, #3
 8019258:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801925c:	fa1f fc8c 	uxth.w	ip, ip
 8019260:	b2c0      	uxtb	r0, r0
 8019262:	fb07 970a 	mla	r7, r7, sl, r9
 8019266:	fb00 500a 	mla	r0, r0, sl, r5
 801926a:	f10c 0501 	add.w	r5, ip, #1
 801926e:	b2bf      	uxth	r7, r7
 8019270:	b280      	uxth	r0, r0
 8019272:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8019276:	f107 0901 	add.w	r9, r7, #1
 801927a:	1c45      	adds	r5, r0, #1
 801927c:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8019280:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019284:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8019288:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801928c:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019290:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8019294:	ea45 0c0c 	orr.w	ip, r5, ip
 8019298:	ea4c 0c09 	orr.w	ip, ip, r9
 801929c:	f824 c00b 	strh.w	ip, [r4, fp]
 80192a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80192a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80192a6:	4401      	add	r1, r0
 80192a8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80192aa:	4402      	add	r2, r0
 80192ac:	e75e      	b.n	801916c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80192ae:	b005      	add	sp, #20
 80192b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080192b4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80192b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b8:	b085      	sub	sp, #20
 80192ba:	4693      	mov	fp, r2
 80192bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80192c0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80192c2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80192c4:	6870      	ldr	r0, [r6, #4]
 80192c6:	9101      	str	r1, [sp, #4]
 80192c8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80192cc:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80192d0:	fb00 2404 	mla	r4, r0, r4, r2
 80192d4:	6832      	ldr	r2, [r6, #0]
 80192d6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80192da:	682a      	ldr	r2, [r5, #0]
 80192dc:	9202      	str	r2, [sp, #8]
 80192de:	9a01      	ldr	r2, [sp, #4]
 80192e0:	2a00      	cmp	r2, #0
 80192e2:	dc03      	bgt.n	80192ec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80192e4:	f1bb 0f00 	cmp.w	fp, #0
 80192e8:	f340 809a 	ble.w	8019420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 80192ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80192f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80192f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80192f8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80192fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019300:	2b00      	cmp	r3, #0
 8019302:	dd0c      	ble.n	801931e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8019304:	1406      	asrs	r6, r0, #16
 8019306:	d405      	bmi.n	8019314 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019308:	454e      	cmp	r6, r9
 801930a:	da03      	bge.n	8019314 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 801930c:	1416      	asrs	r6, r2, #16
 801930e:	d401      	bmi.n	8019314 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019310:	4546      	cmp	r6, r8
 8019312:	db05      	blt.n	8019320 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8019314:	4470      	add	r0, lr
 8019316:	4462      	add	r2, ip
 8019318:	3b01      	subs	r3, #1
 801931a:	3402      	adds	r4, #2
 801931c:	e7f0      	b.n	8019300 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801931e:	d00f      	beq.n	8019340 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8019320:	1e5e      	subs	r6, r3, #1
 8019322:	fb0e 0706 	mla	r7, lr, r6, r0
 8019326:	143f      	asrs	r7, r7, #16
 8019328:	d541      	bpl.n	80193ae <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801932a:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 801932e:	4698      	mov	r8, r3
 8019330:	9603      	str	r6, [sp, #12]
 8019332:	f1b8 0f00 	cmp.w	r8, #0
 8019336:	dc56      	bgt.n	80193e6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8019338:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801933c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019340:	9b01      	ldr	r3, [sp, #4]
 8019342:	2b00      	cmp	r3, #0
 8019344:	dd6c      	ble.n	8019420 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8019346:	ee30 0a04 	vadd.f32	s0, s0, s8
 801934a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801934c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019350:	eeb0 6a62 	vmov.f32	s12, s5
 8019354:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019358:	ee31 1a05 	vadd.f32	s2, s2, s10
 801935c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019360:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8019364:	eeb0 6a43 	vmov.f32	s12, s6
 8019368:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801936c:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8019370:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019374:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019378:	ee77 2a62 	vsub.f32	s5, s14, s5
 801937c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019380:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019384:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019388:	ee12 2a90 	vmov	r2, s5
 801938c:	eef0 2a47 	vmov.f32	s5, s14
 8019390:	fb92 fef3 	sdiv	lr, r2, r3
 8019394:	ee13 2a10 	vmov	r2, s6
 8019398:	eeb0 3a67 	vmov.f32	s6, s15
 801939c:	fb92 fcf3 	sdiv	ip, r2, r3
 80193a0:	9b01      	ldr	r3, [sp, #4]
 80193a2:	3b01      	subs	r3, #1
 80193a4:	9301      	str	r3, [sp, #4]
 80193a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80193a8:	bf08      	it	eq
 80193aa:	465b      	moveq	r3, fp
 80193ac:	e797      	b.n	80192de <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 80193ae:	454f      	cmp	r7, r9
 80193b0:	dabb      	bge.n	801932a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80193b2:	fb0c 2606 	mla	r6, ip, r6, r2
 80193b6:	1436      	asrs	r6, r6, #16
 80193b8:	d4b7      	bmi.n	801932a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80193ba:	4546      	cmp	r6, r8
 80193bc:	dab5      	bge.n	801932a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80193be:	461e      	mov	r6, r3
 80193c0:	46a0      	mov	r8, r4
 80193c2:	2e00      	cmp	r6, #0
 80193c4:	ddb8      	ble.n	8019338 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 80193c6:	1417      	asrs	r7, r2, #16
 80193c8:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80193cc:	ea4f 4920 	mov.w	r9, r0, asr #16
 80193d0:	9902      	ldr	r1, [sp, #8]
 80193d2:	4470      	add	r0, lr
 80193d4:	4462      	add	r2, ip
 80193d6:	fb0a 9707 	mla	r7, sl, r7, r9
 80193da:	3e01      	subs	r6, #1
 80193dc:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80193e0:	f828 7b02 	strh.w	r7, [r8], #2
 80193e4:	e7ed      	b.n	80193c2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 80193e6:	ea5f 4920 	movs.w	r9, r0, asr #16
 80193ea:	d414      	bmi.n	8019416 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80193ec:	68ae      	ldr	r6, [r5, #8]
 80193ee:	454e      	cmp	r6, r9
 80193f0:	dd11      	ble.n	8019416 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80193f2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80193f6:	d40e      	bmi.n	8019416 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80193f8:	68ef      	ldr	r7, [r5, #12]
 80193fa:	4557      	cmp	r7, sl
 80193fc:	dd0b      	ble.n	8019416 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 80193fe:	b236      	sxth	r6, r6
 8019400:	f06f 0101 	mvn.w	r1, #1
 8019404:	9f02      	ldr	r7, [sp, #8]
 8019406:	fb0a 9606 	mla	r6, sl, r6, r9
 801940a:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801940e:	fb01 f608 	mul.w	r6, r1, r8
 8019412:	9903      	ldr	r1, [sp, #12]
 8019414:	538f      	strh	r7, [r1, r6]
 8019416:	4470      	add	r0, lr
 8019418:	4462      	add	r2, ip
 801941a:	f108 38ff 	add.w	r8, r8, #4294967295
 801941e:	e788      	b.n	8019332 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019420:	b005      	add	sp, #20
 8019422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019426 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019426:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942a:	b087      	sub	sp, #28
 801942c:	468b      	mov	fp, r1
 801942e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019432:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019434:	9203      	str	r2, [sp, #12]
 8019436:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801943a:	6841      	ldr	r1, [r0, #4]
 801943c:	9204      	str	r2, [sp, #16]
 801943e:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8019442:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8019446:	fb01 2505 	mla	r5, r1, r5, r2
 801944a:	6802      	ldr	r2, [r0, #0]
 801944c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8019450:	f8d9 2000 	ldr.w	r2, [r9]
 8019454:	9201      	str	r2, [sp, #4]
 8019456:	f1bb 0f00 	cmp.w	fp, #0
 801945a:	dc03      	bgt.n	8019464 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801945c:	9a03      	ldr	r2, [sp, #12]
 801945e:	2a00      	cmp	r2, #0
 8019460:	f340 8158 	ble.w	8019714 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 8019464:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019466:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801946a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801946e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019470:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019474:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019478:	2b00      	cmp	r3, #0
 801947a:	dd0e      	ble.n	801949a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801947c:	1402      	asrs	r2, r0, #16
 801947e:	d405      	bmi.n	801948c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019480:	42ba      	cmp	r2, r7
 8019482:	da03      	bge.n	801948c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019484:	140a      	asrs	r2, r1, #16
 8019486:	d401      	bmi.n	801948c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8019488:	42b2      	cmp	r2, r6
 801948a:	db07      	blt.n	801949c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801948c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801948e:	3b01      	subs	r3, #1
 8019490:	3502      	adds	r5, #2
 8019492:	4410      	add	r0, r2
 8019494:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019496:	4411      	add	r1, r2
 8019498:	e7ee      	b.n	8019478 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801949a:	d017      	beq.n	80194cc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801949c:	1e5a      	subs	r2, r3, #1
 801949e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80194a0:	fb04 0402 	mla	r4, r4, r2, r0
 80194a4:	1424      	asrs	r4, r4, #16
 80194a6:	d409      	bmi.n	80194bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80194a8:	42bc      	cmp	r4, r7
 80194aa:	da07      	bge.n	80194bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80194ac:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80194ae:	fb04 1202 	mla	r2, r4, r2, r1
 80194b2:	1412      	asrs	r2, r2, #16
 80194b4:	d402      	bmi.n	80194bc <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80194b6:	42b2      	cmp	r2, r6
 80194b8:	f2c0 80bf 	blt.w	801963a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80194bc:	2700      	movs	r7, #0
 80194be:	19da      	adds	r2, r3, r7
 80194c0:	2a00      	cmp	r2, #0
 80194c2:	dc3e      	bgt.n	8019542 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80194c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80194c8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 80194cc:	f1bb 0f00 	cmp.w	fp, #0
 80194d0:	f340 8120 	ble.w	8019714 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 80194d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80194d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80194da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80194de:	f1bb 0b01 	subs.w	fp, fp, #1
 80194e2:	eeb0 6a62 	vmov.f32	s12, s5
 80194e6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80194ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80194ee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194f2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80194f6:	eeb0 6a43 	vmov.f32	s12, s6
 80194fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80194fe:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019502:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019506:	ee61 7a27 	vmul.f32	s15, s2, s15
 801950a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801950e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019512:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019516:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801951a:	ee12 2a90 	vmov	r2, s5
 801951e:	eef0 2a47 	vmov.f32	s5, s14
 8019522:	fb92 f3f3 	sdiv	r3, r2, r3
 8019526:	ee13 2a10 	vmov	r2, s6
 801952a:	9313      	str	r3, [sp, #76]	; 0x4c
 801952c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801952e:	eeb0 3a67 	vmov.f32	s6, s15
 8019532:	fb92 f3f3 	sdiv	r3, r2, r3
 8019536:	9a03      	ldr	r2, [sp, #12]
 8019538:	9314      	str	r3, [sp, #80]	; 0x50
 801953a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801953c:	bf08      	it	eq
 801953e:	4613      	moveq	r3, r2
 8019540:	e789      	b.n	8019456 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8019542:	1406      	asrs	r6, r0, #16
 8019544:	d42d      	bmi.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019546:	f8d9 4008 	ldr.w	r4, [r9, #8]
 801954a:	42b4      	cmp	r4, r6
 801954c:	dd29      	ble.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801954e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8019552:	d426      	bmi.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8019554:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019558:	4562      	cmp	r2, ip
 801955a:	dd22      	ble.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801955c:	b224      	sxth	r4, r4
 801955e:	9a01      	ldr	r2, [sp, #4]
 8019560:	fb0c 6404 	mla	r4, ip, r4, r6
 8019564:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8019568:	0e22      	lsrs	r2, r4, #24
 801956a:	d01a      	beq.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801956c:	9e04      	ldr	r6, [sp, #16]
 801956e:	4372      	muls	r2, r6
 8019570:	1c56      	adds	r6, r2, #1
 8019572:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019576:	0a26      	lsrs	r6, r4, #8
 8019578:	1212      	asrs	r2, r2, #8
 801957a:	9605      	str	r6, [sp, #20]
 801957c:	2aff      	cmp	r2, #255	; 0xff
 801957e:	d116      	bne.n	80195ae <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8019580:	f06f 0201 	mvn.w	r2, #1
 8019584:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019588:	fb02 fc07 	mul.w	ip, r2, r7
 801958c:	0962      	lsrs	r2, r4, #5
 801958e:	f026 0607 	bic.w	r6, r6, #7
 8019592:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8019596:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801959a:	4316      	orrs	r6, r2
 801959c:	4326      	orrs	r6, r4
 801959e:	f825 600c 	strh.w	r6, [r5, ip]
 80195a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80195a4:	3f01      	subs	r7, #1
 80195a6:	4410      	add	r0, r2
 80195a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80195aa:	4411      	add	r1, r2
 80195ac:	e787      	b.n	80194be <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80195ae:	f06f 0601 	mvn.w	r6, #1
 80195b2:	fa1f fa82 	uxth.w	sl, r2
 80195b6:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 80195ba:	43d2      	mvns	r2, r2
 80195bc:	437e      	muls	r6, r7
 80195be:	b2e4      	uxtb	r4, r4
 80195c0:	fb1c fc0a 	smulbb	ip, ip, sl
 80195c4:	b2d2      	uxtb	r2, r2
 80195c6:	f835 8006 	ldrh.w	r8, [r5, r6]
 80195ca:	fb14 f40a 	smulbb	r4, r4, sl
 80195ce:	9602      	str	r6, [sp, #8]
 80195d0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80195d4:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80195d8:	fb16 f60a 	smulbb	r6, r6, sl
 80195dc:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80195e0:	fb0e ce02 	mla	lr, lr, r2, ip
 80195e4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80195e8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80195ec:	fa1f fe8e 	uxth.w	lr, lr
 80195f0:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80195f4:	fa5f f888 	uxtb.w	r8, r8
 80195f8:	fb0c 6c02 	mla	ip, ip, r2, r6
 80195fc:	fb08 4402 	mla	r4, r8, r2, r4
 8019600:	f10e 0201 	add.w	r2, lr, #1
 8019604:	fa1f fc8c 	uxth.w	ip, ip
 8019608:	b2a4      	uxth	r4, r4
 801960a:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 801960e:	9a02      	ldr	r2, [sp, #8]
 8019610:	1c66      	adds	r6, r4, #1
 8019612:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019616:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 801961a:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801961e:	ea46 0e0e 	orr.w	lr, r6, lr
 8019622:	f10c 0601 	add.w	r6, ip, #1
 8019626:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 801962a:	0976      	lsrs	r6, r6, #5
 801962c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019630:	ea4e 0e06 	orr.w	lr, lr, r6
 8019634:	f825 e002 	strh.w	lr, [r5, r2]
 8019638:	e7b3      	b.n	80195a2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801963a:	f04f 0800 	mov.w	r8, #0
 801963e:	eba3 0208 	sub.w	r2, r3, r8
 8019642:	2a00      	cmp	r2, #0
 8019644:	f77f af3e 	ble.w	80194c4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8019648:	1404      	asrs	r4, r0, #16
 801964a:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 801964e:	140a      	asrs	r2, r1, #16
 8019650:	fb06 4202 	mla	r2, r6, r2, r4
 8019654:	9c01      	ldr	r4, [sp, #4]
 8019656:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 801965a:	0e22      	lsrs	r2, r4, #24
 801965c:	d015      	beq.n	801968a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 801965e:	9e04      	ldr	r6, [sp, #16]
 8019660:	4372      	muls	r2, r6
 8019662:	1c56      	adds	r6, r2, #1
 8019664:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8019668:	0a26      	lsrs	r6, r4, #8
 801966a:	1212      	asrs	r2, r2, #8
 801966c:	2aff      	cmp	r2, #255	; 0xff
 801966e:	d113      	bne.n	8019698 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8019670:	0962      	lsrs	r2, r4, #5
 8019672:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019676:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801967a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801967e:	f026 0607 	bic.w	r6, r6, #7
 8019682:	4316      	orrs	r6, r2
 8019684:	4326      	orrs	r6, r4
 8019686:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 801968a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801968c:	f108 0801 	add.w	r8, r8, #1
 8019690:	4410      	add	r0, r2
 8019692:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019694:	4411      	add	r1, r2
 8019696:	e7d2      	b.n	801963e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8019698:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 801969c:	fa1f fa82 	uxth.w	sl, r2
 80196a0:	f3c4 4707 	ubfx	r7, r4, #16, #8
 80196a4:	43d2      	mvns	r2, r2
 80196a6:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80196aa:	fb17 f70a 	smulbb	r7, r7, sl
 80196ae:	b2d2      	uxtb	r2, r2
 80196b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80196b4:	b2e4      	uxtb	r4, r4
 80196b6:	b2f6      	uxtb	r6, r6
 80196b8:	fb0c 7c02 	mla	ip, ip, r2, r7
 80196bc:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80196c0:	fb14 f40a 	smulbb	r4, r4, sl
 80196c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80196c8:	fa1f fc8c 	uxth.w	ip, ip
 80196cc:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80196d0:	fb16 f60a 	smulbb	r6, r6, sl
 80196d4:	fa5f fe8e 	uxtb.w	lr, lr
 80196d8:	fb0e 4402 	mla	r4, lr, r2, r4
 80196dc:	fb07 6702 	mla	r7, r7, r2, r6
 80196e0:	f10c 0201 	add.w	r2, ip, #1
 80196e4:	b2a4      	uxth	r4, r4
 80196e6:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80196ea:	1c66      	adds	r6, r4, #1
 80196ec:	b2bf      	uxth	r7, r7
 80196ee:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80196f2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 80196f6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80196fa:	ea46 0c0c 	orr.w	ip, r6, ip
 80196fe:	1c7e      	adds	r6, r7, #1
 8019700:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019704:	0976      	lsrs	r6, r6, #5
 8019706:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801970a:	ea4c 0c06 	orr.w	ip, ip, r6
 801970e:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8019712:	e7ba      	b.n	801968a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
 8019714:	b007      	add	sp, #28
 8019716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801971c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801971c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019720:	b085      	sub	sp, #20
 8019722:	468b      	mov	fp, r1
 8019724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019728:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801972a:	9203      	str	r2, [sp, #12]
 801972c:	6841      	ldr	r1, [r0, #4]
 801972e:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8019732:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8019736:	fb01 2404 	mla	r4, r1, r4, r2
 801973a:	6802      	ldr	r2, [r0, #0]
 801973c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019740:	f8d8 2000 	ldr.w	r2, [r8]
 8019744:	9201      	str	r2, [sp, #4]
 8019746:	f1bb 0f00 	cmp.w	fp, #0
 801974a:	dc03      	bgt.n	8019754 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801974c:	9a03      	ldr	r2, [sp, #12]
 801974e:	2a00      	cmp	r2, #0
 8019750:	f340 814f 	ble.w	80199f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8019754:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019756:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801975a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801975e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019760:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8019764:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8019768:	2b00      	cmp	r3, #0
 801976a:	dd0e      	ble.n	801978a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801976c:	1408      	asrs	r0, r1, #16
 801976e:	d405      	bmi.n	801977c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019770:	42b8      	cmp	r0, r7
 8019772:	da03      	bge.n	801977c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019774:	1410      	asrs	r0, r2, #16
 8019776:	d401      	bmi.n	801977c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8019778:	42b0      	cmp	r0, r6
 801977a:	db07      	blt.n	801978c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801977c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801977e:	3b01      	subs	r3, #1
 8019780:	3402      	adds	r4, #2
 8019782:	4401      	add	r1, r0
 8019784:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019786:	4402      	add	r2, r0
 8019788:	e7ee      	b.n	8019768 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801978a:	d017      	beq.n	80197bc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801978c:	1e58      	subs	r0, r3, #1
 801978e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8019790:	fb05 1500 	mla	r5, r5, r0, r1
 8019794:	142d      	asrs	r5, r5, #16
 8019796:	d409      	bmi.n	80197ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8019798:	42bd      	cmp	r5, r7
 801979a:	da07      	bge.n	80197ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801979c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801979e:	fb05 2000 	mla	r0, r5, r0, r2
 80197a2:	1400      	asrs	r0, r0, #16
 80197a4:	d402      	bmi.n	80197ac <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80197a6:	42b0      	cmp	r0, r6
 80197a8:	f2c0 80ba 	blt.w	8019920 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80197ac:	2600      	movs	r6, #0
 80197ae:	1998      	adds	r0, r3, r6
 80197b0:	2800      	cmp	r0, #0
 80197b2:	dc3e      	bgt.n	8019832 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80197b4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80197b8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80197bc:	f1bb 0f00 	cmp.w	fp, #0
 80197c0:	f340 8117 	ble.w	80199f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 80197c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80197c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80197ca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80197ce:	f1bb 0b01 	subs.w	fp, fp, #1
 80197d2:	eeb0 6a62 	vmov.f32	s12, s5
 80197d6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80197da:	ee31 1a05 	vadd.f32	s2, s2, s10
 80197de:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197e2:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 80197e6:	eeb0 6a43 	vmov.f32	s12, s6
 80197ea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80197ee:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 80197f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80197f6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80197fa:	ee77 2a62 	vsub.f32	s5, s14, s5
 80197fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019802:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019806:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801980a:	ee12 2a90 	vmov	r2, s5
 801980e:	eef0 2a47 	vmov.f32	s5, s14
 8019812:	fb92 f3f3 	sdiv	r3, r2, r3
 8019816:	ee13 2a10 	vmov	r2, s6
 801981a:	9311      	str	r3, [sp, #68]	; 0x44
 801981c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801981e:	eeb0 3a67 	vmov.f32	s6, s15
 8019822:	fb92 f3f3 	sdiv	r3, r2, r3
 8019826:	9a03      	ldr	r2, [sp, #12]
 8019828:	9312      	str	r3, [sp, #72]	; 0x48
 801982a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801982c:	bf08      	it	eq
 801982e:	4613      	moveq	r3, r2
 8019830:	e789      	b.n	8019746 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8019832:	140f      	asrs	r7, r1, #16
 8019834:	d424      	bmi.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019836:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801983a:	42bd      	cmp	r5, r7
 801983c:	dd20      	ble.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801983e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8019842:	d41d      	bmi.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019844:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8019848:	4560      	cmp	r0, ip
 801984a:	dd19      	ble.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801984c:	b22d      	sxth	r5, r5
 801984e:	9801      	ldr	r0, [sp, #4]
 8019850:	fb0c 7505 	mla	r5, ip, r5, r7
 8019854:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8019858:	0e07      	lsrs	r7, r0, #24
 801985a:	2fff      	cmp	r7, #255	; 0xff
 801985c:	d116      	bne.n	801988c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801985e:	f06f 0501 	mvn.w	r5, #1
 8019862:	fb05 f706 	mul.w	r7, r5, r6
 8019866:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801986a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801986e:	0945      	lsrs	r5, r0, #5
 8019870:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 8019874:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019878:	ea4c 0505 	orr.w	r5, ip, r5
 801987c:	4305      	orrs	r5, r0
 801987e:	53e5      	strh	r5, [r4, r7]
 8019880:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019882:	3e01      	subs	r6, #1
 8019884:	4401      	add	r1, r0
 8019886:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019888:	4402      	add	r2, r0
 801988a:	e790      	b.n	80197ae <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801988c:	b2fd      	uxtb	r5, r7
 801988e:	2f00      	cmp	r7, #0
 8019890:	d0f6      	beq.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019892:	f06f 0701 	mvn.w	r7, #1
 8019896:	fa1f f985 	uxth.w	r9, r5
 801989a:	43ed      	mvns	r5, r5
 801989c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 80198a0:	4377      	muls	r7, r6
 80198a2:	fb1a fa09 	smulbb	sl, sl, r9
 80198a6:	b2ed      	uxtb	r5, r5
 80198a8:	f834 e007 	ldrh.w	lr, [r4, r7]
 80198ac:	9702      	str	r7, [sp, #8]
 80198ae:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80198b2:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 80198b6:	fb17 f709 	smulbb	r7, r7, r9
 80198ba:	b2c0      	uxtb	r0, r0
 80198bc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80198c0:	fb10 f009 	smulbb	r0, r0, r9
 80198c4:	fb0c 7c05 	mla	ip, ip, r5, r7
 80198c8:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80198cc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80198d0:	fa1f fc8c 	uxth.w	ip, ip
 80198d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80198d8:	fa5f fe8e 	uxtb.w	lr, lr
 80198dc:	fb07 a705 	mla	r7, r7, r5, sl
 80198e0:	fb0e 0005 	mla	r0, lr, r5, r0
 80198e4:	f10c 0501 	add.w	r5, ip, #1
 80198e8:	b2bf      	uxth	r7, r7
 80198ea:	b280      	uxth	r0, r0
 80198ec:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80198f0:	f100 0a01 	add.w	sl, r0, #1
 80198f4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80198f8:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80198fc:	9802      	ldr	r0, [sp, #8]
 80198fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019902:	ea4a 0c0c 	orr.w	ip, sl, ip
 8019906:	f107 0a01 	add.w	sl, r7, #1
 801990a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801990e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019912:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019916:	ea4c 0c0a 	orr.w	ip, ip, sl
 801991a:	f824 c000 	strh.w	ip, [r4, r0]
 801991e:	e7af      	b.n	8019880 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8019920:	f04f 0e00 	mov.w	lr, #0
 8019924:	eba3 000e 	sub.w	r0, r3, lr
 8019928:	2800      	cmp	r0, #0
 801992a:	f77f af43 	ble.w	80197b4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801992e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8019932:	140d      	asrs	r5, r1, #16
 8019934:	1410      	asrs	r0, r2, #16
 8019936:	fb06 5000 	mla	r0, r6, r0, r5
 801993a:	9d01      	ldr	r5, [sp, #4]
 801993c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8019940:	0e2e      	lsrs	r6, r5, #24
 8019942:	2eff      	cmp	r6, #255	; 0xff
 8019944:	d112      	bne.n	801996c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8019946:	482c      	ldr	r0, [pc, #176]	; (80199f8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8019948:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801994c:	0968      	lsrs	r0, r5, #5
 801994e:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019952:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8019956:	4330      	orrs	r0, r6
 8019958:	4328      	orrs	r0, r5
 801995a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801995e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8019960:	f10e 0e01 	add.w	lr, lr, #1
 8019964:	4401      	add	r1, r0
 8019966:	9812      	ldr	r0, [sp, #72]	; 0x48
 8019968:	4402      	add	r2, r0
 801996a:	e7db      	b.n	8019924 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801996c:	b2f0      	uxtb	r0, r6
 801996e:	2e00      	cmp	r6, #0
 8019970:	d0f5      	beq.n	801995e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8019972:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019976:	fa1f f980 	uxth.w	r9, r0
 801997a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801997e:	43c0      	mvns	r0, r0
 8019980:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019984:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8019988:	fb16 f609 	smulbb	r6, r6, r9
 801998c:	b2c0      	uxtb	r0, r0
 801998e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019992:	b2ed      	uxtb	r5, r5
 8019994:	fb1a fa09 	smulbb	sl, sl, r9
 8019998:	fb07 6700 	mla	r7, r7, r0, r6
 801999c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 80199a0:	fb15 f509 	smulbb	r5, r5, r9
 80199a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80199a8:	b2bf      	uxth	r7, r7
 80199aa:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80199ae:	fa5f fc8c 	uxtb.w	ip, ip
 80199b2:	fb06 a600 	mla	r6, r6, r0, sl
 80199b6:	fb0c 5500 	mla	r5, ip, r0, r5
 80199ba:	1c78      	adds	r0, r7, #1
 80199bc:	b2b6      	uxth	r6, r6
 80199be:	b2ad      	uxth	r5, r5
 80199c0:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80199c4:	f105 0a01 	add.w	sl, r5, #1
 80199c8:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80199cc:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80199d0:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80199d4:	ea4a 0707 	orr.w	r7, sl, r7
 80199d8:	f106 0a01 	add.w	sl, r6, #1
 80199dc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80199e0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80199e4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80199e8:	ea47 070a 	orr.w	r7, r7, sl
 80199ec:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80199f0:	e7b5      	b.n	801995e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80199f2:	b005      	add	sp, #20
 80199f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199f8:	fffff800 	.word	0xfffff800

080199fc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80199fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a00:	b087      	sub	sp, #28
 8019a02:	468b      	mov	fp, r1
 8019a04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019a08:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019a0a:	9203      	str	r2, [sp, #12]
 8019a0c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8019a10:	6841      	ldr	r1, [r0, #4]
 8019a12:	9204      	str	r2, [sp, #16]
 8019a14:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8019a18:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019a1c:	fb01 2404 	mla	r4, r1, r4, r2
 8019a20:	6802      	ldr	r2, [r0, #0]
 8019a22:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019a26:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019a2a:	3201      	adds	r2, #1
 8019a2c:	f022 0201 	bic.w	r2, r2, #1
 8019a30:	9200      	str	r2, [sp, #0]
 8019a32:	f8d9 2000 	ldr.w	r2, [r9]
 8019a36:	9201      	str	r2, [sp, #4]
 8019a38:	f1bb 0f00 	cmp.w	fp, #0
 8019a3c:	dc03      	bgt.n	8019a46 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8019a3e:	9a03      	ldr	r2, [sp, #12]
 8019a40:	2a00      	cmp	r2, #0
 8019a42:	f340 816a 	ble.w	8019d1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019a46:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019a48:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8019a4c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019a50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019a52:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8019a56:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	dd0e      	ble.n	8019a7c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019a5e:	1402      	asrs	r2, r0, #16
 8019a60:	d405      	bmi.n	8019a6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019a62:	42ba      	cmp	r2, r7
 8019a64:	da03      	bge.n	8019a6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019a66:	140a      	asrs	r2, r1, #16
 8019a68:	d401      	bmi.n	8019a6e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8019a6a:	42b2      	cmp	r2, r6
 8019a6c:	db07      	blt.n	8019a7e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8019a6e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019a70:	3b01      	subs	r3, #1
 8019a72:	3402      	adds	r4, #2
 8019a74:	4410      	add	r0, r2
 8019a76:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019a78:	4411      	add	r1, r2
 8019a7a:	e7ee      	b.n	8019a5a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8019a7c:	d017      	beq.n	8019aae <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8019a7e:	1e5a      	subs	r2, r3, #1
 8019a80:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019a82:	fb05 0502 	mla	r5, r5, r2, r0
 8019a86:	142d      	asrs	r5, r5, #16
 8019a88:	d409      	bmi.n	8019a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a8a:	42bd      	cmp	r5, r7
 8019a8c:	da07      	bge.n	8019a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a8e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019a90:	fb05 1202 	mla	r2, r5, r2, r1
 8019a94:	1412      	asrs	r2, r2, #16
 8019a96:	d402      	bmi.n	8019a9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019a98:	42b2      	cmp	r2, r6
 8019a9a:	f2c0 80c8 	blt.w	8019c2e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8019a9e:	2700      	movs	r7, #0
 8019aa0:	19da      	adds	r2, r3, r7
 8019aa2:	2a00      	cmp	r2, #0
 8019aa4:	dc3e      	bgt.n	8019b24 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019aa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019aaa:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019aae:	f1bb 0f00 	cmp.w	fp, #0
 8019ab2:	f340 8132 	ble.w	8019d1a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8019ab6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019aba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019abc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019ac0:	f1bb 0b01 	subs.w	fp, fp, #1
 8019ac4:	eeb0 6a62 	vmov.f32	s12, s5
 8019ac8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019acc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019ad0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ad4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019ad8:	eeb0 6a43 	vmov.f32	s12, s6
 8019adc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019ae0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019ae4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019ae8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019aec:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019af0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019af4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019af8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019afc:	ee12 2a90 	vmov	r2, s5
 8019b00:	eef0 2a47 	vmov.f32	s5, s14
 8019b04:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b08:	ee13 2a10 	vmov	r2, s6
 8019b0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8019b0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019b10:	eeb0 3a67 	vmov.f32	s6, s15
 8019b14:	fb92 f3f3 	sdiv	r3, r2, r3
 8019b18:	9a03      	ldr	r2, [sp, #12]
 8019b1a:	9314      	str	r3, [sp, #80]	; 0x50
 8019b1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019b1e:	bf08      	it	eq
 8019b20:	4613      	moveq	r3, r2
 8019b22:	e789      	b.n	8019a38 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8019b24:	1405      	asrs	r5, r0, #16
 8019b26:	d436      	bmi.n	8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b28:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8019b2c:	42aa      	cmp	r2, r5
 8019b2e:	dd32      	ble.n	8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b30:	140e      	asrs	r6, r1, #16
 8019b32:	d430      	bmi.n	8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b34:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8019b38:	42b2      	cmp	r2, r6
 8019b3a:	dd2c      	ble.n	8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b3c:	9a00      	ldr	r2, [sp, #0]
 8019b3e:	fb06 5502 	mla	r5, r6, r2, r5
 8019b42:	9e01      	ldr	r6, [sp, #4]
 8019b44:	086a      	lsrs	r2, r5, #1
 8019b46:	5cb2      	ldrb	r2, [r6, r2]
 8019b48:	07ee      	lsls	r6, r5, #31
 8019b4a:	bf54      	ite	pl
 8019b4c:	f002 020f 	andpl.w	r2, r2, #15
 8019b50:	1112      	asrmi	r2, r2, #4
 8019b52:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019b56:	b2d2      	uxtb	r2, r2
 8019b58:	b1ea      	cbz	r2, 8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019b5a:	9d04      	ldr	r5, [sp, #16]
 8019b5c:	436a      	muls	r2, r5
 8019b5e:	1c55      	adds	r5, r2, #1
 8019b60:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019b64:	4d6e      	ldr	r5, [pc, #440]	; (8019d20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019b66:	1212      	asrs	r2, r2, #8
 8019b68:	682d      	ldr	r5, [r5, #0]
 8019b6a:	2aff      	cmp	r2, #255	; 0xff
 8019b6c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8019b70:	9605      	str	r6, [sp, #20]
 8019b72:	d116      	bne.n	8019ba2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8019b74:	f06f 0201 	mvn.w	r2, #1
 8019b78:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8019b7c:	fb02 fc07 	mul.w	ip, r2, r7
 8019b80:	096a      	lsrs	r2, r5, #5
 8019b82:	f026 0607 	bic.w	r6, r6, #7
 8019b86:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019b8a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019b8e:	4316      	orrs	r6, r2
 8019b90:	432e      	orrs	r6, r5
 8019b92:	f824 600c 	strh.w	r6, [r4, ip]
 8019b96:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019b98:	3f01      	subs	r7, #1
 8019b9a:	4410      	add	r0, r2
 8019b9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019b9e:	4411      	add	r1, r2
 8019ba0:	e77e      	b.n	8019aa0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8019ba2:	f06f 0601 	mvn.w	r6, #1
 8019ba6:	fa1f fa82 	uxth.w	sl, r2
 8019baa:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8019bae:	43d2      	mvns	r2, r2
 8019bb0:	437e      	muls	r6, r7
 8019bb2:	b2ed      	uxtb	r5, r5
 8019bb4:	fb1c fc0a 	smulbb	ip, ip, sl
 8019bb8:	b2d2      	uxtb	r2, r2
 8019bba:	f834 8006 	ldrh.w	r8, [r4, r6]
 8019bbe:	fb15 f50a 	smulbb	r5, r5, sl
 8019bc2:	9602      	str	r6, [sp, #8]
 8019bc4:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8019bc8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8019bcc:	fb16 f60a 	smulbb	r6, r6, sl
 8019bd0:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8019bd4:	fb0e ce02 	mla	lr, lr, r2, ip
 8019bd8:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8019bdc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8019be0:	fa1f fe8e 	uxth.w	lr, lr
 8019be4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8019be8:	fa5f f888 	uxtb.w	r8, r8
 8019bec:	fb0c 6c02 	mla	ip, ip, r2, r6
 8019bf0:	fb08 5502 	mla	r5, r8, r2, r5
 8019bf4:	f10e 0201 	add.w	r2, lr, #1
 8019bf8:	fa1f fc8c 	uxth.w	ip, ip
 8019bfc:	b2ad      	uxth	r5, r5
 8019bfe:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8019c02:	9a02      	ldr	r2, [sp, #8]
 8019c04:	1c6e      	adds	r6, r5, #1
 8019c06:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8019c0a:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 8019c0e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8019c12:	ea46 0e0e 	orr.w	lr, r6, lr
 8019c16:	f10c 0601 	add.w	r6, ip, #1
 8019c1a:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8019c1e:	0976      	lsrs	r6, r6, #5
 8019c20:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019c24:	ea4e 0e06 	orr.w	lr, lr, r6
 8019c28:	f824 e002 	strh.w	lr, [r4, r2]
 8019c2c:	e7b3      	b.n	8019b96 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8019c2e:	f04f 0800 	mov.w	r8, #0
 8019c32:	eba3 0208 	sub.w	r2, r3, r8
 8019c36:	2a00      	cmp	r2, #0
 8019c38:	f77f af35 	ble.w	8019aa6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8019c3c:	1402      	asrs	r2, r0, #16
 8019c3e:	9e00      	ldr	r6, [sp, #0]
 8019c40:	140d      	asrs	r5, r1, #16
 8019c42:	fb06 2505 	mla	r5, r6, r5, r2
 8019c46:	9e01      	ldr	r6, [sp, #4]
 8019c48:	086a      	lsrs	r2, r5, #1
 8019c4a:	07ed      	lsls	r5, r5, #31
 8019c4c:	5cb2      	ldrb	r2, [r6, r2]
 8019c4e:	bf54      	ite	pl
 8019c50:	f002 020f 	andpl.w	r2, r2, #15
 8019c54:	1112      	asrmi	r2, r2, #4
 8019c56:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019c5a:	b2d2      	uxtb	r2, r2
 8019c5c:	b1c2      	cbz	r2, 8019c90 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019c5e:	9d04      	ldr	r5, [sp, #16]
 8019c60:	436a      	muls	r2, r5
 8019c62:	1c55      	adds	r5, r2, #1
 8019c64:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8019c68:	4d2d      	ldr	r5, [pc, #180]	; (8019d20 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8019c6a:	1212      	asrs	r2, r2, #8
 8019c6c:	682e      	ldr	r6, [r5, #0]
 8019c6e:	2aff      	cmp	r2, #255	; 0xff
 8019c70:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8019c74:	d113      	bne.n	8019c9e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8019c76:	0972      	lsrs	r2, r6, #5
 8019c78:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 8019c7c:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8019c80:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019c84:	f025 0507 	bic.w	r5, r5, #7
 8019c88:	4315      	orrs	r5, r2
 8019c8a:	4335      	orrs	r5, r6
 8019c8c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8019c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019c92:	f108 0801 	add.w	r8, r8, #1
 8019c96:	4410      	add	r0, r2
 8019c98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019c9a:	4411      	add	r1, r2
 8019c9c:	e7c9      	b.n	8019c32 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8019c9e:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8019ca2:	fa1f fa82 	uxth.w	sl, r2
 8019ca6:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8019caa:	43d2      	mvns	r2, r2
 8019cac:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019cb0:	fb17 f70a 	smulbb	r7, r7, sl
 8019cb4:	b2d2      	uxtb	r2, r2
 8019cb6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019cba:	b2f6      	uxtb	r6, r6
 8019cbc:	b2ed      	uxtb	r5, r5
 8019cbe:	fb0c 7c02 	mla	ip, ip, r2, r7
 8019cc2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8019cc6:	fb16 f60a 	smulbb	r6, r6, sl
 8019cca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019cce:	fa1f fc8c 	uxth.w	ip, ip
 8019cd2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019cd6:	fb15 f50a 	smulbb	r5, r5, sl
 8019cda:	fa5f fe8e 	uxtb.w	lr, lr
 8019cde:	fb0e 6602 	mla	r6, lr, r2, r6
 8019ce2:	fb07 5702 	mla	r7, r7, r2, r5
 8019ce6:	f10c 0201 	add.w	r2, ip, #1
 8019cea:	b2b6      	uxth	r6, r6
 8019cec:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019cf0:	1c75      	adds	r5, r6, #1
 8019cf2:	b2bf      	uxth	r7, r7
 8019cf4:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8019cf8:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 8019cfc:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8019d00:	ea45 0c0c 	orr.w	ip, r5, ip
 8019d04:	1c7d      	adds	r5, r7, #1
 8019d06:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 8019d0a:	096d      	lsrs	r5, r5, #5
 8019d0c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8019d14:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 8019d18:	e7ba      	b.n	8019c90 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8019d1a:	b007      	add	sp, #28
 8019d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d20:	2400af3c 	.word	0x2400af3c

08019d24 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8019d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d28:	b087      	sub	sp, #28
 8019d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8019d2e:	f8df 8308 	ldr.w	r8, [pc, #776]	; 801a038 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8019d32:	9815      	ldr	r0, [sp, #84]	; 0x54
 8019d34:	9101      	str	r1, [sp, #4]
 8019d36:	9205      	str	r2, [sp, #20]
 8019d38:	6841      	ldr	r1, [r0, #4]
 8019d3a:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8019d3e:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8019d42:	fb01 2404 	mla	r4, r1, r4, r2
 8019d46:	6802      	ldr	r2, [r0, #0]
 8019d48:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8019d4c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019d50:	3201      	adds	r2, #1
 8019d52:	f022 0201 	bic.w	r2, r2, #1
 8019d56:	9202      	str	r2, [sp, #8]
 8019d58:	f8db 2000 	ldr.w	r2, [fp]
 8019d5c:	9203      	str	r2, [sp, #12]
 8019d5e:	9a01      	ldr	r2, [sp, #4]
 8019d60:	2a00      	cmp	r2, #0
 8019d62:	dc03      	bgt.n	8019d6c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8019d64:	9a05      	ldr	r2, [sp, #20]
 8019d66:	2a00      	cmp	r2, #0
 8019d68:	f340 8162 	ble.w	801a030 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019d6c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8019d6e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8019d72:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8019d76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8019d78:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 8019d7c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8019d80:	2b00      	cmp	r3, #0
 8019d82:	dd0e      	ble.n	8019da2 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8019d84:	1402      	asrs	r2, r0, #16
 8019d86:	d405      	bmi.n	8019d94 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d88:	42ba      	cmp	r2, r7
 8019d8a:	da03      	bge.n	8019d94 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d8c:	140a      	asrs	r2, r1, #16
 8019d8e:	d401      	bmi.n	8019d94 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8019d90:	42b2      	cmp	r2, r6
 8019d92:	db07      	blt.n	8019da4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8019d94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019d96:	3b01      	subs	r3, #1
 8019d98:	3402      	adds	r4, #2
 8019d9a:	4410      	add	r0, r2
 8019d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019d9e:	4411      	add	r1, r2
 8019da0:	e7ee      	b.n	8019d80 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8019da2:	d017      	beq.n	8019dd4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8019da4:	1e5a      	subs	r2, r3, #1
 8019da6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8019da8:	fb05 0502 	mla	r5, r5, r2, r0
 8019dac:	142d      	asrs	r5, r5, #16
 8019dae:	d409      	bmi.n	8019dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019db0:	42bd      	cmp	r5, r7
 8019db2:	da07      	bge.n	8019dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019db4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8019db6:	fb05 1202 	mla	r2, r5, r2, r1
 8019dba:	1412      	asrs	r2, r2, #16
 8019dbc:	d402      	bmi.n	8019dc4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8019dbe:	42b2      	cmp	r2, r6
 8019dc0:	f2c0 80c3 	blt.w	8019f4a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8019dc4:	2500      	movs	r5, #0
 8019dc6:	195a      	adds	r2, r3, r5
 8019dc8:	2a00      	cmp	r2, #0
 8019dca:	dc3f      	bgt.n	8019e4c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8019dcc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8019dd0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019dd4:	9b01      	ldr	r3, [sp, #4]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	f340 812a 	ble.w	801a030 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8019ddc:	ee30 0a04 	vadd.f32	s0, s0, s8
 8019de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019de2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8019de6:	eeb0 6a62 	vmov.f32	s12, s5
 8019dea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8019dee:	ee31 1a05 	vadd.f32	s2, s2, s10
 8019df2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019df6:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8019dfa:	eeb0 6a43 	vmov.f32	s12, s6
 8019dfe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8019e02:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8019e06:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8019e0a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8019e0e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8019e12:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8019e16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8019e1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8019e1e:	ee12 2a90 	vmov	r2, s5
 8019e22:	eef0 2a47 	vmov.f32	s5, s14
 8019e26:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e2a:	ee13 2a10 	vmov	r2, s6
 8019e2e:	9313      	str	r3, [sp, #76]	; 0x4c
 8019e30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e32:	eeb0 3a67 	vmov.f32	s6, s15
 8019e36:	fb92 f3f3 	sdiv	r3, r2, r3
 8019e3a:	9314      	str	r3, [sp, #80]	; 0x50
 8019e3c:	9b01      	ldr	r3, [sp, #4]
 8019e3e:	9a05      	ldr	r2, [sp, #20]
 8019e40:	3b01      	subs	r3, #1
 8019e42:	9301      	str	r3, [sp, #4]
 8019e44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8019e46:	bf08      	it	eq
 8019e48:	4613      	moveq	r3, r2
 8019e4a:	e788      	b.n	8019d5e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8019e4c:	1406      	asrs	r6, r0, #16
 8019e4e:	d42c      	bmi.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019e50:	f8db 2008 	ldr.w	r2, [fp, #8]
 8019e54:	42b2      	cmp	r2, r6
 8019e56:	dd28      	ble.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019e58:	140f      	asrs	r7, r1, #16
 8019e5a:	d426      	bmi.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019e5c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8019e60:	42ba      	cmp	r2, r7
 8019e62:	dd22      	ble.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019e64:	9a02      	ldr	r2, [sp, #8]
 8019e66:	fb07 6602 	mla	r6, r7, r2, r6
 8019e6a:	9f03      	ldr	r7, [sp, #12]
 8019e6c:	0872      	lsrs	r2, r6, #1
 8019e6e:	07f6      	lsls	r6, r6, #31
 8019e70:	5cba      	ldrb	r2, [r7, r2]
 8019e72:	bf54      	ite	pl
 8019e74:	f002 020f 	andpl.w	r2, r2, #15
 8019e78:	1112      	asrmi	r2, r2, #4
 8019e7a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019e7e:	b2d2      	uxtb	r2, r2
 8019e80:	2aff      	cmp	r2, #255	; 0xff
 8019e82:	d118      	bne.n	8019eb6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8019e84:	f06f 0601 	mvn.w	r6, #1
 8019e88:	f8d8 2000 	ldr.w	r2, [r8]
 8019e8c:	fb06 f705 	mul.w	r7, r6, r5
 8019e90:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8019e94:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8019e98:	0956      	lsrs	r6, r2, #5
 8019e9a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019e9e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019ea2:	ea4c 0606 	orr.w	r6, ip, r6
 8019ea6:	4316      	orrs	r6, r2
 8019ea8:	53e6      	strh	r6, [r4, r7]
 8019eaa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019eac:	3d01      	subs	r5, #1
 8019eae:	4410      	add	r0, r2
 8019eb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019eb2:	4411      	add	r1, r2
 8019eb4:	e787      	b.n	8019dc6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8019eb6:	2a00      	cmp	r2, #0
 8019eb8:	d0f7      	beq.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019eba:	f06f 0601 	mvn.w	r6, #1
 8019ebe:	f8d8 c000 	ldr.w	ip, [r8]
 8019ec2:	fa1f f982 	uxth.w	r9, r2
 8019ec6:	43d2      	mvns	r2, r2
 8019ec8:	436e      	muls	r6, r5
 8019eca:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 8019ece:	b2d2      	uxtb	r2, r2
 8019ed0:	f834 e006 	ldrh.w	lr, [r4, r6]
 8019ed4:	fb1a fa09 	smulbb	sl, sl, r9
 8019ed8:	9604      	str	r6, [sp, #16]
 8019eda:	f3cc 4607 	ubfx	r6, ip, #16, #8
 8019ede:	ea4f 272e 	mov.w	r7, lr, asr #8
 8019ee2:	fb16 f609 	smulbb	r6, r6, r9
 8019ee6:	fa5f fc8c 	uxtb.w	ip, ip
 8019eea:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019eee:	fb1c fc09 	smulbb	ip, ip, r9
 8019ef2:	fb07 6702 	mla	r7, r7, r2, r6
 8019ef6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019efa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019efe:	b2bf      	uxth	r7, r7
 8019f00:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019f04:	fa5f fe8e 	uxtb.w	lr, lr
 8019f08:	fb06 a602 	mla	r6, r6, r2, sl
 8019f0c:	fb0e cc02 	mla	ip, lr, r2, ip
 8019f10:	1c7a      	adds	r2, r7, #1
 8019f12:	b2b6      	uxth	r6, r6
 8019f14:	fa1f fc8c 	uxth.w	ip, ip
 8019f18:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8019f1c:	9a04      	ldr	r2, [sp, #16]
 8019f1e:	f10c 0a01 	add.w	sl, ip, #1
 8019f22:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8019f26:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8019f2a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8019f2e:	ea4a 0707 	orr.w	r7, sl, r7
 8019f32:	f106 0a01 	add.w	sl, r6, #1
 8019f36:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8019f3a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8019f3e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8019f42:	ea47 070a 	orr.w	r7, r7, sl
 8019f46:	52a7      	strh	r7, [r4, r2]
 8019f48:	e7af      	b.n	8019eaa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8019f4a:	f04f 0e00 	mov.w	lr, #0
 8019f4e:	eba3 020e 	sub.w	r2, r3, lr
 8019f52:	2a00      	cmp	r2, #0
 8019f54:	f77f af3a 	ble.w	8019dcc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8019f58:	1402      	asrs	r2, r0, #16
 8019f5a:	9e02      	ldr	r6, [sp, #8]
 8019f5c:	140d      	asrs	r5, r1, #16
 8019f5e:	fb06 2505 	mla	r5, r6, r5, r2
 8019f62:	9e03      	ldr	r6, [sp, #12]
 8019f64:	086a      	lsrs	r2, r5, #1
 8019f66:	07ed      	lsls	r5, r5, #31
 8019f68:	5cb2      	ldrb	r2, [r6, r2]
 8019f6a:	bf54      	ite	pl
 8019f6c:	f002 020f 	andpl.w	r2, r2, #15
 8019f70:	1112      	asrmi	r2, r2, #4
 8019f72:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8019f76:	b2d2      	uxtb	r2, r2
 8019f78:	2aff      	cmp	r2, #255	; 0xff
 8019f7a:	d115      	bne.n	8019fa8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8019f7c:	f8d8 5000 	ldr.w	r5, [r8]
 8019f80:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8019f84:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8019f88:	096a      	lsrs	r2, r5, #5
 8019f8a:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8019f8e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8019f92:	4332      	orrs	r2, r6
 8019f94:	432a      	orrs	r2, r5
 8019f96:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 8019f9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8019f9c:	f10e 0e01 	add.w	lr, lr, #1
 8019fa0:	4410      	add	r0, r2
 8019fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019fa4:	4411      	add	r1, r2
 8019fa6:	e7d2      	b.n	8019f4e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8019fa8:	2a00      	cmp	r2, #0
 8019faa:	d0f6      	beq.n	8019f9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8019fac:	f8d8 7000 	ldr.w	r7, [r8]
 8019fb0:	fa1f f982 	uxth.w	r9, r2
 8019fb4:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8019fb8:	43d2      	mvns	r2, r2
 8019fba:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8019fbe:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8019fc2:	ea4f 262c 	mov.w	r6, ip, asr #8
 8019fc6:	fb15 f509 	smulbb	r5, r5, r9
 8019fca:	b2d2      	uxtb	r2, r2
 8019fcc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019fd0:	b2ff      	uxtb	r7, r7
 8019fd2:	fb1a fa09 	smulbb	sl, sl, r9
 8019fd6:	fb06 5602 	mla	r6, r6, r2, r5
 8019fda:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019fde:	fb17 f709 	smulbb	r7, r7, r9
 8019fe2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019fe6:	b2b6      	uxth	r6, r6
 8019fe8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019fec:	fa5f fc8c 	uxtb.w	ip, ip
 8019ff0:	fb05 a502 	mla	r5, r5, r2, sl
 8019ff4:	fb0c 7702 	mla	r7, ip, r2, r7
 8019ff8:	1c72      	adds	r2, r6, #1
 8019ffa:	b2ad      	uxth	r5, r5
 8019ffc:	b2bf      	uxth	r7, r7
 8019ffe:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 801a002:	f107 0a01 	add.w	sl, r7, #1
 801a006:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801a00a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801a00e:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801a012:	ea4a 0606 	orr.w	r6, sl, r6
 801a016:	f105 0a01 	add.w	sl, r5, #1
 801a01a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 801a01e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801a022:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801a026:	ea46 060a 	orr.w	r6, r6, sl
 801a02a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801a02e:	e7b4      	b.n	8019f9a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801a030:	b007      	add	sp, #28
 801a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a036:	bf00      	nop
 801a038:	2400af3c 	.word	0x2400af3c

0801a03c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801a03c:	4770      	bx	lr

0801a03e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801a03e:	4770      	bx	lr

0801a040 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801a040:	4770      	bx	lr

0801a042 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801a042:	4770      	bx	lr

0801a044 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a044:	4770      	bx	lr

0801a046 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a046:	4770      	bx	lr

0801a048 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a048:	4770      	bx	lr

0801a04a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a04a:	4770      	bx	lr

0801a04c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a04c:	4770      	bx	lr

0801a04e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a04e:	4770      	bx	lr

0801a050 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a050:	4770      	bx	lr

0801a052 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a052:	4770      	bx	lr

0801a054 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a054:	4770      	bx	lr

0801a056 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a056:	4770      	bx	lr

0801a058 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a058:	4770      	bx	lr

0801a05a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a05a:	4770      	bx	lr

0801a05c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801a05c:	4770      	bx	lr

0801a05e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801a05e:	4770      	bx	lr

0801a060 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801a060:	4770      	bx	lr

0801a062 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801a062:	4770      	bx	lr

0801a064 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a064:	4770      	bx	lr

0801a066 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801a066:	4770      	bx	lr

0801a068 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a068:	4770      	bx	lr

0801a06a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801a06a:	4770      	bx	lr

0801a06c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801a06c:	4770      	bx	lr

0801a06e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801a06e:	4770      	bx	lr

0801a070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801a070:	4770      	bx	lr

0801a072 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801a072:	4770      	bx	lr

0801a074 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a078:	b088      	sub	sp, #32
 801a07a:	4606      	mov	r6, r0
 801a07c:	4688      	mov	r8, r1
 801a07e:	4691      	mov	r9, r2
 801a080:	ac08      	add	r4, sp, #32
 801a082:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801a086:	4620      	mov	r0, r4
 801a088:	f7fd fc66 	bl	8017958 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a08c:	6833      	ldr	r3, [r6, #0]
 801a08e:	4605      	mov	r5, r0
 801a090:	4620      	mov	r0, r4
 801a092:	699f      	ldr	r7, [r3, #24]
 801a094:	f7fd fb74 	bl	8017780 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a098:	4682      	mov	sl, r0
 801a09a:	4620      	mov	r0, r4
 801a09c:	f7fd fba4 	bl	80177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a0a0:	9500      	str	r5, [sp, #0]
 801a0a2:	464b      	mov	r3, r9
 801a0a4:	4642      	mov	r2, r8
 801a0a6:	4631      	mov	r1, r6
 801a0a8:	e9cd a001 	strd	sl, r0, [sp, #4]
 801a0ac:	a806      	add	r0, sp, #24
 801a0ae:	47b8      	blx	r7
 801a0b0:	4628      	mov	r0, r5
 801a0b2:	b008      	add	sp, #32
 801a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801a0b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801a0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a0bc:	2300      	movs	r3, #0
 801a0be:	9300      	str	r3, [sp, #0]
 801a0c0:	4b3d      	ldr	r3, [pc, #244]	; (801a1b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 801a0c2:	781b      	ldrb	r3, [r3, #0]
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d137      	bne.n	801a138 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801a0c8:	4a3c      	ldr	r2, [pc, #240]	; (801a1bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a0ca:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a0ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d132      	bne.n	801a13c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801a0d6:	4b3a      	ldr	r3, [pc, #232]	; (801a1c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a0d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0dc:	ac02      	add	r4, sp, #8
 801a0de:	6808      	ldr	r0, [r1, #0]
 801a0e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a0e4:	ab02      	add	r3, sp, #8
 801a0e6:	6849      	ldr	r1, [r1, #4]
 801a0e8:	4d36      	ldr	r5, [pc, #216]	; (801a1c4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801a0ea:	c303      	stmia	r3!, {r0, r1}
 801a0ec:	4669      	mov	r1, sp
 801a0ee:	4620      	mov	r0, r4
 801a0f0:	f7fa fde2 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a0f4:	4668      	mov	r0, sp
 801a0f6:	f7fa fdb7 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a0fa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a0fe:	f8bd 2000 	ldrh.w	r2, [sp]
 801a102:	462f      	mov	r7, r5
 801a104:	6828      	ldr	r0, [r5, #0]
 801a106:	4413      	add	r3, r2
 801a108:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801a10c:	f8ad 3008 	strh.w	r3, [sp, #8]
 801a110:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801a114:	4413      	add	r3, r2
 801a116:	f8ad 300a 	strh.w	r3, [sp, #10]
 801a11a:	6803      	ldr	r3, [r0, #0]
 801a11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a11e:	4798      	blx	r3
 801a120:	f010 0f01 	tst.w	r0, #1
 801a124:	d00c      	beq.n	801a140 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801a126:	6828      	ldr	r0, [r5, #0]
 801a128:	6803      	ldr	r3, [r0, #0]
 801a12a:	e894 0006 	ldmia.w	r4, {r1, r2}
 801a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a130:	4798      	blx	r3
 801a132:	b004      	add	sp, #16
 801a134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a138:	4a21      	ldr	r2, [pc, #132]	; (801a1c0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801a13a:	e7c6      	b.n	801a0ca <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801a13c:	4b1f      	ldr	r3, [pc, #124]	; (801a1bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a13e:	e7cb      	b.n	801a0d8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801a140:	6838      	ldr	r0, [r7, #0]
 801a142:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801a146:	6803      	ldr	r3, [r0, #0]
 801a148:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801a14c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a152:	4798      	blx	r3
 801a154:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801a158:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801a15c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801a160:	fb16 3602 	smlabb	r6, r6, r2, r3
 801a164:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801a168:	6838      	ldr	r0, [r7, #0]
 801a16a:	6803      	ldr	r3, [r0, #0]
 801a16c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a16e:	4798      	blx	r3
 801a170:	4a12      	ldr	r2, [pc, #72]	; (801a1bc <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801a172:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 801a176:	8813      	ldrh	r3, [r2, #0]
 801a178:	4691      	mov	r9, r2
 801a17a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801a17e:	435d      	muls	r5, r3
 801a180:	fb03 1404 	mla	r4, r3, r4, r1
 801a184:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a188:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a18c:	6838      	ldr	r0, [r7, #0]
 801a18e:	42ac      	cmp	r4, r5
 801a190:	6803      	ldr	r3, [r0, #0]
 801a192:	d20e      	bcs.n	801a1b2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801a194:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 801a198:	4632      	mov	r2, r6
 801a19a:	4643      	mov	r3, r8
 801a19c:	4621      	mov	r1, r4
 801a19e:	47d0      	blx	sl
 801a1a0:	f8b9 3000 	ldrh.w	r3, [r9]
 801a1a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a1a8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801a1ac:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a1b0:	e7ec      	b.n	801a18c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 801a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a1b4:	4798      	blx	r3
 801a1b6:	e7bc      	b.n	801a132 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801a1b8:	2400af2c 	.word	0x2400af2c
 801a1bc:	2400af2e 	.word	0x2400af2e
 801a1c0:	2400af30 	.word	0x2400af30
 801a1c4:	2400af34 	.word	0x2400af34

0801a1c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801a1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a1cc:	b08b      	sub	sp, #44	; 0x2c
 801a1ce:	460f      	mov	r7, r1
 801a1d0:	4616      	mov	r6, r2
 801a1d2:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 801a1d6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 801a1da:	f1bb 0f00 	cmp.w	fp, #0
 801a1de:	d049      	beq.n	801a274 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a1e0:	6810      	ldr	r0, [r2, #0]
 801a1e2:	ad06      	add	r5, sp, #24
 801a1e4:	6851      	ldr	r1, [r2, #4]
 801a1e6:	c503      	stmia	r5!, {r0, r1}
 801a1e8:	6818      	ldr	r0, [r3, #0]
 801a1ea:	ad08      	add	r5, sp, #32
 801a1ec:	6859      	ldr	r1, [r3, #4]
 801a1ee:	c503      	stmia	r5!, {r0, r1}
 801a1f0:	a806      	add	r0, sp, #24
 801a1f2:	f7fa fd39 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1f6:	4631      	mov	r1, r6
 801a1f8:	a808      	add	r0, sp, #32
 801a1fa:	f7fa fd5d 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1fe:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a202:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 801a206:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a20a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 801a20e:	fb16 2103 	smlabb	r1, r6, r3, r2
 801a212:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 801a216:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 801a21a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a21e:	4f5f      	ldr	r7, [pc, #380]	; (801a39c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a220:	440a      	add	r2, r1
 801a222:	6838      	ldr	r0, [r7, #0]
 801a224:	46b9      	mov	r9, r7
 801a226:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a22a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a22e:	4413      	add	r3, r2
 801a230:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801a234:	6803      	ldr	r3, [r0, #0]
 801a236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a238:	4798      	blx	r3
 801a23a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a23e:	d01c      	beq.n	801a27a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 801a240:	f010 0f04 	tst.w	r0, #4
 801a244:	d01d      	beq.n	801a282 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a246:	f8d9 0000 	ldr.w	r0, [r9]
 801a24a:	2700      	movs	r7, #0
 801a24c:	b2ad      	uxth	r5, r5
 801a24e:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 801a252:	6801      	ldr	r1, [r0, #0]
 801a254:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a258:	f8cd b00c 	str.w	fp, [sp, #12]
 801a25c:	9501      	str	r5, [sp, #4]
 801a25e:	e9cd 4704 	strd	r4, r7, [sp, #16]
 801a262:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 801a266:	9402      	str	r4, [sp, #8]
 801a268:	fa1f f488 	uxth.w	r4, r8
 801a26c:	9400      	str	r4, [sp, #0]
 801a26e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 801a270:	4631      	mov	r1, r6
 801a272:	47a0      	blx	r4
 801a274:	b00b      	add	sp, #44	; 0x2c
 801a276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a27a:	b914      	cbnz	r4, 801a282 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 801a27c:	f010 0f01 	tst.w	r0, #1
 801a280:	e7e0      	b.n	801a244 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 801a282:	f8d9 0000 	ldr.w	r0, [r9]
 801a286:	ea4f 0748 	mov.w	r7, r8, lsl #1
 801a28a:	6803      	ldr	r3, [r0, #0]
 801a28c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a28e:	4798      	blx	r3
 801a290:	4b43      	ldr	r3, [pc, #268]	; (801a3a0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 801a292:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 801a296:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 801a29a:	881a      	ldrh	r2, [r3, #0]
 801a29c:	469a      	mov	sl, r3
 801a29e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801a2a2:	fb05 f502 	mul.w	r5, r5, r2
 801a2a6:	fb02 1404 	mla	r4, r2, r4, r1
 801a2aa:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801a2ae:	d059      	beq.n	801a364 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 801a2b0:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 801a2b4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a2b8:	fa1f f28b 	uxth.w	r2, fp
 801a2bc:	469e      	mov	lr, r3
 801a2be:	fa1f f989 	uxth.w	r9, r9
 801a2c2:	42ac      	cmp	r4, r5
 801a2c4:	d264      	bcs.n	801a390 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a2c6:	eb04 0a07 	add.w	sl, r4, r7
 801a2ca:	4554      	cmp	r4, sl
 801a2cc:	d23d      	bcs.n	801a34a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 801a2ce:	8821      	ldrh	r1, [r4, #0]
 801a2d0:	f836 3b02 	ldrh.w	r3, [r6], #2
 801a2d4:	1208      	asrs	r0, r1, #8
 801a2d6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801a2da:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a2de:	ea4f 0be1 	mov.w	fp, r1, asr #3
 801a2e2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801a2e6:	00c9      	lsls	r1, r1, #3
 801a2e8:	fb10 f009 	smulbb	r0, r0, r9
 801a2ec:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801a2f0:	b2c9      	uxtb	r1, r1
 801a2f2:	fb0c 0c02 	mla	ip, ip, r2, r0
 801a2f6:	10d8      	asrs	r0, r3, #3
 801a2f8:	fb1b fb09 	smulbb	fp, fp, r9
 801a2fc:	00db      	lsls	r3, r3, #3
 801a2fe:	fa1f fc8c 	uxth.w	ip, ip
 801a302:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801a306:	fb11 f109 	smulbb	r1, r1, r9
 801a30a:	b2db      	uxtb	r3, r3
 801a30c:	fb00 b002 	mla	r0, r0, r2, fp
 801a310:	f10c 0b01 	add.w	fp, ip, #1
 801a314:	fb03 1302 	mla	r3, r3, r2, r1
 801a318:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 801a31c:	b29b      	uxth	r3, r3
 801a31e:	b280      	uxth	r0, r0
 801a320:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 801a324:	f103 0c01 	add.w	ip, r3, #1
 801a328:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801a32c:	1c43      	adds	r3, r0, #1
 801a32e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a332:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801a336:	0940      	lsrs	r0, r0, #5
 801a338:	ea4c 0c0b 	orr.w	ip, ip, fp
 801a33c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801a340:	ea4c 0c00 	orr.w	ip, ip, r0
 801a344:	f824 cb02 	strh.w	ip, [r4], #2
 801a348:	e7bf      	b.n	801a2ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 801a34a:	f8be 3000 	ldrh.w	r3, [lr]
 801a34e:	eba3 0308 	sub.w	r3, r3, r8
 801a352:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a356:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a35a:	eba3 0308 	sub.w	r3, r3, r8
 801a35e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a362:	e7ae      	b.n	801a2c2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 801a364:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801a368:	f8d9 0000 	ldr.w	r0, [r9]
 801a36c:	42ac      	cmp	r4, r5
 801a36e:	6803      	ldr	r3, [r0, #0]
 801a370:	d20e      	bcs.n	801a390 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 801a372:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 801a376:	4632      	mov	r2, r6
 801a378:	463b      	mov	r3, r7
 801a37a:	4621      	mov	r1, r4
 801a37c:	47c0      	blx	r8
 801a37e:	f8ba 3000 	ldrh.w	r3, [sl]
 801a382:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801a386:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801a38a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 801a38e:	e7eb      	b.n	801a368 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801a390:	4b02      	ldr	r3, [pc, #8]	; (801a39c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 801a392:	6818      	ldr	r0, [r3, #0]
 801a394:	6803      	ldr	r3, [r0, #0]
 801a396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a398:	4798      	blx	r3
 801a39a:	e76b      	b.n	801a274 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 801a39c:	2400af34 	.word	0x2400af34
 801a3a0:	2400af2e 	.word	0x2400af2e

0801a3a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a3a4:	b510      	push	{r4, lr}
 801a3a6:	4604      	mov	r4, r0
 801a3a8:	2104      	movs	r1, #4
 801a3aa:	f008 ffc2 	bl	8023332 <_ZdlPvj>
 801a3ae:	4620      	mov	r0, r4
 801a3b0:	bd10      	pop	{r4, pc}

0801a3b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a3b2:	b510      	push	{r4, lr}
 801a3b4:	4604      	mov	r4, r0
 801a3b6:	2104      	movs	r1, #4
 801a3b8:	f008 ffbb 	bl	8023332 <_ZdlPvj>
 801a3bc:	4620      	mov	r0, r4
 801a3be:	bd10      	pop	{r4, pc}

0801a3c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a3c0:	b510      	push	{r4, lr}
 801a3c2:	4604      	mov	r4, r0
 801a3c4:	2104      	movs	r1, #4
 801a3c6:	f008 ffb4 	bl	8023332 <_ZdlPvj>
 801a3ca:	4620      	mov	r0, r4
 801a3cc:	bd10      	pop	{r4, pc}

0801a3ce <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a3ce:	b510      	push	{r4, lr}
 801a3d0:	4604      	mov	r4, r0
 801a3d2:	2104      	movs	r1, #4
 801a3d4:	f008 ffad 	bl	8023332 <_ZdlPvj>
 801a3d8:	4620      	mov	r0, r4
 801a3da:	bd10      	pop	{r4, pc}

0801a3dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a3dc:	b510      	push	{r4, lr}
 801a3de:	4604      	mov	r4, r0
 801a3e0:	2104      	movs	r1, #4
 801a3e2:	f008 ffa6 	bl	8023332 <_ZdlPvj>
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	bd10      	pop	{r4, pc}

0801a3ea <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801a3ea:	b510      	push	{r4, lr}
 801a3ec:	4604      	mov	r4, r0
 801a3ee:	2104      	movs	r1, #4
 801a3f0:	f008 ff9f 	bl	8023332 <_ZdlPvj>
 801a3f4:	4620      	mov	r0, r4
 801a3f6:	bd10      	pop	{r4, pc}

0801a3f8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a3f8:	b510      	push	{r4, lr}
 801a3fa:	4604      	mov	r4, r0
 801a3fc:	2104      	movs	r1, #4
 801a3fe:	f008 ff98 	bl	8023332 <_ZdlPvj>
 801a402:	4620      	mov	r0, r4
 801a404:	bd10      	pop	{r4, pc}

0801a406 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801a406:	b510      	push	{r4, lr}
 801a408:	4604      	mov	r4, r0
 801a40a:	2104      	movs	r1, #4
 801a40c:	f008 ff91 	bl	8023332 <_ZdlPvj>
 801a410:	4620      	mov	r0, r4
 801a412:	bd10      	pop	{r4, pc}

0801a414 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a414:	b510      	push	{r4, lr}
 801a416:	4604      	mov	r4, r0
 801a418:	2104      	movs	r1, #4
 801a41a:	f008 ff8a 	bl	8023332 <_ZdlPvj>
 801a41e:	4620      	mov	r0, r4
 801a420:	bd10      	pop	{r4, pc}

0801a422 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a422:	b510      	push	{r4, lr}
 801a424:	4604      	mov	r4, r0
 801a426:	2104      	movs	r1, #4
 801a428:	f008 ff83 	bl	8023332 <_ZdlPvj>
 801a42c:	4620      	mov	r0, r4
 801a42e:	bd10      	pop	{r4, pc}

0801a430 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a430:	b510      	push	{r4, lr}
 801a432:	4604      	mov	r4, r0
 801a434:	2104      	movs	r1, #4
 801a436:	f008 ff7c 	bl	8023332 <_ZdlPvj>
 801a43a:	4620      	mov	r0, r4
 801a43c:	bd10      	pop	{r4, pc}

0801a43e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a43e:	b510      	push	{r4, lr}
 801a440:	4604      	mov	r4, r0
 801a442:	2104      	movs	r1, #4
 801a444:	f008 ff75 	bl	8023332 <_ZdlPvj>
 801a448:	4620      	mov	r0, r4
 801a44a:	bd10      	pop	{r4, pc}

0801a44c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801a44c:	b510      	push	{r4, lr}
 801a44e:	4604      	mov	r4, r0
 801a450:	2104      	movs	r1, #4
 801a452:	f008 ff6e 	bl	8023332 <_ZdlPvj>
 801a456:	4620      	mov	r0, r4
 801a458:	bd10      	pop	{r4, pc}

0801a45a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801a45a:	b510      	push	{r4, lr}
 801a45c:	4604      	mov	r4, r0
 801a45e:	2104      	movs	r1, #4
 801a460:	f008 ff67 	bl	8023332 <_ZdlPvj>
 801a464:	4620      	mov	r0, r4
 801a466:	bd10      	pop	{r4, pc}

0801a468 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a468:	b510      	push	{r4, lr}
 801a46a:	4604      	mov	r4, r0
 801a46c:	2104      	movs	r1, #4
 801a46e:	f008 ff60 	bl	8023332 <_ZdlPvj>
 801a472:	4620      	mov	r0, r4
 801a474:	bd10      	pop	{r4, pc}

0801a476 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a476:	b510      	push	{r4, lr}
 801a478:	4604      	mov	r4, r0
 801a47a:	2104      	movs	r1, #4
 801a47c:	f008 ff59 	bl	8023332 <_ZdlPvj>
 801a480:	4620      	mov	r0, r4
 801a482:	bd10      	pop	{r4, pc}

0801a484 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801a484:	b510      	push	{r4, lr}
 801a486:	4604      	mov	r4, r0
 801a488:	2104      	movs	r1, #4
 801a48a:	f008 ff52 	bl	8023332 <_ZdlPvj>
 801a48e:	4620      	mov	r0, r4
 801a490:	bd10      	pop	{r4, pc}

0801a492 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801a492:	b510      	push	{r4, lr}
 801a494:	4604      	mov	r4, r0
 801a496:	2104      	movs	r1, #4
 801a498:	f008 ff4b 	bl	8023332 <_ZdlPvj>
 801a49c:	4620      	mov	r0, r4
 801a49e:	bd10      	pop	{r4, pc}

0801a4a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a4a0:	b510      	push	{r4, lr}
 801a4a2:	4604      	mov	r4, r0
 801a4a4:	2104      	movs	r1, #4
 801a4a6:	f008 ff44 	bl	8023332 <_ZdlPvj>
 801a4aa:	4620      	mov	r0, r4
 801a4ac:	bd10      	pop	{r4, pc}

0801a4ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a4ae:	b510      	push	{r4, lr}
 801a4b0:	4604      	mov	r4, r0
 801a4b2:	2104      	movs	r1, #4
 801a4b4:	f008 ff3d 	bl	8023332 <_ZdlPvj>
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	bd10      	pop	{r4, pc}

0801a4bc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801a4bc:	b510      	push	{r4, lr}
 801a4be:	4604      	mov	r4, r0
 801a4c0:	2104      	movs	r1, #4
 801a4c2:	f008 ff36 	bl	8023332 <_ZdlPvj>
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	bd10      	pop	{r4, pc}

0801a4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801a4ca:	b510      	push	{r4, lr}
 801a4cc:	4604      	mov	r4, r0
 801a4ce:	2104      	movs	r1, #4
 801a4d0:	f008 ff2f 	bl	8023332 <_ZdlPvj>
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	bd10      	pop	{r4, pc}

0801a4d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801a4d8:	b510      	push	{r4, lr}
 801a4da:	4604      	mov	r4, r0
 801a4dc:	2104      	movs	r1, #4
 801a4de:	f008 ff28 	bl	8023332 <_ZdlPvj>
 801a4e2:	4620      	mov	r0, r4
 801a4e4:	bd10      	pop	{r4, pc}

0801a4e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801a4e6:	b510      	push	{r4, lr}
 801a4e8:	4604      	mov	r4, r0
 801a4ea:	2104      	movs	r1, #4
 801a4ec:	f008 ff21 	bl	8023332 <_ZdlPvj>
 801a4f0:	4620      	mov	r0, r4
 801a4f2:	bd10      	pop	{r4, pc}

0801a4f4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801a4f4:	b510      	push	{r4, lr}
 801a4f6:	4604      	mov	r4, r0
 801a4f8:	2104      	movs	r1, #4
 801a4fa:	f008 ff1a 	bl	8023332 <_ZdlPvj>
 801a4fe:	4620      	mov	r0, r4
 801a500:	bd10      	pop	{r4, pc}

0801a502 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801a502:	b510      	push	{r4, lr}
 801a504:	4604      	mov	r4, r0
 801a506:	2104      	movs	r1, #4
 801a508:	f008 ff13 	bl	8023332 <_ZdlPvj>
 801a50c:	4620      	mov	r0, r4
 801a50e:	bd10      	pop	{r4, pc}

0801a510 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801a510:	b510      	push	{r4, lr}
 801a512:	4604      	mov	r4, r0
 801a514:	2104      	movs	r1, #4
 801a516:	f008 ff0c 	bl	8023332 <_ZdlPvj>
 801a51a:	4620      	mov	r0, r4
 801a51c:	bd10      	pop	{r4, pc}

0801a51e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801a51e:	b510      	push	{r4, lr}
 801a520:	4604      	mov	r4, r0
 801a522:	2104      	movs	r1, #4
 801a524:	f008 ff05 	bl	8023332 <_ZdlPvj>
 801a528:	4620      	mov	r0, r4
 801a52a:	bd10      	pop	{r4, pc}

0801a52c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801a52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a530:	b091      	sub	sp, #68	; 0x44
 801a532:	469b      	mov	fp, r3
 801a534:	4616      	mov	r6, r2
 801a536:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a53a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 801a53e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801a542:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 801a546:	4604      	mov	r4, r0
 801a548:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 801a54c:	4640      	mov	r0, r8
 801a54e:	460d      	mov	r5, r1
 801a550:	4659      	mov	r1, fp
 801a552:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a556:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a55a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 801a55e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 801a562:	f7f8 fbd3 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801a566:	4631      	mov	r1, r6
 801a568:	4640      	mov	r0, r8
 801a56a:	f7f8 fbcf 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801a56e:	4b74      	ldr	r3, [pc, #464]	; (801a740 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 801a570:	8818      	ldrh	r0, [r3, #0]
 801a572:	4b74      	ldr	r3, [pc, #464]	; (801a744 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 801a574:	b202      	sxth	r2, r0
 801a576:	8819      	ldrh	r1, [r3, #0]
 801a578:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a57c:	b20e      	sxth	r6, r1
 801a57e:	2b00      	cmp	r3, #0
 801a580:	da07      	bge.n	801a592 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 801a582:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a586:	4463      	add	r3, ip
 801a588:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 801a58c:	2300      	movs	r3, #0
 801a58e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 801a592:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 801a596:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801a59a:	1ad2      	subs	r2, r2, r3
 801a59c:	4594      	cmp	ip, r2
 801a59e:	bfc4      	itt	gt
 801a5a0:	1ac2      	subgt	r2, r0, r3
 801a5a2:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 801a5a6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a5aa:	2a00      	cmp	r2, #0
 801a5ac:	da07      	bge.n	801a5be <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 801a5ae:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 801a5b2:	4462      	add	r2, ip
 801a5b4:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a5be:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 801a5c2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a5c6:	eba6 060a 	sub.w	r6, r6, sl
 801a5ca:	42b2      	cmp	r2, r6
 801a5cc:	bfc4      	itt	gt
 801a5ce:	eba1 020a 	subgt.w	r2, r1, sl
 801a5d2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 801a5d6:	4a5c      	ldr	r2, [pc, #368]	; (801a748 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 801a5d8:	7812      	ldrb	r2, [r2, #0]
 801a5da:	b9a2      	cbnz	r2, 801a606 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 801a5dc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 801a5e0:	4286      	cmp	r6, r0
 801a5e2:	4640      	mov	r0, r8
 801a5e4:	9303      	str	r3, [sp, #12]
 801a5e6:	bf14      	ite	ne
 801a5e8:	2600      	movne	r6, #0
 801a5ea:	2601      	moveq	r6, #1
 801a5ec:	f7f8 fbd1 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a5f0:	9b03      	ldr	r3, [sp, #12]
 801a5f2:	b160      	cbz	r0, 801a60e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	8023      	strh	r3, [r4, #0]
 801a5f8:	8063      	strh	r3, [r4, #2]
 801a5fa:	80a3      	strh	r3, [r4, #4]
 801a5fc:	4620      	mov	r0, r4
 801a5fe:	80e3      	strh	r3, [r4, #6]
 801a600:	b011      	add	sp, #68	; 0x44
 801a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a606:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a60a:	428e      	cmp	r6, r1
 801a60c:	e7e9      	b.n	801a5e2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 801a60e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a612:	a90e      	add	r1, sp, #56	; 0x38
 801a614:	900e      	str	r0, [sp, #56]	; 0x38
 801a616:	a80c      	add	r0, sp, #48	; 0x30
 801a618:	9205      	str	r2, [sp, #20]
 801a61a:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 801a61e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 801a622:	9206      	str	r2, [sp, #24]
 801a624:	f8bb 2000 	ldrh.w	r2, [fp]
 801a628:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 801a62c:	1a9b      	subs	r3, r3, r2
 801a62e:	b21b      	sxth	r3, r3
 801a630:	9303      	str	r3, [sp, #12]
 801a632:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801a636:	f8df b118 	ldr.w	fp, [pc, #280]	; 801a750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a63a:	ebaa 0a03 	sub.w	sl, sl, r3
 801a63e:	fa0f f38a 	sxth.w	r3, sl
 801a642:	9304      	str	r3, [sp, #16]
 801a644:	9b03      	ldr	r3, [sp, #12]
 801a646:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 801a64a:	9b04      	ldr	r3, [sp, #16]
 801a64c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801a650:	9b05      	ldr	r3, [sp, #20]
 801a652:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801a656:	9b06      	ldr	r3, [sp, #24]
 801a658:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801a65c:	f7fa fb2c 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a660:	4640      	mov	r0, r8
 801a662:	f7fa fb01 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a666:	a80e      	add	r0, sp, #56	; 0x38
 801a668:	f7fa fafe 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a66c:	4b37      	ldr	r3, [pc, #220]	; (801a74c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801a66e:	4628      	mov	r0, r5
 801a670:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 801a674:	881b      	ldrh	r3, [r3, #0]
 801a676:	9307      	str	r3, [sp, #28]
 801a678:	682b      	ldr	r3, [r5, #0]
 801a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a67c:	4798      	blx	r3
 801a67e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 801a682:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801a686:	4681      	mov	r9, r0
 801a688:	f8db 0000 	ldr.w	r0, [fp]
 801a68c:	fb1a 3305 	smlabb	r3, sl, r5, r3
 801a690:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801a692:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 801a696:	6803      	ldr	r3, [r0, #0]
 801a698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a69a:	4798      	blx	r3
 801a69c:	4607      	mov	r7, r0
 801a69e:	f8db 0000 	ldr.w	r0, [fp]
 801a6a2:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 801a6a6:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801a6aa:	6803      	ldr	r3, [r0, #0]
 801a6ac:	9109      	str	r1, [sp, #36]	; 0x24
 801a6ae:	9208      	str	r2, [sp, #32]
 801a6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6b2:	4798      	blx	r3
 801a6b4:	f010 0f01 	tst.w	r0, #1
 801a6b8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a6bc:	d012      	beq.n	801a6e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 801a6be:	f8db 0000 	ldr.w	r0, [fp]
 801a6c2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801a6c6:	6803      	ldr	r3, [r0, #0]
 801a6c8:	9200      	str	r2, [sp, #0]
 801a6ca:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 801a6cc:	462b      	mov	r3, r5
 801a6ce:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a6d2:	47b0      	blx	r6
 801a6d4:	9b03      	ldr	r3, [sp, #12]
 801a6d6:	8023      	strh	r3, [r4, #0]
 801a6d8:	9b04      	ldr	r3, [sp, #16]
 801a6da:	8063      	strh	r3, [r4, #2]
 801a6dc:	9b05      	ldr	r3, [sp, #20]
 801a6de:	80a3      	strh	r3, [r4, #4]
 801a6e0:	9b06      	ldr	r3, [sp, #24]
 801a6e2:	e78b      	b.n	801a5fc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 801a6e4:	fb09 f202 	mul.w	r2, r9, r2
 801a6e8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801a6ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801a6f0:	440f      	add	r7, r1
 801a6f2:	b166      	cbz	r6, 801a70e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a6f4:	9a07      	ldr	r2, [sp, #28]
 801a6f6:	4592      	cmp	sl, r2
 801a6f8:	d109      	bne.n	801a70e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 801a6fa:	f8db 0000 	ldr.w	r0, [fp]
 801a6fe:	fb09 f303 	mul.w	r3, r9, r3
 801a702:	4629      	mov	r1, r5
 801a704:	6802      	ldr	r2, [r0, #0]
 801a706:	6b56      	ldr	r6, [r2, #52]	; 0x34
 801a708:	463a      	mov	r2, r7
 801a70a:	47b0      	blx	r6
 801a70c:	e7e2      	b.n	801a6d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a70e:	fb0a f303 	mul.w	r3, sl, r3
 801a712:	ea4f 064a 	mov.w	r6, sl, lsl #1
 801a716:	f8df b038 	ldr.w	fp, [pc, #56]	; 801a750 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 801a71a:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 801a71e:	4545      	cmp	r5, r8
 801a720:	d2d8      	bcs.n	801a6d4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 801a722:	f8db 0000 	ldr.w	r0, [fp]
 801a726:	4629      	mov	r1, r5
 801a728:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801a72c:	4435      	add	r5, r6
 801a72e:	6802      	ldr	r2, [r0, #0]
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 801a736:	463a      	mov	r2, r7
 801a738:	47d0      	blx	sl
 801a73a:	444f      	add	r7, r9
 801a73c:	e7ef      	b.n	801a71e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 801a73e:	bf00      	nop
 801a740:	2400af28 	.word	0x2400af28
 801a744:	2400af2a 	.word	0x2400af2a
 801a748:	2400af2c 	.word	0x2400af2c
 801a74c:	2400af2e 	.word	0x2400af2e
 801a750:	2400af34 	.word	0x2400af34

0801a754 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a756:	4606      	mov	r6, r0
 801a758:	b087      	sub	sp, #28
 801a75a:	460c      	mov	r4, r1
 801a75c:	4617      	mov	r7, r2
 801a75e:	461d      	mov	r5, r3
 801a760:	b333      	cbz	r3, 801a7b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a762:	4608      	mov	r0, r1
 801a764:	f7f8 fb15 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a768:	bb10      	cbnz	r0, 801a7b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a76a:	6820      	ldr	r0, [r4, #0]
 801a76c:	ab04      	add	r3, sp, #16
 801a76e:	6861      	ldr	r1, [r4, #4]
 801a770:	4c1b      	ldr	r4, [pc, #108]	; (801a7e0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 801a772:	c303      	stmia	r3!, {r0, r1}
 801a774:	a804      	add	r0, sp, #16
 801a776:	f7fa fa77 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a77a:	6820      	ldr	r0, [r4, #0]
 801a77c:	6803      	ldr	r3, [r0, #0]
 801a77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a780:	4798      	blx	r3
 801a782:	2dff      	cmp	r5, #255	; 0xff
 801a784:	d016      	beq.n	801a7b4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 801a786:	f010 0f08 	tst.w	r0, #8
 801a78a:	6820      	ldr	r0, [r4, #0]
 801a78c:	d015      	beq.n	801a7ba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801a78e:	2400      	movs	r4, #0
 801a790:	6801      	ldr	r1, [r0, #0]
 801a792:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801a796:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a79a:	e9cd 5402 	strd	r5, r4, [sp, #8]
 801a79e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801a7a2:	9401      	str	r4, [sp, #4]
 801a7a4:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801a7a8:	9400      	str	r4, [sp, #0]
 801a7aa:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 801a7ac:	4639      	mov	r1, r7
 801a7ae:	47a0      	blx	r4
 801a7b0:	b007      	add	sp, #28
 801a7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a7b4:	f010 0f02 	tst.w	r0, #2
 801a7b8:	e7e7      	b.n	801a78a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 801a7ba:	6803      	ldr	r3, [r0, #0]
 801a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a7be:	4798      	blx	r3
 801a7c0:	4b08      	ldr	r3, [pc, #32]	; (801a7e4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801a7c2:	4601      	mov	r1, r0
 801a7c4:	4630      	mov	r0, r6
 801a7c6:	881a      	ldrh	r2, [r3, #0]
 801a7c8:	6833      	ldr	r3, [r6, #0]
 801a7ca:	e9cd 7500 	strd	r7, r5, [sp]
 801a7ce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 801a7d0:	ab04      	add	r3, sp, #16
 801a7d2:	47a8      	blx	r5
 801a7d4:	6820      	ldr	r0, [r4, #0]
 801a7d6:	6803      	ldr	r3, [r0, #0]
 801a7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a7da:	4798      	blx	r3
 801a7dc:	e7e8      	b.n	801a7b0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 801a7de:	bf00      	nop
 801a7e0:	2400af34 	.word	0x2400af34
 801a7e4:	2400af2e 	.word	0x2400af2e

0801a7e8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801a7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7ec:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 801a7f0:	4688      	mov	r8, r1
 801a7f2:	4614      	mov	r4, r2
 801a7f4:	461d      	mov	r5, r3
 801a7f6:	9e08      	ldr	r6, [sp, #32]
 801a7f8:	2f00      	cmp	r7, #0
 801a7fa:	f000 80ab 	beq.w	801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a7fe:	4618      	mov	r0, r3
 801a800:	f7f8 fac7 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a804:	2800      	cmp	r0, #0
 801a806:	f040 80a5 	bne.w	801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a80a:	f9b5 1000 	ldrsh.w	r1, [r5]
 801a80e:	2fff      	cmp	r7, #255	; 0xff
 801a810:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a814:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 801a818:	fb04 1303 	mla	r3, r4, r3, r1
 801a81c:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 801a820:	eba4 0200 	sub.w	r2, r4, r0
 801a824:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 801a828:	fb04 f505 	mul.w	r5, r4, r5
 801a82c:	ea4f 2816 	mov.w	r8, r6, lsr #8
 801a830:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801a834:	d04a      	beq.n	801a8cc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
 801a836:	b2bc      	uxth	r4, r7
 801a838:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801a83c:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801a840:	fa5f f788 	uxtb.w	r7, r8
 801a844:	b2f3      	uxtb	r3, r6
 801a846:	0040      	lsls	r0, r0, #1
 801a848:	fb0e fe04 	mul.w	lr, lr, r4
 801a84c:	4367      	muls	r7, r4
 801a84e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 801a852:	4363      	muls	r3, r4
 801a854:	fa1f fc8c 	uxth.w	ip, ip
 801a858:	42a9      	cmp	r1, r5
 801a85a:	d27b      	bcs.n	801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a85c:	eb01 0900 	add.w	r9, r1, r0
 801a860:	4549      	cmp	r1, r9
 801a862:	d231      	bcs.n	801a8c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
 801a864:	880a      	ldrh	r2, [r1, #0]
 801a866:	1214      	asrs	r4, r2, #8
 801a868:	10d6      	asrs	r6, r2, #3
 801a86a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801a86e:	00d2      	lsls	r2, r2, #3
 801a870:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801a874:	b2d2      	uxtb	r2, r2
 801a876:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a87a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a87e:	fb14 f40c 	smulbb	r4, r4, ip
 801a882:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801a886:	fb12 f20c 	smulbb	r2, r2, ip
 801a88a:	fb16 f60c 	smulbb	r6, r6, ip
 801a88e:	4474      	add	r4, lr
 801a890:	441a      	add	r2, r3
 801a892:	b2a4      	uxth	r4, r4
 801a894:	443e      	add	r6, r7
 801a896:	b292      	uxth	r2, r2
 801a898:	f104 0a01 	add.w	sl, r4, #1
 801a89c:	b2b6      	uxth	r6, r6
 801a89e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a8a2:	f102 0a01 	add.w	sl, r2, #1
 801a8a6:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 801a8aa:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801a8ae:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801a8b2:	4322      	orrs	r2, r4
 801a8b4:	1c74      	adds	r4, r6, #1
 801a8b6:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801a8ba:	0976      	lsrs	r6, r6, #5
 801a8bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801a8c0:	4332      	orrs	r2, r6
 801a8c2:	f821 2b02 	strh.w	r2, [r1], #2
 801a8c6:	e7cb      	b.n	801a860 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
 801a8c8:	4441      	add	r1, r8
 801a8ca:	e7c5      	b.n	801a858 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
 801a8cc:	0973      	lsrs	r3, r6, #5
 801a8ce:	4f22      	ldr	r7, [pc, #136]	; (801a958 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
 801a8d0:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801a8d4:	ea08 0707 	and.w	r7, r8, r7
 801a8d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801a8dc:	433b      	orrs	r3, r7
 801a8de:	07e7      	lsls	r7, r4, #31
 801a8e0:	ea43 0306 	orr.w	r3, r3, r6
 801a8e4:	b29b      	uxth	r3, r3
 801a8e6:	d50b      	bpl.n	801a900 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
 801a8e8:	0040      	lsls	r0, r0, #1
 801a8ea:	0052      	lsls	r2, r2, #1
 801a8ec:	42a9      	cmp	r1, r5
 801a8ee:	d231      	bcs.n	801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a8f0:	180c      	adds	r4, r1, r0
 801a8f2:	42a1      	cmp	r1, r4
 801a8f4:	d202      	bcs.n	801a8fc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 801a8f6:	f821 3b02 	strh.w	r3, [r1], #2
 801a8fa:	e7fa      	b.n	801a8f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
 801a8fc:	4411      	add	r1, r2
 801a8fe:	e7f5      	b.n	801a8ec <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
 801a900:	078e      	lsls	r6, r1, #30
 801a902:	d008      	beq.n	801a916 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
 801a904:	0066      	lsls	r6, r4, #1
 801a906:	460a      	mov	r2, r1
 801a908:	42aa      	cmp	r2, r5
 801a90a:	d202      	bcs.n	801a912 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 801a90c:	8013      	strh	r3, [r2, #0]
 801a90e:	4432      	add	r2, r6
 801a910:	e7fa      	b.n	801a908 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
 801a912:	3102      	adds	r1, #2
 801a914:	3801      	subs	r0, #1
 801a916:	07c2      	lsls	r2, r0, #31
 801a918:	d50b      	bpl.n	801a932 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
 801a91a:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 801a91e:	0066      	lsls	r6, r4, #1
 801a920:	3a01      	subs	r2, #1
 801a922:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801a926:	42aa      	cmp	r2, r5
 801a928:	d202      	bcs.n	801a930 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
 801a92a:	8013      	strh	r3, [r2, #0]
 801a92c:	4432      	add	r2, r6
 801a92e:	e7fa      	b.n	801a926 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
 801a930:	3801      	subs	r0, #1
 801a932:	b178      	cbz	r0, 801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a934:	1040      	asrs	r0, r0, #1
 801a936:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 801a93a:	0080      	lsls	r0, r0, #2
 801a93c:	0064      	lsls	r4, r4, #1
 801a93e:	42a9      	cmp	r1, r5
 801a940:	d208      	bcs.n	801a954 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
 801a942:	180e      	adds	r6, r1, r0
 801a944:	460a      	mov	r2, r1
 801a946:	42b2      	cmp	r2, r6
 801a948:	d202      	bcs.n	801a950 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801a94a:	f842 3b04 	str.w	r3, [r2], #4
 801a94e:	e7fa      	b.n	801a946 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
 801a950:	4421      	add	r1, r4
 801a952:	e7f4      	b.n	801a93e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
 801a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a958:	00fff800 	.word	0x00fff800

0801a95c <_ZN8touchgfx8LCD16bppC1Ev>:
 801a95c:	2200      	movs	r2, #0
 801a95e:	4910      	ldr	r1, [pc, #64]	; (801a9a0 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801a960:	6042      	str	r2, [r0, #4]
 801a962:	6001      	str	r1, [r0, #0]
 801a964:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801a968:	e9c0 2204 	strd	r2, r2, [r0, #16]
 801a96c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801a970:	e9c0 2208 	strd	r2, r2, [r0, #32]
 801a974:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 801a978:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 801a97c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801a980:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 801a984:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 801a988:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 801a98c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801a990:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 801a994:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 801a998:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 801a99c:	4770      	bx	lr
 801a99e:	bf00      	nop
 801a9a0:	0802639c 	.word	0x0802639c

0801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a8:	b08d      	sub	sp, #52	; 0x34
 801a9aa:	460d      	mov	r5, r1
 801a9ac:	4604      	mov	r4, r0
 801a9ae:	4699      	mov	r9, r3
 801a9b0:	6808      	ldr	r0, [r1, #0]
 801a9b2:	ab08      	add	r3, sp, #32
 801a9b4:	6849      	ldr	r1, [r1, #4]
 801a9b6:	c303      	stmia	r3!, {r0, r1}
 801a9b8:	6810      	ldr	r0, [r2, #0]
 801a9ba:	ab0a      	add	r3, sp, #40	; 0x28
 801a9bc:	6851      	ldr	r1, [r2, #4]
 801a9be:	c303      	stmia	r3!, {r0, r1}
 801a9c0:	a808      	add	r0, sp, #32
 801a9c2:	f7fa f951 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a9c6:	4629      	mov	r1, r5
 801a9c8:	a80a      	add	r0, sp, #40	; 0x28
 801a9ca:	4d67      	ldr	r5, [pc, #412]	; (801ab68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801a9cc:	f7fa f974 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a9d0:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801a9d4:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 801a9d8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 801a9dc:	6828      	ldr	r0, [r5, #0]
 801a9de:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a9e2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 801a9e6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801a9ea:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a9ee:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 801a9f2:	440a      	add	r2, r1
 801a9f4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a9f8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a9fc:	4413      	add	r3, r2
 801a9fe:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801aa02:	6803      	ldr	r3, [r0, #0]
 801aa04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa06:	4798      	blx	r3
 801aa08:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801aa0c:	d119      	bne.n	801aa42 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 801aa0e:	f010 0f20 	tst.w	r0, #32
 801aa12:	6828      	ldr	r0, [r5, #0]
 801aa14:	d018      	beq.n	801aa48 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 801aa16:	2500      	movs	r5, #0
 801aa18:	6801      	ldr	r1, [r0, #0]
 801aa1a:	b2b6      	uxth	r6, r6
 801aa1c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 801aa20:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801aa24:	9601      	str	r6, [sp, #4]
 801aa26:	e9cd 9503 	strd	r9, r5, [sp, #12]
 801aa2a:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 801aa2e:	9502      	str	r5, [sp, #8]
 801aa30:	fa1f f588 	uxth.w	r5, r8
 801aa34:	9500      	str	r5, [sp, #0]
 801aa36:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801aa38:	4621      	mov	r1, r4
 801aa3a:	47a8      	blx	r5
 801aa3c:	b00d      	add	sp, #52	; 0x34
 801aa3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa42:	f010 0f40 	tst.w	r0, #64	; 0x40
 801aa46:	e7e4      	b.n	801aa12 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 801aa48:	6803      	ldr	r3, [r0, #0]
 801aa4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa4c:	4798      	blx	r3
 801aa4e:	4947      	ldr	r1, [pc, #284]	; (801ab6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801aa50:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 801aa54:	880b      	ldrh	r3, [r1, #0]
 801aa56:	468a      	mov	sl, r1
 801aa58:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801aa5c:	fb03 5202 	mla	r2, r3, r2, r5
 801aa60:	4373      	muls	r3, r6
 801aa62:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801aa66:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801aa6a:	9307      	str	r3, [sp, #28]
 801aa6c:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801aa70:	9306      	str	r3, [sp, #24]
 801aa72:	9b07      	ldr	r3, [sp, #28]
 801aa74:	4298      	cmp	r0, r3
 801aa76:	d270      	bcs.n	801ab5a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 801aa78:	9b06      	ldr	r3, [sp, #24]
 801aa7a:	4621      	mov	r1, r4
 801aa7c:	eb00 0b03 	add.w	fp, r0, r3
 801aa80:	4558      	cmp	r0, fp
 801aa82:	d25d      	bcs.n	801ab40 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 801aa84:	f851 4b04 	ldr.w	r4, [r1], #4
 801aa88:	0e23      	lsrs	r3, r4, #24
 801aa8a:	d014      	beq.n	801aab6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801aa8c:	2bff      	cmp	r3, #255	; 0xff
 801aa8e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801aa92:	d112      	bne.n	801aaba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801aa94:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801aa98:	d10f      	bne.n	801aaba <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 801aa9a:	0963      	lsrs	r3, r4, #5
 801aa9c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801aaa0:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801aaa4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801aaa8:	f02c 0c07 	bic.w	ip, ip, #7
 801aaac:	ea43 0c0c 	orr.w	ip, r3, ip
 801aab0:	ea4c 0404 	orr.w	r4, ip, r4
 801aab4:	8004      	strh	r4, [r0, #0]
 801aab6:	3002      	adds	r0, #2
 801aab8:	e7e2      	b.n	801aa80 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 801aaba:	fb09 f303 	mul.w	r3, r9, r3
 801aabe:	8807      	ldrh	r7, [r0, #0]
 801aac0:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 801aac4:	fa5f fc8c 	uxtb.w	ip, ip
 801aac8:	1c5a      	adds	r2, r3, #1
 801aaca:	123e      	asrs	r6, r7, #8
 801aacc:	10fd      	asrs	r5, r7, #3
 801aace:	eb02 2223 	add.w	r2, r2, r3, asr #8
 801aad2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801aad6:	00ff      	lsls	r7, r7, #3
 801aad8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801aadc:	1212      	asrs	r2, r2, #8
 801aade:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801aae2:	b293      	uxth	r3, r2
 801aae4:	43d2      	mvns	r2, r2
 801aae6:	b2ff      	uxtb	r7, r7
 801aae8:	fb1e fe03 	smulbb	lr, lr, r3
 801aaec:	b2d2      	uxtb	r2, r2
 801aaee:	fb1c fc03 	smulbb	ip, ip, r3
 801aaf2:	b2e4      	uxtb	r4, r4
 801aaf4:	fb06 e602 	mla	r6, r6, r2, lr
 801aaf8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801aafc:	fb14 f403 	smulbb	r4, r4, r3
 801ab00:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801ab04:	b2b6      	uxth	r6, r6
 801ab06:	fb05 c502 	mla	r5, r5, r2, ip
 801ab0a:	fb07 4702 	mla	r7, r7, r2, r4
 801ab0e:	f106 0e01 	add.w	lr, r6, #1
 801ab12:	b2ad      	uxth	r5, r5
 801ab14:	b2bf      	uxth	r7, r7
 801ab16:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 801ab1a:	f105 0c01 	add.w	ip, r5, #1
 801ab1e:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 801ab22:	1c7e      	adds	r6, r7, #1
 801ab24:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801ab28:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 801ab2c:	096d      	lsrs	r5, r5, #5
 801ab2e:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801ab32:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801ab36:	ea46 060e 	orr.w	r6, r6, lr
 801ab3a:	432e      	orrs	r6, r5
 801ab3c:	8006      	strh	r6, [r0, #0]
 801ab3e:	e7ba      	b.n	801aab6 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801ab40:	f8ba 3000 	ldrh.w	r3, [sl]
 801ab44:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 801ab48:	eba3 0308 	sub.w	r3, r3, r8
 801ab4c:	eba4 0408 	sub.w	r4, r4, r8
 801ab50:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ab54:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ab58:	e78b      	b.n	801aa72 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 801ab5a:	4b03      	ldr	r3, [pc, #12]	; (801ab68 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 801ab5c:	6818      	ldr	r0, [r3, #0]
 801ab5e:	6803      	ldr	r3, [r0, #0]
 801ab60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ab62:	4798      	blx	r3
 801ab64:	e76a      	b.n	801aa3c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 801ab66:	bf00      	nop
 801ab68:	2400af34 	.word	0x2400af34
 801ab6c:	2400af2e 	.word	0x2400af2e

0801ab70 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801ab70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab74:	b085      	sub	sp, #20
 801ab76:	6810      	ldr	r0, [r2, #0]
 801ab78:	460c      	mov	r4, r1
 801ab7a:	6851      	ldr	r1, [r2, #4]
 801ab7c:	466d      	mov	r5, sp
 801ab7e:	4616      	mov	r6, r2
 801ab80:	c503      	stmia	r5!, {r0, r1}
 801ab82:	6818      	ldr	r0, [r3, #0]
 801ab84:	6859      	ldr	r1, [r3, #4]
 801ab86:	c503      	stmia	r5!, {r0, r1}
 801ab88:	4668      	mov	r0, sp
 801ab8a:	4d2e      	ldr	r5, [pc, #184]	; (801ac44 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 801ab8c:	f7fa f86c 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab90:	4631      	mov	r1, r6
 801ab92:	a802      	add	r0, sp, #8
 801ab94:	4e2c      	ldr	r6, [pc, #176]	; (801ac48 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 801ab96:	f7fa f88f 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ab9a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 801ab9e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801aba2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801aba6:	6828      	ldr	r0, [r5, #0]
 801aba8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801abac:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801abb0:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 801abb4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801abb8:	f8bd 1000 	ldrh.w	r1, [sp]
 801abbc:	440a      	add	r2, r1
 801abbe:	f8ad 2008 	strh.w	r2, [sp, #8]
 801abc2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801abc6:	4413      	add	r3, r2
 801abc8:	f8ad 300a 	strh.w	r3, [sp, #10]
 801abcc:	6803      	ldr	r3, [r0, #0]
 801abce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abd0:	4798      	blx	r3
 801abd2:	8833      	ldrh	r3, [r6, #0]
 801abd4:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801abd8:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 801abdc:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801abe0:	f8df e068 	ldr.w	lr, [pc, #104]	; 801ac4c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 801abe4:	fb03 1202 	mla	r2, r3, r2, r1
 801abe8:	fb08 f303 	mul.w	r3, r8, r3
 801abec:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801abf0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801abf4:	4298      	cmp	r0, r3
 801abf6:	d21d      	bcs.n	801ac34 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 801abf8:	eb00 080c 	add.w	r8, r0, ip
 801abfc:	4540      	cmp	r0, r8
 801abfe:	d20f      	bcs.n	801ac20 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 801ac00:	f854 1b04 	ldr.w	r1, [r4], #4
 801ac04:	ea4f 1951 	mov.w	r9, r1, lsr #5
 801ac08:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 801ac0c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 801ac10:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ac14:	ea42 0209 	orr.w	r2, r2, r9
 801ac18:	430a      	orrs	r2, r1
 801ac1a:	f820 2b02 	strh.w	r2, [r0], #2
 801ac1e:	e7ed      	b.n	801abfc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 801ac20:	8832      	ldrh	r2, [r6, #0]
 801ac22:	1bd2      	subs	r2, r2, r7
 801ac24:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ac28:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801ac2c:	1bd2      	subs	r2, r2, r7
 801ac2e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801ac32:	e7df      	b.n	801abf4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 801ac34:	6828      	ldr	r0, [r5, #0]
 801ac36:	6803      	ldr	r3, [r0, #0]
 801ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ac3a:	4798      	blx	r3
 801ac3c:	b005      	add	sp, #20
 801ac3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac42:	bf00      	nop
 801ac44:	2400af34 	.word	0x2400af34
 801ac48:	2400af2e 	.word	0x2400af2e
 801ac4c:	fffff800 	.word	0xfffff800

0801ac50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801ac50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac54:	b08e      	sub	sp, #56	; 0x38
 801ac56:	460e      	mov	r6, r1
 801ac58:	4604      	mov	r4, r0
 801ac5a:	461d      	mov	r5, r3
 801ac5c:	6808      	ldr	r0, [r1, #0]
 801ac5e:	ab0a      	add	r3, sp, #40	; 0x28
 801ac60:	6849      	ldr	r1, [r1, #4]
 801ac62:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801ae38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 801ac66:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801ae3c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801ac6a:	c303      	stmia	r3!, {r0, r1}
 801ac6c:	6810      	ldr	r0, [r2, #0]
 801ac6e:	ab0c      	add	r3, sp, #48	; 0x30
 801ac70:	6851      	ldr	r1, [r2, #4]
 801ac72:	c303      	stmia	r3!, {r0, r1}
 801ac74:	a80a      	add	r0, sp, #40	; 0x28
 801ac76:	f7f9 fff7 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ac7a:	4631      	mov	r1, r6
 801ac7c:	a80c      	add	r0, sp, #48	; 0x30
 801ac7e:	f7fa f81b 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ac82:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801ac86:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801ac8a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801ac8e:	f8d8 0000 	ldr.w	r0, [r8]
 801ac92:	fb11 2103 	smlabb	r1, r1, r3, r2
 801ac96:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 801ac9a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 801ac9e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801aca2:	440c      	add	r4, r1
 801aca4:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 801aca8:	440a      	add	r2, r1
 801acaa:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801acae:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801acb2:	4413      	add	r3, r2
 801acb4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801acb8:	6803      	ldr	r3, [r0, #0]
 801acba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801acbc:	4798      	blx	r3
 801acbe:	2dff      	cmp	r5, #255	; 0xff
 801acc0:	d124      	bne.n	801ad0c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801acc2:	f010 0f01 	tst.w	r0, #1
 801acc6:	f8d8 0000 	ldr.w	r0, [r8]
 801acca:	d022      	beq.n	801ad12 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 801accc:	2100      	movs	r1, #0
 801acce:	f04f 0e01 	mov.w	lr, #1
 801acd2:	f8d0 c000 	ldr.w	ip, [r0]
 801acd6:	b2b6      	uxth	r6, r6
 801acd8:	f8cd e018 	str.w	lr, [sp, #24]
 801acdc:	b2bf      	uxth	r7, r7
 801acde:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 801ace2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 801ace6:	e9cd 1107 	strd	r1, r1, [sp, #28]
 801acea:	f8b9 e000 	ldrh.w	lr, [r9]
 801acee:	9503      	str	r5, [sp, #12]
 801acf0:	9601      	str	r6, [sp, #4]
 801acf2:	9700      	str	r7, [sp, #0]
 801acf4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801acf8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801acfc:	9102      	str	r1, [sp, #8]
 801acfe:	4621      	mov	r1, r4
 801ad00:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801ad04:	47a8      	blx	r5
 801ad06:	b00e      	add	sp, #56	; 0x38
 801ad08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad0c:	f010 0f04 	tst.w	r0, #4
 801ad10:	e7d9      	b.n	801acc6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 801ad12:	6803      	ldr	r3, [r0, #0]
 801ad14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad16:	4798      	blx	r3
 801ad18:	f8b9 3000 	ldrh.w	r3, [r9]
 801ad1c:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 801ad20:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 801ad24:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801ad28:	435e      	muls	r6, r3
 801ad2a:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801ad2e:	2dff      	cmp	r5, #255	; 0xff
 801ad30:	fb03 1202 	mla	r2, r3, r2, r1
 801ad34:	ebac 0c07 	sub.w	ip, ip, r7
 801ad38:	eba3 0707 	sub.w	r7, r3, r7
 801ad3c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801ad40:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ad44:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801ad48:	ea4f 0747 	mov.w	r7, r7, lsl #1
 801ad4c:	d049      	beq.n	801ade2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801ad4e:	43eb      	mvns	r3, r5
 801ad50:	fa1f f985 	uxth.w	r9, r5
 801ad54:	b2db      	uxtb	r3, r3
 801ad56:	42b0      	cmp	r0, r6
 801ad58:	d266      	bcs.n	801ae28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ad5a:	eb00 0a0e 	add.w	sl, r0, lr
 801ad5e:	4550      	cmp	r0, sl
 801ad60:	4621      	mov	r1, r4
 801ad62:	f104 0403 	add.w	r4, r4, #3
 801ad66:	d25b      	bcs.n	801ae20 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 801ad68:	8802      	ldrh	r2, [r0, #0]
 801ad6a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801ad6e:	ea4f 2822 	mov.w	r8, r2, asr #8
 801ad72:	fb11 f109 	smulbb	r1, r1, r9
 801ad76:	10d5      	asrs	r5, r2, #3
 801ad78:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801ad7c:	00d2      	lsls	r2, r2, #3
 801ad7e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ad82:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801ad86:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 801ad8a:	fb08 1803 	mla	r8, r8, r3, r1
 801ad8e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 801ad92:	b2d2      	uxtb	r2, r2
 801ad94:	fb11 f109 	smulbb	r1, r1, r9
 801ad98:	fa1f f888 	uxth.w	r8, r8
 801ad9c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801ada0:	fb05 1503 	mla	r5, r5, r3, r1
 801ada4:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ada8:	fb11 f109 	smulbb	r1, r1, r9
 801adac:	b2ad      	uxth	r5, r5
 801adae:	fb02 1203 	mla	r2, r2, r3, r1
 801adb2:	f108 0101 	add.w	r1, r8, #1
 801adb6:	b292      	uxth	r2, r2
 801adb8:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 801adbc:	1c51      	adds	r1, r2, #1
 801adbe:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 801adc2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801adc6:	1c69      	adds	r1, r5, #1
 801adc8:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801adcc:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801add0:	096d      	lsrs	r5, r5, #5
 801add2:	ea42 0208 	orr.w	r2, r2, r8
 801add6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801adda:	432a      	orrs	r2, r5
 801addc:	f820 2b02 	strh.w	r2, [r0], #2
 801ade0:	e7bd      	b.n	801ad5e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 801ade2:	4a14      	ldr	r2, [pc, #80]	; (801ae34 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 801ade4:	42b0      	cmp	r0, r6
 801ade6:	d21f      	bcs.n	801ae28 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 801ade8:	eb00 050e 	add.w	r5, r0, lr
 801adec:	42a8      	cmp	r0, r5
 801adee:	4621      	mov	r1, r4
 801adf0:	f104 0403 	add.w	r4, r4, #3
 801adf4:	d210      	bcs.n	801ae18 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 801adf6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 801adfa:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 801adfe:	00db      	lsls	r3, r3, #3
 801ae00:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 801ae04:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ae08:	430b      	orrs	r3, r1
 801ae0a:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 801ae0e:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 801ae12:	f820 3b02 	strh.w	r3, [r0], #2
 801ae16:	e7e9      	b.n	801adec <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 801ae18:	4438      	add	r0, r7
 801ae1a:	eb01 040c 	add.w	r4, r1, ip
 801ae1e:	e7e1      	b.n	801ade4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 801ae20:	4438      	add	r0, r7
 801ae22:	eb01 040c 	add.w	r4, r1, ip
 801ae26:	e796      	b.n	801ad56 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 801ae28:	4b03      	ldr	r3, [pc, #12]	; (801ae38 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 801ae2a:	6818      	ldr	r0, [r3, #0]
 801ae2c:	6803      	ldr	r3, [r0, #0]
 801ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ae30:	4798      	blx	r3
 801ae32:	e768      	b.n	801ad06 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 801ae34:	fffff800 	.word	0xfffff800
 801ae38:	2400af34 	.word	0x2400af34
 801ae3c:	2400af2e 	.word	0x2400af2e

0801ae40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801ae40:	b4f0      	push	{r4, r5, r6, r7}
 801ae42:	4616      	mov	r6, r2
 801ae44:	461c      	mov	r4, r3
 801ae46:	460d      	mov	r5, r1
 801ae48:	9a04      	ldr	r2, [sp, #16]
 801ae4a:	2e01      	cmp	r6, #1
 801ae4c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801ae50:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801ae54:	d012      	beq.n	801ae7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 801ae56:	d303      	bcc.n	801ae60 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 801ae58:	2e02      	cmp	r6, #2
 801ae5a:	d00a      	beq.n	801ae72 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 801ae5c:	bcf0      	pop	{r4, r5, r6, r7}
 801ae5e:	4770      	bx	lr
 801ae60:	6805      	ldr	r5, [r0, #0]
 801ae62:	e9cd 3704 	strd	r3, r7, [sp, #16]
 801ae66:	68ed      	ldr	r5, [r5, #12]
 801ae68:	4613      	mov	r3, r2
 801ae6a:	4622      	mov	r2, r4
 801ae6c:	46ac      	mov	ip, r5
 801ae6e:	bcf0      	pop	{r4, r5, r6, r7}
 801ae70:	4760      	bx	ip
 801ae72:	4621      	mov	r1, r4
 801ae74:	4628      	mov	r0, r5
 801ae76:	bcf0      	pop	{r4, r5, r6, r7}
 801ae78:	f7ff bd94 	b.w	801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ae7c:	4621      	mov	r1, r4
 801ae7e:	4628      	mov	r0, r5
 801ae80:	bcf0      	pop	{r4, r5, r6, r7}
 801ae82:	f7ff bee5 	b.w	801ac50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

0801ae88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae8c:	b093      	sub	sp, #76	; 0x4c
 801ae8e:	4681      	mov	r9, r0
 801ae90:	4688      	mov	r8, r1
 801ae92:	6810      	ldr	r0, [r2, #0]
 801ae94:	6851      	ldr	r1, [r2, #4]
 801ae96:	ac0e      	add	r4, sp, #56	; 0x38
 801ae98:	4616      	mov	r6, r2
 801ae9a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 801ae9e:	4f6b      	ldr	r7, [pc, #428]	; (801b04c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801aea0:	c403      	stmia	r4!, {r0, r1}
 801aea2:	6818      	ldr	r0, [r3, #0]
 801aea4:	ac10      	add	r4, sp, #64	; 0x40
 801aea6:	6859      	ldr	r1, [r3, #4]
 801aea8:	c403      	stmia	r4!, {r0, r1}
 801aeaa:	a80e      	add	r0, sp, #56	; 0x38
 801aeac:	f7f9 fedc 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801aeb0:	4631      	mov	r1, r6
 801aeb2:	a810      	add	r0, sp, #64	; 0x40
 801aeb4:	4e66      	ldr	r6, [pc, #408]	; (801b050 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801aeb6:	f7f9 feff 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801aeba:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 801aebe:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801aec2:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801aec6:	6830      	ldr	r0, [r6, #0]
 801aec8:	fb11 2103 	smlabb	r1, r1, r3, r2
 801aecc:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 801aed0:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 801aed4:	4489      	add	r9, r1
 801aed6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 801aeda:	440a      	add	r2, r1
 801aedc:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801aee0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801aee4:	4413      	add	r3, r2
 801aee6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801aeea:	6803      	ldr	r3, [r0, #0]
 801aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aeee:	4798      	blx	r3
 801aef0:	f010 0f80 	tst.w	r0, #128	; 0x80
 801aef4:	6830      	ldr	r0, [r6, #0]
 801aef6:	d01d      	beq.n	801af34 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801aef8:	2200      	movs	r2, #0
 801aefa:	6801      	ldr	r1, [r0, #0]
 801aefc:	b2a4      	uxth	r4, r4
 801aefe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801af02:	b2ad      	uxth	r5, r5
 801af04:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801af08:	220b      	movs	r2, #11
 801af0a:	9207      	str	r2, [sp, #28]
 801af0c:	883a      	ldrh	r2, [r7, #0]
 801af0e:	9502      	str	r5, [sp, #8]
 801af10:	9206      	str	r2, [sp, #24]
 801af12:	2201      	movs	r2, #1
 801af14:	9401      	str	r4, [sp, #4]
 801af16:	e9cd a204 	strd	sl, r2, [sp, #16]
 801af1a:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 801af1e:	9203      	str	r2, [sp, #12]
 801af20:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801af24:	9200      	str	r2, [sp, #0]
 801af26:	4642      	mov	r2, r8
 801af28:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 801af2a:	4649      	mov	r1, r9
 801af2c:	47a0      	blx	r4
 801af2e:	b013      	add	sp, #76	; 0x4c
 801af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af34:	6803      	ldr	r3, [r0, #0]
 801af36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af38:	4798      	blx	r3
 801af3a:	883b      	ldrh	r3, [r7, #0]
 801af3c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 801af40:	f04f 0e04 	mov.w	lr, #4
 801af44:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 801af48:	435d      	muls	r5, r3
 801af4a:	fb03 1202 	mla	r2, r3, r2, r1
 801af4e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801af52:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 801af56:	920c      	str	r2, [sp, #48]	; 0x30
 801af58:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 801af5c:	1b12      	subs	r2, r2, r4
 801af5e:	920d      	str	r2, [sp, #52]	; 0x34
 801af60:	0062      	lsls	r2, r4, #1
 801af62:	1b1c      	subs	r4, r3, r4
 801af64:	920a      	str	r2, [sp, #40]	; 0x28
 801af66:	0063      	lsls	r3, r4, #1
 801af68:	930b      	str	r3, [sp, #44]	; 0x2c
 801af6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801af6c:	4298      	cmp	r0, r3
 801af6e:	d266      	bcs.n	801b03e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801af70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af72:	eb00 0b03 	add.w	fp, r0, r3
 801af76:	4558      	cmp	r0, fp
 801af78:	d25c      	bcs.n	801b034 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801af7a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801af7e:	fb1e e303 	smlabb	r3, lr, r3, lr
 801af82:	f858 2003 	ldr.w	r2, [r8, r3]
 801af86:	0e11      	lsrs	r1, r2, #24
 801af88:	d012      	beq.n	801afb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801af8a:	29ff      	cmp	r1, #255	; 0xff
 801af8c:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801af90:	d110      	bne.n	801afb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af92:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801af96:	d10d      	bne.n	801afb4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801af98:	0953      	lsrs	r3, r2, #5
 801af9a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801af9e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801afa2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801afa6:	f027 0707 	bic.w	r7, r7, #7
 801afaa:	431f      	orrs	r7, r3
 801afac:	433a      	orrs	r2, r7
 801afae:	8002      	strh	r2, [r0, #0]
 801afb0:	3002      	adds	r0, #2
 801afb2:	e7e0      	b.n	801af76 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 801afb4:	fb0a f101 	mul.w	r1, sl, r1
 801afb8:	8806      	ldrh	r6, [r0, #0]
 801afba:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 801afbe:	b2d2      	uxtb	r2, r2
 801afc0:	1c4b      	adds	r3, r1, #1
 801afc2:	1235      	asrs	r5, r6, #8
 801afc4:	10f4      	asrs	r4, r6, #3
 801afc6:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801afca:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801afce:	00f6      	lsls	r6, r6, #3
 801afd0:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801afd4:	121b      	asrs	r3, r3, #8
 801afd6:	b2f6      	uxtb	r6, r6
 801afd8:	b299      	uxth	r1, r3
 801afda:	43db      	mvns	r3, r3
 801afdc:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801afe0:	fb1c fc01 	smulbb	ip, ip, r1
 801afe4:	b2db      	uxtb	r3, r3
 801afe6:	fb12 f201 	smulbb	r2, r2, r1
 801afea:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801afee:	fb05 c503 	mla	r5, r5, r3, ip
 801aff2:	b2ff      	uxtb	r7, r7
 801aff4:	fb06 2203 	mla	r2, r6, r3, r2
 801aff8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801affc:	fb17 f701 	smulbb	r7, r7, r1
 801b000:	b2ad      	uxth	r5, r5
 801b002:	b292      	uxth	r2, r2
 801b004:	fb04 7403 	mla	r4, r4, r3, r7
 801b008:	f105 0c01 	add.w	ip, r5, #1
 801b00c:	1c57      	adds	r7, r2, #1
 801b00e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801b012:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801b016:	b2a4      	uxth	r4, r4
 801b018:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801b01c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b020:	433d      	orrs	r5, r7
 801b022:	1c67      	adds	r7, r4, #1
 801b024:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 801b028:	0964      	lsrs	r4, r4, #5
 801b02a:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b02e:	4325      	orrs	r5, r4
 801b030:	8005      	strh	r5, [r0, #0]
 801b032:	e7bd      	b.n	801afb0 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801b034:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b036:	4418      	add	r0, r3
 801b038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b03a:	4499      	add	r9, r3
 801b03c:	e795      	b.n	801af6a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801b03e:	4b04      	ldr	r3, [pc, #16]	; (801b050 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 801b040:	6818      	ldr	r0, [r3, #0]
 801b042:	6803      	ldr	r3, [r0, #0]
 801b044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b046:	4798      	blx	r3
 801b048:	e771      	b.n	801af2e <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 801b04a:	bf00      	nop
 801b04c:	2400af2e 	.word	0x2400af2e
 801b050:	2400af34 	.word	0x2400af34

0801b054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 801b054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b058:	b087      	sub	sp, #28
 801b05a:	4680      	mov	r8, r0
 801b05c:	460d      	mov	r5, r1
 801b05e:	4614      	mov	r4, r2
 801b060:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801b064:	2e00      	cmp	r6, #0
 801b066:	f000 80b9 	beq.w	801b1dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 801b06a:	6810      	ldr	r0, [r2, #0]
 801b06c:	af02      	add	r7, sp, #8
 801b06e:	6851      	ldr	r1, [r2, #4]
 801b070:	c703      	stmia	r7!, {r0, r1}
 801b072:	6818      	ldr	r0, [r3, #0]
 801b074:	af04      	add	r7, sp, #16
 801b076:	6859      	ldr	r1, [r3, #4]
 801b078:	c703      	stmia	r7!, {r0, r1}
 801b07a:	a802      	add	r0, sp, #8
 801b07c:	f7f9 fdf4 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b080:	4621      	mov	r1, r4
 801b082:	a804      	add	r0, sp, #16
 801b084:	f7f9 fe18 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b088:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b08c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b090:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 801b094:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801b098:	fb14 2103 	smlabb	r1, r4, r3, r2
 801b09c:	eb08 0401 	add.w	r4, r8, r1
 801b0a0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b0a4:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b0a8:	440a      	add	r2, r1
 801b0aa:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 801b0ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b0b2:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b0b6:	4413      	add	r3, r2
 801b0b8:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b0bc:	4b49      	ldr	r3, [pc, #292]	; (801b1e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801b0be:	6818      	ldr	r0, [r3, #0]
 801b0c0:	6803      	ldr	r3, [r0, #0]
 801b0c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b0c4:	4798      	blx	r3
 801b0c6:	4b48      	ldr	r3, [pc, #288]	; (801b1e8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 801b0c8:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 801b0cc:	2eff      	cmp	r6, #255	; 0xff
 801b0ce:	881a      	ldrh	r2, [r3, #0]
 801b0d0:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 801b0d4:	fb02 c101 	mla	r1, r2, r1, ip
 801b0d8:	fb02 f207 	mul.w	r2, r2, r7
 801b0dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 801b0e0:	f105 0104 	add.w	r1, r5, #4
 801b0e4:	461d      	mov	r5, r3
 801b0e6:	d05a      	beq.n	801b19e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 801b0e8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 801b0ec:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b0f0:	b2b6      	uxth	r6, r6
 801b0f2:	9301      	str	r3, [sp, #4]
 801b0f4:	fa1f fe8e 	uxth.w	lr, lr
 801b0f8:	4282      	cmp	r2, r0
 801b0fa:	d96a      	bls.n	801b1d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b0fc:	eb00 0b0a 	add.w	fp, r0, sl
 801b100:	4583      	cmp	fp, r0
 801b102:	d940      	bls.n	801b186 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 801b104:	8805      	ldrh	r5, [r0, #0]
 801b106:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b10a:	122f      	asrs	r7, r5, #8
 801b10c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b110:	ea4f 09e5 	mov.w	r9, r5, asr #3
 801b114:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b118:	00ed      	lsls	r5, r5, #3
 801b11a:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801b11e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801b122:	fb17 f70e 	smulbb	r7, r7, lr
 801b126:	b2ed      	uxtb	r5, r5
 801b128:	fb19 f90e 	smulbb	r9, r9, lr
 801b12c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b130:	fb15 f50e 	smulbb	r5, r5, lr
 801b134:	fb0c 7c06 	mla	ip, ip, r6, r7
 801b138:	10df      	asrs	r7, r3, #3
 801b13a:	00db      	lsls	r3, r3, #3
 801b13c:	fa1f fc8c 	uxth.w	ip, ip
 801b140:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b144:	b2db      	uxtb	r3, r3
 801b146:	fb07 9706 	mla	r7, r7, r6, r9
 801b14a:	f10c 0901 	add.w	r9, ip, #1
 801b14e:	fb03 5306 	mla	r3, r3, r6, r5
 801b152:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 801b156:	b29b      	uxth	r3, r3
 801b158:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 801b15c:	b2bf      	uxth	r7, r7
 801b15e:	f103 0c01 	add.w	ip, r3, #1
 801b162:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b166:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b16a:	ea4c 0c09 	orr.w	ip, ip, r9
 801b16e:	f107 0901 	add.w	r9, r7, #1
 801b172:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801b176:	097f      	lsrs	r7, r7, #5
 801b178:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801b17c:	ea4c 0c07 	orr.w	ip, ip, r7
 801b180:	f820 cb02 	strh.w	ip, [r0], #2
 801b184:	e7bc      	b.n	801b100 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 801b186:	9b01      	ldr	r3, [sp, #4]
 801b188:	881b      	ldrh	r3, [r3, #0]
 801b18a:	eba3 0308 	sub.w	r3, r3, r8
 801b18e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b192:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b196:	eba3 0308 	sub.w	r3, r3, r8
 801b19a:	441c      	add	r4, r3
 801b19c:	e7ac      	b.n	801b0f8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801b19e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801b1a2:	4282      	cmp	r2, r0
 801b1a4:	d915      	bls.n	801b1d2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 801b1a6:	eb00 060a 	add.w	r6, r0, sl
 801b1aa:	4286      	cmp	r6, r0
 801b1ac:	d906      	bls.n	801b1bc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801b1ae:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b1b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801b1b6:	f820 3b02 	strh.w	r3, [r0], #2
 801b1ba:	e7f6      	b.n	801b1aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 801b1bc:	882b      	ldrh	r3, [r5, #0]
 801b1be:	eba3 0308 	sub.w	r3, r3, r8
 801b1c2:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b1c6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801b1ca:	eba3 0308 	sub.w	r3, r3, r8
 801b1ce:	441c      	add	r4, r3
 801b1d0:	e7e7      	b.n	801b1a2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 801b1d2:	4b04      	ldr	r3, [pc, #16]	; (801b1e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801b1d4:	6818      	ldr	r0, [r3, #0]
 801b1d6:	6803      	ldr	r3, [r0, #0]
 801b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b1da:	4798      	blx	r3
 801b1dc:	b007      	add	sp, #28
 801b1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1e2:	bf00      	nop
 801b1e4:	2400af34 	.word	0x2400af34
 801b1e8:	2400af2e 	.word	0x2400af2e

0801b1ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f0:	b091      	sub	sp, #68	; 0x44
 801b1f2:	4680      	mov	r8, r0
 801b1f4:	460f      	mov	r7, r1
 801b1f6:	4614      	mov	r4, r2
 801b1f8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 801b1fc:	2d00      	cmp	r5, #0
 801b1fe:	d051      	beq.n	801b2a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b200:	6810      	ldr	r0, [r2, #0]
 801b202:	ae0c      	add	r6, sp, #48	; 0x30
 801b204:	6851      	ldr	r1, [r2, #4]
 801b206:	f8df 9200 	ldr.w	r9, [pc, #512]	; 801b408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 801b20a:	c603      	stmia	r6!, {r0, r1}
 801b20c:	6818      	ldr	r0, [r3, #0]
 801b20e:	ae0e      	add	r6, sp, #56	; 0x38
 801b210:	6859      	ldr	r1, [r3, #4]
 801b212:	c603      	stmia	r6!, {r0, r1}
 801b214:	a80c      	add	r0, sp, #48	; 0x30
 801b216:	f7f9 fd27 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b21a:	4621      	mov	r1, r4
 801b21c:	a80e      	add	r0, sp, #56	; 0x38
 801b21e:	f7f9 fd4b 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b222:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801b226:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b22a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801b22e:	f8d9 0000 	ldr.w	r0, [r9]
 801b232:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b236:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 801b23a:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 801b23e:	eb08 0401 	add.w	r4, r8, r1
 801b242:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801b246:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 801b40c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 801b24a:	440a      	add	r2, r1
 801b24c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801b250:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801b254:	4413      	add	r3, r2
 801b256:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801b25a:	6803      	ldr	r3, [r0, #0]
 801b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b25e:	4798      	blx	r3
 801b260:	f010 0f80 	tst.w	r0, #128	; 0x80
 801b264:	f8d9 0000 	ldr.w	r0, [r9]
 801b268:	d01f      	beq.n	801b2aa <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 801b26a:	2200      	movs	r2, #0
 801b26c:	6801      	ldr	r1, [r0, #0]
 801b26e:	b2b6      	uxth	r6, r6
 801b270:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801b274:	e9cd 2208 	strd	r2, r2, [sp, #32]
 801b278:	220b      	movs	r2, #11
 801b27a:	9207      	str	r2, [sp, #28]
 801b27c:	f8b8 2000 	ldrh.w	r2, [r8]
 801b280:	9601      	str	r6, [sp, #4]
 801b282:	9206      	str	r2, [sp, #24]
 801b284:	2201      	movs	r2, #1
 801b286:	e9cd 5204 	strd	r5, r2, [sp, #16]
 801b28a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 801b28e:	9203      	str	r2, [sp, #12]
 801b290:	fa1f f28a 	uxth.w	r2, sl
 801b294:	9202      	str	r2, [sp, #8]
 801b296:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801b29a:	9200      	str	r2, [sp, #0]
 801b29c:	463a      	mov	r2, r7
 801b29e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 801b2a0:	4621      	mov	r1, r4
 801b2a2:	47a8      	blx	r5
 801b2a4:	b011      	add	sp, #68	; 0x44
 801b2a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2aa:	6803      	ldr	r3, [r0, #0]
 801b2ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
 801b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b2b2:	4798      	blx	r3
 801b2b4:	f8b8 2000 	ldrh.w	r2, [r8]
 801b2b8:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801b2bc:	2dff      	cmp	r5, #255	; 0xff
 801b2be:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 801b2c2:	fb0a fa02 	mul.w	sl, sl, r2
 801b2c6:	fb02 1303 	mla	r3, r2, r3, r1
 801b2ca:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b2ce:	d062      	beq.n	801b396 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 801b2d0:	ea6f 0c05 	mvn.w	ip, r5
 801b2d4:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 801b2d8:	b2ad      	uxth	r5, r5
 801b2da:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 801b2de:	fa5f fc8c 	uxtb.w	ip, ip
 801b2e2:	930a      	str	r3, [sp, #40]	; 0x28
 801b2e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2e6:	4298      	cmp	r0, r3
 801b2e8:	f080 8085 	bcs.w	801b3f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b2ec:	eb00 0b09 	add.w	fp, r0, r9
 801b2f0:	4558      	cmp	r0, fp
 801b2f2:	d246      	bcs.n	801b382 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 801b2f4:	f814 eb01 	ldrb.w	lr, [r4], #1
 801b2f8:	2303      	movs	r3, #3
 801b2fa:	2204      	movs	r2, #4
 801b2fc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 801b300:	8803      	ldrh	r3, [r0, #0]
 801b302:	eb07 0a0e 	add.w	sl, r7, lr
 801b306:	1219      	asrs	r1, r3, #8
 801b308:	10da      	asrs	r2, r3, #3
 801b30a:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b30e:	f89a 8002 	ldrb.w	r8, [sl, #2]
 801b312:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b316:	00db      	lsls	r3, r3, #3
 801b318:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801b31c:	fb18 f805 	smulbb	r8, r8, r5
 801b320:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 801b324:	fb1e fe05 	smulbb	lr, lr, r5
 801b328:	b2db      	uxtb	r3, r3
 801b32a:	fb01 810c 	mla	r1, r1, ip, r8
 801b32e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801b332:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801b336:	fb18 f805 	smulbb	r8, r8, r5
 801b33a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801b33e:	b289      	uxth	r1, r1
 801b340:	fb02 820c 	mla	r2, r2, ip, r8
 801b344:	fb03 e30c 	mla	r3, r3, ip, lr
 801b348:	f101 0801 	add.w	r8, r1, #1
 801b34c:	b292      	uxth	r2, r2
 801b34e:	b29b      	uxth	r3, r3
 801b350:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801b354:	f102 0801 	add.w	r8, r2, #1
 801b358:	f103 0e01 	add.w	lr, r3, #1
 801b35c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 801b360:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801b364:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 801b368:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801b36c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801b370:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801b374:	ea4e 0101 	orr.w	r1, lr, r1
 801b378:	ea41 0108 	orr.w	r1, r1, r8
 801b37c:	f820 1b02 	strh.w	r1, [r0], #2
 801b380:	e7b6      	b.n	801b2f0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 801b382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b384:	881b      	ldrh	r3, [r3, #0]
 801b386:	1b9b      	subs	r3, r3, r6
 801b388:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b38c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b390:	1b9b      	subs	r3, r3, r6
 801b392:	441c      	add	r4, r3
 801b394:	e7a6      	b.n	801b2e4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 801b396:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 801b39a:	2203      	movs	r2, #3
 801b39c:	2504      	movs	r5, #4
 801b39e:	4919      	ldr	r1, [pc, #100]	; (801b404 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 801b3a0:	4550      	cmp	r0, sl
 801b3a2:	d228      	bcs.n	801b3f6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 801b3a4:	eb00 0c09 	add.w	ip, r0, r9
 801b3a8:	4560      	cmp	r0, ip
 801b3aa:	4623      	mov	r3, r4
 801b3ac:	d219      	bcs.n	801b3e2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 801b3ae:	f893 e000 	ldrb.w	lr, [r3]
 801b3b2:	3401      	adds	r4, #1
 801b3b4:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 801b3b8:	eb07 0b0e 	add.w	fp, r7, lr
 801b3bc:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801b3c0:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801b3c4:	f89b b001 	ldrb.w	fp, [fp, #1]
 801b3c8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 801b3cc:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801b3d0:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801b3d4:	ea43 030b 	orr.w	r3, r3, fp
 801b3d8:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 801b3dc:	f820 3b02 	strh.w	r3, [r0], #2
 801b3e0:	e7e2      	b.n	801b3a8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 801b3e2:	f8b8 3000 	ldrh.w	r3, [r8]
 801b3e6:	1b9b      	subs	r3, r3, r6
 801b3e8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b3ec:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 801b3f0:	1b9b      	subs	r3, r3, r6
 801b3f2:	441c      	add	r4, r3
 801b3f4:	e7d4      	b.n	801b3a0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801b3f6:	4b04      	ldr	r3, [pc, #16]	; (801b408 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 801b3f8:	6818      	ldr	r0, [r3, #0]
 801b3fa:	6803      	ldr	r3, [r0, #0]
 801b3fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3fe:	4798      	blx	r3
 801b400:	e750      	b.n	801b2a4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 801b402:	bf00      	nop
 801b404:	fffff800 	.word	0xfffff800
 801b408:	2400af34 	.word	0x2400af34
 801b40c:	2400af2e 	.word	0x2400af2e

0801b410 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801b410:	b430      	push	{r4, r5}
 801b412:	780d      	ldrb	r5, [r1, #0]
 801b414:	f89d 4008 	ldrb.w	r4, [sp, #8]
 801b418:	2d01      	cmp	r5, #1
 801b41a:	d00a      	beq.n	801b432 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 801b41c:	d305      	bcc.n	801b42a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 801b41e:	2d02      	cmp	r5, #2
 801b420:	d10b      	bne.n	801b43a <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 801b422:	9402      	str	r4, [sp, #8]
 801b424:	bc30      	pop	{r4, r5}
 801b426:	f7ff be15 	b.w	801b054 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 801b42a:	9402      	str	r4, [sp, #8]
 801b42c:	bc30      	pop	{r4, r5}
 801b42e:	f7ff bd2b 	b.w	801ae88 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801b432:	9402      	str	r4, [sp, #8]
 801b434:	bc30      	pop	{r4, r5}
 801b436:	f7ff bed9 	b.w	801b1ec <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801b43a:	bc30      	pop	{r4, r5}
 801b43c:	4770      	bx	lr
	...

0801b440 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 801b440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b444:	b087      	sub	sp, #28
 801b446:	4604      	mov	r4, r0
 801b448:	460e      	mov	r6, r1
 801b44a:	6810      	ldr	r0, [r2, #0]
 801b44c:	6851      	ldr	r1, [r2, #4]
 801b44e:	ad02      	add	r5, sp, #8
 801b450:	4617      	mov	r7, r2
 801b452:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 801b456:	f8df 9230 	ldr.w	r9, [pc, #560]	; 801b688 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 801b45a:	c503      	stmia	r5!, {r0, r1}
 801b45c:	6818      	ldr	r0, [r3, #0]
 801b45e:	ad04      	add	r5, sp, #16
 801b460:	6859      	ldr	r1, [r3, #4]
 801b462:	c503      	stmia	r5!, {r0, r1}
 801b464:	a802      	add	r0, sp, #8
 801b466:	f7f9 fbff 	bl	8014c68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801b46a:	4639      	mov	r1, r7
 801b46c:	a804      	add	r0, sp, #16
 801b46e:	f7f9 fc23 	bl	8014cb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801b472:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b476:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b47a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801b47e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801b482:	fb11 2103 	smlabb	r1, r1, r3, r2
 801b486:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 801b48a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 801b48e:	440e      	add	r6, r1
 801b490:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b494:	440a      	add	r2, r1
 801b496:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b49a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b49e:	4413      	add	r3, r2
 801b4a0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b4a4:	4b77      	ldr	r3, [pc, #476]	; (801b684 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b4a6:	6818      	ldr	r0, [r3, #0]
 801b4a8:	6803      	ldr	r3, [r0, #0]
 801b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4ac:	4798      	blx	r3
 801b4ae:	f8b9 b000 	ldrh.w	fp, [r9]
 801b4b2:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b4b6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 801b4ba:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 801b4be:	fb05 f50b 	mul.w	r5, r5, fp
 801b4c2:	fb0b 2303 	mla	r3, fp, r3, r2
 801b4c6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b4ca:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801b4ce:	9300      	str	r3, [sp, #0]
 801b4d0:	d069      	beq.n	801b5a6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 801b4d2:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 801b4d6:	4558      	cmp	r0, fp
 801b4d8:	f080 80cc 	bcs.w	801b674 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b4dc:	9b00      	ldr	r3, [sp, #0]
 801b4de:	4631      	mov	r1, r6
 801b4e0:	18c3      	adds	r3, r0, r3
 801b4e2:	9301      	str	r3, [sp, #4]
 801b4e4:	9b01      	ldr	r3, [sp, #4]
 801b4e6:	4298      	cmp	r0, r3
 801b4e8:	d24f      	bcs.n	801b58a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 801b4ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4ee:	2a00      	cmp	r2, #0
 801b4f0:	d048      	beq.n	801b584 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b4f2:	fb0a f202 	mul.w	r2, sl, r2
 801b4f6:	1c53      	adds	r3, r2, #1
 801b4f8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b4fc:	121b      	asrs	r3, r3, #8
 801b4fe:	d041      	beq.n	801b584 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 801b500:	8802      	ldrh	r2, [r0, #0]
 801b502:	b29e      	uxth	r6, r3
 801b504:	f8b4 c000 	ldrh.w	ip, [r4]
 801b508:	43db      	mvns	r3, r3
 801b50a:	1215      	asrs	r5, r2, #8
 801b50c:	b2db      	uxtb	r3, r3
 801b50e:	ea4f 272c 	mov.w	r7, ip, asr #8
 801b512:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801b516:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 801b51a:	fb15 f503 	smulbb	r5, r5, r3
 801b51e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801b522:	00d2      	lsls	r2, r2, #3
 801b524:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b528:	fb07 5706 	mla	r7, r7, r6, r5
 801b52c:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801b530:	b2d2      	uxtb	r2, r2
 801b532:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801b536:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801b53a:	fb1e fe03 	smulbb	lr, lr, r3
 801b53e:	b2bf      	uxth	r7, r7
 801b540:	fb12 f203 	smulbb	r2, r2, r3
 801b544:	fa5f fc8c 	uxtb.w	ip, ip
 801b548:	fb05 e506 	mla	r5, r5, r6, lr
 801b54c:	f107 0e01 	add.w	lr, r7, #1
 801b550:	fb0c 2c06 	mla	ip, ip, r6, r2
 801b554:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801b558:	fa1f fc8c 	uxth.w	ip, ip
 801b55c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 801b560:	b2ad      	uxth	r5, r5
 801b562:	f10c 0701 	add.w	r7, ip, #1
 801b566:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b56a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801b56e:	ea47 070e 	orr.w	r7, r7, lr
 801b572:	f105 0e01 	add.w	lr, r5, #1
 801b576:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 801b57a:	096d      	lsrs	r5, r5, #5
 801b57c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801b580:	432f      	orrs	r7, r5
 801b582:	8007      	strh	r7, [r0, #0]
 801b584:	3002      	adds	r0, #2
 801b586:	3402      	adds	r4, #2
 801b588:	e7ac      	b.n	801b4e4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 801b58a:	f8b9 3000 	ldrh.w	r3, [r9]
 801b58e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b592:	eba3 0308 	sub.w	r3, r3, r8
 801b596:	eba6 0608 	sub.w	r6, r6, r8
 801b59a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b59e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b5a2:	440e      	add	r6, r1
 801b5a4:	e797      	b.n	801b4d6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 801b5a6:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 801b5aa:	42a8      	cmp	r0, r5
 801b5ac:	d262      	bcs.n	801b674 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 801b5ae:	9b00      	ldr	r3, [sp, #0]
 801b5b0:	4631      	mov	r1, r6
 801b5b2:	eb00 0b03 	add.w	fp, r0, r3
 801b5b6:	4558      	cmp	r0, fp
 801b5b8:	d24e      	bcs.n	801b658 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 801b5ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b5be:	b12b      	cbz	r3, 801b5cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b5c0:	2bff      	cmp	r3, #255	; 0xff
 801b5c2:	f8b4 e000 	ldrh.w	lr, [r4]
 801b5c6:	d104      	bne.n	801b5d2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 801b5c8:	f8a0 e000 	strh.w	lr, [r0]
 801b5cc:	3002      	adds	r0, #2
 801b5ce:	3402      	adds	r4, #2
 801b5d0:	e7f1      	b.n	801b5b6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 801b5d2:	8802      	ldrh	r2, [r0, #0]
 801b5d4:	b29f      	uxth	r7, r3
 801b5d6:	43db      	mvns	r3, r3
 801b5d8:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 801b5dc:	1216      	asrs	r6, r2, #8
 801b5de:	b2db      	uxtb	r3, r3
 801b5e0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b5e4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801b5e8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 801b5ec:	00d2      	lsls	r2, r2, #3
 801b5ee:	fb16 f603 	smulbb	r6, r6, r3
 801b5f2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 801b5f6:	b2d2      	uxtb	r2, r2
 801b5f8:	fb0c 6c07 	mla	ip, ip, r7, r6
 801b5fc:	ea4f 06ee 	mov.w	r6, lr, asr #3
 801b600:	fb1a fa03 	smulbb	sl, sl, r3
 801b604:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801b608:	fa1f fc8c 	uxth.w	ip, ip
 801b60c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801b610:	fb12 f303 	smulbb	r3, r2, r3
 801b614:	fa5f fe8e 	uxtb.w	lr, lr
 801b618:	fb06 a607 	mla	r6, r6, r7, sl
 801b61c:	f10c 0201 	add.w	r2, ip, #1
 801b620:	fb0e 3307 	mla	r3, lr, r7, r3
 801b624:	b2b6      	uxth	r6, r6
 801b626:	b29b      	uxth	r3, r3
 801b628:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 801b62c:	f106 0a01 	add.w	sl, r6, #1
 801b630:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 801b634:	f103 0c01 	add.w	ip, r3, #1
 801b638:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 801b63c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801b640:	0976      	lsrs	r6, r6, #5
 801b642:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b646:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801b64a:	ea4c 0c02 	orr.w	ip, ip, r2
 801b64e:	ea4c 0c06 	orr.w	ip, ip, r6
 801b652:	f8a0 c000 	strh.w	ip, [r0]
 801b656:	e7b9      	b.n	801b5cc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 801b658:	f8b9 3000 	ldrh.w	r3, [r9]
 801b65c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 801b660:	eba3 0308 	sub.w	r3, r3, r8
 801b664:	eba6 0608 	sub.w	r6, r6, r8
 801b668:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801b66c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 801b670:	440e      	add	r6, r1
 801b672:	e79a      	b.n	801b5aa <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 801b674:	4b03      	ldr	r3, [pc, #12]	; (801b684 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 801b676:	6818      	ldr	r0, [r3, #0]
 801b678:	6803      	ldr	r3, [r0, #0]
 801b67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b67c:	4798      	blx	r3
 801b67e:	b007      	add	sp, #28
 801b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b684:	2400af34 	.word	0x2400af34
 801b688:	2400af2e 	.word	0x2400af2e

0801b68c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801b68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b690:	b089      	sub	sp, #36	; 0x24
 801b692:	4682      	mov	sl, r0
 801b694:	460f      	mov	r7, r1
 801b696:	4691      	mov	r9, r2
 801b698:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 801b69c:	4698      	mov	r8, r3
 801b69e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801b6a0:	2e00      	cmp	r6, #0
 801b6a2:	d036      	beq.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b6a4:	4608      	mov	r0, r1
 801b6a6:	f7fc f86b 	bl	8017780 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801b6aa:	4605      	mov	r5, r0
 801b6ac:	4638      	mov	r0, r7
 801b6ae:	f7fc f89b 	bl	80177e8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801b6b2:	f8ad 000e 	strh.w	r0, [sp, #14]
 801b6b6:	4638      	mov	r0, r7
 801b6b8:	f8ad 9008 	strh.w	r9, [sp, #8]
 801b6bc:	f8ad 500c 	strh.w	r5, [sp, #12]
 801b6c0:	f8ad 800a 	strh.w	r8, [sp, #10]
 801b6c4:	f7fc f948 	bl	8017958 <_ZNK8touchgfx6Bitmap7getDataEv>
 801b6c8:	4605      	mov	r5, r0
 801b6ca:	4638      	mov	r0, r7
 801b6cc:	f7fc f974 	bl	80179b8 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801b6d0:	4681      	mov	r9, r0
 801b6d2:	4638      	mov	r0, r7
 801b6d4:	f7fc f9c4 	bl	8017a60 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801b6d8:	280b      	cmp	r0, #11
 801b6da:	d81a      	bhi.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b6dc:	e8df f000 	tbb	[pc, r0]
 801b6e0:	1906aebd 	.word	0x1906aebd
 801b6e4:	19191919 	.word	0x19191919
 801b6e8:	b5191919 	.word	0xb5191919
 801b6ec:	4bb0      	ldr	r3, [pc, #704]	; (801b9b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 801b6ee:	6818      	ldr	r0, [r3, #0]
 801b6f0:	6803      	ldr	r3, [r0, #0]
 801b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b6f4:	4798      	blx	r3
 801b6f6:	2eff      	cmp	r6, #255	; 0xff
 801b6f8:	d121      	bne.n	801b73e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b6fa:	0683      	lsls	r3, r0, #26
 801b6fc:	d41f      	bmi.n	801b73e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 801b6fe:	4638      	mov	r0, r7
 801b700:	f7fc f8f2 	bl	80178e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b704:	b940      	cbnz	r0, 801b718 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 801b706:	4623      	mov	r3, r4
 801b708:	aa02      	add	r2, sp, #8
 801b70a:	4629      	mov	r1, r5
 801b70c:	4650      	mov	r0, sl
 801b70e:	f7ff fa2f 	bl	801ab70 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b712:	b009      	add	sp, #36	; 0x24
 801b714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b718:	f10d 0818 	add.w	r8, sp, #24
 801b71c:	4639      	mov	r1, r7
 801b71e:	af04      	add	r7, sp, #16
 801b720:	4640      	mov	r0, r8
 801b722:	f7fc f895 	bl	8017850 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b726:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b72a:	e887 0003 	stmia.w	r7, {r0, r1}
 801b72e:	4638      	mov	r0, r7
 801b730:	4621      	mov	r1, r4
 801b732:	f7f7 faeb 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801b736:	4638      	mov	r0, r7
 801b738:	f7f7 fb2b 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b73c:	b130      	cbz	r0, 801b74c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 801b73e:	4633      	mov	r3, r6
 801b740:	4622      	mov	r2, r4
 801b742:	a902      	add	r1, sp, #8
 801b744:	4628      	mov	r0, r5
 801b746:	f7ff f92d 	bl	801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b74a:	e7e2      	b.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b74c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b750:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b754:	4293      	cmp	r3, r2
 801b756:	dd12      	ble.n	801b77e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 801b758:	1a9b      	subs	r3, r3, r2
 801b75a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b75e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b762:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b766:	4628      	mov	r0, r5
 801b768:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b76c:	4642      	mov	r2, r8
 801b76e:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b772:	a902      	add	r1, sp, #8
 801b774:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b778:	4633      	mov	r3, r6
 801b77a:	f7ff f913 	bl	801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b77e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b782:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b786:	4293      	cmp	r3, r2
 801b788:	dd12      	ble.n	801b7b0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 801b78a:	1a9b      	subs	r3, r3, r2
 801b78c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b790:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b794:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b798:	4642      	mov	r2, r8
 801b79a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b79e:	4628      	mov	r0, r5
 801b7a0:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b7a4:	23ff      	movs	r3, #255	; 0xff
 801b7a6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b7aa:	a902      	add	r1, sp, #8
 801b7ac:	f7ff f8fa 	bl	801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b7b0:	463b      	mov	r3, r7
 801b7b2:	aa02      	add	r2, sp, #8
 801b7b4:	4629      	mov	r1, r5
 801b7b6:	4650      	mov	r0, sl
 801b7b8:	f7ff f9da 	bl	801ab70 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 801b7bc:	88a2      	ldrh	r2, [r4, #4]
 801b7be:	8823      	ldrh	r3, [r4, #0]
 801b7c0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b7c4:	4413      	add	r3, r2
 801b7c6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b7ca:	440a      	add	r2, r1
 801b7cc:	b29b      	uxth	r3, r3
 801b7ce:	b292      	uxth	r2, r2
 801b7d0:	b218      	sxth	r0, r3
 801b7d2:	b211      	sxth	r1, r2
 801b7d4:	4288      	cmp	r0, r1
 801b7d6:	dd12      	ble.n	801b7fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 801b7d8:	1a9b      	subs	r3, r3, r2
 801b7da:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b7de:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 801b7e2:	4642      	mov	r2, r8
 801b7e4:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b7e8:	a902      	add	r1, sp, #8
 801b7ea:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b7ee:	23ff      	movs	r3, #255	; 0xff
 801b7f0:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b7f4:	4628      	mov	r0, r5
 801b7f6:	f8ad 601a 	strh.w	r6, [sp, #26]
 801b7fa:	f7ff f8d3 	bl	801a9a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801b7fe:	88e2      	ldrh	r2, [r4, #6]
 801b800:	8863      	ldrh	r3, [r4, #2]
 801b802:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b806:	4413      	add	r3, r2
 801b808:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b80c:	440a      	add	r2, r1
 801b80e:	b29b      	uxth	r3, r3
 801b810:	b292      	uxth	r2, r2
 801b812:	b218      	sxth	r0, r3
 801b814:	b211      	sxth	r1, r2
 801b816:	4288      	cmp	r0, r1
 801b818:	f77f af7b 	ble.w	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b81c:	1a9b      	subs	r3, r3, r2
 801b81e:	f9b4 6000 	ldrsh.w	r6, [r4]
 801b822:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b826:	4642      	mov	r2, r8
 801b828:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b82c:	23ff      	movs	r3, #255	; 0xff
 801b82e:	f8ad 6018 	strh.w	r6, [sp, #24]
 801b832:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b836:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b83a:	e782      	b.n	801b742 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801b83c:	4633      	mov	r3, r6
 801b83e:	4622      	mov	r2, r4
 801b840:	a902      	add	r1, sp, #8
 801b842:	4628      	mov	r0, r5
 801b844:	f7ff fa04 	bl	801ac50 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801b848:	e763      	b.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b84a:	9600      	str	r6, [sp, #0]
 801b84c:	4623      	mov	r3, r4
 801b84e:	aa02      	add	r2, sp, #8
 801b850:	4649      	mov	r1, r9
 801b852:	4628      	mov	r0, r5
 801b854:	f7ff fddc 	bl	801b410 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801b858:	e75b      	b.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b85a:	4638      	mov	r0, r7
 801b85c:	f7fc f844 	bl	80178e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801b860:	b950      	cbnz	r0, 801b878 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801b862:	f8da 3000 	ldr.w	r3, [sl]
 801b866:	aa02      	add	r2, sp, #8
 801b868:	4629      	mov	r1, r5
 801b86a:	e9cd 6000 	strd	r6, r0, [sp]
 801b86e:	4650      	mov	r0, sl
 801b870:	68de      	ldr	r6, [r3, #12]
 801b872:	4623      	mov	r3, r4
 801b874:	47b0      	blx	r6
 801b876:	e74c      	b.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b878:	f10d 0818 	add.w	r8, sp, #24
 801b87c:	4639      	mov	r1, r7
 801b87e:	af04      	add	r7, sp, #16
 801b880:	4640      	mov	r0, r8
 801b882:	f7fb ffe5 	bl	8017850 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801b886:	e898 0003 	ldmia.w	r8, {r0, r1}
 801b88a:	e887 0003 	stmia.w	r7, {r0, r1}
 801b88e:	4638      	mov	r0, r7
 801b890:	4621      	mov	r1, r4
 801b892:	f7f7 fa3b 	bl	8012d0c <_ZN8touchgfx4RectaNERKS0_>
 801b896:	4638      	mov	r0, r7
 801b898:	f7f7 fa7b 	bl	8012d92 <_ZNK8touchgfx4Rect7isEmptyEv>
 801b89c:	b138      	cbz	r0, 801b8ae <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801b89e:	4623      	mov	r3, r4
 801b8a0:	9600      	str	r6, [sp, #0]
 801b8a2:	aa02      	add	r2, sp, #8
 801b8a4:	4649      	mov	r1, r9
 801b8a6:	4628      	mov	r0, r5
 801b8a8:	f7ff fdca 	bl	801b440 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b8ac:	e731      	b.n	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b8ae:	f8da 3000 	ldr.w	r3, [sl]
 801b8b2:	aa02      	add	r2, sp, #8
 801b8b4:	4629      	mov	r1, r5
 801b8b6:	e9cd 6000 	strd	r6, r0, [sp]
 801b8ba:	4650      	mov	r0, sl
 801b8bc:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801b8c0:	463b      	mov	r3, r7
 801b8c2:	47d8      	blx	fp
 801b8c4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801b8c8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b8cc:	4293      	cmp	r3, r2
 801b8ce:	dd13      	ble.n	801b8f8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801b8d0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b8d4:	1a9b      	subs	r3, r3, r2
 801b8d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b8da:	f8ad 0018 	strh.w	r0, [sp, #24]
 801b8de:	4628      	mov	r0, r5
 801b8e0:	f8ad 201a 	strh.w	r2, [sp, #26]
 801b8e4:	aa02      	add	r2, sp, #8
 801b8e6:	f8ad 101c 	strh.w	r1, [sp, #28]
 801b8ea:	4649      	mov	r1, r9
 801b8ec:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b8f0:	4643      	mov	r3, r8
 801b8f2:	9600      	str	r6, [sp, #0]
 801b8f4:	f7ff fda4 	bl	801b440 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b8f8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801b8fc:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b900:	4293      	cmp	r3, r2
 801b902:	dd13      	ble.n	801b92c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801b904:	1a9b      	subs	r3, r3, r2
 801b906:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801b90a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801b90e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b912:	aa02      	add	r2, sp, #8
 801b914:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b918:	4628      	mov	r0, r5
 801b91a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b91e:	4643      	mov	r3, r8
 801b920:	f8ad 101e 	strh.w	r1, [sp, #30]
 801b924:	4649      	mov	r1, r9
 801b926:	9600      	str	r6, [sp, #0]
 801b928:	f7ff fd8a 	bl	801b440 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b92c:	88a2      	ldrh	r2, [r4, #4]
 801b92e:	8823      	ldrh	r3, [r4, #0]
 801b930:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801b934:	4413      	add	r3, r2
 801b936:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801b93a:	440a      	add	r2, r1
 801b93c:	b29b      	uxth	r3, r3
 801b93e:	b292      	uxth	r2, r2
 801b940:	b218      	sxth	r0, r3
 801b942:	b211      	sxth	r1, r2
 801b944:	4288      	cmp	r0, r1
 801b946:	dd13      	ble.n	801b970 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801b948:	1a9b      	subs	r3, r3, r2
 801b94a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801b94e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801b952:	aa02      	add	r2, sp, #8
 801b954:	f8ad 1018 	strh.w	r1, [sp, #24]
 801b958:	4649      	mov	r1, r9
 801b95a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b95e:	4643      	mov	r3, r8
 801b960:	f8ad 001e 	strh.w	r0, [sp, #30]
 801b964:	4628      	mov	r0, r5
 801b966:	9600      	str	r6, [sp, #0]
 801b968:	f8ad 701a 	strh.w	r7, [sp, #26]
 801b96c:	f7ff fd68 	bl	801b440 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801b970:	88e2      	ldrh	r2, [r4, #6]
 801b972:	8863      	ldrh	r3, [r4, #2]
 801b974:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801b978:	4413      	add	r3, r2
 801b97a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801b97e:	440a      	add	r2, r1
 801b980:	b29b      	uxth	r3, r3
 801b982:	b292      	uxth	r2, r2
 801b984:	b218      	sxth	r0, r3
 801b986:	b211      	sxth	r1, r2
 801b988:	4288      	cmp	r0, r1
 801b98a:	f77f aec2 	ble.w	801b712 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801b98e:	f9b4 7000 	ldrsh.w	r7, [r4]
 801b992:	1a9b      	subs	r3, r3, r2
 801b994:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b998:	f8ad 301e 	strh.w	r3, [sp, #30]
 801b99c:	4643      	mov	r3, r8
 801b99e:	f8ad 7018 	strh.w	r7, [sp, #24]
 801b9a2:	f8ad 101a 	strh.w	r1, [sp, #26]
 801b9a6:	f8ad 001c 	strh.w	r0, [sp, #28]
 801b9aa:	9600      	str	r6, [sp, #0]
 801b9ac:	e779      	b.n	801b8a2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801b9ae:	bf00      	nop
 801b9b0:	2400af34 	.word	0x2400af34

0801b9b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801b9b4:	b180      	cbz	r0, 801b9d8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801b9b6:	2903      	cmp	r1, #3
 801b9b8:	d81c      	bhi.n	801b9f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b9ba:	e8df f001 	tbb	[pc, r1]
 801b9be:	1d02      	.short	0x1d02
 801b9c0:	1f08      	.short	0x1f08
 801b9c2:	4b10      	ldr	r3, [pc, #64]	; (801ba04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b9c4:	8818      	ldrh	r0, [r3, #0]
 801b9c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b9ca:	4240      	negs	r0, r0
 801b9cc:	4770      	bx	lr
 801b9ce:	4b0d      	ldr	r3, [pc, #52]	; (801ba04 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801b9d0:	8818      	ldrh	r0, [r3, #0]
 801b9d2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801b9d6:	4770      	bx	lr
 801b9d8:	2903      	cmp	r1, #3
 801b9da:	d80b      	bhi.n	801b9f4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801b9dc:	a301      	add	r3, pc, #4	; (adr r3, 801b9e4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801b9de:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801b9e2:	bf00      	nop
 801b9e4:	0801b9f9 	.word	0x0801b9f9
 801b9e8:	0801b9cf 	.word	0x0801b9cf
 801b9ec:	0801b9fd 	.word	0x0801b9fd
 801b9f0:	0801b9c3 	.word	0x0801b9c3
 801b9f4:	2000      	movs	r0, #0
 801b9f6:	4770      	bx	lr
 801b9f8:	2001      	movs	r0, #1
 801b9fa:	4770      	bx	lr
 801b9fc:	f04f 30ff 	mov.w	r0, #4294967295
 801ba00:	4770      	bx	lr
 801ba02:	bf00      	nop
 801ba04:	2400af2e 	.word	0x2400af2e

0801ba08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801ba08:	b180      	cbz	r0, 801ba2c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801ba0a:	2903      	cmp	r1, #3
 801ba0c:	d81c      	bhi.n	801ba48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ba0e:	e8df f001 	tbb	[pc, r1]
 801ba12:	021d      	.short	0x021d
 801ba14:	071f      	.short	0x071f
 801ba16:	4b10      	ldr	r3, [pc, #64]	; (801ba58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ba18:	8818      	ldrh	r0, [r3, #0]
 801ba1a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ba1e:	4770      	bx	lr
 801ba20:	4b0d      	ldr	r3, [pc, #52]	; (801ba58 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801ba22:	8818      	ldrh	r0, [r3, #0]
 801ba24:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801ba28:	4240      	negs	r0, r0
 801ba2a:	4770      	bx	lr
 801ba2c:	2903      	cmp	r1, #3
 801ba2e:	d80b      	bhi.n	801ba48 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801ba30:	a301      	add	r3, pc, #4	; (adr r3, 801ba38 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801ba32:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ba36:	bf00      	nop
 801ba38:	0801ba17 	.word	0x0801ba17
 801ba3c:	0801ba51 	.word	0x0801ba51
 801ba40:	0801ba21 	.word	0x0801ba21
 801ba44:	0801ba4d 	.word	0x0801ba4d
 801ba48:	2000      	movs	r0, #0
 801ba4a:	4770      	bx	lr
 801ba4c:	2001      	movs	r0, #1
 801ba4e:	4770      	bx	lr
 801ba50:	f04f 30ff 	mov.w	r0, #4294967295
 801ba54:	4770      	bx	lr
 801ba56:	bf00      	nop
 801ba58:	2400af2e 	.word	0x2400af2e

0801ba5c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ba5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba60:	b099      	sub	sp, #100	; 0x64
 801ba62:	910b      	str	r1, [sp, #44]	; 0x2c
 801ba64:	a914      	add	r1, sp, #80	; 0x50
 801ba66:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801ba6a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801ba6e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801ba72:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801ba76:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801ba7a:	e881 000c 	stmia.w	r1, {r2, r3}
 801ba7e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801ba82:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801ba86:	9309      	str	r3, [sp, #36]	; 0x24
 801ba88:	f891 900d 	ldrb.w	r9, [r1, #13]
 801ba8c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801ba90:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801ba94:	9310      	str	r3, [sp, #64]	; 0x40
 801ba96:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801ba9a:	930c      	str	r3, [sp, #48]	; 0x30
 801ba9c:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801baa0:	798f      	ldrb	r7, [r1, #6]
 801baa2:	431f      	orrs	r7, r3
 801baa4:	f000 8195 	beq.w	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801baa8:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801baac:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801bab0:	f891 9007 	ldrb.w	r9, [r1, #7]
 801bab4:	ea59 0903 	orrs.w	r9, r9, r3
 801bab8:	f000 818b 	beq.w	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801babc:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801bac0:	b29b      	uxth	r3, r3
 801bac2:	2d00      	cmp	r5, #0
 801bac4:	f000 812e 	beq.w	801bd24 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
 801bac8:	1aed      	subs	r5, r5, r3
 801baca:	b2ad      	uxth	r5, r5
 801bacc:	042b      	lsls	r3, r5, #16
 801bace:	d502      	bpl.n	801bad6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801bad0:	1b64      	subs	r4, r4, r5
 801bad2:	2500      	movs	r5, #0
 801bad4:	b224      	sxth	r4, r4
 801bad6:	f9b2 1000 	ldrsh.w	r1, [r2]
 801bada:	a814      	add	r0, sp, #80	; 0x50
 801badc:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801bae0:	428c      	cmp	r4, r1
 801bae2:	b28b      	uxth	r3, r1
 801bae4:	bfbf      	itttt	lt
 801bae6:	18ed      	addlt	r5, r5, r3
 801bae8:	1b2c      	sublt	r4, r5, r4
 801baea:	b2a5      	uxthlt	r5, r4
 801baec:	460c      	movlt	r4, r1
 801baee:	8891      	ldrh	r1, [r2, #4]
 801baf0:	440b      	add	r3, r1
 801baf2:	4621      	mov	r1, r4
 801baf4:	b21b      	sxth	r3, r3
 801baf6:	930f      	str	r3, [sp, #60]	; 0x3c
 801baf8:	88d3      	ldrh	r3, [r2, #6]
 801bafa:	8852      	ldrh	r2, [r2, #2]
 801bafc:	4413      	add	r3, r2
 801bafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb00:	b21b      	sxth	r3, r3
 801bb02:	930d      	str	r3, [sp, #52]	; 0x34
 801bb04:	4bbd      	ldr	r3, [pc, #756]	; (801bdfc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801bb06:	f893 b000 	ldrb.w	fp, [r3]
 801bb0a:	f10b 3cff 	add.w	ip, fp, #4294967295
 801bb0e:	f1dc 0300 	rsbs	r3, ip, #0
 801bb12:	eb43 030c 	adc.w	r3, r3, ip
 801bb16:	930e      	str	r3, [sp, #56]	; 0x38
 801bb18:	4653      	mov	r3, sl
 801bb1a:	f7f8 ff1f 	bl	801495c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801bb1e:	4621      	mov	r1, r4
 801bb20:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801bb24:	4653      	mov	r3, sl
 801bb26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bb28:	a814      	add	r0, sp, #80	; 0x50
 801bb2a:	f7f8 ff34 	bl	8014996 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801bb2e:	a918      	add	r1, sp, #96	; 0x60
 801bb30:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801bb34:	a817      	add	r0, sp, #92	; 0x5c
 801bb36:	f7f9 f855 	bl	8014be4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801bb3a:	f1ba 0f00 	cmp.w	sl, #0
 801bb3e:	f040 80f4 	bne.w	801bd2a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
 801bb42:	f1bb 0f01 	cmp.w	fp, #1
 801bb46:	f040 80f8 	bne.w	801bd3a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 801bb4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	f040 8145 	bne.w	801bddc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
 801bb52:	b2ba      	uxth	r2, r7
 801bb54:	b905      	cbnz	r5, 801bb58 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801bb56:	b16e      	cbz	r6, 801bb74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801bb58:	fb06 5302 	mla	r3, r6, r2, r5
 801bb5c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801bb5e:	4631      	mov	r1, r6
 801bb60:	fb08 f303 	mul.w	r3, r8, r3
 801bb64:	f003 0607 	and.w	r6, r3, #7
 801bb68:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801bb6c:	9328      	str	r3, [sp, #160]	; 0xa0
 801bb6e:	eba9 0301 	sub.w	r3, r9, r1
 801bb72:	930a      	str	r3, [sp, #40]	; 0x28
 801bb74:	4651      	mov	r1, sl
 801bb76:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bb78:	f7ff ff1c 	bl	801b9b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801bb7c:	4681      	mov	r9, r0
 801bb7e:	980e      	ldr	r0, [sp, #56]	; 0x38
 801bb80:	f7ff ff42 	bl	801ba08 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801bb84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb86:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb88:	4683      	mov	fp, r0
 801bb8a:	eba3 0a01 	sub.w	sl, r3, r1
 801bb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb90:	459a      	cmp	sl, r3
 801bb92:	bfa8      	it	ge
 801bb94:	469a      	movge	sl, r3
 801bb96:	f1ba 0f00 	cmp.w	sl, #0
 801bb9a:	f340 811a 	ble.w	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bb9e:	1b64      	subs	r4, r4, r5
 801bba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bba2:	1b1c      	subs	r4, r3, r4
 801bba4:	42bc      	cmp	r4, r7
 801bba6:	bfd4      	ite	le
 801bba8:	ebc5 0504 	rsble	r5, r5, r4
 801bbac:	ebc5 0507 	rsbgt	r5, r5, r7
 801bbb0:	2d00      	cmp	r5, #0
 801bbb2:	f340 810e 	ble.w	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801bbb6:	1b52      	subs	r2, r2, r5
 801bbb8:	fb08 f302 	mul.w	r3, r8, r2
 801bbbc:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	f040 8116 	bne.w	801bdf2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 801bbc6:	4b8e      	ldr	r3, [pc, #568]	; (801be00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801bbc8:	6818      	ldr	r0, [r3, #0]
 801bbca:	6803      	ldr	r3, [r0, #0]
 801bbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bbce:	4798      	blx	r3
 801bbd0:	2301      	movs	r3, #1
 801bbd2:	4a8c      	ldr	r2, [pc, #560]	; (801be04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801bbd4:	fa03 f308 	lsl.w	r3, r3, r8
 801bbd8:	8811      	ldrh	r1, [r2, #0]
 801bbda:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801bbde:	3b01      	subs	r3, #1
 801bbe0:	b2db      	uxtb	r3, r3
 801bbe2:	930e      	str	r3, [sp, #56]	; 0x38
 801bbe4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801bbe8:	fb01 2303 	mla	r3, r1, r3, r2
 801bbec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801bbf0:	930a      	str	r3, [sp, #40]	; 0x28
 801bbf2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bbf4:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801bbf8:	9313      	str	r3, [sp, #76]	; 0x4c
 801bbfa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bbfc:	0a19      	lsrs	r1, r3, #8
 801bbfe:	b2cb      	uxtb	r3, r1
 801bc00:	9312      	str	r3, [sp, #72]	; 0x48
 801bc02:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc04:	b2db      	uxtb	r3, r3
 801bc06:	9311      	str	r3, [sp, #68]	; 0x44
 801bc08:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801bc0a:	095a      	lsrs	r2, r3, #5
 801bc0c:	4b7e      	ldr	r3, [pc, #504]	; (801be08 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801bc0e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801bc12:	400b      	ands	r3, r1
 801bc14:	4313      	orrs	r3, r2
 801bc16:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801bc18:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801bc1c:	4313      	orrs	r3, r2
 801bc1e:	b29b      	uxth	r3, r3
 801bc20:	9310      	str	r3, [sp, #64]	; 0x40
 801bc22:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801bc24:	781a      	ldrb	r2, [r3, #0]
 801bc26:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801bc2a:	fb05 b919 	mls	r9, r5, r9, fp
 801bc2e:	4132      	asrs	r2, r6
 801bc30:	fb03 fb05 	mul.w	fp, r3, r5
 801bc34:	930d      	str	r3, [sp, #52]	; 0x34
 801bc36:	b2d2      	uxtb	r2, r2
 801bc38:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801bc3c:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801bc40:	f0c0 80f5 	bcc.w	801be2e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
 801bc44:	46ae      	mov	lr, r5
 801bc46:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801bc4a:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801bc4e:	f0c0 80dd 	bcc.w	801be0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 801bc52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc54:	4013      	ands	r3, r2
 801bc56:	d055      	beq.n	801bd04 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801bc58:	20ff      	movs	r0, #255	; 0xff
 801bc5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801bc5c:	fb90 f1f1 	sdiv	r1, r0, r1
 801bc60:	434b      	muls	r3, r1
 801bc62:	2bfe      	cmp	r3, #254	; 0xfe
 801bc64:	dd03      	ble.n	801bc6e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801bc66:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bc68:	4281      	cmp	r1, r0
 801bc6a:	f000 80c4 	beq.w	801bdf6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
 801bc6e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bc70:	f8bc 4000 	ldrh.w	r4, [ip]
 801bc74:	fb11 f303 	smulbb	r3, r1, r3
 801bc78:	1220      	asrs	r0, r4, #8
 801bc7a:	b29b      	uxth	r3, r3
 801bc7c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801bc80:	1c59      	adds	r1, r3, #1
 801bc82:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801bc86:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801bc8a:	10e1      	asrs	r1, r4, #3
 801bc8c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801bc90:	00e4      	lsls	r4, r4, #3
 801bc92:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801bc96:	b29f      	uxth	r7, r3
 801bc98:	43db      	mvns	r3, r3
 801bc9a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801bc9e:	b2db      	uxtb	r3, r3
 801bca0:	b2e4      	uxtb	r4, r4
 801bca2:	9309      	str	r3, [sp, #36]	; 0x24
 801bca4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bca6:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801bcaa:	fb13 f907 	smulbb	r9, r3, r7
 801bcae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcb0:	fb00 9003 	mla	r0, r0, r3, r9
 801bcb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801bcb6:	fb13 f907 	smulbb	r9, r3, r7
 801bcba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcbc:	b280      	uxth	r0, r0
 801bcbe:	fb01 9103 	mla	r1, r1, r3, r9
 801bcc2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bcc4:	fb13 f707 	smulbb	r7, r3, r7
 801bcc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcca:	b289      	uxth	r1, r1
 801bccc:	fb04 7403 	mla	r4, r4, r3, r7
 801bcd0:	1c43      	adds	r3, r0, #1
 801bcd2:	b2a4      	uxth	r4, r4
 801bcd4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801bcd8:	f104 0901 	add.w	r9, r4, #1
 801bcdc:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801bce0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801bce4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801bce8:	ea49 0000 	orr.w	r0, r9, r0
 801bcec:	f101 0901 	add.w	r9, r1, #1
 801bcf0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801bcf4:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801bcf8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801bcfc:	ea40 0009 	orr.w	r0, r0, r9
 801bd00:	f8ac 0000 	strh.w	r0, [ip]
 801bd04:	4446      	add	r6, r8
 801bd06:	b2b6      	uxth	r6, r6
 801bd08:	2e07      	cmp	r6, #7
 801bd0a:	bf89      	itett	hi
 801bd0c:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801bd0e:	fa42 f208 	asrls.w	r2, r2, r8
 801bd12:	2600      	movhi	r6, #0
 801bd14:	785a      	ldrbhi	r2, [r3, #1]
 801bd16:	bf8a      	itet	hi
 801bd18:	3301      	addhi	r3, #1
 801bd1a:	b2d2      	uxtbls	r2, r2
 801bd1c:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801bd1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bd20:	449c      	add	ip, r3
 801bd22:	e792      	b.n	801bc4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801bd24:	441c      	add	r4, r3
 801bd26:	b224      	sxth	r4, r4
 801bd28:	e6d5      	b.n	801bad6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801bd2a:	f1ba 0f01 	cmp.w	sl, #1
 801bd2e:	f47f af0c 	bne.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd32:	f1bb 0f01 	cmp.w	fp, #1
 801bd36:	f47f af08 	bne.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd3a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 801be00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
 801bd3e:	f8db 0000 	ldr.w	r0, [fp]
 801bd42:	6803      	ldr	r3, [r0, #0]
 801bd44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801bd46:	4798      	blx	r3
 801bd48:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801bd4c:	465a      	mov	r2, fp
 801bd4e:	d006      	beq.n	801bd5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bd50:	f1b8 0f04 	cmp.w	r8, #4
 801bd54:	d140      	bne.n	801bdd8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 801bd56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd58:	3300      	adds	r3, #0
 801bd5a:	bf18      	it	ne
 801bd5c:	2301      	movne	r3, #1
 801bd5e:	0580      	lsls	r0, r0, #22
 801bd60:	d56e      	bpl.n	801be40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bd62:	f1b8 0f08 	cmp.w	r8, #8
 801bd66:	d16b      	bne.n	801be40 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	bf0c      	ite	eq
 801bd6c:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801bd70:	f44f 7180 	movne.w	r1, #256	; 0x100
 801bd74:	2d00      	cmp	r5, #0
 801bd76:	f47f aee8 	bne.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd7a:	2e00      	cmp	r6, #0
 801bd7c:	f47f aee5 	bne.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd80:	19e3      	adds	r3, r4, r7
 801bd82:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801bd84:	4283      	cmp	r3, r0
 801bd86:	f73f aee0 	bgt.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bd8c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801bd8e:	444b      	add	r3, r9
 801bd90:	4283      	cmp	r3, r0
 801bd92:	f73f aeda 	bgt.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801bd96:	b2bf      	uxth	r7, r7
 801bd98:	f1b8 0f08 	cmp.w	r8, #8
 801bd9c:	6810      	ldr	r0, [r2, #0]
 801bd9e:	f04f 0500 	mov.w	r5, #0
 801bda2:	bf18      	it	ne
 801bda4:	3701      	addne	r7, #1
 801bda6:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801bdaa:	6804      	ldr	r4, [r0, #0]
 801bdac:	bf18      	it	ne
 801bdae:	f027 0701 	bicne.w	r7, r7, #1
 801bdb2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801bdb6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801bdba:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bdbc:	bf18      	it	ne
 801bdbe:	b2bf      	uxthne	r7, r7
 801bdc0:	9104      	str	r1, [sp, #16]
 801bdc2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801bdc4:	e9cd 7900 	strd	r7, r9, [sp]
 801bdc8:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801bdcc:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801bdce:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801bdd0:	47a0      	blx	r4
 801bdd2:	b019      	add	sp, #100	; 0x64
 801bdd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdd8:	2300      	movs	r3, #0
 801bdda:	e7c0      	b.n	801bd5e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
 801bddc:	2208      	movs	r2, #8
 801bdde:	fb92 f3f8 	sdiv	r3, r2, r8
 801bde2:	1e5a      	subs	r2, r3, #1
 801bde4:	443a      	add	r2, r7
 801bde6:	fb92 f2f3 	sdiv	r2, r2, r3
 801bdea:	fb12 f203 	smulbb	r2, r2, r3
 801bdee:	b292      	uxth	r2, r2
 801bdf0:	e6b0      	b.n	801bb54 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801bdf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801bdf4:	e6ec      	b.n	801bbd0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801bdf6:	9810      	ldr	r0, [sp, #64]	; 0x40
 801bdf8:	e782      	b.n	801bd00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801bdfa:	bf00      	nop
 801bdfc:	2400af2c 	.word	0x2400af2c
 801be00:	2400af34 	.word	0x2400af34
 801be04:	2400af2e 	.word	0x2400af2e
 801be08:	00fff800 	.word	0x00fff800
 801be0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801be0e:	b153      	cbz	r3, 801be26 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
 801be10:	441e      	add	r6, r3
 801be12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801be14:	b2b6      	uxth	r6, r6
 801be16:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801be1a:	f006 0607 	and.w	r6, r6, #7
 801be1e:	781a      	ldrb	r2, [r3, #0]
 801be20:	9328      	str	r3, [sp, #160]	; 0xa0
 801be22:	4132      	asrs	r2, r6
 801be24:	b2d2      	uxtb	r2, r2
 801be26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801be28:	445b      	add	r3, fp
 801be2a:	930a      	str	r3, [sp, #40]	; 0x28
 801be2c:	e706      	b.n	801bc3c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801be2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be30:	2b00      	cmp	r3, #0
 801be32:	d1ce      	bne.n	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801be34:	4b05      	ldr	r3, [pc, #20]	; (801be4c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
 801be36:	6818      	ldr	r0, [r3, #0]
 801be38:	6803      	ldr	r3, [r0, #0]
 801be3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be3c:	4798      	blx	r3
 801be3e:	e7c8      	b.n	801bdd2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
 801be40:	2b00      	cmp	r3, #0
 801be42:	f43f ae82 	beq.w	801bb4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801be46:	f44f 7180 	mov.w	r1, #256	; 0x100
 801be4a:	e793      	b.n	801bd74 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
 801be4c:	2400af34 	.word	0x2400af34

0801be50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801be50:	b538      	push	{r3, r4, r5, lr}
 801be52:	4c15      	ldr	r4, [pc, #84]	; (801bea8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801be54:	4605      	mov	r5, r0
 801be56:	7823      	ldrb	r3, [r4, #0]
 801be58:	f3bf 8f5b 	dmb	ish
 801be5c:	07da      	lsls	r2, r3, #31
 801be5e:	d40b      	bmi.n	801be78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801be60:	4620      	mov	r0, r4
 801be62:	f007 fa68 	bl	8023336 <__cxa_guard_acquire>
 801be66:	b138      	cbz	r0, 801be78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 801be68:	4620      	mov	r0, r4
 801be6a:	f007 fa70 	bl	802334e <__cxa_guard_release>
 801be6e:	4a0f      	ldr	r2, [pc, #60]	; (801beac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801be70:	490f      	ldr	r1, [pc, #60]	; (801beb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801be72:	4810      	ldr	r0, [pc, #64]	; (801beb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801be74:	f007 fa58 	bl	8023328 <__aeabi_atexit>
 801be78:	4c0f      	ldr	r4, [pc, #60]	; (801beb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801be7a:	7823      	ldrb	r3, [r4, #0]
 801be7c:	f3bf 8f5b 	dmb	ish
 801be80:	07db      	lsls	r3, r3, #31
 801be82:	d40b      	bmi.n	801be9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801be84:	4620      	mov	r0, r4
 801be86:	f007 fa56 	bl	8023336 <__cxa_guard_acquire>
 801be8a:	b138      	cbz	r0, 801be9c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 801be8c:	4620      	mov	r0, r4
 801be8e:	f007 fa5e 	bl	802334e <__cxa_guard_release>
 801be92:	4a06      	ldr	r2, [pc, #24]	; (801beac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801be94:	4909      	ldr	r1, [pc, #36]	; (801bebc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801be96:	480a      	ldr	r0, [pc, #40]	; (801bec0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801be98:	f007 fa46 	bl	8023328 <__aeabi_atexit>
 801be9c:	4b05      	ldr	r3, [pc, #20]	; (801beb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801be9e:	612b      	str	r3, [r5, #16]
 801bea0:	4b07      	ldr	r3, [pc, #28]	; (801bec0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 801bea2:	616b      	str	r3, [r5, #20]
 801bea4:	bd38      	pop	{r3, r4, r5, pc}
 801bea6:	bf00      	nop
 801bea8:	2400b000 	.word	0x2400b000
 801beac:	24000000 	.word	0x24000000
 801beb0:	0801a06f 	.word	0x0801a06f
 801beb4:	24000090 	.word	0x24000090
 801beb8:	2400b004 	.word	0x2400b004
 801bebc:	0801a06d 	.word	0x0801a06d
 801bec0:	24000094 	.word	0x24000094

0801bec4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801bec4:	b538      	push	{r3, r4, r5, lr}
 801bec6:	4c15      	ldr	r4, [pc, #84]	; (801bf1c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801bec8:	4605      	mov	r5, r0
 801beca:	7823      	ldrb	r3, [r4, #0]
 801becc:	f3bf 8f5b 	dmb	ish
 801bed0:	07da      	lsls	r2, r3, #31
 801bed2:	d40b      	bmi.n	801beec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801bed4:	4620      	mov	r0, r4
 801bed6:	f007 fa2e 	bl	8023336 <__cxa_guard_acquire>
 801beda:	b138      	cbz	r0, 801beec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 801bedc:	4620      	mov	r0, r4
 801bede:	f007 fa36 	bl	802334e <__cxa_guard_release>
 801bee2:	4a0f      	ldr	r2, [pc, #60]	; (801bf20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801bee4:	490f      	ldr	r1, [pc, #60]	; (801bf24 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801bee6:	4810      	ldr	r0, [pc, #64]	; (801bf28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801bee8:	f007 fa1e 	bl	8023328 <__aeabi_atexit>
 801beec:	4c0f      	ldr	r4, [pc, #60]	; (801bf2c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801beee:	7823      	ldrb	r3, [r4, #0]
 801bef0:	f3bf 8f5b 	dmb	ish
 801bef4:	07db      	lsls	r3, r3, #31
 801bef6:	d40b      	bmi.n	801bf10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801bef8:	4620      	mov	r0, r4
 801befa:	f007 fa1c 	bl	8023336 <__cxa_guard_acquire>
 801befe:	b138      	cbz	r0, 801bf10 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 801bf00:	4620      	mov	r0, r4
 801bf02:	f007 fa24 	bl	802334e <__cxa_guard_release>
 801bf06:	4a06      	ldr	r2, [pc, #24]	; (801bf20 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801bf08:	4909      	ldr	r1, [pc, #36]	; (801bf30 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801bf0a:	480a      	ldr	r0, [pc, #40]	; (801bf34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801bf0c:	f007 fa0c 	bl	8023328 <__aeabi_atexit>
 801bf10:	4b05      	ldr	r3, [pc, #20]	; (801bf28 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801bf12:	60ab      	str	r3, [r5, #8]
 801bf14:	4b07      	ldr	r3, [pc, #28]	; (801bf34 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 801bf16:	60eb      	str	r3, [r5, #12]
 801bf18:	bd38      	pop	{r3, r4, r5, pc}
 801bf1a:	bf00      	nop
 801bf1c:	2400afd8 	.word	0x2400afd8
 801bf20:	24000000 	.word	0x24000000
 801bf24:	0801a073 	.word	0x0801a073
 801bf28:	24000068 	.word	0x24000068
 801bf2c:	2400afdc 	.word	0x2400afdc
 801bf30:	0801a071 	.word	0x0801a071
 801bf34:	2400006c 	.word	0x2400006c

0801bf38 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801bf38:	b510      	push	{r4, lr}
 801bf3a:	4604      	mov	r4, r0
 801bf3c:	f7ff ff88 	bl	801be50 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801bf40:	4620      	mov	r0, r4
 801bf42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf46:	f7ff bfbd 	b.w	801bec4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801bf4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801bf4c:	b538      	push	{r3, r4, r5, lr}
 801bf4e:	4c15      	ldr	r4, [pc, #84]	; (801bfa4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801bf50:	4605      	mov	r5, r0
 801bf52:	7823      	ldrb	r3, [r4, #0]
 801bf54:	f3bf 8f5b 	dmb	ish
 801bf58:	07da      	lsls	r2, r3, #31
 801bf5a:	d40b      	bmi.n	801bf74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	f007 f9ea 	bl	8023336 <__cxa_guard_acquire>
 801bf62:	b138      	cbz	r0, 801bf74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801bf64:	4620      	mov	r0, r4
 801bf66:	f007 f9f2 	bl	802334e <__cxa_guard_release>
 801bf6a:	4a0f      	ldr	r2, [pc, #60]	; (801bfa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bf6c:	490f      	ldr	r1, [pc, #60]	; (801bfac <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801bf6e:	4810      	ldr	r0, [pc, #64]	; (801bfb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bf70:	f007 f9da 	bl	8023328 <__aeabi_atexit>
 801bf74:	4c0f      	ldr	r4, [pc, #60]	; (801bfb4 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801bf76:	7823      	ldrb	r3, [r4, #0]
 801bf78:	f3bf 8f5b 	dmb	ish
 801bf7c:	07db      	lsls	r3, r3, #31
 801bf7e:	d40b      	bmi.n	801bf98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bf80:	4620      	mov	r0, r4
 801bf82:	f007 f9d8 	bl	8023336 <__cxa_guard_acquire>
 801bf86:	b138      	cbz	r0, 801bf98 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801bf88:	4620      	mov	r0, r4
 801bf8a:	f007 f9e0 	bl	802334e <__cxa_guard_release>
 801bf8e:	4a06      	ldr	r2, [pc, #24]	; (801bfa8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801bf90:	4909      	ldr	r1, [pc, #36]	; (801bfb8 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801bf92:	480a      	ldr	r0, [pc, #40]	; (801bfbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bf94:	f007 f9c8 	bl	8023328 <__aeabi_atexit>
 801bf98:	4b05      	ldr	r3, [pc, #20]	; (801bfb0 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801bf9a:	622b      	str	r3, [r5, #32]
 801bf9c:	4b07      	ldr	r3, [pc, #28]	; (801bfbc <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801bf9e:	626b      	str	r3, [r5, #36]	; 0x24
 801bfa0:	bd38      	pop	{r3, r4, r5, pc}
 801bfa2:	bf00      	nop
 801bfa4:	2400b008 	.word	0x2400b008
 801bfa8:	24000000 	.word	0x24000000
 801bfac:	0801a067 	.word	0x0801a067
 801bfb0:	24000098 	.word	0x24000098
 801bfb4:	2400b00c 	.word	0x2400b00c
 801bfb8:	0801a065 	.word	0x0801a065
 801bfbc:	2400009c 	.word	0x2400009c

0801bfc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801bfc0:	b538      	push	{r3, r4, r5, lr}
 801bfc2:	4c15      	ldr	r4, [pc, #84]	; (801c018 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801bfc4:	4605      	mov	r5, r0
 801bfc6:	7823      	ldrb	r3, [r4, #0]
 801bfc8:	f3bf 8f5b 	dmb	ish
 801bfcc:	07da      	lsls	r2, r3, #31
 801bfce:	d40b      	bmi.n	801bfe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bfd0:	4620      	mov	r0, r4
 801bfd2:	f007 f9b0 	bl	8023336 <__cxa_guard_acquire>
 801bfd6:	b138      	cbz	r0, 801bfe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801bfd8:	4620      	mov	r0, r4
 801bfda:	f007 f9b8 	bl	802334e <__cxa_guard_release>
 801bfde:	4a0f      	ldr	r2, [pc, #60]	; (801c01c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801bfe0:	490f      	ldr	r1, [pc, #60]	; (801c020 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801bfe2:	4810      	ldr	r0, [pc, #64]	; (801c024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801bfe4:	f007 f9a0 	bl	8023328 <__aeabi_atexit>
 801bfe8:	4c0f      	ldr	r4, [pc, #60]	; (801c028 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801bfea:	7823      	ldrb	r3, [r4, #0]
 801bfec:	f3bf 8f5b 	dmb	ish
 801bff0:	07db      	lsls	r3, r3, #31
 801bff2:	d40b      	bmi.n	801c00c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bff4:	4620      	mov	r0, r4
 801bff6:	f007 f99e 	bl	8023336 <__cxa_guard_acquire>
 801bffa:	b138      	cbz	r0, 801c00c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801bffc:	4620      	mov	r0, r4
 801bffe:	f007 f9a6 	bl	802334e <__cxa_guard_release>
 801c002:	4a06      	ldr	r2, [pc, #24]	; (801c01c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801c004:	4909      	ldr	r1, [pc, #36]	; (801c02c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801c006:	480a      	ldr	r0, [pc, #40]	; (801c030 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c008:	f007 f98e 	bl	8023328 <__aeabi_atexit>
 801c00c:	4b05      	ldr	r3, [pc, #20]	; (801c024 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801c00e:	61ab      	str	r3, [r5, #24]
 801c010:	4b07      	ldr	r3, [pc, #28]	; (801c030 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801c012:	61eb      	str	r3, [r5, #28]
 801c014:	bd38      	pop	{r3, r4, r5, pc}
 801c016:	bf00      	nop
 801c018:	2400afe0 	.word	0x2400afe0
 801c01c:	24000000 	.word	0x24000000
 801c020:	0801a06b 	.word	0x0801a06b
 801c024:	24000070 	.word	0x24000070
 801c028:	2400afe4 	.word	0x2400afe4
 801c02c:	0801a069 	.word	0x0801a069
 801c030:	24000074 	.word	0x24000074

0801c034 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801c034:	b510      	push	{r4, lr}
 801c036:	4604      	mov	r4, r0
 801c038:	f7ff ff88 	bl	801bf4c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801c03c:	4620      	mov	r0, r4
 801c03e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c042:	f7ff bfbd 	b.w	801bfc0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801c048 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801c048:	b538      	push	{r3, r4, r5, lr}
 801c04a:	4c15      	ldr	r4, [pc, #84]	; (801c0a0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801c04c:	4605      	mov	r5, r0
 801c04e:	7823      	ldrb	r3, [r4, #0]
 801c050:	f3bf 8f5b 	dmb	ish
 801c054:	07da      	lsls	r2, r3, #31
 801c056:	d40b      	bmi.n	801c070 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c058:	4620      	mov	r0, r4
 801c05a:	f007 f96c 	bl	8023336 <__cxa_guard_acquire>
 801c05e:	b138      	cbz	r0, 801c070 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801c060:	4620      	mov	r0, r4
 801c062:	f007 f974 	bl	802334e <__cxa_guard_release>
 801c066:	4a0f      	ldr	r2, [pc, #60]	; (801c0a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c068:	490f      	ldr	r1, [pc, #60]	; (801c0a8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801c06a:	4810      	ldr	r0, [pc, #64]	; (801c0ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c06c:	f007 f95c 	bl	8023328 <__aeabi_atexit>
 801c070:	4c0f      	ldr	r4, [pc, #60]	; (801c0b0 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801c072:	7823      	ldrb	r3, [r4, #0]
 801c074:	f3bf 8f5b 	dmb	ish
 801c078:	07db      	lsls	r3, r3, #31
 801c07a:	d40b      	bmi.n	801c094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c07c:	4620      	mov	r0, r4
 801c07e:	f007 f95a 	bl	8023336 <__cxa_guard_acquire>
 801c082:	b138      	cbz	r0, 801c094 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801c084:	4620      	mov	r0, r4
 801c086:	f007 f962 	bl	802334e <__cxa_guard_release>
 801c08a:	4a06      	ldr	r2, [pc, #24]	; (801c0a4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801c08c:	4909      	ldr	r1, [pc, #36]	; (801c0b4 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801c08e:	480a      	ldr	r0, [pc, #40]	; (801c0b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c090:	f007 f94a 	bl	8023328 <__aeabi_atexit>
 801c094:	4b05      	ldr	r3, [pc, #20]	; (801c0ac <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801c096:	632b      	str	r3, [r5, #48]	; 0x30
 801c098:	4b07      	ldr	r3, [pc, #28]	; (801c0b8 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801c09a:	636b      	str	r3, [r5, #52]	; 0x34
 801c09c:	bd38      	pop	{r3, r4, r5, pc}
 801c09e:	bf00      	nop
 801c0a0:	2400b018 	.word	0x2400b018
 801c0a4:	24000000 	.word	0x24000000
 801c0a8:	0801a05f 	.word	0x0801a05f
 801c0ac:	240000a8 	.word	0x240000a8
 801c0b0:	2400b01c 	.word	0x2400b01c
 801c0b4:	0801a05d 	.word	0x0801a05d
 801c0b8:	240000ac 	.word	0x240000ac

0801c0bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801c0bc:	b538      	push	{r3, r4, r5, lr}
 801c0be:	4c15      	ldr	r4, [pc, #84]	; (801c114 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801c0c0:	4605      	mov	r5, r0
 801c0c2:	7823      	ldrb	r3, [r4, #0]
 801c0c4:	f3bf 8f5b 	dmb	ish
 801c0c8:	07da      	lsls	r2, r3, #31
 801c0ca:	d40b      	bmi.n	801c0e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f007 f932 	bl	8023336 <__cxa_guard_acquire>
 801c0d2:	b138      	cbz	r0, 801c0e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801c0d4:	4620      	mov	r0, r4
 801c0d6:	f007 f93a 	bl	802334e <__cxa_guard_release>
 801c0da:	4a0f      	ldr	r2, [pc, #60]	; (801c118 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c0dc:	490f      	ldr	r1, [pc, #60]	; (801c11c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801c0de:	4810      	ldr	r0, [pc, #64]	; (801c120 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c0e0:	f007 f922 	bl	8023328 <__aeabi_atexit>
 801c0e4:	4c0f      	ldr	r4, [pc, #60]	; (801c124 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801c0e6:	7823      	ldrb	r3, [r4, #0]
 801c0e8:	f3bf 8f5b 	dmb	ish
 801c0ec:	07db      	lsls	r3, r3, #31
 801c0ee:	d40b      	bmi.n	801c108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c0f0:	4620      	mov	r0, r4
 801c0f2:	f007 f920 	bl	8023336 <__cxa_guard_acquire>
 801c0f6:	b138      	cbz	r0, 801c108 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801c0f8:	4620      	mov	r0, r4
 801c0fa:	f007 f928 	bl	802334e <__cxa_guard_release>
 801c0fe:	4a06      	ldr	r2, [pc, #24]	; (801c118 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801c100:	4909      	ldr	r1, [pc, #36]	; (801c128 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801c102:	480a      	ldr	r0, [pc, #40]	; (801c12c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c104:	f007 f910 	bl	8023328 <__aeabi_atexit>
 801c108:	4b05      	ldr	r3, [pc, #20]	; (801c120 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801c10a:	62ab      	str	r3, [r5, #40]	; 0x28
 801c10c:	4b07      	ldr	r3, [pc, #28]	; (801c12c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801c10e:	62eb      	str	r3, [r5, #44]	; 0x2c
 801c110:	bd38      	pop	{r3, r4, r5, pc}
 801c112:	bf00      	nop
 801c114:	2400afe8 	.word	0x2400afe8
 801c118:	24000000 	.word	0x24000000
 801c11c:	0801a063 	.word	0x0801a063
 801c120:	24000078 	.word	0x24000078
 801c124:	2400afec 	.word	0x2400afec
 801c128:	0801a061 	.word	0x0801a061
 801c12c:	2400007c 	.word	0x2400007c

0801c130 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801c130:	b510      	push	{r4, lr}
 801c132:	4604      	mov	r4, r0
 801c134:	f7ff ff88 	bl	801c048 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801c138:	4620      	mov	r0, r4
 801c13a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c13e:	f7ff bfbd 	b.w	801c0bc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801c144 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801c144:	b538      	push	{r3, r4, r5, lr}
 801c146:	4c15      	ldr	r4, [pc, #84]	; (801c19c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801c148:	4605      	mov	r5, r0
 801c14a:	7823      	ldrb	r3, [r4, #0]
 801c14c:	f3bf 8f5b 	dmb	ish
 801c150:	07da      	lsls	r2, r3, #31
 801c152:	d40b      	bmi.n	801c16c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c154:	4620      	mov	r0, r4
 801c156:	f007 f8ee 	bl	8023336 <__cxa_guard_acquire>
 801c15a:	b138      	cbz	r0, 801c16c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 801c15c:	4620      	mov	r0, r4
 801c15e:	f007 f8f6 	bl	802334e <__cxa_guard_release>
 801c162:	4a0f      	ldr	r2, [pc, #60]	; (801c1a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c164:	490f      	ldr	r1, [pc, #60]	; (801c1a4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801c166:	4810      	ldr	r0, [pc, #64]	; (801c1a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c168:	f007 f8de 	bl	8023328 <__aeabi_atexit>
 801c16c:	4c0f      	ldr	r4, [pc, #60]	; (801c1ac <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801c16e:	7823      	ldrb	r3, [r4, #0]
 801c170:	f3bf 8f5b 	dmb	ish
 801c174:	07db      	lsls	r3, r3, #31
 801c176:	d40b      	bmi.n	801c190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c178:	4620      	mov	r0, r4
 801c17a:	f007 f8dc 	bl	8023336 <__cxa_guard_acquire>
 801c17e:	b138      	cbz	r0, 801c190 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 801c180:	4620      	mov	r0, r4
 801c182:	f007 f8e4 	bl	802334e <__cxa_guard_release>
 801c186:	4a06      	ldr	r2, [pc, #24]	; (801c1a0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801c188:	4909      	ldr	r1, [pc, #36]	; (801c1b0 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801c18a:	480a      	ldr	r0, [pc, #40]	; (801c1b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c18c:	f007 f8cc 	bl	8023328 <__aeabi_atexit>
 801c190:	4b05      	ldr	r3, [pc, #20]	; (801c1a8 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801c192:	652b      	str	r3, [r5, #80]	; 0x50
 801c194:	4b07      	ldr	r3, [pc, #28]	; (801c1b4 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 801c196:	656b      	str	r3, [r5, #84]	; 0x54
 801c198:	bd38      	pop	{r3, r4, r5, pc}
 801c19a:	bf00      	nop
 801c19c:	2400b020 	.word	0x2400b020
 801c1a0:	24000000 	.word	0x24000000
 801c1a4:	0801a04f 	.word	0x0801a04f
 801c1a8:	240000b0 	.word	0x240000b0
 801c1ac:	2400b024 	.word	0x2400b024
 801c1b0:	0801a04d 	.word	0x0801a04d
 801c1b4:	240000b4 	.word	0x240000b4

0801c1b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801c1b8:	b538      	push	{r3, r4, r5, lr}
 801c1ba:	4c15      	ldr	r4, [pc, #84]	; (801c210 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801c1bc:	4605      	mov	r5, r0
 801c1be:	7823      	ldrb	r3, [r4, #0]
 801c1c0:	f3bf 8f5b 	dmb	ish
 801c1c4:	07da      	lsls	r2, r3, #31
 801c1c6:	d40b      	bmi.n	801c1e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c1c8:	4620      	mov	r0, r4
 801c1ca:	f007 f8b4 	bl	8023336 <__cxa_guard_acquire>
 801c1ce:	b138      	cbz	r0, 801c1e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 801c1d0:	4620      	mov	r0, r4
 801c1d2:	f007 f8bc 	bl	802334e <__cxa_guard_release>
 801c1d6:	4a0f      	ldr	r2, [pc, #60]	; (801c214 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c1d8:	490f      	ldr	r1, [pc, #60]	; (801c218 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801c1da:	4810      	ldr	r0, [pc, #64]	; (801c21c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c1dc:	f007 f8a4 	bl	8023328 <__aeabi_atexit>
 801c1e0:	4c0f      	ldr	r4, [pc, #60]	; (801c220 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801c1e2:	7823      	ldrb	r3, [r4, #0]
 801c1e4:	f3bf 8f5b 	dmb	ish
 801c1e8:	07db      	lsls	r3, r3, #31
 801c1ea:	d40b      	bmi.n	801c204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f007 f8a2 	bl	8023336 <__cxa_guard_acquire>
 801c1f2:	b138      	cbz	r0, 801c204 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 801c1f4:	4620      	mov	r0, r4
 801c1f6:	f007 f8aa 	bl	802334e <__cxa_guard_release>
 801c1fa:	4a06      	ldr	r2, [pc, #24]	; (801c214 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801c1fc:	4909      	ldr	r1, [pc, #36]	; (801c224 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801c1fe:	480a      	ldr	r0, [pc, #40]	; (801c228 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c200:	f007 f892 	bl	8023328 <__aeabi_atexit>
 801c204:	4b05      	ldr	r3, [pc, #20]	; (801c21c <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801c206:	64ab      	str	r3, [r5, #72]	; 0x48
 801c208:	4b07      	ldr	r3, [pc, #28]	; (801c228 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 801c20a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801c20c:	bd38      	pop	{r3, r4, r5, pc}
 801c20e:	bf00      	nop
 801c210:	2400b028 	.word	0x2400b028
 801c214:	24000000 	.word	0x24000000
 801c218:	0801a053 	.word	0x0801a053
 801c21c:	240000b8 	.word	0x240000b8
 801c220:	2400b02c 	.word	0x2400b02c
 801c224:	0801a051 	.word	0x0801a051
 801c228:	240000bc 	.word	0x240000bc

0801c22c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801c22c:	b538      	push	{r3, r4, r5, lr}
 801c22e:	4c15      	ldr	r4, [pc, #84]	; (801c284 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801c230:	4605      	mov	r5, r0
 801c232:	7823      	ldrb	r3, [r4, #0]
 801c234:	f3bf 8f5b 	dmb	ish
 801c238:	07da      	lsls	r2, r3, #31
 801c23a:	d40b      	bmi.n	801c254 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c23c:	4620      	mov	r0, r4
 801c23e:	f007 f87a 	bl	8023336 <__cxa_guard_acquire>
 801c242:	b138      	cbz	r0, 801c254 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 801c244:	4620      	mov	r0, r4
 801c246:	f007 f882 	bl	802334e <__cxa_guard_release>
 801c24a:	4a0f      	ldr	r2, [pc, #60]	; (801c288 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c24c:	490f      	ldr	r1, [pc, #60]	; (801c28c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801c24e:	4810      	ldr	r0, [pc, #64]	; (801c290 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c250:	f007 f86a 	bl	8023328 <__aeabi_atexit>
 801c254:	4c0f      	ldr	r4, [pc, #60]	; (801c294 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801c256:	7823      	ldrb	r3, [r4, #0]
 801c258:	f3bf 8f5b 	dmb	ish
 801c25c:	07db      	lsls	r3, r3, #31
 801c25e:	d40b      	bmi.n	801c278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c260:	4620      	mov	r0, r4
 801c262:	f007 f868 	bl	8023336 <__cxa_guard_acquire>
 801c266:	b138      	cbz	r0, 801c278 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 801c268:	4620      	mov	r0, r4
 801c26a:	f007 f870 	bl	802334e <__cxa_guard_release>
 801c26e:	4a06      	ldr	r2, [pc, #24]	; (801c288 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801c270:	4909      	ldr	r1, [pc, #36]	; (801c298 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801c272:	480a      	ldr	r0, [pc, #40]	; (801c29c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c274:	f007 f858 	bl	8023328 <__aeabi_atexit>
 801c278:	4b05      	ldr	r3, [pc, #20]	; (801c290 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801c27a:	642b      	str	r3, [r5, #64]	; 0x40
 801c27c:	4b07      	ldr	r3, [pc, #28]	; (801c29c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 801c27e:	646b      	str	r3, [r5, #68]	; 0x44
 801c280:	bd38      	pop	{r3, r4, r5, pc}
 801c282:	bf00      	nop
 801c284:	2400aff0 	.word	0x2400aff0
 801c288:	24000000 	.word	0x24000000
 801c28c:	0801a057 	.word	0x0801a057
 801c290:	24000080 	.word	0x24000080
 801c294:	2400aff4 	.word	0x2400aff4
 801c298:	0801a055 	.word	0x0801a055
 801c29c:	24000084 	.word	0x24000084

0801c2a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801c2a0:	b538      	push	{r3, r4, r5, lr}
 801c2a2:	4c15      	ldr	r4, [pc, #84]	; (801c2f8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801c2a4:	4605      	mov	r5, r0
 801c2a6:	7823      	ldrb	r3, [r4, #0]
 801c2a8:	f3bf 8f5b 	dmb	ish
 801c2ac:	07da      	lsls	r2, r3, #31
 801c2ae:	d40b      	bmi.n	801c2c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c2b0:	4620      	mov	r0, r4
 801c2b2:	f007 f840 	bl	8023336 <__cxa_guard_acquire>
 801c2b6:	b138      	cbz	r0, 801c2c8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 801c2b8:	4620      	mov	r0, r4
 801c2ba:	f007 f848 	bl	802334e <__cxa_guard_release>
 801c2be:	4a0f      	ldr	r2, [pc, #60]	; (801c2fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c2c0:	490f      	ldr	r1, [pc, #60]	; (801c300 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801c2c2:	4810      	ldr	r0, [pc, #64]	; (801c304 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c2c4:	f007 f830 	bl	8023328 <__aeabi_atexit>
 801c2c8:	4c0f      	ldr	r4, [pc, #60]	; (801c308 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801c2ca:	7823      	ldrb	r3, [r4, #0]
 801c2cc:	f3bf 8f5b 	dmb	ish
 801c2d0:	07db      	lsls	r3, r3, #31
 801c2d2:	d40b      	bmi.n	801c2ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c2d4:	4620      	mov	r0, r4
 801c2d6:	f007 f82e 	bl	8023336 <__cxa_guard_acquire>
 801c2da:	b138      	cbz	r0, 801c2ec <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 801c2dc:	4620      	mov	r0, r4
 801c2de:	f007 f836 	bl	802334e <__cxa_guard_release>
 801c2e2:	4a06      	ldr	r2, [pc, #24]	; (801c2fc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801c2e4:	4909      	ldr	r1, [pc, #36]	; (801c30c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801c2e6:	480a      	ldr	r0, [pc, #40]	; (801c310 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c2e8:	f007 f81e 	bl	8023328 <__aeabi_atexit>
 801c2ec:	4b05      	ldr	r3, [pc, #20]	; (801c304 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801c2ee:	63ab      	str	r3, [r5, #56]	; 0x38
 801c2f0:	4b07      	ldr	r3, [pc, #28]	; (801c310 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 801c2f2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801c2f4:	bd38      	pop	{r3, r4, r5, pc}
 801c2f6:	bf00      	nop
 801c2f8:	2400b010 	.word	0x2400b010
 801c2fc:	24000000 	.word	0x24000000
 801c300:	0801a05b 	.word	0x0801a05b
 801c304:	240000a0 	.word	0x240000a0
 801c308:	2400b014 	.word	0x2400b014
 801c30c:	0801a059 	.word	0x0801a059
 801c310:	240000a4 	.word	0x240000a4

0801c314 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801c314:	b510      	push	{r4, lr}
 801c316:	4604      	mov	r4, r0
 801c318:	f7ff ff14 	bl	801c144 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801c31c:	4620      	mov	r0, r4
 801c31e:	f7ff ff85 	bl	801c22c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801c322:	4620      	mov	r0, r4
 801c324:	f7ff ff48 	bl	801c1b8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801c328:	4620      	mov	r0, r4
 801c32a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c32e:	f7ff bfb7 	b.w	801c2a0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801c334 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801c334:	b538      	push	{r3, r4, r5, lr}
 801c336:	4c15      	ldr	r4, [pc, #84]	; (801c38c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801c338:	4605      	mov	r5, r0
 801c33a:	7823      	ldrb	r3, [r4, #0]
 801c33c:	f3bf 8f5b 	dmb	ish
 801c340:	07da      	lsls	r2, r3, #31
 801c342:	d40b      	bmi.n	801c35c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c344:	4620      	mov	r0, r4
 801c346:	f006 fff6 	bl	8023336 <__cxa_guard_acquire>
 801c34a:	b138      	cbz	r0, 801c35c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801c34c:	4620      	mov	r0, r4
 801c34e:	f006 fffe 	bl	802334e <__cxa_guard_release>
 801c352:	4a0f      	ldr	r2, [pc, #60]	; (801c390 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c354:	490f      	ldr	r1, [pc, #60]	; (801c394 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801c356:	4810      	ldr	r0, [pc, #64]	; (801c398 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c358:	f006 ffe6 	bl	8023328 <__aeabi_atexit>
 801c35c:	4c0f      	ldr	r4, [pc, #60]	; (801c39c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801c35e:	7823      	ldrb	r3, [r4, #0]
 801c360:	f3bf 8f5b 	dmb	ish
 801c364:	07db      	lsls	r3, r3, #31
 801c366:	d40b      	bmi.n	801c380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c368:	4620      	mov	r0, r4
 801c36a:	f006 ffe4 	bl	8023336 <__cxa_guard_acquire>
 801c36e:	b138      	cbz	r0, 801c380 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801c370:	4620      	mov	r0, r4
 801c372:	f006 ffec 	bl	802334e <__cxa_guard_release>
 801c376:	4a06      	ldr	r2, [pc, #24]	; (801c390 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801c378:	4909      	ldr	r1, [pc, #36]	; (801c3a0 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801c37a:	480a      	ldr	r0, [pc, #40]	; (801c3a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c37c:	f006 ffd4 	bl	8023328 <__aeabi_atexit>
 801c380:	4b05      	ldr	r3, [pc, #20]	; (801c398 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801c382:	662b      	str	r3, [r5, #96]	; 0x60
 801c384:	4b07      	ldr	r3, [pc, #28]	; (801c3a4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801c386:	666b      	str	r3, [r5, #100]	; 0x64
 801c388:	bd38      	pop	{r3, r4, r5, pc}
 801c38a:	bf00      	nop
 801c38c:	2400aff8 	.word	0x2400aff8
 801c390:	24000000 	.word	0x24000000
 801c394:	0801a047 	.word	0x0801a047
 801c398:	24000088 	.word	0x24000088
 801c39c:	2400affc 	.word	0x2400affc
 801c3a0:	0801a045 	.word	0x0801a045
 801c3a4:	2400008c 	.word	0x2400008c

0801c3a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801c3a8:	b538      	push	{r3, r4, r5, lr}
 801c3aa:	4c15      	ldr	r4, [pc, #84]	; (801c400 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801c3ac:	4605      	mov	r5, r0
 801c3ae:	7823      	ldrb	r3, [r4, #0]
 801c3b0:	f3bf 8f5b 	dmb	ish
 801c3b4:	07da      	lsls	r2, r3, #31
 801c3b6:	d40b      	bmi.n	801c3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f006 ffbc 	bl	8023336 <__cxa_guard_acquire>
 801c3be:	b138      	cbz	r0, 801c3d0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801c3c0:	4620      	mov	r0, r4
 801c3c2:	f006 ffc4 	bl	802334e <__cxa_guard_release>
 801c3c6:	4a0f      	ldr	r2, [pc, #60]	; (801c404 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c3c8:	490f      	ldr	r1, [pc, #60]	; (801c408 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801c3ca:	4810      	ldr	r0, [pc, #64]	; (801c40c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c3cc:	f006 ffac 	bl	8023328 <__aeabi_atexit>
 801c3d0:	4c0f      	ldr	r4, [pc, #60]	; (801c410 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801c3d2:	7823      	ldrb	r3, [r4, #0]
 801c3d4:	f3bf 8f5b 	dmb	ish
 801c3d8:	07db      	lsls	r3, r3, #31
 801c3da:	d40b      	bmi.n	801c3f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c3dc:	4620      	mov	r0, r4
 801c3de:	f006 ffaa 	bl	8023336 <__cxa_guard_acquire>
 801c3e2:	b138      	cbz	r0, 801c3f4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801c3e4:	4620      	mov	r0, r4
 801c3e6:	f006 ffb2 	bl	802334e <__cxa_guard_release>
 801c3ea:	4a06      	ldr	r2, [pc, #24]	; (801c404 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801c3ec:	4909      	ldr	r1, [pc, #36]	; (801c414 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801c3ee:	480a      	ldr	r0, [pc, #40]	; (801c418 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c3f0:	f006 ff9a 	bl	8023328 <__aeabi_atexit>
 801c3f4:	4b05      	ldr	r3, [pc, #20]	; (801c40c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801c3f6:	65ab      	str	r3, [r5, #88]	; 0x58
 801c3f8:	4b07      	ldr	r3, [pc, #28]	; (801c418 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801c3fa:	65eb      	str	r3, [r5, #92]	; 0x5c
 801c3fc:	bd38      	pop	{r3, r4, r5, pc}
 801c3fe:	bf00      	nop
 801c400:	2400afd0 	.word	0x2400afd0
 801c404:	24000000 	.word	0x24000000
 801c408:	0801a04b 	.word	0x0801a04b
 801c40c:	24000060 	.word	0x24000060
 801c410:	2400afd4 	.word	0x2400afd4
 801c414:	0801a049 	.word	0x0801a049
 801c418:	24000064 	.word	0x24000064

0801c41c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801c41c:	b510      	push	{r4, lr}
 801c41e:	4604      	mov	r4, r0
 801c420:	f7ff ff88 	bl	801c334 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801c424:	4620      	mov	r0, r4
 801c426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c42a:	f7ff bfbd 	b.w	801c3a8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801c430 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801c430:	b538      	push	{r3, r4, r5, lr}
 801c432:	4c15      	ldr	r4, [pc, #84]	; (801c488 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801c434:	4605      	mov	r5, r0
 801c436:	7823      	ldrb	r3, [r4, #0]
 801c438:	f3bf 8f5b 	dmb	ish
 801c43c:	07da      	lsls	r2, r3, #31
 801c43e:	d40b      	bmi.n	801c458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c440:	4620      	mov	r0, r4
 801c442:	f006 ff78 	bl	8023336 <__cxa_guard_acquire>
 801c446:	b138      	cbz	r0, 801c458 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801c448:	4620      	mov	r0, r4
 801c44a:	f006 ff80 	bl	802334e <__cxa_guard_release>
 801c44e:	4a0f      	ldr	r2, [pc, #60]	; (801c48c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c450:	490f      	ldr	r1, [pc, #60]	; (801c490 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801c452:	4810      	ldr	r0, [pc, #64]	; (801c494 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c454:	f006 ff68 	bl	8023328 <__aeabi_atexit>
 801c458:	4c0f      	ldr	r4, [pc, #60]	; (801c498 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801c45a:	7823      	ldrb	r3, [r4, #0]
 801c45c:	f3bf 8f5b 	dmb	ish
 801c460:	07db      	lsls	r3, r3, #31
 801c462:	d40b      	bmi.n	801c47c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c464:	4620      	mov	r0, r4
 801c466:	f006 ff66 	bl	8023336 <__cxa_guard_acquire>
 801c46a:	b138      	cbz	r0, 801c47c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801c46c:	4620      	mov	r0, r4
 801c46e:	f006 ff6e 	bl	802334e <__cxa_guard_release>
 801c472:	4a06      	ldr	r2, [pc, #24]	; (801c48c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801c474:	4909      	ldr	r1, [pc, #36]	; (801c49c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801c476:	480a      	ldr	r0, [pc, #40]	; (801c4a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c478:	f006 ff56 	bl	8023328 <__aeabi_atexit>
 801c47c:	4b05      	ldr	r3, [pc, #20]	; (801c494 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801c47e:	672b      	str	r3, [r5, #112]	; 0x70
 801c480:	4b07      	ldr	r3, [pc, #28]	; (801c4a0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801c482:	676b      	str	r3, [r5, #116]	; 0x74
 801c484:	bd38      	pop	{r3, r4, r5, pc}
 801c486:	bf00      	nop
 801c488:	2400afc8 	.word	0x2400afc8
 801c48c:	24000000 	.word	0x24000000
 801c490:	0801a03f 	.word	0x0801a03f
 801c494:	24000058 	.word	0x24000058
 801c498:	2400afcc 	.word	0x2400afcc
 801c49c:	0801a03d 	.word	0x0801a03d
 801c4a0:	2400005c 	.word	0x2400005c

0801c4a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801c4a4:	b538      	push	{r3, r4, r5, lr}
 801c4a6:	4c15      	ldr	r4, [pc, #84]	; (801c4fc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801c4a8:	4605      	mov	r5, r0
 801c4aa:	7823      	ldrb	r3, [r4, #0]
 801c4ac:	f3bf 8f5b 	dmb	ish
 801c4b0:	07da      	lsls	r2, r3, #31
 801c4b2:	d40b      	bmi.n	801c4cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c4b4:	4620      	mov	r0, r4
 801c4b6:	f006 ff3e 	bl	8023336 <__cxa_guard_acquire>
 801c4ba:	b138      	cbz	r0, 801c4cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f006 ff46 	bl	802334e <__cxa_guard_release>
 801c4c2:	4a0f      	ldr	r2, [pc, #60]	; (801c500 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c4c4:	490f      	ldr	r1, [pc, #60]	; (801c504 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801c4c6:	4810      	ldr	r0, [pc, #64]	; (801c508 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c4c8:	f006 ff2e 	bl	8023328 <__aeabi_atexit>
 801c4cc:	4c0f      	ldr	r4, [pc, #60]	; (801c50c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801c4ce:	7823      	ldrb	r3, [r4, #0]
 801c4d0:	f3bf 8f5b 	dmb	ish
 801c4d4:	07db      	lsls	r3, r3, #31
 801c4d6:	d40b      	bmi.n	801c4f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c4d8:	4620      	mov	r0, r4
 801c4da:	f006 ff2c 	bl	8023336 <__cxa_guard_acquire>
 801c4de:	b138      	cbz	r0, 801c4f0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801c4e0:	4620      	mov	r0, r4
 801c4e2:	f006 ff34 	bl	802334e <__cxa_guard_release>
 801c4e6:	4a06      	ldr	r2, [pc, #24]	; (801c500 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801c4e8:	4909      	ldr	r1, [pc, #36]	; (801c510 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801c4ea:	480a      	ldr	r0, [pc, #40]	; (801c514 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c4ec:	f006 ff1c 	bl	8023328 <__aeabi_atexit>
 801c4f0:	4b05      	ldr	r3, [pc, #20]	; (801c508 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801c4f2:	66ab      	str	r3, [r5, #104]	; 0x68
 801c4f4:	4b07      	ldr	r3, [pc, #28]	; (801c514 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801c4f6:	66eb      	str	r3, [r5, #108]	; 0x6c
 801c4f8:	bd38      	pop	{r3, r4, r5, pc}
 801c4fa:	bf00      	nop
 801c4fc:	2400afc0 	.word	0x2400afc0
 801c500:	24000000 	.word	0x24000000
 801c504:	0801a043 	.word	0x0801a043
 801c508:	24000050 	.word	0x24000050
 801c50c:	2400afc4 	.word	0x2400afc4
 801c510:	0801a041 	.word	0x0801a041
 801c514:	24000054 	.word	0x24000054

0801c518 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801c518:	b510      	push	{r4, lr}
 801c51a:	4604      	mov	r4, r0
 801c51c:	f7ff ff88 	bl	801c430 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801c520:	4620      	mov	r0, r4
 801c522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c526:	f7ff bfbd 	b.w	801c4a4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801c52a <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801c52a:	b510      	push	{r4, lr}
 801c52c:	4604      	mov	r4, r0
 801c52e:	f7ff fff3 	bl	801c518 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801c532:	4620      	mov	r0, r4
 801c534:	f7ff ff72 	bl	801c41c <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801c538:	4620      	mov	r0, r4
 801c53a:	f7ff fdf9 	bl	801c130 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801c53e:	4620      	mov	r0, r4
 801c540:	f7ff fcfa 	bl	801bf38 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801c544:	4620      	mov	r0, r4
 801c546:	f7ff fd75 	bl	801c034 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801c54a:	4620      	mov	r0, r4
 801c54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c550:	f7ff bee0 	b.w	801c314 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801c554 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801c554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c558:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801c55c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801c560:	2d00      	cmp	r5, #0
 801c562:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801c566:	fb05 4c0e 	mla	ip, r5, lr, r4
 801c56a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801c56e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801c572:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801c576:	eb02 0a0c 	add.w	sl, r2, ip
 801c57a:	8808      	ldrh	r0, [r1, #0]
 801c57c:	f2c0 80b0 	blt.w	801c6e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c580:	45ab      	cmp	fp, r5
 801c582:	f340 80ad 	ble.w	801c6e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801c586:	2c00      	cmp	r4, #0
 801c588:	f2c0 80a8 	blt.w	801c6dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c58c:	45a6      	cmp	lr, r4
 801c58e:	f340 80a5 	ble.w	801c6dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801c592:	f812 200c 	ldrb.w	r2, [r2, ip]
 801c596:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801c59a:	1c62      	adds	r2, r4, #1
 801c59c:	f100 80a3 	bmi.w	801c6e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c5a0:	4596      	cmp	lr, r2
 801c5a2:	f340 80a0 	ble.w	801c6e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c5a6:	f1b9 0f00 	cmp.w	r9, #0
 801c5aa:	f000 809c 	beq.w	801c6e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801c5ae:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801c5b2:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801c5b6:	3501      	adds	r5, #1
 801c5b8:	f100 8099 	bmi.w	801c6ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c5bc:	45ab      	cmp	fp, r5
 801c5be:	f340 8096 	ble.w	801c6ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c5c2:	2f00      	cmp	r7, #0
 801c5c4:	f000 8093 	beq.w	801c6ee <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801c5c8:	2c00      	cmp	r4, #0
 801c5ca:	f2c0 808e 	blt.w	801c6ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c5ce:	45a6      	cmp	lr, r4
 801c5d0:	f340 808b 	ble.w	801c6ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801c5d4:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801c5d8:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801c5dc:	3401      	adds	r4, #1
 801c5de:	f100 8089 	bmi.w	801c6f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c5e2:	45a6      	cmp	lr, r4
 801c5e4:	f340 8086 	ble.w	801c6f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c5e8:	f1b9 0f00 	cmp.w	r9, #0
 801c5ec:	f000 8082 	beq.w	801c6f4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801c5f0:	44d6      	add	lr, sl
 801c5f2:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c5f6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801c5fa:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801c5fe:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801c602:	fb19 fe07 	smulbb	lr, r9, r7
 801c606:	f1c7 0210 	rsb	r2, r7, #16
 801c60a:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c60e:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801c612:	eba2 0209 	sub.w	r2, r2, r9
 801c616:	ea44 0808 	orr.w	r8, r4, r8
 801c61a:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801c61e:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801c622:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801c626:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801c62a:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801c62e:	ea44 0c0c 	orr.w	ip, r4, ip
 801c632:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801c636:	fb04 f40c 	mul.w	r4, r4, ip
 801c63a:	fb02 4808 	mla	r8, r2, r8, r4
 801c63e:	041a      	lsls	r2, r3, #16
 801c640:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c644:	b2b4      	uxth	r4, r6
 801c646:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c64a:	43f6      	mvns	r6, r6
 801c64c:	4313      	orrs	r3, r2
 801c64e:	042a      	lsls	r2, r5, #16
 801c650:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801c654:	b2f6      	uxtb	r6, r6
 801c656:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801c65a:	fb0e 8303 	mla	r3, lr, r3, r8
 801c65e:	432a      	orrs	r2, r5
 801c660:	fb07 3202 	mla	r2, r7, r2, r3
 801c664:	10c7      	asrs	r7, r0, #3
 801c666:	0d53      	lsrs	r3, r2, #21
 801c668:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801c66c:	0952      	lsrs	r2, r2, #5
 801c66e:	fb17 f706 	smulbb	r7, r7, r6
 801c672:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c676:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c67a:	431a      	orrs	r2, r3
 801c67c:	b293      	uxth	r3, r2
 801c67e:	1202      	asrs	r2, r0, #8
 801c680:	121d      	asrs	r5, r3, #8
 801c682:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801c686:	00c0      	lsls	r0, r0, #3
 801c688:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c68c:	fb12 f206 	smulbb	r2, r2, r6
 801c690:	b2c0      	uxtb	r0, r0
 801c692:	fb05 2504 	mla	r5, r5, r4, r2
 801c696:	10da      	asrs	r2, r3, #3
 801c698:	fb10 f006 	smulbb	r0, r0, r6
 801c69c:	00db      	lsls	r3, r3, #3
 801c69e:	b2ad      	uxth	r5, r5
 801c6a0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c6a4:	b2db      	uxtb	r3, r3
 801c6a6:	fb02 7204 	mla	r2, r2, r4, r7
 801c6aa:	fb03 0004 	mla	r0, r3, r4, r0
 801c6ae:	1c6b      	adds	r3, r5, #1
 801c6b0:	b292      	uxth	r2, r2
 801c6b2:	b280      	uxth	r0, r0
 801c6b4:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c6b8:	1c43      	adds	r3, r0, #1
 801c6ba:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c6be:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801c6c2:	1c50      	adds	r0, r2, #1
 801c6c4:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801c6c8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c6cc:	0952      	lsrs	r2, r2, #5
 801c6ce:	432b      	orrs	r3, r5
 801c6d0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c6d4:	4313      	orrs	r3, r2
 801c6d6:	800b      	strh	r3, [r1, #0]
 801c6d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6dc:	4680      	mov	r8, r0
 801c6de:	e75c      	b.n	801c59a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801c6e0:	4684      	mov	ip, r0
 801c6e2:	4680      	mov	r8, r0
 801c6e4:	e767      	b.n	801c5b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c6e6:	4684      	mov	ip, r0
 801c6e8:	e765      	b.n	801c5b6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801c6ea:	4605      	mov	r5, r0
 801c6ec:	e776      	b.n	801c5dc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801c6ee:	4603      	mov	r3, r0
 801c6f0:	4605      	mov	r5, r0
 801c6f2:	e782      	b.n	801c5fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801c6f4:	4603      	mov	r3, r0
 801c6f6:	e780      	b.n	801c5fa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801c6f8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c6fc:	b099      	sub	sp, #100	; 0x64
 801c6fe:	9215      	str	r2, [sp, #84]	; 0x54
 801c700:	9309      	str	r3, [sp, #36]	; 0x24
 801c702:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801c704:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801c708:	9016      	str	r0, [sp, #88]	; 0x58
 801c70a:	930d      	str	r3, [sp, #52]	; 0x34
 801c70c:	6850      	ldr	r0, [r2, #4]
 801c70e:	910c      	str	r1, [sp, #48]	; 0x30
 801c710:	6812      	ldr	r2, [r2, #0]
 801c712:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801c716:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801c71a:	fb00 1303 	mla	r3, r0, r3, r1
 801c71e:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801c722:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	930b      	str	r3, [sp, #44]	; 0x2c
 801c728:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c72a:	685e      	ldr	r6, [r3, #4]
 801c72c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c72e:	3604      	adds	r6, #4
 801c730:	43db      	mvns	r3, r3
 801c732:	b2db      	uxtb	r3, r3
 801c734:	930a      	str	r3, [sp, #40]	; 0x28
 801c736:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c738:	2b00      	cmp	r3, #0
 801c73a:	dc03      	bgt.n	801c744 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c73c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c73e:	2b00      	cmp	r3, #0
 801c740:	f340 8225 	ble.w	801cb8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c744:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c746:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c74a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c74e:	1e48      	subs	r0, r1, #1
 801c750:	1e57      	subs	r7, r2, #1
 801c752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c754:	2b00      	cmp	r3, #0
 801c756:	f340 80e3 	ble.w	801c920 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801c75a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801c75e:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c762:	d406      	bmi.n	801c772 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c764:	4584      	cmp	ip, r0
 801c766:	da04      	bge.n	801c772 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c768:	2b00      	cmp	r3, #0
 801c76a:	db02      	blt.n	801c772 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c76c:	42bb      	cmp	r3, r7
 801c76e:	f2c0 80d8 	blt.w	801c922 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801c772:	f11c 0c01 	adds.w	ip, ip, #1
 801c776:	f100 80c9 	bmi.w	801c90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c77a:	4561      	cmp	r1, ip
 801c77c:	f2c0 80c6 	blt.w	801c90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c780:	3301      	adds	r3, #1
 801c782:	f100 80c3 	bmi.w	801c90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c786:	429a      	cmp	r2, r3
 801c788:	f2c0 80c0 	blt.w	801c90c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801c78c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801c790:	4647      	mov	r7, r8
 801c792:	f1bb 0f00 	cmp.w	fp, #0
 801c796:	f340 80e3 	ble.w	801c960 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801c79a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801c79c:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c7a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801c7a2:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801c7a6:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801c7aa:	ea5f 422a 	movs.w	r2, sl, asr #16
 801c7ae:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c7b2:	689b      	ldr	r3, [r3, #8]
 801c7b4:	f100 8121 	bmi.w	801c9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c7b8:	f103 39ff 	add.w	r9, r3, #4294967295
 801c7bc:	454a      	cmp	r2, r9
 801c7be:	f280 811c 	bge.w	801c9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c7c2:	f1bc 0f00 	cmp.w	ip, #0
 801c7c6:	f2c0 8118 	blt.w	801c9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c7ca:	f10e 39ff 	add.w	r9, lr, #4294967295
 801c7ce:	45cc      	cmp	ip, r9
 801c7d0:	f280 8113 	bge.w	801c9fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801c7d4:	b21b      	sxth	r3, r3
 801c7d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c7d8:	fb0c 2203 	mla	r2, ip, r3, r2
 801c7dc:	eb04 0902 	add.w	r9, r4, r2
 801c7e0:	5ca2      	ldrb	r2, [r4, r2]
 801c7e2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801c7e6:	2800      	cmp	r0, #0
 801c7e8:	f000 80fe 	beq.w	801c9e8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801c7ec:	f899 2001 	ldrb.w	r2, [r9, #1]
 801c7f0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801c7f4:	9211      	str	r2, [sp, #68]	; 0x44
 801c7f6:	b151      	cbz	r1, 801c80e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c7f8:	eb09 0203 	add.w	r2, r9, r3
 801c7fc:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c800:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c804:	930f      	str	r3, [sp, #60]	; 0x3c
 801c806:	7853      	ldrb	r3, [r2, #1]
 801c808:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c80c:	9312      	str	r3, [sp, #72]	; 0x48
 801c80e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801c810:	fb10 f201 	smulbb	r2, r0, r1
 801c814:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c816:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801c81a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c81e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801c822:	10d2      	asrs	r2, r2, #3
 801c824:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c828:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801c82c:	ea4c 0c03 	orr.w	ip, ip, r3
 801c830:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c832:	041b      	lsls	r3, r3, #16
 801c834:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801c838:	4323      	orrs	r3, r4
 801c83a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c83c:	4353      	muls	r3, r2
 801c83e:	fb09 330c 	mla	r3, r9, ip, r3
 801c842:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801c846:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801c84a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801c84e:	ea4c 0e0e 	orr.w	lr, ip, lr
 801c852:	f1c1 0c10 	rsb	ip, r1, #16
 801c856:	ebac 0c00 	sub.w	ip, ip, r0
 801c85a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801c85e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801c862:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801c866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801c868:	0418      	lsls	r0, r3, #16
 801c86a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801c86e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801c872:	4318      	orrs	r0, r3
 801c874:	fb02 c200 	mla	r2, r2, r0, ip
 801c878:	8838      	ldrh	r0, [r7, #0]
 801c87a:	0d53      	lsrs	r3, r2, #21
 801c87c:	0952      	lsrs	r2, r2, #5
 801c87e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801c882:	1201      	asrs	r1, r0, #8
 801c884:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801c888:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801c88c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c890:	00c0      	lsls	r0, r0, #3
 801c892:	431a      	orrs	r2, r3
 801c894:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801c898:	fb11 f104 	smulbb	r1, r1, r4
 801c89c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801c8a0:	b292      	uxth	r2, r2
 801c8a2:	fb1e fe04 	smulbb	lr, lr, r4
 801c8a6:	b2c0      	uxtb	r0, r0
 801c8a8:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801c8ac:	fb10 f004 	smulbb	r0, r0, r4
 801c8b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801c8b4:	fb0c 1c03 	mla	ip, ip, r3, r1
 801c8b8:	10d1      	asrs	r1, r2, #3
 801c8ba:	00d2      	lsls	r2, r2, #3
 801c8bc:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801c8c0:	fa1f fc8c 	uxth.w	ip, ip
 801c8c4:	b2d2      	uxtb	r2, r2
 801c8c6:	fb01 e103 	mla	r1, r1, r3, lr
 801c8ca:	fb02 0303 	mla	r3, r2, r3, r0
 801c8ce:	b289      	uxth	r1, r1
 801c8d0:	b29a      	uxth	r2, r3
 801c8d2:	f10c 0301 	add.w	r3, ip, #1
 801c8d6:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c8da:	1c53      	adds	r3, r2, #1
 801c8dc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c8e0:	1c4a      	adds	r2, r1, #1
 801c8e2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801c8e6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801c8ea:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c8ee:	0949      	lsrs	r1, r1, #5
 801c8f0:	ea43 030c 	orr.w	r3, r3, ip
 801c8f4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801c8f8:	430b      	orrs	r3, r1
 801c8fa:	803b      	strh	r3, [r7, #0]
 801c8fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c8fe:	3702      	adds	r7, #2
 801c900:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c904:	449a      	add	sl, r3
 801c906:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c908:	441d      	add	r5, r3
 801c90a:	e742      	b.n	801c792 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c90c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801c90e:	f108 0802 	add.w	r8, r8, #2
 801c912:	449a      	add	sl, r3
 801c914:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801c916:	441d      	add	r5, r3
 801c918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c91a:	3b01      	subs	r3, #1
 801c91c:	9309      	str	r3, [sp, #36]	; 0x24
 801c91e:	e718      	b.n	801c752 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c920:	d023      	beq.n	801c96a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801c922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c924:	9825      	ldr	r0, [sp, #148]	; 0x94
 801c926:	3b01      	subs	r3, #1
 801c928:	fb00 a003 	mla	r0, r0, r3, sl
 801c92c:	1400      	asrs	r0, r0, #16
 801c92e:	f53f af2d 	bmi.w	801c78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c932:	3901      	subs	r1, #1
 801c934:	4288      	cmp	r0, r1
 801c936:	f6bf af29 	bge.w	801c78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c93a:	9926      	ldr	r1, [sp, #152]	; 0x98
 801c93c:	fb01 5303 	mla	r3, r1, r3, r5
 801c940:	141b      	asrs	r3, r3, #16
 801c942:	f53f af23 	bmi.w	801c78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c946:	3a01      	subs	r2, #1
 801c948:	4293      	cmp	r3, r2
 801c94a:	f6bf af1f 	bge.w	801c78c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c94e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801c952:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801c956:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801c95a:	f1be 0f00 	cmp.w	lr, #0
 801c95e:	dc6c      	bgt.n	801ca3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801c960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c962:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c966:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801c96a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	f340 810e 	ble.w	801cb8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801c972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c976:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c978:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c97c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c980:	eef0 6a62 	vmov.f32	s13, s5
 801c984:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c988:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c98c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c990:	ee16 aa90 	vmov	sl, s13
 801c994:	eef0 6a43 	vmov.f32	s13, s6
 801c998:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c99c:	ee16 5a90 	vmov	r5, s13
 801c9a0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9a4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c9a8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c9ac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c9b0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c9b4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c9b8:	ee12 2a90 	vmov	r2, s5
 801c9bc:	eef0 2a47 	vmov.f32	s5, s14
 801c9c0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9c4:	ee13 2a10 	vmov	r2, s6
 801c9c8:	9325      	str	r3, [sp, #148]	; 0x94
 801c9ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c9cc:	eeb0 3a67 	vmov.f32	s6, s15
 801c9d0:	fb92 f3f3 	sdiv	r3, r2, r3
 801c9d4:	9326      	str	r3, [sp, #152]	; 0x98
 801c9d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9d8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801c9da:	3b01      	subs	r3, #1
 801c9dc:	930c      	str	r3, [sp, #48]	; 0x30
 801c9de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c9e0:	bf08      	it	eq
 801c9e2:	4613      	moveq	r3, r2
 801c9e4:	9309      	str	r3, [sp, #36]	; 0x24
 801c9e6:	e6a6      	b.n	801c736 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c9e8:	2900      	cmp	r1, #0
 801c9ea:	f43f af10 	beq.w	801c80e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c9ee:	f819 3003 	ldrb.w	r3, [r9, r3]
 801c9f2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801c9f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801c9f8:	e709      	b.n	801c80e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801c9fa:	f112 0901 	adds.w	r9, r2, #1
 801c9fe:	f53f af7d 	bmi.w	801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca02:	454b      	cmp	r3, r9
 801ca04:	f6ff af7a 	blt.w	801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca08:	f11c 0901 	adds.w	r9, ip, #1
 801ca0c:	f53f af76 	bmi.w	801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca10:	45ce      	cmp	lr, r9
 801ca12:	f6ff af73 	blt.w	801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ca18:	b21b      	sxth	r3, r3
 801ca1a:	9202      	str	r2, [sp, #8]
 801ca1c:	fa0f f28e 	sxth.w	r2, lr
 801ca20:	9300      	str	r3, [sp, #0]
 801ca22:	4633      	mov	r3, r6
 801ca24:	9201      	str	r2, [sp, #4]
 801ca26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ca28:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801ca2c:	e9cd c003 	strd	ip, r0, [sp, #12]
 801ca30:	4639      	mov	r1, r7
 801ca32:	9816      	ldr	r0, [sp, #88]	; 0x58
 801ca34:	f7ff fd8e 	bl	801c554 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801ca38:	e760      	b.n	801c8fc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801ca3a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801ca3c:	ea4f 422a 	mov.w	r2, sl, asr #16
 801ca40:	1429      	asrs	r1, r5, #16
 801ca42:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ca44:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801ca48:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801ca4c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ca50:	fb03 2101 	mla	r1, r3, r1, r2
 801ca54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ca56:	440a      	add	r2, r1
 801ca58:	5c61      	ldrb	r1, [r4, r1]
 801ca5a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801ca5e:	f1bc 0f00 	cmp.w	ip, #0
 801ca62:	f000 808c 	beq.w	801cb7e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801ca66:	7857      	ldrb	r7, [r2, #1]
 801ca68:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801ca6c:	9413      	str	r4, [sp, #76]	; 0x4c
 801ca6e:	b140      	cbz	r0, 801ca82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801ca70:	18d7      	adds	r7, r2, r3
 801ca72:	5cd3      	ldrb	r3, [r2, r3]
 801ca74:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ca78:	9310      	str	r3, [sp, #64]	; 0x40
 801ca7a:	787b      	ldrb	r3, [r7, #1]
 801ca7c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801ca80:	9314      	str	r3, [sp, #80]	; 0x50
 801ca82:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ca84:	fb1c f200 	smulbb	r2, ip, r0
 801ca88:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ca8a:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ca8e:	041f      	lsls	r7, r3, #16
 801ca90:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ca94:	10d2      	asrs	r2, r2, #3
 801ca96:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801ca9a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801ca9e:	431f      	orrs	r7, r3
 801caa0:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801caa4:	9317      	str	r3, [sp, #92]	; 0x5c
 801caa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801caa8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801caaa:	041b      	lsls	r3, r3, #16
 801caac:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cab0:	ea43 030b 	orr.w	r3, r3, fp
 801cab4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cab8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cabc:	4353      	muls	r3, r2
 801cabe:	fb04 3707 	mla	r7, r4, r7, r3
 801cac2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cac6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cac8:	ea43 0b01 	orr.w	fp, r3, r1
 801cacc:	f1c0 0110 	rsb	r1, r0, #16
 801cad0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cad2:	eba1 0c0c 	sub.w	ip, r1, ip
 801cad6:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801cada:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cade:	fb0c 770b 	mla	r7, ip, fp, r7
 801cae2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cae6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801caea:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801caee:	ea4c 0c0b 	orr.w	ip, ip, fp
 801caf2:	fb02 770c 	mla	r7, r2, ip, r7
 801caf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801caf8:	0d79      	lsrs	r1, r7, #21
 801cafa:	8812      	ldrh	r2, [r2, #0]
 801cafc:	097f      	lsrs	r7, r7, #5
 801cafe:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb02:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cb06:	430f      	orrs	r7, r1
 801cb08:	1211      	asrs	r1, r2, #8
 801cb0a:	b2bb      	uxth	r3, r7
 801cb0c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801cb10:	10d7      	asrs	r7, r2, #3
 801cb12:	fb11 f104 	smulbb	r1, r1, r4
 801cb16:	1218      	asrs	r0, r3, #8
 801cb18:	00d2      	lsls	r2, r2, #3
 801cb1a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801cb1e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801cb22:	fb17 f704 	smulbb	r7, r7, r4
 801cb26:	b2d2      	uxtb	r2, r2
 801cb28:	fb00 1009 	mla	r0, r0, r9, r1
 801cb2c:	10d9      	asrs	r1, r3, #3
 801cb2e:	fb12 f204 	smulbb	r2, r2, r4
 801cb32:	00db      	lsls	r3, r3, #3
 801cb34:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801cb38:	b280      	uxth	r0, r0
 801cb3a:	b2db      	uxtb	r3, r3
 801cb3c:	fb01 7109 	mla	r1, r1, r9, r7
 801cb40:	fb03 2309 	mla	r3, r3, r9, r2
 801cb44:	1c42      	adds	r2, r0, #1
 801cb46:	b289      	uxth	r1, r1
 801cb48:	b29b      	uxth	r3, r3
 801cb4a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801cb4e:	1c4f      	adds	r7, r1, #1
 801cb50:	1c5a      	adds	r2, r3, #1
 801cb52:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801cb56:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801cb5a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cb5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb60:	0949      	lsrs	r1, r1, #5
 801cb62:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cb66:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801cb6a:	4310      	orrs	r0, r2
 801cb6c:	4308      	orrs	r0, r1
 801cb6e:	f823 0b02 	strh.w	r0, [r3], #2
 801cb72:	930e      	str	r3, [sp, #56]	; 0x38
 801cb74:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801cb76:	449a      	add	sl, r3
 801cb78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801cb7a:	441d      	add	r5, r3
 801cb7c:	e6ed      	b.n	801c95a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801cb7e:	2800      	cmp	r0, #0
 801cb80:	f43f af7f 	beq.w	801ca82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cb84:	5cd3      	ldrb	r3, [r2, r3]
 801cb86:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801cb8a:	9310      	str	r3, [sp, #64]	; 0x40
 801cb8c:	e779      	b.n	801ca82 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cb8e:	b019      	add	sp, #100	; 0x64
 801cb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cb94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801cb94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb98:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801cb9c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801cba0:	f1b8 0f00 	cmp.w	r8, #0
 801cba4:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801cba8:	fb08 470e 	mla	r7, r8, lr, r4
 801cbac:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801cbb0:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801cbb4:	eb02 0907 	add.w	r9, r2, r7
 801cbb8:	8808      	ldrh	r0, [r1, #0]
 801cbba:	db67      	blt.n	801cc8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801cbbc:	45c2      	cmp	sl, r8
 801cbbe:	dd65      	ble.n	801cc8c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801cbc0:	2c00      	cmp	r4, #0
 801cbc2:	db61      	blt.n	801cc88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801cbc4:	45a6      	cmp	lr, r4
 801cbc6:	dd5f      	ble.n	801cc88 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801cbc8:	5dd2      	ldrb	r2, [r2, r7]
 801cbca:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801cbce:	1c62      	adds	r2, r4, #1
 801cbd0:	d45f      	bmi.n	801cc92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cbd2:	4596      	cmp	lr, r2
 801cbd4:	dd5d      	ble.n	801cc92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cbd6:	2d00      	cmp	r5, #0
 801cbd8:	d05b      	beq.n	801cc92 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801cbda:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cbde:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801cbe2:	f118 0801 	adds.w	r8, r8, #1
 801cbe6:	d458      	bmi.n	801cc9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cbe8:	45c2      	cmp	sl, r8
 801cbea:	dd56      	ble.n	801cc9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cbec:	2e00      	cmp	r6, #0
 801cbee:	d054      	beq.n	801cc9a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801cbf0:	2c00      	cmp	r4, #0
 801cbf2:	db50      	blt.n	801cc96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801cbf4:	45a6      	cmp	lr, r4
 801cbf6:	dd4e      	ble.n	801cc96 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801cbf8:	f819 200e 	ldrb.w	r2, [r9, lr]
 801cbfc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801cc00:	3401      	adds	r4, #1
 801cc02:	d407      	bmi.n	801cc14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cc04:	45a6      	cmp	lr, r4
 801cc06:	dd05      	ble.n	801cc14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cc08:	b125      	cbz	r5, 801cc14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801cc0a:	44ce      	add	lr, r9
 801cc0c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801cc10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801cc14:	fb15 f406 	smulbb	r4, r5, r6
 801cc18:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801cc1c:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801cc20:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801cc24:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cc28:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801cc2c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801cc30:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801cc34:	ea43 0c0c 	orr.w	ip, r3, ip
 801cc38:	f1c6 0310 	rsb	r3, r6, #16
 801cc3c:	ea4e 0707 	orr.w	r7, lr, r7
 801cc40:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801cc44:	1b5b      	subs	r3, r3, r5
 801cc46:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801cc4a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cc4e:	437d      	muls	r5, r7
 801cc50:	fb03 5c0c 	mla	ip, r3, ip, r5
 801cc54:	0403      	lsls	r3, r0, #16
 801cc56:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cc5a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cc5e:	4318      	orrs	r0, r3
 801cc60:	0413      	lsls	r3, r2, #16
 801cc62:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801cc66:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cc6a:	fb04 c000 	mla	r0, r4, r0, ip
 801cc6e:	4313      	orrs	r3, r2
 801cc70:	fb06 0003 	mla	r0, r6, r3, r0
 801cc74:	0d43      	lsrs	r3, r0, #21
 801cc76:	0940      	lsrs	r0, r0, #5
 801cc78:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cc7c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801cc80:	4318      	orrs	r0, r3
 801cc82:	8008      	strh	r0, [r1, #0]
 801cc84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cc88:	4684      	mov	ip, r0
 801cc8a:	e7a0      	b.n	801cbce <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801cc8c:	4607      	mov	r7, r0
 801cc8e:	4684      	mov	ip, r0
 801cc90:	e7a7      	b.n	801cbe2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801cc92:	4607      	mov	r7, r0
 801cc94:	e7a5      	b.n	801cbe2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801cc96:	4602      	mov	r2, r0
 801cc98:	e7b2      	b.n	801cc00 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801cc9a:	4602      	mov	r2, r0
 801cc9c:	e7ba      	b.n	801cc14 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801cc9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cca2:	b093      	sub	sp, #76	; 0x4c
 801cca4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801cca8:	920f      	str	r2, [sp, #60]	; 0x3c
 801ccaa:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801ccac:	9010      	str	r0, [sp, #64]	; 0x40
 801ccae:	9108      	str	r1, [sp, #32]
 801ccb0:	6850      	ldr	r0, [r2, #4]
 801ccb2:	9306      	str	r3, [sp, #24]
 801ccb4:	6812      	ldr	r2, [r2, #0]
 801ccb6:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801ccba:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801ccbe:	fb00 1303 	mla	r3, r0, r3, r1
 801ccc2:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801ccc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	9307      	str	r3, [sp, #28]
 801cccc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ccce:	685f      	ldr	r7, [r3, #4]
 801ccd0:	3704      	adds	r7, #4
 801ccd2:	9b08      	ldr	r3, [sp, #32]
 801ccd4:	2b00      	cmp	r3, #0
 801ccd6:	dc03      	bgt.n	801cce0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801ccd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ccda:	2b00      	cmp	r3, #0
 801ccdc:	f340 81b2 	ble.w	801d044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801cce0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cce2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cce6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ccea:	1e48      	subs	r0, r1, #1
 801ccec:	f102 3cff 	add.w	ip, r2, #4294967295
 801ccf0:	9b06      	ldr	r3, [sp, #24]
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	f340 80a9 	ble.w	801ce4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ccf8:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ccfc:	ea4f 4326 	mov.w	r3, r6, asr #16
 801cd00:	d406      	bmi.n	801cd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd02:	4586      	cmp	lr, r0
 801cd04:	da04      	bge.n	801cd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	db02      	blt.n	801cd10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd0a:	4563      	cmp	r3, ip
 801cd0c:	f2c0 809e 	blt.w	801ce4c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801cd10:	f11e 0e01 	adds.w	lr, lr, #1
 801cd14:	f100 808f 	bmi.w	801ce36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cd18:	4571      	cmp	r1, lr
 801cd1a:	f2c0 808c 	blt.w	801ce36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cd1e:	3301      	adds	r3, #1
 801cd20:	f100 8089 	bmi.w	801ce36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cd24:	429a      	cmp	r2, r3
 801cd26:	f2c0 8086 	blt.w	801ce36 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801cd2a:	f8dd b018 	ldr.w	fp, [sp, #24]
 801cd2e:	46c8      	mov	r8, r9
 801cd30:	f1bb 0f00 	cmp.w	fp, #0
 801cd34:	f340 80a6 	ble.w	801ce84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801cd38:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801cd3a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801cd3e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cd40:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801cd44:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801cd48:	1422      	asrs	r2, r4, #16
 801cd4a:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801cd4e:	689b      	ldr	r3, [r3, #8]
 801cd50:	f100 80e3 	bmi.w	801cf1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cd54:	f103 3aff 	add.w	sl, r3, #4294967295
 801cd58:	4552      	cmp	r2, sl
 801cd5a:	f280 80de 	bge.w	801cf1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cd5e:	f1bc 0f00 	cmp.w	ip, #0
 801cd62:	f2c0 80da 	blt.w	801cf1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cd66:	f10e 3aff 	add.w	sl, lr, #4294967295
 801cd6a:	45d4      	cmp	ip, sl
 801cd6c:	f280 80d5 	bge.w	801cf1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801cd70:	b21b      	sxth	r3, r3
 801cd72:	9d07      	ldr	r5, [sp, #28]
 801cd74:	fb0c 2203 	mla	r2, ip, r3, r2
 801cd78:	eb05 0a02 	add.w	sl, r5, r2
 801cd7c:	5caa      	ldrb	r2, [r5, r2]
 801cd7e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801cd82:	2800      	cmp	r0, #0
 801cd84:	f000 80c0 	beq.w	801cf08 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801cd88:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801cd8c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801cd90:	920b      	str	r2, [sp, #44]	; 0x2c
 801cd92:	b151      	cbz	r1, 801cdaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cd94:	eb0a 0203 	add.w	r2, sl, r3
 801cd98:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cd9c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cda0:	9309      	str	r3, [sp, #36]	; 0x24
 801cda2:	7853      	ldrb	r3, [r2, #1]
 801cda4:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cda8:	930c      	str	r3, [sp, #48]	; 0x30
 801cdaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdac:	fb10 f201 	smulbb	r2, r0, r1
 801cdb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cdb2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cdb6:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cdba:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801cdbe:	10d2      	asrs	r2, r2, #3
 801cdc0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cdc4:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801cdc8:	ea4c 0c03 	orr.w	ip, ip, r3
 801cdcc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdce:	041b      	lsls	r3, r3, #16
 801cdd0:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cdd4:	432b      	orrs	r3, r5
 801cdd6:	4353      	muls	r3, r2
 801cdd8:	fb0a 330c 	mla	r3, sl, ip, r3
 801cddc:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801cde0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801cde4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cde8:	ea4c 0e0e 	orr.w	lr, ip, lr
 801cdec:	f1c1 0c10 	rsb	ip, r1, #16
 801cdf0:	ebac 0c00 	sub.w	ip, ip, r0
 801cdf4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801cdf8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801cdfc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801ce00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce02:	0418      	lsls	r0, r3, #16
 801ce04:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ce08:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801ce0c:	4318      	orrs	r0, r3
 801ce0e:	fb02 c200 	mla	r2, r2, r0, ip
 801ce12:	0d53      	lsrs	r3, r2, #21
 801ce14:	0952      	lsrs	r2, r2, #5
 801ce16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ce1a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ce1e:	431a      	orrs	r2, r3
 801ce20:	f8a8 2000 	strh.w	r2, [r8]
 801ce24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ce26:	f108 0802 	add.w	r8, r8, #2
 801ce2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ce2e:	441c      	add	r4, r3
 801ce30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce32:	441e      	add	r6, r3
 801ce34:	e77c      	b.n	801cd30 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ce36:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ce38:	f109 0902 	add.w	r9, r9, #2
 801ce3c:	441c      	add	r4, r3
 801ce3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ce40:	441e      	add	r6, r3
 801ce42:	9b06      	ldr	r3, [sp, #24]
 801ce44:	3b01      	subs	r3, #1
 801ce46:	9306      	str	r3, [sp, #24]
 801ce48:	e752      	b.n	801ccf0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ce4a:	d020      	beq.n	801ce8e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801ce4c:	9b06      	ldr	r3, [sp, #24]
 801ce4e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ce50:	3b01      	subs	r3, #1
 801ce52:	fb00 4003 	mla	r0, r0, r3, r4
 801ce56:	1400      	asrs	r0, r0, #16
 801ce58:	f53f af67 	bmi.w	801cd2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ce5c:	3901      	subs	r1, #1
 801ce5e:	4288      	cmp	r0, r1
 801ce60:	f6bf af63 	bge.w	801cd2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ce64:	9920      	ldr	r1, [sp, #128]	; 0x80
 801ce66:	fb01 6303 	mla	r3, r1, r3, r6
 801ce6a:	141b      	asrs	r3, r3, #16
 801ce6c:	f53f af5d 	bmi.w	801cd2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ce70:	3a01      	subs	r2, #1
 801ce72:	4293      	cmp	r3, r2
 801ce74:	f6bf af59 	bge.w	801cd2a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ce78:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801ce7c:	46ca      	mov	sl, r9
 801ce7e:	f1b8 0f00 	cmp.w	r8, #0
 801ce82:	dc67      	bgt.n	801cf54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801ce84:	9b06      	ldr	r3, [sp, #24]
 801ce86:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801ce8a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801ce8e:	9b08      	ldr	r3, [sp, #32]
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	f340 80d7 	ble.w	801d044 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801ce96:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ce9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cea0:	eeb0 6a62 	vmov.f32	s12, s5
 801cea4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801cea8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ceac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ceb0:	ee16 4a10 	vmov	r4, s12
 801ceb4:	eeb0 6a43 	vmov.f32	s12, s6
 801ceb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801cebc:	ee16 6a10 	vmov	r6, s12
 801cec0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cec4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cec8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cecc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ced0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ced4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ced8:	ee12 2a90 	vmov	r2, s5
 801cedc:	eef0 2a47 	vmov.f32	s5, s14
 801cee0:	fb92 f3f3 	sdiv	r3, r2, r3
 801cee4:	ee13 2a10 	vmov	r2, s6
 801cee8:	931f      	str	r3, [sp, #124]	; 0x7c
 801ceea:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801ceec:	eeb0 3a67 	vmov.f32	s6, s15
 801cef0:	fb92 f3f3 	sdiv	r3, r2, r3
 801cef4:	9320      	str	r3, [sp, #128]	; 0x80
 801cef6:	9b08      	ldr	r3, [sp, #32]
 801cef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801cefa:	3b01      	subs	r3, #1
 801cefc:	9308      	str	r3, [sp, #32]
 801cefe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801cf00:	bf08      	it	eq
 801cf02:	4613      	moveq	r3, r2
 801cf04:	9306      	str	r3, [sp, #24]
 801cf06:	e6e4      	b.n	801ccd2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801cf08:	2900      	cmp	r1, #0
 801cf0a:	f43f af4e 	beq.w	801cdaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cf0e:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801cf12:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf16:	9309      	str	r3, [sp, #36]	; 0x24
 801cf18:	e747      	b.n	801cdaa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801cf1a:	f112 0a01 	adds.w	sl, r2, #1
 801cf1e:	d481      	bmi.n	801ce24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cf20:	4553      	cmp	r3, sl
 801cf22:	f6ff af7f 	blt.w	801ce24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cf26:	f11c 0a01 	adds.w	sl, ip, #1
 801cf2a:	f53f af7b 	bmi.w	801ce24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cf2e:	45d6      	cmp	lr, sl
 801cf30:	f6ff af78 	blt.w	801ce24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cf34:	b21b      	sxth	r3, r3
 801cf36:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801cf3a:	fa0f f28e 	sxth.w	r2, lr
 801cf3e:	9300      	str	r3, [sp, #0]
 801cf40:	463b      	mov	r3, r7
 801cf42:	9201      	str	r2, [sp, #4]
 801cf44:	9a07      	ldr	r2, [sp, #28]
 801cf46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801cf4a:	4641      	mov	r1, r8
 801cf4c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801cf4e:	f7ff fe21 	bl	801cb94 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801cf52:	e767      	b.n	801ce24 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801cf54:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801cf56:	1422      	asrs	r2, r4, #16
 801cf58:	1431      	asrs	r1, r6, #16
 801cf5a:	9d07      	ldr	r5, [sp, #28]
 801cf5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801cf60:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801cf64:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801cf68:	fb03 2101 	mla	r1, r3, r1, r2
 801cf6c:	9a07      	ldr	r2, [sp, #28]
 801cf6e:	440a      	add	r2, r1
 801cf70:	5c69      	ldrb	r1, [r5, r1]
 801cf72:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801cf76:	f1be 0f00 	cmp.w	lr, #0
 801cf7a:	d05c      	beq.n	801d036 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801cf7c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801cf80:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801cf84:	950d      	str	r5, [sp, #52]	; 0x34
 801cf86:	b150      	cbz	r0, 801cf9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801cf88:	eb02 0c03 	add.w	ip, r2, r3
 801cf8c:	5cd3      	ldrb	r3, [r2, r3]
 801cf8e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf92:	930a      	str	r3, [sp, #40]	; 0x28
 801cf94:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cf98:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801cf9c:	930e      	str	r3, [sp, #56]	; 0x38
 801cf9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cfa0:	fb1e f200 	smulbb	r2, lr, r0
 801cfa4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801cfa6:	f108 38ff 	add.w	r8, r8, #4294967295
 801cfaa:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801cfae:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801cfb2:	10d2      	asrs	r2, r2, #3
 801cfb4:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801cfb8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801cfbc:	ea4c 0c03 	orr.w	ip, ip, r3
 801cfc0:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801cfc4:	9311      	str	r3, [sp, #68]	; 0x44
 801cfc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cfc8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801cfca:	041b      	lsls	r3, r3, #16
 801cfcc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801cfd0:	ea43 030b 	orr.w	r3, r3, fp
 801cfd4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801cfd8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801cfdc:	4353      	muls	r3, r2
 801cfde:	fb05 3c0c 	mla	ip, r5, ip, r3
 801cfe2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801cfe6:	ea43 0b01 	orr.w	fp, r3, r1
 801cfea:	f1c0 0110 	rsb	r1, r0, #16
 801cfee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cff0:	eba1 0e0e 	sub.w	lr, r1, lr
 801cff4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801cff8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801cffc:	fb0e cc0b 	mla	ip, lr, fp, ip
 801d000:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801d004:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801d008:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801d00c:	ea4b 0e0e 	orr.w	lr, fp, lr
 801d010:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d014:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801d018:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801d01c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d020:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801d024:	ea43 0c0c 	orr.w	ip, r3, ip
 801d028:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d02a:	441c      	add	r4, r3
 801d02c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d02e:	f82a cb02 	strh.w	ip, [sl], #2
 801d032:	441e      	add	r6, r3
 801d034:	e723      	b.n	801ce7e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d036:	2800      	cmp	r0, #0
 801d038:	d0b1      	beq.n	801cf9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801d03a:	5cd3      	ldrb	r3, [r2, r3]
 801d03c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801d040:	930a      	str	r3, [sp, #40]	; 0x28
 801d042:	e7ac      	b.n	801cf9e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801d044:	b013      	add	sp, #76	; 0x4c
 801d046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d04a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801d04a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d04e:	880d      	ldrh	r5, [r1, #0]
 801d050:	b087      	sub	sp, #28
 801d052:	10ef      	asrs	r7, r5, #3
 801d054:	9103      	str	r1, [sp, #12]
 801d056:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801d05a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801d05e:	00ed      	lsls	r5, r5, #3
 801d060:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801d064:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801d068:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801d06c:	b2ed      	uxtb	r5, r5
 801d06e:	9701      	str	r7, [sp, #4]
 801d070:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801d074:	9502      	str	r5, [sp, #8]
 801d076:	9d01      	ldr	r5, [sp, #4]
 801d078:	9902      	ldr	r1, [sp, #8]
 801d07a:	022d      	lsls	r5, r5, #8
 801d07c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801d080:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801d084:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801d088:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801d08c:	430d      	orrs	r5, r1
 801d08e:	fb06 0709 	mla	r7, r6, r9, r0
 801d092:	2e00      	cmp	r6, #0
 801d094:	9505      	str	r5, [sp, #20]
 801d096:	eb02 0c07 	add.w	ip, r2, r7
 801d09a:	f2c0 80b6 	blt.w	801d20a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801d09e:	45b3      	cmp	fp, r6
 801d0a0:	f340 80b3 	ble.w	801d20a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801d0a4:	2800      	cmp	r0, #0
 801d0a6:	f2c0 80ae 	blt.w	801d206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801d0aa:	4581      	cmp	r9, r0
 801d0ac:	f340 80ab 	ble.w	801d206 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801d0b0:	5dd7      	ldrb	r7, [r2, r7]
 801d0b2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d0b6:	441f      	add	r7, r3
 801d0b8:	1c42      	adds	r2, r0, #1
 801d0ba:	f100 80a9 	bmi.w	801d210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d0be:	4591      	cmp	r9, r2
 801d0c0:	f340 80a6 	ble.w	801d210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d0c4:	2c00      	cmp	r4, #0
 801d0c6:	f000 80a3 	beq.w	801d210 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801d0ca:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d0ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0d2:	441d      	add	r5, r3
 801d0d4:	3601      	adds	r6, #1
 801d0d6:	f100 809f 	bmi.w	801d218 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d0da:	45b3      	cmp	fp, r6
 801d0dc:	f340 809c 	ble.w	801d218 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d0e0:	f1be 0f00 	cmp.w	lr, #0
 801d0e4:	f000 8098 	beq.w	801d218 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801d0e8:	2800      	cmp	r0, #0
 801d0ea:	f2c0 8093 	blt.w	801d214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d0ee:	4581      	cmp	r9, r0
 801d0f0:	f340 8090 	ble.w	801d214 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801d0f4:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801d0f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d0fc:	441e      	add	r6, r3
 801d0fe:	3001      	adds	r0, #1
 801d100:	f100 808d 	bmi.w	801d21e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d104:	4581      	cmp	r9, r0
 801d106:	f340 808a 	ble.w	801d21e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d10a:	2c00      	cmp	r4, #0
 801d10c:	f000 8087 	beq.w	801d21e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801d110:	44e1      	add	r9, ip
 801d112:	f899 2001 	ldrb.w	r2, [r9, #1]
 801d116:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d11a:	4413      	add	r3, r2
 801d11c:	b2a4      	uxth	r4, r4
 801d11e:	f897 c002 	ldrb.w	ip, [r7, #2]
 801d122:	fa1f fe8e 	uxth.w	lr, lr
 801d126:	9901      	ldr	r1, [sp, #4]
 801d128:	fb04 fb0e 	mul.w	fp, r4, lr
 801d12c:	0124      	lsls	r4, r4, #4
 801d12e:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801d132:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801d136:	eba4 040b 	sub.w	r4, r4, fp
 801d13a:	fa1f f08e 	uxth.w	r0, lr
 801d13e:	b2a2      	uxth	r2, r4
 801d140:	78ac      	ldrb	r4, [r5, #2]
 801d142:	eba9 0900 	sub.w	r9, r9, r0
 801d146:	fa1f fe88 	uxth.w	lr, r8
 801d14a:	4354      	muls	r4, r2
 801d14c:	ea6f 0808 	mvn.w	r8, r8
 801d150:	fa1f f989 	uxth.w	r9, r9
 801d154:	fa5f f888 	uxtb.w	r8, r8
 801d158:	fb09 440c 	mla	r4, r9, ip, r4
 801d15c:	f896 c002 	ldrb.w	ip, [r6, #2]
 801d160:	fb1a fa08 	smulbb	sl, sl, r8
 801d164:	fb00 440c 	mla	r4, r0, ip, r4
 801d168:	f893 c002 	ldrb.w	ip, [r3, #2]
 801d16c:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801d170:	787c      	ldrb	r4, [r7, #1]
 801d172:	783f      	ldrb	r7, [r7, #0]
 801d174:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d178:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d17c:	f895 a001 	ldrb.w	sl, [r5, #1]
 801d180:	782d      	ldrb	r5, [r5, #0]
 801d182:	fb02 fa0a 	mul.w	sl, r2, sl
 801d186:	fa1f fc8c 	uxth.w	ip, ip
 801d18a:	436a      	muls	r2, r5
 801d18c:	7835      	ldrb	r5, [r6, #0]
 801d18e:	fb09 aa04 	mla	sl, r9, r4, sl
 801d192:	7874      	ldrb	r4, [r6, #1]
 801d194:	fb09 2207 	mla	r2, r9, r7, r2
 801d198:	fb00 aa04 	mla	sl, r0, r4, sl
 801d19c:	785c      	ldrb	r4, [r3, #1]
 801d19e:	fb00 2005 	mla	r0, r0, r5, r2
 801d1a2:	781b      	ldrb	r3, [r3, #0]
 801d1a4:	fb0b a404 	mla	r4, fp, r4, sl
 801d1a8:	fb11 fa08 	smulbb	sl, r1, r8
 801d1ac:	fb0b 0b03 	mla	fp, fp, r3, r0
 801d1b0:	9b02      	ldr	r3, [sp, #8]
 801d1b2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d1b6:	fb13 f808 	smulbb	r8, r3, r8
 801d1ba:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801d1be:	fb04 a40e 	mla	r4, r4, lr, sl
 801d1c2:	f10c 0301 	add.w	r3, ip, #1
 801d1c6:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801d1ca:	b2a4      	uxth	r4, r4
 801d1cc:	fa1f fe8e 	uxth.w	lr, lr
 801d1d0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d1d4:	f104 0a01 	add.w	sl, r4, #1
 801d1d8:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801d1dc:	f10e 0c01 	add.w	ip, lr, #1
 801d1e0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801d1e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d1e8:	0964      	lsrs	r4, r4, #5
 801d1ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801d1ee:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801d1f2:	ea4c 0c03 	orr.w	ip, ip, r3
 801d1f6:	9b03      	ldr	r3, [sp, #12]
 801d1f8:	ea4c 0c04 	orr.w	ip, ip, r4
 801d1fc:	f8a3 c000 	strh.w	ip, [r3]
 801d200:	b007      	add	sp, #28
 801d202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d206:	af05      	add	r7, sp, #20
 801d208:	e756      	b.n	801d0b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801d20a:	ad05      	add	r5, sp, #20
 801d20c:	462f      	mov	r7, r5
 801d20e:	e761      	b.n	801d0d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d210:	ad05      	add	r5, sp, #20
 801d212:	e75f      	b.n	801d0d4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801d214:	ae05      	add	r6, sp, #20
 801d216:	e772      	b.n	801d0fe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801d218:	ab05      	add	r3, sp, #20
 801d21a:	461e      	mov	r6, r3
 801d21c:	e77e      	b.n	801d11c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801d21e:	ab05      	add	r3, sp, #20
 801d220:	e77c      	b.n	801d11c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801d222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d226:	b095      	sub	sp, #84	; 0x54
 801d228:	9212      	str	r2, [sp, #72]	; 0x48
 801d22a:	9309      	str	r3, [sp, #36]	; 0x24
 801d22c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801d22e:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801d232:	9013      	str	r0, [sp, #76]	; 0x4c
 801d234:	930f      	str	r3, [sp, #60]	; 0x3c
 801d236:	6850      	ldr	r0, [r2, #4]
 801d238:	910e      	str	r1, [sp, #56]	; 0x38
 801d23a:	6812      	ldr	r2, [r2, #0]
 801d23c:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801d240:	fb00 1303 	mla	r3, r0, r3, r1
 801d244:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d248:	930a      	str	r3, [sp, #40]	; 0x28
 801d24a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d24c:	681b      	ldr	r3, [r3, #0]
 801d24e:	930d      	str	r3, [sp, #52]	; 0x34
 801d250:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d252:	685c      	ldr	r4, [r3, #4]
 801d254:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801d256:	3404      	adds	r4, #4
 801d258:	43db      	mvns	r3, r3
 801d25a:	b2db      	uxtb	r3, r3
 801d25c:	930b      	str	r3, [sp, #44]	; 0x2c
 801d25e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d260:	2b00      	cmp	r3, #0
 801d262:	dc03      	bgt.n	801d26c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801d266:	2b00      	cmp	r3, #0
 801d268:	f340 8255 	ble.w	801d716 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d26c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801d26e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d272:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d276:	1e48      	subs	r0, r1, #1
 801d278:	1e55      	subs	r5, r2, #1
 801d27a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f340 80f9 	ble.w	801d474 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801d282:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801d284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d286:	1436      	asrs	r6, r6, #16
 801d288:	ea4f 4323 	mov.w	r3, r3, asr #16
 801d28c:	d406      	bmi.n	801d29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d28e:	4286      	cmp	r6, r0
 801d290:	da04      	bge.n	801d29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d292:	2b00      	cmp	r3, #0
 801d294:	db02      	blt.n	801d29c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d296:	42ab      	cmp	r3, r5
 801d298:	f2c0 80ed 	blt.w	801d476 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801d29c:	3601      	adds	r6, #1
 801d29e:	f100 80da 	bmi.w	801d456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d2a2:	42b1      	cmp	r1, r6
 801d2a4:	f2c0 80d7 	blt.w	801d456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d2a8:	3301      	adds	r3, #1
 801d2aa:	f100 80d4 	bmi.w	801d456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d2ae:	429a      	cmp	r2, r3
 801d2b0:	f2c0 80d1 	blt.w	801d456 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801d2b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2b6:	9311      	str	r3, [sp, #68]	; 0x44
 801d2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d2ba:	930c      	str	r3, [sp, #48]	; 0x30
 801d2bc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d2be:	2b00      	cmp	r3, #0
 801d2c0:	f340 80fa 	ble.w	801d4b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801d2c4:	9826      	ldr	r0, [sp, #152]	; 0x98
 801d2c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d2c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d2ca:	68c6      	ldr	r6, [r0, #12]
 801d2cc:	141d      	asrs	r5, r3, #16
 801d2ce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801d2d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d2d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d2d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d2d8:	1400      	asrs	r0, r0, #16
 801d2da:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d2de:	6892      	ldr	r2, [r2, #8]
 801d2e0:	f100 813e 	bmi.w	801d560 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d2e4:	1e57      	subs	r7, r2, #1
 801d2e6:	42b8      	cmp	r0, r7
 801d2e8:	f280 813a 	bge.w	801d560 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d2ec:	2d00      	cmp	r5, #0
 801d2ee:	f2c0 8137 	blt.w	801d560 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d2f2:	1e77      	subs	r7, r6, #1
 801d2f4:	42bd      	cmp	r5, r7
 801d2f6:	f280 8133 	bge.w	801d560 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801d2fa:	b212      	sxth	r2, r2
 801d2fc:	fb05 0002 	mla	r0, r5, r2, r0
 801d300:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d302:	f815 a000 	ldrb.w	sl, [r5, r0]
 801d306:	182e      	adds	r6, r5, r0
 801d308:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801d30c:	eb04 050a 	add.w	r5, r4, sl
 801d310:	2b00      	cmp	r3, #0
 801d312:	f000 8117 	beq.w	801d544 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801d316:	f896 c001 	ldrb.w	ip, [r6, #1]
 801d31a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d31e:	44a4      	add	ip, r4
 801d320:	2900      	cmp	r1, #0
 801d322:	f000 8117 	beq.w	801d554 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801d326:	18b0      	adds	r0, r6, r2
 801d328:	5cb2      	ldrb	r2, [r6, r2]
 801d32a:	7840      	ldrb	r0, [r0, #1]
 801d32c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d334:	4422      	add	r2, r4
 801d336:	4420      	add	r0, r4
 801d338:	b29b      	uxth	r3, r3
 801d33a:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801d33e:	b289      	uxth	r1, r1
 801d340:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d344:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d346:	fb03 f901 	mul.w	r9, r3, r1
 801d34a:	011b      	lsls	r3, r3, #4
 801d34c:	f8b6 e000 	ldrh.w	lr, [r6]
 801d350:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d354:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801d358:	eba3 0309 	sub.w	r3, r3, r9
 801d35c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801d360:	b289      	uxth	r1, r1
 801d362:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801d366:	b29b      	uxth	r3, r3
 801d368:	eba8 0801 	sub.w	r8, r8, r1
 801d36c:	435f      	muls	r7, r3
 801d36e:	fa1f f888 	uxth.w	r8, r8
 801d372:	9310      	str	r3, [sp, #64]	; 0x40
 801d374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d376:	fb08 770b 	mla	r7, r8, fp, r7
 801d37a:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d37e:	fb01 770b 	mla	r7, r1, fp, r7
 801d382:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d386:	fb09 770b 	mla	r7, r9, fp, r7
 801d38a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801d38e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d392:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d396:	fb1b fb03 	smulbb	fp, fp, r3
 801d39a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d39c:	fb07 b706 	mla	r7, r7, r6, fp
 801d3a0:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d3a4:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801d3a8:	f89c c000 	ldrb.w	ip, [ip]
 801d3ac:	b2bf      	uxth	r7, r7
 801d3ae:	435d      	muls	r5, r3
 801d3b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d3b2:	fb08 550b 	mla	r5, r8, fp, r5
 801d3b6:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d3ba:	fb01 550b 	mla	r5, r1, fp, r5
 801d3be:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d3c2:	fb09 550b 	mla	r5, r9, fp, r5
 801d3c6:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801d3ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801d3ce:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d3d2:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d3d6:	fa5f fe8e 	uxtb.w	lr, lr
 801d3da:	fb1b fb03 	smulbb	fp, fp, r3
 801d3de:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d3e0:	fb03 f30c 	mul.w	r3, r3, ip
 801d3e4:	f892 c000 	ldrb.w	ip, [r2]
 801d3e8:	fb05 b506 	mla	r5, r5, r6, fp
 801d3ec:	fb08 330a 	mla	r3, r8, sl, r3
 801d3f0:	b2ad      	uxth	r5, r5
 801d3f2:	fb01 330c 	mla	r3, r1, ip, r3
 801d3f6:	f890 c000 	ldrb.w	ip, [r0]
 801d3fa:	f105 0b01 	add.w	fp, r5, #1
 801d3fe:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d402:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d404:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d408:	fb1e fe03 	smulbb	lr, lr, r3
 801d40c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801d410:	1c7b      	adds	r3, r7, #1
 801d412:	096d      	lsrs	r5, r5, #5
 801d414:	fb0c e606 	mla	r6, ip, r6, lr
 801d418:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d41c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d420:	b2b6      	uxth	r6, r6
 801d422:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801d426:	1c77      	adds	r7, r6, #1
 801d428:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801d42c:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d430:	431f      	orrs	r7, r3
 801d432:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d434:	433d      	orrs	r5, r7
 801d436:	801d      	strh	r5, [r3, #0]
 801d438:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d43a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d43c:	3302      	adds	r3, #2
 801d43e:	930c      	str	r3, [sp, #48]	; 0x30
 801d440:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d442:	4413      	add	r3, r2
 801d444:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d446:	931f      	str	r3, [sp, #124]	; 0x7c
 801d448:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d44a:	4413      	add	r3, r2
 801d44c:	9320      	str	r3, [sp, #128]	; 0x80
 801d44e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d450:	3b01      	subs	r3, #1
 801d452:	9311      	str	r3, [sp, #68]	; 0x44
 801d454:	e732      	b.n	801d2bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801d456:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d458:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801d45a:	4433      	add	r3, r6
 801d45c:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801d45e:	931f      	str	r3, [sp, #124]	; 0x7c
 801d460:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d462:	4433      	add	r3, r6
 801d464:	9320      	str	r3, [sp, #128]	; 0x80
 801d466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d468:	3b01      	subs	r3, #1
 801d46a:	9309      	str	r3, [sp, #36]	; 0x24
 801d46c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d46e:	3302      	adds	r3, #2
 801d470:	930a      	str	r3, [sp, #40]	; 0x28
 801d472:	e702      	b.n	801d27a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d474:	d027      	beq.n	801d4c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801d476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d478:	9821      	ldr	r0, [sp, #132]	; 0x84
 801d47a:	3b01      	subs	r3, #1
 801d47c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d47e:	fb00 5003 	mla	r0, r0, r3, r5
 801d482:	1400      	asrs	r0, r0, #16
 801d484:	f53f af16 	bmi.w	801d2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d488:	3901      	subs	r1, #1
 801d48a:	4288      	cmp	r0, r1
 801d48c:	f6bf af12 	bge.w	801d2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d490:	9922      	ldr	r1, [sp, #136]	; 0x88
 801d492:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d494:	fb01 0303 	mla	r3, r1, r3, r0
 801d498:	141b      	asrs	r3, r3, #16
 801d49a:	f53f af0b 	bmi.w	801d2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d49e:	3a01      	subs	r2, #1
 801d4a0:	4293      	cmp	r3, r2
 801d4a2:	f6bf af07 	bge.w	801d2b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801d4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4a8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801d4ac:	9311      	str	r3, [sp, #68]	; 0x44
 801d4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d4b0:	930c      	str	r3, [sp, #48]	; 0x30
 801d4b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d4b4:	2b00      	cmp	r3, #0
 801d4b6:	dc70      	bgt.n	801d59a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801d4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d4ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801d4bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d4c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d4c4:	930a      	str	r3, [sp, #40]	; 0x28
 801d4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	f340 8124 	ble.w	801d716 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801d4ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d4d2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d4d4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d4d8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d4dc:	eef0 6a62 	vmov.f32	s13, s5
 801d4e0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d4e4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d4e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4ec:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801d4f0:	eef0 6a43 	vmov.f32	s13, s6
 801d4f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d4f8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801d4fc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d500:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d504:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d508:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d50c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d510:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d514:	ee12 2a90 	vmov	r2, s5
 801d518:	eef0 2a47 	vmov.f32	s5, s14
 801d51c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d520:	ee13 2a10 	vmov	r2, s6
 801d524:	9321      	str	r3, [sp, #132]	; 0x84
 801d526:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d528:	eeb0 3a67 	vmov.f32	s6, s15
 801d52c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d530:	9322      	str	r3, [sp, #136]	; 0x88
 801d532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801d534:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801d536:	3b01      	subs	r3, #1
 801d538:	930e      	str	r3, [sp, #56]	; 0x38
 801d53a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801d53c:	bf08      	it	eq
 801d53e:	4613      	moveq	r3, r2
 801d540:	9309      	str	r3, [sp, #36]	; 0x24
 801d542:	e68c      	b.n	801d25e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d544:	b149      	cbz	r1, 801d55a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801d546:	5cb2      	ldrb	r2, [r6, r2]
 801d548:	4628      	mov	r0, r5
 801d54a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d54e:	4422      	add	r2, r4
 801d550:	46ac      	mov	ip, r5
 801d552:	e6f1      	b.n	801d338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d554:	4628      	mov	r0, r5
 801d556:	462a      	mov	r2, r5
 801d558:	e6ee      	b.n	801d338 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801d55a:	4628      	mov	r0, r5
 801d55c:	462a      	mov	r2, r5
 801d55e:	e7f7      	b.n	801d550 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801d560:	1c47      	adds	r7, r0, #1
 801d562:	f53f af69 	bmi.w	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d566:	42ba      	cmp	r2, r7
 801d568:	f6ff af66 	blt.w	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d56c:	1c6f      	adds	r7, r5, #1
 801d56e:	f53f af63 	bmi.w	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d572:	42be      	cmp	r6, r7
 801d574:	f6ff af60 	blt.w	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d578:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d57a:	b236      	sxth	r6, r6
 801d57c:	b212      	sxth	r2, r2
 801d57e:	9002      	str	r0, [sp, #8]
 801d580:	9601      	str	r6, [sp, #4]
 801d582:	9200      	str	r2, [sp, #0]
 801d584:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801d586:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801d58a:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801d58e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801d592:	4623      	mov	r3, r4
 801d594:	f7ff fd59 	bl	801d04a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801d598:	e74e      	b.n	801d438 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801d59a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d59c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d59e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801d5a2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801d5a4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801d5a6:	1400      	asrs	r0, r0, #16
 801d5a8:	142d      	asrs	r5, r5, #16
 801d5aa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d5ac:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801d5b0:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801d5b4:	fb02 5000 	mla	r0, r2, r0, r5
 801d5b8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801d5ba:	f815 9000 	ldrb.w	r9, [r5, r0]
 801d5be:	182e      	adds	r6, r5, r0
 801d5c0:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801d5c4:	eb04 0509 	add.w	r5, r4, r9
 801d5c8:	2b00      	cmp	r3, #0
 801d5ca:	f000 8096 	beq.w	801d6fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801d5ce:	7877      	ldrb	r7, [r6, #1]
 801d5d0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d5d4:	4427      	add	r7, r4
 801d5d6:	2900      	cmp	r1, #0
 801d5d8:	f000 8097 	beq.w	801d70a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801d5dc:	18b0      	adds	r0, r6, r2
 801d5de:	5cb2      	ldrb	r2, [r6, r2]
 801d5e0:	7840      	ldrb	r0, [r0, #1]
 801d5e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d5e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d5ea:	4422      	add	r2, r4
 801d5ec:	4420      	add	r0, r4
 801d5ee:	b29b      	uxth	r3, r3
 801d5f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801d5f2:	b289      	uxth	r1, r1
 801d5f4:	f895 b002 	ldrb.w	fp, [r5, #2]
 801d5f8:	f8b6 c000 	ldrh.w	ip, [r6]
 801d5fc:	fb03 f801 	mul.w	r8, r3, r1
 801d600:	011b      	lsls	r3, r3, #4
 801d602:	78be      	ldrb	r6, [r7, #2]
 801d604:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801d608:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d60c:	eba3 0308 	sub.w	r3, r3, r8
 801d610:	f814 9009 	ldrb.w	r9, [r4, r9]
 801d614:	b289      	uxth	r1, r1
 801d616:	b29b      	uxth	r3, r3
 801d618:	ebae 0e01 	sub.w	lr, lr, r1
 801d61c:	435e      	muls	r6, r3
 801d61e:	fa1f fe8e 	uxth.w	lr, lr
 801d622:	9310      	str	r3, [sp, #64]	; 0x40
 801d624:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d626:	fb0e 660b 	mla	r6, lr, fp, r6
 801d62a:	f892 b002 	ldrb.w	fp, [r2, #2]
 801d62e:	fb01 660b 	mla	r6, r1, fp, r6
 801d632:	f890 b002 	ldrb.w	fp, [r0, #2]
 801d636:	fb08 660b 	mla	r6, r8, fp, r6
 801d63a:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801d63e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801d642:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d646:	fb1b fb03 	smulbb	fp, fp, r3
 801d64a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d64c:	fb06 b60a 	mla	r6, r6, sl, fp
 801d650:	f895 b001 	ldrb.w	fp, [r5, #1]
 801d654:	787d      	ldrb	r5, [r7, #1]
 801d656:	783f      	ldrb	r7, [r7, #0]
 801d658:	b2b6      	uxth	r6, r6
 801d65a:	435d      	muls	r5, r3
 801d65c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d65e:	fb0e 550b 	mla	r5, lr, fp, r5
 801d662:	f892 b001 	ldrb.w	fp, [r2, #1]
 801d666:	fb01 550b 	mla	r5, r1, fp, r5
 801d66a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801d66e:	fb08 550b 	mla	r5, r8, fp, r5
 801d672:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801d676:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801d67a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801d67e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801d682:	fa5f fc8c 	uxtb.w	ip, ip
 801d686:	fb1b fb03 	smulbb	fp, fp, r3
 801d68a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d68c:	437b      	muls	r3, r7
 801d68e:	7817      	ldrb	r7, [r2, #0]
 801d690:	fb05 b50a 	mla	r5, r5, sl, fp
 801d694:	fb0e 3309 	mla	r3, lr, r9, r3
 801d698:	b2ad      	uxth	r5, r5
 801d69a:	fb01 3307 	mla	r3, r1, r7, r3
 801d69e:	7807      	ldrb	r7, [r0, #0]
 801d6a0:	f105 0b01 	add.w	fp, r5, #1
 801d6a4:	fb08 3707 	mla	r7, r8, r7, r3
 801d6a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d6aa:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801d6ae:	fb1c fc03 	smulbb	ip, ip, r3
 801d6b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d6b6:	1c73      	adds	r3, r6, #1
 801d6b8:	096d      	lsrs	r5, r5, #5
 801d6ba:	fb07 c70a 	mla	r7, r7, sl, ip
 801d6be:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801d6c2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d6c6:	b2bf      	uxth	r7, r7
 801d6c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d6ca:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801d6ce:	1c7a      	adds	r2, r7, #1
 801d6d0:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801d6d4:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801d6d8:	4316      	orrs	r6, r2
 801d6da:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d6dc:	432e      	orrs	r6, r5
 801d6de:	f823 6b02 	strh.w	r6, [r3], #2
 801d6e2:	930c      	str	r3, [sp, #48]	; 0x30
 801d6e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801d6e6:	4413      	add	r3, r2
 801d6e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801d6ea:	931f      	str	r3, [sp, #124]	; 0x7c
 801d6ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d6ee:	4413      	add	r3, r2
 801d6f0:	9320      	str	r3, [sp, #128]	; 0x80
 801d6f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d6f4:	3b01      	subs	r3, #1
 801d6f6:	9311      	str	r3, [sp, #68]	; 0x44
 801d6f8:	e6db      	b.n	801d4b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801d6fa:	b149      	cbz	r1, 801d710 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801d6fc:	5cb2      	ldrb	r2, [r6, r2]
 801d6fe:	4628      	mov	r0, r5
 801d700:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d704:	4422      	add	r2, r4
 801d706:	462f      	mov	r7, r5
 801d708:	e771      	b.n	801d5ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d70a:	4628      	mov	r0, r5
 801d70c:	462a      	mov	r2, r5
 801d70e:	e76e      	b.n	801d5ee <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801d710:	4628      	mov	r0, r5
 801d712:	462a      	mov	r2, r5
 801d714:	e7f7      	b.n	801d706 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801d716:	b015      	add	sp, #84	; 0x54
 801d718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d71c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801d71c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d720:	880f      	ldrh	r7, [r1, #0]
 801d722:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801d726:	023c      	lsls	r4, r7, #8
 801d728:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801d72c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801d730:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801d734:	017c      	lsls	r4, r7, #5
 801d736:	00ff      	lsls	r7, r7, #3
 801d738:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801d73c:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801d740:	b2ff      	uxtb	r7, r7
 801d742:	ea4b 0404 	orr.w	r4, fp, r4
 801d746:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801d74a:	4327      	orrs	r7, r4
 801d74c:	fb05 ca0e 	mla	sl, r5, lr, ip
 801d750:	2d00      	cmp	r5, #0
 801d752:	9701      	str	r7, [sp, #4]
 801d754:	eb02 080a 	add.w	r8, r2, sl
 801d758:	db7e      	blt.n	801d858 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d75a:	45a9      	cmp	r9, r5
 801d75c:	dd7c      	ble.n	801d858 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801d75e:	f1bc 0f00 	cmp.w	ip, #0
 801d762:	db77      	blt.n	801d854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d764:	45e6      	cmp	lr, ip
 801d766:	dd75      	ble.n	801d854 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801d768:	f812 700a 	ldrb.w	r7, [r2, sl]
 801d76c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d770:	441f      	add	r7, r3
 801d772:	f11c 0201 	adds.w	r2, ip, #1
 801d776:	d472      	bmi.n	801d85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d778:	4596      	cmp	lr, r2
 801d77a:	dd70      	ble.n	801d85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d77c:	2800      	cmp	r0, #0
 801d77e:	d06e      	beq.n	801d85e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801d780:	f898 4001 	ldrb.w	r4, [r8, #1]
 801d784:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d788:	441c      	add	r4, r3
 801d78a:	3501      	adds	r5, #1
 801d78c:	d46b      	bmi.n	801d866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d78e:	45a9      	cmp	r9, r5
 801d790:	dd69      	ble.n	801d866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d792:	2e00      	cmp	r6, #0
 801d794:	d067      	beq.n	801d866 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801d796:	f1bc 0f00 	cmp.w	ip, #0
 801d79a:	db62      	blt.n	801d862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d79c:	45e6      	cmp	lr, ip
 801d79e:	dd60      	ble.n	801d862 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801d7a0:	f818 500e 	ldrb.w	r5, [r8, lr]
 801d7a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d7a8:	441d      	add	r5, r3
 801d7aa:	f11c 0201 	adds.w	r2, ip, #1
 801d7ae:	d45d      	bmi.n	801d86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d7b0:	4596      	cmp	lr, r2
 801d7b2:	dd5b      	ble.n	801d86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d7b4:	2800      	cmp	r0, #0
 801d7b6:	d059      	beq.n	801d86c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801d7b8:	44c6      	add	lr, r8
 801d7ba:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801d7be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d7c2:	4413      	add	r3, r2
 801d7c4:	b280      	uxth	r0, r0
 801d7c6:	f897 e002 	ldrb.w	lr, [r7, #2]
 801d7ca:	b2b2      	uxth	r2, r6
 801d7cc:	f897 9000 	ldrb.w	r9, [r7]
 801d7d0:	787f      	ldrb	r7, [r7, #1]
 801d7d2:	fb00 f602 	mul.w	r6, r0, r2
 801d7d6:	0100      	lsls	r0, r0, #4
 801d7d8:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801d7dc:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801d7e0:	1b80      	subs	r0, r0, r6
 801d7e2:	fa1f fc82 	uxth.w	ip, r2
 801d7e6:	b282      	uxth	r2, r0
 801d7e8:	78a0      	ldrb	r0, [r4, #2]
 801d7ea:	eba8 080c 	sub.w	r8, r8, ip
 801d7ee:	4350      	muls	r0, r2
 801d7f0:	fa1f f888 	uxth.w	r8, r8
 801d7f4:	fb08 0e0e 	mla	lr, r8, lr, r0
 801d7f8:	78a8      	ldrb	r0, [r5, #2]
 801d7fa:	fb0c e000 	mla	r0, ip, r0, lr
 801d7fe:	f893 e002 	ldrb.w	lr, [r3, #2]
 801d802:	fb06 0e0e 	mla	lr, r6, lr, r0
 801d806:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801d80a:	f894 e000 	ldrb.w	lr, [r4]
 801d80e:	fb02 fe0e 	mul.w	lr, r2, lr
 801d812:	fb08 e909 	mla	r9, r8, r9, lr
 801d816:	f895 e000 	ldrb.w	lr, [r5]
 801d81a:	fb0c 990e 	mla	r9, ip, lr, r9
 801d81e:	f893 e000 	ldrb.w	lr, [r3]
 801d822:	785b      	ldrb	r3, [r3, #1]
 801d824:	fb06 9e0e 	mla	lr, r6, lr, r9
 801d828:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801d82c:	ea4e 0e00 	orr.w	lr, lr, r0
 801d830:	7860      	ldrb	r0, [r4, #1]
 801d832:	4350      	muls	r0, r2
 801d834:	786a      	ldrb	r2, [r5, #1]
 801d836:	fb08 0007 	mla	r0, r8, r7, r0
 801d83a:	fb0c 0202 	mla	r2, ip, r2, r0
 801d83e:	fb06 2303 	mla	r3, r6, r3, r2
 801d842:	095b      	lsrs	r3, r3, #5
 801d844:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d848:	ea4e 0303 	orr.w	r3, lr, r3
 801d84c:	800b      	strh	r3, [r1, #0]
 801d84e:	b003      	add	sp, #12
 801d850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d854:	af01      	add	r7, sp, #4
 801d856:	e78c      	b.n	801d772 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801d858:	ac01      	add	r4, sp, #4
 801d85a:	4627      	mov	r7, r4
 801d85c:	e795      	b.n	801d78a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d85e:	ac01      	add	r4, sp, #4
 801d860:	e793      	b.n	801d78a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801d862:	ad01      	add	r5, sp, #4
 801d864:	e7a1      	b.n	801d7aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801d866:	ab01      	add	r3, sp, #4
 801d868:	461d      	mov	r5, r3
 801d86a:	e7ab      	b.n	801d7c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801d86c:	ab01      	add	r3, sp, #4
 801d86e:	e7a9      	b.n	801d7c4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801d870 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d874:	b08f      	sub	sp, #60	; 0x3c
 801d876:	920c      	str	r2, [sp, #48]	; 0x30
 801d878:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801d87a:	900d      	str	r0, [sp, #52]	; 0x34
 801d87c:	910a      	str	r1, [sp, #40]	; 0x28
 801d87e:	6850      	ldr	r0, [r2, #4]
 801d880:	9306      	str	r3, [sp, #24]
 801d882:	6812      	ldr	r2, [r2, #0]
 801d884:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801d888:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801d88c:	fb00 1303 	mla	r3, r0, r3, r1
 801d890:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d894:	9307      	str	r3, [sp, #28]
 801d896:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	9308      	str	r3, [sp, #32]
 801d89c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d89e:	685c      	ldr	r4, [r3, #4]
 801d8a0:	3404      	adds	r4, #4
 801d8a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8a4:	2b00      	cmp	r3, #0
 801d8a6:	dc03      	bgt.n	801d8b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801d8a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	f340 81d5 	ble.w	801dc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801d8b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801d8b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d8b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d8ba:	1e48      	subs	r0, r1, #1
 801d8bc:	1e56      	subs	r6, r2, #1
 801d8be:	9b06      	ldr	r3, [sp, #24]
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	f340 80b6 	ble.w	801da32 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801d8c6:	ea5f 472b 	movs.w	r7, fp, asr #16
 801d8ca:	ea4f 4325 	mov.w	r3, r5, asr #16
 801d8ce:	d406      	bmi.n	801d8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8d0:	4287      	cmp	r7, r0
 801d8d2:	da04      	bge.n	801d8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	db02      	blt.n	801d8de <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801d8d8:	42b3      	cmp	r3, r6
 801d8da:	f2c0 80ab 	blt.w	801da34 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801d8de:	3701      	adds	r7, #1
 801d8e0:	f100 809c 	bmi.w	801da1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d8e4:	42b9      	cmp	r1, r7
 801d8e6:	f2c0 8099 	blt.w	801da1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d8ea:	3301      	adds	r3, #1
 801d8ec:	f100 8096 	bmi.w	801da1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d8f0:	429a      	cmp	r2, r3
 801d8f2:	f2c0 8093 	blt.w	801da1c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801d8f6:	9b06      	ldr	r3, [sp, #24]
 801d8f8:	930b      	str	r3, [sp, #44]	; 0x2c
 801d8fa:	9b07      	ldr	r3, [sp, #28]
 801d8fc:	9309      	str	r3, [sp, #36]	; 0x24
 801d8fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d900:	2b00      	cmp	r3, #0
 801d902:	f340 80b4 	ble.w	801da6e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 801d906:	9820      	ldr	r0, [sp, #128]	; 0x80
 801d908:	142e      	asrs	r6, r5, #16
 801d90a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801d90c:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801d910:	68c7      	ldr	r7, [r0, #12]
 801d912:	ea5f 402b 	movs.w	r0, fp, asr #16
 801d916:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d91a:	6892      	ldr	r2, [r2, #8]
 801d91c:	f100 80fb 	bmi.w	801db16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d920:	f102 3cff 	add.w	ip, r2, #4294967295
 801d924:	4560      	cmp	r0, ip
 801d926:	f280 80f6 	bge.w	801db16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d92a:	2e00      	cmp	r6, #0
 801d92c:	f2c0 80f3 	blt.w	801db16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d930:	f107 3cff 	add.w	ip, r7, #4294967295
 801d934:	4566      	cmp	r6, ip
 801d936:	f280 80ee 	bge.w	801db16 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801d93a:	b212      	sxth	r2, r2
 801d93c:	fb06 0002 	mla	r0, r6, r2, r0
 801d940:	9e08      	ldr	r6, [sp, #32]
 801d942:	1837      	adds	r7, r6, r0
 801d944:	5c30      	ldrb	r0, [r6, r0]
 801d946:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801d94a:	eb04 0c08 	add.w	ip, r4, r8
 801d94e:	2b00      	cmp	r3, #0
 801d950:	f000 80d3 	beq.w	801dafa <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801d954:	787e      	ldrb	r6, [r7, #1]
 801d956:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d95a:	4426      	add	r6, r4
 801d95c:	2900      	cmp	r1, #0
 801d95e:	f000 80d4 	beq.w	801db0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801d962:	18b8      	adds	r0, r7, r2
 801d964:	5cba      	ldrb	r2, [r7, r2]
 801d966:	7840      	ldrb	r0, [r0, #1]
 801d968:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d96c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d970:	4422      	add	r2, r4
 801d972:	4420      	add	r0, r4
 801d974:	b29b      	uxth	r3, r3
 801d976:	78b7      	ldrb	r7, [r6, #2]
 801d978:	b289      	uxth	r1, r1
 801d97a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801d97e:	f89c c001 	ldrb.w	ip, [ip, #1]
 801d982:	fb03 f901 	mul.w	r9, r3, r1
 801d986:	011b      	lsls	r3, r3, #4
 801d988:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801d98c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801d990:	eba3 0309 	sub.w	r3, r3, r9
 801d994:	b289      	uxth	r1, r1
 801d996:	b29b      	uxth	r3, r3
 801d998:	ebae 0e01 	sub.w	lr, lr, r1
 801d99c:	435f      	muls	r7, r3
 801d99e:	fa1f fe8e 	uxth.w	lr, lr
 801d9a2:	fb0e 770a 	mla	r7, lr, sl, r7
 801d9a6:	f892 a002 	ldrb.w	sl, [r2, #2]
 801d9aa:	fb01 770a 	mla	r7, r1, sl, r7
 801d9ae:	f890 a002 	ldrb.w	sl, [r0, #2]
 801d9b2:	fb09 7a0a 	mla	sl, r9, sl, r7
 801d9b6:	f814 7008 	ldrb.w	r7, [r4, r8]
 801d9ba:	f896 8000 	ldrb.w	r8, [r6]
 801d9be:	7876      	ldrb	r6, [r6, #1]
 801d9c0:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801d9c4:	fb03 f808 	mul.w	r8, r3, r8
 801d9c8:	4373      	muls	r3, r6
 801d9ca:	fb0e 8807 	mla	r8, lr, r7, r8
 801d9ce:	7817      	ldrb	r7, [r2, #0]
 801d9d0:	fb0e 330c 	mla	r3, lr, ip, r3
 801d9d4:	fb01 8807 	mla	r8, r1, r7, r8
 801d9d8:	7807      	ldrb	r7, [r0, #0]
 801d9da:	fb09 8707 	mla	r7, r9, r7, r8
 801d9de:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801d9e2:	ea47 070a 	orr.w	r7, r7, sl
 801d9e6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801d9ea:	fb01 310a 	mla	r1, r1, sl, r3
 801d9ee:	f890 a001 	ldrb.w	sl, [r0, #1]
 801d9f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d9f4:	fb09 1a0a 	mla	sl, r9, sl, r1
 801d9f8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801d9fc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801da00:	ea47 070a 	orr.w	r7, r7, sl
 801da04:	801f      	strh	r7, [r3, #0]
 801da06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da08:	3302      	adds	r3, #2
 801da0a:	9309      	str	r3, [sp, #36]	; 0x24
 801da0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801da0e:	449b      	add	fp, r3
 801da10:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801da12:	441d      	add	r5, r3
 801da14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801da16:	3b01      	subs	r3, #1
 801da18:	930b      	str	r3, [sp, #44]	; 0x2c
 801da1a:	e770      	b.n	801d8fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801da1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801da1e:	449b      	add	fp, r3
 801da20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801da22:	441d      	add	r5, r3
 801da24:	9b06      	ldr	r3, [sp, #24]
 801da26:	3b01      	subs	r3, #1
 801da28:	9306      	str	r3, [sp, #24]
 801da2a:	9b07      	ldr	r3, [sp, #28]
 801da2c:	3302      	adds	r3, #2
 801da2e:	9307      	str	r3, [sp, #28]
 801da30:	e745      	b.n	801d8be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801da32:	d023      	beq.n	801da7c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801da34:	9b06      	ldr	r3, [sp, #24]
 801da36:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801da38:	3b01      	subs	r3, #1
 801da3a:	fb00 b003 	mla	r0, r0, r3, fp
 801da3e:	1400      	asrs	r0, r0, #16
 801da40:	f53f af59 	bmi.w	801d8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801da44:	3901      	subs	r1, #1
 801da46:	4288      	cmp	r0, r1
 801da48:	f6bf af55 	bge.w	801d8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801da4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 801da4e:	fb01 5303 	mla	r3, r1, r3, r5
 801da52:	141b      	asrs	r3, r3, #16
 801da54:	f53f af4f 	bmi.w	801d8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801da58:	3a01      	subs	r2, #1
 801da5a:	4293      	cmp	r3, r2
 801da5c:	f6bf af4b 	bge.w	801d8f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801da60:	9b06      	ldr	r3, [sp, #24]
 801da62:	9309      	str	r3, [sp, #36]	; 0x24
 801da64:	9b07      	ldr	r3, [sp, #28]
 801da66:	930b      	str	r3, [sp, #44]	; 0x2c
 801da68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	dc70      	bgt.n	801db50 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801da6e:	9b06      	ldr	r3, [sp, #24]
 801da70:	9a07      	ldr	r2, [sp, #28]
 801da72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801da76:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801da7a:	9307      	str	r3, [sp, #28]
 801da7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801da7e:	2b00      	cmp	r3, #0
 801da80:	f340 80eb 	ble.w	801dc5a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801da84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801da88:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801da8a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801da8e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801da92:	eef0 6a62 	vmov.f32	s13, s5
 801da96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801da9a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801da9e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daa2:	ee16 ba90 	vmov	fp, s13
 801daa6:	eef0 6a43 	vmov.f32	s13, s6
 801daaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801daae:	ee16 5a90 	vmov	r5, s13
 801dab2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dab6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801daba:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dabe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dac2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dac6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801daca:	ee12 2a90 	vmov	r2, s5
 801dace:	eef0 2a47 	vmov.f32	s5, s14
 801dad2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dad6:	ee13 2a10 	vmov	r2, s6
 801dada:	931b      	str	r3, [sp, #108]	; 0x6c
 801dadc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801dade:	eeb0 3a67 	vmov.f32	s6, s15
 801dae2:	fb92 f3f3 	sdiv	r3, r2, r3
 801dae6:	931c      	str	r3, [sp, #112]	; 0x70
 801dae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801daea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801daec:	3b01      	subs	r3, #1
 801daee:	930a      	str	r3, [sp, #40]	; 0x28
 801daf0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801daf2:	bf08      	it	eq
 801daf4:	4613      	moveq	r3, r2
 801daf6:	9306      	str	r3, [sp, #24]
 801daf8:	e6d3      	b.n	801d8a2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801dafa:	b149      	cbz	r1, 801db10 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 801dafc:	5cba      	ldrb	r2, [r7, r2]
 801dafe:	4660      	mov	r0, ip
 801db00:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db04:	4422      	add	r2, r4
 801db06:	4666      	mov	r6, ip
 801db08:	e734      	b.n	801d974 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801db0a:	4660      	mov	r0, ip
 801db0c:	4662      	mov	r2, ip
 801db0e:	e731      	b.n	801d974 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801db10:	4660      	mov	r0, ip
 801db12:	4662      	mov	r2, ip
 801db14:	e7f7      	b.n	801db06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801db16:	f110 0c01 	adds.w	ip, r0, #1
 801db1a:	f53f af74 	bmi.w	801da06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db1e:	4562      	cmp	r2, ip
 801db20:	f6ff af71 	blt.w	801da06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db24:	f116 0c01 	adds.w	ip, r6, #1
 801db28:	f53f af6d 	bmi.w	801da06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db2c:	4567      	cmp	r7, ip
 801db2e:	f6ff af6a 	blt.w	801da06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db32:	b23f      	sxth	r7, r7
 801db34:	b212      	sxth	r2, r2
 801db36:	9701      	str	r7, [sp, #4]
 801db38:	9200      	str	r2, [sp, #0]
 801db3a:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801db3e:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801db42:	4623      	mov	r3, r4
 801db44:	980d      	ldr	r0, [sp, #52]	; 0x34
 801db46:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801db4a:	f7ff fde7 	bl	801d71c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801db4e:	e75a      	b.n	801da06 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801db50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801db52:	ea4f 462b 	mov.w	r6, fp, asr #16
 801db56:	1428      	asrs	r0, r5, #16
 801db58:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801db5c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801db60:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801db64:	fb02 6000 	mla	r0, r2, r0, r6
 801db68:	9e08      	ldr	r6, [sp, #32]
 801db6a:	f816 8000 	ldrb.w	r8, [r6, r0]
 801db6e:	1837      	adds	r7, r6, r0
 801db70:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801db74:	eb04 0c08 	add.w	ip, r4, r8
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d060      	beq.n	801dc3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
 801db7c:	787e      	ldrb	r6, [r7, #1]
 801db7e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801db82:	4426      	add	r6, r4
 801db84:	2900      	cmp	r1, #0
 801db86:	d062      	beq.n	801dc4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 801db88:	18b8      	adds	r0, r7, r2
 801db8a:	5cba      	ldrb	r2, [r7, r2]
 801db8c:	7840      	ldrb	r0, [r0, #1]
 801db8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801db92:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801db96:	4422      	add	r2, r4
 801db98:	4420      	add	r0, r4
 801db9a:	b29b      	uxth	r3, r3
 801db9c:	78b7      	ldrb	r7, [r6, #2]
 801db9e:	b289      	uxth	r1, r1
 801dba0:	f89c a002 	ldrb.w	sl, [ip, #2]
 801dba4:	f89c c001 	ldrb.w	ip, [ip, #1]
 801dba8:	fb03 f901 	mul.w	r9, r3, r1
 801dbac:	011b      	lsls	r3, r3, #4
 801dbae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801dbb2:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801dbb6:	eba3 0309 	sub.w	r3, r3, r9
 801dbba:	b289      	uxth	r1, r1
 801dbbc:	b29b      	uxth	r3, r3
 801dbbe:	ebae 0e01 	sub.w	lr, lr, r1
 801dbc2:	435f      	muls	r7, r3
 801dbc4:	fa1f fe8e 	uxth.w	lr, lr
 801dbc8:	fb0e 770a 	mla	r7, lr, sl, r7
 801dbcc:	f892 a002 	ldrb.w	sl, [r2, #2]
 801dbd0:	fb01 770a 	mla	r7, r1, sl, r7
 801dbd4:	f890 a002 	ldrb.w	sl, [r0, #2]
 801dbd8:	fb09 7a0a 	mla	sl, r9, sl, r7
 801dbdc:	f814 7008 	ldrb.w	r7, [r4, r8]
 801dbe0:	f896 8000 	ldrb.w	r8, [r6]
 801dbe4:	7876      	ldrb	r6, [r6, #1]
 801dbe6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801dbea:	fb03 f808 	mul.w	r8, r3, r8
 801dbee:	4373      	muls	r3, r6
 801dbf0:	7856      	ldrb	r6, [r2, #1]
 801dbf2:	fb0e 8807 	mla	r8, lr, r7, r8
 801dbf6:	7817      	ldrb	r7, [r2, #0]
 801dbf8:	fb0e 330c 	mla	r3, lr, ip, r3
 801dbfc:	fb01 8807 	mla	r8, r1, r7, r8
 801dc00:	7807      	ldrb	r7, [r0, #0]
 801dc02:	fb01 3306 	mla	r3, r1, r6, r3
 801dc06:	fb09 8707 	mla	r7, r9, r7, r8
 801dc0a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801dc0e:	ea47 070a 	orr.w	r7, r7, sl
 801dc12:	f890 a001 	ldrb.w	sl, [r0, #1]
 801dc16:	fb09 3a0a 	mla	sl, r9, sl, r3
 801dc1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc1c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801dc20:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801dc24:	ea47 070a 	orr.w	r7, r7, sl
 801dc28:	f823 7b02 	strh.w	r7, [r3], #2
 801dc2c:	930b      	str	r3, [sp, #44]	; 0x2c
 801dc2e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801dc30:	449b      	add	fp, r3
 801dc32:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801dc34:	441d      	add	r5, r3
 801dc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc38:	3b01      	subs	r3, #1
 801dc3a:	9309      	str	r3, [sp, #36]	; 0x24
 801dc3c:	e714      	b.n	801da68 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801dc3e:	b149      	cbz	r1, 801dc54 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
 801dc40:	5cba      	ldrb	r2, [r7, r2]
 801dc42:	4660      	mov	r0, ip
 801dc44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dc48:	4422      	add	r2, r4
 801dc4a:	4666      	mov	r6, ip
 801dc4c:	e7a5      	b.n	801db9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801dc4e:	4660      	mov	r0, ip
 801dc50:	4662      	mov	r2, ip
 801dc52:	e7a2      	b.n	801db9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
 801dc54:	4660      	mov	r0, ip
 801dc56:	4662      	mov	r2, ip
 801dc58:	e7f7      	b.n	801dc4a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
 801dc5a:	b00f      	add	sp, #60	; 0x3c
 801dc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801dc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dc64:	b085      	sub	sp, #20
 801dc66:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801dc6a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801dc6e:	9102      	str	r1, [sp, #8]
 801dc70:	2c00      	cmp	r4, #0
 801dc72:	fb04 710c 	mla	r1, r4, ip, r7
 801dc76:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801dc7a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801dc7e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801dc82:	eb02 0e01 	add.w	lr, r2, r1
 801dc86:	f2c0 8122 	blt.w	801dece <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801dc8a:	45a0      	cmp	r8, r4
 801dc8c:	f340 811f 	ble.w	801dece <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801dc90:	2f00      	cmp	r7, #0
 801dc92:	f2c0 811a 	blt.w	801deca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801dc96:	45bc      	cmp	ip, r7
 801dc98:	f340 8117 	ble.w	801deca <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801dc9c:	5c52      	ldrb	r2, [r2, r1]
 801dc9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801dca2:	1c7a      	adds	r2, r7, #1
 801dca4:	f100 8116 	bmi.w	801ded4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801dca8:	4594      	cmp	ip, r2
 801dcaa:	f340 8113 	ble.w	801ded4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801dcae:	2e00      	cmp	r6, #0
 801dcb0:	f000 8112 	beq.w	801ded8 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801dcb4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801dcb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801dcbc:	3401      	adds	r4, #1
 801dcbe:	f100 810f 	bmi.w	801dee0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dcc2:	45a0      	cmp	r8, r4
 801dcc4:	f340 810c 	ble.w	801dee0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801dcc8:	2800      	cmp	r0, #0
 801dcca:	f000 810c 	beq.w	801dee6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801dcce:	2f00      	cmp	r7, #0
 801dcd0:	f2c0 8104 	blt.w	801dedc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801dcd4:	45bc      	cmp	ip, r7
 801dcd6:	f340 8101 	ble.w	801dedc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801dcda:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801dcde:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801dce2:	3701      	adds	r7, #1
 801dce4:	f100 8102 	bmi.w	801deec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801dce8:	45bc      	cmp	ip, r7
 801dcea:	f340 80ff 	ble.w	801deec <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801dcee:	2e00      	cmp	r6, #0
 801dcf0:	f000 80fe 	beq.w	801def0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801dcf4:	44f4      	add	ip, lr
 801dcf6:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801dcfa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801dcfe:	b2b6      	uxth	r6, r6
 801dd00:	b280      	uxth	r0, r0
 801dd02:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801dd06:	fb00 fe06 	mul.w	lr, r0, r6
 801dd0a:	0136      	lsls	r6, r6, #4
 801dd0c:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801dd10:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801dd14:	eba6 070e 	sub.w	r7, r6, lr
 801dd18:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801dd1c:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801dd20:	b280      	uxth	r0, r0
 801dd22:	b2bf      	uxth	r7, r7
 801dd24:	1a1b      	subs	r3, r3, r0
 801dd26:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801dd2a:	fb0a f607 	mul.w	r6, sl, r7
 801dd2e:	b29b      	uxth	r3, r3
 801dd30:	fb0b 6603 	mla	r6, fp, r3, r6
 801dd34:	fb00 6609 	mla	r6, r0, r9, r6
 801dd38:	fb0e 6608 	mla	r6, lr, r8, r6
 801dd3c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801dd40:	9600      	str	r6, [sp, #0]
 801dd42:	2e00      	cmp	r6, #0
 801dd44:	f000 80be 	beq.w	801dec4 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801dd48:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801dd4c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801dd50:	9e02      	ldr	r6, [sp, #8]
 801dd52:	fb0b fc0c 	mul.w	ip, fp, ip
 801dd56:	fb0b f505 	mul.w	r5, fp, r5
 801dd5a:	8836      	ldrh	r6, [r6, #0]
 801dd5c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801dd60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dd64:	9501      	str	r5, [sp, #4]
 801dd66:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801dd6a:	44dc      	add	ip, fp
 801dd6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd70:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801dd74:	9503      	str	r5, [sp, #12]
 801dd76:	9d01      	ldr	r5, [sp, #4]
 801dd78:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801dd7c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801dd80:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801dd84:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801dd88:	fb0a fc0c 	mul.w	ip, sl, ip
 801dd8c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801dd90:	fb0a fa01 	mul.w	sl, sl, r1
 801dd94:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801dd98:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801dd9c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801dda0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801dda4:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801dda8:	4465      	add	r5, ip
 801ddaa:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ddae:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801ddb2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ddb6:	fb09 fc0c 	mul.w	ip, r9, ip
 801ddba:	0a2d      	lsrs	r5, r5, #8
 801ddbc:	fb09 f904 	mul.w	r9, r9, r4
 801ddc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ddc4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801ddc8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801ddcc:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801ddd0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801ddd4:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801ddd8:	437d      	muls	r5, r7
 801ddda:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801ddde:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801dde2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801dde6:	4461      	add	r1, ip
 801dde8:	fb08 f404 	mul.w	r4, r8, r4
 801ddec:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ddf0:	fb08 f802 	mul.w	r8, r8, r2
 801ddf4:	0a09      	lsrs	r1, r1, #8
 801ddf6:	0a22      	lsrs	r2, r4, #8
 801ddf8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801ddfc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801de00:	fb07 f70a 	mul.w	r7, r7, sl
 801de04:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801de08:	4414      	add	r4, r2
 801de0a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801de0e:	0a24      	lsrs	r4, r4, #8
 801de10:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801de14:	9a03      	ldr	r2, [sp, #12]
 801de16:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801de1a:	fb02 5503 	mla	r5, r2, r3, r5
 801de1e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801de22:	9a00      	ldr	r2, [sp, #0]
 801de24:	fb04 540e 	mla	r4, r4, lr, r5
 801de28:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801de2c:	1235      	asrs	r5, r6, #8
 801de2e:	fb01 4100 	mla	r1, r1, r0, r4
 801de32:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801de36:	0a09      	lsrs	r1, r1, #8
 801de38:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801de3c:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801de40:	fb03 7101 	mla	r1, r3, r1, r7
 801de44:	fb0e 1e08 	mla	lr, lr, r8, r1
 801de48:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801de4c:	fb00 e101 	mla	r1, r0, r1, lr
 801de50:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801de54:	b287      	uxth	r7, r0
 801de56:	0a09      	lsrs	r1, r1, #8
 801de58:	437a      	muls	r2, r7
 801de5a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801de5e:	1c53      	adds	r3, r2, #1
 801de60:	4321      	orrs	r1, r4
 801de62:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801de66:	0c0a      	lsrs	r2, r1, #16
 801de68:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801de6c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801de70:	b2c8      	uxtb	r0, r1
 801de72:	fb12 f207 	smulbb	r2, r2, r7
 801de76:	fb14 f407 	smulbb	r4, r4, r7
 801de7a:	b2db      	uxtb	r3, r3
 801de7c:	fb10 f007 	smulbb	r0, r0, r7
 801de80:	fb05 2503 	mla	r5, r5, r3, r2
 801de84:	10f2      	asrs	r2, r6, #3
 801de86:	00f6      	lsls	r6, r6, #3
 801de88:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801de8c:	b2ad      	uxth	r5, r5
 801de8e:	b2f6      	uxtb	r6, r6
 801de90:	fb02 4203 	mla	r2, r2, r3, r4
 801de94:	fb06 0303 	mla	r3, r6, r3, r0
 801de98:	b294      	uxth	r4, r2
 801de9a:	b299      	uxth	r1, r3
 801de9c:	1c6b      	adds	r3, r5, #1
 801de9e:	1c62      	adds	r2, r4, #1
 801dea0:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801dea4:	1c4b      	adds	r3, r1, #1
 801dea6:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801deaa:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801deae:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801deb2:	0952      	lsrs	r2, r2, #5
 801deb4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801deb8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801debc:	432b      	orrs	r3, r5
 801debe:	4313      	orrs	r3, r2
 801dec0:	9a02      	ldr	r2, [sp, #8]
 801dec2:	8013      	strh	r3, [r2, #0]
 801dec4:	b005      	add	sp, #20
 801dec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801deca:	2500      	movs	r5, #0
 801decc:	e6e9      	b.n	801dca2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801dece:	2100      	movs	r1, #0
 801ded0:	460d      	mov	r5, r1
 801ded2:	e6f3      	b.n	801dcbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ded4:	2100      	movs	r1, #0
 801ded6:	e6f1      	b.n	801dcbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801ded8:	4631      	mov	r1, r6
 801deda:	e6ef      	b.n	801dcbc <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801dedc:	2400      	movs	r4, #0
 801dede:	e700      	b.n	801dce2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801dee0:	2200      	movs	r2, #0
 801dee2:	4614      	mov	r4, r2
 801dee4:	e70b      	b.n	801dcfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801dee6:	4602      	mov	r2, r0
 801dee8:	4604      	mov	r4, r0
 801deea:	e708      	b.n	801dcfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801deec:	2200      	movs	r2, #0
 801deee:	e706      	b.n	801dcfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801def0:	4632      	mov	r2, r6
 801def2:	e704      	b.n	801dcfe <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801def4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801def8:	b09f      	sub	sp, #124	; 0x7c
 801defa:	921b      	str	r2, [sp, #108]	; 0x6c
 801defc:	9309      	str	r3, [sp, #36]	; 0x24
 801defe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801df00:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801df04:	901d      	str	r0, [sp, #116]	; 0x74
 801df06:	931c      	str	r3, [sp, #112]	; 0x70
 801df08:	6850      	ldr	r0, [r2, #4]
 801df0a:	9119      	str	r1, [sp, #100]	; 0x64
 801df0c:	6812      	ldr	r2, [r2, #0]
 801df0e:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801df10:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801df14:	fb00 1303 	mla	r3, r0, r3, r1
 801df18:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801df1c:	930c      	str	r3, [sp, #48]	; 0x30
 801df1e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801df20:	681b      	ldr	r3, [r3, #0]
 801df22:	9312      	str	r3, [sp, #72]	; 0x48
 801df24:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801df26:	685e      	ldr	r6, [r3, #4]
 801df28:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801df2c:	3604      	adds	r6, #4
 801df2e:	930d      	str	r3, [sp, #52]	; 0x34
 801df30:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801df32:	2b00      	cmp	r3, #0
 801df34:	dc03      	bgt.n	801df3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801df36:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801df38:	2b00      	cmp	r3, #0
 801df3a:	f340 8387 	ble.w	801e64c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801df3e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801df40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801df44:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801df48:	1e48      	subs	r0, r1, #1
 801df4a:	1e57      	subs	r7, r2, #1
 801df4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df4e:	2b00      	cmp	r3, #0
 801df50:	f340 8194 	ble.w	801e27c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801df54:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801df56:	142b      	asrs	r3, r5, #16
 801df58:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801df5c:	d406      	bmi.n	801df6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df5e:	4584      	cmp	ip, r0
 801df60:	da04      	bge.n	801df6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df62:	2b00      	cmp	r3, #0
 801df64:	db02      	blt.n	801df6c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801df66:	42bb      	cmp	r3, r7
 801df68:	f2c0 8189 	blt.w	801e27e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801df6c:	f11c 0c01 	adds.w	ip, ip, #1
 801df70:	f100 8177 	bmi.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801df74:	4561      	cmp	r1, ip
 801df76:	f2c0 8174 	blt.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801df7a:	3301      	adds	r3, #1
 801df7c:	f100 8171 	bmi.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801df80:	429a      	cmp	r2, r3
 801df82:	f2c0 816e 	blt.w	801e262 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801df86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801df88:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801df8a:	931a      	str	r3, [sp, #104]	; 0x68
 801df8c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801df8e:	2b00      	cmp	r3, #0
 801df90:	f340 8193 	ble.w	801e2ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801df94:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801df96:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801df9a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801df9e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dfa2:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801dfa4:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801dfa8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801dfaa:	141b      	asrs	r3, r3, #16
 801dfac:	f100 81d6 	bmi.w	801e35c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dfb0:	f100 38ff 	add.w	r8, r0, #4294967295
 801dfb4:	4543      	cmp	r3, r8
 801dfb6:	f280 81d1 	bge.w	801e35c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dfba:	f1bc 0f00 	cmp.w	ip, #0
 801dfbe:	f2c0 81cd 	blt.w	801e35c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dfc2:	f10e 38ff 	add.w	r8, lr, #4294967295
 801dfc6:	45c4      	cmp	ip, r8
 801dfc8:	f280 81c8 	bge.w	801e35c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801dfcc:	b200      	sxth	r0, r0
 801dfce:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801dfd0:	fb0c 3300 	mla	r3, ip, r0, r3
 801dfd4:	eb04 0803 	add.w	r8, r4, r3
 801dfd8:	5ce3      	ldrb	r3, [r4, r3]
 801dfda:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801dfde:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801dfe2:	2a00      	cmp	r2, #0
 801dfe4:	f000 81af 	beq.w	801e346 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801dfe8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801dfec:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801dff0:	940e      	str	r4, [sp, #56]	; 0x38
 801dff2:	0e24      	lsrs	r4, r4, #24
 801dff4:	9415      	str	r4, [sp, #84]	; 0x54
 801dff6:	b179      	cbz	r1, 801e018 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801dff8:	eb08 0c00 	add.w	ip, r8, r0
 801dffc:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e000:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e004:	900a      	str	r0, [sp, #40]	; 0x28
 801e006:	0e00      	lsrs	r0, r0, #24
 801e008:	9013      	str	r0, [sp, #76]	; 0x4c
 801e00a:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801e00e:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e012:	900f      	str	r0, [sp, #60]	; 0x3c
 801e014:	0e00      	lsrs	r0, r0, #24
 801e016:	9016      	str	r0, [sp, #88]	; 0x58
 801e018:	b292      	uxth	r2, r2
 801e01a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e01c:	b289      	uxth	r1, r1
 801e01e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e020:	fb02 f901 	mul.w	r9, r2, r1
 801e024:	0112      	lsls	r2, r2, #4
 801e026:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801e02a:	eba2 0809 	sub.w	r8, r2, r9
 801e02e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e032:	b289      	uxth	r1, r1
 801e034:	fa1f f888 	uxth.w	r8, r8
 801e038:	1a52      	subs	r2, r2, r1
 801e03a:	fb08 f000 	mul.w	r0, r8, r0
 801e03e:	b292      	uxth	r2, r2
 801e040:	fb02 000e 	mla	r0, r2, lr, r0
 801e044:	fb01 0004 	mla	r0, r1, r4, r0
 801e048:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e04a:	fb09 0004 	mla	r0, r9, r4, r0
 801e04e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e052:	2800      	cmp	r0, #0
 801e054:	f000 80fa 	beq.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e058:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801e05c:	d01b      	beq.n	801e096 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801e05e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e062:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e066:	fb0e fa0a 	mul.w	sl, lr, sl
 801e06a:	fb0e fe03 	mul.w	lr, lr, r3
 801e06e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e072:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e076:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801e07a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e07e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e082:	4453      	add	r3, sl
 801e084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e088:	0a1b      	lsrs	r3, r3, #8
 801e08a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e08e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e092:	ea43 030c 	orr.w	r3, r3, ip
 801e096:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e098:	2cff      	cmp	r4, #255	; 0xff
 801e09a:	d021      	beq.n	801e0e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801e09c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e09e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e0a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e0a4:	fb04 fb0b 	mul.w	fp, r4, fp
 801e0a8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e0aa:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e0ae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e0b0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e0b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e0b8:	fb04 fa0a 	mul.w	sl, r4, sl
 801e0bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e0c0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e0c4:	44de      	add	lr, fp
 801e0c6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e0ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0ce:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e0d2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e0d6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e0da:	ea4e 040a 	orr.w	r4, lr, sl
 801e0de:	940e      	str	r4, [sp, #56]	; 0x38
 801e0e0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e0e2:	2cff      	cmp	r4, #255	; 0xff
 801e0e4:	d021      	beq.n	801e12a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e0e6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e0e8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e0ec:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e0ee:	fb04 fb0b 	mul.w	fp, r4, fp
 801e0f2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e0f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e0f8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e0fa:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e0fe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e102:	fb04 fa0a 	mul.w	sl, r4, sl
 801e106:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e10a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e10e:	44de      	add	lr, fp
 801e110:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e114:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e118:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e11c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e120:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e124:	ea4e 040a 	orr.w	r4, lr, sl
 801e128:	940a      	str	r4, [sp, #40]	; 0x28
 801e12a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e12c:	2cff      	cmp	r4, #255	; 0xff
 801e12e:	d021      	beq.n	801e174 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801e130:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e132:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801e136:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e138:	fb04 fb0b 	mul.w	fp, r4, fp
 801e13c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e13e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e142:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e144:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e148:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801e14c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e150:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e154:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801e158:	44de      	add	lr, fp
 801e15a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e15e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e162:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e166:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801e16a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e16e:	ea4e 040a 	orr.w	r4, lr, sl
 801e172:	940f      	str	r4, [sp, #60]	; 0x3c
 801e174:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e176:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801e17a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e17e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e182:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e184:	fb08 fc0c 	mul.w	ip, r8, ip
 801e188:	fb02 cc0e 	mla	ip, r2, lr, ip
 801e18c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e190:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e192:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e196:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801e19a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801e19c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e1a0:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801e1a4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e1a6:	fb08 f80e 	mul.w	r8, r8, lr
 801e1aa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1ae:	fb02 8303 	mla	r3, r2, r3, r8
 801e1b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e1b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e1b8:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e1bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801e1be:	fb01 330a 	mla	r3, r1, sl, r3
 801e1c2:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801e1c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801e1c8:	fb09 3901 	mla	r9, r9, r1, r3
 801e1cc:	883b      	ldrh	r3, [r7, #0]
 801e1ce:	4342      	muls	r2, r0
 801e1d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e1d4:	1c50      	adds	r0, r2, #1
 801e1d6:	1219      	asrs	r1, r3, #8
 801e1d8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801e1dc:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801e1e0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801e1e4:	ea4c 0c09 	orr.w	ip, ip, r9
 801e1e8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e1ec:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801e1f0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801e1f4:	b2c0      	uxtb	r0, r0
 801e1f6:	fb12 f204 	smulbb	r2, r2, r4
 801e1fa:	fa5f fc8c 	uxtb.w	ip, ip
 801e1fe:	fb1e fe04 	smulbb	lr, lr, r4
 801e202:	fb01 2100 	mla	r1, r1, r0, r2
 801e206:	10da      	asrs	r2, r3, #3
 801e208:	fb1c fc04 	smulbb	ip, ip, r4
 801e20c:	00db      	lsls	r3, r3, #3
 801e20e:	b289      	uxth	r1, r1
 801e210:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801e214:	b2db      	uxtb	r3, r3
 801e216:	fb02 e200 	mla	r2, r2, r0, lr
 801e21a:	fb03 c300 	mla	r3, r3, r0, ip
 801e21e:	b292      	uxth	r2, r2
 801e220:	fa1f fc83 	uxth.w	ip, r3
 801e224:	1c4b      	adds	r3, r1, #1
 801e226:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801e22a:	f10c 0301 	add.w	r3, ip, #1
 801e22e:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801e232:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801e236:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801e23a:	430b      	orrs	r3, r1
 801e23c:	1c51      	adds	r1, r2, #1
 801e23e:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e242:	0952      	lsrs	r2, r2, #5
 801e244:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e248:	4313      	orrs	r3, r2
 801e24a:	803b      	strh	r3, [r7, #0]
 801e24c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e24e:	3702      	adds	r7, #2
 801e250:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e252:	441a      	add	r2, r3
 801e254:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e256:	441d      	add	r5, r3
 801e258:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801e25a:	9229      	str	r2, [sp, #164]	; 0xa4
 801e25c:	3b01      	subs	r3, #1
 801e25e:	931a      	str	r3, [sp, #104]	; 0x68
 801e260:	e694      	b.n	801df8c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e262:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e264:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e266:	441c      	add	r4, r3
 801e268:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e26a:	441d      	add	r5, r3
 801e26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e26e:	9429      	str	r4, [sp, #164]	; 0xa4
 801e270:	3b01      	subs	r3, #1
 801e272:	9309      	str	r3, [sp, #36]	; 0x24
 801e274:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e276:	3302      	adds	r3, #2
 801e278:	930c      	str	r3, [sp, #48]	; 0x30
 801e27a:	e667      	b.n	801df4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e27c:	d024      	beq.n	801e2c8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801e27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e280:	982b      	ldr	r0, [sp, #172]	; 0xac
 801e282:	3b01      	subs	r3, #1
 801e284:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e286:	fb00 4003 	mla	r0, r0, r3, r4
 801e28a:	1400      	asrs	r0, r0, #16
 801e28c:	f53f ae7b 	bmi.w	801df86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e290:	3901      	subs	r1, #1
 801e292:	4288      	cmp	r0, r1
 801e294:	f6bf ae77 	bge.w	801df86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e298:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801e29a:	fb01 5303 	mla	r3, r1, r3, r5
 801e29e:	141b      	asrs	r3, r3, #16
 801e2a0:	f53f ae71 	bmi.w	801df86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e2a4:	3a01      	subs	r2, #1
 801e2a6:	4293      	cmp	r3, r2
 801e2a8:	f6bf ae6d 	bge.w	801df86 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801e2ac:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801e2b0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801e2b4:	f1bb 0f00 	cmp.w	fp, #0
 801e2b8:	dc70      	bgt.n	801e39c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801e2ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e2bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e2c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e2c6:	930c      	str	r3, [sp, #48]	; 0x30
 801e2c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e2ca:	2b00      	cmp	r3, #0
 801e2cc:	f340 81be 	ble.w	801e64c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801e2d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e2d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e2d6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e2da:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2de:	eef0 6a62 	vmov.f32	s13, s5
 801e2e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e2e6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2ee:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801e2f2:	eef0 6a43 	vmov.f32	s13, s6
 801e2f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e2fa:	ee16 5a90 	vmov	r5, s13
 801e2fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e302:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e306:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e30a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e30e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e312:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e316:	ee12 2a90 	vmov	r2, s5
 801e31a:	eef0 2a47 	vmov.f32	s5, s14
 801e31e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e322:	ee13 2a10 	vmov	r2, s6
 801e326:	932b      	str	r3, [sp, #172]	; 0xac
 801e328:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e32a:	eeb0 3a67 	vmov.f32	s6, s15
 801e32e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e332:	932c      	str	r3, [sp, #176]	; 0xb0
 801e334:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801e336:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801e338:	3b01      	subs	r3, #1
 801e33a:	9319      	str	r3, [sp, #100]	; 0x64
 801e33c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801e33e:	bf08      	it	eq
 801e340:	4613      	moveq	r3, r2
 801e342:	9309      	str	r3, [sp, #36]	; 0x24
 801e344:	e5f4      	b.n	801df30 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e346:	2900      	cmp	r1, #0
 801e348:	f43f ae66 	beq.w	801e018 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e34c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801e350:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801e354:	900a      	str	r0, [sp, #40]	; 0x28
 801e356:	0e00      	lsrs	r0, r0, #24
 801e358:	9013      	str	r0, [sp, #76]	; 0x4c
 801e35a:	e65d      	b.n	801e018 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801e35c:	f113 0801 	adds.w	r8, r3, #1
 801e360:	f53f af74 	bmi.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e364:	4540      	cmp	r0, r8
 801e366:	f6ff af71 	blt.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e36a:	f11c 0801 	adds.w	r8, ip, #1
 801e36e:	f53f af6d 	bmi.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e372:	45c6      	cmp	lr, r8
 801e374:	f6ff af6a 	blt.w	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e378:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801e37a:	b200      	sxth	r0, r0
 801e37c:	9302      	str	r3, [sp, #8]
 801e37e:	fa0f f38e 	sxth.w	r3, lr
 801e382:	9000      	str	r0, [sp, #0]
 801e384:	9301      	str	r3, [sp, #4]
 801e386:	4633      	mov	r3, r6
 801e388:	981d      	ldr	r0, [sp, #116]	; 0x74
 801e38a:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e38e:	e9cd c203 	strd	ip, r2, [sp, #12]
 801e392:	4639      	mov	r1, r7
 801e394:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e396:	f7ff fc63 	bl	801dc60 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801e39a:	e757      	b.n	801e24c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e39c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801e39e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e3a2:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801e3a4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e3a8:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801e3aa:	1427      	asrs	r7, r4, #16
 801e3ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801e3ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e3b2:	142b      	asrs	r3, r5, #16
 801e3b4:	fb01 7303 	mla	r3, r1, r3, r7
 801e3b8:	18e7      	adds	r7, r4, r3
 801e3ba:	5ce3      	ldrb	r3, [r4, r3]
 801e3bc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e3c0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e3c4:	2a00      	cmp	r2, #0
 801e3c6:	f000 8137 	beq.w	801e638 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801e3ca:	f897 e001 	ldrb.w	lr, [r7, #1]
 801e3ce:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801e3d2:	9410      	str	r4, [sp, #64]	; 0x40
 801e3d4:	0e24      	lsrs	r4, r4, #24
 801e3d6:	9417      	str	r4, [sp, #92]	; 0x5c
 801e3d8:	b170      	cbz	r0, 801e3f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e3da:	eb07 0e01 	add.w	lr, r7, r1
 801e3de:	5c79      	ldrb	r1, [r7, r1]
 801e3e0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e3e4:	910b      	str	r1, [sp, #44]	; 0x2c
 801e3e6:	0e09      	lsrs	r1, r1, #24
 801e3e8:	9114      	str	r1, [sp, #80]	; 0x50
 801e3ea:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801e3ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e3f2:	9111      	str	r1, [sp, #68]	; 0x44
 801e3f4:	0e09      	lsrs	r1, r1, #24
 801e3f6:	9118      	str	r1, [sp, #96]	; 0x60
 801e3f8:	b292      	uxth	r2, r2
 801e3fa:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801e3fc:	b280      	uxth	r0, r0
 801e3fe:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e400:	fb02 f800 	mul.w	r8, r2, r0
 801e404:	0112      	lsls	r2, r2, #4
 801e406:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801e40a:	eba2 0e08 	sub.w	lr, r2, r8
 801e40e:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801e412:	b280      	uxth	r0, r0
 801e414:	fa1f fe8e 	uxth.w	lr, lr
 801e418:	1a12      	subs	r2, r2, r0
 801e41a:	fb0e f101 	mul.w	r1, lr, r1
 801e41e:	b292      	uxth	r2, r2
 801e420:	fb02 110c 	mla	r1, r2, ip, r1
 801e424:	fb00 1104 	mla	r1, r0, r4, r1
 801e428:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e42a:	fb08 1104 	mla	r1, r8, r4, r1
 801e42e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e432:	2900      	cmp	r1, #0
 801e434:	f000 80f5 	beq.w	801e622 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801e438:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e43c:	d019      	beq.n	801e472 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801e43e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801e442:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e446:	fb0c fa0a 	mul.w	sl, ip, sl
 801e44a:	fb0c fc03 	mul.w	ip, ip, r3
 801e44e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e452:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801e456:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801e45a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e45e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e462:	4453      	add	r3, sl
 801e464:	0a3f      	lsrs	r7, r7, #8
 801e466:	0a1b      	lsrs	r3, r3, #8
 801e468:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e46c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801e470:	433b      	orrs	r3, r7
 801e472:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e474:	2cff      	cmp	r4, #255	; 0xff
 801e476:	d020      	beq.n	801e4ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801e478:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e47a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e47e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e480:	4367      	muls	r7, r4
 801e482:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e484:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e488:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e48c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801e48e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e492:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e496:	fb04 fa0a 	mul.w	sl, r4, sl
 801e49a:	44bc      	add	ip, r7
 801e49c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e4a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4a4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e4a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e4ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e4b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e4b4:	ea4c 040a 	orr.w	r4, ip, sl
 801e4b8:	9410      	str	r4, [sp, #64]	; 0x40
 801e4ba:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e4bc:	2cff      	cmp	r4, #255	; 0xff
 801e4be:	d020      	beq.n	801e502 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801e4c0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e4c2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e4c6:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e4c8:	4367      	muls	r7, r4
 801e4ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e4cc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e4d0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e4d4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e4d6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e4da:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e4de:	fb04 fa0a 	mul.w	sl, r4, sl
 801e4e2:	44bc      	add	ip, r7
 801e4e4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e4e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e4ec:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e4f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e4f4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e4f8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e4fc:	ea4c 040a 	orr.w	r4, ip, sl
 801e500:	940b      	str	r4, [sp, #44]	; 0x2c
 801e502:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e504:	2cff      	cmp	r4, #255	; 0xff
 801e506:	d020      	beq.n	801e54a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801e508:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e50a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e50e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e510:	4367      	muls	r7, r4
 801e512:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e514:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e518:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801e51c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801e51e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e522:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e526:	fb04 fa0a 	mul.w	sl, r4, sl
 801e52a:	44bc      	add	ip, r7
 801e52c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801e530:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e534:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e538:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e53c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e540:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801e544:	ea4c 040a 	orr.w	r4, ip, sl
 801e548:	9411      	str	r4, [sp, #68]	; 0x44
 801e54a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e54c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801e550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e554:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801e558:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e55a:	fb0e f707 	mul.w	r7, lr, r7
 801e55e:	fb02 770c 	mla	r7, r2, ip, r7
 801e562:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e566:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801e568:	fb00 770c 	mla	r7, r0, ip, r7
 801e56c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801e570:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e572:	fb08 770c 	mla	r7, r8, ip, r7
 801e576:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801e57a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e57c:	fb0e fe0c 	mul.w	lr, lr, ip
 801e580:	0a3f      	lsrs	r7, r7, #8
 801e582:	fb02 e303 	mla	r3, r2, r3, lr
 801e586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e588:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801e58c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801e590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e592:	fb00 330a 	mla	r3, r0, sl, r3
 801e596:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801e59a:	f8b9 0000 	ldrh.w	r0, [r9]
 801e59e:	fb08 3c0c 	mla	ip, r8, ip, r3
 801e5a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e5a4:	1202      	asrs	r2, r0, #8
 801e5a6:	434b      	muls	r3, r1
 801e5a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e5ac:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801e5b0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801e5b4:	1c59      	adds	r1, r3, #1
 801e5b6:	ea47 070c 	orr.w	r7, r7, ip
 801e5ba:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e5be:	0c3b      	lsrs	r3, r7, #16
 801e5c0:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e5c4:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801e5c8:	b2ff      	uxtb	r7, r7
 801e5ca:	fb13 f304 	smulbb	r3, r3, r4
 801e5ce:	b2c9      	uxtb	r1, r1
 801e5d0:	fb1c fc04 	smulbb	ip, ip, r4
 801e5d4:	fb02 3201 	mla	r2, r2, r1, r3
 801e5d8:	10c3      	asrs	r3, r0, #3
 801e5da:	fb17 f704 	smulbb	r7, r7, r4
 801e5de:	00c0      	lsls	r0, r0, #3
 801e5e0:	b292      	uxth	r2, r2
 801e5e2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801e5e6:	b2c0      	uxtb	r0, r0
 801e5e8:	fb03 c301 	mla	r3, r3, r1, ip
 801e5ec:	f102 0c01 	add.w	ip, r2, #1
 801e5f0:	fb00 7001 	mla	r0, r0, r1, r7
 801e5f4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e5f8:	b280      	uxth	r0, r0
 801e5fa:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801e5fe:	b29b      	uxth	r3, r3
 801e600:	1c42      	adds	r2, r0, #1
 801e602:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801e606:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801e60a:	ea42 020c 	orr.w	r2, r2, ip
 801e60e:	f103 0c01 	add.w	ip, r3, #1
 801e612:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801e616:	095b      	lsrs	r3, r3, #5
 801e618:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e61c:	431a      	orrs	r2, r3
 801e61e:	f8a9 2000 	strh.w	r2, [r9]
 801e622:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801e624:	f109 0902 	add.w	r9, r9, #2
 801e628:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e62a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e62e:	441a      	add	r2, r3
 801e630:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e632:	9229      	str	r2, [sp, #164]	; 0xa4
 801e634:	441d      	add	r5, r3
 801e636:	e63d      	b.n	801e2b4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801e638:	2800      	cmp	r0, #0
 801e63a:	f43f aedd 	beq.w	801e3f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e63e:	5c79      	ldrb	r1, [r7, r1]
 801e640:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e644:	910b      	str	r1, [sp, #44]	; 0x2c
 801e646:	0e09      	lsrs	r1, r1, #24
 801e648:	9114      	str	r1, [sp, #80]	; 0x50
 801e64a:	e6d5      	b.n	801e3f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801e64c:	b01f      	add	sp, #124	; 0x7c
 801e64e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e652 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801e652:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e656:	b089      	sub	sp, #36	; 0x24
 801e658:	9101      	str	r1, [sp, #4]
 801e65a:	9801      	ldr	r0, [sp, #4]
 801e65c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801e660:	8800      	ldrh	r0, [r0, #0]
 801e662:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801e666:	1206      	asrs	r6, r0, #8
 801e668:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801e66c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801e670:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e674:	9602      	str	r6, [sp, #8]
 801e676:	10c6      	asrs	r6, r0, #3
 801e678:	00c0      	lsls	r0, r0, #3
 801e67a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e67e:	b2c0      	uxtb	r0, r0
 801e680:	9603      	str	r6, [sp, #12]
 801e682:	9004      	str	r0, [sp, #16]
 801e684:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801e688:	fb07 100c 	mla	r0, r7, ip, r1
 801e68c:	2f00      	cmp	r7, #0
 801e68e:	eb02 0e00 	add.w	lr, r2, r0
 801e692:	f2c0 810a 	blt.w	801e8aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e696:	45b8      	cmp	r8, r7
 801e698:	f340 8107 	ble.w	801e8aa <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801e69c:	2900      	cmp	r1, #0
 801e69e:	f2c0 8102 	blt.w	801e8a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e6a2:	458c      	cmp	ip, r1
 801e6a4:	f340 80ff 	ble.w	801e8a6 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801e6a8:	5c12      	ldrb	r2, [r2, r0]
 801e6aa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801e6ae:	1c4a      	adds	r2, r1, #1
 801e6b0:	f100 80fe 	bmi.w	801e8b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e6b4:	4594      	cmp	ip, r2
 801e6b6:	f340 80fb 	ble.w	801e8b0 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801e6ba:	2d00      	cmp	r5, #0
 801e6bc:	f000 80fa 	beq.w	801e8b4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801e6c0:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801e6c4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e6c8:	3701      	adds	r7, #1
 801e6ca:	f100 80f7 	bmi.w	801e8bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e6ce:	45b8      	cmp	r8, r7
 801e6d0:	f340 80f4 	ble.w	801e8bc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801e6d4:	2c00      	cmp	r4, #0
 801e6d6:	f000 80f4 	beq.w	801e8c2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801e6da:	2900      	cmp	r1, #0
 801e6dc:	eb0e 020c 	add.w	r2, lr, ip
 801e6e0:	f2c0 80ea 	blt.w	801e8b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e6e4:	458c      	cmp	ip, r1
 801e6e6:	f340 80e7 	ble.w	801e8b8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801e6ea:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801e6ee:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801e6f2:	3101      	adds	r1, #1
 801e6f4:	f100 80e8 	bmi.w	801e8c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e6f8:	458c      	cmp	ip, r1
 801e6fa:	f340 80e5 	ble.w	801e8c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801e6fe:	2d00      	cmp	r5, #0
 801e700:	f000 80e4 	beq.w	801e8cc <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801e704:	7852      	ldrb	r2, [r2, #1]
 801e706:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801e70a:	0e0b      	lsrs	r3, r1, #24
 801e70c:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801e710:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801e714:	9300      	str	r3, [sp, #0]
 801e716:	b2a4      	uxth	r4, r4
 801e718:	b2ab      	uxth	r3, r5
 801e71a:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801e71e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801e722:	fb03 f904 	mul.w	r9, r3, r4
 801e726:	011b      	lsls	r3, r3, #4
 801e728:	fb0a f505 	mul.w	r5, sl, r5
 801e72c:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801e730:	eba3 0e09 	sub.w	lr, r3, r9
 801e734:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801e738:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801e73c:	0a28      	lsrs	r0, r5, #8
 801e73e:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801e742:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801e746:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e74a:	fb0a f303 	mul.w	r3, sl, r3
 801e74e:	fb08 f707 	mul.w	r7, r8, r7
 801e752:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801e756:	4405      	add	r5, r0
 801e758:	fb08 fc0c 	mul.w	ip, r8, ip
 801e75c:	b2a4      	uxth	r4, r4
 801e75e:	0a2d      	lsrs	r5, r5, #8
 801e760:	fa1f fe8e 	uxth.w	lr, lr
 801e764:	1b12      	subs	r2, r2, r4
 801e766:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801e76a:	b292      	uxth	r2, r2
 801e76c:	9005      	str	r0, [sp, #20]
 801e76e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801e772:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e776:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801e77a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801e77e:	0a1b      	lsrs	r3, r3, #8
 801e780:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e784:	9306      	str	r3, [sp, #24]
 801e786:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801e78a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e78e:	4460      	add	r0, ip
 801e790:	fb0b f303 	mul.w	r3, fp, r3
 801e794:	fb0b f606 	mul.w	r6, fp, r6
 801e798:	0a00      	lsrs	r0, r0, #8
 801e79a:	0a1d      	lsrs	r5, r3, #8
 801e79c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801e7a0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801e7a4:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e7a8:	441d      	add	r5, r3
 801e7aa:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801e7ae:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e7b2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801e7b6:	0a2d      	lsrs	r5, r5, #8
 801e7b8:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801e7bc:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801e7c0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e7c4:	0a36      	lsrs	r6, r6, #8
 801e7c6:	0a1b      	lsrs	r3, r3, #8
 801e7c8:	fb05 f50e 	mul.w	r5, r5, lr
 801e7cc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801e7d0:	9307      	str	r3, [sp, #28]
 801e7d2:	0e0b      	lsrs	r3, r1, #24
 801e7d4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e7d8:	fb0e f606 	mul.w	r6, lr, r6
 801e7dc:	435f      	muls	r7, r3
 801e7de:	4359      	muls	r1, r3
 801e7e0:	9b05      	ldr	r3, [sp, #20]
 801e7e2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e7e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801e7ea:	fb03 5502 	mla	r5, r3, r2, r5
 801e7ee:	9b06      	ldr	r3, [sp, #24]
 801e7f0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e7f4:	fb0e fe0b 	mul.w	lr, lr, fp
 801e7f8:	44bc      	add	ip, r7
 801e7fa:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801e7fe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e802:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801e806:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801e80a:	0a09      	lsrs	r1, r1, #8
 801e80c:	fb0c 5509 	mla	r5, ip, r9, r5
 801e810:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801e814:	fb00 5504 	mla	r5, r0, r4, r5
 801e818:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801e81c:	9b07      	ldr	r3, [sp, #28]
 801e81e:	fb02 6000 	mla	r0, r2, r0, r6
 801e822:	0a2d      	lsrs	r5, r5, #8
 801e824:	fb02 e20a 	mla	r2, r2, sl, lr
 801e828:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801e82c:	fb09 0001 	mla	r0, r9, r1, r0
 801e830:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801e834:	fb04 0003 	mla	r0, r4, r3, r0
 801e838:	9b00      	ldr	r3, [sp, #0]
 801e83a:	fb04 2408 	mla	r4, r4, r8, r2
 801e83e:	9a04      	ldr	r2, [sp, #16]
 801e840:	0a00      	lsrs	r0, r0, #8
 801e842:	fb09 4903 	mla	r9, r9, r3, r4
 801e846:	9b02      	ldr	r3, [sp, #8]
 801e848:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801e84c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801e850:	4305      	orrs	r5, r0
 801e852:	fa5f f989 	uxtb.w	r9, r9
 801e856:	fb03 f109 	mul.w	r1, r3, r9
 801e85a:	9b03      	ldr	r3, [sp, #12]
 801e85c:	fb03 f309 	mul.w	r3, r3, r9
 801e860:	fb02 f909 	mul.w	r9, r2, r9
 801e864:	1c4a      	adds	r2, r1, #1
 801e866:	1c58      	adds	r0, r3, #1
 801e868:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801e86c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e870:	0c2a      	lsrs	r2, r5, #16
 801e872:	0a2b      	lsrs	r3, r5, #8
 801e874:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801e878:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e87c:	0212      	lsls	r2, r2, #8
 801e87e:	00db      	lsls	r3, r3, #3
 801e880:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801e884:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e888:	4313      	orrs	r3, r2
 801e88a:	f109 0201 	add.w	r2, r9, #1
 801e88e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801e892:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801e896:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801e89a:	431d      	orrs	r5, r3
 801e89c:	9b01      	ldr	r3, [sp, #4]
 801e89e:	801d      	strh	r5, [r3, #0]
 801e8a0:	b009      	add	sp, #36	; 0x24
 801e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e8a6:	2000      	movs	r0, #0
 801e8a8:	e701      	b.n	801e6ae <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801e8aa:	2600      	movs	r6, #0
 801e8ac:	4630      	mov	r0, r6
 801e8ae:	e70b      	b.n	801e6c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e8b0:	2600      	movs	r6, #0
 801e8b2:	e709      	b.n	801e6c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e8b4:	462e      	mov	r6, r5
 801e8b6:	e707      	b.n	801e6c8 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801e8b8:	2700      	movs	r7, #0
 801e8ba:	e71a      	b.n	801e6f2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801e8bc:	2100      	movs	r1, #0
 801e8be:	460f      	mov	r7, r1
 801e8c0:	e723      	b.n	801e70a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e8c2:	4621      	mov	r1, r4
 801e8c4:	4627      	mov	r7, r4
 801e8c6:	e720      	b.n	801e70a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e8c8:	2100      	movs	r1, #0
 801e8ca:	e71e      	b.n	801e70a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801e8cc:	4629      	mov	r1, r5
 801e8ce:	e71c      	b.n	801e70a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

0801e8d0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8d4:	b09b      	sub	sp, #108	; 0x6c
 801e8d6:	9218      	str	r2, [sp, #96]	; 0x60
 801e8d8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801e8da:	9019      	str	r0, [sp, #100]	; 0x64
 801e8dc:	9116      	str	r1, [sp, #88]	; 0x58
 801e8de:	6850      	ldr	r0, [r2, #4]
 801e8e0:	9307      	str	r3, [sp, #28]
 801e8e2:	6812      	ldr	r2, [r2, #0]
 801e8e4:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801e8e6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801e8ea:	fb00 1303 	mla	r3, r0, r3, r1
 801e8ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e8f2:	930a      	str	r3, [sp, #40]	; 0x28
 801e8f4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e8fc:	685e      	ldr	r6, [r3, #4]
 801e8fe:	3604      	adds	r6, #4
 801e900:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801e902:	2b00      	cmp	r3, #0
 801e904:	dc03      	bgt.n	801e90e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e906:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e908:	2b00      	cmp	r3, #0
 801e90a:	f340 8373 	ble.w	801eff4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801e90e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e910:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e914:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e918:	1e48      	subs	r0, r1, #1
 801e91a:	1e57      	subs	r7, r2, #1
 801e91c:	9b07      	ldr	r3, [sp, #28]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	f340 818f 	ble.w	801ec42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801e924:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801e926:	142b      	asrs	r3, r5, #16
 801e928:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801e92c:	d406      	bmi.n	801e93c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e92e:	4584      	cmp	ip, r0
 801e930:	da04      	bge.n	801e93c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e932:	2b00      	cmp	r3, #0
 801e934:	db02      	blt.n	801e93c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e936:	42bb      	cmp	r3, r7
 801e938:	f2c0 8184 	blt.w	801ec44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801e93c:	f11c 0c01 	adds.w	ip, ip, #1
 801e940:	f100 8172 	bmi.w	801ec28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e944:	4561      	cmp	r1, ip
 801e946:	f2c0 816f 	blt.w	801ec28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e94a:	3301      	adds	r3, #1
 801e94c:	f100 816c 	bmi.w	801ec28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e950:	429a      	cmp	r2, r3
 801e952:	f2c0 8169 	blt.w	801ec28 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801e956:	9b07      	ldr	r3, [sp, #28]
 801e958:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801e95a:	9317      	str	r3, [sp, #92]	; 0x5c
 801e95c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801e95e:	2b00      	cmp	r3, #0
 801e960:	f340 818e 	ble.w	801ec80 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801e964:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e966:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801e96a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801e96e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801e972:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801e974:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801e978:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801e97a:	141b      	asrs	r3, r3, #16
 801e97c:	f100 81d1 	bmi.w	801ed22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e980:	f101 38ff 	add.w	r8, r1, #4294967295
 801e984:	4543      	cmp	r3, r8
 801e986:	f280 81cc 	bge.w	801ed22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e98a:	f1bc 0f00 	cmp.w	ip, #0
 801e98e:	f2c0 81c8 	blt.w	801ed22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e992:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e996:	45c4      	cmp	ip, r8
 801e998:	f280 81c3 	bge.w	801ed22 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801e99c:	b209      	sxth	r1, r1
 801e99e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e9a0:	fb0c 3301 	mla	r3, ip, r1, r3
 801e9a4:	eb04 0803 	add.w	r8, r4, r3
 801e9a8:	5ce3      	ldrb	r3, [r4, r3]
 801e9aa:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801e9ae:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e9b2:	2a00      	cmp	r2, #0
 801e9b4:	f000 81aa 	beq.w	801ed0c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801e9b8:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e9bc:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801e9c0:	940b      	str	r4, [sp, #44]	; 0x2c
 801e9c2:	0e24      	lsrs	r4, r4, #24
 801e9c4:	9412      	str	r4, [sp, #72]	; 0x48
 801e9c6:	b178      	cbz	r0, 801e9e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e9c8:	eb08 0c01 	add.w	ip, r8, r1
 801e9cc:	f818 1001 	ldrb.w	r1, [r8, r1]
 801e9d0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e9d4:	9108      	str	r1, [sp, #32]
 801e9d6:	0e09      	lsrs	r1, r1, #24
 801e9d8:	9110      	str	r1, [sp, #64]	; 0x40
 801e9da:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e9de:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801e9e2:	910c      	str	r1, [sp, #48]	; 0x30
 801e9e4:	0e09      	lsrs	r1, r1, #24
 801e9e6:	9113      	str	r1, [sp, #76]	; 0x4c
 801e9e8:	b292      	uxth	r2, r2
 801e9ea:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e9ec:	b280      	uxth	r0, r0
 801e9ee:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e9f0:	fb02 f900 	mul.w	r9, r2, r0
 801e9f4:	0112      	lsls	r2, r2, #4
 801e9f6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e9fa:	eba2 0809 	sub.w	r8, r2, r9
 801e9fe:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801ea02:	b280      	uxth	r0, r0
 801ea04:	fa1f f888 	uxth.w	r8, r8
 801ea08:	1a12      	subs	r2, r2, r0
 801ea0a:	fb08 f101 	mul.w	r1, r8, r1
 801ea0e:	b292      	uxth	r2, r2
 801ea10:	fb02 110e 	mla	r1, r2, lr, r1
 801ea14:	fb00 1104 	mla	r1, r0, r4, r1
 801ea18:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea1a:	fb09 1104 	mla	r1, r9, r4, r1
 801ea1e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ea22:	2900      	cmp	r1, #0
 801ea24:	f000 80f5 	beq.w	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ea28:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801ea2c:	d01b      	beq.n	801ea66 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801ea2e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ea32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ea36:	fb0e fa0a 	mul.w	sl, lr, sl
 801ea3a:	fb0e fe03 	mul.w	lr, lr, r3
 801ea3e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ea42:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ea46:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801ea4a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ea4e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ea52:	4453      	add	r3, sl
 801ea54:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ea58:	0a1b      	lsrs	r3, r3, #8
 801ea5a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ea5e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ea62:	ea43 030c 	orr.w	r3, r3, ip
 801ea66:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea68:	2cff      	cmp	r4, #255	; 0xff
 801ea6a:	d021      	beq.n	801eab0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801ea6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ea6e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801ea72:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea74:	fb04 fb0b 	mul.w	fp, r4, fp
 801ea78:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ea7a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ea7e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ea80:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ea84:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ea88:	fb04 fa0a 	mul.w	sl, r4, sl
 801ea8c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801ea90:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801ea94:	44de      	add	lr, fp
 801ea96:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ea9a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea9e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eaa2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eaa6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eaaa:	ea4e 040a 	orr.w	r4, lr, sl
 801eaae:	940b      	str	r4, [sp, #44]	; 0x2c
 801eab0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eab2:	2cff      	cmp	r4, #255	; 0xff
 801eab4:	d021      	beq.n	801eafa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801eab6:	9c08      	ldr	r4, [sp, #32]
 801eab8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eabc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eabe:	fb04 fb0b 	mul.w	fp, r4, fp
 801eac2:	9c08      	ldr	r4, [sp, #32]
 801eac4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eac8:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801eaca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eace:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801ead2:	fb04 fa0a 	mul.w	sl, r4, sl
 801ead6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eada:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eade:	44de      	add	lr, fp
 801eae0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eae4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eae8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eaec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eaf0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eaf4:	ea4e 040a 	orr.w	r4, lr, sl
 801eaf8:	9408      	str	r4, [sp, #32]
 801eafa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eafc:	2cff      	cmp	r4, #255	; 0xff
 801eafe:	d021      	beq.n	801eb44 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801eb00:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb02:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801eb06:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb08:	fb04 fb0b 	mul.w	fp, r4, fp
 801eb0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb0e:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eb12:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801eb14:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801eb18:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801eb1c:	fb04 fa0a 	mul.w	sl, r4, sl
 801eb20:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb24:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801eb28:	44de      	add	lr, fp
 801eb2a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801eb2e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801eb32:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eb36:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801eb3a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eb3e:	ea4e 040a 	orr.w	r4, lr, sl
 801eb42:	940c      	str	r4, [sp, #48]	; 0x30
 801eb44:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eb46:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801eb4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801eb4e:	43c9      	mvns	r1, r1
 801eb50:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801eb54:	9c08      	ldr	r4, [sp, #32]
 801eb56:	fb08 fc0c 	mul.w	ip, r8, ip
 801eb5a:	fb02 cc0e 	mla	ip, r2, lr, ip
 801eb5e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eb62:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb64:	fb00 cc0e 	mla	ip, r0, lr, ip
 801eb68:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801eb6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801eb6e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801eb72:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801eb76:	fb08 f80e 	mul.w	r8, r8, lr
 801eb7a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eb7e:	fa5f fe81 	uxtb.w	lr, r1
 801eb82:	fb02 8303 	mla	r3, r2, r3, r8
 801eb86:	9a08      	ldr	r2, [sp, #32]
 801eb88:	f8b7 8000 	ldrh.w	r8, [r7]
 801eb8c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eb90:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801eb94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801eb96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801eb9a:	fb00 330a 	mla	r3, r0, sl, r3
 801eb9e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801eba2:	ea4f 2228 	mov.w	r2, r8, asr #8
 801eba6:	fb09 3900 	mla	r9, r9, r0, r3
 801ebaa:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801ebae:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ebb2:	b2c9      	uxtb	r1, r1
 801ebb4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ebb8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801ebbc:	fb02 f20e 	mul.w	r2, r2, lr
 801ebc0:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801ebc4:	fb00 f00e 	mul.w	r0, r0, lr
 801ebc8:	1c53      	adds	r3, r2, #1
 801ebca:	fb01 f10e 	mul.w	r1, r1, lr
 801ebce:	ea4c 0c09 	orr.w	ip, ip, r9
 801ebd2:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ebd6:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801ebda:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ebde:	4a60      	ldr	r2, [pc, #384]	; (801ed60 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801ebe0:	b2db      	uxtb	r3, r3
 801ebe2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801ebe6:	1c43      	adds	r3, r0, #1
 801ebe8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801ebec:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801ebf0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ebf4:	00db      	lsls	r3, r3, #3
 801ebf6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ebfa:	4313      	orrs	r3, r2
 801ebfc:	1c4a      	adds	r2, r1, #1
 801ebfe:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ec02:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801ec06:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801ec0a:	ea4c 0c03 	orr.w	ip, ip, r3
 801ec0e:	f8a7 c000 	strh.w	ip, [r7]
 801ec12:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec14:	3702      	adds	r7, #2
 801ec16:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801ec18:	441a      	add	r2, r3
 801ec1a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec1c:	441d      	add	r5, r3
 801ec1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801ec20:	9225      	str	r2, [sp, #148]	; 0x94
 801ec22:	3b01      	subs	r3, #1
 801ec24:	9317      	str	r3, [sp, #92]	; 0x5c
 801ec26:	e699      	b.n	801e95c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801ec28:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801ec2a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ec2c:	441c      	add	r4, r3
 801ec2e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801ec30:	441d      	add	r5, r3
 801ec32:	9b07      	ldr	r3, [sp, #28]
 801ec34:	9425      	str	r4, [sp, #148]	; 0x94
 801ec36:	3b01      	subs	r3, #1
 801ec38:	9307      	str	r3, [sp, #28]
 801ec3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec3c:	3302      	adds	r3, #2
 801ec3e:	930a      	str	r3, [sp, #40]	; 0x28
 801ec40:	e66c      	b.n	801e91c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801ec42:	d024      	beq.n	801ec8e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801ec44:	9b07      	ldr	r3, [sp, #28]
 801ec46:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801ec48:	3b01      	subs	r3, #1
 801ec4a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ec4c:	fb00 4003 	mla	r0, r0, r3, r4
 801ec50:	1400      	asrs	r0, r0, #16
 801ec52:	f53f ae80 	bmi.w	801e956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec56:	3901      	subs	r1, #1
 801ec58:	4288      	cmp	r0, r1
 801ec5a:	f6bf ae7c 	bge.w	801e956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec5e:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801ec60:	fb01 5303 	mla	r3, r1, r3, r5
 801ec64:	141b      	asrs	r3, r3, #16
 801ec66:	f53f ae76 	bmi.w	801e956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec6a:	3a01      	subs	r2, #1
 801ec6c:	4293      	cmp	r3, r2
 801ec6e:	f6bf ae72 	bge.w	801e956 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801ec72:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ec76:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801ec7a:	f1bb 0f00 	cmp.w	fp, #0
 801ec7e:	dc71      	bgt.n	801ed64 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801ec80:	9b07      	ldr	r3, [sp, #28]
 801ec82:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ec86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ec88:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ec8c:	930a      	str	r3, [sp, #40]	; 0x28
 801ec8e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	f340 81af 	ble.w	801eff4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801ec96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ec9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ec9c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eca0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eca4:	eef0 6a62 	vmov.f32	s13, s5
 801eca8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ecac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ecb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecb4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801ecb8:	eef0 6a43 	vmov.f32	s13, s6
 801ecbc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ecc0:	ee16 5a90 	vmov	r5, s13
 801ecc4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ecc8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ecd0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ecd4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ecd8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ecdc:	ee12 2a90 	vmov	r2, s5
 801ece0:	eef0 2a47 	vmov.f32	s5, s14
 801ece4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ece8:	ee13 2a10 	vmov	r2, s6
 801ecec:	9327      	str	r3, [sp, #156]	; 0x9c
 801ecee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ecf0:	eeb0 3a67 	vmov.f32	s6, s15
 801ecf4:	fb92 f3f3 	sdiv	r3, r2, r3
 801ecf8:	9328      	str	r3, [sp, #160]	; 0xa0
 801ecfa:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801ecfc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801ecfe:	3b01      	subs	r3, #1
 801ed00:	9316      	str	r3, [sp, #88]	; 0x58
 801ed02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ed04:	bf08      	it	eq
 801ed06:	4613      	moveq	r3, r2
 801ed08:	9307      	str	r3, [sp, #28]
 801ed0a:	e5f9      	b.n	801e900 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801ed0c:	2800      	cmp	r0, #0
 801ed0e:	f43f ae6b 	beq.w	801e9e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ed12:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ed16:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ed1a:	9108      	str	r1, [sp, #32]
 801ed1c:	0e09      	lsrs	r1, r1, #24
 801ed1e:	9110      	str	r1, [sp, #64]	; 0x40
 801ed20:	e662      	b.n	801e9e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ed22:	f113 0801 	adds.w	r8, r3, #1
 801ed26:	f53f af74 	bmi.w	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ed2a:	4541      	cmp	r1, r8
 801ed2c:	f6ff af71 	blt.w	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ed30:	f11c 0801 	adds.w	r8, ip, #1
 801ed34:	f53f af6d 	bmi.w	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ed38:	45c6      	cmp	lr, r8
 801ed3a:	f6ff af6a 	blt.w	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ed3e:	b209      	sxth	r1, r1
 801ed40:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801ed44:	fa0f f38e 	sxth.w	r3, lr
 801ed48:	9100      	str	r1, [sp, #0]
 801ed4a:	4639      	mov	r1, r7
 801ed4c:	9301      	str	r3, [sp, #4]
 801ed4e:	4633      	mov	r3, r6
 801ed50:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801ed54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801ed56:	9819      	ldr	r0, [sp, #100]	; 0x64
 801ed58:	f7ff fc7b 	bl	801e652 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801ed5c:	e759      	b.n	801ec12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801ed5e:	bf00      	nop
 801ed60:	fffff800 	.word	0xfffff800
 801ed64:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801ed66:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ed6a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801ed6c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ed70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ed72:	1427      	asrs	r7, r4, #16
 801ed74:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801ed76:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ed7a:	142b      	asrs	r3, r5, #16
 801ed7c:	fb01 7303 	mla	r3, r1, r3, r7
 801ed80:	18e7      	adds	r7, r4, r3
 801ed82:	5ce3      	ldrb	r3, [r4, r3]
 801ed84:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801ed88:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801ed8c:	2a00      	cmp	r2, #0
 801ed8e:	f000 8127 	beq.w	801efe0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801ed92:	f897 e001 	ldrb.w	lr, [r7, #1]
 801ed96:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801ed9a:	940d      	str	r4, [sp, #52]	; 0x34
 801ed9c:	0e24      	lsrs	r4, r4, #24
 801ed9e:	9414      	str	r4, [sp, #80]	; 0x50
 801eda0:	b170      	cbz	r0, 801edc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801eda2:	eb07 0e01 	add.w	lr, r7, r1
 801eda6:	5c79      	ldrb	r1, [r7, r1]
 801eda8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801edac:	9109      	str	r1, [sp, #36]	; 0x24
 801edae:	0e09      	lsrs	r1, r1, #24
 801edb0:	9111      	str	r1, [sp, #68]	; 0x44
 801edb2:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801edb6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801edba:	910e      	str	r1, [sp, #56]	; 0x38
 801edbc:	0e09      	lsrs	r1, r1, #24
 801edbe:	9115      	str	r1, [sp, #84]	; 0x54
 801edc0:	b292      	uxth	r2, r2
 801edc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801edc4:	b280      	uxth	r0, r0
 801edc6:	fb02 f800 	mul.w	r8, r2, r0
 801edca:	0112      	lsls	r2, r2, #4
 801edcc:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801edd0:	eba2 0e08 	sub.w	lr, r2, r8
 801edd4:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801edd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801edda:	b280      	uxth	r0, r0
 801eddc:	fa1f fe8e 	uxth.w	lr, lr
 801ede0:	1a09      	subs	r1, r1, r0
 801ede2:	fb0e f202 	mul.w	r2, lr, r2
 801ede6:	b289      	uxth	r1, r1
 801ede8:	fb01 220c 	mla	r2, r1, ip, r2
 801edec:	fb00 2204 	mla	r2, r0, r4, r2
 801edf0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801edf2:	fb08 2204 	mla	r2, r8, r4, r2
 801edf6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801edfa:	2a00      	cmp	r2, #0
 801edfc:	f000 80e5 	beq.w	801efca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801ee00:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801ee04:	d019      	beq.n	801ee3a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801ee06:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801ee0a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ee0e:	fb0c fa0a 	mul.w	sl, ip, sl
 801ee12:	fb0c fc03 	mul.w	ip, ip, r3
 801ee16:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ee1a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ee1e:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ee22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee26:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ee2a:	4453      	add	r3, sl
 801ee2c:	0a3f      	lsrs	r7, r7, #8
 801ee2e:	0a1b      	lsrs	r3, r3, #8
 801ee30:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ee34:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ee38:	433b      	orrs	r3, r7
 801ee3a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee3c:	2cff      	cmp	r4, #255	; 0xff
 801ee3e:	d020      	beq.n	801ee82 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801ee40:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee42:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee46:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee48:	4367      	muls	r7, r4
 801ee4a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ee4c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee50:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee54:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801ee56:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ee5a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee5e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ee62:	44bc      	add	ip, r7
 801ee64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ee68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ee6c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ee70:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ee74:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ee78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ee7c:	ea4c 040a 	orr.w	r4, ip, sl
 801ee80:	940d      	str	r4, [sp, #52]	; 0x34
 801ee82:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ee84:	2cff      	cmp	r4, #255	; 0xff
 801ee86:	d020      	beq.n	801eeca <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801ee88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee8a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ee8e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ee90:	4367      	muls	r7, r4
 801ee92:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ee94:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ee98:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ee9c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ee9e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eea2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eea6:	fb04 fa0a 	mul.w	sl, r4, sl
 801eeaa:	44bc      	add	ip, r7
 801eeac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eeb0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eeb4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801eeb8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eebc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801eec0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801eec4:	ea4c 040a 	orr.w	r4, ip, sl
 801eec8:	9409      	str	r4, [sp, #36]	; 0x24
 801eeca:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eecc:	2cff      	cmp	r4, #255	; 0xff
 801eece:	d020      	beq.n	801ef12 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801eed0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eed2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801eed6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eed8:	4367      	muls	r7, r4
 801eeda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801eedc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801eee0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801eee4:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801eee6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801eeea:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801eeee:	fb04 fa0a 	mul.w	sl, r4, sl
 801eef2:	44bc      	add	ip, r7
 801eef4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801eef8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eefc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ef00:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ef04:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ef08:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ef0c:	ea4c 040a 	orr.w	r4, ip, sl
 801ef10:	940e      	str	r4, [sp, #56]	; 0x38
 801ef12:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ef14:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ef18:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ef1c:	43d2      	mvns	r2, r2
 801ef1e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ef22:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801ef24:	b2d2      	uxtb	r2, r2
 801ef26:	fb0e f707 	mul.w	r7, lr, r7
 801ef2a:	fb01 770c 	mla	r7, r1, ip, r7
 801ef2e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ef34:	fb00 770c 	mla	r7, r0, ip, r7
 801ef38:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801ef3c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ef3e:	fb08 770c 	mla	r7, r8, ip, r7
 801ef42:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801ef46:	fb0e fe0c 	mul.w	lr, lr, ip
 801ef4a:	0a3f      	lsrs	r7, r7, #8
 801ef4c:	fb01 e303 	mla	r3, r1, r3, lr
 801ef50:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ef52:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801ef56:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801ef5a:	990e      	ldr	r1, [sp, #56]	; 0x38
 801ef5c:	fb00 330a 	mla	r3, r0, sl, r3
 801ef60:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801ef64:	fb08 3c0c 	mla	ip, r8, ip, r3
 801ef68:	f8b9 3000 	ldrh.w	r3, [r9]
 801ef6c:	1218      	asrs	r0, r3, #8
 801ef6e:	10d9      	asrs	r1, r3, #3
 801ef70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ef74:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ef78:	00db      	lsls	r3, r3, #3
 801ef7a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801ef7e:	4350      	muls	r0, r2
 801ef80:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801ef84:	b2db      	uxtb	r3, r3
 801ef86:	4351      	muls	r1, r2
 801ef88:	ea47 070c 	orr.w	r7, r7, ip
 801ef8c:	4353      	muls	r3, r2
 801ef8e:	1c42      	adds	r2, r0, #1
 801ef90:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ef94:	0c3a      	lsrs	r2, r7, #16
 801ef96:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ef9a:	4a18      	ldr	r2, [pc, #96]	; (801effc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801ef9c:	b2c0      	uxtb	r0, r0
 801ef9e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801efa2:	1c4a      	adds	r2, r1, #1
 801efa4:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801efa8:	0a3a      	lsrs	r2, r7, #8
 801efaa:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801efae:	00c9      	lsls	r1, r1, #3
 801efb0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801efb4:	4301      	orrs	r1, r0
 801efb6:	1c58      	adds	r0, r3, #1
 801efb8:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801efbc:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801efc0:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801efc4:	4308      	orrs	r0, r1
 801efc6:	f8a9 0000 	strh.w	r0, [r9]
 801efca:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801efcc:	f109 0902 	add.w	r9, r9, #2
 801efd0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801efd2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801efd6:	441a      	add	r2, r3
 801efd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801efda:	9225      	str	r2, [sp, #148]	; 0x94
 801efdc:	441d      	add	r5, r3
 801efde:	e64c      	b.n	801ec7a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801efe0:	2800      	cmp	r0, #0
 801efe2:	f43f aeed 	beq.w	801edc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801efe6:	5c79      	ldrb	r1, [r7, r1]
 801efe8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801efec:	9109      	str	r1, [sp, #36]	; 0x24
 801efee:	0e09      	lsrs	r1, r1, #24
 801eff0:	9111      	str	r1, [sp, #68]	; 0x44
 801eff2:	e6e5      	b.n	801edc0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801eff4:	b01b      	add	sp, #108	; 0x6c
 801eff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801effa:	bf00      	nop
 801effc:	fffff800 	.word	0xfffff800

0801f000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f004:	b085      	sub	sp, #20
 801f006:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801f00a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801f00e:	2800      	cmp	r0, #0
 801f010:	9103      	str	r1, [sp, #12]
 801f012:	fb00 7406 	mla	r4, r0, r6, r7
 801f016:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801f01a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801f01e:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801f022:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801f026:	eb03 0904 	add.w	r9, r3, r4
 801f02a:	9501      	str	r5, [sp, #4]
 801f02c:	f2c0 8150 	blt.w	801f2d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801f030:	4583      	cmp	fp, r0
 801f032:	f340 814d 	ble.w	801f2d0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801f036:	2f00      	cmp	r7, #0
 801f038:	f2c0 8146 	blt.w	801f2c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801f03c:	42be      	cmp	r6, r7
 801f03e:	f340 8143 	ble.w	801f2c8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801f042:	f813 c004 	ldrb.w	ip, [r3, r4]
 801f046:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801f04a:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801f04e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801f052:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801f056:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f05a:	4355      	muls	r5, r2
 801f05c:	fb0c f203 	mul.w	r2, ip, r3
 801f060:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801f064:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801f068:	441d      	add	r5, r3
 801f06a:	f102 0320 	add.w	r3, r2, #32
 801f06e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f072:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801f076:	0a1b      	lsrs	r3, r3, #8
 801f078:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f07c:	431c      	orrs	r4, r3
 801f07e:	1c7b      	adds	r3, r7, #1
 801f080:	f100 812b 	bmi.w	801f2da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801f084:	429e      	cmp	r6, r3
 801f086:	f340 8128 	ble.w	801f2da <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801f08a:	2900      	cmp	r1, #0
 801f08c:	f000 8128 	beq.w	801f2e0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801f090:	9a01      	ldr	r2, [sp, #4]
 801f092:	f899 3001 	ldrb.w	r3, [r9, #1]
 801f096:	8855      	ldrh	r5, [r2, #2]
 801f098:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801f09c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801f0a0:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0a4:	fb08 f802 	mul.w	r8, r8, r2
 801f0a8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801f0ac:	435d      	muls	r5, r3
 801f0ae:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801f0b2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f0b6:	44d0      	add	r8, sl
 801f0b8:	f105 0a20 	add.w	sl, r5, #32
 801f0bc:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801f0c0:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801f0c4:	0a2d      	lsrs	r5, r5, #8
 801f0c6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f0ca:	432a      	orrs	r2, r5
 801f0cc:	3001      	adds	r0, #1
 801f0ce:	f100 810d 	bmi.w	801f2ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f0d2:	4583      	cmp	fp, r0
 801f0d4:	f340 810a 	ble.w	801f2ec <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801f0d8:	f1be 0f00 	cmp.w	lr, #0
 801f0dc:	f000 810b 	beq.w	801f2f6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801f0e0:	2f00      	cmp	r7, #0
 801f0e2:	f2c0 8100 	blt.w	801f2e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f0e6:	42be      	cmp	r6, r7
 801f0e8:	f340 80fd 	ble.w	801f2e6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801f0ec:	9801      	ldr	r0, [sp, #4]
 801f0ee:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801f0f2:	f819 5006 	ldrb.w	r5, [r9, r6]
 801f0f6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801f0fa:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801f0fe:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801f102:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801f106:	fb0a fa00 	mul.w	sl, sl, r0
 801f10a:	fb05 f808 	mul.w	r8, r5, r8
 801f10e:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801f112:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801f116:	4482      	add	sl, r0
 801f118:	f108 0020 	add.w	r0, r8, #32
 801f11c:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f120:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801f124:	0a00      	lsrs	r0, r0, #8
 801f126:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f12a:	ea4b 0b00 	orr.w	fp, fp, r0
 801f12e:	3701      	adds	r7, #1
 801f130:	f100 80e6 	bmi.w	801f300 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f134:	42be      	cmp	r6, r7
 801f136:	f340 80e3 	ble.w	801f300 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801f13a:	2900      	cmp	r1, #0
 801f13c:	f000 80e3 	beq.w	801f306 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801f140:	3601      	adds	r6, #1
 801f142:	9801      	ldr	r0, [sp, #4]
 801f144:	f819 7006 	ldrb.w	r7, [r9, r6]
 801f148:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801f14c:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801f150:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801f154:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f158:	fb09 f906 	mul.w	r9, r9, r6
 801f15c:	fb07 f800 	mul.w	r8, r7, r0
 801f160:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801f164:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801f168:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801f16c:	44d1      	add	r9, sl
 801f16e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801f172:	f108 0020 	add.w	r0, r8, #32
 801f176:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801f17a:	0a00      	lsrs	r0, r0, #8
 801f17c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f180:	4330      	orrs	r0, r6
 801f182:	b28e      	uxth	r6, r1
 801f184:	fa1f f98e 	uxth.w	r9, lr
 801f188:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801f18c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801f190:	fb06 f809 	mul.w	r8, r6, r9
 801f194:	0136      	lsls	r6, r6, #4
 801f196:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f19a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801f19e:	9601      	str	r6, [sp, #4]
 801f1a0:	ea4a 0404 	orr.w	r4, sl, r4
 801f1a4:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f1a8:	fa1f f689 	uxth.w	r6, r9
 801f1ac:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f1b0:	fb11 f90e 	smulbb	r9, r1, lr
 801f1b4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1b8:	9602      	str	r6, [sp, #8]
 801f1ba:	4626      	mov	r6, r4
 801f1bc:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801f1c0:	f1ce 0410 	rsb	r4, lr, #16
 801f1c4:	ea4a 0202 	orr.w	r2, sl, r2
 801f1c8:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f1cc:	1a64      	subs	r4, r4, r1
 801f1ce:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801f1d2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f1d6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f1da:	434a      	muls	r2, r1
 801f1dc:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801f1e0:	ea4a 0000 	orr.w	r0, sl, r0
 801f1e4:	9903      	ldr	r1, [sp, #12]
 801f1e6:	fb04 2406 	mla	r4, r4, r6, r2
 801f1ea:	9e02      	ldr	r6, [sp, #8]
 801f1ec:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801f1f0:	fb09 4200 	mla	r2, r9, r0, r4
 801f1f4:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801f1f8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f1fc:	8808      	ldrh	r0, [r1, #0]
 801f1fe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801f202:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801f206:	ea44 0b0b 	orr.w	fp, r4, fp
 801f20a:	9c01      	ldr	r4, [sp, #4]
 801f20c:	b289      	uxth	r1, r1
 801f20e:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801f212:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801f216:	1ba4      	subs	r4, r4, r6
 801f218:	9e01      	ldr	r6, [sp, #4]
 801f21a:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f21e:	eba6 0608 	sub.w	r6, r6, r8
 801f222:	b2a4      	uxth	r4, r4
 801f224:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f228:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f22c:	b2b6      	uxth	r6, r6
 801f22e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f232:	4373      	muls	r3, r6
 801f234:	ea42 0e0e 	orr.w	lr, r2, lr
 801f238:	fb0c 3304 	mla	r3, ip, r4, r3
 801f23c:	9c02      	ldr	r4, [sp, #8]
 801f23e:	fa1f f28e 	uxth.w	r2, lr
 801f242:	fb04 3505 	mla	r5, r4, r5, r3
 801f246:	10d4      	asrs	r4, r2, #3
 801f248:	fb08 5707 	mla	r7, r8, r7, r5
 801f24c:	1215      	asrs	r5, r2, #8
 801f24e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801f252:	00d2      	lsls	r2, r2, #3
 801f254:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801f258:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f25c:	b2d2      	uxtb	r2, r2
 801f25e:	434f      	muls	r7, r1
 801f260:	1c7b      	adds	r3, r7, #1
 801f262:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801f266:	1203      	asrs	r3, r0, #8
 801f268:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801f26c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f270:	b2ff      	uxtb	r7, r7
 801f272:	fb13 f307 	smulbb	r3, r3, r7
 801f276:	fb05 3501 	mla	r5, r5, r1, r3
 801f27a:	10c3      	asrs	r3, r0, #3
 801f27c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f280:	b2ad      	uxth	r5, r5
 801f282:	fb13 f307 	smulbb	r3, r3, r7
 801f286:	fb04 3401 	mla	r4, r4, r1, r3
 801f28a:	00c3      	lsls	r3, r0, #3
 801f28c:	b2db      	uxtb	r3, r3
 801f28e:	b2a4      	uxth	r4, r4
 801f290:	fb13 f307 	smulbb	r3, r3, r7
 801f294:	fb02 3101 	mla	r1, r2, r1, r3
 801f298:	1c6b      	adds	r3, r5, #1
 801f29a:	1c62      	adds	r2, r4, #1
 801f29c:	b289      	uxth	r1, r1
 801f29e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f2a2:	1c4b      	adds	r3, r1, #1
 801f2a4:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801f2a8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f2ac:	9a03      	ldr	r2, [sp, #12]
 801f2ae:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f2b2:	0964      	lsrs	r4, r4, #5
 801f2b4:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f2b8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801f2bc:	432b      	orrs	r3, r5
 801f2be:	4323      	orrs	r3, r4
 801f2c0:	8013      	strh	r3, [r2, #0]
 801f2c2:	b005      	add	sp, #20
 801f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2c8:	f04f 0c00 	mov.w	ip, #0
 801f2cc:	4664      	mov	r4, ip
 801f2ce:	e6d6      	b.n	801f07e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801f2d0:	2300      	movs	r3, #0
 801f2d2:	469c      	mov	ip, r3
 801f2d4:	461a      	mov	r2, r3
 801f2d6:	461c      	mov	r4, r3
 801f2d8:	e6f8      	b.n	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f2da:	2300      	movs	r3, #0
 801f2dc:	461a      	mov	r2, r3
 801f2de:	e6f5      	b.n	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f2e0:	460b      	mov	r3, r1
 801f2e2:	460a      	mov	r2, r1
 801f2e4:	e6f2      	b.n	801f0cc <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801f2e6:	2500      	movs	r5, #0
 801f2e8:	46ab      	mov	fp, r5
 801f2ea:	e720      	b.n	801f12e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801f2ec:	2700      	movs	r7, #0
 801f2ee:	463d      	mov	r5, r7
 801f2f0:	4638      	mov	r0, r7
 801f2f2:	46bb      	mov	fp, r7
 801f2f4:	e745      	b.n	801f182 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f2f6:	4677      	mov	r7, lr
 801f2f8:	4675      	mov	r5, lr
 801f2fa:	4670      	mov	r0, lr
 801f2fc:	46f3      	mov	fp, lr
 801f2fe:	e740      	b.n	801f182 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f300:	2700      	movs	r7, #0
 801f302:	4638      	mov	r0, r7
 801f304:	e73d      	b.n	801f182 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801f306:	460f      	mov	r7, r1
 801f308:	4608      	mov	r0, r1
 801f30a:	e73a      	b.n	801f182 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801f30c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f310:	b097      	sub	sp, #92	; 0x5c
 801f312:	9214      	str	r2, [sp, #80]	; 0x50
 801f314:	9308      	str	r3, [sp, #32]
 801f316:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801f318:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801f31c:	9015      	str	r0, [sp, #84]	; 0x54
 801f31e:	9312      	str	r3, [sp, #72]	; 0x48
 801f320:	6850      	ldr	r0, [r2, #4]
 801f322:	9111      	str	r1, [sp, #68]	; 0x44
 801f324:	6812      	ldr	r2, [r2, #0]
 801f326:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801f32a:	fb00 1303 	mla	r3, r0, r3, r1
 801f32e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f332:	9309      	str	r3, [sp, #36]	; 0x24
 801f334:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f336:	681b      	ldr	r3, [r3, #0]
 801f338:	930b      	str	r3, [sp, #44]	; 0x2c
 801f33a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f33c:	685b      	ldr	r3, [r3, #4]
 801f33e:	930c      	str	r3, [sp, #48]	; 0x30
 801f340:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801f344:	930a      	str	r3, [sp, #40]	; 0x28
 801f346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f348:	2b00      	cmp	r3, #0
 801f34a:	dc03      	bgt.n	801f354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f34c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f34e:	2b00      	cmp	r3, #0
 801f350:	f340 83cd 	ble.w	801faee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f354:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f356:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f35a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f35e:	1e48      	subs	r0, r1, #1
 801f360:	1e55      	subs	r5, r2, #1
 801f362:	9b08      	ldr	r3, [sp, #32]
 801f364:	2b00      	cmp	r3, #0
 801f366:	f340 81a5 	ble.w	801f6b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 801f36a:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801f36c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f36e:	1436      	asrs	r6, r6, #16
 801f370:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f374:	d406      	bmi.n	801f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f376:	4286      	cmp	r6, r0
 801f378:	da04      	bge.n	801f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	db02      	blt.n	801f384 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801f37e:	42ab      	cmp	r3, r5
 801f380:	f2c0 8199 	blt.w	801f6b6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801f384:	3601      	adds	r6, #1
 801f386:	f100 8186 	bmi.w	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f38a:	42b1      	cmp	r1, r6
 801f38c:	f2c0 8183 	blt.w	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f390:	3301      	adds	r3, #1
 801f392:	f100 8180 	bmi.w	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f396:	429a      	cmp	r2, r3
 801f398:	f2c0 817d 	blt.w	801f696 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801f39c:	9b08      	ldr	r3, [sp, #32]
 801f39e:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f3a2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f3a4:	9313      	str	r3, [sp, #76]	; 0x4c
 801f3a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f3a8:	2b00      	cmp	r3, #0
 801f3aa:	f340 81a6 	ble.w	801f6fa <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f3ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f3b0:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f3b2:	1418      	asrs	r0, r3, #16
 801f3b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f3b6:	142d      	asrs	r5, r5, #16
 801f3b8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801f3bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f3be:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801f3c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f3c4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801f3c8:	f100 81fa 	bmi.w	801f7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f3cc:	f102 3eff 	add.w	lr, r2, #4294967295
 801f3d0:	4575      	cmp	r5, lr
 801f3d2:	f280 81f5 	bge.w	801f7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f3d6:	2800      	cmp	r0, #0
 801f3d8:	f2c0 81f2 	blt.w	801f7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f3dc:	f103 3eff 	add.w	lr, r3, #4294967295
 801f3e0:	4570      	cmp	r0, lr
 801f3e2:	f280 81ed 	bge.w	801f7c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f3e6:	b212      	sxth	r2, r2
 801f3e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f3ea:	fa1f fe81 	uxth.w	lr, r1
 801f3ee:	fb00 5002 	mla	r0, r0, r2, r5
 801f3f2:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801f3f6:	eb03 0a00 	add.w	sl, r3, r0
 801f3fa:	f813 9000 	ldrb.w	r9, [r3, r0]
 801f3fe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801f402:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f406:	b29b      	uxth	r3, r3
 801f408:	f1bc 0f00 	cmp.w	ip, #0
 801f40c:	f000 81bb 	beq.w	801f786 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
 801f410:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801f414:	eb0a 0b02 	add.w	fp, sl, r2
 801f418:	fa1f fa8c 	uxth.w	sl, ip
 801f41c:	940d      	str	r4, [sp, #52]	; 0x34
 801f41e:	fb0a fe0e 	mul.w	lr, sl, lr
 801f422:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f426:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801f42a:	eba5 050e 	sub.w	r5, r5, lr
 801f42e:	940e      	str	r4, [sp, #56]	; 0x38
 801f430:	fa1f fa8a 	uxth.w	sl, sl
 801f434:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f436:	b2ad      	uxth	r5, r5
 801f438:	eba3 030a 	sub.w	r3, r3, sl
 801f43c:	fb08 f505 	mul.w	r5, r8, r5
 801f440:	b29b      	uxth	r3, r3
 801f442:	fb09 5303 	mla	r3, r9, r3, r5
 801f446:	fb0a 3304 	mla	r3, sl, r4, r3
 801f44a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f44c:	fb0e 3304 	mla	r3, lr, r4, r3
 801f450:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f454:	2b00      	cmp	r3, #0
 801f456:	f000 8111 	beq.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f45a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f45c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f460:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801f464:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801f468:	f000 8192 	beq.w	801f790 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801f46c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f470:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f474:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f478:	fb0a fe0e 	mul.w	lr, sl, lr
 801f47c:	fb09 f000 	mul.w	r0, r9, r0
 801f480:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801f484:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f488:	f100 0b20 	add.w	fp, r0, #32
 801f48c:	44ce      	add	lr, r9
 801f48e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801f492:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f496:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f49a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f49e:	ea4e 0909 	orr.w	r9, lr, r9
 801f4a2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f4a6:	8868      	ldrh	r0, [r5, #2]
 801f4a8:	d019      	beq.n	801f4de <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801f4aa:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801f4ae:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f4b2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4b6:	fb0a fe0e 	mul.w	lr, sl, lr
 801f4ba:	fb08 f800 	mul.w	r8, r8, r0
 801f4be:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801f4c2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801f4c6:	f108 0b20 	add.w	fp, r8, #32
 801f4ca:	4486      	add	lr, r0
 801f4cc:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801f4d0:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801f4d4:	0a00      	lsrs	r0, r0, #8
 801f4d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f4da:	ea4e 0000 	orr.w	r0, lr, r0
 801f4de:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801f4e2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f4e6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801f4ea:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f4ee:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f4f2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f4f6:	ea4e 0909 	orr.w	r9, lr, r9
 801f4fa:	ea4a 0000 	orr.w	r0, sl, r0
 801f4fe:	f1bc 0f00 	cmp.w	ip, #0
 801f502:	f000 8147 	beq.w	801f794 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801f506:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801f50a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801f50c:	3a01      	subs	r2, #1
 801f50e:	2cff      	cmp	r4, #255	; 0xff
 801f510:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801f514:	f102 0202 	add.w	r2, r2, #2
 801f518:	eb05 0e02 	add.w	lr, r5, r2
 801f51c:	5aaa      	ldrh	r2, [r5, r2]
 801f51e:	d018      	beq.n	801f552 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801f520:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801f524:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f528:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f52c:	fb04 fa02 	mul.w	sl, r4, r2
 801f530:	fb08 f805 	mul.w	r8, r8, r5
 801f534:	f10a 0520 	add.w	r5, sl, #32
 801f538:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801f53c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f540:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801f544:	4442      	add	r2, r8
 801f546:	0a2d      	lsrs	r5, r5, #8
 801f548:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801f54c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f550:	432a      	orrs	r2, r5
 801f552:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801f554:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801f558:	2cff      	cmp	r4, #255	; 0xff
 801f55a:	d01a      	beq.n	801f592 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
 801f55c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801f560:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801f564:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f568:	fb04 fa05 	mul.w	sl, r4, r5
 801f56c:	fb08 f80e 	mul.w	r8, r8, lr
 801f570:	f10a 0e20 	add.w	lr, sl, #32
 801f574:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801f578:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f57c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801f580:	4445      	add	r5, r8
 801f582:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f586:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801f58a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801f58e:	ea45 050e 	orr.w	r5, r5, lr
 801f592:	fb1c fe01 	smulbb	lr, ip, r1
 801f596:	f1cc 0810 	rsb	r8, ip, #16
 801f59a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801f59e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f5a2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801f5a6:	eba8 0801 	sub.w	r8, r8, r1
 801f5aa:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801f5ae:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f5b2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801f5b6:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801f5ba:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801f5be:	ea4a 0202 	orr.w	r2, sl, r2
 801f5c2:	4341      	muls	r1, r0
 801f5c4:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801f5c8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f5cc:	fb09 1108 	mla	r1, r9, r8, r1
 801f5d0:	ea4b 0505 	orr.w	r5, fp, r5
 801f5d4:	fb0c 1102 	mla	r1, ip, r2, r1
 801f5d8:	fb0e 1e05 	mla	lr, lr, r5, r1
 801f5dc:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801f5e0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801f5e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f5e8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801f5ec:	ea42 0e0e 	orr.w	lr, r2, lr
 801f5f0:	fa1f f28e 	uxth.w	r2, lr
 801f5f4:	2bff      	cmp	r3, #255	; 0xff
 801f5f6:	d103      	bne.n	801f600 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f5f8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801f5fa:	29ff      	cmp	r1, #255	; 0xff
 801f5fc:	f000 80de 	beq.w	801f7bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801f600:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f602:	1215      	asrs	r5, r2, #8
 801f604:	8838      	ldrh	r0, [r7, #0]
 801f606:	434b      	muls	r3, r1
 801f608:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f60c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801f60e:	f103 0c01 	add.w	ip, r3, #1
 801f612:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801f616:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801f61a:	fa5f fc83 	uxtb.w	ip, r3
 801f61e:	1203      	asrs	r3, r0, #8
 801f620:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801f624:	fb13 f30c 	smulbb	r3, r3, ip
 801f628:	fb05 3501 	mla	r5, r5, r1, r3
 801f62c:	10c3      	asrs	r3, r0, #3
 801f62e:	10d1      	asrs	r1, r2, #3
 801f630:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801f634:	00d2      	lsls	r2, r2, #3
 801f636:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f63a:	b2ad      	uxth	r5, r5
 801f63c:	fb13 f30c 	smulbb	r3, r3, ip
 801f640:	b2d2      	uxtb	r2, r2
 801f642:	fb01 3104 	mla	r1, r1, r4, r3
 801f646:	00c3      	lsls	r3, r0, #3
 801f648:	b2db      	uxtb	r3, r3
 801f64a:	b289      	uxth	r1, r1
 801f64c:	fb13 f30c 	smulbb	r3, r3, ip
 801f650:	fb02 3304 	mla	r3, r2, r4, r3
 801f654:	b29a      	uxth	r2, r3
 801f656:	1c6b      	adds	r3, r5, #1
 801f658:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f65c:	1c53      	adds	r3, r2, #1
 801f65e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f662:	1c4a      	adds	r2, r1, #1
 801f664:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f668:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f66c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f670:	0949      	lsrs	r1, r1, #5
 801f672:	432b      	orrs	r3, r5
 801f674:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f678:	430b      	orrs	r3, r1
 801f67a:	803b      	strh	r3, [r7, #0]
 801f67c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f67e:	3702      	adds	r7, #2
 801f680:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801f682:	4413      	add	r3, r2
 801f684:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801f686:	9321      	str	r3, [sp, #132]	; 0x84
 801f688:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f68a:	441a      	add	r2, r3
 801f68c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f68e:	3b01      	subs	r3, #1
 801f690:	9222      	str	r2, [sp, #136]	; 0x88
 801f692:	9313      	str	r3, [sp, #76]	; 0x4c
 801f694:	e687      	b.n	801f3a6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801f696:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f698:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801f69a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801f69c:	4433      	add	r3, r6
 801f69e:	9321      	str	r3, [sp, #132]	; 0x84
 801f6a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f6a2:	441c      	add	r4, r3
 801f6a4:	9b08      	ldr	r3, [sp, #32]
 801f6a6:	3b01      	subs	r3, #1
 801f6a8:	9422      	str	r4, [sp, #136]	; 0x88
 801f6aa:	9308      	str	r3, [sp, #32]
 801f6ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f6ae:	3302      	adds	r3, #2
 801f6b0:	9309      	str	r3, [sp, #36]	; 0x24
 801f6b2:	e656      	b.n	801f362 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801f6b4:	d028      	beq.n	801f708 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801f6b6:	9b08      	ldr	r3, [sp, #32]
 801f6b8:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801f6ba:	3b01      	subs	r3, #1
 801f6bc:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801f6be:	fb00 5003 	mla	r0, r0, r3, r5
 801f6c2:	1400      	asrs	r0, r0, #16
 801f6c4:	f53f ae6a 	bmi.w	801f39c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f6c8:	3901      	subs	r1, #1
 801f6ca:	4288      	cmp	r0, r1
 801f6cc:	f6bf ae66 	bge.w	801f39c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f6d0:	9924      	ldr	r1, [sp, #144]	; 0x90
 801f6d2:	9822      	ldr	r0, [sp, #136]	; 0x88
 801f6d4:	fb01 0303 	mla	r3, r1, r3, r0
 801f6d8:	141b      	asrs	r3, r3, #16
 801f6da:	f53f ae5f 	bmi.w	801f39c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f6de:	3a01      	subs	r2, #1
 801f6e0:	4293      	cmp	r3, r2
 801f6e2:	f6bf ae5b 	bge.w	801f39c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f6e6:	9b08      	ldr	r3, [sp, #32]
 801f6e8:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801f6ec:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801f6f0:	9313      	str	r3, [sp, #76]	; 0x4c
 801f6f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	f300 8082 	bgt.w	801f7fe <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
 801f6fa:	9b08      	ldr	r3, [sp, #32]
 801f6fc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f702:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801f706:	9309      	str	r3, [sp, #36]	; 0x24
 801f708:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	f340 81ef 	ble.w	801faee <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
 801f710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f714:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f716:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f71a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f71e:	eef0 6a62 	vmov.f32	s13, s5
 801f722:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f726:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f72a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f72e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801f732:	eef0 6a43 	vmov.f32	s13, s6
 801f736:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f73a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801f73e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f742:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f746:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f74a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f74e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f752:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f756:	ee12 2a90 	vmov	r2, s5
 801f75a:	eef0 2a47 	vmov.f32	s5, s14
 801f75e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f762:	ee13 2a10 	vmov	r2, s6
 801f766:	9323      	str	r3, [sp, #140]	; 0x8c
 801f768:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f76a:	eeb0 3a67 	vmov.f32	s6, s15
 801f76e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f772:	9324      	str	r3, [sp, #144]	; 0x90
 801f774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f776:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801f778:	3b01      	subs	r3, #1
 801f77a:	9311      	str	r3, [sp, #68]	; 0x44
 801f77c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f77e:	bf08      	it	eq
 801f780:	4613      	moveq	r3, r2
 801f782:	9308      	str	r3, [sp, #32]
 801f784:	e5df      	b.n	801f346 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f786:	fb08 f505 	mul.w	r5, r8, r5
 801f78a:	fb09 5303 	mla	r3, r9, r3, r5
 801f78e:	e65f      	b.n	801f450 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801f790:	4681      	mov	r9, r0
 801f792:	e686      	b.n	801f4a2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f794:	f1c1 0210 	rsb	r2, r1, #16
 801f798:	4341      	muls	r1, r0
 801f79a:	fb09 1902 	mla	r9, r9, r2, r1
 801f79e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801f7a2:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801f7a6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801f7aa:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f7ae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f7b2:	ea42 0909 	orr.w	r9, r2, r9
 801f7b6:	fa1f f289 	uxth.w	r2, r9
 801f7ba:	e71b      	b.n	801f5f4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f7bc:	803a      	strh	r2, [r7, #0]
 801f7be:	e75d      	b.n	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7c0:	f115 0e01 	adds.w	lr, r5, #1
 801f7c4:	f53f af5a 	bmi.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7c8:	4572      	cmp	r2, lr
 801f7ca:	f6ff af57 	blt.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7ce:	f110 0e01 	adds.w	lr, r0, #1
 801f7d2:	f53f af53 	bmi.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7d6:	4573      	cmp	r3, lr
 801f7d8:	f6ff af50 	blt.w	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7dc:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801f7de:	b21b      	sxth	r3, r3
 801f7e0:	b212      	sxth	r2, r2
 801f7e2:	9502      	str	r5, [sp, #8]
 801f7e4:	9301      	str	r3, [sp, #4]
 801f7e6:	9200      	str	r2, [sp, #0]
 801f7e8:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801f7ec:	e9cd c405 	strd	ip, r4, [sp, #20]
 801f7f0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801f7f4:	4639      	mov	r1, r7
 801f7f6:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f7f8:	f7ff fc02 	bl	801f000 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801f7fc:	e73e      	b.n	801f67c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 801f7fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f800:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801f804:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f806:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801f80a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801f80c:	fa1f fc82 	uxth.w	ip, r2
 801f810:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801f816:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801f81a:	141f      	asrs	r7, r3, #16
 801f81c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f81e:	141b      	asrs	r3, r3, #16
 801f820:	fb01 3707 	mla	r7, r1, r7, r3
 801f824:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f826:	eb03 0a07 	add.w	sl, r3, r7
 801f82a:	f813 9007 	ldrb.w	r9, [r3, r7]
 801f82e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801f832:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801f836:	b29b      	uxth	r3, r3
 801f838:	2d00      	cmp	r5, #0
 801f83a:	f000 813d 	beq.w	801fab8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
 801f83e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801f842:	eb0a 0b01 	add.w	fp, sl, r1
 801f846:	fa1f fa85 	uxth.w	sl, r5
 801f84a:	940f      	str	r4, [sp, #60]	; 0x3c
 801f84c:	fb0a fc0c 	mul.w	ip, sl, ip
 801f850:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801f854:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801f858:	eba0 000c 	sub.w	r0, r0, ip
 801f85c:	9410      	str	r4, [sp, #64]	; 0x40
 801f85e:	fa1f fa8a 	uxth.w	sl, sl
 801f862:	b280      	uxth	r0, r0
 801f864:	eba3 030a 	sub.w	r3, r3, sl
 801f868:	fb08 f000 	mul.w	r0, r8, r0
 801f86c:	b29b      	uxth	r3, r3
 801f86e:	fb09 0303 	mla	r3, r9, r3, r0
 801f872:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f874:	fb0a 3300 	mla	r3, sl, r0, r3
 801f878:	fb0c 3304 	mla	r3, ip, r4, r3
 801f87c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f880:	2b00      	cmp	r3, #0
 801f882:	f000 810b 	beq.w	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801f886:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801f888:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801f88c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801f88e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801f892:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801f896:	f000 8114 	beq.w	801fac2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801f89a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f89e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801f8a2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f8a6:	fb0a fc0c 	mul.w	ip, sl, ip
 801f8aa:	fb09 f707 	mul.w	r7, r9, r7
 801f8ae:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801f8b2:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f8b6:	f107 0b20 	add.w	fp, r7, #32
 801f8ba:	44cc      	add	ip, r9
 801f8bc:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801f8c0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f8c4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f8c8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801f8cc:	ea4c 0909 	orr.w	r9, ip, r9
 801f8d0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801f8d4:	8847      	ldrh	r7, [r0, #2]
 801f8d6:	d019      	beq.n	801f90c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
 801f8d8:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801f8dc:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801f8e0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f8e4:	fb0a fc0c 	mul.w	ip, sl, ip
 801f8e8:	fb08 f807 	mul.w	r8, r8, r7
 801f8ec:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801f8f0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801f8f4:	f108 0b20 	add.w	fp, r8, #32
 801f8f8:	44bc      	add	ip, r7
 801f8fa:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801f8fe:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801f902:	0a3f      	lsrs	r7, r7, #8
 801f904:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801f908:	ea4c 0707 	orr.w	r7, ip, r7
 801f90c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801f910:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801f914:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801f918:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f91c:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801f920:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f924:	ea4c 0909 	orr.w	r9, ip, r9
 801f928:	ea4a 0707 	orr.w	r7, sl, r7
 801f92c:	2d00      	cmp	r5, #0
 801f92e:	f000 80ca 	beq.w	801fac6 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
 801f932:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f936:	3901      	subs	r1, #1
 801f938:	0049      	lsls	r1, r1, #1
 801f93a:	3102      	adds	r1, #2
 801f93c:	eb00 0c01 	add.w	ip, r0, r1
 801f940:	5a41      	ldrh	r1, [r0, r1]
 801f942:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801f944:	28ff      	cmp	r0, #255	; 0xff
 801f946:	d019      	beq.n	801f97c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
 801f948:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801f94c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801f94e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f952:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f956:	fb04 fa01 	mul.w	sl, r4, r1
 801f95a:	fb08 f800 	mul.w	r8, r8, r0
 801f95e:	f10a 0020 	add.w	r0, sl, #32
 801f962:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801f966:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f96a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801f96e:	4441      	add	r1, r8
 801f970:	0a00      	lsrs	r0, r0, #8
 801f972:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801f976:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f97a:	4301      	orrs	r1, r0
 801f97c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801f97e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801f982:	2cff      	cmp	r4, #255	; 0xff
 801f984:	d01a      	beq.n	801f9bc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
 801f986:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801f98a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801f98e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801f992:	fb04 fa00 	mul.w	sl, r4, r0
 801f996:	fb08 f80c 	mul.w	r8, r8, ip
 801f99a:	f10a 0c20 	add.w	ip, sl, #32
 801f99e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801f9a2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801f9a6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f9aa:	4440      	add	r0, r8
 801f9ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f9b0:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801f9b4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f9b8:	ea40 000c 	orr.w	r0, r0, ip
 801f9bc:	fb15 fc02 	smulbb	ip, r5, r2
 801f9c0:	f1c5 0810 	rsb	r8, r5, #16
 801f9c4:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801f9c8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f9cc:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801f9d0:	eba8 0802 	sub.w	r8, r8, r2
 801f9d4:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f9d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801f9dc:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801f9e0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f9e4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801f9e8:	ea4a 0101 	orr.w	r1, sl, r1
 801f9ec:	437a      	muls	r2, r7
 801f9ee:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801f9f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f9f6:	fb09 2208 	mla	r2, r9, r8, r2
 801f9fa:	ea4b 0000 	orr.w	r0, fp, r0
 801f9fe:	fb05 2201 	mla	r2, r5, r1, r2
 801fa02:	fb0c 2200 	mla	r2, ip, r0, r2
 801fa06:	0d57      	lsrs	r7, r2, #21
 801fa08:	0952      	lsrs	r2, r2, #5
 801fa0a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fa0e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fa12:	433a      	orrs	r2, r7
 801fa14:	2bff      	cmp	r3, #255	; 0xff
 801fa16:	b292      	uxth	r2, r2
 801fa18:	d102      	bne.n	801fa20 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801fa1a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801fa1c:	29ff      	cmp	r1, #255	; 0xff
 801fa1e:	d063      	beq.n	801fae8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
 801fa20:	980a      	ldr	r0, [sp, #40]	; 0x28
 801fa22:	1215      	asrs	r5, r2, #8
 801fa24:	f8be 1000 	ldrh.w	r1, [lr]
 801fa28:	4343      	muls	r3, r0
 801fa2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801fa2c:	10cf      	asrs	r7, r1, #3
 801fa2e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801fa32:	1c58      	adds	r0, r3, #1
 801fa34:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fa38:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801fa3c:	1208      	asrs	r0, r1, #8
 801fa3e:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801fa42:	00c9      	lsls	r1, r1, #3
 801fa44:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801fa48:	b2db      	uxtb	r3, r3
 801fa4a:	b2c9      	uxtb	r1, r1
 801fa4c:	fb10 f003 	smulbb	r0, r0, r3
 801fa50:	fb11 f103 	smulbb	r1, r1, r3
 801fa54:	fb05 0504 	mla	r5, r5, r4, r0
 801fa58:	10d0      	asrs	r0, r2, #3
 801fa5a:	fb17 f703 	smulbb	r7, r7, r3
 801fa5e:	00d2      	lsls	r2, r2, #3
 801fa60:	b2ad      	uxth	r5, r5
 801fa62:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fa66:	b2d2      	uxtb	r2, r2
 801fa68:	fb00 7004 	mla	r0, r0, r4, r7
 801fa6c:	1c6b      	adds	r3, r5, #1
 801fa6e:	fb02 1204 	mla	r2, r2, r4, r1
 801fa72:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801fa76:	b292      	uxth	r2, r2
 801fa78:	b280      	uxth	r0, r0
 801fa7a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801fa7e:	1c57      	adds	r7, r2, #1
 801fa80:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801fa84:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801fa88:	433d      	orrs	r5, r7
 801fa8a:	1c47      	adds	r7, r0, #1
 801fa8c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801fa90:	097f      	lsrs	r7, r7, #5
 801fa92:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801fa96:	433d      	orrs	r5, r7
 801fa98:	f8ae 5000 	strh.w	r5, [lr]
 801fa9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801fa9e:	f10e 0e02 	add.w	lr, lr, #2
 801faa2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801faa4:	4413      	add	r3, r2
 801faa6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801faa8:	9321      	str	r3, [sp, #132]	; 0x84
 801faaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801faac:	441a      	add	r2, r3
 801faae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801fab0:	3b01      	subs	r3, #1
 801fab2:	9222      	str	r2, [sp, #136]	; 0x88
 801fab4:	9313      	str	r3, [sp, #76]	; 0x4c
 801fab6:	e61c      	b.n	801f6f2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801fab8:	fb08 f000 	mul.w	r0, r8, r0
 801fabc:	fb09 0303 	mla	r3, r9, r3, r0
 801fac0:	e6dc      	b.n	801f87c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
 801fac2:	46b9      	mov	r9, r7
 801fac4:	e704      	b.n	801f8d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
 801fac6:	f1c2 0110 	rsb	r1, r2, #16
 801faca:	437a      	muls	r2, r7
 801facc:	fb09 2901 	mla	r9, r9, r1, r2
 801fad0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801fad4:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801fad8:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801fadc:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fae0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fae4:	4302      	orrs	r2, r0
 801fae6:	e795      	b.n	801fa14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
 801fae8:	f8ae 2000 	strh.w	r2, [lr]
 801faec:	e7d6      	b.n	801fa9c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
 801faee:	b017      	add	sp, #92	; 0x5c
 801faf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801faf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801faf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801faf8:	b085      	sub	sp, #20
 801fafa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801fafe:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801fb02:	2800      	cmp	r0, #0
 801fb04:	9103      	str	r1, [sp, #12]
 801fb06:	fb00 7406 	mla	r4, r0, r6, r7
 801fb0a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801fb0e:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801fb12:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801fb16:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801fb1a:	eb02 0904 	add.w	r9, r2, r4
 801fb1e:	9501      	str	r5, [sp, #4]
 801fb20:	f2c0 8141 	blt.w	801fda6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fb24:	4583      	cmp	fp, r0
 801fb26:	f340 813e 	ble.w	801fda6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801fb2a:	2f00      	cmp	r7, #0
 801fb2c:	f2c0 8137 	blt.w	801fd9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fb30:	42be      	cmp	r6, r7
 801fb32:	f340 8134 	ble.w	801fd9e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801fb36:	f812 c004 	ldrb.w	ip, [r2, r4]
 801fb3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801fb3e:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801fb42:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801fb46:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801fb4a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb4e:	4355      	muls	r5, r2
 801fb50:	fb0c f203 	mul.w	r2, ip, r3
 801fb54:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801fb58:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801fb5c:	441d      	add	r5, r3
 801fb5e:	f102 0320 	add.w	r3, r2, #32
 801fb62:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801fb66:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801fb6a:	0a1b      	lsrs	r3, r3, #8
 801fb6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801fb70:	431c      	orrs	r4, r3
 801fb72:	1c7b      	adds	r3, r7, #1
 801fb74:	f100 811c 	bmi.w	801fdb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801fb78:	429e      	cmp	r6, r3
 801fb7a:	f340 8119 	ble.w	801fdb0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801fb7e:	2900      	cmp	r1, #0
 801fb80:	f000 8119 	beq.w	801fdb6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801fb84:	9a01      	ldr	r2, [sp, #4]
 801fb86:	f899 3001 	ldrb.w	r3, [r9, #1]
 801fb8a:	8855      	ldrh	r5, [r2, #2]
 801fb8c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801fb90:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801fb94:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fb98:	fb08 f802 	mul.w	r8, r8, r2
 801fb9c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801fba0:	435d      	muls	r5, r3
 801fba2:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801fba6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801fbaa:	44d0      	add	r8, sl
 801fbac:	f105 0a20 	add.w	sl, r5, #32
 801fbb0:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801fbb4:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801fbb8:	0a2d      	lsrs	r5, r5, #8
 801fbba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801fbbe:	432a      	orrs	r2, r5
 801fbc0:	3001      	adds	r0, #1
 801fbc2:	f100 80fe 	bmi.w	801fdc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fbc6:	4583      	cmp	fp, r0
 801fbc8:	f340 80fb 	ble.w	801fdc2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801fbcc:	f1be 0f00 	cmp.w	lr, #0
 801fbd0:	f000 80fc 	beq.w	801fdcc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801fbd4:	2f00      	cmp	r7, #0
 801fbd6:	f2c0 80f1 	blt.w	801fdbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fbda:	42be      	cmp	r6, r7
 801fbdc:	f340 80ee 	ble.w	801fdbc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801fbe0:	9801      	ldr	r0, [sp, #4]
 801fbe2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801fbe6:	f819 5006 	ldrb.w	r5, [r9, r6]
 801fbea:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801fbee:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801fbf2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801fbf6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801fbfa:	fb0a fa00 	mul.w	sl, sl, r0
 801fbfe:	fb05 f808 	mul.w	r8, r5, r8
 801fc02:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801fc06:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801fc0a:	4482      	add	sl, r0
 801fc0c:	f108 0020 	add.w	r0, r8, #32
 801fc10:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fc14:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801fc18:	0a00      	lsrs	r0, r0, #8
 801fc1a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fc1e:	ea4b 0b00 	orr.w	fp, fp, r0
 801fc22:	3701      	adds	r7, #1
 801fc24:	f100 80d7 	bmi.w	801fdd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fc28:	42be      	cmp	r6, r7
 801fc2a:	f340 80d4 	ble.w	801fdd6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801fc2e:	2900      	cmp	r1, #0
 801fc30:	f000 80d4 	beq.w	801fddc <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801fc34:	3601      	adds	r6, #1
 801fc36:	9801      	ldr	r0, [sp, #4]
 801fc38:	f819 7006 	ldrb.w	r7, [r9, r6]
 801fc3c:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801fc40:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801fc44:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801fc48:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fc4c:	fb09 f906 	mul.w	r9, r9, r6
 801fc50:	fb07 f800 	mul.w	r8, r7, r0
 801fc54:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801fc58:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801fc5c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801fc60:	44d1      	add	r9, sl
 801fc62:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801fc66:	f108 0020 	add.w	r0, r8, #32
 801fc6a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801fc6e:	0a00      	lsrs	r0, r0, #8
 801fc70:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801fc74:	4330      	orrs	r0, r6
 801fc76:	b28e      	uxth	r6, r1
 801fc78:	fa1f f98e 	uxth.w	r9, lr
 801fc7c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801fc80:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801fc84:	fb06 f809 	mul.w	r8, r6, r9
 801fc88:	0136      	lsls	r6, r6, #4
 801fc8a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fc8e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801fc92:	9601      	str	r6, [sp, #4]
 801fc94:	ea4a 0404 	orr.w	r4, sl, r4
 801fc98:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801fc9c:	fa1f f689 	uxth.w	r6, r9
 801fca0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801fca4:	fb11 f90e 	smulbb	r9, r1, lr
 801fca8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fcac:	9602      	str	r6, [sp, #8]
 801fcae:	4626      	mov	r6, r4
 801fcb0:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801fcb4:	f1ce 0410 	rsb	r4, lr, #16
 801fcb8:	ea4a 0202 	orr.w	r2, sl, r2
 801fcbc:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801fcc0:	1a64      	subs	r4, r4, r1
 801fcc2:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801fcc6:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801fcca:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801fcce:	434a      	muls	r2, r1
 801fcd0:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801fcd4:	ea4a 0000 	orr.w	r0, sl, r0
 801fcd8:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801fcdc:	fb04 2406 	mla	r4, r4, r6, r2
 801fce0:	9903      	ldr	r1, [sp, #12]
 801fce2:	fb09 4200 	mla	r2, r9, r0, r4
 801fce6:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801fcea:	9801      	ldr	r0, [sp, #4]
 801fcec:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801fcf0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801fcf4:	8809      	ldrh	r1, [r1, #0]
 801fcf6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801fcfa:	ea44 0b0b 	orr.w	fp, r4, fp
 801fcfe:	9c02      	ldr	r4, [sp, #8]
 801fd00:	1b00      	subs	r0, r0, r4
 801fd02:	9c01      	ldr	r4, [sp, #4]
 801fd04:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801fd08:	eba4 0608 	sub.w	r6, r4, r8
 801fd0c:	b280      	uxth	r0, r0
 801fd0e:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801fd12:	b2b6      	uxth	r6, r6
 801fd14:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801fd18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd1c:	4373      	muls	r3, r6
 801fd1e:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801fd22:	fb0c 3300 	mla	r3, ip, r0, r3
 801fd26:	9802      	ldr	r0, [sp, #8]
 801fd28:	ea42 0e0e 	orr.w	lr, r2, lr
 801fd2c:	fb00 3505 	mla	r5, r0, r5, r3
 801fd30:	120b      	asrs	r3, r1, #8
 801fd32:	10c8      	asrs	r0, r1, #3
 801fd34:	fb08 5707 	mla	r7, r8, r7, r5
 801fd38:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801fd3c:	00c9      	lsls	r1, r1, #3
 801fd3e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801fd42:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801fd46:	fa1f f28e 	uxth.w	r2, lr
 801fd4a:	b2c9      	uxtb	r1, r1
 801fd4c:	b2ff      	uxtb	r7, r7
 801fd4e:	437b      	muls	r3, r7
 801fd50:	4378      	muls	r0, r7
 801fd52:	434f      	muls	r7, r1
 801fd54:	1c59      	adds	r1, r3, #1
 801fd56:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801fd5a:	1213      	asrs	r3, r2, #8
 801fd5c:	f023 0307 	bic.w	r3, r3, #7
 801fd60:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801fd64:	1c41      	adds	r1, r0, #1
 801fd66:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801fd6a:	10d1      	asrs	r1, r2, #3
 801fd6c:	021b      	lsls	r3, r3, #8
 801fd6e:	f021 0103 	bic.w	r1, r1, #3
 801fd72:	00d2      	lsls	r2, r2, #3
 801fd74:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801fd78:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801fd7c:	00c9      	lsls	r1, r1, #3
 801fd7e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801fd82:	430b      	orrs	r3, r1
 801fd84:	1c79      	adds	r1, r7, #1
 801fd86:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801fd8a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801fd8e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801fd92:	431a      	orrs	r2, r3
 801fd94:	9b03      	ldr	r3, [sp, #12]
 801fd96:	801a      	strh	r2, [r3, #0]
 801fd98:	b005      	add	sp, #20
 801fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fd9e:	f04f 0c00 	mov.w	ip, #0
 801fda2:	4664      	mov	r4, ip
 801fda4:	e6e5      	b.n	801fb72 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801fda6:	2300      	movs	r3, #0
 801fda8:	469c      	mov	ip, r3
 801fdaa:	461a      	mov	r2, r3
 801fdac:	461c      	mov	r4, r3
 801fdae:	e707      	b.n	801fbc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fdb0:	2300      	movs	r3, #0
 801fdb2:	461a      	mov	r2, r3
 801fdb4:	e704      	b.n	801fbc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fdb6:	460b      	mov	r3, r1
 801fdb8:	460a      	mov	r2, r1
 801fdba:	e701      	b.n	801fbc0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801fdbc:	2500      	movs	r5, #0
 801fdbe:	46ab      	mov	fp, r5
 801fdc0:	e72f      	b.n	801fc22 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801fdc2:	2700      	movs	r7, #0
 801fdc4:	463d      	mov	r5, r7
 801fdc6:	4638      	mov	r0, r7
 801fdc8:	46bb      	mov	fp, r7
 801fdca:	e754      	b.n	801fc76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fdcc:	4677      	mov	r7, lr
 801fdce:	4675      	mov	r5, lr
 801fdd0:	4670      	mov	r0, lr
 801fdd2:	46f3      	mov	fp, lr
 801fdd4:	e74f      	b.n	801fc76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fdd6:	2700      	movs	r7, #0
 801fdd8:	4638      	mov	r0, r7
 801fdda:	e74c      	b.n	801fc76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801fddc:	460f      	mov	r7, r1
 801fdde:	4608      	mov	r0, r1
 801fde0:	e749      	b.n	801fc76 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801fde4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fde8:	b093      	sub	sp, #76	; 0x4c
 801fdea:	9210      	str	r2, [sp, #64]	; 0x40
 801fdec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801fdee:	9011      	str	r0, [sp, #68]	; 0x44
 801fdf0:	910e      	str	r1, [sp, #56]	; 0x38
 801fdf2:	6850      	ldr	r0, [r2, #4]
 801fdf4:	9306      	str	r3, [sp, #24]
 801fdf6:	6812      	ldr	r2, [r2, #0]
 801fdf8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801fdfc:	fb00 1303 	mla	r3, r0, r3, r1
 801fe00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801fe04:	9307      	str	r3, [sp, #28]
 801fe06:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe08:	681b      	ldr	r3, [r3, #0]
 801fe0a:	9308      	str	r3, [sp, #32]
 801fe0c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe0e:	685b      	ldr	r3, [r3, #4]
 801fe10:	9309      	str	r3, [sp, #36]	; 0x24
 801fe12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fe14:	2b00      	cmp	r3, #0
 801fe16:	dc03      	bgt.n	801fe20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801fe18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	f340 83b6 	ble.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801fe20:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fe2a:	1e48      	subs	r0, r1, #1
 801fe2c:	1e55      	subs	r5, r2, #1
 801fe2e:	9b06      	ldr	r3, [sp, #24]
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	f340 8165 	ble.w	8020100 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801fe36:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801fe38:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe3a:	1436      	asrs	r6, r6, #16
 801fe3c:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fe40:	d406      	bmi.n	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fe42:	4286      	cmp	r6, r0
 801fe44:	da04      	bge.n	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fe46:	2b00      	cmp	r3, #0
 801fe48:	db02      	blt.n	801fe50 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801fe4a:	42ab      	cmp	r3, r5
 801fe4c:	f2c0 8159 	blt.w	8020102 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801fe50:	3601      	adds	r6, #1
 801fe52:	f100 8146 	bmi.w	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fe56:	42b1      	cmp	r1, r6
 801fe58:	f2c0 8143 	blt.w	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fe5c:	3301      	adds	r3, #1
 801fe5e:	f100 8140 	bmi.w	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fe62:	429a      	cmp	r2, r3
 801fe64:	f2c0 813d 	blt.w	80200e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fe68:	9b06      	ldr	r3, [sp, #24]
 801fe6a:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801fe6e:	9f07      	ldr	r7, [sp, #28]
 801fe70:	930f      	str	r3, [sp, #60]	; 0x3c
 801fe72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe74:	2b00      	cmp	r3, #0
 801fe76:	f340 8166 	ble.w	8020146 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fe7a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe7c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801fe7e:	1418      	asrs	r0, r3, #16
 801fe80:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801fe82:	142d      	asrs	r5, r5, #16
 801fe84:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801fe88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801fe8a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801fe8e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801fe90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801fe94:	f100 81f0 	bmi.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fe98:	f102 3eff 	add.w	lr, r2, #4294967295
 801fe9c:	4575      	cmp	r5, lr
 801fe9e:	f280 81eb 	bge.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fea2:	2800      	cmp	r0, #0
 801fea4:	f2c0 81e8 	blt.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801fea8:	f103 3eff 	add.w	lr, r3, #4294967295
 801feac:	4570      	cmp	r0, lr
 801feae:	f280 81e3 	bge.w	8020278 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801feb2:	b212      	sxth	r2, r2
 801feb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801feb6:	fa1f fe81 	uxth.w	lr, r1
 801feba:	fb00 5002 	mla	r0, r0, r2, r5
 801febe:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801fec2:	eb03 0a00 	add.w	sl, r3, r0
 801fec6:	f813 9000 	ldrb.w	r9, [r3, r0]
 801feca:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801fece:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801fed2:	b29b      	uxth	r3, r3
 801fed4:	f1bc 0f00 	cmp.w	ip, #0
 801fed8:	f000 817b 	beq.w	80201d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801fedc:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801fee0:	eb0a 0b02 	add.w	fp, sl, r2
 801fee4:	fa1f fa8c 	uxth.w	sl, ip
 801fee8:	940a      	str	r4, [sp, #40]	; 0x28
 801feea:	fb0a fe0e 	mul.w	lr, sl, lr
 801feee:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801fef2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801fef6:	eba5 050e 	sub.w	r5, r5, lr
 801fefa:	940b      	str	r4, [sp, #44]	; 0x2c
 801fefc:	fa1f fa8a 	uxth.w	sl, sl
 801ff00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ff02:	b2ad      	uxth	r5, r5
 801ff04:	eba3 030a 	sub.w	r3, r3, sl
 801ff08:	fb08 f505 	mul.w	r5, r8, r5
 801ff0c:	b29b      	uxth	r3, r3
 801ff0e:	fb09 5303 	mla	r3, r9, r3, r5
 801ff12:	fb0a 3304 	mla	r3, sl, r4, r3
 801ff16:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801ff18:	fb0e 3304 	mla	r3, lr, r4, r3
 801ff1c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ff20:	2b00      	cmp	r3, #0
 801ff22:	f000 80d1 	beq.w	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801ff26:	9c08      	ldr	r4, [sp, #32]
 801ff28:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801ff2c:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801ff30:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801ff34:	f000 8152 	beq.w	80201dc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801ff38:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ff3c:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801ff40:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ff44:	fb0a fe0e 	mul.w	lr, sl, lr
 801ff48:	fb09 f000 	mul.w	r0, r9, r0
 801ff4c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801ff50:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ff54:	f100 0b20 	add.w	fp, r0, #32
 801ff58:	44ce      	add	lr, r9
 801ff5a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801ff5e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801ff62:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801ff66:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801ff6a:	ea4e 0909 	orr.w	r9, lr, r9
 801ff6e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801ff72:	8868      	ldrh	r0, [r5, #2]
 801ff74:	d019      	beq.n	801ffaa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ff76:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801ff7a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801ff7e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ff82:	fb0a fe0e 	mul.w	lr, sl, lr
 801ff86:	fb08 f800 	mul.w	r8, r8, r0
 801ff8a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801ff8e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801ff92:	f108 0b20 	add.w	fp, r8, #32
 801ff96:	4486      	add	lr, r0
 801ff98:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801ff9c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801ffa0:	0a00      	lsrs	r0, r0, #8
 801ffa2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ffa6:	ea4e 0000 	orr.w	r0, lr, r0
 801ffaa:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801ffae:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801ffb2:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801ffb6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ffba:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801ffbe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ffc2:	ea4e 0909 	orr.w	r9, lr, r9
 801ffc6:	ea4a 0000 	orr.w	r0, sl, r0
 801ffca:	f1bc 0f00 	cmp.w	ip, #0
 801ffce:	f000 8107 	beq.w	80201e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 801ffd2:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801ffd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ffd8:	3a01      	subs	r2, #1
 801ffda:	2cff      	cmp	r4, #255	; 0xff
 801ffdc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801ffe0:	f102 0202 	add.w	r2, r2, #2
 801ffe4:	eb05 0e02 	add.w	lr, r5, r2
 801ffe8:	5aaa      	ldrh	r2, [r5, r2]
 801ffea:	d018      	beq.n	802001e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 801ffec:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801fff0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fff4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801fff8:	fb04 fa02 	mul.w	sl, r4, r2
 801fffc:	fb08 f805 	mul.w	r8, r8, r5
 8020000:	f10a 0520 	add.w	r5, sl, #32
 8020004:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 8020008:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802000c:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 8020010:	4442      	add	r2, r8
 8020012:	0a2d      	lsrs	r5, r5, #8
 8020014:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 8020018:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802001c:	432a      	orrs	r2, r5
 802001e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8020020:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8020024:	2cff      	cmp	r4, #255	; 0xff
 8020026:	d01a      	beq.n	802005e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8020028:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802002c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8020030:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020034:	fb04 fa05 	mul.w	sl, r4, r5
 8020038:	fb08 f80e 	mul.w	r8, r8, lr
 802003c:	f10a 0e20 	add.w	lr, sl, #32
 8020040:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 8020044:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8020048:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802004c:	4445      	add	r5, r8
 802004e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020052:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 8020056:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802005a:	ea45 050e 	orr.w	r5, r5, lr
 802005e:	fb1c fe01 	smulbb	lr, ip, r1
 8020062:	f1cc 0810 	rsb	r8, ip, #16
 8020066:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802006a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802006e:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8020072:	eba8 0801 	sub.w	r8, r8, r1
 8020076:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802007a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802007e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8020082:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020086:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802008a:	ea4a 0202 	orr.w	r2, sl, r2
 802008e:	4341      	muls	r1, r0
 8020090:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8020094:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020098:	fb09 1108 	mla	r1, r9, r8, r1
 802009c:	ea4b 0505 	orr.w	r5, fp, r5
 80200a0:	fb0c 1102 	mla	r1, ip, r2, r1
 80200a4:	fb0e 1e05 	mla	lr, lr, r5, r1
 80200a8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80200ac:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80200b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80200b4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80200b8:	ea42 0e0e 	orr.w	lr, r2, lr
 80200bc:	fa1f f28e 	uxth.w	r2, lr
 80200c0:	2bff      	cmp	r3, #255	; 0xff
 80200c2:	f040 80a1 	bne.w	8020208 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 80200c6:	803a      	strh	r2, [r7, #0]
 80200c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200ca:	3702      	adds	r7, #2
 80200cc:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80200ce:	4413      	add	r3, r2
 80200d0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80200d2:	931d      	str	r3, [sp, #116]	; 0x74
 80200d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200d6:	441a      	add	r2, r3
 80200d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80200da:	3b01      	subs	r3, #1
 80200dc:	921e      	str	r2, [sp, #120]	; 0x78
 80200de:	930f      	str	r3, [sp, #60]	; 0x3c
 80200e0:	e6c7      	b.n	801fe72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80200e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200e4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80200e6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80200e8:	4433      	add	r3, r6
 80200ea:	931d      	str	r3, [sp, #116]	; 0x74
 80200ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80200ee:	441c      	add	r4, r3
 80200f0:	9b06      	ldr	r3, [sp, #24]
 80200f2:	3b01      	subs	r3, #1
 80200f4:	941e      	str	r4, [sp, #120]	; 0x78
 80200f6:	9306      	str	r3, [sp, #24]
 80200f8:	9b07      	ldr	r3, [sp, #28]
 80200fa:	3302      	adds	r3, #2
 80200fc:	9307      	str	r3, [sp, #28]
 80200fe:	e696      	b.n	801fe2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8020100:	d028      	beq.n	8020154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8020102:	9b06      	ldr	r3, [sp, #24]
 8020104:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8020106:	3b01      	subs	r3, #1
 8020108:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802010a:	fb00 5003 	mla	r0, r0, r3, r5
 802010e:	1400      	asrs	r0, r0, #16
 8020110:	f53f aeaa 	bmi.w	801fe68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020114:	3901      	subs	r1, #1
 8020116:	4288      	cmp	r0, r1
 8020118:	f6bf aea6 	bge.w	801fe68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802011c:	9920      	ldr	r1, [sp, #128]	; 0x80
 802011e:	981e      	ldr	r0, [sp, #120]	; 0x78
 8020120:	fb01 0303 	mla	r3, r1, r3, r0
 8020124:	141b      	asrs	r3, r3, #16
 8020126:	f53f ae9f 	bmi.w	801fe68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802012a:	3a01      	subs	r2, #1
 802012c:	4293      	cmp	r3, r2
 802012e:	f6bf ae9b 	bge.w	801fe68 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020132:	9b06      	ldr	r3, [sp, #24]
 8020134:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8020138:	f8dd e01c 	ldr.w	lr, [sp, #28]
 802013c:	930f      	str	r3, [sp, #60]	; 0x3c
 802013e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020140:	2b00      	cmp	r3, #0
 8020142:	f300 80b6 	bgt.w	80202b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 8020146:	9b06      	ldr	r3, [sp, #24]
 8020148:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802014c:	9b07      	ldr	r3, [sp, #28]
 802014e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 8020152:	9307      	str	r3, [sp, #28]
 8020154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020156:	2b00      	cmp	r3, #0
 8020158:	f340 8218 	ble.w	802058c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 802015c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020160:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020162:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020166:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802016a:	eef0 6a62 	vmov.f32	s13, s5
 802016e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020172:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020176:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802017a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 802017e:	eef0 6a43 	vmov.f32	s13, s6
 8020182:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020186:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802018a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802018e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020192:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020196:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802019a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802019e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201a2:	ee12 2a90 	vmov	r2, s5
 80201a6:	eef0 2a47 	vmov.f32	s5, s14
 80201aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80201ae:	ee13 2a10 	vmov	r2, s6
 80201b2:	931f      	str	r3, [sp, #124]	; 0x7c
 80201b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201b6:	eeb0 3a67 	vmov.f32	s6, s15
 80201ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80201be:	9320      	str	r3, [sp, #128]	; 0x80
 80201c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80201c2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80201c4:	3b01      	subs	r3, #1
 80201c6:	930e      	str	r3, [sp, #56]	; 0x38
 80201c8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80201ca:	bf08      	it	eq
 80201cc:	4613      	moveq	r3, r2
 80201ce:	9306      	str	r3, [sp, #24]
 80201d0:	e61f      	b.n	801fe12 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80201d2:	fb08 f505 	mul.w	r5, r8, r5
 80201d6:	fb09 5303 	mla	r3, r9, r3, r5
 80201da:	e69f      	b.n	801ff1c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80201dc:	4681      	mov	r9, r0
 80201de:	e6c6      	b.n	801ff6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80201e0:	f1c1 0210 	rsb	r2, r1, #16
 80201e4:	4341      	muls	r1, r0
 80201e6:	fb09 1902 	mla	r9, r9, r2, r1
 80201ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80201ee:	ea4f 5259 	mov.w	r2, r9, lsr #21
 80201f2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80201f6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80201fa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80201fe:	ea42 0909 	orr.w	r9, r2, r9
 8020202:	fa1f f289 	uxth.w	r2, r9
 8020206:	e75b      	b.n	80200c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 8020208:	f8b7 c000 	ldrh.w	ip, [r7]
 802020c:	43db      	mvns	r3, r3
 802020e:	ea4f 202c 	mov.w	r0, ip, asr #8
 8020212:	fa5f fe83 	uxtb.w	lr, r3
 8020216:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802021a:	ea4f 05ec 	mov.w	r5, ip, asr #3
 802021e:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 8020222:	fb00 f00e 	mul.w	r0, r0, lr
 8020226:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802022a:	b2db      	uxtb	r3, r3
 802022c:	1c41      	adds	r1, r0, #1
 802022e:	fb05 f50e 	mul.w	r5, r5, lr
 8020232:	fb03 f30e 	mul.w	r3, r3, lr
 8020236:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 802023a:	1211      	asrs	r1, r2, #8
 802023c:	f021 0107 	bic.w	r1, r1, #7
 8020240:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020244:	48d3      	ldr	r0, [pc, #844]	; (8020594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8020246:	b2c9      	uxtb	r1, r1
 8020248:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 802024c:	1c69      	adds	r1, r5, #1
 802024e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 8020252:	10d1      	asrs	r1, r2, #3
 8020254:	00d2      	lsls	r2, r2, #3
 8020256:	f021 0103 	bic.w	r1, r1, #3
 802025a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802025e:	00c9      	lsls	r1, r1, #3
 8020260:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020264:	4301      	orrs	r1, r0
 8020266:	1c58      	adds	r0, r3, #1
 8020268:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 802026c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020270:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020274:	430a      	orrs	r2, r1
 8020276:	e726      	b.n	80200c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 8020278:	f115 0e01 	adds.w	lr, r5, #1
 802027c:	f53f af24 	bmi.w	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8020280:	4572      	cmp	r2, lr
 8020282:	f6ff af21 	blt.w	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8020286:	f110 0e01 	adds.w	lr, r0, #1
 802028a:	f53f af1d 	bmi.w	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 802028e:	4573      	cmp	r3, lr
 8020290:	f6ff af1a 	blt.w	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 8020294:	b21b      	sxth	r3, r3
 8020296:	b212      	sxth	r2, r2
 8020298:	9301      	str	r3, [sp, #4]
 802029a:	9200      	str	r2, [sp, #0]
 802029c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80202a0:	e9cd 5002 	strd	r5, r0, [sp, #8]
 80202a4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80202a8:	4639      	mov	r1, r7
 80202aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80202ac:	f7ff fc22 	bl	801faf4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 80202b0:	e70a      	b.n	80200c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 80202b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80202b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80202ba:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80202be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80202c0:	fa1f fc82 	uxth.w	ip, r2
 80202c4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80202c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80202ca:	ea4f 100c 	mov.w	r0, ip, lsl #4
 80202ce:	141f      	asrs	r7, r3, #16
 80202d0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80202d2:	141b      	asrs	r3, r3, #16
 80202d4:	fb01 3707 	mla	r7, r1, r7, r3
 80202d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80202da:	eb03 0a07 	add.w	sl, r3, r7
 80202de:	f813 9007 	ldrb.w	r9, [r3, r7]
 80202e2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80202e6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80202ea:	b29b      	uxth	r3, r3
 80202ec:	2d00      	cmp	r5, #0
 80202ee:	f000 80fe 	beq.w	80204ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80202f2:	f81a 4001 	ldrb.w	r4, [sl, r1]
 80202f6:	eb0a 0b01 	add.w	fp, sl, r1
 80202fa:	fa1f fa85 	uxth.w	sl, r5
 80202fe:	940c      	str	r4, [sp, #48]	; 0x30
 8020300:	fb0a fc0c 	mul.w	ip, sl, ip
 8020304:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8020308:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 802030c:	eba0 000c 	sub.w	r0, r0, ip
 8020310:	940d      	str	r4, [sp, #52]	; 0x34
 8020312:	fa1f fa8a 	uxth.w	sl, sl
 8020316:	b280      	uxth	r0, r0
 8020318:	eba3 030a 	sub.w	r3, r3, sl
 802031c:	fb08 f000 	mul.w	r0, r8, r0
 8020320:	b29b      	uxth	r3, r3
 8020322:	fb09 0303 	mla	r3, r9, r3, r0
 8020326:	980c      	ldr	r0, [sp, #48]	; 0x30
 8020328:	fb0a 3300 	mla	r3, sl, r0, r3
 802032c:	fb0c 3304 	mla	r3, ip, r4, r3
 8020330:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020334:	2b00      	cmp	r3, #0
 8020336:	f000 80cc 	beq.w	80204d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802033a:	9808      	ldr	r0, [sp, #32]
 802033c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020340:	9c08      	ldr	r4, [sp, #32]
 8020342:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 8020346:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 802034a:	f000 80d5 	beq.w	80204f8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 802034e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020352:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8020356:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 802035a:	fb0a fc0c 	mul.w	ip, sl, ip
 802035e:	fb09 f707 	mul.w	r7, r9, r7
 8020362:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 8020366:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802036a:	f107 0b20 	add.w	fp, r7, #32
 802036e:	44cc      	add	ip, r9
 8020370:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 8020374:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 8020378:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802037c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8020380:	ea4c 0909 	orr.w	r9, ip, r9
 8020384:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020388:	8847      	ldrh	r7, [r0, #2]
 802038a:	d019      	beq.n	80203c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
 802038c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 8020390:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8020394:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8020398:	fb0a fc0c 	mul.w	ip, sl, ip
 802039c:	fb08 f807 	mul.w	r8, r8, r7
 80203a0:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 80203a4:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80203a8:	f108 0b20 	add.w	fp, r8, #32
 80203ac:	44bc      	add	ip, r7
 80203ae:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 80203b2:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 80203b6:	0a3f      	lsrs	r7, r7, #8
 80203b8:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80203bc:	ea4c 0707 	orr.w	r7, ip, r7
 80203c0:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80203c4:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80203c8:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 80203cc:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 80203d0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80203d4:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80203d8:	ea4c 0909 	orr.w	r9, ip, r9
 80203dc:	ea4a 0707 	orr.w	r7, sl, r7
 80203e0:	2d00      	cmp	r5, #0
 80203e2:	f000 808b 	beq.w	80204fc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80203e6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80203ea:	3901      	subs	r1, #1
 80203ec:	0049      	lsls	r1, r1, #1
 80203ee:	3102      	adds	r1, #2
 80203f0:	eb00 0c01 	add.w	ip, r0, r1
 80203f4:	5a41      	ldrh	r1, [r0, r1]
 80203f6:	980c      	ldr	r0, [sp, #48]	; 0x30
 80203f8:	28ff      	cmp	r0, #255	; 0xff
 80203fa:	d019      	beq.n	8020430 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 80203fc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 8020400:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8020402:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020406:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802040a:	fb04 fa01 	mul.w	sl, r4, r1
 802040e:	fb08 f800 	mul.w	r8, r8, r0
 8020412:	f10a 0020 	add.w	r0, sl, #32
 8020416:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 802041a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802041e:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 8020422:	4441      	add	r1, r8
 8020424:	0a00      	lsrs	r0, r0, #8
 8020426:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 802042a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802042e:	4301      	orrs	r1, r0
 8020430:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8020432:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 8020436:	2cff      	cmp	r4, #255	; 0xff
 8020438:	d01a      	beq.n	8020470 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
 802043a:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802043e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020442:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8020446:	fb04 fa00 	mul.w	sl, r4, r0
 802044a:	fb08 f80c 	mul.w	r8, r8, ip
 802044e:	f10a 0c20 	add.w	ip, sl, #32
 8020452:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 8020456:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802045a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802045e:	4440      	add	r0, r8
 8020460:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020464:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 8020468:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802046c:	ea40 000c 	orr.w	r0, r0, ip
 8020470:	fb15 fc02 	smulbb	ip, r5, r2
 8020474:	f1c5 0810 	rsb	r8, r5, #16
 8020478:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 802047c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020480:	ea4f 0cec 	mov.w	ip, ip, asr #3
 8020484:	eba8 0802 	sub.w	r8, r8, r2
 8020488:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 802048c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020490:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 8020494:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020498:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 802049c:	ea4a 0101 	orr.w	r1, sl, r1
 80204a0:	437a      	muls	r2, r7
 80204a2:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 80204a6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80204aa:	fb09 2208 	mla	r2, r9, r8, r2
 80204ae:	ea4b 0000 	orr.w	r0, fp, r0
 80204b2:	fb05 2201 	mla	r2, r5, r1, r2
 80204b6:	fb0c 2200 	mla	r2, ip, r0, r2
 80204ba:	0d57      	lsrs	r7, r2, #21
 80204bc:	0952      	lsrs	r2, r2, #5
 80204be:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 80204c2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80204c6:	433a      	orrs	r2, r7
 80204c8:	2bff      	cmp	r3, #255	; 0xff
 80204ca:	b292      	uxth	r2, r2
 80204cc:	d127      	bne.n	802051e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 80204ce:	f8ae 2000 	strh.w	r2, [lr]
 80204d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80204d4:	f10e 0e02 	add.w	lr, lr, #2
 80204d8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80204da:	4413      	add	r3, r2
 80204dc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80204de:	931d      	str	r3, [sp, #116]	; 0x74
 80204e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80204e2:	441a      	add	r2, r3
 80204e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80204e6:	3b01      	subs	r3, #1
 80204e8:	921e      	str	r2, [sp, #120]	; 0x78
 80204ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80204ec:	e627      	b.n	802013e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80204ee:	fb08 f000 	mul.w	r0, r8, r0
 80204f2:	fb09 0303 	mla	r3, r9, r3, r0
 80204f6:	e71b      	b.n	8020330 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
 80204f8:	46b9      	mov	r9, r7
 80204fa:	e743      	b.n	8020384 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
 80204fc:	f1c2 0110 	rsb	r1, r2, #16
 8020500:	437a      	muls	r2, r7
 8020502:	fb09 2901 	mla	r9, r9, r1, r2
 8020506:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802050a:	ea4f 5059 	mov.w	r0, r9, lsr #21
 802050e:	ea4f 1259 	mov.w	r2, r9, lsr #5
 8020512:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020516:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802051a:	4302      	orrs	r2, r0
 802051c:	e7d4      	b.n	80204c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
 802051e:	f8be 7000 	ldrh.w	r7, [lr]
 8020522:	43db      	mvns	r3, r3
 8020524:	4c1b      	ldr	r4, [pc, #108]	; (8020594 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
 8020526:	1238      	asrs	r0, r7, #8
 8020528:	fa5f fc83 	uxtb.w	ip, r3
 802052c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020530:	10fd      	asrs	r5, r7, #3
 8020532:	00fb      	lsls	r3, r7, #3
 8020534:	fb00 f00c 	mul.w	r0, r0, ip
 8020538:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 802053c:	b2db      	uxtb	r3, r3
 802053e:	fb05 f10c 	mul.w	r1, r5, ip
 8020542:	1c45      	adds	r5, r0, #1
 8020544:	fb03 f30c 	mul.w	r3, r3, ip
 8020548:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802054c:	1215      	asrs	r5, r2, #8
 802054e:	f025 0507 	bic.w	r5, r5, #7
 8020552:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8020556:	1c4d      	adds	r5, r1, #1
 8020558:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802055c:	10d1      	asrs	r1, r2, #3
 802055e:	b2c0      	uxtb	r0, r0
 8020560:	f021 0103 	bic.w	r1, r1, #3
 8020564:	00d2      	lsls	r2, r2, #3
 8020566:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 802056a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 802056e:	00c9      	lsls	r1, r1, #3
 8020570:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8020574:	4308      	orrs	r0, r1
 8020576:	1c59      	adds	r1, r3, #1
 8020578:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 802057c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020580:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8020584:	4318      	orrs	r0, r3
 8020586:	f8ae 0000 	strh.w	r0, [lr]
 802058a:	e7a2      	b.n	80204d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
 802058c:	b013      	add	sp, #76	; 0x4c
 802058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020592:	bf00      	nop
 8020594:	fffff800 	.word	0xfffff800

08020598 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 8020598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802059c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 80205a0:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 80205a4:	fb05 4c03 	mla	ip, r5, r3, r4
 80205a8:	2d00      	cmp	r5, #0
 80205aa:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80205ae:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80205b2:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 80205b6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80205ba:	8808      	ldrh	r0, [r1, #0]
 80205bc:	f2c0 80a7 	blt.w	802070e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80205c0:	45aa      	cmp	sl, r5
 80205c2:	f340 80a4 	ble.w	802070e <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 80205c6:	2c00      	cmp	r4, #0
 80205c8:	f2c0 809f 	blt.w	802070a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80205cc:	42a3      	cmp	r3, r4
 80205ce:	f340 809c 	ble.w	802070a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 80205d2:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 80205d6:	1c62      	adds	r2, r4, #1
 80205d8:	f100 809c 	bmi.w	8020714 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80205dc:	4293      	cmp	r3, r2
 80205de:	f340 8099 	ble.w	8020714 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80205e2:	f1b9 0f00 	cmp.w	r9, #0
 80205e6:	f000 8095 	beq.w	8020714 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 80205ea:	f8be c002 	ldrh.w	ip, [lr, #2]
 80205ee:	3501      	adds	r5, #1
 80205f0:	f100 8094 	bmi.w	802071c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80205f4:	45aa      	cmp	sl, r5
 80205f6:	f340 8091 	ble.w	802071c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 80205fa:	2f00      	cmp	r7, #0
 80205fc:	f000 808e 	beq.w	802071c <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 8020600:	2c00      	cmp	r4, #0
 8020602:	f2c0 8089 	blt.w	8020718 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 8020606:	42a3      	cmp	r3, r4
 8020608:	f340 8086 	ble.w	8020718 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 802060c:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 8020610:	3401      	adds	r4, #1
 8020612:	f100 8086 	bmi.w	8020722 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020616:	42a3      	cmp	r3, r4
 8020618:	f340 8083 	ble.w	8020722 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 802061c:	f1b9 0f00 	cmp.w	r9, #0
 8020620:	d07f      	beq.n	8020722 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 8020622:	3301      	adds	r3, #1
 8020624:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 8020628:	ea4f 4408 	mov.w	r4, r8, lsl #16
 802062c:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 8020630:	fb19 fe07 	smulbb	lr, r9, r7
 8020634:	f1c7 0210 	rsb	r2, r7, #16
 8020638:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 802063c:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 8020640:	eba2 0209 	sub.w	r2, r2, r9
 8020644:	ea44 0808 	orr.w	r8, r4, r8
 8020648:	ea4f 440c 	mov.w	r4, ip, lsl #16
 802064c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020650:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 8020654:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 8020658:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 802065c:	ea44 0c0c 	orr.w	ip, r4, ip
 8020660:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 8020664:	fb04 f40c 	mul.w	r4, r4, ip
 8020668:	fb02 4808 	mla	r8, r2, r8, r4
 802066c:	041a      	lsls	r2, r3, #16
 802066e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020672:	b2b4      	uxth	r4, r6
 8020674:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020678:	43f6      	mvns	r6, r6
 802067a:	4313      	orrs	r3, r2
 802067c:	042a      	lsls	r2, r5, #16
 802067e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8020682:	b2f6      	uxtb	r6, r6
 8020684:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020688:	fb0e 8303 	mla	r3, lr, r3, r8
 802068c:	432a      	orrs	r2, r5
 802068e:	fb07 3202 	mla	r2, r7, r2, r3
 8020692:	10c7      	asrs	r7, r0, #3
 8020694:	0d53      	lsrs	r3, r2, #21
 8020696:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 802069a:	0952      	lsrs	r2, r2, #5
 802069c:	fb17 f706 	smulbb	r7, r7, r6
 80206a0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80206a4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80206a8:	431a      	orrs	r2, r3
 80206aa:	b293      	uxth	r3, r2
 80206ac:	1202      	asrs	r2, r0, #8
 80206ae:	121d      	asrs	r5, r3, #8
 80206b0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80206b4:	00c0      	lsls	r0, r0, #3
 80206b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80206ba:	fb12 f206 	smulbb	r2, r2, r6
 80206be:	b2c0      	uxtb	r0, r0
 80206c0:	fb05 2504 	mla	r5, r5, r4, r2
 80206c4:	10da      	asrs	r2, r3, #3
 80206c6:	fb10 f006 	smulbb	r0, r0, r6
 80206ca:	00db      	lsls	r3, r3, #3
 80206cc:	b2ad      	uxth	r5, r5
 80206ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80206d2:	b2db      	uxtb	r3, r3
 80206d4:	fb02 7204 	mla	r2, r2, r4, r7
 80206d8:	fb03 0004 	mla	r0, r3, r4, r0
 80206dc:	1c6b      	adds	r3, r5, #1
 80206de:	b292      	uxth	r2, r2
 80206e0:	b280      	uxth	r0, r0
 80206e2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80206e6:	1c43      	adds	r3, r0, #1
 80206e8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80206ec:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 80206f0:	1c50      	adds	r0, r2, #1
 80206f2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80206f6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80206fa:	0952      	lsrs	r2, r2, #5
 80206fc:	432b      	orrs	r3, r5
 80206fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020702:	4313      	orrs	r3, r2
 8020704:	800b      	strh	r3, [r1, #0]
 8020706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802070a:	4680      	mov	r8, r0
 802070c:	e763      	b.n	80205d6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 802070e:	4684      	mov	ip, r0
 8020710:	4680      	mov	r8, r0
 8020712:	e76c      	b.n	80205ee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020714:	4684      	mov	ip, r0
 8020716:	e76a      	b.n	80205ee <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 8020718:	4605      	mov	r5, r0
 802071a:	e779      	b.n	8020610 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 802071c:	4603      	mov	r3, r0
 802071e:	4605      	mov	r5, r0
 8020720:	e782      	b.n	8020628 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 8020722:	4603      	mov	r3, r0
 8020724:	e780      	b.n	8020628 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

08020726 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020726:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802072a:	b093      	sub	sp, #76	; 0x4c
 802072c:	461d      	mov	r5, r3
 802072e:	9210      	str	r2, [sp, #64]	; 0x40
 8020730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020732:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 8020736:	910a      	str	r1, [sp, #40]	; 0x28
 8020738:	920b      	str	r2, [sp, #44]	; 0x2c
 802073a:	6859      	ldr	r1, [r3, #4]
 802073c:	681b      	ldr	r3, [r3, #0]
 802073e:	9011      	str	r0, [sp, #68]	; 0x44
 8020740:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 8020744:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8020748:	fb01 2707 	mla	r7, r1, r7, r2
 802074c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8020750:	9307      	str	r3, [sp, #28]
 8020752:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	9309      	str	r3, [sp, #36]	; 0x24
 8020758:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802075a:	43db      	mvns	r3, r3
 802075c:	b2db      	uxtb	r3, r3
 802075e:	9308      	str	r3, [sp, #32]
 8020760:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020762:	2b00      	cmp	r3, #0
 8020764:	dc03      	bgt.n	802076e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020766:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020768:	2b00      	cmp	r3, #0
 802076a:	f340 8205 	ble.w	8020b78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802076e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020770:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020774:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020778:	1e48      	subs	r0, r1, #1
 802077a:	f102 3cff 	add.w	ip, r2, #4294967295
 802077e:	2d00      	cmp	r5, #0
 8020780:	f340 80da 	ble.w	8020938 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 8020784:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020788:	ea4f 4326 	mov.w	r3, r6, asr #16
 802078c:	d406      	bmi.n	802079c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802078e:	4586      	cmp	lr, r0
 8020790:	da04      	bge.n	802079c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020792:	2b00      	cmp	r3, #0
 8020794:	db02      	blt.n	802079c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8020796:	4563      	cmp	r3, ip
 8020798:	f2c0 80cf 	blt.w	802093a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 802079c:	f11e 0e01 	adds.w	lr, lr, #1
 80207a0:	f100 80c1 	bmi.w	8020926 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80207a4:	4571      	cmp	r1, lr
 80207a6:	f2c0 80be 	blt.w	8020926 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80207aa:	3301      	adds	r3, #1
 80207ac:	f100 80bb 	bmi.w	8020926 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80207b0:	429a      	cmp	r2, r3
 80207b2:	f2c0 80b8 	blt.w	8020926 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 80207b6:	46a9      	mov	r9, r5
 80207b8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80207bc:	f1b9 0f00 	cmp.w	r9, #0
 80207c0:	f340 80d8 	ble.w	8020974 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 80207c4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80207c6:	1421      	asrs	r1, r4, #16
 80207c8:	ea4f 4026 	mov.w	r0, r6, asr #16
 80207cc:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80207d0:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 80207d4:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80207d8:	f100 8112 	bmi.w	8020a00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80207dc:	f10e 3aff 	add.w	sl, lr, #4294967295
 80207e0:	4551      	cmp	r1, sl
 80207e2:	f280 810d 	bge.w	8020a00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80207e6:	2800      	cmp	r0, #0
 80207e8:	f2c0 810a 	blt.w	8020a00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80207ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80207f0:	4550      	cmp	r0, sl
 80207f2:	f280 8105 	bge.w	8020a00 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80207f6:	fa0f f38e 	sxth.w	r3, lr
 80207fa:	fb00 1103 	mla	r1, r0, r3, r1
 80207fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020800:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 8020804:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8020808:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 802080c:	f1bc 0f00 	cmp.w	ip, #0
 8020810:	d007      	beq.n	8020822 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 8020812:	005b      	lsls	r3, r3, #1
 8020814:	eb0a 0003 	add.w	r0, sl, r3
 8020818:	f83a 3003 	ldrh.w	r3, [sl, r3]
 802081c:	930c      	str	r3, [sp, #48]	; 0x30
 802081e:	8843      	ldrh	r3, [r0, #2]
 8020820:	930d      	str	r3, [sp, #52]	; 0x34
 8020822:	ea4f 400e 	mov.w	r0, lr, lsl #16
 8020826:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802082a:	fb12 f30c 	smulbb	r3, r2, ip
 802082e:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 8020832:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020836:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802083a:	10db      	asrs	r3, r3, #3
 802083c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8020840:	ea40 000e 	orr.w	r0, r0, lr
 8020844:	f1cc 0e10 	rsb	lr, ip, #16
 8020848:	ea4a 0101 	orr.w	r1, sl, r1
 802084c:	9f08      	ldr	r7, [sp, #32]
 802084e:	ebae 0e02 	sub.w	lr, lr, r2
 8020852:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020856:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 802085a:	4351      	muls	r1, r2
 802085c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802085e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020862:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020864:	0410      	lsls	r0, r2, #16
 8020866:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 802086a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 802086e:	4310      	orrs	r0, r2
 8020870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020872:	0412      	lsls	r2, r2, #16
 8020874:	fb03 e000 	mla	r0, r3, r0, lr
 8020878:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802087c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020880:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020884:	ea42 020e 	orr.w	r2, r2, lr
 8020888:	fb03 0302 	mla	r3, r3, r2, r0
 802088c:	f8b8 0000 	ldrh.w	r0, [r8]
 8020890:	0d5a      	lsrs	r2, r3, #21
 8020892:	095b      	lsrs	r3, r3, #5
 8020894:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020898:	1201      	asrs	r1, r0, #8
 802089a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802089e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 80208a2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80208a6:	00c0      	lsls	r0, r0, #3
 80208a8:	4313      	orrs	r3, r2
 80208aa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80208ae:	fb11 f107 	smulbb	r1, r1, r7
 80208b2:	b2c0      	uxtb	r0, r0
 80208b4:	b29b      	uxth	r3, r3
 80208b6:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 80208ba:	fb10 f007 	smulbb	r0, r0, r7
 80208be:	fb1e fe07 	smulbb	lr, lr, r7
 80208c2:	ea4f 2c23 	mov.w	ip, r3, asr #8
 80208c6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80208ca:	fb0c 1c02 	mla	ip, ip, r2, r1
 80208ce:	10d9      	asrs	r1, r3, #3
 80208d0:	00db      	lsls	r3, r3, #3
 80208d2:	fa1f fc8c 	uxth.w	ip, ip
 80208d6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80208da:	b2db      	uxtb	r3, r3
 80208dc:	fb01 e102 	mla	r1, r1, r2, lr
 80208e0:	fb03 0302 	mla	r3, r3, r2, r0
 80208e4:	b289      	uxth	r1, r1
 80208e6:	b29a      	uxth	r2, r3
 80208e8:	f10c 0301 	add.w	r3, ip, #1
 80208ec:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80208f0:	1c53      	adds	r3, r2, #1
 80208f2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80208f6:	1c4a      	adds	r2, r1, #1
 80208f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80208fc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8020900:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020904:	0949      	lsrs	r1, r1, #5
 8020906:	ea43 030c 	orr.w	r3, r3, ip
 802090a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802090e:	430b      	orrs	r3, r1
 8020910:	f8a8 3000 	strh.w	r3, [r8]
 8020914:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020916:	f108 0802 	add.w	r8, r8, #2
 802091a:	f109 39ff 	add.w	r9, r9, #4294967295
 802091e:	441c      	add	r4, r3
 8020920:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020922:	441e      	add	r6, r3
 8020924:	e74a      	b.n	80207bc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8020926:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020928:	3d01      	subs	r5, #1
 802092a:	441c      	add	r4, r3
 802092c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802092e:	441e      	add	r6, r3
 8020930:	9b07      	ldr	r3, [sp, #28]
 8020932:	3302      	adds	r3, #2
 8020934:	9307      	str	r3, [sp, #28]
 8020936:	e722      	b.n	802077e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020938:	d022      	beq.n	8020980 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 802093a:	1e6b      	subs	r3, r5, #1
 802093c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802093e:	fb00 4003 	mla	r0, r0, r3, r4
 8020942:	1400      	asrs	r0, r0, #16
 8020944:	f53f af37 	bmi.w	80207b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020948:	3901      	subs	r1, #1
 802094a:	4288      	cmp	r0, r1
 802094c:	f6bf af33 	bge.w	80207b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020950:	9920      	ldr	r1, [sp, #128]	; 0x80
 8020952:	fb01 6303 	mla	r3, r1, r3, r6
 8020956:	141b      	asrs	r3, r3, #16
 8020958:	f53f af2d 	bmi.w	80207b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802095c:	3a01      	subs	r2, #1
 802095e:	4293      	cmp	r3, r2
 8020960:	f6bf af29 	bge.w	80207b6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8020964:	46a8      	mov	r8, r5
 8020966:	f8dd 901c 	ldr.w	r9, [sp, #28]
 802096a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 802096e:	f1b8 0f00 	cmp.w	r8, #0
 8020972:	dc60      	bgt.n	8020a36 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 8020974:	9b07      	ldr	r3, [sp, #28]
 8020976:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 802097a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 802097e:	9307      	str	r3, [sp, #28]
 8020980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020982:	2b00      	cmp	r3, #0
 8020984:	f340 80f8 	ble.w	8020b78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8020988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802098c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802098e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020992:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020996:	eef0 6a62 	vmov.f32	s13, s5
 802099a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802099e:	ee31 1a05 	vadd.f32	s2, s2, s10
 80209a2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209a6:	ee16 4a90 	vmov	r4, s13
 80209aa:	eef0 6a43 	vmov.f32	s13, s6
 80209ae:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80209b2:	ee16 6a90 	vmov	r6, s13
 80209b6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80209ba:	ee61 7a27 	vmul.f32	s15, s2, s15
 80209be:	ee77 2a62 	vsub.f32	s5, s14, s5
 80209c2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80209c6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80209ca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80209ce:	ee12 2a90 	vmov	r2, s5
 80209d2:	eef0 2a47 	vmov.f32	s5, s14
 80209d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80209da:	ee13 2a10 	vmov	r2, s6
 80209de:	931f      	str	r3, [sp, #124]	; 0x7c
 80209e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80209e2:	eeb0 3a67 	vmov.f32	s6, s15
 80209e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80209ea:	9320      	str	r3, [sp, #128]	; 0x80
 80209ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80209ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80209f0:	3b01      	subs	r3, #1
 80209f2:	930a      	str	r3, [sp, #40]	; 0x28
 80209f4:	bf08      	it	eq
 80209f6:	4615      	moveq	r5, r2
 80209f8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80209fa:	bf18      	it	ne
 80209fc:	461d      	movne	r5, r3
 80209fe:	e6af      	b.n	8020760 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020a00:	f111 0a01 	adds.w	sl, r1, #1
 8020a04:	d486      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020a06:	45d6      	cmp	lr, sl
 8020a08:	db84      	blt.n	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020a0a:	f110 0a01 	adds.w	sl, r0, #1
 8020a0e:	d481      	bmi.n	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020a10:	4553      	cmp	r3, sl
 8020a12:	f6ff af7f 	blt.w	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020a16:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8020a18:	b21b      	sxth	r3, r3
 8020a1a:	9101      	str	r1, [sp, #4]
 8020a1c:	4641      	mov	r1, r8
 8020a1e:	9300      	str	r3, [sp, #0]
 8020a20:	fa0f f38e 	sxth.w	r3, lr
 8020a24:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8020a28:	e9cd c704 	strd	ip, r7, [sp, #16]
 8020a2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020a2e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8020a30:	f7ff fdb2 	bl	8020598 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 8020a34:	e76e      	b.n	8020914 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8020a36:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020a38:	1430      	asrs	r0, r6, #16
 8020a3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8020a3c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020a40:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020a44:	1423      	asrs	r3, r4, #16
 8020a46:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020a4a:	fb01 3000 	mla	r0, r1, r0, r3
 8020a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020a50:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8020a54:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 8020a58:	8858      	ldrh	r0, [r3, #2]
 8020a5a:	f1be 0f00 	cmp.w	lr, #0
 8020a5e:	d00b      	beq.n	8020a78 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8020a60:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8020a64:	3901      	subs	r1, #1
 8020a66:	0049      	lsls	r1, r1, #1
 8020a68:	3102      	adds	r1, #2
 8020a6a:	eb03 0b01 	add.w	fp, r3, r1
 8020a6e:	5a5b      	ldrh	r3, [r3, r1]
 8020a70:	930e      	str	r3, [sp, #56]	; 0x38
 8020a72:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8020a78:	ea4f 410c 	mov.w	r1, ip, lsl #16
 8020a7c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020a80:	fb12 f30e 	smulbb	r3, r2, lr
 8020a84:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8020a88:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8020a8c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020a90:	10db      	asrs	r3, r3, #3
 8020a92:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020a96:	ea41 010c 	orr.w	r1, r1, ip
 8020a9a:	f1ce 0c10 	rsb	ip, lr, #16
 8020a9e:	ea4b 0000 	orr.w	r0, fp, r0
 8020aa2:	9f08      	ldr	r7, [sp, #32]
 8020aa4:	ebac 0c02 	sub.w	ip, ip, r2
 8020aa8:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020aac:	f108 38ff 	add.w	r8, r8, #4294967295
 8020ab0:	4350      	muls	r0, r2
 8020ab2:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020ab6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020ab8:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020abc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8020abe:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020ac2:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 8020ac6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020ac8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020acc:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020ad0:	0412      	lsls	r2, r2, #16
 8020ad2:	ea4b 0101 	orr.w	r1, fp, r1
 8020ad6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020ada:	fb03 c101 	mla	r1, r3, r1, ip
 8020ade:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020ae2:	4302      	orrs	r2, r0
 8020ae4:	fb03 1202 	mla	r2, r3, r2, r1
 8020ae8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 8020aec:	0952      	lsrs	r2, r2, #5
 8020aee:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8020af2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 8020af6:	f8b9 2000 	ldrh.w	r2, [r9]
 8020afa:	ea4b 0303 	orr.w	r3, fp, r3
 8020afe:	1211      	asrs	r1, r2, #8
 8020b00:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 8020b04:	b29b      	uxth	r3, r3
 8020b06:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8020b0a:	00d2      	lsls	r2, r2, #3
 8020b0c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8020b10:	fb11 f107 	smulbb	r1, r1, r7
 8020b14:	1218      	asrs	r0, r3, #8
 8020b16:	fb1c fc07 	smulbb	ip, ip, r7
 8020b1a:	b2d2      	uxtb	r2, r2
 8020b1c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020b20:	fb12 f207 	smulbb	r2, r2, r7
 8020b24:	fb00 100a 	mla	r0, r0, sl, r1
 8020b28:	10d9      	asrs	r1, r3, #3
 8020b2a:	00db      	lsls	r3, r3, #3
 8020b2c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020b30:	b280      	uxth	r0, r0
 8020b32:	b2db      	uxtb	r3, r3
 8020b34:	fb01 c10a 	mla	r1, r1, sl, ip
 8020b38:	fb03 230a 	mla	r3, r3, sl, r2
 8020b3c:	1c42      	adds	r2, r0, #1
 8020b3e:	b289      	uxth	r1, r1
 8020b40:	b29b      	uxth	r3, r3
 8020b42:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020b46:	f101 0c01 	add.w	ip, r1, #1
 8020b4a:	1c5a      	adds	r2, r3, #1
 8020b4c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8020b50:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8020b54:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020b58:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8020b5a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020b5e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8020b62:	441c      	add	r4, r3
 8020b64:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020b68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020b6a:	4310      	orrs	r0, r2
 8020b6c:	441e      	add	r6, r3
 8020b6e:	ea40 000c 	orr.w	r0, r0, ip
 8020b72:	f829 0b02 	strh.w	r0, [r9], #2
 8020b76:	e6fa      	b.n	802096e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8020b78:	b013      	add	sp, #76	; 0x4c
 8020b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b7e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 8020b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020b82:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 8020b86:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 8020b8a:	fb0e 4703 	mla	r7, lr, r3, r4
 8020b8e:	f1be 0f00 	cmp.w	lr, #0
 8020b92:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 8020b96:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8020b9a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 8020b9e:	8808      	ldrh	r0, [r1, #0]
 8020ba0:	db60      	blt.n	8020c64 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020ba2:	45f1      	cmp	r9, lr
 8020ba4:	dd5e      	ble.n	8020c64 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 8020ba6:	2c00      	cmp	r4, #0
 8020ba8:	db5a      	blt.n	8020c60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020baa:	42a3      	cmp	r3, r4
 8020bac:	dd58      	ble.n	8020c60 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 8020bae:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 8020bb2:	1c62      	adds	r2, r4, #1
 8020bb4:	d459      	bmi.n	8020c6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020bb6:	4293      	cmp	r3, r2
 8020bb8:	dd57      	ble.n	8020c6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020bba:	2d00      	cmp	r5, #0
 8020bbc:	d055      	beq.n	8020c6a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 8020bbe:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 8020bc2:	f11e 0e01 	adds.w	lr, lr, #1
 8020bc6:	d454      	bmi.n	8020c72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020bc8:	45f1      	cmp	r9, lr
 8020bca:	dd52      	ble.n	8020c72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020bcc:	2e00      	cmp	r6, #0
 8020bce:	d050      	beq.n	8020c72 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 8020bd0:	2c00      	cmp	r4, #0
 8020bd2:	db4c      	blt.n	8020c6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020bd4:	42a3      	cmp	r3, r4
 8020bd6:	dd4a      	ble.n	8020c6e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 8020bd8:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 8020bdc:	3401      	adds	r4, #1
 8020bde:	d405      	bmi.n	8020bec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020be0:	42a3      	cmp	r3, r4
 8020be2:	dd03      	ble.n	8020bec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020be4:	b115      	cbz	r5, 8020bec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 8020be6:	3301      	adds	r3, #1
 8020be8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 8020bec:	fb15 f406 	smulbb	r4, r5, r6
 8020bf0:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8020bf4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 8020bf8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020bfc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020c00:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 8020c04:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8020c08:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 8020c0c:	ea43 0c0c 	orr.w	ip, r3, ip
 8020c10:	f1c6 0310 	rsb	r3, r6, #16
 8020c14:	ea4e 0707 	orr.w	r7, lr, r7
 8020c18:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 8020c1c:	1b5b      	subs	r3, r3, r5
 8020c1e:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 8020c22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8020c26:	437d      	muls	r5, r7
 8020c28:	fb03 5c0c 	mla	ip, r3, ip, r5
 8020c2c:	0403      	lsls	r3, r0, #16
 8020c2e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020c32:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020c36:	4318      	orrs	r0, r3
 8020c38:	0413      	lsls	r3, r2, #16
 8020c3a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020c3e:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8020c42:	fb04 c000 	mla	r0, r4, r0, ip
 8020c46:	4313      	orrs	r3, r2
 8020c48:	fb06 0003 	mla	r0, r6, r3, r0
 8020c4c:	0d43      	lsrs	r3, r0, #21
 8020c4e:	0940      	lsrs	r0, r0, #5
 8020c50:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020c54:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020c58:	4318      	orrs	r0, r3
 8020c5a:	8008      	strh	r0, [r1, #0]
 8020c5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020c60:	4684      	mov	ip, r0
 8020c62:	e7a6      	b.n	8020bb2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 8020c64:	4607      	mov	r7, r0
 8020c66:	4684      	mov	ip, r0
 8020c68:	e7ab      	b.n	8020bc2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020c6a:	4607      	mov	r7, r0
 8020c6c:	e7a9      	b.n	8020bc2 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 8020c6e:	4602      	mov	r2, r0
 8020c70:	e7b4      	b.n	8020bdc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 8020c72:	4602      	mov	r2, r0
 8020c74:	e7ba      	b.n	8020bec <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

08020c76 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c7a:	b08f      	sub	sp, #60	; 0x3c
 8020c7c:	461d      	mov	r5, r3
 8020c7e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020c80:	9107      	str	r1, [sp, #28]
 8020c82:	920c      	str	r2, [sp, #48]	; 0x30
 8020c84:	6859      	ldr	r1, [r3, #4]
 8020c86:	681b      	ldr	r3, [r3, #0]
 8020c88:	900d      	str	r0, [sp, #52]	; 0x34
 8020c8a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8020c8e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8020c92:	fb01 2707 	mla	r7, r1, r7, r2
 8020c96:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8020c9a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c9c:	f8d3 8000 	ldr.w	r8, [r3]
 8020ca0:	9b07      	ldr	r3, [sp, #28]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	dc03      	bgt.n	8020cae <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8020ca6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020ca8:	2b00      	cmp	r3, #0
 8020caa:	f340 8182 	ble.w	8020fb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020cae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020cb0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cb4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020cb8:	1e48      	subs	r0, r1, #1
 8020cba:	f102 3cff 	add.w	ip, r2, #4294967295
 8020cbe:	2d00      	cmp	r5, #0
 8020cc0:	f340 809b 	ble.w	8020dfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 8020cc4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020cc8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020ccc:	d406      	bmi.n	8020cdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020cce:	4586      	cmp	lr, r0
 8020cd0:	da04      	bge.n	8020cdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	db02      	blt.n	8020cdc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020cd6:	4563      	cmp	r3, ip
 8020cd8:	f2c0 8090 	blt.w	8020dfc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8020cdc:	f11e 0e01 	adds.w	lr, lr, #1
 8020ce0:	f100 8084 	bmi.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020ce4:	4571      	cmp	r1, lr
 8020ce6:	f2c0 8081 	blt.w	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020cea:	3301      	adds	r3, #1
 8020cec:	d47e      	bmi.n	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020cee:	429a      	cmp	r2, r3
 8020cf0:	db7c      	blt.n	8020dec <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8020cf2:	46aa      	mov	sl, r5
 8020cf4:	46b9      	mov	r9, r7
 8020cf6:	f1ba 0f00 	cmp.w	sl, #0
 8020cfa:	f340 8099 	ble.w	8020e30 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8020cfe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d00:	1421      	asrs	r1, r4, #16
 8020d02:	ea4f 4026 	mov.w	r0, r6, asr #16
 8020d06:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020d0a:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8020d0e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8020d12:	f100 80d1 	bmi.w	8020eb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020d16:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020d1a:	4559      	cmp	r1, fp
 8020d1c:	f280 80cc 	bge.w	8020eb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020d20:	2800      	cmp	r0, #0
 8020d22:	f2c0 80c9 	blt.w	8020eb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020d26:	f103 3bff 	add.w	fp, r3, #4294967295
 8020d2a:	4558      	cmp	r0, fp
 8020d2c:	f280 80c4 	bge.w	8020eb8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8020d30:	fa0f fe8e 	sxth.w	lr, lr
 8020d34:	fb00 110e 	mla	r1, r0, lr, r1
 8020d38:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020d3c:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8020d40:	8841      	ldrh	r1, [r0, #2]
 8020d42:	f1bc 0f00 	cmp.w	ip, #0
 8020d46:	d00b      	beq.n	8020d60 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 8020d48:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8020d4c:	3b01      	subs	r3, #1
 8020d4e:	005b      	lsls	r3, r3, #1
 8020d50:	3302      	adds	r3, #2
 8020d52:	eb00 0e03 	add.w	lr, r0, r3
 8020d56:	5ac3      	ldrh	r3, [r0, r3]
 8020d58:	9308      	str	r3, [sp, #32]
 8020d5a:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8020d5e:	9309      	str	r3, [sp, #36]	; 0x24
 8020d60:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8020d64:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8020d68:	fb12 f30c 	smulbb	r3, r2, ip
 8020d6c:	f1cc 0e10 	rsb	lr, ip, #16
 8020d70:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020d74:	10db      	asrs	r3, r3, #3
 8020d76:	ebae 0e02 	sub.w	lr, lr, r2
 8020d7a:	ea40 000b 	orr.w	r0, r0, fp
 8020d7e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020d82:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020d86:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020d8a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020d8e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8020d92:	ea4b 0101 	orr.w	r1, fp, r1
 8020d96:	4351      	muls	r1, r2
 8020d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020d9a:	fb0e 1e00 	mla	lr, lr, r0, r1
 8020d9e:	0410      	lsls	r0, r2, #16
 8020da0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8020da4:	9908      	ldr	r1, [sp, #32]
 8020da6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020daa:	4310      	orrs	r0, r2
 8020dac:	9a08      	ldr	r2, [sp, #32]
 8020dae:	0412      	lsls	r2, r2, #16
 8020db0:	fb03 e000 	mla	r0, r3, r0, lr
 8020db4:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8020db8:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8020dbc:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020dc0:	ea42 020e 	orr.w	r2, r2, lr
 8020dc4:	fb03 0302 	mla	r3, r3, r2, r0
 8020dc8:	0d5a      	lsrs	r2, r3, #21
 8020dca:	095b      	lsrs	r3, r3, #5
 8020dcc:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020dd0:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8020dd4:	4313      	orrs	r3, r2
 8020dd6:	f8a9 3000 	strh.w	r3, [r9]
 8020dda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020ddc:	f109 0902 	add.w	r9, r9, #2
 8020de0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020de4:	441c      	add	r4, r3
 8020de6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020de8:	441e      	add	r6, r3
 8020dea:	e784      	b.n	8020cf6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8020dec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020dee:	3d01      	subs	r5, #1
 8020df0:	3702      	adds	r7, #2
 8020df2:	441c      	add	r4, r3
 8020df4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020df6:	441e      	add	r6, r3
 8020df8:	e761      	b.n	8020cbe <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020dfa:	d01d      	beq.n	8020e38 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8020dfc:	1e6b      	subs	r3, r5, #1
 8020dfe:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8020e00:	fb00 4003 	mla	r0, r0, r3, r4
 8020e04:	1400      	asrs	r0, r0, #16
 8020e06:	f53f af74 	bmi.w	8020cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e0a:	3901      	subs	r1, #1
 8020e0c:	4288      	cmp	r0, r1
 8020e0e:	f6bf af70 	bge.w	8020cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e12:	991c      	ldr	r1, [sp, #112]	; 0x70
 8020e14:	fb01 6303 	mla	r3, r1, r3, r6
 8020e18:	141b      	asrs	r3, r3, #16
 8020e1a:	f53f af6a 	bmi.w	8020cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e1e:	3a01      	subs	r2, #1
 8020e20:	4293      	cmp	r3, r2
 8020e22:	f6bf af66 	bge.w	8020cf2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8020e26:	46a9      	mov	r9, r5
 8020e28:	46ba      	mov	sl, r7
 8020e2a:	f1b9 0f00 	cmp.w	r9, #0
 8020e2e:	dc5b      	bgt.n	8020ee8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8020e30:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8020e34:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 8020e38:	9b07      	ldr	r3, [sp, #28]
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	f340 80b9 	ble.w	8020fb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
 8020e40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020e44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e46:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020e4a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020e4e:	eef0 6a62 	vmov.f32	s13, s5
 8020e52:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020e56:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020e5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e5e:	ee16 4a90 	vmov	r4, s13
 8020e62:	eef0 6a43 	vmov.f32	s13, s6
 8020e66:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020e6a:	ee16 6a90 	vmov	r6, s13
 8020e6e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020e72:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020e76:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020e7a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020e7e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020e82:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020e86:	ee12 2a90 	vmov	r2, s5
 8020e8a:	eef0 2a47 	vmov.f32	s5, s14
 8020e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e92:	ee13 2a10 	vmov	r2, s6
 8020e96:	931b      	str	r3, [sp, #108]	; 0x6c
 8020e98:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020e9a:	eeb0 3a67 	vmov.f32	s6, s15
 8020e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ea2:	931c      	str	r3, [sp, #112]	; 0x70
 8020ea4:	9b07      	ldr	r3, [sp, #28]
 8020ea6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ea8:	3b01      	subs	r3, #1
 8020eaa:	9307      	str	r3, [sp, #28]
 8020eac:	bf08      	it	eq
 8020eae:	4615      	moveq	r5, r2
 8020eb0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8020eb2:	bf18      	it	ne
 8020eb4:	461d      	movne	r5, r3
 8020eb6:	e6f3      	b.n	8020ca0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8020eb8:	f111 0b01 	adds.w	fp, r1, #1
 8020ebc:	d48d      	bmi.n	8020dda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ebe:	45de      	cmp	lr, fp
 8020ec0:	db8b      	blt.n	8020dda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ec2:	f110 0b01 	adds.w	fp, r0, #1
 8020ec6:	d488      	bmi.n	8020dda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ec8:	455b      	cmp	r3, fp
 8020eca:	db86      	blt.n	8020dda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ecc:	b21b      	sxth	r3, r3
 8020ece:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8020ed2:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8020ed6:	9300      	str	r3, [sp, #0]
 8020ed8:	4642      	mov	r2, r8
 8020eda:	fa0f f38e 	sxth.w	r3, lr
 8020ede:	4649      	mov	r1, r9
 8020ee0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8020ee2:	f7ff fe4c 	bl	8020b7e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 8020ee6:	e778      	b.n	8020dda <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8020ee8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020eea:	1420      	asrs	r0, r4, #16
 8020eec:	1431      	asrs	r1, r6, #16
 8020eee:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 8020ef2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8020ef6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020efa:	fb03 0101 	mla	r1, r3, r1, r0
 8020efe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8020f02:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8020f06:	8841      	ldrh	r1, [r0, #2]
 8020f08:	f1be 0f00 	cmp.w	lr, #0
 8020f0c:	d00b      	beq.n	8020f26 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020f0e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020f12:	3b01      	subs	r3, #1
 8020f14:	005b      	lsls	r3, r3, #1
 8020f16:	3302      	adds	r3, #2
 8020f18:	eb00 0b03 	add.w	fp, r0, r3
 8020f1c:	5ac3      	ldrh	r3, [r0, r3]
 8020f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8020f20:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020f24:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f26:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8020f2a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8020f2e:	fb12 f30e 	smulbb	r3, r2, lr
 8020f32:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8020f36:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8020f3a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8020f3e:	10db      	asrs	r3, r3, #3
 8020f40:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020f44:	ea40 000c 	orr.w	r0, r0, ip
 8020f48:	f1ce 0c10 	rsb	ip, lr, #16
 8020f4c:	ea4b 0101 	orr.w	r1, fp, r1
 8020f50:	f109 39ff 	add.w	r9, r9, #4294967295
 8020f54:	ebac 0c02 	sub.w	ip, ip, r2
 8020f58:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8020f5c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 8020f60:	4351      	muls	r1, r2
 8020f62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020f64:	fb0c 1c00 	mla	ip, ip, r0, r1
 8020f68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8020f6a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8020f6e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 8020f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020f74:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8020f78:	0412      	lsls	r2, r2, #16
 8020f7a:	ea4b 0000 	orr.w	r0, fp, r0
 8020f7e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 8020f82:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8020f86:	fb03 c000 	mla	r0, r3, r0, ip
 8020f8a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8020f8e:	ea42 0b0b 	orr.w	fp, r2, fp
 8020f92:	fb03 000b 	mla	r0, r3, fp, r0
 8020f96:	0d43      	lsrs	r3, r0, #21
 8020f98:	0940      	lsrs	r0, r0, #5
 8020f9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020f9e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8020fa2:	4318      	orrs	r0, r3
 8020fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8020fa6:	441c      	add	r4, r3
 8020fa8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8020faa:	f82a 0b02 	strh.w	r0, [sl], #2
 8020fae:	441e      	add	r6, r3
 8020fb0:	e73b      	b.n	8020e2a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8020fb2:	b00f      	add	sp, #60	; 0x3c
 8020fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020fb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 8020fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020fbc:	b085      	sub	sp, #20
 8020fbe:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020fc2:	9102      	str	r1, [sp, #8]
 8020fc4:	2c00      	cmp	r4, #0
 8020fc6:	fb04 7103 	mla	r1, r4, r3, r7
 8020fca:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8020fce:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020fd2:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020fd6:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020fda:	f2c0 811b 	blt.w	8021214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020fde:	45a6      	cmp	lr, r4
 8020fe0:	f340 8118 	ble.w	8021214 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 8020fe4:	2f00      	cmp	r7, #0
 8020fe6:	f2c0 8113 	blt.w	8021210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020fea:	42bb      	cmp	r3, r7
 8020fec:	f340 8110 	ble.w	8021210 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 8020ff0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020ff4:	1c7a      	adds	r2, r7, #1
 8020ff6:	f100 8110 	bmi.w	802121a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8020ffa:	4293      	cmp	r3, r2
 8020ffc:	f340 810d 	ble.w	802121a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 8021000:	2e00      	cmp	r6, #0
 8021002:	f000 810c 	beq.w	802121e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 8021006:	f8dc 1004 	ldr.w	r1, [ip, #4]
 802100a:	3401      	adds	r4, #1
 802100c:	f100 810b 	bmi.w	8021226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8021010:	45a6      	cmp	lr, r4
 8021012:	f340 8108 	ble.w	8021226 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 8021016:	2800      	cmp	r0, #0
 8021018:	f000 8108 	beq.w	802122c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 802101c:	2f00      	cmp	r7, #0
 802101e:	f2c0 8100 	blt.w	8021222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8021022:	42bb      	cmp	r3, r7
 8021024:	f340 80fd 	ble.w	8021222 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 8021028:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802102c:	3701      	adds	r7, #1
 802102e:	f100 8100 	bmi.w	8021232 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8021032:	42bb      	cmp	r3, r7
 8021034:	f340 80fd 	ble.w	8021232 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 8021038:	2e00      	cmp	r6, #0
 802103a:	f000 80fc 	beq.w	8021236 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 802103e:	3301      	adds	r3, #1
 8021040:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8021044:	b2b6      	uxth	r6, r6
 8021046:	b280      	uxth	r0, r0
 8021048:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 802104c:	fb00 fe06 	mul.w	lr, r0, r6
 8021050:	0136      	lsls	r6, r6, #4
 8021052:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021056:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 802105a:	eba6 070e 	sub.w	r7, r6, lr
 802105e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021062:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021066:	b280      	uxth	r0, r0
 8021068:	b2bf      	uxth	r7, r7
 802106a:	1a1b      	subs	r3, r3, r0
 802106c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021070:	fb0a f607 	mul.w	r6, sl, r7
 8021074:	b29b      	uxth	r3, r3
 8021076:	fb0b 6603 	mla	r6, fp, r3, r6
 802107a:	fb00 6609 	mla	r6, r0, r9, r6
 802107e:	fb0e 6608 	mla	r6, lr, r8, r6
 8021082:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021086:	9600      	str	r6, [sp, #0]
 8021088:	2e00      	cmp	r6, #0
 802108a:	f000 80be 	beq.w	802120a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 802108e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021092:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021096:	9e02      	ldr	r6, [sp, #8]
 8021098:	fb0b fc0c 	mul.w	ip, fp, ip
 802109c:	fb0b f505 	mul.w	r5, fp, r5
 80210a0:	8836      	ldrh	r6, [r6, #0]
 80210a2:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80210a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80210aa:	9501      	str	r5, [sp, #4]
 80210ac:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80210b0:	44dc      	add	ip, fp
 80210b2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80210b6:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 80210ba:	9503      	str	r5, [sp, #12]
 80210bc:	9d01      	ldr	r5, [sp, #4]
 80210be:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80210c2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80210c6:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 80210ca:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80210ce:	fb0a fc0c 	mul.w	ip, sl, ip
 80210d2:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 80210d6:	fb0a fa01 	mul.w	sl, sl, r1
 80210da:	ea4f 251c 	mov.w	r5, ip, lsr #8
 80210de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80210e2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 80210e6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 80210ea:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 80210ee:	4465      	add	r5, ip
 80210f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80210f4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80210f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80210fc:	fb09 fc0c 	mul.w	ip, r9, ip
 8021100:	0a2d      	lsrs	r5, r5, #8
 8021102:	fb09 f904 	mul.w	r9, r9, r4
 8021106:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802110a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 802110e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021112:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021116:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802111a:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 802111e:	437d      	muls	r5, r7
 8021120:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021124:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021128:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802112c:	4461      	add	r1, ip
 802112e:	fb08 f404 	mul.w	r4, r8, r4
 8021132:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021136:	fb08 f802 	mul.w	r8, r8, r2
 802113a:	0a09      	lsrs	r1, r1, #8
 802113c:	0a22      	lsrs	r2, r4, #8
 802113e:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021142:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021146:	fb07 f70a 	mul.w	r7, r7, sl
 802114a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 802114e:	4414      	add	r4, r2
 8021150:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021154:	0a24      	lsrs	r4, r4, #8
 8021156:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802115a:	9a03      	ldr	r2, [sp, #12]
 802115c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021160:	fb02 5503 	mla	r5, r2, r3, r5
 8021164:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021168:	9a00      	ldr	r2, [sp, #0]
 802116a:	fb04 540e 	mla	r4, r4, lr, r5
 802116e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021172:	1235      	asrs	r5, r6, #8
 8021174:	fb01 4100 	mla	r1, r1, r0, r4
 8021178:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802117c:	0a09      	lsrs	r1, r1, #8
 802117e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021182:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021186:	fb03 7101 	mla	r1, r3, r1, r7
 802118a:	fb0e 1e08 	mla	lr, lr, r8, r1
 802118e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021192:	fb00 e101 	mla	r1, r0, r1, lr
 8021196:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 802119a:	b287      	uxth	r7, r0
 802119c:	0a09      	lsrs	r1, r1, #8
 802119e:	437a      	muls	r2, r7
 80211a0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80211a4:	1c53      	adds	r3, r2, #1
 80211a6:	4321      	orrs	r1, r4
 80211a8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80211ac:	0c0a      	lsrs	r2, r1, #16
 80211ae:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80211b2:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 80211b6:	b2c8      	uxtb	r0, r1
 80211b8:	fb12 f207 	smulbb	r2, r2, r7
 80211bc:	fb14 f407 	smulbb	r4, r4, r7
 80211c0:	b2db      	uxtb	r3, r3
 80211c2:	fb10 f007 	smulbb	r0, r0, r7
 80211c6:	fb05 2503 	mla	r5, r5, r3, r2
 80211ca:	10f2      	asrs	r2, r6, #3
 80211cc:	00f6      	lsls	r6, r6, #3
 80211ce:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80211d2:	b2ad      	uxth	r5, r5
 80211d4:	b2f6      	uxtb	r6, r6
 80211d6:	fb02 4203 	mla	r2, r2, r3, r4
 80211da:	fb06 0303 	mla	r3, r6, r3, r0
 80211de:	b294      	uxth	r4, r2
 80211e0:	b299      	uxth	r1, r3
 80211e2:	1c6b      	adds	r3, r5, #1
 80211e4:	1c62      	adds	r2, r4, #1
 80211e6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 80211ea:	1c4b      	adds	r3, r1, #1
 80211ec:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 80211f0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 80211f4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80211f8:	0952      	lsrs	r2, r2, #5
 80211fa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80211fe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021202:	432b      	orrs	r3, r5
 8021204:	4313      	orrs	r3, r2
 8021206:	9a02      	ldr	r2, [sp, #8]
 8021208:	8013      	strh	r3, [r2, #0]
 802120a:	b005      	add	sp, #20
 802120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021210:	2500      	movs	r5, #0
 8021212:	e6ef      	b.n	8020ff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 8021214:	2100      	movs	r1, #0
 8021216:	460d      	mov	r5, r1
 8021218:	e6f7      	b.n	802100a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802121a:	2100      	movs	r1, #0
 802121c:	e6f5      	b.n	802100a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 802121e:	4631      	mov	r1, r6
 8021220:	e6f3      	b.n	802100a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 8021222:	2400      	movs	r4, #0
 8021224:	e702      	b.n	802102c <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 8021226:	2200      	movs	r2, #0
 8021228:	4614      	mov	r4, r2
 802122a:	e70b      	b.n	8021044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 802122c:	4602      	mov	r2, r0
 802122e:	4604      	mov	r4, r0
 8021230:	e708      	b.n	8021044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021232:	2200      	movs	r2, #0
 8021234:	e706      	b.n	8021044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 8021236:	4632      	mov	r2, r6
 8021238:	e704      	b.n	8021044 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0802123a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802123a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802123e:	b09d      	sub	sp, #116	; 0x74
 8021240:	9219      	str	r2, [sp, #100]	; 0x64
 8021242:	9307      	str	r3, [sp, #28]
 8021244:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8021246:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 802124a:	901b      	str	r0, [sp, #108]	; 0x6c
 802124c:	931a      	str	r3, [sp, #104]	; 0x68
 802124e:	6850      	ldr	r0, [r2, #4]
 8021250:	9117      	str	r1, [sp, #92]	; 0x5c
 8021252:	6812      	ldr	r2, [r2, #0]
 8021254:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 8021258:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 802125c:	fb00 1303 	mla	r3, r0, r3, r1
 8021260:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021264:	930a      	str	r3, [sp, #40]	; 0x28
 8021266:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021268:	681b      	ldr	r3, [r3, #0]
 802126a:	9310      	str	r3, [sp, #64]	; 0x40
 802126c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 8021270:	930b      	str	r3, [sp, #44]	; 0x2c
 8021272:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021274:	2b00      	cmp	r3, #0
 8021276:	dc03      	bgt.n	8021280 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8021278:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802127a:	2b00      	cmp	r3, #0
 802127c:	f340 8375 	ble.w	802196a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8021280:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8021282:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021286:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802128a:	1e48      	subs	r0, r1, #1
 802128c:	1e57      	subs	r7, r2, #1
 802128e:	9b07      	ldr	r3, [sp, #28]
 8021290:	2b00      	cmp	r3, #0
 8021292:	f340 818e 	ble.w	80215b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 8021296:	ea5f 4c24 	movs.w	ip, r4, asr #16
 802129a:	ea4f 4326 	mov.w	r3, r6, asr #16
 802129e:	d406      	bmi.n	80212ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80212a0:	4584      	cmp	ip, r0
 80212a2:	da04      	bge.n	80212ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80212a4:	2b00      	cmp	r3, #0
 80212a6:	db02      	blt.n	80212ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80212a8:	42bb      	cmp	r3, r7
 80212aa:	f2c0 8183 	blt.w	80215b4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 80212ae:	f11c 0c01 	adds.w	ip, ip, #1
 80212b2:	f100 8173 	bmi.w	802159c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80212b6:	4561      	cmp	r1, ip
 80212b8:	f2c0 8170 	blt.w	802159c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80212bc:	3301      	adds	r3, #1
 80212be:	f100 816d 	bmi.w	802159c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80212c2:	429a      	cmp	r2, r3
 80212c4:	f2c0 816a 	blt.w	802159c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 80212c8:	9b07      	ldr	r3, [sp, #28]
 80212ca:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80212cc:	9318      	str	r3, [sp, #96]	; 0x60
 80212ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	f340 818c 	ble.w	80215ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 80212d6:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80212d8:	ea4f 4c26 	mov.w	ip, r6, asr #16
 80212dc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80212de:	f3c4 3003 	ubfx	r0, r4, #12, #4
 80212e2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80212e6:	1422      	asrs	r2, r4, #16
 80212e8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80212ec:	689b      	ldr	r3, [r3, #8]
 80212ee:	f100 81cd 	bmi.w	802168c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80212f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80212f6:	4542      	cmp	r2, r8
 80212f8:	f280 81c8 	bge.w	802168c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 80212fc:	f1bc 0f00 	cmp.w	ip, #0
 8021300:	f2c0 81c4 	blt.w	802168c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 8021304:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021308:	45c4      	cmp	ip, r8
 802130a:	f280 81bf 	bge.w	802168c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 802130e:	b21b      	sxth	r3, r3
 8021310:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021312:	fb0c 2203 	mla	r2, ip, r3, r2
 8021316:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 802131a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 802131e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021322:	2800      	cmp	r0, #0
 8021324:	f000 81a9 	beq.w	802167a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8021328:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802132c:	950c      	str	r5, [sp, #48]	; 0x30
 802132e:	0e2d      	lsrs	r5, r5, #24
 8021330:	9513      	str	r5, [sp, #76]	; 0x4c
 8021332:	b181      	cbz	r1, 8021356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021334:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021338:	3b01      	subs	r3, #1
 802133a:	009b      	lsls	r3, r3, #2
 802133c:	3304      	adds	r3, #4
 802133e:	eb08 0c03 	add.w	ip, r8, r3
 8021342:	f858 3003 	ldr.w	r3, [r8, r3]
 8021346:	9308      	str	r3, [sp, #32]
 8021348:	0e1b      	lsrs	r3, r3, #24
 802134a:	9311      	str	r3, [sp, #68]	; 0x44
 802134c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021350:	930d      	str	r3, [sp, #52]	; 0x34
 8021352:	0e1b      	lsrs	r3, r3, #24
 8021354:	9314      	str	r3, [sp, #80]	; 0x50
 8021356:	b280      	uxth	r0, r0
 8021358:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802135a:	b289      	uxth	r1, r1
 802135c:	fb00 f901 	mul.w	r9, r0, r1
 8021360:	0100      	lsls	r0, r0, #4
 8021362:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8021366:	eba0 0809 	sub.w	r8, r0, r9
 802136a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 802136e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8021370:	b289      	uxth	r1, r1
 8021372:	fa1f f888 	uxth.w	r8, r8
 8021376:	1a5b      	subs	r3, r3, r1
 8021378:	fb08 f000 	mul.w	r0, r8, r0
 802137c:	b29b      	uxth	r3, r3
 802137e:	fb03 000e 	mla	r0, r3, lr, r0
 8021382:	fb01 0005 	mla	r0, r1, r5, r0
 8021386:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021388:	fb09 0005 	mla	r0, r9, r5, r0
 802138c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021390:	2800      	cmp	r0, #0
 8021392:	f000 80fa 	beq.w	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021396:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 802139a:	d01b      	beq.n	80213d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802139c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80213a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80213a4:	fb0e fa0a 	mul.w	sl, lr, sl
 80213a8:	fb0e fe02 	mul.w	lr, lr, r2
 80213ac:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80213b0:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80213b4:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80213b8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80213bc:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80213c0:	4452      	add	r2, sl
 80213c2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213c6:	0a12      	lsrs	r2, r2, #8
 80213c8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80213cc:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80213d0:	ea42 020c 	orr.w	r2, r2, ip
 80213d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80213d6:	2dff      	cmp	r5, #255	; 0xff
 80213d8:	d021      	beq.n	802141e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 80213da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80213dc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80213e0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80213e2:	fb05 fb0b 	mul.w	fp, r5, fp
 80213e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80213e8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80213ec:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80213ee:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80213f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80213f6:	fb05 fa0a 	mul.w	sl, r5, sl
 80213fa:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80213fe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021402:	44de      	add	lr, fp
 8021404:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021408:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802140c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021410:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021414:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021418:	ea4e 050a 	orr.w	r5, lr, sl
 802141c:	950c      	str	r5, [sp, #48]	; 0x30
 802141e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021420:	2dff      	cmp	r5, #255	; 0xff
 8021422:	d021      	beq.n	8021468 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8021424:	9d08      	ldr	r5, [sp, #32]
 8021426:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802142a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802142c:	fb05 fb0b 	mul.w	fp, r5, fp
 8021430:	9d08      	ldr	r5, [sp, #32]
 8021432:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021436:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8021438:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802143c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021440:	fb05 fa0a 	mul.w	sl, r5, sl
 8021444:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021448:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802144c:	44de      	add	lr, fp
 802144e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021452:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021456:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802145a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802145e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021462:	ea4e 050a 	orr.w	r5, lr, sl
 8021466:	9508      	str	r5, [sp, #32]
 8021468:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802146a:	2dff      	cmp	r5, #255	; 0xff
 802146c:	d021      	beq.n	80214b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 802146e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8021470:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021474:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021476:	fb05 fb0b 	mul.w	fp, r5, fp
 802147a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802147c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021480:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8021482:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021486:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802148a:	fb05 fa0a 	mul.w	sl, r5, sl
 802148e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021492:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021496:	44de      	add	lr, fp
 8021498:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802149c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80214a0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80214a4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80214a8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80214ac:	ea4e 050a 	orr.w	r5, lr, sl
 80214b0:	950d      	str	r5, [sp, #52]	; 0x34
 80214b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80214b4:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80214b8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80214bc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80214c0:	9d08      	ldr	r5, [sp, #32]
 80214c2:	fb08 fc0c 	mul.w	ip, r8, ip
 80214c6:	fb03 cc0e 	mla	ip, r3, lr, ip
 80214ca:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80214ce:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80214d0:	fb01 cc0e 	mla	ip, r1, lr, ip
 80214d4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80214d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80214da:	fb09 cc0e 	mla	ip, r9, lr, ip
 80214de:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 80214e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80214e4:	fb08 f80e 	mul.w	r8, r8, lr
 80214e8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80214ec:	fb03 8202 	mla	r2, r3, r2, r8
 80214f0:	9b08      	ldr	r3, [sp, #32]
 80214f2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80214f6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80214fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80214fc:	fb01 220a 	mla	r2, r1, sl, r2
 8021500:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 8021504:	883b      	ldrh	r3, [r7, #0]
 8021506:	fb09 2901 	mla	r9, r9, r1, r2
 802150a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802150c:	1219      	asrs	r1, r3, #8
 802150e:	4342      	muls	r2, r0
 8021510:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021514:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021518:	1c50      	adds	r0, r2, #1
 802151a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802151e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021522:	ea4c 0c09 	orr.w	ip, ip, r9
 8021526:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 802152a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 802152e:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8021532:	fa5f fc8c 	uxtb.w	ip, ip
 8021536:	fb12 f205 	smulbb	r2, r2, r5
 802153a:	b2c0      	uxtb	r0, r0
 802153c:	fb1c fc05 	smulbb	ip, ip, r5
 8021540:	fb01 2100 	mla	r1, r1, r0, r2
 8021544:	10da      	asrs	r2, r3, #3
 8021546:	fb1e fe05 	smulbb	lr, lr, r5
 802154a:	00db      	lsls	r3, r3, #3
 802154c:	b289      	uxth	r1, r1
 802154e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021552:	b2db      	uxtb	r3, r3
 8021554:	fb02 e200 	mla	r2, r2, r0, lr
 8021558:	fb03 c300 	mla	r3, r3, r0, ip
 802155c:	b292      	uxth	r2, r2
 802155e:	fa1f fc83 	uxth.w	ip, r3
 8021562:	1c4b      	adds	r3, r1, #1
 8021564:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8021568:	f10c 0301 	add.w	r3, ip, #1
 802156c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 8021570:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8021574:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8021578:	430b      	orrs	r3, r1
 802157a:	1c51      	adds	r1, r2, #1
 802157c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8021580:	0952      	lsrs	r2, r2, #5
 8021582:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021586:	4313      	orrs	r3, r2
 8021588:	803b      	strh	r3, [r7, #0]
 802158a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802158c:	3702      	adds	r7, #2
 802158e:	441c      	add	r4, r3
 8021590:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021592:	441e      	add	r6, r3
 8021594:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021596:	3b01      	subs	r3, #1
 8021598:	9318      	str	r3, [sp, #96]	; 0x60
 802159a:	e698      	b.n	80212ce <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 802159c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 802159e:	441c      	add	r4, r3
 80215a0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80215a2:	441e      	add	r6, r3
 80215a4:	9b07      	ldr	r3, [sp, #28]
 80215a6:	3b01      	subs	r3, #1
 80215a8:	9307      	str	r3, [sp, #28]
 80215aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215ac:	3302      	adds	r3, #2
 80215ae:	930a      	str	r3, [sp, #40]	; 0x28
 80215b0:	e66d      	b.n	802128e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80215b2:	d023      	beq.n	80215fc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 80215b4:	9b07      	ldr	r3, [sp, #28]
 80215b6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80215b8:	3b01      	subs	r3, #1
 80215ba:	fb00 4003 	mla	r0, r0, r3, r4
 80215be:	1400      	asrs	r0, r0, #16
 80215c0:	f53f ae82 	bmi.w	80212c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80215c4:	3901      	subs	r1, #1
 80215c6:	4288      	cmp	r0, r1
 80215c8:	f6bf ae7e 	bge.w	80212c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80215cc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80215ce:	fb01 6303 	mla	r3, r1, r3, r6
 80215d2:	141b      	asrs	r3, r3, #16
 80215d4:	f53f ae78 	bmi.w	80212c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80215d8:	3a01      	subs	r2, #1
 80215da:	4293      	cmp	r3, r2
 80215dc:	f6bf ae74 	bge.w	80212c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80215e0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80215e4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80215e8:	f1bb 0f00 	cmp.w	fp, #0
 80215ec:	dc6c      	bgt.n	80216c8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80215ee:	9b07      	ldr	r3, [sp, #28]
 80215f0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80215f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80215f6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80215fa:	930a      	str	r3, [sp, #40]	; 0x28
 80215fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80215fe:	2b00      	cmp	r3, #0
 8021600:	f340 81b3 	ble.w	802196a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 8021604:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021608:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802160a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802160e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021612:	eef0 6a62 	vmov.f32	s13, s5
 8021616:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802161a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802161e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021622:	ee16 4a90 	vmov	r4, s13
 8021626:	eef0 6a43 	vmov.f32	s13, s6
 802162a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802162e:	ee16 6a90 	vmov	r6, s13
 8021632:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021636:	ee61 7a27 	vmul.f32	s15, s2, s15
 802163a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802163e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021642:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021646:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802164a:	ee12 2a90 	vmov	r2, s5
 802164e:	eef0 2a47 	vmov.f32	s5, s14
 8021652:	fb92 f3f3 	sdiv	r3, r2, r3
 8021656:	ee13 2a10 	vmov	r2, s6
 802165a:	9329      	str	r3, [sp, #164]	; 0xa4
 802165c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802165e:	eeb0 3a67 	vmov.f32	s6, s15
 8021662:	fb92 f3f3 	sdiv	r3, r2, r3
 8021666:	932a      	str	r3, [sp, #168]	; 0xa8
 8021668:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802166a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 802166c:	3b01      	subs	r3, #1
 802166e:	9317      	str	r3, [sp, #92]	; 0x5c
 8021670:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8021672:	bf08      	it	eq
 8021674:	4613      	moveq	r3, r2
 8021676:	9307      	str	r3, [sp, #28]
 8021678:	e5fb      	b.n	8021272 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 802167a:	2900      	cmp	r1, #0
 802167c:	f43f ae6b 	beq.w	8021356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8021680:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021684:	9308      	str	r3, [sp, #32]
 8021686:	0e1b      	lsrs	r3, r3, #24
 8021688:	9311      	str	r3, [sp, #68]	; 0x44
 802168a:	e664      	b.n	8021356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 802168c:	f112 0801 	adds.w	r8, r2, #1
 8021690:	f53f af7b 	bmi.w	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 8021694:	4543      	cmp	r3, r8
 8021696:	f6ff af78 	blt.w	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 802169a:	f11c 0801 	adds.w	r8, ip, #1
 802169e:	f53f af74 	bmi.w	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80216a2:	45c6      	cmp	lr, r8
 80216a4:	f6ff af71 	blt.w	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80216a8:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80216aa:	b21b      	sxth	r3, r3
 80216ac:	9201      	str	r2, [sp, #4]
 80216ae:	fa0f f28e 	sxth.w	r2, lr
 80216b2:	e9cd 1504 	strd	r1, r5, [sp, #16]
 80216b6:	e9cd c002 	strd	ip, r0, [sp, #8]
 80216ba:	9200      	str	r2, [sp, #0]
 80216bc:	4639      	mov	r1, r7
 80216be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80216c0:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80216c2:	f7ff fc79 	bl	8020fb8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 80216c6:	e760      	b.n	802158a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 80216c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80216ca:	1427      	asrs	r7, r4, #16
 80216cc:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80216ce:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80216d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80216d6:	1433      	asrs	r3, r6, #16
 80216d8:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80216dc:	fb01 7303 	mla	r3, r1, r3, r7
 80216e0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 80216e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80216e8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 80216ec:	2a00      	cmp	r2, #0
 80216ee:	f000 8133 	beq.w	8021958 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 80216f2:	687d      	ldr	r5, [r7, #4]
 80216f4:	950e      	str	r5, [sp, #56]	; 0x38
 80216f6:	0e2d      	lsrs	r5, r5, #24
 80216f8:	9515      	str	r5, [sp, #84]	; 0x54
 80216fa:	b178      	cbz	r0, 802171c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80216fc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8021700:	3901      	subs	r1, #1
 8021702:	0089      	lsls	r1, r1, #2
 8021704:	3104      	adds	r1, #4
 8021706:	eb07 0e01 	add.w	lr, r7, r1
 802170a:	5879      	ldr	r1, [r7, r1]
 802170c:	9109      	str	r1, [sp, #36]	; 0x24
 802170e:	0e09      	lsrs	r1, r1, #24
 8021710:	9112      	str	r1, [sp, #72]	; 0x48
 8021712:	f8de 1004 	ldr.w	r1, [lr, #4]
 8021716:	910f      	str	r1, [sp, #60]	; 0x3c
 8021718:	0e09      	lsrs	r1, r1, #24
 802171a:	9116      	str	r1, [sp, #88]	; 0x58
 802171c:	b292      	uxth	r2, r2
 802171e:	9915      	ldr	r1, [sp, #84]	; 0x54
 8021720:	b280      	uxth	r0, r0
 8021722:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021724:	fb02 f800 	mul.w	r8, r2, r0
 8021728:	0112      	lsls	r2, r2, #4
 802172a:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 802172e:	eba2 0e08 	sub.w	lr, r2, r8
 8021732:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8021736:	b280      	uxth	r0, r0
 8021738:	fa1f fe8e 	uxth.w	lr, lr
 802173c:	1a12      	subs	r2, r2, r0
 802173e:	fb0e f101 	mul.w	r1, lr, r1
 8021742:	b292      	uxth	r2, r2
 8021744:	fb02 110c 	mla	r1, r2, ip, r1
 8021748:	fb00 1105 	mla	r1, r0, r5, r1
 802174c:	9d16      	ldr	r5, [sp, #88]	; 0x58
 802174e:	fb08 1105 	mla	r1, r8, r5, r1
 8021752:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021756:	2900      	cmp	r1, #0
 8021758:	f000 80f5 	beq.w	8021946 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 802175c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8021760:	d019      	beq.n	8021796 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 8021762:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8021766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802176a:	fb0c fa0a 	mul.w	sl, ip, sl
 802176e:	fb0c fc03 	mul.w	ip, ip, r3
 8021772:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8021776:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802177a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802177e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021782:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8021786:	4453      	add	r3, sl
 8021788:	0a3f      	lsrs	r7, r7, #8
 802178a:	0a1b      	lsrs	r3, r3, #8
 802178c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8021790:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8021794:	433b      	orrs	r3, r7
 8021796:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8021798:	2dff      	cmp	r5, #255	; 0xff
 802179a:	d020      	beq.n	80217de <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 802179c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802179e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80217a2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80217a4:	436f      	muls	r7, r5
 80217a6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80217a8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217ac:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80217b0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80217b2:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217b6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217ba:	fb05 fa0a 	mul.w	sl, r5, sl
 80217be:	44bc      	add	ip, r7
 80217c0:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80217c4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80217c8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80217cc:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80217d0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80217d4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80217d8:	ea4c 050a 	orr.w	r5, ip, sl
 80217dc:	950e      	str	r5, [sp, #56]	; 0x38
 80217de:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80217e0:	2dff      	cmp	r5, #255	; 0xff
 80217e2:	d020      	beq.n	8021826 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 80217e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217e6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80217ea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80217ec:	436f      	muls	r7, r5
 80217ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80217f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80217f4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80217f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80217fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80217fe:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021802:	fb05 fa0a 	mul.w	sl, r5, sl
 8021806:	44bc      	add	ip, r7
 8021808:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 802180c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021810:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021814:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021818:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802181c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021820:	ea4c 050a 	orr.w	r5, ip, sl
 8021824:	9509      	str	r5, [sp, #36]	; 0x24
 8021826:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021828:	2dff      	cmp	r5, #255	; 0xff
 802182a:	d020      	beq.n	802186e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 802182c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802182e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8021832:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021834:	436f      	muls	r7, r5
 8021836:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021838:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802183c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021840:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8021842:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8021846:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802184a:	fb05 fa0a 	mul.w	sl, r5, sl
 802184e:	44bc      	add	ip, r7
 8021850:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8021854:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021858:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802185c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021860:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021864:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021868:	ea4c 050a 	orr.w	r5, ip, sl
 802186c:	950f      	str	r5, [sp, #60]	; 0x3c
 802186e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021870:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8021874:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021878:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802187c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802187e:	fb0e f707 	mul.w	r7, lr, r7
 8021882:	fb02 770c 	mla	r7, r2, ip, r7
 8021886:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802188a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802188c:	fb00 770c 	mla	r7, r0, ip, r7
 8021890:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021894:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021896:	fb08 770c 	mla	r7, r8, ip, r7
 802189a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802189e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80218a0:	fb0e fe0c 	mul.w	lr, lr, ip
 80218a4:	0a3f      	lsrs	r7, r7, #8
 80218a6:	fb02 e303 	mla	r3, r2, r3, lr
 80218aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218ac:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80218b0:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80218b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80218b6:	fb00 330a 	mla	r3, r0, sl, r3
 80218ba:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 80218be:	f8b9 0000 	ldrh.w	r0, [r9]
 80218c2:	fb08 3c0c 	mla	ip, r8, ip, r3
 80218c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80218c8:	1202      	asrs	r2, r0, #8
 80218ca:	4359      	muls	r1, r3
 80218cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80218d0:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80218d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80218d8:	1c4b      	adds	r3, r1, #1
 80218da:	ea47 070c 	orr.w	r7, r7, ip
 80218de:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80218e2:	0c3b      	lsrs	r3, r7, #16
 80218e4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 80218e8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 80218ec:	b2ff      	uxtb	r7, r7
 80218ee:	fb13 f305 	smulbb	r3, r3, r5
 80218f2:	b2c9      	uxtb	r1, r1
 80218f4:	fb17 f705 	smulbb	r7, r7, r5
 80218f8:	fb02 3201 	mla	r2, r2, r1, r3
 80218fc:	10c3      	asrs	r3, r0, #3
 80218fe:	fb1c fc05 	smulbb	ip, ip, r5
 8021902:	00c0      	lsls	r0, r0, #3
 8021904:	b292      	uxth	r2, r2
 8021906:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802190a:	b2c0      	uxtb	r0, r0
 802190c:	fb03 c301 	mla	r3, r3, r1, ip
 8021910:	fb00 7001 	mla	r0, r0, r1, r7
 8021914:	1c51      	adds	r1, r2, #1
 8021916:	b29b      	uxth	r3, r3
 8021918:	b280      	uxth	r0, r0
 802191a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 802191e:	f100 0c01 	add.w	ip, r0, #1
 8021922:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 8021926:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 802192a:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 802192e:	ea4c 0202 	orr.w	r2, ip, r2
 8021932:	f103 0c01 	add.w	ip, r3, #1
 8021936:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 802193a:	095b      	lsrs	r3, r3, #5
 802193c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021940:	431a      	orrs	r2, r3
 8021942:	f8a9 2000 	strh.w	r2, [r9]
 8021946:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8021948:	f109 0902 	add.w	r9, r9, #2
 802194c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021950:	441c      	add	r4, r3
 8021952:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021954:	441e      	add	r6, r3
 8021956:	e647      	b.n	80215e8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 8021958:	2800      	cmp	r0, #0
 802195a:	f43f aedf 	beq.w	802171c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802195e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8021962:	9109      	str	r1, [sp, #36]	; 0x24
 8021964:	0e09      	lsrs	r1, r1, #24
 8021966:	9112      	str	r1, [sp, #72]	; 0x48
 8021968:	e6d8      	b.n	802171c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 802196a:	b01d      	add	sp, #116	; 0x74
 802196c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021970 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8021970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021974:	b085      	sub	sp, #20
 8021976:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 802197a:	9102      	str	r1, [sp, #8]
 802197c:	2c00      	cmp	r4, #0
 802197e:	fb04 7103 	mla	r1, r4, r3, r7
 8021982:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 8021986:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 802198a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 802198e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8021992:	f2c0 810c 	blt.w	8021bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8021996:	45a6      	cmp	lr, r4
 8021998:	f340 8109 	ble.w	8021bae <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802199c:	2f00      	cmp	r7, #0
 802199e:	f2c0 8104 	blt.w	8021baa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80219a2:	42bb      	cmp	r3, r7
 80219a4:	f340 8101 	ble.w	8021baa <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 80219a8:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 80219ac:	1c7a      	adds	r2, r7, #1
 80219ae:	f100 8101 	bmi.w	8021bb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80219b2:	4293      	cmp	r3, r2
 80219b4:	f340 80fe 	ble.w	8021bb4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 80219b8:	2e00      	cmp	r6, #0
 80219ba:	f000 80fd 	beq.w	8021bb8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 80219be:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80219c2:	3401      	adds	r4, #1
 80219c4:	f100 80fc 	bmi.w	8021bc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80219c8:	45a6      	cmp	lr, r4
 80219ca:	f340 80f9 	ble.w	8021bc0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 80219ce:	2800      	cmp	r0, #0
 80219d0:	f000 80f9 	beq.w	8021bc6 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 80219d4:	2f00      	cmp	r7, #0
 80219d6:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 80219da:	f2c0 80ef 	blt.w	8021bbc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80219de:	42bb      	cmp	r3, r7
 80219e0:	f340 80ec 	ble.w	8021bbc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 80219e4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 80219e8:	3701      	adds	r7, #1
 80219ea:	f100 80ef 	bmi.w	8021bcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80219ee:	42bb      	cmp	r3, r7
 80219f0:	f340 80ec 	ble.w	8021bcc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 80219f4:	2e00      	cmp	r6, #0
 80219f6:	f000 80eb 	beq.w	8021bd0 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 80219fa:	6852      	ldr	r2, [r2, #4]
 80219fc:	b2b6      	uxth	r6, r6
 80219fe:	b280      	uxth	r0, r0
 8021a00:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 8021a04:	fb00 fe06 	mul.w	lr, r0, r6
 8021a08:	0136      	lsls	r6, r6, #4
 8021a0a:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8021a0e:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 8021a12:	eba6 070e 	sub.w	r7, r6, lr
 8021a16:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8021a1a:	ea4f 6914 	mov.w	r9, r4, lsr #24
 8021a1e:	b280      	uxth	r0, r0
 8021a20:	b2bf      	uxth	r7, r7
 8021a22:	1a1b      	subs	r3, r3, r0
 8021a24:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8021a28:	fb07 f60a 	mul.w	r6, r7, sl
 8021a2c:	b29b      	uxth	r3, r3
 8021a2e:	fb0b 6603 	mla	r6, fp, r3, r6
 8021a32:	fb00 6609 	mla	r6, r0, r9, r6
 8021a36:	fb0e 6608 	mla	r6, lr, r8, r6
 8021a3a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021a3e:	9600      	str	r6, [sp, #0]
 8021a40:	2e00      	cmp	r6, #0
 8021a42:	f000 80af 	beq.w	8021ba4 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 8021a46:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021a4a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8021a4e:	9e02      	ldr	r6, [sp, #8]
 8021a50:	fb0b fc0c 	mul.w	ip, fp, ip
 8021a54:	fb0b f505 	mul.w	r5, fp, r5
 8021a58:	8836      	ldrh	r6, [r6, #0]
 8021a5a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8021a5e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021a62:	9501      	str	r5, [sp, #4]
 8021a64:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8021a68:	44dc      	add	ip, fp
 8021a6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021a6e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8021a72:	9503      	str	r5, [sp, #12]
 8021a74:	9d01      	ldr	r5, [sp, #4]
 8021a76:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8021a7a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8021a7e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8021a82:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021a86:	fb0a fc0c 	mul.w	ip, sl, ip
 8021a8a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8021a8e:	fb0a fa01 	mul.w	sl, sl, r1
 8021a92:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8021a96:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021a9a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 8021a9e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021aa2:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8021aa6:	4465      	add	r5, ip
 8021aa8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8021aac:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8021ab0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021ab4:	fb09 fc0c 	mul.w	ip, r9, ip
 8021ab8:	0a2d      	lsrs	r5, r5, #8
 8021aba:	fb09 f904 	mul.w	r9, r9, r4
 8021abe:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021ac2:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8021ac6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8021aca:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8021ace:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8021ad2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021ad6:	437d      	muls	r5, r7
 8021ad8:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8021adc:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8021ae0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021ae4:	4461      	add	r1, ip
 8021ae6:	fb08 f404 	mul.w	r4, r8, r4
 8021aea:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021aee:	fb08 f802 	mul.w	r8, r8, r2
 8021af2:	0a09      	lsrs	r1, r1, #8
 8021af4:	0a22      	lsrs	r2, r4, #8
 8021af6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8021afa:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8021afe:	fb07 f70a 	mul.w	r7, r7, sl
 8021b02:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021b06:	4414      	add	r4, r2
 8021b08:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8021b0c:	0a24      	lsrs	r4, r4, #8
 8021b0e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8021b12:	9a03      	ldr	r2, [sp, #12]
 8021b14:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8021b18:	fb02 5503 	mla	r5, r2, r3, r5
 8021b1c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8021b20:	fb04 540e 	mla	r4, r4, lr, r5
 8021b24:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8021b28:	fb01 4100 	mla	r1, r1, r0, r4
 8021b2c:	0a09      	lsrs	r1, r1, #8
 8021b2e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 8021b32:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 8021b36:	fb03 7101 	mla	r1, r3, r1, r7
 8021b3a:	9b00      	ldr	r3, [sp, #0]
 8021b3c:	fb0e 1e08 	mla	lr, lr, r8, r1
 8021b40:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 8021b44:	43da      	mvns	r2, r3
 8021b46:	1233      	asrs	r3, r6, #8
 8021b48:	fb00 e101 	mla	r1, r0, r1, lr
 8021b4c:	10f0      	asrs	r0, r6, #3
 8021b4e:	b2d2      	uxtb	r2, r2
 8021b50:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8021b54:	0a09      	lsrs	r1, r1, #8
 8021b56:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021b5a:	00f6      	lsls	r6, r6, #3
 8021b5c:	4353      	muls	r3, r2
 8021b5e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8021b62:	4350      	muls	r0, r2
 8021b64:	b2f6      	uxtb	r6, r6
 8021b66:	4321      	orrs	r1, r4
 8021b68:	4356      	muls	r6, r2
 8021b6a:	1c5a      	adds	r2, r3, #1
 8021b6c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8021b70:	0c0b      	lsrs	r3, r1, #16
 8021b72:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8021b76:	1c42      	adds	r2, r0, #1
 8021b78:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021b7c:	0a0a      	lsrs	r2, r1, #8
 8021b7e:	021b      	lsls	r3, r3, #8
 8021b80:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8021b84:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8021b88:	00d2      	lsls	r2, r2, #3
 8021b8a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021b8e:	4313      	orrs	r3, r2
 8021b90:	1c72      	adds	r2, r6, #1
 8021b92:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 8021b96:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8021b9a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021b9e:	4319      	orrs	r1, r3
 8021ba0:	9b02      	ldr	r3, [sp, #8]
 8021ba2:	8019      	strh	r1, [r3, #0]
 8021ba4:	b005      	add	sp, #20
 8021ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021baa:	2500      	movs	r5, #0
 8021bac:	e6fe      	b.n	80219ac <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8021bae:	2100      	movs	r1, #0
 8021bb0:	460d      	mov	r5, r1
 8021bb2:	e706      	b.n	80219c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021bb4:	2100      	movs	r1, #0
 8021bb6:	e704      	b.n	80219c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021bb8:	4631      	mov	r1, r6
 8021bba:	e702      	b.n	80219c2 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8021bbc:	2400      	movs	r4, #0
 8021bbe:	e713      	b.n	80219e8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8021bc0:	2200      	movs	r2, #0
 8021bc2:	4614      	mov	r4, r2
 8021bc4:	e71a      	b.n	80219fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021bc6:	4602      	mov	r2, r0
 8021bc8:	4604      	mov	r4, r0
 8021bca:	e717      	b.n	80219fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021bcc:	2200      	movs	r2, #0
 8021bce:	e715      	b.n	80219fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8021bd0:	4632      	mov	r2, r6
 8021bd2:	e713      	b.n	80219fc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

08021bd4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021bd8:	b09b      	sub	sp, #108	; 0x6c
 8021bda:	9218      	str	r2, [sp, #96]	; 0x60
 8021bdc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8021bde:	9019      	str	r0, [sp, #100]	; 0x64
 8021be0:	9116      	str	r1, [sp, #88]	; 0x58
 8021be2:	6850      	ldr	r0, [r2, #4]
 8021be4:	9307      	str	r3, [sp, #28]
 8021be6:	6812      	ldr	r2, [r2, #0]
 8021be8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8021bec:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8021bf0:	fb00 1303 	mla	r3, r0, r3, r1
 8021bf4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021bf8:	930a      	str	r3, [sp, #40]	; 0x28
 8021bfa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021bfc:	681b      	ldr	r3, [r3, #0]
 8021bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8021c00:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021c02:	2b00      	cmp	r3, #0
 8021c04:	dc03      	bgt.n	8021c0e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021c06:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8021c08:	2b00      	cmp	r3, #0
 8021c0a:	f340 8387 	ble.w	802231c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021c0e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c10:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c14:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c18:	1e48      	subs	r0, r1, #1
 8021c1a:	1e57      	subs	r7, r2, #1
 8021c1c:	9b07      	ldr	r3, [sp, #28]
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	f340 8166 	ble.w	8021ef0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 8021c24:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8021c28:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021c2c:	d406      	bmi.n	8021c3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021c2e:	4584      	cmp	ip, r0
 8021c30:	da04      	bge.n	8021c3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021c32:	2b00      	cmp	r3, #0
 8021c34:	db02      	blt.n	8021c3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8021c36:	42bb      	cmp	r3, r7
 8021c38:	f2c0 815b 	blt.w	8021ef2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8021c3c:	f11c 0c01 	adds.w	ip, ip, #1
 8021c40:	f100 814b 	bmi.w	8021eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021c44:	4561      	cmp	r1, ip
 8021c46:	f2c0 8148 	blt.w	8021eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021c4a:	3301      	adds	r3, #1
 8021c4c:	f100 8145 	bmi.w	8021eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021c50:	429a      	cmp	r2, r3
 8021c52:	f2c0 8142 	blt.w	8021eda <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 8021c56:	9b07      	ldr	r3, [sp, #28]
 8021c58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8021c5a:	9317      	str	r3, [sp, #92]	; 0x5c
 8021c5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	f340 8165 	ble.w	8021f2e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 8021c64:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8021c66:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021c6a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8021c6c:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021c70:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021c74:	1422      	asrs	r2, r4, #16
 8021c76:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8021c7a:	689b      	ldr	r3, [r3, #8]
 8021c7c:	f100 81d5 	bmi.w	802202a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021c80:	f103 38ff 	add.w	r8, r3, #4294967295
 8021c84:	4542      	cmp	r2, r8
 8021c86:	f280 81d0 	bge.w	802202a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021c8a:	f1bc 0f00 	cmp.w	ip, #0
 8021c8e:	f2c0 81cc 	blt.w	802202a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021c92:	f10e 38ff 	add.w	r8, lr, #4294967295
 8021c96:	45c4      	cmp	ip, r8
 8021c98:	f280 81c7 	bge.w	802202a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8021c9c:	b21b      	sxth	r3, r3
 8021c9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021ca0:	fb0c 2203 	mla	r2, ip, r3, r2
 8021ca4:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8021ca8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8021cac:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8021cb0:	2900      	cmp	r1, #0
 8021cb2:	f000 8182 	beq.w	8021fba <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8021cb6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021cba:	950b      	str	r5, [sp, #44]	; 0x2c
 8021cbc:	0e2d      	lsrs	r5, r5, #24
 8021cbe:	9512      	str	r5, [sp, #72]	; 0x48
 8021cc0:	b180      	cbz	r0, 8021ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021cc2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8021cc6:	3b01      	subs	r3, #1
 8021cc8:	009b      	lsls	r3, r3, #2
 8021cca:	3304      	adds	r3, #4
 8021ccc:	eb08 0c03 	add.w	ip, r8, r3
 8021cd0:	f858 3003 	ldr.w	r3, [r8, r3]
 8021cd4:	9308      	str	r3, [sp, #32]
 8021cd6:	0e1b      	lsrs	r3, r3, #24
 8021cd8:	9310      	str	r3, [sp, #64]	; 0x40
 8021cda:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8021cde:	930c      	str	r3, [sp, #48]	; 0x30
 8021ce0:	0e1b      	lsrs	r3, r3, #24
 8021ce2:	9313      	str	r3, [sp, #76]	; 0x4c
 8021ce4:	b289      	uxth	r1, r1
 8021ce6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8021ce8:	b280      	uxth	r0, r0
 8021cea:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021cec:	fb01 f900 	mul.w	r9, r1, r0
 8021cf0:	0109      	lsls	r1, r1, #4
 8021cf2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8021cf6:	eba1 0809 	sub.w	r8, r1, r9
 8021cfa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021cfe:	b280      	uxth	r0, r0
 8021d00:	fa1f f888 	uxth.w	r8, r8
 8021d04:	1a09      	subs	r1, r1, r0
 8021d06:	fb08 f303 	mul.w	r3, r8, r3
 8021d0a:	b289      	uxth	r1, r1
 8021d0c:	fb01 330e 	mla	r3, r1, lr, r3
 8021d10:	fb00 3305 	mla	r3, r0, r5, r3
 8021d14:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021d16:	fb09 3305 	mla	r3, r9, r5, r3
 8021d1a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021d1e:	2b00      	cmp	r3, #0
 8021d20:	f000 80d2 	beq.w	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8021d24:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8021d28:	d01b      	beq.n	8021d62 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8021d2a:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8021d2e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021d32:	fb0e fa0a 	mul.w	sl, lr, sl
 8021d36:	fb0e fe02 	mul.w	lr, lr, r2
 8021d3a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021d3e:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8021d42:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8021d46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d4a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8021d4e:	4452      	add	r2, sl
 8021d50:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021d54:	0a12      	lsrs	r2, r2, #8
 8021d56:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021d5a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8021d5e:	ea42 020c 	orr.w	r2, r2, ip
 8021d62:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021d64:	2dff      	cmp	r5, #255	; 0xff
 8021d66:	d021      	beq.n	8021dac <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8021d68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021d6a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021d6e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021d70:	fb05 fb0b 	mul.w	fp, r5, fp
 8021d74:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021d76:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021d7a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8021d7c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021d80:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021d84:	fb05 fa0a 	mul.w	sl, r5, sl
 8021d88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021d8c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021d90:	44de      	add	lr, fp
 8021d92:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021d96:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021d9a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021d9e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021da2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021da6:	ea4e 050a 	orr.w	r5, lr, sl
 8021daa:	950b      	str	r5, [sp, #44]	; 0x2c
 8021dac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021dae:	2dff      	cmp	r5, #255	; 0xff
 8021db0:	d021      	beq.n	8021df6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 8021db2:	9d08      	ldr	r5, [sp, #32]
 8021db4:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021db8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021dba:	fb05 fb0b 	mul.w	fp, r5, fp
 8021dbe:	9d08      	ldr	r5, [sp, #32]
 8021dc0:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021dc4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021dc6:	fb05 fa0e 	mul.w	sl, r5, lr
 8021dca:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021dce:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021dd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021dd6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021dda:	44de      	add	lr, fp
 8021ddc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021de0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021de4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021de8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021dec:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021df0:	ea4e 050a 	orr.w	r5, lr, sl
 8021df4:	9508      	str	r5, [sp, #32]
 8021df6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021df8:	2dff      	cmp	r5, #255	; 0xff
 8021dfa:	d021      	beq.n	8021e40 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8021dfc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021dfe:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8021e02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021e04:	fb05 fb0b 	mul.w	fp, r5, fp
 8021e08:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021e0a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8021e0e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8021e10:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021e14:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8021e18:	fb05 fa0a 	mul.w	sl, r5, sl
 8021e1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e20:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8021e24:	44de      	add	lr, fp
 8021e26:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021e2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8021e2e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021e32:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8021e36:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8021e3a:	ea4e 050a 	orr.w	r5, lr, sl
 8021e3e:	950c      	str	r5, [sp, #48]	; 0x30
 8021e40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021e42:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8021e46:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021e4a:	2bff      	cmp	r3, #255	; 0xff
 8021e4c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8021e50:	9d08      	ldr	r5, [sp, #32]
 8021e52:	fb08 fc0c 	mul.w	ip, r8, ip
 8021e56:	fb01 cc0e 	mla	ip, r1, lr, ip
 8021e5a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021e5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8021e60:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021e64:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8021e68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021e6a:	fb09 cc0e 	mla	ip, r9, lr, ip
 8021e6e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 8021e72:	fb08 f80e 	mul.w	r8, r8, lr
 8021e76:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021e7a:	fb01 8202 	mla	r2, r1, r2, r8
 8021e7e:	9908      	ldr	r1, [sp, #32]
 8021e80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8021e84:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8021e88:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021e8a:	fb00 220a 	mla	r2, r0, sl, r2
 8021e8e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 8021e92:	fb09 2900 	mla	r9, r9, r0, r2
 8021e96:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8021e9a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021e9e:	ea4c 0c09 	orr.w	ip, ip, r9
 8021ea2:	ea4f 221c 	mov.w	r2, ip, lsr #8
 8021ea6:	f040 8091 	bne.w	8021fcc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8021eaa:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8021eae:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 8021eb2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021eb6:	f022 0207 	bic.w	r2, r2, #7
 8021eba:	431a      	orrs	r2, r3
 8021ebc:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8021ec0:	ea4c 0c02 	orr.w	ip, ip, r2
 8021ec4:	f8a7 c000 	strh.w	ip, [r7]
 8021ec8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021eca:	3702      	adds	r7, #2
 8021ecc:	441c      	add	r4, r3
 8021ece:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ed0:	441e      	add	r6, r3
 8021ed2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8021ed4:	3b01      	subs	r3, #1
 8021ed6:	9317      	str	r3, [sp, #92]	; 0x5c
 8021ed8:	e6c0      	b.n	8021c5c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021eda:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8021edc:	441c      	add	r4, r3
 8021ede:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021ee0:	441e      	add	r6, r3
 8021ee2:	9b07      	ldr	r3, [sp, #28]
 8021ee4:	3b01      	subs	r3, #1
 8021ee6:	9307      	str	r3, [sp, #28]
 8021ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021eea:	3302      	adds	r3, #2
 8021eec:	930a      	str	r3, [sp, #40]	; 0x28
 8021eee:	e695      	b.n	8021c1c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021ef0:	d024      	beq.n	8021f3c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8021ef2:	9b07      	ldr	r3, [sp, #28]
 8021ef4:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8021ef6:	3b01      	subs	r3, #1
 8021ef8:	fb00 4003 	mla	r0, r0, r3, r4
 8021efc:	1400      	asrs	r0, r0, #16
 8021efe:	f53f aeaa 	bmi.w	8021c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f02:	3901      	subs	r1, #1
 8021f04:	4288      	cmp	r0, r1
 8021f06:	f6bf aea6 	bge.w	8021c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f0a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8021f0c:	fb01 6303 	mla	r3, r1, r3, r6
 8021f10:	141b      	asrs	r3, r3, #16
 8021f12:	f53f aea0 	bmi.w	8021c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f16:	3a01      	subs	r2, #1
 8021f18:	4293      	cmp	r3, r2
 8021f1a:	f6bf ae9c 	bge.w	8021c56 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021f1e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021f22:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8021f26:	f1bb 0f00 	cmp.w	fp, #0
 8021f2a:	f300 809a 	bgt.w	8022062 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 8021f2e:	9b07      	ldr	r3, [sp, #28]
 8021f30:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021f36:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8021f3a:	930a      	str	r3, [sp, #40]	; 0x28
 8021f3c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	f340 81ec 	ble.w	802231c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 8021f44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8021f48:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f4a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021f4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021f52:	eef0 6a62 	vmov.f32	s13, s5
 8021f56:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021f5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f62:	ee16 4a90 	vmov	r4, s13
 8021f66:	eef0 6a43 	vmov.f32	s13, s6
 8021f6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021f6e:	ee16 6a90 	vmov	r6, s13
 8021f72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021f76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021f7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f8a:	ee12 2a90 	vmov	r2, s5
 8021f8e:	eef0 2a47 	vmov.f32	s5, s14
 8021f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f96:	ee13 2a10 	vmov	r2, s6
 8021f9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8021f9c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f9e:	eeb0 3a67 	vmov.f32	s6, s15
 8021fa2:	fb92 f3f3 	sdiv	r3, r2, r3
 8021fa6:	9328      	str	r3, [sp, #160]	; 0xa0
 8021fa8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8021faa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8021fac:	3b01      	subs	r3, #1
 8021fae:	9316      	str	r3, [sp, #88]	; 0x58
 8021fb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021fb2:	bf08      	it	eq
 8021fb4:	4613      	moveq	r3, r2
 8021fb6:	9307      	str	r3, [sp, #28]
 8021fb8:	e622      	b.n	8021c00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8021fba:	2800      	cmp	r0, #0
 8021fbc:	f43f ae92 	beq.w	8021ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021fc0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8021fc4:	9308      	str	r3, [sp, #32]
 8021fc6:	0e1b      	lsrs	r3, r3, #24
 8021fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8021fca:	e68b      	b.n	8021ce4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8021fcc:	8839      	ldrh	r1, [r7, #0]
 8021fce:	43db      	mvns	r3, r3
 8021fd0:	4dd4      	ldr	r5, [pc, #848]	; (8022324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8021fd2:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8021fd6:	fa5f f883 	uxtb.w	r8, r3
 8021fda:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8021fde:	10c8      	asrs	r0, r1, #3
 8021fe0:	00cb      	lsls	r3, r1, #3
 8021fe2:	fb0e fe08 	mul.w	lr, lr, r8
 8021fe6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021fea:	b2db      	uxtb	r3, r3
 8021fec:	f10e 0101 	add.w	r1, lr, #1
 8021ff0:	fb00 f008 	mul.w	r0, r0, r8
 8021ff4:	fb03 f308 	mul.w	r3, r3, r8
 8021ff8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 8021ffc:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8022000:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8022004:	f100 0e01 	add.w	lr, r0, #1
 8022008:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 802200c:	b2c9      	uxtb	r1, r1
 802200e:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022012:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 8022016:	00d2      	lsls	r2, r2, #3
 8022018:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802201c:	430a      	orrs	r2, r1
 802201e:	1c59      	adds	r1, r3, #1
 8022020:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8022024:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022028:	e748      	b.n	8021ebc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802202a:	f112 0801 	adds.w	r8, r2, #1
 802202e:	f53f af4b 	bmi.w	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022032:	4543      	cmp	r3, r8
 8022034:	f6ff af48 	blt.w	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022038:	f11c 0801 	adds.w	r8, ip, #1
 802203c:	f53f af44 	bmi.w	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022040:	45c6      	cmp	lr, r8
 8022042:	f6ff af41 	blt.w	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022046:	b21b      	sxth	r3, r3
 8022048:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 802204c:	fa0f f28e 	sxth.w	r2, lr
 8022050:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8022054:	9200      	str	r2, [sp, #0]
 8022056:	4639      	mov	r1, r7
 8022058:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802205a:	9819      	ldr	r0, [sp, #100]	; 0x64
 802205c:	f7ff fc88 	bl	8021970 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 8022060:	e732      	b.n	8021ec8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8022062:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8022064:	1421      	asrs	r1, r4, #16
 8022066:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022068:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802206c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8022070:	1433      	asrs	r3, r6, #16
 8022072:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022076:	fb07 1303 	mla	r3, r7, r3, r1
 802207a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802207c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8022080:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8022084:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022088:	2a00      	cmp	r2, #0
 802208a:	f000 8108 	beq.w	802229e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 802208e:	684d      	ldr	r5, [r1, #4]
 8022090:	950d      	str	r5, [sp, #52]	; 0x34
 8022092:	0e2d      	lsrs	r5, r5, #24
 8022094:	9514      	str	r5, [sp, #80]	; 0x50
 8022096:	b178      	cbz	r0, 80220b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8022098:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 802209c:	3f01      	subs	r7, #1
 802209e:	00bf      	lsls	r7, r7, #2
 80220a0:	3704      	adds	r7, #4
 80220a2:	eb01 0e07 	add.w	lr, r1, r7
 80220a6:	59c9      	ldr	r1, [r1, r7]
 80220a8:	9109      	str	r1, [sp, #36]	; 0x24
 80220aa:	0e09      	lsrs	r1, r1, #24
 80220ac:	9111      	str	r1, [sp, #68]	; 0x44
 80220ae:	f8de 1004 	ldr.w	r1, [lr, #4]
 80220b2:	910e      	str	r1, [sp, #56]	; 0x38
 80220b4:	0e09      	lsrs	r1, r1, #24
 80220b6:	9115      	str	r1, [sp, #84]	; 0x54
 80220b8:	b292      	uxth	r2, r2
 80220ba:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80220bc:	b280      	uxth	r0, r0
 80220be:	fb02 f900 	mul.w	r9, r2, r0
 80220c2:	0112      	lsls	r2, r2, #4
 80220c4:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80220c8:	eba2 0e09 	sub.w	lr, r2, r9
 80220cc:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 80220d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80220d2:	b280      	uxth	r0, r0
 80220d4:	fa1f fe8e 	uxth.w	lr, lr
 80220d8:	1a09      	subs	r1, r1, r0
 80220da:	fb0e f202 	mul.w	r2, lr, r2
 80220de:	b289      	uxth	r1, r1
 80220e0:	fb01 220c 	mla	r2, r1, ip, r2
 80220e4:	fb00 2205 	mla	r2, r0, r5, r2
 80220e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80220ea:	fb09 2205 	mla	r2, r9, r5, r2
 80220ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80220f2:	2a00      	cmp	r2, #0
 80220f4:	f000 80ca 	beq.w	802228c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80220f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80220fc:	d019      	beq.n	8022132 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 80220fe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8022102:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022106:	fb0c fa0a 	mul.w	sl, ip, sl
 802210a:	fb0c fc03 	mul.w	ip, ip, r3
 802210e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8022112:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 8022116:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 802211a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802211e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8022122:	4453      	add	r3, sl
 8022124:	0a3f      	lsrs	r7, r7, #8
 8022126:	0a1b      	lsrs	r3, r3, #8
 8022128:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802212c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022130:	433b      	orrs	r3, r7
 8022132:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022134:	2dff      	cmp	r5, #255	; 0xff
 8022136:	d020      	beq.n	802217a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 8022138:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802213a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802213e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8022140:	436f      	muls	r7, r5
 8022142:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022144:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022148:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802214c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802214e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 8022152:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8022156:	fb05 fa0a 	mul.w	sl, r5, sl
 802215a:	44bc      	add	ip, r7
 802215c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8022160:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022164:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022168:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802216c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022170:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022174:	ea4c 050a 	orr.w	r5, ip, sl
 8022178:	950d      	str	r5, [sp, #52]	; 0x34
 802217a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802217c:	2dff      	cmp	r5, #255	; 0xff
 802217e:	d020      	beq.n	80221c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8022180:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8022182:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8022186:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022188:	436f      	muls	r7, r5
 802218a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802218c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8022190:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8022192:	fb05 fa0c 	mul.w	sl, r5, ip
 8022196:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802219a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802219e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221a2:	44bc      	add	ip, r7
 80221a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80221a8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80221ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221b0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80221b4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80221bc:	ea4c 050a 	orr.w	r5, ip, sl
 80221c0:	9509      	str	r5, [sp, #36]	; 0x24
 80221c2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80221c4:	2dff      	cmp	r5, #255	; 0xff
 80221c6:	d020      	beq.n	802220a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 80221c8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80221ca:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80221ce:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80221d0:	436f      	muls	r7, r5
 80221d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80221d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80221d8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80221dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80221de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80221e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221e6:	fb05 fa0a 	mul.w	sl, r5, sl
 80221ea:	44bc      	add	ip, r7
 80221ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80221f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80221f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80221f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80221fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022200:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8022204:	ea4c 050a 	orr.w	r5, ip, sl
 8022208:	950e      	str	r5, [sp, #56]	; 0x38
 802220a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802220c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 8022210:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022214:	2aff      	cmp	r2, #255	; 0xff
 8022216:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802221a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802221c:	fb0e f707 	mul.w	r7, lr, r7
 8022220:	fb01 770c 	mla	r7, r1, ip, r7
 8022224:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022228:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802222a:	fb00 770c 	mla	r7, r0, ip, r7
 802222e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8022232:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022234:	fb09 770c 	mla	r7, r9, ip, r7
 8022238:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 802223c:	fb0e fe0c 	mul.w	lr, lr, ip
 8022240:	ea4f 2717 	mov.w	r7, r7, lsr #8
 8022244:	fb01 e303 	mla	r3, r1, r3, lr
 8022248:	9909      	ldr	r1, [sp, #36]	; 0x24
 802224a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802224e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 8022252:	990e      	ldr	r1, [sp, #56]	; 0x38
 8022254:	fb00 330a 	mla	r3, r0, sl, r3
 8022258:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 802225c:	fb09 3c0c 	mla	ip, r9, ip, r3
 8022260:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022264:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8022268:	ea47 070c 	orr.w	r7, r7, ip
 802226c:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8022270:	d11e      	bne.n	80222b0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8022272:	097a      	lsrs	r2, r7, #5
 8022274:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8022278:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802227c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022280:	f023 0307 	bic.w	r3, r3, #7
 8022284:	4313      	orrs	r3, r2
 8022286:	431f      	orrs	r7, r3
 8022288:	f8a8 7000 	strh.w	r7, [r8]
 802228c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 802228e:	f108 0802 	add.w	r8, r8, #2
 8022292:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022296:	441c      	add	r4, r3
 8022298:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802229a:	441e      	add	r6, r3
 802229c:	e643      	b.n	8021f26 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 802229e:	2800      	cmp	r0, #0
 80222a0:	f43f af0a 	beq.w	80220b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80222a4:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80222a8:	9109      	str	r1, [sp, #36]	; 0x24
 80222aa:	0e09      	lsrs	r1, r1, #24
 80222ac:	9111      	str	r1, [sp, #68]	; 0x44
 80222ae:	e703      	b.n	80220b8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 80222b0:	f8b8 1000 	ldrh.w	r1, [r8]
 80222b4:	43d2      	mvns	r2, r2
 80222b6:	ea4f 2c21 	mov.w	ip, r1, asr #8
 80222ba:	fa5f fe82 	uxtb.w	lr, r2
 80222be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80222c2:	10c8      	asrs	r0, r1, #3
 80222c4:	00ca      	lsls	r2, r1, #3
 80222c6:	fb0c fc0e 	mul.w	ip, ip, lr
 80222ca:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80222ce:	b2d2      	uxtb	r2, r2
 80222d0:	f10c 0101 	add.w	r1, ip, #1
 80222d4:	fb00 f00e 	mul.w	r0, r0, lr
 80222d8:	fb02 f20e 	mul.w	r2, r2, lr
 80222dc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80222e0:	0c39      	lsrs	r1, r7, #16
 80222e2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80222e6:	490f      	ldr	r1, [pc, #60]	; (8022324 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80222e8:	fa5f fc8c 	uxtb.w	ip, ip
 80222ec:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 80222f0:	1c41      	adds	r1, r0, #1
 80222f2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 80222f6:	1c51      	adds	r1, r2, #1
 80222f8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80222fc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022300:	00c0      	lsls	r0, r0, #3
 8022302:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8022306:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802230a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 802230e:	ea4c 0c00 	orr.w	ip, ip, r0
 8022312:	ea47 0c0c 	orr.w	ip, r7, ip
 8022316:	f8a8 c000 	strh.w	ip, [r8]
 802231a:	e7b7      	b.n	802228c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 802231c:	b01b      	add	sp, #108	; 0x6c
 802231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022322:	bf00      	nop
 8022324:	fffff800 	.word	0xfffff800

08022328 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8022328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802232c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8022330:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022334:	2d00      	cmp	r5, #0
 8022336:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 802233a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 802233e:	fb05 0e03 	mla	lr, r5, r3, r0
 8022342:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022346:	f2c0 808c 	blt.w	8022462 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 802234a:	45a9      	cmp	r9, r5
 802234c:	f340 8089 	ble.w	8022462 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8022350:	2800      	cmp	r0, #0
 8022352:	f2c0 8084 	blt.w	802245e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8022356:	4580      	cmp	r8, r0
 8022358:	f340 8081 	ble.w	802245e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 802235c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022360:	f01e 0f01 	tst.w	lr, #1
 8022364:	5d16      	ldrb	r6, [r2, r4]
 8022366:	bf0c      	ite	eq
 8022368:	f006 060f 	andeq.w	r6, r6, #15
 802236c:	1136      	asrne	r6, r6, #4
 802236e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022372:	b2f6      	uxtb	r6, r6
 8022374:	1c44      	adds	r4, r0, #1
 8022376:	d477      	bmi.n	8022468 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8022378:	45a0      	cmp	r8, r4
 802237a:	dd75      	ble.n	8022468 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 802237c:	2f00      	cmp	r7, #0
 802237e:	d075      	beq.n	802246c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8022380:	f10e 0a01 	add.w	sl, lr, #1
 8022384:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8022388:	f01a 0f01 	tst.w	sl, #1
 802238c:	5d14      	ldrb	r4, [r2, r4]
 802238e:	bf0c      	ite	eq
 8022390:	f004 040f 	andeq.w	r4, r4, #15
 8022394:	1124      	asrne	r4, r4, #4
 8022396:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 802239a:	b2e4      	uxtb	r4, r4
 802239c:	3501      	adds	r5, #1
 802239e:	d469      	bmi.n	8022474 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80223a0:	45a9      	cmp	r9, r5
 80223a2:	dd67      	ble.n	8022474 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 80223a4:	f1bc 0f00 	cmp.w	ip, #0
 80223a8:	d067      	beq.n	802247a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 80223aa:	2800      	cmp	r0, #0
 80223ac:	db60      	blt.n	8022470 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80223ae:	4580      	cmp	r8, r0
 80223b0:	dd5e      	ble.n	8022470 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 80223b2:	eb03 090e 	add.w	r9, r3, lr
 80223b6:	ea4f 0559 	mov.w	r5, r9, lsr #1
 80223ba:	f019 0f01 	tst.w	r9, #1
 80223be:	5d55      	ldrb	r5, [r2, r5]
 80223c0:	bf0c      	ite	eq
 80223c2:	f005 050f 	andeq.w	r5, r5, #15
 80223c6:	112d      	asrne	r5, r5, #4
 80223c8:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80223cc:	b2ed      	uxtb	r5, r5
 80223ce:	3001      	adds	r0, #1
 80223d0:	d456      	bmi.n	8022480 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80223d2:	4580      	cmp	r8, r0
 80223d4:	dd54      	ble.n	8022480 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 80223d6:	2f00      	cmp	r7, #0
 80223d8:	d054      	beq.n	8022484 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 80223da:	3301      	adds	r3, #1
 80223dc:	449e      	add	lr, r3
 80223de:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80223e2:	f01e 0f01 	tst.w	lr, #1
 80223e6:	5cd0      	ldrb	r0, [r2, r3]
 80223e8:	bf0c      	ite	eq
 80223ea:	f000 000f 	andeq.w	r0, r0, #15
 80223ee:	1100      	asrne	r0, r0, #4
 80223f0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80223f4:	b2c3      	uxtb	r3, r0
 80223f6:	b2ba      	uxth	r2, r7
 80223f8:	fa1f fc8c 	uxth.w	ip, ip
 80223fc:	fb02 f00c 	mul.w	r0, r2, ip
 8022400:	0112      	lsls	r2, r2, #4
 8022402:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022406:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802240a:	1a12      	subs	r2, r2, r0
 802240c:	fa1f fc8c 	uxth.w	ip, ip
 8022410:	b292      	uxth	r2, r2
 8022412:	eba7 070c 	sub.w	r7, r7, ip
 8022416:	4362      	muls	r2, r4
 8022418:	b2bf      	uxth	r7, r7
 802241a:	fb06 2207 	mla	r2, r6, r7, r2
 802241e:	fb0c 2505 	mla	r5, ip, r5, r2
 8022422:	fb00 5303 	mla	r3, r0, r3, r5
 8022426:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802242a:	b1b3      	cbz	r3, 802245a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 802242c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8022430:	435a      	muls	r2, r3
 8022432:	1c53      	adds	r3, r2, #1
 8022434:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022438:	4a2d      	ldr	r2, [pc, #180]	; (80224f0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 802243a:	121b      	asrs	r3, r3, #8
 802243c:	6812      	ldr	r2, [r2, #0]
 802243e:	2bff      	cmp	r3, #255	; 0xff
 8022440:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8022444:	d120      	bne.n	8022488 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8022446:	0950      	lsrs	r0, r2, #5
 8022448:	4b2a      	ldr	r3, [pc, #168]	; (80224f4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 802244a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 802244e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022452:	4033      	ands	r3, r6
 8022454:	4318      	orrs	r0, r3
 8022456:	4302      	orrs	r2, r0
 8022458:	800a      	strh	r2, [r1, #0]
 802245a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802245e:	2600      	movs	r6, #0
 8022460:	e788      	b.n	8022374 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8022462:	2400      	movs	r4, #0
 8022464:	4626      	mov	r6, r4
 8022466:	e799      	b.n	802239c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8022468:	2400      	movs	r4, #0
 802246a:	e797      	b.n	802239c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 802246c:	463c      	mov	r4, r7
 802246e:	e795      	b.n	802239c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8022470:	2500      	movs	r5, #0
 8022472:	e7ac      	b.n	80223ce <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8022474:	2300      	movs	r3, #0
 8022476:	461d      	mov	r5, r3
 8022478:	e7bd      	b.n	80223f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 802247a:	4663      	mov	r3, ip
 802247c:	4665      	mov	r5, ip
 802247e:	e7ba      	b.n	80223f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8022480:	2300      	movs	r3, #0
 8022482:	e7b8      	b.n	80223f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8022484:	463b      	mov	r3, r7
 8022486:	e7b6      	b.n	80223f6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8022488:	880d      	ldrh	r5, [r1, #0]
 802248a:	b29f      	uxth	r7, r3
 802248c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8022490:	43db      	mvns	r3, r3
 8022492:	122c      	asrs	r4, r5, #8
 8022494:	fb10 f007 	smulbb	r0, r0, r7
 8022498:	b2db      	uxtb	r3, r3
 802249a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 802249e:	b2f6      	uxtb	r6, r6
 80224a0:	b2d2      	uxtb	r2, r2
 80224a2:	fb04 0403 	mla	r4, r4, r3, r0
 80224a6:	10e8      	asrs	r0, r5, #3
 80224a8:	fb12 f207 	smulbb	r2, r2, r7
 80224ac:	00ed      	lsls	r5, r5, #3
 80224ae:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80224b2:	b2a4      	uxth	r4, r4
 80224b4:	fb16 f607 	smulbb	r6, r6, r7
 80224b8:	b2ed      	uxtb	r5, r5
 80224ba:	fb00 6603 	mla	r6, r0, r3, r6
 80224be:	fb05 2303 	mla	r3, r5, r3, r2
 80224c2:	b2b0      	uxth	r0, r6
 80224c4:	b29a      	uxth	r2, r3
 80224c6:	1c63      	adds	r3, r4, #1
 80224c8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 80224cc:	1c53      	adds	r3, r2, #1
 80224ce:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80224d2:	1c42      	adds	r2, r0, #1
 80224d4:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80224d8:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 80224dc:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 80224e0:	0940      	lsrs	r0, r0, #5
 80224e2:	4323      	orrs	r3, r4
 80224e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80224e8:	4303      	orrs	r3, r0
 80224ea:	800b      	strh	r3, [r1, #0]
 80224ec:	e7b5      	b.n	802245a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 80224ee:	bf00      	nop
 80224f0:	2400af3c 	.word	0x2400af3c
 80224f4:	00fff800 	.word	0x00fff800

080224f8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80224f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80224fc:	b097      	sub	sp, #92	; 0x5c
 80224fe:	9214      	str	r2, [sp, #80]	; 0x50
 8022500:	9309      	str	r3, [sp, #36]	; 0x24
 8022502:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022504:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8022508:	9015      	str	r0, [sp, #84]	; 0x54
 802250a:	910d      	str	r1, [sp, #52]	; 0x34
 802250c:	6850      	ldr	r0, [r2, #4]
 802250e:	930f      	str	r3, [sp, #60]	; 0x3c
 8022510:	6812      	ldr	r2, [r2, #0]
 8022512:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022516:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 802251a:	fb00 1303 	mla	r3, r0, r3, r1
 802251e:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022522:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022524:	689b      	ldr	r3, [r3, #8]
 8022526:	3301      	adds	r3, #1
 8022528:	f023 0301 	bic.w	r3, r3, #1
 802252c:	930a      	str	r3, [sp, #40]	; 0x28
 802252e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022530:	681f      	ldr	r7, [r3, #0]
 8022532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022534:	2b00      	cmp	r3, #0
 8022536:	dc03      	bgt.n	8022540 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022538:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802253a:	2b00      	cmp	r3, #0
 802253c:	f340 8289 	ble.w	8022a52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8022540:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022542:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022546:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802254a:	1e48      	subs	r0, r1, #1
 802254c:	f102 3cff 	add.w	ip, r2, #4294967295
 8022550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022552:	2b00      	cmp	r3, #0
 8022554:	f340 80c5 	ble.w	80226e2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8022558:	ea5f 4e24 	movs.w	lr, r4, asr #16
 802255c:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022560:	d406      	bmi.n	8022570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022562:	4586      	cmp	lr, r0
 8022564:	da04      	bge.n	8022570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022566:	2b00      	cmp	r3, #0
 8022568:	db02      	blt.n	8022570 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802256a:	4563      	cmp	r3, ip
 802256c:	f2c0 80ba 	blt.w	80226e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8022570:	f11e 0e01 	adds.w	lr, lr, #1
 8022574:	f100 80ab 	bmi.w	80226ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8022578:	4571      	cmp	r1, lr
 802257a:	f2c0 80a8 	blt.w	80226ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802257e:	3301      	adds	r3, #1
 8022580:	f100 80a5 	bmi.w	80226ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8022584:	429a      	cmp	r2, r3
 8022586:	f2c0 80a2 	blt.w	80226ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 802258a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802258c:	46c8      	mov	r8, r9
 802258e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8022592:	930e      	str	r3, [sp, #56]	; 0x38
 8022594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022596:	2b00      	cmp	r3, #0
 8022598:	f340 80c4 	ble.w	8022724 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
 802259c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802259e:	1430      	asrs	r0, r6, #16
 80225a0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80225a4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 80225a8:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80225ac:	1423      	asrs	r3, r4, #16
 80225ae:	f100 814f 	bmi.w	8022850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80225b2:	f10c 3bff 	add.w	fp, ip, #4294967295
 80225b6:	455b      	cmp	r3, fp
 80225b8:	f280 814a 	bge.w	8022850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80225bc:	2800      	cmp	r0, #0
 80225be:	f2c0 8147 	blt.w	8022850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80225c2:	f10e 3bff 	add.w	fp, lr, #4294967295
 80225c6:	4558      	cmp	r0, fp
 80225c8:	f280 8142 	bge.w	8022850 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80225cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80225ce:	fb00 3305 	mla	r3, r0, r5, r3
 80225d2:	0858      	lsrs	r0, r3, #1
 80225d4:	07dd      	lsls	r5, r3, #31
 80225d6:	f817 c000 	ldrb.w	ip, [r7, r0]
 80225da:	bf54      	ite	pl
 80225dc:	f00c 0c0f 	andpl.w	ip, ip, #15
 80225e0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80225e4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80225e8:	fa5f fc8c 	uxtb.w	ip, ip
 80225ec:	2a00      	cmp	r2, #0
 80225ee:	f000 80dd 	beq.w	80227ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
 80225f2:	1c58      	adds	r0, r3, #1
 80225f4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80225f8:	07c0      	lsls	r0, r0, #31
 80225fa:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80225fe:	bf54      	ite	pl
 8022600:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022604:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022608:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 802260c:	fa5f f08e 	uxtb.w	r0, lr
 8022610:	9010      	str	r0, [sp, #64]	; 0x40
 8022612:	b1d9      	cbz	r1, 802264c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8022614:	4453      	add	r3, sl
 8022616:	0858      	lsrs	r0, r3, #1
 8022618:	07dd      	lsls	r5, r3, #31
 802261a:	f103 0301 	add.w	r3, r3, #1
 802261e:	5c38      	ldrb	r0, [r7, r0]
 8022620:	bf54      	ite	pl
 8022622:	f000 000f 	andpl.w	r0, r0, #15
 8022626:	1100      	asrmi	r0, r0, #4
 8022628:	07dd      	lsls	r5, r3, #31
 802262a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802262e:	b2c0      	uxtb	r0, r0
 8022630:	900b      	str	r0, [sp, #44]	; 0x2c
 8022632:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8022636:	f817 e000 	ldrb.w	lr, [r7, r0]
 802263a:	bf54      	ite	pl
 802263c:	f00e 030f 	andpl.w	r3, lr, #15
 8022640:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8022644:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022648:	b2db      	uxtb	r3, r3
 802264a:	9311      	str	r3, [sp, #68]	; 0x44
 802264c:	b292      	uxth	r2, r2
 802264e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022650:	b289      	uxth	r1, r1
 8022652:	fb02 f301 	mul.w	r3, r2, r1
 8022656:	0112      	lsls	r2, r2, #4
 8022658:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802265c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022660:	1ad2      	subs	r2, r2, r3
 8022662:	b289      	uxth	r1, r1
 8022664:	b292      	uxth	r2, r2
 8022666:	1a40      	subs	r0, r0, r1
 8022668:	436a      	muls	r2, r5
 802266a:	b280      	uxth	r0, r0
 802266c:	fb0c 2c00 	mla	ip, ip, r0, r2
 8022670:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022672:	fb01 c102 	mla	r1, r1, r2, ip
 8022676:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022678:	fb03 1302 	mla	r3, r3, r2, r1
 802267c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022680:	b1db      	cbz	r3, 80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022682:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022684:	4353      	muls	r3, r2
 8022686:	1c5a      	adds	r2, r3, #1
 8022688:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802268c:	4ac6      	ldr	r2, [pc, #792]	; (80229a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802268e:	121b      	asrs	r3, r3, #8
 8022690:	6812      	ldr	r2, [r2, #0]
 8022692:	2bff      	cmp	r3, #255	; 0xff
 8022694:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022698:	f040 8099 	bne.w	80227ce <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 802269c:	0953      	lsrs	r3, r2, #5
 802269e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 80226a2:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80226a6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80226aa:	f02c 0c07 	bic.w	ip, ip, #7
 80226ae:	ea43 0c0c 	orr.w	ip, r3, ip
 80226b2:	ea4c 0202 	orr.w	r2, ip, r2
 80226b6:	f8a8 2000 	strh.w	r2, [r8]
 80226ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226bc:	f108 0802 	add.w	r8, r8, #2
 80226c0:	441c      	add	r4, r3
 80226c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226c4:	441e      	add	r6, r3
 80226c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226c8:	3b01      	subs	r3, #1
 80226ca:	930e      	str	r3, [sp, #56]	; 0x38
 80226cc:	e762      	b.n	8022594 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80226ce:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80226d0:	f109 0902 	add.w	r9, r9, #2
 80226d4:	441c      	add	r4, r3
 80226d6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80226d8:	441e      	add	r6, r3
 80226da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226dc:	3b01      	subs	r3, #1
 80226de:	9309      	str	r3, [sp, #36]	; 0x24
 80226e0:	e736      	b.n	8022550 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80226e2:	d024      	beq.n	802272e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 80226e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80226e6:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80226e8:	3b01      	subs	r3, #1
 80226ea:	fb00 4003 	mla	r0, r0, r3, r4
 80226ee:	1400      	asrs	r0, r0, #16
 80226f0:	f53f af4b 	bmi.w	802258a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80226f4:	3901      	subs	r1, #1
 80226f6:	4288      	cmp	r0, r1
 80226f8:	f6bf af47 	bge.w	802258a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80226fc:	9924      	ldr	r1, [sp, #144]	; 0x90
 80226fe:	fb01 6303 	mla	r3, r1, r3, r6
 8022702:	141b      	asrs	r3, r3, #16
 8022704:	f53f af41 	bmi.w	802258a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022708:	3a01      	subs	r2, #1
 802270a:	4293      	cmp	r3, r2
 802270c:	f6bf af3d 	bge.w	802258a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022710:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8022714:	46c8      	mov	r8, r9
 8022716:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 802271a:	930e      	str	r3, [sp, #56]	; 0x38
 802271c:	f1bb 0f00 	cmp.w	fp, #0
 8022720:	f300 80b7 	bgt.w	8022892 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 8022724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022726:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802272a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 802272e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022730:	2b00      	cmp	r3, #0
 8022732:	f340 818e 	ble.w	8022a52 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
 8022736:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802273a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802273c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022740:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022744:	eef0 6a62 	vmov.f32	s13, s5
 8022748:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802274c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022750:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022754:	ee16 4a90 	vmov	r4, s13
 8022758:	eef0 6a43 	vmov.f32	s13, s6
 802275c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022760:	ee16 6a90 	vmov	r6, s13
 8022764:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022768:	ee61 7a27 	vmul.f32	s15, s2, s15
 802276c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022770:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022774:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022778:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802277c:	ee12 2a90 	vmov	r2, s5
 8022780:	eef0 2a47 	vmov.f32	s5, s14
 8022784:	fb92 f3f3 	sdiv	r3, r2, r3
 8022788:	ee13 2a10 	vmov	r2, s6
 802278c:	9323      	str	r3, [sp, #140]	; 0x8c
 802278e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022790:	eeb0 3a67 	vmov.f32	s6, s15
 8022794:	fb92 f3f3 	sdiv	r3, r2, r3
 8022798:	9324      	str	r3, [sp, #144]	; 0x90
 802279a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802279c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802279e:	3b01      	subs	r3, #1
 80227a0:	930d      	str	r3, [sp, #52]	; 0x34
 80227a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80227a4:	bf08      	it	eq
 80227a6:	4613      	moveq	r3, r2
 80227a8:	9309      	str	r3, [sp, #36]	; 0x24
 80227aa:	e6c2      	b.n	8022532 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80227ac:	2900      	cmp	r1, #0
 80227ae:	f43f af4d 	beq.w	802264c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80227b2:	eb0a 0003 	add.w	r0, sl, r3
 80227b6:	0843      	lsrs	r3, r0, #1
 80227b8:	07c0      	lsls	r0, r0, #31
 80227ba:	5cfb      	ldrb	r3, [r7, r3]
 80227bc:	bf54      	ite	pl
 80227be:	f003 030f 	andpl.w	r3, r3, #15
 80227c2:	111b      	asrmi	r3, r3, #4
 80227c4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80227c8:	b2db      	uxtb	r3, r3
 80227ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80227cc:	e73e      	b.n	802264c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80227ce:	f8b8 e000 	ldrh.w	lr, [r8]
 80227d2:	fa1f fb83 	uxth.w	fp, r3
 80227d6:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80227da:	43db      	mvns	r3, r3
 80227dc:	ea4f 202e 	mov.w	r0, lr, asr #8
 80227e0:	fb11 f10b 	smulbb	r1, r1, fp
 80227e4:	b2db      	uxtb	r3, r3
 80227e6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80227ea:	fa5f fc8c 	uxtb.w	ip, ip
 80227ee:	b2d2      	uxtb	r2, r2
 80227f0:	fb00 1003 	mla	r0, r0, r3, r1
 80227f4:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80227f8:	fb1c fc0b 	smulbb	ip, ip, fp
 80227fc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022800:	b280      	uxth	r0, r0
 8022802:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022806:	fb12 fb0b 	smulbb	fp, r2, fp
 802280a:	fa5f fe8e 	uxtb.w	lr, lr
 802280e:	fb01 cc03 	mla	ip, r1, r3, ip
 8022812:	fb0e bb03 	mla	fp, lr, r3, fp
 8022816:	1c43      	adds	r3, r0, #1
 8022818:	fa1f fc8c 	uxth.w	ip, ip
 802281c:	fa1f fb8b 	uxth.w	fp, fp
 8022820:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022824:	f10c 0101 	add.w	r1, ip, #1
 8022828:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 802282c:	f10b 0001 	add.w	r0, fp, #1
 8022830:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022834:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8022838:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802283c:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8022840:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022844:	4318      	orrs	r0, r3
 8022846:	ea40 000c 	orr.w	r0, r0, ip
 802284a:	f8a8 0000 	strh.w	r0, [r8]
 802284e:	e734      	b.n	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022850:	f113 0b01 	adds.w	fp, r3, #1
 8022854:	f53f af31 	bmi.w	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022858:	45dc      	cmp	ip, fp
 802285a:	f6ff af2e 	blt.w	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802285e:	f110 0b01 	adds.w	fp, r0, #1
 8022862:	f53f af2a 	bmi.w	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022866:	45de      	cmp	lr, fp
 8022868:	f6ff af27 	blt.w	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 802286c:	9302      	str	r3, [sp, #8]
 802286e:	fa0f f38e 	sxth.w	r3, lr
 8022872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8022874:	9301      	str	r3, [sp, #4]
 8022876:	fa0f f38c 	sxth.w	r3, ip
 802287a:	e9cd 0203 	strd	r0, r2, [sp, #12]
 802287e:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8022882:	9300      	str	r3, [sp, #0]
 8022884:	463a      	mov	r2, r7
 8022886:	4653      	mov	r3, sl
 8022888:	4641      	mov	r1, r8
 802288a:	9815      	ldr	r0, [sp, #84]	; 0x54
 802288c:	f7ff fd4c 	bl	8022328 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8022890:	e713      	b.n	80226ba <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8022892:	1422      	asrs	r2, r4, #16
 8022894:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8022896:	1433      	asrs	r3, r6, #16
 8022898:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802289c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80228a0:	fb05 2303 	mla	r3, r5, r3, r2
 80228a4:	085a      	lsrs	r2, r3, #1
 80228a6:	07dd      	lsls	r5, r3, #31
 80228a8:	5cba      	ldrb	r2, [r7, r2]
 80228aa:	bf54      	ite	pl
 80228ac:	f002 020f 	andpl.w	r2, r2, #15
 80228b0:	1112      	asrmi	r2, r2, #4
 80228b2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80228b6:	b2d2      	uxtb	r2, r2
 80228b8:	2900      	cmp	r1, #0
 80228ba:	d077      	beq.n	80229ac <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 80228bc:	f103 0e01 	add.w	lr, r3, #1
 80228c0:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80228c4:	f01e 0f01 	tst.w	lr, #1
 80228c8:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228cc:	bf0c      	ite	eq
 80228ce:	f00c 0c0f 	andeq.w	ip, ip, #15
 80228d2:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 80228d6:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80228da:	fa5f f58c 	uxtb.w	r5, ip
 80228de:	9512      	str	r5, [sp, #72]	; 0x48
 80228e0:	b308      	cbz	r0, 8022926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80228e2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80228e4:	442b      	add	r3, r5
 80228e6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80228ea:	07dd      	lsls	r5, r3, #31
 80228ec:	f103 0301 	add.w	r3, r3, #1
 80228f0:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80228f4:	bf54      	ite	pl
 80228f6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80228fa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80228fe:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022902:	fa5f f58c 	uxtb.w	r5, ip
 8022906:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802290a:	950c      	str	r5, [sp, #48]	; 0x30
 802290c:	07dd      	lsls	r5, r3, #31
 802290e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8022912:	bf54      	ite	pl
 8022914:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022918:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802291c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022920:	fa5f f38c 	uxtb.w	r3, ip
 8022924:	9313      	str	r3, [sp, #76]	; 0x4c
 8022926:	b289      	uxth	r1, r1
 8022928:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802292a:	b280      	uxth	r0, r0
 802292c:	fb01 f300 	mul.w	r3, r1, r0
 8022930:	0109      	lsls	r1, r1, #4
 8022932:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8022936:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 802293a:	1ac9      	subs	r1, r1, r3
 802293c:	b280      	uxth	r0, r0
 802293e:	b289      	uxth	r1, r1
 8022940:	ebac 0c00 	sub.w	ip, ip, r0
 8022944:	4369      	muls	r1, r5
 8022946:	fa1f fc8c 	uxth.w	ip, ip
 802294a:	fb02 120c 	mla	r2, r2, ip, r1
 802294e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022950:	fb00 2001 	mla	r0, r0, r1, r2
 8022954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022956:	fb03 0302 	mla	r3, r3, r2, r0
 802295a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802295e:	b1d3      	cbz	r3, 8022996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022962:	4353      	muls	r3, r2
 8022964:	1c5a      	adds	r2, r3, #1
 8022966:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802296a:	4a0f      	ldr	r2, [pc, #60]	; (80229a8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 802296c:	121b      	asrs	r3, r3, #8
 802296e:	6812      	ldr	r2, [r2, #0]
 8022970:	2bff      	cmp	r3, #255	; 0xff
 8022972:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8022976:	d12d      	bne.n	80229d4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022978:	0953      	lsrs	r3, r2, #5
 802297a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 802297e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022982:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022986:	f02c 0c07 	bic.w	ip, ip, #7
 802298a:	ea43 0c0c 	orr.w	ip, r3, ip
 802298e:	ea4c 0202 	orr.w	r2, ip, r2
 8022992:	f8a8 2000 	strh.w	r2, [r8]
 8022996:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022998:	f108 0802 	add.w	r8, r8, #2
 802299c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80229a0:	441c      	add	r4, r3
 80229a2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80229a4:	441e      	add	r6, r3
 80229a6:	e6b9      	b.n	802271c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 80229a8:	2400af3c 	.word	0x2400af3c
 80229ac:	2800      	cmp	r0, #0
 80229ae:	d0ba      	beq.n	8022926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80229b0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80229b2:	442b      	add	r3, r5
 80229b4:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 80229b8:	07db      	lsls	r3, r3, #31
 80229ba:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80229be:	bf54      	ite	pl
 80229c0:	f00c 0c0f 	andpl.w	ip, ip, #15
 80229c4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80229c8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80229cc:	fa5f f38c 	uxtb.w	r3, ip
 80229d0:	930c      	str	r3, [sp, #48]	; 0x30
 80229d2:	e7a8      	b.n	8022926 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
 80229d4:	f8b8 e000 	ldrh.w	lr, [r8]
 80229d8:	fa1f fa83 	uxth.w	sl, r3
 80229dc:	f3c2 4107 	ubfx	r1, r2, #16, #8
 80229e0:	43db      	mvns	r3, r3
 80229e2:	ea4f 202e 	mov.w	r0, lr, asr #8
 80229e6:	fb11 f10a 	smulbb	r1, r1, sl
 80229ea:	b2db      	uxtb	r3, r3
 80229ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80229f0:	b2d2      	uxtb	r2, r2
 80229f2:	fa5f fc8c 	uxtb.w	ip, ip
 80229f6:	fb00 1003 	mla	r0, r0, r3, r1
 80229fa:	ea4f 01ee 	mov.w	r1, lr, asr #3
 80229fe:	fb12 f20a 	smulbb	r2, r2, sl
 8022a02:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8022a06:	b280      	uxth	r0, r0
 8022a08:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022a0c:	fb1c fc0a 	smulbb	ip, ip, sl
 8022a10:	fa5f fe8e 	uxtb.w	lr, lr
 8022a14:	fb0e 2203 	mla	r2, lr, r3, r2
 8022a18:	fb01 cc03 	mla	ip, r1, r3, ip
 8022a1c:	1c43      	adds	r3, r0, #1
 8022a1e:	b292      	uxth	r2, r2
 8022a20:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8022a24:	1c51      	adds	r1, r2, #1
 8022a26:	fa1f fc8c 	uxth.w	ip, ip
 8022a2a:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022a2e:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8022a32:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022a36:	4308      	orrs	r0, r1
 8022a38:	f10c 0101 	add.w	r1, ip, #1
 8022a3c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8022a40:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022a44:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8022a48:	ea40 000c 	orr.w	r0, r0, ip
 8022a4c:	f8a8 0000 	strh.w	r0, [r8]
 8022a50:	e7a1      	b.n	8022996 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8022a52:	b017      	add	sp, #92	; 0x5c
 8022a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022a58 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 8022a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022a5c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8022a60:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8022a64:	2d00      	cmp	r5, #0
 8022a66:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8022a6a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8022a6e:	fb05 0e03 	mla	lr, r5, r3, r0
 8022a72:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8022a76:	f2c0 80b0 	blt.w	8022bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8022a7a:	45a9      	cmp	r9, r5
 8022a7c:	f340 80ad 	ble.w	8022bda <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8022a80:	2800      	cmp	r0, #0
 8022a82:	f2c0 80a8 	blt.w	8022bd6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8022a86:	4580      	cmp	r8, r0
 8022a88:	f340 80a5 	ble.w	8022bd6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8022a8c:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8022a90:	f01e 0f01 	tst.w	lr, #1
 8022a94:	5d16      	ldrb	r6, [r2, r4]
 8022a96:	bf0c      	ite	eq
 8022a98:	f006 060f 	andeq.w	r6, r6, #15
 8022a9c:	1136      	asrne	r6, r6, #4
 8022a9e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8022aa2:	b2f6      	uxtb	r6, r6
 8022aa4:	1c44      	adds	r4, r0, #1
 8022aa6:	f100 809b 	bmi.w	8022be0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022aaa:	45a0      	cmp	r8, r4
 8022aac:	f340 8098 	ble.w	8022be0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8022ab0:	2f00      	cmp	r7, #0
 8022ab2:	f000 8097 	beq.w	8022be4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 8022ab6:	f10e 0a01 	add.w	sl, lr, #1
 8022aba:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8022abe:	f01a 0f01 	tst.w	sl, #1
 8022ac2:	5d14      	ldrb	r4, [r2, r4]
 8022ac4:	bf0c      	ite	eq
 8022ac6:	f004 040f 	andeq.w	r4, r4, #15
 8022aca:	1124      	asrne	r4, r4, #4
 8022acc:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8022ad0:	b2e4      	uxtb	r4, r4
 8022ad2:	3501      	adds	r5, #1
 8022ad4:	f100 808a 	bmi.w	8022bec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022ad8:	45a9      	cmp	r9, r5
 8022ada:	f340 8087 	ble.w	8022bec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8022ade:	f1bc 0f00 	cmp.w	ip, #0
 8022ae2:	f000 8086 	beq.w	8022bf2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 8022ae6:	2800      	cmp	r0, #0
 8022ae8:	db7e      	blt.n	8022be8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022aea:	4580      	cmp	r8, r0
 8022aec:	dd7c      	ble.n	8022be8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8022aee:	eb03 090e 	add.w	r9, r3, lr
 8022af2:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8022af6:	f019 0f01 	tst.w	r9, #1
 8022afa:	5d55      	ldrb	r5, [r2, r5]
 8022afc:	bf0c      	ite	eq
 8022afe:	f005 050f 	andeq.w	r5, r5, #15
 8022b02:	112d      	asrne	r5, r5, #4
 8022b04:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8022b08:	b2ed      	uxtb	r5, r5
 8022b0a:	3001      	adds	r0, #1
 8022b0c:	d474      	bmi.n	8022bf8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022b0e:	4580      	cmp	r8, r0
 8022b10:	dd72      	ble.n	8022bf8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 8022b12:	2f00      	cmp	r7, #0
 8022b14:	d072      	beq.n	8022bfc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 8022b16:	3301      	adds	r3, #1
 8022b18:	449e      	add	lr, r3
 8022b1a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8022b1e:	f01e 0f01 	tst.w	lr, #1
 8022b22:	5cd0      	ldrb	r0, [r2, r3]
 8022b24:	bf0c      	ite	eq
 8022b26:	f000 000f 	andeq.w	r0, r0, #15
 8022b2a:	1100      	asrne	r0, r0, #4
 8022b2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022b30:	b2c3      	uxtb	r3, r0
 8022b32:	b2ba      	uxth	r2, r7
 8022b34:	fa1f fc8c 	uxth.w	ip, ip
 8022b38:	fb02 f00c 	mul.w	r0, r2, ip
 8022b3c:	0112      	lsls	r2, r2, #4
 8022b3e:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8022b42:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8022b46:	1a12      	subs	r2, r2, r0
 8022b48:	fa1f fc8c 	uxth.w	ip, ip
 8022b4c:	b292      	uxth	r2, r2
 8022b4e:	eba7 070c 	sub.w	r7, r7, ip
 8022b52:	4362      	muls	r2, r4
 8022b54:	b2bf      	uxth	r7, r7
 8022b56:	fb06 2207 	mla	r2, r6, r7, r2
 8022b5a:	fb0c 2505 	mla	r5, ip, r5, r2
 8022b5e:	fb00 5303 	mla	r3, r0, r3, r5
 8022b62:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022b66:	b3a3      	cbz	r3, 8022bd2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 8022b68:	4a25      	ldr	r2, [pc, #148]	; (8022c00 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 8022b6a:	880e      	ldrh	r6, [r1, #0]
 8022b6c:	6815      	ldr	r5, [r2, #0]
 8022b6e:	b29a      	uxth	r2, r3
 8022b70:	1234      	asrs	r4, r6, #8
 8022b72:	43db      	mvns	r3, r3
 8022b74:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8022b78:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8022b7c:	b2db      	uxtb	r3, r3
 8022b7e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8022b82:	fb10 f002 	smulbb	r0, r0, r2
 8022b86:	b2ed      	uxtb	r5, r5
 8022b88:	fb17 f702 	smulbb	r7, r7, r2
 8022b8c:	fb04 0403 	mla	r4, r4, r3, r0
 8022b90:	10f0      	asrs	r0, r6, #3
 8022b92:	fb15 f202 	smulbb	r2, r5, r2
 8022b96:	00f6      	lsls	r6, r6, #3
 8022b98:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8022b9c:	b2a4      	uxth	r4, r4
 8022b9e:	b2f6      	uxtb	r6, r6
 8022ba0:	fb00 7003 	mla	r0, r0, r3, r7
 8022ba4:	fb06 2303 	mla	r3, r6, r3, r2
 8022ba8:	b280      	uxth	r0, r0
 8022baa:	b29a      	uxth	r2, r3
 8022bac:	1c63      	adds	r3, r4, #1
 8022bae:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8022bb2:	1c53      	adds	r3, r2, #1
 8022bb4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022bb8:	1c42      	adds	r2, r0, #1
 8022bba:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8022bbe:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8022bc2:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8022bc6:	0940      	lsrs	r0, r0, #5
 8022bc8:	4323      	orrs	r3, r4
 8022bca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8022bce:	4303      	orrs	r3, r0
 8022bd0:	800b      	strh	r3, [r1, #0]
 8022bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022bd6:	2600      	movs	r6, #0
 8022bd8:	e764      	b.n	8022aa4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 8022bda:	2400      	movs	r4, #0
 8022bdc:	4626      	mov	r6, r4
 8022bde:	e778      	b.n	8022ad2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022be0:	2400      	movs	r4, #0
 8022be2:	e776      	b.n	8022ad2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022be4:	463c      	mov	r4, r7
 8022be6:	e774      	b.n	8022ad2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8022be8:	2500      	movs	r5, #0
 8022bea:	e78e      	b.n	8022b0a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8022bec:	2300      	movs	r3, #0
 8022bee:	461d      	mov	r5, r3
 8022bf0:	e79f      	b.n	8022b32 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022bf2:	4663      	mov	r3, ip
 8022bf4:	4665      	mov	r5, ip
 8022bf6:	e79c      	b.n	8022b32 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022bf8:	2300      	movs	r3, #0
 8022bfa:	e79a      	b.n	8022b32 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022bfc:	463b      	mov	r3, r7
 8022bfe:	e798      	b.n	8022b32 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8022c00:	2400af3c 	.word	0x2400af3c

08022c04 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c08:	b093      	sub	sp, #76	; 0x4c
 8022c0a:	461d      	mov	r5, r3
 8022c0c:	920c      	str	r2, [sp, #48]	; 0x30
 8022c0e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022c10:	9011      	str	r0, [sp, #68]	; 0x44
 8022c12:	9107      	str	r1, [sp, #28]
 8022c14:	6850      	ldr	r0, [r2, #4]
 8022c16:	6812      	ldr	r2, [r2, #0]
 8022c18:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8022c1c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022c20:	fb00 1303 	mla	r3, r0, r3, r1
 8022c24:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8022c28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c2a:	689b      	ldr	r3, [r3, #8]
 8022c2c:	3301      	adds	r3, #1
 8022c2e:	f023 0301 	bic.w	r3, r3, #1
 8022c32:	9306      	str	r3, [sp, #24]
 8022c34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c36:	681f      	ldr	r7, [r3, #0]
 8022c38:	9b07      	ldr	r3, [sp, #28]
 8022c3a:	2b00      	cmp	r3, #0
 8022c3c:	dc03      	bgt.n	8022c46 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8022c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c40:	2b00      	cmp	r3, #0
 8022c42:	f340 8267 	ble.w	8023114 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022c46:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022c48:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c4c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c50:	1e48      	subs	r0, r1, #1
 8022c52:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c56:	2d00      	cmp	r5, #0
 8022c58:	f340 80b7 	ble.w	8022dca <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8022c5c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8022c60:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c64:	d406      	bmi.n	8022c74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022c66:	4586      	cmp	lr, r0
 8022c68:	da04      	bge.n	8022c74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022c6a:	2b00      	cmp	r3, #0
 8022c6c:	db02      	blt.n	8022c74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8022c6e:	4563      	cmp	r3, ip
 8022c70:	f2c0 80ac 	blt.w	8022dcc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8022c74:	f11e 0e01 	adds.w	lr, lr, #1
 8022c78:	f100 809f 	bmi.w	8022dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022c7c:	4571      	cmp	r1, lr
 8022c7e:	f2c0 809c 	blt.w	8022dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022c82:	3301      	adds	r3, #1
 8022c84:	f100 8099 	bmi.w	8022dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022c88:	429a      	cmp	r2, r3
 8022c8a:	f2c0 8096 	blt.w	8022dba <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8022c8e:	46c8      	mov	r8, r9
 8022c90:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8022c94:	9509      	str	r5, [sp, #36]	; 0x24
 8022c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c98:	2b00      	cmp	r3, #0
 8022c9a:	f340 80b5 	ble.w	8022e08 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8022c9e:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8022ca2:	1430      	asrs	r0, r6, #16
 8022ca4:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022ca8:	9308      	str	r3, [sp, #32]
 8022caa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022cac:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8022cb0:	1423      	asrs	r3, r4, #16
 8022cb2:	f100 813f 	bmi.w	8022f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022cb6:	f10c 3bff 	add.w	fp, ip, #4294967295
 8022cba:	455b      	cmp	r3, fp
 8022cbc:	f280 813a 	bge.w	8022f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022cc0:	2800      	cmp	r0, #0
 8022cc2:	f2c0 8137 	blt.w	8022f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022cc6:	f10e 3bff 	add.w	fp, lr, #4294967295
 8022cca:	4558      	cmp	r0, fp
 8022ccc:	f280 8132 	bge.w	8022f34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8022cd0:	9a06      	ldr	r2, [sp, #24]
 8022cd2:	fb00 3302 	mla	r3, r0, r2, r3
 8022cd6:	0858      	lsrs	r0, r3, #1
 8022cd8:	07da      	lsls	r2, r3, #31
 8022cda:	9a08      	ldr	r2, [sp, #32]
 8022cdc:	f817 c000 	ldrb.w	ip, [r7, r0]
 8022ce0:	bf54      	ite	pl
 8022ce2:	f00c 0c0f 	andpl.w	ip, ip, #15
 8022ce6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8022cea:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8022cee:	fa5f fc8c 	uxtb.w	ip, ip
 8022cf2:	2a00      	cmp	r2, #0
 8022cf4:	f000 80cc 	beq.w	8022e90 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8022cf8:	1c58      	adds	r0, r3, #1
 8022cfa:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8022cfe:	07c0      	lsls	r0, r0, #31
 8022d00:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8022d04:	bf54      	ite	pl
 8022d06:	f00e 0e0f 	andpl.w	lr, lr, #15
 8022d0a:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8022d0e:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8022d12:	fa5f fe8e 	uxtb.w	lr, lr
 8022d16:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8022d1a:	b1b9      	cbz	r1, 8022d4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022d1c:	4453      	add	r3, sl
 8022d1e:	0858      	lsrs	r0, r3, #1
 8022d20:	07da      	lsls	r2, r3, #31
 8022d22:	5c38      	ldrb	r0, [r7, r0]
 8022d24:	bf54      	ite	pl
 8022d26:	f000 000f 	andpl.w	r0, r0, #15
 8022d2a:	1100      	asrmi	r0, r0, #4
 8022d2c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8022d30:	b2c0      	uxtb	r0, r0
 8022d32:	900a      	str	r0, [sp, #40]	; 0x28
 8022d34:	1c58      	adds	r0, r3, #1
 8022d36:	0843      	lsrs	r3, r0, #1
 8022d38:	07c2      	lsls	r2, r0, #31
 8022d3a:	5cfb      	ldrb	r3, [r7, r3]
 8022d3c:	bf54      	ite	pl
 8022d3e:	f003 030f 	andpl.w	r3, r3, #15
 8022d42:	111b      	asrmi	r3, r3, #4
 8022d44:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022d48:	b2db      	uxtb	r3, r3
 8022d4a:	930e      	str	r3, [sp, #56]	; 0x38
 8022d4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8022d50:	b289      	uxth	r1, r1
 8022d52:	fb02 f301 	mul.w	r3, r2, r1
 8022d56:	0112      	lsls	r2, r2, #4
 8022d58:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8022d5c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8022d60:	1ad2      	subs	r2, r2, r3
 8022d62:	b289      	uxth	r1, r1
 8022d64:	b292      	uxth	r2, r2
 8022d66:	1a40      	subs	r0, r0, r1
 8022d68:	fa1f fe80 	uxth.w	lr, r0
 8022d6c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8022d6e:	4342      	muls	r2, r0
 8022d70:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8022d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022d76:	fb01 c102 	mla	r1, r1, r2, ip
 8022d7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022d7c:	fb03 1302 	mla	r3, r3, r2, r1
 8022d80:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d84:	2bff      	cmp	r3, #255	; 0xff
 8022d86:	f040 8094 	bne.w	8022eb2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8022d8a:	4bbf      	ldr	r3, [pc, #764]	; (8023088 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022d8c:	681a      	ldr	r2, [r3, #0]
 8022d8e:	4bbf      	ldr	r3, [pc, #764]	; (802308c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 8022d90:	0951      	lsrs	r1, r2, #5
 8022d92:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8022d96:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8022d9a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8022d9e:	430b      	orrs	r3, r1
 8022da0:	4313      	orrs	r3, r2
 8022da2:	f8a8 3000 	strh.w	r3, [r8]
 8022da6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022da8:	f108 0802 	add.w	r8, r8, #2
 8022dac:	441c      	add	r4, r3
 8022dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022db0:	441e      	add	r6, r3
 8022db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022db4:	3b01      	subs	r3, #1
 8022db6:	9309      	str	r3, [sp, #36]	; 0x24
 8022db8:	e76d      	b.n	8022c96 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022dba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022dbc:	3d01      	subs	r5, #1
 8022dbe:	f109 0902 	add.w	r9, r9, #2
 8022dc2:	441c      	add	r4, r3
 8022dc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022dc6:	441e      	add	r6, r3
 8022dc8:	e745      	b.n	8022c56 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022dca:	d021      	beq.n	8022e10 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8022dcc:	1e6b      	subs	r3, r5, #1
 8022dce:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8022dd0:	fb00 4003 	mla	r0, r0, r3, r4
 8022dd4:	1400      	asrs	r0, r0, #16
 8022dd6:	f53f af5a 	bmi.w	8022c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022dda:	3901      	subs	r1, #1
 8022ddc:	4288      	cmp	r0, r1
 8022dde:	f6bf af56 	bge.w	8022c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022de2:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022de4:	fb01 6303 	mla	r3, r1, r3, r6
 8022de8:	141b      	asrs	r3, r3, #16
 8022dea:	f53f af50 	bmi.w	8022c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022dee:	3a01      	subs	r2, #1
 8022df0:	4293      	cmp	r3, r2
 8022df2:	f6bf af4c 	bge.w	8022c8e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022df6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8022dfa:	46a8      	mov	r8, r5
 8022dfc:	46ce      	mov	lr, r9
 8022dfe:	9308      	str	r3, [sp, #32]
 8022e00:	f1b8 0f00 	cmp.w	r8, #0
 8022e04:	f300 80b6 	bgt.w	8022f74 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
 8022e08:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8022e0c:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8022e10:	9b07      	ldr	r3, [sp, #28]
 8022e12:	2b00      	cmp	r3, #0
 8022e14:	f340 817e 	ble.w	8023114 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
 8022e18:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8022e1c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e26:	eef0 6a62 	vmov.f32	s13, s5
 8022e2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022e2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e36:	ee16 4a90 	vmov	r4, s13
 8022e3a:	eef0 6a43 	vmov.f32	s13, s6
 8022e3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022e42:	ee16 6a90 	vmov	r6, s13
 8022e46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e5e:	ee12 2a90 	vmov	r2, s5
 8022e62:	eef0 2a47 	vmov.f32	s5, s14
 8022e66:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e6a:	ee13 2a10 	vmov	r2, s6
 8022e6e:	931f      	str	r3, [sp, #124]	; 0x7c
 8022e70:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e72:	eeb0 3a67 	vmov.f32	s6, s15
 8022e76:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e7a:	9320      	str	r3, [sp, #128]	; 0x80
 8022e7c:	9b07      	ldr	r3, [sp, #28]
 8022e7e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022e80:	3b01      	subs	r3, #1
 8022e82:	9307      	str	r3, [sp, #28]
 8022e84:	bf08      	it	eq
 8022e86:	4615      	moveq	r5, r2
 8022e88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022e8a:	bf18      	it	ne
 8022e8c:	461d      	movne	r5, r3
 8022e8e:	e6d3      	b.n	8022c38 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8022e90:	2900      	cmp	r1, #0
 8022e92:	f43f af5b 	beq.w	8022d4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022e96:	eb0a 0003 	add.w	r0, sl, r3
 8022e9a:	0843      	lsrs	r3, r0, #1
 8022e9c:	07c0      	lsls	r0, r0, #31
 8022e9e:	5cfb      	ldrb	r3, [r7, r3]
 8022ea0:	bf54      	ite	pl
 8022ea2:	f003 030f 	andpl.w	r3, r3, #15
 8022ea6:	111b      	asrmi	r3, r3, #4
 8022ea8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8022eac:	b2db      	uxtb	r3, r3
 8022eae:	930a      	str	r3, [sp, #40]	; 0x28
 8022eb0:	e74c      	b.n	8022d4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8022eb2:	2b00      	cmp	r3, #0
 8022eb4:	f43f af77 	beq.w	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022eb8:	4a73      	ldr	r2, [pc, #460]	; (8023088 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8022eba:	fa1f fe83 	uxth.w	lr, r3
 8022ebe:	f8b8 c000 	ldrh.w	ip, [r8]
 8022ec2:	43db      	mvns	r3, r3
 8022ec4:	6810      	ldr	r0, [r2, #0]
 8022ec6:	ea4f 212c 	mov.w	r1, ip, asr #8
 8022eca:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8022ece:	b2db      	uxtb	r3, r3
 8022ed0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022ed4:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8022ed8:	fb12 f20e 	smulbb	r2, r2, lr
 8022edc:	b2c0      	uxtb	r0, r0
 8022ede:	fb1b fb0e 	smulbb	fp, fp, lr
 8022ee2:	fb01 2103 	mla	r1, r1, r3, r2
 8022ee6:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8022eea:	fb10 fe0e 	smulbb	lr, r0, lr
 8022eee:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022ef2:	b289      	uxth	r1, r1
 8022ef4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022ef8:	fa5f fc8c 	uxtb.w	ip, ip
 8022efc:	fb02 b203 	mla	r2, r2, r3, fp
 8022f00:	1c48      	adds	r0, r1, #1
 8022f02:	fb0c e303 	mla	r3, ip, r3, lr
 8022f06:	b292      	uxth	r2, r2
 8022f08:	b29b      	uxth	r3, r3
 8022f0a:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8022f0e:	f102 0b01 	add.w	fp, r2, #1
 8022f12:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 8022f16:	1c59      	adds	r1, r3, #1
 8022f18:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8022f1c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022f20:	0952      	lsrs	r2, r2, #5
 8022f22:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 8022f26:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8022f2a:	4301      	orrs	r1, r0
 8022f2c:	4311      	orrs	r1, r2
 8022f2e:	f8a8 1000 	strh.w	r1, [r8]
 8022f32:	e738      	b.n	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f34:	f113 0b01 	adds.w	fp, r3, #1
 8022f38:	f53f af35 	bmi.w	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f3c:	45dc      	cmp	ip, fp
 8022f3e:	f6ff af32 	blt.w	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f42:	f110 0b01 	adds.w	fp, r0, #1
 8022f46:	f53f af2e 	bmi.w	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f4a:	45de      	cmp	lr, fp
 8022f4c:	f6ff af2b 	blt.w	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f50:	9302      	str	r3, [sp, #8]
 8022f52:	fa0f f38e 	sxth.w	r3, lr
 8022f56:	9a08      	ldr	r2, [sp, #32]
 8022f58:	9301      	str	r3, [sp, #4]
 8022f5a:	fa0f f38c 	sxth.w	r3, ip
 8022f5e:	9105      	str	r1, [sp, #20]
 8022f60:	4641      	mov	r1, r8
 8022f62:	9300      	str	r3, [sp, #0]
 8022f64:	4653      	mov	r3, sl
 8022f66:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8022f6a:	463a      	mov	r2, r7
 8022f6c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8022f6e:	f7ff fd73 	bl	8022a58 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8022f72:	e718      	b.n	8022da6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8022f74:	1422      	asrs	r2, r4, #16
 8022f76:	9906      	ldr	r1, [sp, #24]
 8022f78:	1433      	asrs	r3, r6, #16
 8022f7a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022f7e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022f82:	fb01 2303 	mla	r3, r1, r3, r2
 8022f86:	085a      	lsrs	r2, r3, #1
 8022f88:	07d9      	lsls	r1, r3, #31
 8022f8a:	5cba      	ldrb	r2, [r7, r2]
 8022f8c:	bf54      	ite	pl
 8022f8e:	f002 020f 	andpl.w	r2, r2, #15
 8022f92:	1112      	asrmi	r2, r2, #4
 8022f94:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8022f98:	b2d2      	uxtb	r2, r2
 8022f9a:	2800      	cmp	r0, #0
 8022f9c:	d063      	beq.n	8023066 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022f9e:	f103 0a01 	add.w	sl, r3, #1
 8022fa2:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8022fa6:	f01a 0f01 	tst.w	sl, #1
 8022faa:	5c79      	ldrb	r1, [r7, r1]
 8022fac:	bf0c      	ite	eq
 8022fae:	f001 010f 	andeq.w	r1, r1, #15
 8022fb2:	1109      	asrne	r1, r1, #4
 8022fb4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fb8:	b2c9      	uxtb	r1, r1
 8022fba:	910f      	str	r1, [sp, #60]	; 0x3c
 8022fbc:	f1bc 0f00 	cmp.w	ip, #0
 8022fc0:	d01a      	beq.n	8022ff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022fc2:	9908      	ldr	r1, [sp, #32]
 8022fc4:	440b      	add	r3, r1
 8022fc6:	0859      	lsrs	r1, r3, #1
 8022fc8:	f013 0f01 	tst.w	r3, #1
 8022fcc:	f103 0301 	add.w	r3, r3, #1
 8022fd0:	5c79      	ldrb	r1, [r7, r1]
 8022fd2:	bf0c      	ite	eq
 8022fd4:	f001 010f 	andeq.w	r1, r1, #15
 8022fd8:	1109      	asrne	r1, r1, #4
 8022fda:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022fde:	b2c9      	uxtb	r1, r1
 8022fe0:	910b      	str	r1, [sp, #44]	; 0x2c
 8022fe2:	0859      	lsrs	r1, r3, #1
 8022fe4:	07db      	lsls	r3, r3, #31
 8022fe6:	5c79      	ldrb	r1, [r7, r1]
 8022fe8:	bf54      	ite	pl
 8022fea:	f001 010f 	andpl.w	r1, r1, #15
 8022fee:	1109      	asrmi	r1, r1, #4
 8022ff0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8022ff4:	b2c9      	uxtb	r1, r1
 8022ff6:	9110      	str	r1, [sp, #64]	; 0x40
 8022ff8:	b280      	uxth	r0, r0
 8022ffa:	fa1f fc8c 	uxth.w	ip, ip
 8022ffe:	fb00 f30c 	mul.w	r3, r0, ip
 8023002:	0100      	lsls	r0, r0, #4
 8023004:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8023008:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 802300c:	1ac0      	subs	r0, r0, r3
 802300e:	fa1f fc8c 	uxth.w	ip, ip
 8023012:	b280      	uxth	r0, r0
 8023014:	eba1 010c 	sub.w	r1, r1, ip
 8023018:	fa1f fa81 	uxth.w	sl, r1
 802301c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802301e:	4348      	muls	r0, r1
 8023020:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8023022:	fb02 020a 	mla	r2, r2, sl, r0
 8023026:	fb0c 2c01 	mla	ip, ip, r1, r2
 802302a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802302c:	fb03 c302 	mla	r3, r3, r2, ip
 8023030:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023034:	2bff      	cmp	r3, #255	; 0xff
 8023036:	d12b      	bne.n	8023090 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8023038:	4b13      	ldr	r3, [pc, #76]	; (8023088 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 802303a:	681a      	ldr	r2, [r3, #0]
 802303c:	4b13      	ldr	r3, [pc, #76]	; (802308c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
 802303e:	0951      	lsrs	r1, r2, #5
 8023040:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 8023044:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8023048:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802304c:	430b      	orrs	r3, r1
 802304e:	4313      	orrs	r3, r2
 8023050:	f8ae 3000 	strh.w	r3, [lr]
 8023054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023056:	f10e 0e02 	add.w	lr, lr, #2
 802305a:	f108 38ff 	add.w	r8, r8, #4294967295
 802305e:	441c      	add	r4, r3
 8023060:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023062:	441e      	add	r6, r3
 8023064:	e6cc      	b.n	8022e00 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8023066:	f1bc 0f00 	cmp.w	ip, #0
 802306a:	d0c5      	beq.n	8022ff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 802306c:	9908      	ldr	r1, [sp, #32]
 802306e:	440b      	add	r3, r1
 8023070:	0859      	lsrs	r1, r3, #1
 8023072:	07db      	lsls	r3, r3, #31
 8023074:	5c79      	ldrb	r1, [r7, r1]
 8023076:	bf54      	ite	pl
 8023078:	f001 010f 	andpl.w	r1, r1, #15
 802307c:	1109      	asrmi	r1, r1, #4
 802307e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023082:	b2c9      	uxtb	r1, r1
 8023084:	910b      	str	r1, [sp, #44]	; 0x2c
 8023086:	e7b7      	b.n	8022ff8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8023088:	2400af3c 	.word	0x2400af3c
 802308c:	fffff800 	.word	0xfffff800
 8023090:	2b00      	cmp	r3, #0
 8023092:	d0df      	beq.n	8023054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8023094:	4a21      	ldr	r2, [pc, #132]	; (802311c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
 8023096:	fa1f fa83 	uxth.w	sl, r3
 802309a:	f8be c000 	ldrh.w	ip, [lr]
 802309e:	43db      	mvns	r3, r3
 80230a0:	6810      	ldr	r0, [r2, #0]
 80230a2:	ea4f 212c 	mov.w	r1, ip, asr #8
 80230a6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 80230aa:	b2db      	uxtb	r3, r3
 80230ac:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80230b0:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 80230b4:	fb12 f20a 	smulbb	r2, r2, sl
 80230b8:	b2c0      	uxtb	r0, r0
 80230ba:	fb1b fb0a 	smulbb	fp, fp, sl
 80230be:	fb01 2103 	mla	r1, r1, r3, r2
 80230c2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80230c6:	fb10 f00a 	smulbb	r0, r0, sl
 80230ca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80230ce:	b289      	uxth	r1, r1
 80230d0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80230d4:	fa5f fc8c 	uxtb.w	ip, ip
 80230d8:	fb02 b203 	mla	r2, r2, r3, fp
 80230dc:	fb0c 0003 	mla	r0, ip, r3, r0
 80230e0:	1c4b      	adds	r3, r1, #1
 80230e2:	b292      	uxth	r2, r2
 80230e4:	b280      	uxth	r0, r0
 80230e6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80230ea:	f100 0b01 	add.w	fp, r0, #1
 80230ee:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 80230f2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 80230f6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 80230fa:	ea4b 0101 	orr.w	r1, fp, r1
 80230fe:	f102 0b01 	add.w	fp, r2, #1
 8023102:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8023106:	0952      	lsrs	r2, r2, #5
 8023108:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802310c:	4311      	orrs	r1, r2
 802310e:	f8ae 1000 	strh.w	r1, [lr]
 8023112:	e79f      	b.n	8023054 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 8023114:	b013      	add	sp, #76	; 0x4c
 8023116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802311a:	bf00      	nop
 802311c:	2400af3c 	.word	0x2400af3c

08023120 <CRC_Lock>:
 8023120:	4a20      	ldr	r2, [pc, #128]	; (80231a4 <CRC_Lock+0x84>)
 8023122:	b530      	push	{r4, r5, lr}
 8023124:	6813      	ldr	r3, [r2, #0]
 8023126:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 802312a:	f24c 2540 	movw	r5, #49728	; 0xc240
 802312e:	f023 0301 	bic.w	r3, r3, #1
 8023132:	6013      	str	r3, [r2, #0]
 8023134:	4b1c      	ldr	r3, [pc, #112]	; (80231a8 <CRC_Lock+0x88>)
 8023136:	681a      	ldr	r2, [r3, #0]
 8023138:	4022      	ands	r2, r4
 802313a:	42aa      	cmp	r2, r5
 802313c:	d005      	beq.n	802314a <CRC_Lock+0x2a>
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	f24c 2270 	movw	r2, #49776	; 0xc270
 8023144:	4023      	ands	r3, r4
 8023146:	4293      	cmp	r3, r2
 8023148:	d124      	bne.n	8023194 <CRC_Lock+0x74>
 802314a:	4b18      	ldr	r3, [pc, #96]	; (80231ac <CRC_Lock+0x8c>)
 802314c:	681b      	ldr	r3, [r3, #0]
 802314e:	bb0b      	cbnz	r3, 8023194 <CRC_Lock+0x74>
 8023150:	4b17      	ldr	r3, [pc, #92]	; (80231b0 <CRC_Lock+0x90>)
 8023152:	681a      	ldr	r2, [r3, #0]
 8023154:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023158:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 802315c:	d00d      	beq.n	802317a <CRC_Lock+0x5a>
 802315e:	681a      	ldr	r2, [r3, #0]
 8023160:	f240 4483 	movw	r4, #1155	; 0x483
 8023164:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8023168:	42a2      	cmp	r2, r4
 802316a:	d006      	beq.n	802317a <CRC_Lock+0x5a>
 802316c:	681b      	ldr	r3, [r3, #0]
 802316e:	f240 4285 	movw	r2, #1157	; 0x485
 8023172:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8023176:	4293      	cmp	r3, r2
 8023178:	d10c      	bne.n	8023194 <CRC_Lock+0x74>
 802317a:	4b0e      	ldr	r3, [pc, #56]	; (80231b4 <CRC_Lock+0x94>)
 802317c:	2201      	movs	r2, #1
 802317e:	601a      	str	r2, [r3, #0]
 8023180:	681a      	ldr	r2, [r3, #0]
 8023182:	2a00      	cmp	r2, #0
 8023184:	d1fc      	bne.n	8023180 <CRC_Lock+0x60>
 8023186:	4b0c      	ldr	r3, [pc, #48]	; (80231b8 <CRC_Lock+0x98>)
 8023188:	6018      	str	r0, [r3, #0]
 802318a:	6818      	ldr	r0, [r3, #0]
 802318c:	1a43      	subs	r3, r0, r1
 802318e:	4258      	negs	r0, r3
 8023190:	4158      	adcs	r0, r3
 8023192:	bd30      	pop	{r4, r5, pc}
 8023194:	4b09      	ldr	r3, [pc, #36]	; (80231bc <CRC_Lock+0x9c>)
 8023196:	2201      	movs	r2, #1
 8023198:	601a      	str	r2, [r3, #0]
 802319a:	681a      	ldr	r2, [r3, #0]
 802319c:	2a00      	cmp	r2, #0
 802319e:	d1fc      	bne.n	802319a <CRC_Lock+0x7a>
 80231a0:	4b07      	ldr	r3, [pc, #28]	; (80231c0 <CRC_Lock+0xa0>)
 80231a2:	e7f1      	b.n	8023188 <CRC_Lock+0x68>
 80231a4:	e0002000 	.word	0xe0002000
 80231a8:	e000ed00 	.word	0xe000ed00
 80231ac:	e0042000 	.word	0xe0042000
 80231b0:	5c001000 	.word	0x5c001000
 80231b4:	58024c08 	.word	0x58024c08
 80231b8:	58024c00 	.word	0x58024c00
 80231bc:	40023008 	.word	0x40023008
 80231c0:	40023000 	.word	0x40023000

080231c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80231c4:	6101      	str	r1, [r0, #16]
 80231c6:	4770      	bx	lr

080231c8 <_ZN8touchgfx8Gestures4tickEv>:
 80231c8:	7b83      	ldrb	r3, [r0, #14]
 80231ca:	b14b      	cbz	r3, 80231e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80231cc:	8903      	ldrh	r3, [r0, #8]
 80231ce:	3301      	adds	r3, #1
 80231d0:	b29b      	uxth	r3, r3
 80231d2:	2b07      	cmp	r3, #7
 80231d4:	8103      	strh	r3, [r0, #8]
 80231d6:	bf81      	itttt	hi
 80231d8:	2300      	movhi	r3, #0
 80231da:	8143      	strhhi	r3, [r0, #10]
 80231dc:	8183      	strhhi	r3, [r0, #12]
 80231de:	7383      	strbhi	r3, [r0, #14]
 80231e0:	4770      	bx	lr
	...

080231e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80231e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80231e8:	4698      	mov	r8, r3
 80231ea:	8883      	ldrh	r3, [r0, #4]
 80231ec:	4604      	mov	r4, r0
 80231ee:	4617      	mov	r7, r2
 80231f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80231f4:	eba8 0303 	sub.w	r3, r8, r3
 80231f8:	4a19      	ldr	r2, [pc, #100]	; (8023260 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80231fa:	460e      	mov	r6, r1
 80231fc:	b21b      	sxth	r3, r3
 80231fe:	88c1      	ldrh	r1, [r0, #6]
 8023200:	9200      	str	r2, [sp, #0]
 8023202:	2000      	movs	r0, #0
 8023204:	2b00      	cmp	r3, #0
 8023206:	8aa2      	ldrh	r2, [r4, #20]
 8023208:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802320c:	bfb8      	it	lt
 802320e:	425b      	neglt	r3, r3
 8023210:	f88d 0004 	strb.w	r0, [sp, #4]
 8023214:	f8ad 1008 	strh.w	r1, [sp, #8]
 8023218:	b21b      	sxth	r3, r3
 802321a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802321e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8023222:	4293      	cmp	r3, r2
 8023224:	dc07      	bgt.n	8023236 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8023226:	1a69      	subs	r1, r5, r1
 8023228:	b209      	sxth	r1, r1
 802322a:	2900      	cmp	r1, #0
 802322c:	bfb8      	it	lt
 802322e:	4249      	neglt	r1, r1
 8023230:	b209      	sxth	r1, r1
 8023232:	428a      	cmp	r2, r1
 8023234:	da10      	bge.n	8023258 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8023236:	6920      	ldr	r0, [r4, #16]
 8023238:	4669      	mov	r1, sp
 802323a:	eba8 0606 	sub.w	r6, r8, r6
 802323e:	1bef      	subs	r7, r5, r7
 8023240:	6803      	ldr	r3, [r0, #0]
 8023242:	685b      	ldr	r3, [r3, #4]
 8023244:	4798      	blx	r3
 8023246:	2300      	movs	r3, #0
 8023248:	2001      	movs	r0, #1
 802324a:	8166      	strh	r6, [r4, #10]
 802324c:	8123      	strh	r3, [r4, #8]
 802324e:	81a7      	strh	r7, [r4, #12]
 8023250:	f8a4 8004 	strh.w	r8, [r4, #4]
 8023254:	80e5      	strh	r5, [r4, #6]
 8023256:	73a0      	strb	r0, [r4, #14]
 8023258:	b004      	add	sp, #16
 802325a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802325e:	bf00      	nop
 8023260:	08026110 	.word	0x08026110

08023264 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8023264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023266:	461e      	mov	r6, r3
 8023268:	1e4b      	subs	r3, r1, #1
 802326a:	b085      	sub	sp, #20
 802326c:	4604      	mov	r4, r0
 802326e:	2b01      	cmp	r3, #1
 8023270:	460d      	mov	r5, r1
 8023272:	4617      	mov	r7, r2
 8023274:	d84b      	bhi.n	802330e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8023276:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 802327a:	1cd3      	adds	r3, r2, #3
 802327c:	b29b      	uxth	r3, r3
 802327e:	2b06      	cmp	r3, #6
 8023280:	d916      	bls.n	80232b0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8023282:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8023324 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8023286:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802328a:	f8cd c004 	str.w	ip, [sp, #4]
 802328e:	f04f 0c00 	mov.w	ip, #0
 8023292:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8023296:	6900      	ldr	r0, [r0, #16]
 8023298:	f8ad 100c 	strh.w	r1, [sp, #12]
 802329c:	a901      	add	r1, sp, #4
 802329e:	f88d c008 	strb.w	ip, [sp, #8]
 80232a2:	f8ad 200a 	strh.w	r2, [sp, #10]
 80232a6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80232aa:	6803      	ldr	r3, [r0, #0]
 80232ac:	689b      	ldr	r3, [r3, #8]
 80232ae:	4798      	blx	r3
 80232b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80232b4:	1cd3      	adds	r3, r2, #3
 80232b6:	b29b      	uxth	r3, r3
 80232b8:	2b06      	cmp	r3, #6
 80232ba:	d916      	bls.n	80232ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80232bc:	f8df c064 	ldr.w	ip, [pc, #100]	; 8023324 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80232c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80232c4:	f8cd c004 	str.w	ip, [sp, #4]
 80232c8:	f04f 0c01 	mov.w	ip, #1
 80232cc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80232d0:	6920      	ldr	r0, [r4, #16]
 80232d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80232d6:	a901      	add	r1, sp, #4
 80232d8:	f88d c008 	strb.w	ip, [sp, #8]
 80232dc:	f8ad 200a 	strh.w	r2, [sp, #10]
 80232e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80232e4:	6803      	ldr	r3, [r0, #0]
 80232e6:	689b      	ldr	r3, [r3, #8]
 80232e8:	4798      	blx	r3
 80232ea:	4b0d      	ldr	r3, [pc, #52]	; (8023320 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 80232ec:	a901      	add	r1, sp, #4
 80232ee:	6920      	ldr	r0, [r4, #16]
 80232f0:	9301      	str	r3, [sp, #4]
 80232f2:	2300      	movs	r3, #0
 80232f4:	f88d 5008 	strb.w	r5, [sp, #8]
 80232f8:	f8ad 700a 	strh.w	r7, [sp, #10]
 80232fc:	f8ad 600c 	strh.w	r6, [sp, #12]
 8023300:	f8ad 300e 	strh.w	r3, [sp, #14]
 8023304:	6803      	ldr	r3, [r0, #0]
 8023306:	681b      	ldr	r3, [r3, #0]
 8023308:	4798      	blx	r3
 802330a:	b005      	add	sp, #20
 802330c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802330e:	2900      	cmp	r1, #0
 8023310:	d1eb      	bne.n	80232ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8023312:	80a2      	strh	r2, [r4, #4]
 8023314:	80c6      	strh	r6, [r0, #6]
 8023316:	60a1      	str	r1, [r4, #8]
 8023318:	81a1      	strh	r1, [r4, #12]
 802331a:	73a1      	strb	r1, [r4, #14]
 802331c:	e7e5      	b.n	80232ea <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802331e:	bf00      	nop
 8023320:	080260fc 	.word	0x080260fc
 8023324:	08026124 	.word	0x08026124

08023328 <__aeabi_atexit>:
 8023328:	460b      	mov	r3, r1
 802332a:	4601      	mov	r1, r0
 802332c:	4618      	mov	r0, r3
 802332e:	f000 b853 	b.w	80233d8 <__cxa_atexit>

08023332 <_ZdlPvj>:
 8023332:	f000 b812 	b.w	802335a <_ZdlPv>

08023336 <__cxa_guard_acquire>:
 8023336:	6803      	ldr	r3, [r0, #0]
 8023338:	07db      	lsls	r3, r3, #31
 802333a:	d406      	bmi.n	802334a <__cxa_guard_acquire+0x14>
 802333c:	7843      	ldrb	r3, [r0, #1]
 802333e:	b103      	cbz	r3, 8023342 <__cxa_guard_acquire+0xc>
 8023340:	deff      	udf	#255	; 0xff
 8023342:	2301      	movs	r3, #1
 8023344:	7043      	strb	r3, [r0, #1]
 8023346:	4618      	mov	r0, r3
 8023348:	4770      	bx	lr
 802334a:	2000      	movs	r0, #0
 802334c:	4770      	bx	lr

0802334e <__cxa_guard_release>:
 802334e:	2301      	movs	r3, #1
 8023350:	6003      	str	r3, [r0, #0]
 8023352:	4770      	bx	lr

08023354 <__cxa_pure_virtual>:
 8023354:	b508      	push	{r3, lr}
 8023356:	f000 f80f 	bl	8023378 <_ZSt9terminatev>

0802335a <_ZdlPv>:
 802335a:	f000 b989 	b.w	8023670 <free>

0802335e <_ZN10__cxxabiv111__terminateEPFvvE>:
 802335e:	b508      	push	{r3, lr}
 8023360:	4780      	blx	r0
 8023362:	f000 f80e 	bl	8023382 <abort>
	...

08023368 <_ZSt13get_terminatev>:
 8023368:	4b02      	ldr	r3, [pc, #8]	; (8023374 <_ZSt13get_terminatev+0xc>)
 802336a:	6818      	ldr	r0, [r3, #0]
 802336c:	f3bf 8f5b 	dmb	ish
 8023370:	4770      	bx	lr
 8023372:	bf00      	nop
 8023374:	240000c0 	.word	0x240000c0

08023378 <_ZSt9terminatev>:
 8023378:	b508      	push	{r3, lr}
 802337a:	f7ff fff5 	bl	8023368 <_ZSt13get_terminatev>
 802337e:	f7ff ffee 	bl	802335e <_ZN10__cxxabiv111__terminateEPFvvE>

08023382 <abort>:
 8023382:	b508      	push	{r3, lr}
 8023384:	2006      	movs	r0, #6
 8023386:	f000 fe01 	bl	8023f8c <raise>
 802338a:	2001      	movs	r0, #1
 802338c:	f7de f8de 	bl	800154c <_exit>

08023390 <__assert_func>:
 8023390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023392:	4614      	mov	r4, r2
 8023394:	461a      	mov	r2, r3
 8023396:	4b09      	ldr	r3, [pc, #36]	; (80233bc <__assert_func+0x2c>)
 8023398:	681b      	ldr	r3, [r3, #0]
 802339a:	4605      	mov	r5, r0
 802339c:	68d8      	ldr	r0, [r3, #12]
 802339e:	b14c      	cbz	r4, 80233b4 <__assert_func+0x24>
 80233a0:	4b07      	ldr	r3, [pc, #28]	; (80233c0 <__assert_func+0x30>)
 80233a2:	9100      	str	r1, [sp, #0]
 80233a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80233a8:	4906      	ldr	r1, [pc, #24]	; (80233c4 <__assert_func+0x34>)
 80233aa:	462b      	mov	r3, r5
 80233ac:	f000 f8fe 	bl	80235ac <fiprintf>
 80233b0:	f7ff ffe7 	bl	8023382 <abort>
 80233b4:	4b04      	ldr	r3, [pc, #16]	; (80233c8 <__assert_func+0x38>)
 80233b6:	461c      	mov	r4, r3
 80233b8:	e7f3      	b.n	80233a2 <__assert_func+0x12>
 80233ba:	bf00      	nop
 80233bc:	240000c4 	.word	0x240000c4
 80233c0:	080263ec 	.word	0x080263ec
 80233c4:	080263f9 	.word	0x080263f9
 80233c8:	08026427 	.word	0x08026427

080233cc <atexit>:
 80233cc:	2300      	movs	r3, #0
 80233ce:	4601      	mov	r1, r0
 80233d0:	461a      	mov	r2, r3
 80233d2:	4618      	mov	r0, r3
 80233d4:	f000 bf0c 	b.w	80241f0 <__register_exitproc>

080233d8 <__cxa_atexit>:
 80233d8:	b510      	push	{r4, lr}
 80233da:	4c05      	ldr	r4, [pc, #20]	; (80233f0 <__cxa_atexit+0x18>)
 80233dc:	4613      	mov	r3, r2
 80233de:	b12c      	cbz	r4, 80233ec <__cxa_atexit+0x14>
 80233e0:	460a      	mov	r2, r1
 80233e2:	4601      	mov	r1, r0
 80233e4:	2002      	movs	r0, #2
 80233e6:	f000 ff03 	bl	80241f0 <__register_exitproc>
 80233ea:	bd10      	pop	{r4, pc}
 80233ec:	4620      	mov	r0, r4
 80233ee:	e7fc      	b.n	80233ea <__cxa_atexit+0x12>
 80233f0:	080241f1 	.word	0x080241f1

080233f4 <__errno>:
 80233f4:	4b01      	ldr	r3, [pc, #4]	; (80233fc <__errno+0x8>)
 80233f6:	6818      	ldr	r0, [r3, #0]
 80233f8:	4770      	bx	lr
 80233fa:	bf00      	nop
 80233fc:	240000c4 	.word	0x240000c4

08023400 <std>:
 8023400:	2300      	movs	r3, #0
 8023402:	b510      	push	{r4, lr}
 8023404:	4604      	mov	r4, r0
 8023406:	e9c0 3300 	strd	r3, r3, [r0]
 802340a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802340e:	6083      	str	r3, [r0, #8]
 8023410:	8181      	strh	r1, [r0, #12]
 8023412:	6643      	str	r3, [r0, #100]	; 0x64
 8023414:	81c2      	strh	r2, [r0, #14]
 8023416:	6183      	str	r3, [r0, #24]
 8023418:	4619      	mov	r1, r3
 802341a:	2208      	movs	r2, #8
 802341c:	305c      	adds	r0, #92	; 0x5c
 802341e:	f000 f93d 	bl	802369c <memset>
 8023422:	4b05      	ldr	r3, [pc, #20]	; (8023438 <std+0x38>)
 8023424:	6263      	str	r3, [r4, #36]	; 0x24
 8023426:	4b05      	ldr	r3, [pc, #20]	; (802343c <std+0x3c>)
 8023428:	62a3      	str	r3, [r4, #40]	; 0x28
 802342a:	4b05      	ldr	r3, [pc, #20]	; (8023440 <std+0x40>)
 802342c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802342e:	4b05      	ldr	r3, [pc, #20]	; (8023444 <std+0x44>)
 8023430:	6224      	str	r4, [r4, #32]
 8023432:	6323      	str	r3, [r4, #48]	; 0x30
 8023434:	bd10      	pop	{r4, pc}
 8023436:	bf00      	nop
 8023438:	08023fc5 	.word	0x08023fc5
 802343c:	08023fe7 	.word	0x08023fe7
 8023440:	0802401f 	.word	0x0802401f
 8023444:	08024043 	.word	0x08024043

08023448 <_cleanup_r>:
 8023448:	4901      	ldr	r1, [pc, #4]	; (8023450 <_cleanup_r+0x8>)
 802344a:	f000 b8c1 	b.w	80235d0 <_fwalk_reent>
 802344e:	bf00      	nop
 8023450:	080243e1 	.word	0x080243e1

08023454 <__sfmoreglue>:
 8023454:	b570      	push	{r4, r5, r6, lr}
 8023456:	2268      	movs	r2, #104	; 0x68
 8023458:	1e4d      	subs	r5, r1, #1
 802345a:	4355      	muls	r5, r2
 802345c:	460e      	mov	r6, r1
 802345e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023462:	f000 f98f 	bl	8023784 <_malloc_r>
 8023466:	4604      	mov	r4, r0
 8023468:	b140      	cbz	r0, 802347c <__sfmoreglue+0x28>
 802346a:	2100      	movs	r1, #0
 802346c:	e9c0 1600 	strd	r1, r6, [r0]
 8023470:	300c      	adds	r0, #12
 8023472:	60a0      	str	r0, [r4, #8]
 8023474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023478:	f000 f910 	bl	802369c <memset>
 802347c:	4620      	mov	r0, r4
 802347e:	bd70      	pop	{r4, r5, r6, pc}

08023480 <__sfp_lock_acquire>:
 8023480:	4801      	ldr	r0, [pc, #4]	; (8023488 <__sfp_lock_acquire+0x8>)
 8023482:	f000 b8ea 	b.w	802365a <__retarget_lock_acquire_recursive>
 8023486:	bf00      	nop
 8023488:	2400b032 	.word	0x2400b032

0802348c <__sfp_lock_release>:
 802348c:	4801      	ldr	r0, [pc, #4]	; (8023494 <__sfp_lock_release+0x8>)
 802348e:	f000 b8e6 	b.w	802365e <__retarget_lock_release_recursive>
 8023492:	bf00      	nop
 8023494:	2400b032 	.word	0x2400b032

08023498 <__sinit_lock_acquire>:
 8023498:	4801      	ldr	r0, [pc, #4]	; (80234a0 <__sinit_lock_acquire+0x8>)
 802349a:	f000 b8de 	b.w	802365a <__retarget_lock_acquire_recursive>
 802349e:	bf00      	nop
 80234a0:	2400b033 	.word	0x2400b033

080234a4 <__sinit_lock_release>:
 80234a4:	4801      	ldr	r0, [pc, #4]	; (80234ac <__sinit_lock_release+0x8>)
 80234a6:	f000 b8da 	b.w	802365e <__retarget_lock_release_recursive>
 80234aa:	bf00      	nop
 80234ac:	2400b033 	.word	0x2400b033

080234b0 <__sinit>:
 80234b0:	b510      	push	{r4, lr}
 80234b2:	4604      	mov	r4, r0
 80234b4:	f7ff fff0 	bl	8023498 <__sinit_lock_acquire>
 80234b8:	69a3      	ldr	r3, [r4, #24]
 80234ba:	b11b      	cbz	r3, 80234c4 <__sinit+0x14>
 80234bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80234c0:	f7ff bff0 	b.w	80234a4 <__sinit_lock_release>
 80234c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80234c8:	6523      	str	r3, [r4, #80]	; 0x50
 80234ca:	4b13      	ldr	r3, [pc, #76]	; (8023518 <__sinit+0x68>)
 80234cc:	4a13      	ldr	r2, [pc, #76]	; (802351c <__sinit+0x6c>)
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80234d2:	42a3      	cmp	r3, r4
 80234d4:	bf04      	itt	eq
 80234d6:	2301      	moveq	r3, #1
 80234d8:	61a3      	streq	r3, [r4, #24]
 80234da:	4620      	mov	r0, r4
 80234dc:	f000 f820 	bl	8023520 <__sfp>
 80234e0:	6060      	str	r0, [r4, #4]
 80234e2:	4620      	mov	r0, r4
 80234e4:	f000 f81c 	bl	8023520 <__sfp>
 80234e8:	60a0      	str	r0, [r4, #8]
 80234ea:	4620      	mov	r0, r4
 80234ec:	f000 f818 	bl	8023520 <__sfp>
 80234f0:	2200      	movs	r2, #0
 80234f2:	60e0      	str	r0, [r4, #12]
 80234f4:	2104      	movs	r1, #4
 80234f6:	6860      	ldr	r0, [r4, #4]
 80234f8:	f7ff ff82 	bl	8023400 <std>
 80234fc:	68a0      	ldr	r0, [r4, #8]
 80234fe:	2201      	movs	r2, #1
 8023500:	2109      	movs	r1, #9
 8023502:	f7ff ff7d 	bl	8023400 <std>
 8023506:	68e0      	ldr	r0, [r4, #12]
 8023508:	2202      	movs	r2, #2
 802350a:	2112      	movs	r1, #18
 802350c:	f7ff ff78 	bl	8023400 <std>
 8023510:	2301      	movs	r3, #1
 8023512:	61a3      	str	r3, [r4, #24]
 8023514:	e7d2      	b.n	80234bc <__sinit+0xc>
 8023516:	bf00      	nop
 8023518:	08026488 	.word	0x08026488
 802351c:	08023449 	.word	0x08023449

08023520 <__sfp>:
 8023520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023522:	4607      	mov	r7, r0
 8023524:	f7ff ffac 	bl	8023480 <__sfp_lock_acquire>
 8023528:	4b1e      	ldr	r3, [pc, #120]	; (80235a4 <__sfp+0x84>)
 802352a:	681e      	ldr	r6, [r3, #0]
 802352c:	69b3      	ldr	r3, [r6, #24]
 802352e:	b913      	cbnz	r3, 8023536 <__sfp+0x16>
 8023530:	4630      	mov	r0, r6
 8023532:	f7ff ffbd 	bl	80234b0 <__sinit>
 8023536:	3648      	adds	r6, #72	; 0x48
 8023538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802353c:	3b01      	subs	r3, #1
 802353e:	d503      	bpl.n	8023548 <__sfp+0x28>
 8023540:	6833      	ldr	r3, [r6, #0]
 8023542:	b30b      	cbz	r3, 8023588 <__sfp+0x68>
 8023544:	6836      	ldr	r6, [r6, #0]
 8023546:	e7f7      	b.n	8023538 <__sfp+0x18>
 8023548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802354c:	b9d5      	cbnz	r5, 8023584 <__sfp+0x64>
 802354e:	4b16      	ldr	r3, [pc, #88]	; (80235a8 <__sfp+0x88>)
 8023550:	60e3      	str	r3, [r4, #12]
 8023552:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023556:	6665      	str	r5, [r4, #100]	; 0x64
 8023558:	f000 f87e 	bl	8023658 <__retarget_lock_init_recursive>
 802355c:	f7ff ff96 	bl	802348c <__sfp_lock_release>
 8023560:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023564:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023568:	6025      	str	r5, [r4, #0]
 802356a:	61a5      	str	r5, [r4, #24]
 802356c:	2208      	movs	r2, #8
 802356e:	4629      	mov	r1, r5
 8023570:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023574:	f000 f892 	bl	802369c <memset>
 8023578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802357c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023580:	4620      	mov	r0, r4
 8023582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023584:	3468      	adds	r4, #104	; 0x68
 8023586:	e7d9      	b.n	802353c <__sfp+0x1c>
 8023588:	2104      	movs	r1, #4
 802358a:	4638      	mov	r0, r7
 802358c:	f7ff ff62 	bl	8023454 <__sfmoreglue>
 8023590:	4604      	mov	r4, r0
 8023592:	6030      	str	r0, [r6, #0]
 8023594:	2800      	cmp	r0, #0
 8023596:	d1d5      	bne.n	8023544 <__sfp+0x24>
 8023598:	f7ff ff78 	bl	802348c <__sfp_lock_release>
 802359c:	230c      	movs	r3, #12
 802359e:	603b      	str	r3, [r7, #0]
 80235a0:	e7ee      	b.n	8023580 <__sfp+0x60>
 80235a2:	bf00      	nop
 80235a4:	08026488 	.word	0x08026488
 80235a8:	ffff0001 	.word	0xffff0001

080235ac <fiprintf>:
 80235ac:	b40e      	push	{r1, r2, r3}
 80235ae:	b503      	push	{r0, r1, lr}
 80235b0:	4601      	mov	r1, r0
 80235b2:	ab03      	add	r3, sp, #12
 80235b4:	4805      	ldr	r0, [pc, #20]	; (80235cc <fiprintf+0x20>)
 80235b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80235ba:	6800      	ldr	r0, [r0, #0]
 80235bc:	9301      	str	r3, [sp, #4]
 80235be:	f000 f97f 	bl	80238c0 <_vfiprintf_r>
 80235c2:	b002      	add	sp, #8
 80235c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80235c8:	b003      	add	sp, #12
 80235ca:	4770      	bx	lr
 80235cc:	240000c4 	.word	0x240000c4

080235d0 <_fwalk_reent>:
 80235d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80235d4:	4606      	mov	r6, r0
 80235d6:	4688      	mov	r8, r1
 80235d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80235dc:	2700      	movs	r7, #0
 80235de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80235e2:	f1b9 0901 	subs.w	r9, r9, #1
 80235e6:	d505      	bpl.n	80235f4 <_fwalk_reent+0x24>
 80235e8:	6824      	ldr	r4, [r4, #0]
 80235ea:	2c00      	cmp	r4, #0
 80235ec:	d1f7      	bne.n	80235de <_fwalk_reent+0xe>
 80235ee:	4638      	mov	r0, r7
 80235f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80235f4:	89ab      	ldrh	r3, [r5, #12]
 80235f6:	2b01      	cmp	r3, #1
 80235f8:	d907      	bls.n	802360a <_fwalk_reent+0x3a>
 80235fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80235fe:	3301      	adds	r3, #1
 8023600:	d003      	beq.n	802360a <_fwalk_reent+0x3a>
 8023602:	4629      	mov	r1, r5
 8023604:	4630      	mov	r0, r6
 8023606:	47c0      	blx	r8
 8023608:	4307      	orrs	r7, r0
 802360a:	3568      	adds	r5, #104	; 0x68
 802360c:	e7e9      	b.n	80235e2 <_fwalk_reent+0x12>
	...

08023610 <__libc_init_array>:
 8023610:	b570      	push	{r4, r5, r6, lr}
 8023612:	4d0d      	ldr	r5, [pc, #52]	; (8023648 <__libc_init_array+0x38>)
 8023614:	4c0d      	ldr	r4, [pc, #52]	; (802364c <__libc_init_array+0x3c>)
 8023616:	1b64      	subs	r4, r4, r5
 8023618:	10a4      	asrs	r4, r4, #2
 802361a:	2600      	movs	r6, #0
 802361c:	42a6      	cmp	r6, r4
 802361e:	d109      	bne.n	8023634 <__libc_init_array+0x24>
 8023620:	4d0b      	ldr	r5, [pc, #44]	; (8023650 <__libc_init_array+0x40>)
 8023622:	4c0c      	ldr	r4, [pc, #48]	; (8023654 <__libc_init_array+0x44>)
 8023624:	f000 ffd0 	bl	80245c8 <_init>
 8023628:	1b64      	subs	r4, r4, r5
 802362a:	10a4      	asrs	r4, r4, #2
 802362c:	2600      	movs	r6, #0
 802362e:	42a6      	cmp	r6, r4
 8023630:	d105      	bne.n	802363e <__libc_init_array+0x2e>
 8023632:	bd70      	pop	{r4, r5, r6, pc}
 8023634:	f855 3b04 	ldr.w	r3, [r5], #4
 8023638:	4798      	blx	r3
 802363a:	3601      	adds	r6, #1
 802363c:	e7ee      	b.n	802361c <__libc_init_array+0xc>
 802363e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023642:	4798      	blx	r3
 8023644:	3601      	adds	r6, #1
 8023646:	e7f2      	b.n	802362e <__libc_init_array+0x1e>
 8023648:	080264dc 	.word	0x080264dc
 802364c:	080264dc 	.word	0x080264dc
 8023650:	080264dc 	.word	0x080264dc
 8023654:	080264f0 	.word	0x080264f0

08023658 <__retarget_lock_init_recursive>:
 8023658:	4770      	bx	lr

0802365a <__retarget_lock_acquire_recursive>:
 802365a:	4770      	bx	lr

0802365c <__retarget_lock_release>:
 802365c:	4770      	bx	lr

0802365e <__retarget_lock_release_recursive>:
 802365e:	4770      	bx	lr

08023660 <malloc>:
 8023660:	4b02      	ldr	r3, [pc, #8]	; (802366c <malloc+0xc>)
 8023662:	4601      	mov	r1, r0
 8023664:	6818      	ldr	r0, [r3, #0]
 8023666:	f000 b88d 	b.w	8023784 <_malloc_r>
 802366a:	bf00      	nop
 802366c:	240000c4 	.word	0x240000c4

08023670 <free>:
 8023670:	4b02      	ldr	r3, [pc, #8]	; (802367c <free+0xc>)
 8023672:	4601      	mov	r1, r0
 8023674:	6818      	ldr	r0, [r3, #0]
 8023676:	f000 b819 	b.w	80236ac <_free_r>
 802367a:	bf00      	nop
 802367c:	240000c4 	.word	0x240000c4

08023680 <memcpy>:
 8023680:	440a      	add	r2, r1
 8023682:	4291      	cmp	r1, r2
 8023684:	f100 33ff 	add.w	r3, r0, #4294967295
 8023688:	d100      	bne.n	802368c <memcpy+0xc>
 802368a:	4770      	bx	lr
 802368c:	b510      	push	{r4, lr}
 802368e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023696:	4291      	cmp	r1, r2
 8023698:	d1f9      	bne.n	802368e <memcpy+0xe>
 802369a:	bd10      	pop	{r4, pc}

0802369c <memset>:
 802369c:	4402      	add	r2, r0
 802369e:	4603      	mov	r3, r0
 80236a0:	4293      	cmp	r3, r2
 80236a2:	d100      	bne.n	80236a6 <memset+0xa>
 80236a4:	4770      	bx	lr
 80236a6:	f803 1b01 	strb.w	r1, [r3], #1
 80236aa:	e7f9      	b.n	80236a0 <memset+0x4>

080236ac <_free_r>:
 80236ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80236ae:	2900      	cmp	r1, #0
 80236b0:	d044      	beq.n	802373c <_free_r+0x90>
 80236b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80236b6:	9001      	str	r0, [sp, #4]
 80236b8:	2b00      	cmp	r3, #0
 80236ba:	f1a1 0404 	sub.w	r4, r1, #4
 80236be:	bfb8      	it	lt
 80236c0:	18e4      	addlt	r4, r4, r3
 80236c2:	f000 ff41 	bl	8024548 <__malloc_lock>
 80236c6:	4a1e      	ldr	r2, [pc, #120]	; (8023740 <_free_r+0x94>)
 80236c8:	9801      	ldr	r0, [sp, #4]
 80236ca:	6813      	ldr	r3, [r2, #0]
 80236cc:	b933      	cbnz	r3, 80236dc <_free_r+0x30>
 80236ce:	6063      	str	r3, [r4, #4]
 80236d0:	6014      	str	r4, [r2, #0]
 80236d2:	b003      	add	sp, #12
 80236d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80236d8:	f000 bf3c 	b.w	8024554 <__malloc_unlock>
 80236dc:	42a3      	cmp	r3, r4
 80236de:	d908      	bls.n	80236f2 <_free_r+0x46>
 80236e0:	6825      	ldr	r5, [r4, #0]
 80236e2:	1961      	adds	r1, r4, r5
 80236e4:	428b      	cmp	r3, r1
 80236e6:	bf01      	itttt	eq
 80236e8:	6819      	ldreq	r1, [r3, #0]
 80236ea:	685b      	ldreq	r3, [r3, #4]
 80236ec:	1949      	addeq	r1, r1, r5
 80236ee:	6021      	streq	r1, [r4, #0]
 80236f0:	e7ed      	b.n	80236ce <_free_r+0x22>
 80236f2:	461a      	mov	r2, r3
 80236f4:	685b      	ldr	r3, [r3, #4]
 80236f6:	b10b      	cbz	r3, 80236fc <_free_r+0x50>
 80236f8:	42a3      	cmp	r3, r4
 80236fa:	d9fa      	bls.n	80236f2 <_free_r+0x46>
 80236fc:	6811      	ldr	r1, [r2, #0]
 80236fe:	1855      	adds	r5, r2, r1
 8023700:	42a5      	cmp	r5, r4
 8023702:	d10b      	bne.n	802371c <_free_r+0x70>
 8023704:	6824      	ldr	r4, [r4, #0]
 8023706:	4421      	add	r1, r4
 8023708:	1854      	adds	r4, r2, r1
 802370a:	42a3      	cmp	r3, r4
 802370c:	6011      	str	r1, [r2, #0]
 802370e:	d1e0      	bne.n	80236d2 <_free_r+0x26>
 8023710:	681c      	ldr	r4, [r3, #0]
 8023712:	685b      	ldr	r3, [r3, #4]
 8023714:	6053      	str	r3, [r2, #4]
 8023716:	4421      	add	r1, r4
 8023718:	6011      	str	r1, [r2, #0]
 802371a:	e7da      	b.n	80236d2 <_free_r+0x26>
 802371c:	d902      	bls.n	8023724 <_free_r+0x78>
 802371e:	230c      	movs	r3, #12
 8023720:	6003      	str	r3, [r0, #0]
 8023722:	e7d6      	b.n	80236d2 <_free_r+0x26>
 8023724:	6825      	ldr	r5, [r4, #0]
 8023726:	1961      	adds	r1, r4, r5
 8023728:	428b      	cmp	r3, r1
 802372a:	bf04      	itt	eq
 802372c:	6819      	ldreq	r1, [r3, #0]
 802372e:	685b      	ldreq	r3, [r3, #4]
 8023730:	6063      	str	r3, [r4, #4]
 8023732:	bf04      	itt	eq
 8023734:	1949      	addeq	r1, r1, r5
 8023736:	6021      	streq	r1, [r4, #0]
 8023738:	6054      	str	r4, [r2, #4]
 802373a:	e7ca      	b.n	80236d2 <_free_r+0x26>
 802373c:	b003      	add	sp, #12
 802373e:	bd30      	pop	{r4, r5, pc}
 8023740:	2400b034 	.word	0x2400b034

08023744 <sbrk_aligned>:
 8023744:	b570      	push	{r4, r5, r6, lr}
 8023746:	4e0e      	ldr	r6, [pc, #56]	; (8023780 <sbrk_aligned+0x3c>)
 8023748:	460c      	mov	r4, r1
 802374a:	6831      	ldr	r1, [r6, #0]
 802374c:	4605      	mov	r5, r0
 802374e:	b911      	cbnz	r1, 8023756 <sbrk_aligned+0x12>
 8023750:	f000 fbe4 	bl	8023f1c <_sbrk_r>
 8023754:	6030      	str	r0, [r6, #0]
 8023756:	4621      	mov	r1, r4
 8023758:	4628      	mov	r0, r5
 802375a:	f000 fbdf 	bl	8023f1c <_sbrk_r>
 802375e:	1c43      	adds	r3, r0, #1
 8023760:	d00a      	beq.n	8023778 <sbrk_aligned+0x34>
 8023762:	1cc4      	adds	r4, r0, #3
 8023764:	f024 0403 	bic.w	r4, r4, #3
 8023768:	42a0      	cmp	r0, r4
 802376a:	d007      	beq.n	802377c <sbrk_aligned+0x38>
 802376c:	1a21      	subs	r1, r4, r0
 802376e:	4628      	mov	r0, r5
 8023770:	f000 fbd4 	bl	8023f1c <_sbrk_r>
 8023774:	3001      	adds	r0, #1
 8023776:	d101      	bne.n	802377c <sbrk_aligned+0x38>
 8023778:	f04f 34ff 	mov.w	r4, #4294967295
 802377c:	4620      	mov	r0, r4
 802377e:	bd70      	pop	{r4, r5, r6, pc}
 8023780:	2400b038 	.word	0x2400b038

08023784 <_malloc_r>:
 8023784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023788:	1ccd      	adds	r5, r1, #3
 802378a:	f025 0503 	bic.w	r5, r5, #3
 802378e:	3508      	adds	r5, #8
 8023790:	2d0c      	cmp	r5, #12
 8023792:	bf38      	it	cc
 8023794:	250c      	movcc	r5, #12
 8023796:	2d00      	cmp	r5, #0
 8023798:	4607      	mov	r7, r0
 802379a:	db01      	blt.n	80237a0 <_malloc_r+0x1c>
 802379c:	42a9      	cmp	r1, r5
 802379e:	d905      	bls.n	80237ac <_malloc_r+0x28>
 80237a0:	230c      	movs	r3, #12
 80237a2:	603b      	str	r3, [r7, #0]
 80237a4:	2600      	movs	r6, #0
 80237a6:	4630      	mov	r0, r6
 80237a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80237ac:	4e2e      	ldr	r6, [pc, #184]	; (8023868 <_malloc_r+0xe4>)
 80237ae:	f000 fecb 	bl	8024548 <__malloc_lock>
 80237b2:	6833      	ldr	r3, [r6, #0]
 80237b4:	461c      	mov	r4, r3
 80237b6:	bb34      	cbnz	r4, 8023806 <_malloc_r+0x82>
 80237b8:	4629      	mov	r1, r5
 80237ba:	4638      	mov	r0, r7
 80237bc:	f7ff ffc2 	bl	8023744 <sbrk_aligned>
 80237c0:	1c43      	adds	r3, r0, #1
 80237c2:	4604      	mov	r4, r0
 80237c4:	d14d      	bne.n	8023862 <_malloc_r+0xde>
 80237c6:	6834      	ldr	r4, [r6, #0]
 80237c8:	4626      	mov	r6, r4
 80237ca:	2e00      	cmp	r6, #0
 80237cc:	d140      	bne.n	8023850 <_malloc_r+0xcc>
 80237ce:	6823      	ldr	r3, [r4, #0]
 80237d0:	4631      	mov	r1, r6
 80237d2:	4638      	mov	r0, r7
 80237d4:	eb04 0803 	add.w	r8, r4, r3
 80237d8:	f000 fba0 	bl	8023f1c <_sbrk_r>
 80237dc:	4580      	cmp	r8, r0
 80237de:	d13a      	bne.n	8023856 <_malloc_r+0xd2>
 80237e0:	6821      	ldr	r1, [r4, #0]
 80237e2:	3503      	adds	r5, #3
 80237e4:	1a6d      	subs	r5, r5, r1
 80237e6:	f025 0503 	bic.w	r5, r5, #3
 80237ea:	3508      	adds	r5, #8
 80237ec:	2d0c      	cmp	r5, #12
 80237ee:	bf38      	it	cc
 80237f0:	250c      	movcc	r5, #12
 80237f2:	4629      	mov	r1, r5
 80237f4:	4638      	mov	r0, r7
 80237f6:	f7ff ffa5 	bl	8023744 <sbrk_aligned>
 80237fa:	3001      	adds	r0, #1
 80237fc:	d02b      	beq.n	8023856 <_malloc_r+0xd2>
 80237fe:	6823      	ldr	r3, [r4, #0]
 8023800:	442b      	add	r3, r5
 8023802:	6023      	str	r3, [r4, #0]
 8023804:	e00e      	b.n	8023824 <_malloc_r+0xa0>
 8023806:	6822      	ldr	r2, [r4, #0]
 8023808:	1b52      	subs	r2, r2, r5
 802380a:	d41e      	bmi.n	802384a <_malloc_r+0xc6>
 802380c:	2a0b      	cmp	r2, #11
 802380e:	d916      	bls.n	802383e <_malloc_r+0xba>
 8023810:	1961      	adds	r1, r4, r5
 8023812:	42a3      	cmp	r3, r4
 8023814:	6025      	str	r5, [r4, #0]
 8023816:	bf18      	it	ne
 8023818:	6059      	strne	r1, [r3, #4]
 802381a:	6863      	ldr	r3, [r4, #4]
 802381c:	bf08      	it	eq
 802381e:	6031      	streq	r1, [r6, #0]
 8023820:	5162      	str	r2, [r4, r5]
 8023822:	604b      	str	r3, [r1, #4]
 8023824:	4638      	mov	r0, r7
 8023826:	f104 060b 	add.w	r6, r4, #11
 802382a:	f000 fe93 	bl	8024554 <__malloc_unlock>
 802382e:	f026 0607 	bic.w	r6, r6, #7
 8023832:	1d23      	adds	r3, r4, #4
 8023834:	1af2      	subs	r2, r6, r3
 8023836:	d0b6      	beq.n	80237a6 <_malloc_r+0x22>
 8023838:	1b9b      	subs	r3, r3, r6
 802383a:	50a3      	str	r3, [r4, r2]
 802383c:	e7b3      	b.n	80237a6 <_malloc_r+0x22>
 802383e:	6862      	ldr	r2, [r4, #4]
 8023840:	42a3      	cmp	r3, r4
 8023842:	bf0c      	ite	eq
 8023844:	6032      	streq	r2, [r6, #0]
 8023846:	605a      	strne	r2, [r3, #4]
 8023848:	e7ec      	b.n	8023824 <_malloc_r+0xa0>
 802384a:	4623      	mov	r3, r4
 802384c:	6864      	ldr	r4, [r4, #4]
 802384e:	e7b2      	b.n	80237b6 <_malloc_r+0x32>
 8023850:	4634      	mov	r4, r6
 8023852:	6876      	ldr	r6, [r6, #4]
 8023854:	e7b9      	b.n	80237ca <_malloc_r+0x46>
 8023856:	230c      	movs	r3, #12
 8023858:	603b      	str	r3, [r7, #0]
 802385a:	4638      	mov	r0, r7
 802385c:	f000 fe7a 	bl	8024554 <__malloc_unlock>
 8023860:	e7a1      	b.n	80237a6 <_malloc_r+0x22>
 8023862:	6025      	str	r5, [r4, #0]
 8023864:	e7de      	b.n	8023824 <_malloc_r+0xa0>
 8023866:	bf00      	nop
 8023868:	2400b034 	.word	0x2400b034

0802386c <__sfputc_r>:
 802386c:	6893      	ldr	r3, [r2, #8]
 802386e:	3b01      	subs	r3, #1
 8023870:	2b00      	cmp	r3, #0
 8023872:	b410      	push	{r4}
 8023874:	6093      	str	r3, [r2, #8]
 8023876:	da08      	bge.n	802388a <__sfputc_r+0x1e>
 8023878:	6994      	ldr	r4, [r2, #24]
 802387a:	42a3      	cmp	r3, r4
 802387c:	db01      	blt.n	8023882 <__sfputc_r+0x16>
 802387e:	290a      	cmp	r1, #10
 8023880:	d103      	bne.n	802388a <__sfputc_r+0x1e>
 8023882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023886:	f000 bbe1 	b.w	802404c <__swbuf_r>
 802388a:	6813      	ldr	r3, [r2, #0]
 802388c:	1c58      	adds	r0, r3, #1
 802388e:	6010      	str	r0, [r2, #0]
 8023890:	7019      	strb	r1, [r3, #0]
 8023892:	4608      	mov	r0, r1
 8023894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023898:	4770      	bx	lr

0802389a <__sfputs_r>:
 802389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802389c:	4606      	mov	r6, r0
 802389e:	460f      	mov	r7, r1
 80238a0:	4614      	mov	r4, r2
 80238a2:	18d5      	adds	r5, r2, r3
 80238a4:	42ac      	cmp	r4, r5
 80238a6:	d101      	bne.n	80238ac <__sfputs_r+0x12>
 80238a8:	2000      	movs	r0, #0
 80238aa:	e007      	b.n	80238bc <__sfputs_r+0x22>
 80238ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238b0:	463a      	mov	r2, r7
 80238b2:	4630      	mov	r0, r6
 80238b4:	f7ff ffda 	bl	802386c <__sfputc_r>
 80238b8:	1c43      	adds	r3, r0, #1
 80238ba:	d1f3      	bne.n	80238a4 <__sfputs_r+0xa>
 80238bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080238c0 <_vfiprintf_r>:
 80238c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238c4:	460d      	mov	r5, r1
 80238c6:	b09d      	sub	sp, #116	; 0x74
 80238c8:	4614      	mov	r4, r2
 80238ca:	4698      	mov	r8, r3
 80238cc:	4606      	mov	r6, r0
 80238ce:	b118      	cbz	r0, 80238d8 <_vfiprintf_r+0x18>
 80238d0:	6983      	ldr	r3, [r0, #24]
 80238d2:	b90b      	cbnz	r3, 80238d8 <_vfiprintf_r+0x18>
 80238d4:	f7ff fdec 	bl	80234b0 <__sinit>
 80238d8:	4b89      	ldr	r3, [pc, #548]	; (8023b00 <_vfiprintf_r+0x240>)
 80238da:	429d      	cmp	r5, r3
 80238dc:	d11b      	bne.n	8023916 <_vfiprintf_r+0x56>
 80238de:	6875      	ldr	r5, [r6, #4]
 80238e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80238e2:	07d9      	lsls	r1, r3, #31
 80238e4:	d405      	bmi.n	80238f2 <_vfiprintf_r+0x32>
 80238e6:	89ab      	ldrh	r3, [r5, #12]
 80238e8:	059a      	lsls	r2, r3, #22
 80238ea:	d402      	bmi.n	80238f2 <_vfiprintf_r+0x32>
 80238ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80238ee:	f7ff feb4 	bl	802365a <__retarget_lock_acquire_recursive>
 80238f2:	89ab      	ldrh	r3, [r5, #12]
 80238f4:	071b      	lsls	r3, r3, #28
 80238f6:	d501      	bpl.n	80238fc <_vfiprintf_r+0x3c>
 80238f8:	692b      	ldr	r3, [r5, #16]
 80238fa:	b9eb      	cbnz	r3, 8023938 <_vfiprintf_r+0x78>
 80238fc:	4629      	mov	r1, r5
 80238fe:	4630      	mov	r0, r6
 8023900:	f000 fc08 	bl	8024114 <__swsetup_r>
 8023904:	b1c0      	cbz	r0, 8023938 <_vfiprintf_r+0x78>
 8023906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023908:	07dc      	lsls	r4, r3, #31
 802390a:	d50e      	bpl.n	802392a <_vfiprintf_r+0x6a>
 802390c:	f04f 30ff 	mov.w	r0, #4294967295
 8023910:	b01d      	add	sp, #116	; 0x74
 8023912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023916:	4b7b      	ldr	r3, [pc, #492]	; (8023b04 <_vfiprintf_r+0x244>)
 8023918:	429d      	cmp	r5, r3
 802391a:	d101      	bne.n	8023920 <_vfiprintf_r+0x60>
 802391c:	68b5      	ldr	r5, [r6, #8]
 802391e:	e7df      	b.n	80238e0 <_vfiprintf_r+0x20>
 8023920:	4b79      	ldr	r3, [pc, #484]	; (8023b08 <_vfiprintf_r+0x248>)
 8023922:	429d      	cmp	r5, r3
 8023924:	bf08      	it	eq
 8023926:	68f5      	ldreq	r5, [r6, #12]
 8023928:	e7da      	b.n	80238e0 <_vfiprintf_r+0x20>
 802392a:	89ab      	ldrh	r3, [r5, #12]
 802392c:	0598      	lsls	r0, r3, #22
 802392e:	d4ed      	bmi.n	802390c <_vfiprintf_r+0x4c>
 8023930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023932:	f7ff fe94 	bl	802365e <__retarget_lock_release_recursive>
 8023936:	e7e9      	b.n	802390c <_vfiprintf_r+0x4c>
 8023938:	2300      	movs	r3, #0
 802393a:	9309      	str	r3, [sp, #36]	; 0x24
 802393c:	2320      	movs	r3, #32
 802393e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023942:	f8cd 800c 	str.w	r8, [sp, #12]
 8023946:	2330      	movs	r3, #48	; 0x30
 8023948:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023b0c <_vfiprintf_r+0x24c>
 802394c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023950:	f04f 0901 	mov.w	r9, #1
 8023954:	4623      	mov	r3, r4
 8023956:	469a      	mov	sl, r3
 8023958:	f813 2b01 	ldrb.w	r2, [r3], #1
 802395c:	b10a      	cbz	r2, 8023962 <_vfiprintf_r+0xa2>
 802395e:	2a25      	cmp	r2, #37	; 0x25
 8023960:	d1f9      	bne.n	8023956 <_vfiprintf_r+0x96>
 8023962:	ebba 0b04 	subs.w	fp, sl, r4
 8023966:	d00b      	beq.n	8023980 <_vfiprintf_r+0xc0>
 8023968:	465b      	mov	r3, fp
 802396a:	4622      	mov	r2, r4
 802396c:	4629      	mov	r1, r5
 802396e:	4630      	mov	r0, r6
 8023970:	f7ff ff93 	bl	802389a <__sfputs_r>
 8023974:	3001      	adds	r0, #1
 8023976:	f000 80aa 	beq.w	8023ace <_vfiprintf_r+0x20e>
 802397a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802397c:	445a      	add	r2, fp
 802397e:	9209      	str	r2, [sp, #36]	; 0x24
 8023980:	f89a 3000 	ldrb.w	r3, [sl]
 8023984:	2b00      	cmp	r3, #0
 8023986:	f000 80a2 	beq.w	8023ace <_vfiprintf_r+0x20e>
 802398a:	2300      	movs	r3, #0
 802398c:	f04f 32ff 	mov.w	r2, #4294967295
 8023990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023994:	f10a 0a01 	add.w	sl, sl, #1
 8023998:	9304      	str	r3, [sp, #16]
 802399a:	9307      	str	r3, [sp, #28]
 802399c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80239a0:	931a      	str	r3, [sp, #104]	; 0x68
 80239a2:	4654      	mov	r4, sl
 80239a4:	2205      	movs	r2, #5
 80239a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239aa:	4858      	ldr	r0, [pc, #352]	; (8023b0c <_vfiprintf_r+0x24c>)
 80239ac:	f7dc fc98 	bl	80002e0 <memchr>
 80239b0:	9a04      	ldr	r2, [sp, #16]
 80239b2:	b9d8      	cbnz	r0, 80239ec <_vfiprintf_r+0x12c>
 80239b4:	06d1      	lsls	r1, r2, #27
 80239b6:	bf44      	itt	mi
 80239b8:	2320      	movmi	r3, #32
 80239ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239be:	0713      	lsls	r3, r2, #28
 80239c0:	bf44      	itt	mi
 80239c2:	232b      	movmi	r3, #43	; 0x2b
 80239c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80239c8:	f89a 3000 	ldrb.w	r3, [sl]
 80239cc:	2b2a      	cmp	r3, #42	; 0x2a
 80239ce:	d015      	beq.n	80239fc <_vfiprintf_r+0x13c>
 80239d0:	9a07      	ldr	r2, [sp, #28]
 80239d2:	4654      	mov	r4, sl
 80239d4:	2000      	movs	r0, #0
 80239d6:	f04f 0c0a 	mov.w	ip, #10
 80239da:	4621      	mov	r1, r4
 80239dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80239e0:	3b30      	subs	r3, #48	; 0x30
 80239e2:	2b09      	cmp	r3, #9
 80239e4:	d94e      	bls.n	8023a84 <_vfiprintf_r+0x1c4>
 80239e6:	b1b0      	cbz	r0, 8023a16 <_vfiprintf_r+0x156>
 80239e8:	9207      	str	r2, [sp, #28]
 80239ea:	e014      	b.n	8023a16 <_vfiprintf_r+0x156>
 80239ec:	eba0 0308 	sub.w	r3, r0, r8
 80239f0:	fa09 f303 	lsl.w	r3, r9, r3
 80239f4:	4313      	orrs	r3, r2
 80239f6:	9304      	str	r3, [sp, #16]
 80239f8:	46a2      	mov	sl, r4
 80239fa:	e7d2      	b.n	80239a2 <_vfiprintf_r+0xe2>
 80239fc:	9b03      	ldr	r3, [sp, #12]
 80239fe:	1d19      	adds	r1, r3, #4
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	9103      	str	r1, [sp, #12]
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	bfbb      	ittet	lt
 8023a08:	425b      	neglt	r3, r3
 8023a0a:	f042 0202 	orrlt.w	r2, r2, #2
 8023a0e:	9307      	strge	r3, [sp, #28]
 8023a10:	9307      	strlt	r3, [sp, #28]
 8023a12:	bfb8      	it	lt
 8023a14:	9204      	strlt	r2, [sp, #16]
 8023a16:	7823      	ldrb	r3, [r4, #0]
 8023a18:	2b2e      	cmp	r3, #46	; 0x2e
 8023a1a:	d10c      	bne.n	8023a36 <_vfiprintf_r+0x176>
 8023a1c:	7863      	ldrb	r3, [r4, #1]
 8023a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8023a20:	d135      	bne.n	8023a8e <_vfiprintf_r+0x1ce>
 8023a22:	9b03      	ldr	r3, [sp, #12]
 8023a24:	1d1a      	adds	r2, r3, #4
 8023a26:	681b      	ldr	r3, [r3, #0]
 8023a28:	9203      	str	r2, [sp, #12]
 8023a2a:	2b00      	cmp	r3, #0
 8023a2c:	bfb8      	it	lt
 8023a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023a32:	3402      	adds	r4, #2
 8023a34:	9305      	str	r3, [sp, #20]
 8023a36:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023b1c <_vfiprintf_r+0x25c>
 8023a3a:	7821      	ldrb	r1, [r4, #0]
 8023a3c:	2203      	movs	r2, #3
 8023a3e:	4650      	mov	r0, sl
 8023a40:	f7dc fc4e 	bl	80002e0 <memchr>
 8023a44:	b140      	cbz	r0, 8023a58 <_vfiprintf_r+0x198>
 8023a46:	2340      	movs	r3, #64	; 0x40
 8023a48:	eba0 000a 	sub.w	r0, r0, sl
 8023a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8023a50:	9b04      	ldr	r3, [sp, #16]
 8023a52:	4303      	orrs	r3, r0
 8023a54:	3401      	adds	r4, #1
 8023a56:	9304      	str	r3, [sp, #16]
 8023a58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023a5c:	482c      	ldr	r0, [pc, #176]	; (8023b10 <_vfiprintf_r+0x250>)
 8023a5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023a62:	2206      	movs	r2, #6
 8023a64:	f7dc fc3c 	bl	80002e0 <memchr>
 8023a68:	2800      	cmp	r0, #0
 8023a6a:	d03f      	beq.n	8023aec <_vfiprintf_r+0x22c>
 8023a6c:	4b29      	ldr	r3, [pc, #164]	; (8023b14 <_vfiprintf_r+0x254>)
 8023a6e:	bb1b      	cbnz	r3, 8023ab8 <_vfiprintf_r+0x1f8>
 8023a70:	9b03      	ldr	r3, [sp, #12]
 8023a72:	3307      	adds	r3, #7
 8023a74:	f023 0307 	bic.w	r3, r3, #7
 8023a78:	3308      	adds	r3, #8
 8023a7a:	9303      	str	r3, [sp, #12]
 8023a7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a7e:	443b      	add	r3, r7
 8023a80:	9309      	str	r3, [sp, #36]	; 0x24
 8023a82:	e767      	b.n	8023954 <_vfiprintf_r+0x94>
 8023a84:	fb0c 3202 	mla	r2, ip, r2, r3
 8023a88:	460c      	mov	r4, r1
 8023a8a:	2001      	movs	r0, #1
 8023a8c:	e7a5      	b.n	80239da <_vfiprintf_r+0x11a>
 8023a8e:	2300      	movs	r3, #0
 8023a90:	3401      	adds	r4, #1
 8023a92:	9305      	str	r3, [sp, #20]
 8023a94:	4619      	mov	r1, r3
 8023a96:	f04f 0c0a 	mov.w	ip, #10
 8023a9a:	4620      	mov	r0, r4
 8023a9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023aa0:	3a30      	subs	r2, #48	; 0x30
 8023aa2:	2a09      	cmp	r2, #9
 8023aa4:	d903      	bls.n	8023aae <_vfiprintf_r+0x1ee>
 8023aa6:	2b00      	cmp	r3, #0
 8023aa8:	d0c5      	beq.n	8023a36 <_vfiprintf_r+0x176>
 8023aaa:	9105      	str	r1, [sp, #20]
 8023aac:	e7c3      	b.n	8023a36 <_vfiprintf_r+0x176>
 8023aae:	fb0c 2101 	mla	r1, ip, r1, r2
 8023ab2:	4604      	mov	r4, r0
 8023ab4:	2301      	movs	r3, #1
 8023ab6:	e7f0      	b.n	8023a9a <_vfiprintf_r+0x1da>
 8023ab8:	ab03      	add	r3, sp, #12
 8023aba:	9300      	str	r3, [sp, #0]
 8023abc:	462a      	mov	r2, r5
 8023abe:	4b16      	ldr	r3, [pc, #88]	; (8023b18 <_vfiprintf_r+0x258>)
 8023ac0:	a904      	add	r1, sp, #16
 8023ac2:	4630      	mov	r0, r6
 8023ac4:	f3af 8000 	nop.w
 8023ac8:	4607      	mov	r7, r0
 8023aca:	1c78      	adds	r0, r7, #1
 8023acc:	d1d6      	bne.n	8023a7c <_vfiprintf_r+0x1bc>
 8023ace:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023ad0:	07d9      	lsls	r1, r3, #31
 8023ad2:	d405      	bmi.n	8023ae0 <_vfiprintf_r+0x220>
 8023ad4:	89ab      	ldrh	r3, [r5, #12]
 8023ad6:	059a      	lsls	r2, r3, #22
 8023ad8:	d402      	bmi.n	8023ae0 <_vfiprintf_r+0x220>
 8023ada:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023adc:	f7ff fdbf 	bl	802365e <__retarget_lock_release_recursive>
 8023ae0:	89ab      	ldrh	r3, [r5, #12]
 8023ae2:	065b      	lsls	r3, r3, #25
 8023ae4:	f53f af12 	bmi.w	802390c <_vfiprintf_r+0x4c>
 8023ae8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023aea:	e711      	b.n	8023910 <_vfiprintf_r+0x50>
 8023aec:	ab03      	add	r3, sp, #12
 8023aee:	9300      	str	r3, [sp, #0]
 8023af0:	462a      	mov	r2, r5
 8023af2:	4b09      	ldr	r3, [pc, #36]	; (8023b18 <_vfiprintf_r+0x258>)
 8023af4:	a904      	add	r1, sp, #16
 8023af6:	4630      	mov	r0, r6
 8023af8:	f000 f880 	bl	8023bfc <_printf_i>
 8023afc:	e7e4      	b.n	8023ac8 <_vfiprintf_r+0x208>
 8023afe:	bf00      	nop
 8023b00:	08026448 	.word	0x08026448
 8023b04:	08026468 	.word	0x08026468
 8023b08:	08026428 	.word	0x08026428
 8023b0c:	0802648c 	.word	0x0802648c
 8023b10:	08026496 	.word	0x08026496
 8023b14:	00000000 	.word	0x00000000
 8023b18:	0802389b 	.word	0x0802389b
 8023b1c:	08026492 	.word	0x08026492

08023b20 <_printf_common>:
 8023b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b24:	4616      	mov	r6, r2
 8023b26:	4699      	mov	r9, r3
 8023b28:	688a      	ldr	r2, [r1, #8]
 8023b2a:	690b      	ldr	r3, [r1, #16]
 8023b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023b30:	4293      	cmp	r3, r2
 8023b32:	bfb8      	it	lt
 8023b34:	4613      	movlt	r3, r2
 8023b36:	6033      	str	r3, [r6, #0]
 8023b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8023b3c:	4607      	mov	r7, r0
 8023b3e:	460c      	mov	r4, r1
 8023b40:	b10a      	cbz	r2, 8023b46 <_printf_common+0x26>
 8023b42:	3301      	adds	r3, #1
 8023b44:	6033      	str	r3, [r6, #0]
 8023b46:	6823      	ldr	r3, [r4, #0]
 8023b48:	0699      	lsls	r1, r3, #26
 8023b4a:	bf42      	ittt	mi
 8023b4c:	6833      	ldrmi	r3, [r6, #0]
 8023b4e:	3302      	addmi	r3, #2
 8023b50:	6033      	strmi	r3, [r6, #0]
 8023b52:	6825      	ldr	r5, [r4, #0]
 8023b54:	f015 0506 	ands.w	r5, r5, #6
 8023b58:	d106      	bne.n	8023b68 <_printf_common+0x48>
 8023b5a:	f104 0a19 	add.w	sl, r4, #25
 8023b5e:	68e3      	ldr	r3, [r4, #12]
 8023b60:	6832      	ldr	r2, [r6, #0]
 8023b62:	1a9b      	subs	r3, r3, r2
 8023b64:	42ab      	cmp	r3, r5
 8023b66:	dc26      	bgt.n	8023bb6 <_printf_common+0x96>
 8023b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8023b6c:	1e13      	subs	r3, r2, #0
 8023b6e:	6822      	ldr	r2, [r4, #0]
 8023b70:	bf18      	it	ne
 8023b72:	2301      	movne	r3, #1
 8023b74:	0692      	lsls	r2, r2, #26
 8023b76:	d42b      	bmi.n	8023bd0 <_printf_common+0xb0>
 8023b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8023b7c:	4649      	mov	r1, r9
 8023b7e:	4638      	mov	r0, r7
 8023b80:	47c0      	blx	r8
 8023b82:	3001      	adds	r0, #1
 8023b84:	d01e      	beq.n	8023bc4 <_printf_common+0xa4>
 8023b86:	6823      	ldr	r3, [r4, #0]
 8023b88:	68e5      	ldr	r5, [r4, #12]
 8023b8a:	6832      	ldr	r2, [r6, #0]
 8023b8c:	f003 0306 	and.w	r3, r3, #6
 8023b90:	2b04      	cmp	r3, #4
 8023b92:	bf08      	it	eq
 8023b94:	1aad      	subeq	r5, r5, r2
 8023b96:	68a3      	ldr	r3, [r4, #8]
 8023b98:	6922      	ldr	r2, [r4, #16]
 8023b9a:	bf0c      	ite	eq
 8023b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023ba0:	2500      	movne	r5, #0
 8023ba2:	4293      	cmp	r3, r2
 8023ba4:	bfc4      	itt	gt
 8023ba6:	1a9b      	subgt	r3, r3, r2
 8023ba8:	18ed      	addgt	r5, r5, r3
 8023baa:	2600      	movs	r6, #0
 8023bac:	341a      	adds	r4, #26
 8023bae:	42b5      	cmp	r5, r6
 8023bb0:	d11a      	bne.n	8023be8 <_printf_common+0xc8>
 8023bb2:	2000      	movs	r0, #0
 8023bb4:	e008      	b.n	8023bc8 <_printf_common+0xa8>
 8023bb6:	2301      	movs	r3, #1
 8023bb8:	4652      	mov	r2, sl
 8023bba:	4649      	mov	r1, r9
 8023bbc:	4638      	mov	r0, r7
 8023bbe:	47c0      	blx	r8
 8023bc0:	3001      	adds	r0, #1
 8023bc2:	d103      	bne.n	8023bcc <_printf_common+0xac>
 8023bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8023bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023bcc:	3501      	adds	r5, #1
 8023bce:	e7c6      	b.n	8023b5e <_printf_common+0x3e>
 8023bd0:	18e1      	adds	r1, r4, r3
 8023bd2:	1c5a      	adds	r2, r3, #1
 8023bd4:	2030      	movs	r0, #48	; 0x30
 8023bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023bda:	4422      	add	r2, r4
 8023bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8023be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023be4:	3302      	adds	r3, #2
 8023be6:	e7c7      	b.n	8023b78 <_printf_common+0x58>
 8023be8:	2301      	movs	r3, #1
 8023bea:	4622      	mov	r2, r4
 8023bec:	4649      	mov	r1, r9
 8023bee:	4638      	mov	r0, r7
 8023bf0:	47c0      	blx	r8
 8023bf2:	3001      	adds	r0, #1
 8023bf4:	d0e6      	beq.n	8023bc4 <_printf_common+0xa4>
 8023bf6:	3601      	adds	r6, #1
 8023bf8:	e7d9      	b.n	8023bae <_printf_common+0x8e>
	...

08023bfc <_printf_i>:
 8023bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023c00:	7e0f      	ldrb	r7, [r1, #24]
 8023c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023c04:	2f78      	cmp	r7, #120	; 0x78
 8023c06:	4691      	mov	r9, r2
 8023c08:	4680      	mov	r8, r0
 8023c0a:	460c      	mov	r4, r1
 8023c0c:	469a      	mov	sl, r3
 8023c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8023c12:	d807      	bhi.n	8023c24 <_printf_i+0x28>
 8023c14:	2f62      	cmp	r7, #98	; 0x62
 8023c16:	d80a      	bhi.n	8023c2e <_printf_i+0x32>
 8023c18:	2f00      	cmp	r7, #0
 8023c1a:	f000 80d8 	beq.w	8023dce <_printf_i+0x1d2>
 8023c1e:	2f58      	cmp	r7, #88	; 0x58
 8023c20:	f000 80a3 	beq.w	8023d6a <_printf_i+0x16e>
 8023c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023c2c:	e03a      	b.n	8023ca4 <_printf_i+0xa8>
 8023c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023c32:	2b15      	cmp	r3, #21
 8023c34:	d8f6      	bhi.n	8023c24 <_printf_i+0x28>
 8023c36:	a101      	add	r1, pc, #4	; (adr r1, 8023c3c <_printf_i+0x40>)
 8023c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023c3c:	08023c95 	.word	0x08023c95
 8023c40:	08023ca9 	.word	0x08023ca9
 8023c44:	08023c25 	.word	0x08023c25
 8023c48:	08023c25 	.word	0x08023c25
 8023c4c:	08023c25 	.word	0x08023c25
 8023c50:	08023c25 	.word	0x08023c25
 8023c54:	08023ca9 	.word	0x08023ca9
 8023c58:	08023c25 	.word	0x08023c25
 8023c5c:	08023c25 	.word	0x08023c25
 8023c60:	08023c25 	.word	0x08023c25
 8023c64:	08023c25 	.word	0x08023c25
 8023c68:	08023db5 	.word	0x08023db5
 8023c6c:	08023cd9 	.word	0x08023cd9
 8023c70:	08023d97 	.word	0x08023d97
 8023c74:	08023c25 	.word	0x08023c25
 8023c78:	08023c25 	.word	0x08023c25
 8023c7c:	08023dd7 	.word	0x08023dd7
 8023c80:	08023c25 	.word	0x08023c25
 8023c84:	08023cd9 	.word	0x08023cd9
 8023c88:	08023c25 	.word	0x08023c25
 8023c8c:	08023c25 	.word	0x08023c25
 8023c90:	08023d9f 	.word	0x08023d9f
 8023c94:	682b      	ldr	r3, [r5, #0]
 8023c96:	1d1a      	adds	r2, r3, #4
 8023c98:	681b      	ldr	r3, [r3, #0]
 8023c9a:	602a      	str	r2, [r5, #0]
 8023c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023ca4:	2301      	movs	r3, #1
 8023ca6:	e0a3      	b.n	8023df0 <_printf_i+0x1f4>
 8023ca8:	6820      	ldr	r0, [r4, #0]
 8023caa:	6829      	ldr	r1, [r5, #0]
 8023cac:	0606      	lsls	r6, r0, #24
 8023cae:	f101 0304 	add.w	r3, r1, #4
 8023cb2:	d50a      	bpl.n	8023cca <_printf_i+0xce>
 8023cb4:	680e      	ldr	r6, [r1, #0]
 8023cb6:	602b      	str	r3, [r5, #0]
 8023cb8:	2e00      	cmp	r6, #0
 8023cba:	da03      	bge.n	8023cc4 <_printf_i+0xc8>
 8023cbc:	232d      	movs	r3, #45	; 0x2d
 8023cbe:	4276      	negs	r6, r6
 8023cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023cc4:	485e      	ldr	r0, [pc, #376]	; (8023e40 <_printf_i+0x244>)
 8023cc6:	230a      	movs	r3, #10
 8023cc8:	e019      	b.n	8023cfe <_printf_i+0x102>
 8023cca:	680e      	ldr	r6, [r1, #0]
 8023ccc:	602b      	str	r3, [r5, #0]
 8023cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8023cd2:	bf18      	it	ne
 8023cd4:	b236      	sxthne	r6, r6
 8023cd6:	e7ef      	b.n	8023cb8 <_printf_i+0xbc>
 8023cd8:	682b      	ldr	r3, [r5, #0]
 8023cda:	6820      	ldr	r0, [r4, #0]
 8023cdc:	1d19      	adds	r1, r3, #4
 8023cde:	6029      	str	r1, [r5, #0]
 8023ce0:	0601      	lsls	r1, r0, #24
 8023ce2:	d501      	bpl.n	8023ce8 <_printf_i+0xec>
 8023ce4:	681e      	ldr	r6, [r3, #0]
 8023ce6:	e002      	b.n	8023cee <_printf_i+0xf2>
 8023ce8:	0646      	lsls	r6, r0, #25
 8023cea:	d5fb      	bpl.n	8023ce4 <_printf_i+0xe8>
 8023cec:	881e      	ldrh	r6, [r3, #0]
 8023cee:	4854      	ldr	r0, [pc, #336]	; (8023e40 <_printf_i+0x244>)
 8023cf0:	2f6f      	cmp	r7, #111	; 0x6f
 8023cf2:	bf0c      	ite	eq
 8023cf4:	2308      	moveq	r3, #8
 8023cf6:	230a      	movne	r3, #10
 8023cf8:	2100      	movs	r1, #0
 8023cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8023cfe:	6865      	ldr	r5, [r4, #4]
 8023d00:	60a5      	str	r5, [r4, #8]
 8023d02:	2d00      	cmp	r5, #0
 8023d04:	bfa2      	ittt	ge
 8023d06:	6821      	ldrge	r1, [r4, #0]
 8023d08:	f021 0104 	bicge.w	r1, r1, #4
 8023d0c:	6021      	strge	r1, [r4, #0]
 8023d0e:	b90e      	cbnz	r6, 8023d14 <_printf_i+0x118>
 8023d10:	2d00      	cmp	r5, #0
 8023d12:	d04d      	beq.n	8023db0 <_printf_i+0x1b4>
 8023d14:	4615      	mov	r5, r2
 8023d16:	fbb6 f1f3 	udiv	r1, r6, r3
 8023d1a:	fb03 6711 	mls	r7, r3, r1, r6
 8023d1e:	5dc7      	ldrb	r7, [r0, r7]
 8023d20:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023d24:	4637      	mov	r7, r6
 8023d26:	42bb      	cmp	r3, r7
 8023d28:	460e      	mov	r6, r1
 8023d2a:	d9f4      	bls.n	8023d16 <_printf_i+0x11a>
 8023d2c:	2b08      	cmp	r3, #8
 8023d2e:	d10b      	bne.n	8023d48 <_printf_i+0x14c>
 8023d30:	6823      	ldr	r3, [r4, #0]
 8023d32:	07de      	lsls	r6, r3, #31
 8023d34:	d508      	bpl.n	8023d48 <_printf_i+0x14c>
 8023d36:	6923      	ldr	r3, [r4, #16]
 8023d38:	6861      	ldr	r1, [r4, #4]
 8023d3a:	4299      	cmp	r1, r3
 8023d3c:	bfde      	ittt	le
 8023d3e:	2330      	movle	r3, #48	; 0x30
 8023d40:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023d44:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023d48:	1b52      	subs	r2, r2, r5
 8023d4a:	6122      	str	r2, [r4, #16]
 8023d4c:	f8cd a000 	str.w	sl, [sp]
 8023d50:	464b      	mov	r3, r9
 8023d52:	aa03      	add	r2, sp, #12
 8023d54:	4621      	mov	r1, r4
 8023d56:	4640      	mov	r0, r8
 8023d58:	f7ff fee2 	bl	8023b20 <_printf_common>
 8023d5c:	3001      	adds	r0, #1
 8023d5e:	d14c      	bne.n	8023dfa <_printf_i+0x1fe>
 8023d60:	f04f 30ff 	mov.w	r0, #4294967295
 8023d64:	b004      	add	sp, #16
 8023d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023d6a:	4835      	ldr	r0, [pc, #212]	; (8023e40 <_printf_i+0x244>)
 8023d6c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023d70:	6829      	ldr	r1, [r5, #0]
 8023d72:	6823      	ldr	r3, [r4, #0]
 8023d74:	f851 6b04 	ldr.w	r6, [r1], #4
 8023d78:	6029      	str	r1, [r5, #0]
 8023d7a:	061d      	lsls	r5, r3, #24
 8023d7c:	d514      	bpl.n	8023da8 <_printf_i+0x1ac>
 8023d7e:	07df      	lsls	r7, r3, #31
 8023d80:	bf44      	itt	mi
 8023d82:	f043 0320 	orrmi.w	r3, r3, #32
 8023d86:	6023      	strmi	r3, [r4, #0]
 8023d88:	b91e      	cbnz	r6, 8023d92 <_printf_i+0x196>
 8023d8a:	6823      	ldr	r3, [r4, #0]
 8023d8c:	f023 0320 	bic.w	r3, r3, #32
 8023d90:	6023      	str	r3, [r4, #0]
 8023d92:	2310      	movs	r3, #16
 8023d94:	e7b0      	b.n	8023cf8 <_printf_i+0xfc>
 8023d96:	6823      	ldr	r3, [r4, #0]
 8023d98:	f043 0320 	orr.w	r3, r3, #32
 8023d9c:	6023      	str	r3, [r4, #0]
 8023d9e:	2378      	movs	r3, #120	; 0x78
 8023da0:	4828      	ldr	r0, [pc, #160]	; (8023e44 <_printf_i+0x248>)
 8023da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023da6:	e7e3      	b.n	8023d70 <_printf_i+0x174>
 8023da8:	0659      	lsls	r1, r3, #25
 8023daa:	bf48      	it	mi
 8023dac:	b2b6      	uxthmi	r6, r6
 8023dae:	e7e6      	b.n	8023d7e <_printf_i+0x182>
 8023db0:	4615      	mov	r5, r2
 8023db2:	e7bb      	b.n	8023d2c <_printf_i+0x130>
 8023db4:	682b      	ldr	r3, [r5, #0]
 8023db6:	6826      	ldr	r6, [r4, #0]
 8023db8:	6961      	ldr	r1, [r4, #20]
 8023dba:	1d18      	adds	r0, r3, #4
 8023dbc:	6028      	str	r0, [r5, #0]
 8023dbe:	0635      	lsls	r5, r6, #24
 8023dc0:	681b      	ldr	r3, [r3, #0]
 8023dc2:	d501      	bpl.n	8023dc8 <_printf_i+0x1cc>
 8023dc4:	6019      	str	r1, [r3, #0]
 8023dc6:	e002      	b.n	8023dce <_printf_i+0x1d2>
 8023dc8:	0670      	lsls	r0, r6, #25
 8023dca:	d5fb      	bpl.n	8023dc4 <_printf_i+0x1c8>
 8023dcc:	8019      	strh	r1, [r3, #0]
 8023dce:	2300      	movs	r3, #0
 8023dd0:	6123      	str	r3, [r4, #16]
 8023dd2:	4615      	mov	r5, r2
 8023dd4:	e7ba      	b.n	8023d4c <_printf_i+0x150>
 8023dd6:	682b      	ldr	r3, [r5, #0]
 8023dd8:	1d1a      	adds	r2, r3, #4
 8023dda:	602a      	str	r2, [r5, #0]
 8023ddc:	681d      	ldr	r5, [r3, #0]
 8023dde:	6862      	ldr	r2, [r4, #4]
 8023de0:	2100      	movs	r1, #0
 8023de2:	4628      	mov	r0, r5
 8023de4:	f7dc fa7c 	bl	80002e0 <memchr>
 8023de8:	b108      	cbz	r0, 8023dee <_printf_i+0x1f2>
 8023dea:	1b40      	subs	r0, r0, r5
 8023dec:	6060      	str	r0, [r4, #4]
 8023dee:	6863      	ldr	r3, [r4, #4]
 8023df0:	6123      	str	r3, [r4, #16]
 8023df2:	2300      	movs	r3, #0
 8023df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023df8:	e7a8      	b.n	8023d4c <_printf_i+0x150>
 8023dfa:	6923      	ldr	r3, [r4, #16]
 8023dfc:	462a      	mov	r2, r5
 8023dfe:	4649      	mov	r1, r9
 8023e00:	4640      	mov	r0, r8
 8023e02:	47d0      	blx	sl
 8023e04:	3001      	adds	r0, #1
 8023e06:	d0ab      	beq.n	8023d60 <_printf_i+0x164>
 8023e08:	6823      	ldr	r3, [r4, #0]
 8023e0a:	079b      	lsls	r3, r3, #30
 8023e0c:	d413      	bmi.n	8023e36 <_printf_i+0x23a>
 8023e0e:	68e0      	ldr	r0, [r4, #12]
 8023e10:	9b03      	ldr	r3, [sp, #12]
 8023e12:	4298      	cmp	r0, r3
 8023e14:	bfb8      	it	lt
 8023e16:	4618      	movlt	r0, r3
 8023e18:	e7a4      	b.n	8023d64 <_printf_i+0x168>
 8023e1a:	2301      	movs	r3, #1
 8023e1c:	4632      	mov	r2, r6
 8023e1e:	4649      	mov	r1, r9
 8023e20:	4640      	mov	r0, r8
 8023e22:	47d0      	blx	sl
 8023e24:	3001      	adds	r0, #1
 8023e26:	d09b      	beq.n	8023d60 <_printf_i+0x164>
 8023e28:	3501      	adds	r5, #1
 8023e2a:	68e3      	ldr	r3, [r4, #12]
 8023e2c:	9903      	ldr	r1, [sp, #12]
 8023e2e:	1a5b      	subs	r3, r3, r1
 8023e30:	42ab      	cmp	r3, r5
 8023e32:	dcf2      	bgt.n	8023e1a <_printf_i+0x21e>
 8023e34:	e7eb      	b.n	8023e0e <_printf_i+0x212>
 8023e36:	2500      	movs	r5, #0
 8023e38:	f104 0619 	add.w	r6, r4, #25
 8023e3c:	e7f5      	b.n	8023e2a <_printf_i+0x22e>
 8023e3e:	bf00      	nop
 8023e40:	0802649d 	.word	0x0802649d
 8023e44:	080264ae 	.word	0x080264ae

08023e48 <cleanup_glue>:
 8023e48:	b538      	push	{r3, r4, r5, lr}
 8023e4a:	460c      	mov	r4, r1
 8023e4c:	6809      	ldr	r1, [r1, #0]
 8023e4e:	4605      	mov	r5, r0
 8023e50:	b109      	cbz	r1, 8023e56 <cleanup_glue+0xe>
 8023e52:	f7ff fff9 	bl	8023e48 <cleanup_glue>
 8023e56:	4621      	mov	r1, r4
 8023e58:	4628      	mov	r0, r5
 8023e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023e5e:	f7ff bc25 	b.w	80236ac <_free_r>
	...

08023e64 <_reclaim_reent>:
 8023e64:	4b2c      	ldr	r3, [pc, #176]	; (8023f18 <_reclaim_reent+0xb4>)
 8023e66:	681b      	ldr	r3, [r3, #0]
 8023e68:	4283      	cmp	r3, r0
 8023e6a:	b570      	push	{r4, r5, r6, lr}
 8023e6c:	4604      	mov	r4, r0
 8023e6e:	d051      	beq.n	8023f14 <_reclaim_reent+0xb0>
 8023e70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023e72:	b143      	cbz	r3, 8023e86 <_reclaim_reent+0x22>
 8023e74:	68db      	ldr	r3, [r3, #12]
 8023e76:	2b00      	cmp	r3, #0
 8023e78:	d14a      	bne.n	8023f10 <_reclaim_reent+0xac>
 8023e7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023e7c:	6819      	ldr	r1, [r3, #0]
 8023e7e:	b111      	cbz	r1, 8023e86 <_reclaim_reent+0x22>
 8023e80:	4620      	mov	r0, r4
 8023e82:	f7ff fc13 	bl	80236ac <_free_r>
 8023e86:	6961      	ldr	r1, [r4, #20]
 8023e88:	b111      	cbz	r1, 8023e90 <_reclaim_reent+0x2c>
 8023e8a:	4620      	mov	r0, r4
 8023e8c:	f7ff fc0e 	bl	80236ac <_free_r>
 8023e90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8023e92:	b111      	cbz	r1, 8023e9a <_reclaim_reent+0x36>
 8023e94:	4620      	mov	r0, r4
 8023e96:	f7ff fc09 	bl	80236ac <_free_r>
 8023e9a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023e9c:	b111      	cbz	r1, 8023ea4 <_reclaim_reent+0x40>
 8023e9e:	4620      	mov	r0, r4
 8023ea0:	f7ff fc04 	bl	80236ac <_free_r>
 8023ea4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8023ea6:	b111      	cbz	r1, 8023eae <_reclaim_reent+0x4a>
 8023ea8:	4620      	mov	r0, r4
 8023eaa:	f7ff fbff 	bl	80236ac <_free_r>
 8023eae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8023eb0:	b111      	cbz	r1, 8023eb8 <_reclaim_reent+0x54>
 8023eb2:	4620      	mov	r0, r4
 8023eb4:	f7ff fbfa 	bl	80236ac <_free_r>
 8023eb8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8023eba:	b111      	cbz	r1, 8023ec2 <_reclaim_reent+0x5e>
 8023ebc:	4620      	mov	r0, r4
 8023ebe:	f7ff fbf5 	bl	80236ac <_free_r>
 8023ec2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8023ec4:	b111      	cbz	r1, 8023ecc <_reclaim_reent+0x68>
 8023ec6:	4620      	mov	r0, r4
 8023ec8:	f7ff fbf0 	bl	80236ac <_free_r>
 8023ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8023ece:	b111      	cbz	r1, 8023ed6 <_reclaim_reent+0x72>
 8023ed0:	4620      	mov	r0, r4
 8023ed2:	f7ff fbeb 	bl	80236ac <_free_r>
 8023ed6:	69a3      	ldr	r3, [r4, #24]
 8023ed8:	b1e3      	cbz	r3, 8023f14 <_reclaim_reent+0xb0>
 8023eda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8023edc:	4620      	mov	r0, r4
 8023ede:	4798      	blx	r3
 8023ee0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8023ee2:	b1b9      	cbz	r1, 8023f14 <_reclaim_reent+0xb0>
 8023ee4:	4620      	mov	r0, r4
 8023ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8023eea:	f7ff bfad 	b.w	8023e48 <cleanup_glue>
 8023eee:	5949      	ldr	r1, [r1, r5]
 8023ef0:	b941      	cbnz	r1, 8023f04 <_reclaim_reent+0xa0>
 8023ef2:	3504      	adds	r5, #4
 8023ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023ef6:	2d80      	cmp	r5, #128	; 0x80
 8023ef8:	68d9      	ldr	r1, [r3, #12]
 8023efa:	d1f8      	bne.n	8023eee <_reclaim_reent+0x8a>
 8023efc:	4620      	mov	r0, r4
 8023efe:	f7ff fbd5 	bl	80236ac <_free_r>
 8023f02:	e7ba      	b.n	8023e7a <_reclaim_reent+0x16>
 8023f04:	680e      	ldr	r6, [r1, #0]
 8023f06:	4620      	mov	r0, r4
 8023f08:	f7ff fbd0 	bl	80236ac <_free_r>
 8023f0c:	4631      	mov	r1, r6
 8023f0e:	e7ef      	b.n	8023ef0 <_reclaim_reent+0x8c>
 8023f10:	2500      	movs	r5, #0
 8023f12:	e7ef      	b.n	8023ef4 <_reclaim_reent+0x90>
 8023f14:	bd70      	pop	{r4, r5, r6, pc}
 8023f16:	bf00      	nop
 8023f18:	240000c4 	.word	0x240000c4

08023f1c <_sbrk_r>:
 8023f1c:	b538      	push	{r3, r4, r5, lr}
 8023f1e:	4d06      	ldr	r5, [pc, #24]	; (8023f38 <_sbrk_r+0x1c>)
 8023f20:	2300      	movs	r3, #0
 8023f22:	4604      	mov	r4, r0
 8023f24:	4608      	mov	r0, r1
 8023f26:	602b      	str	r3, [r5, #0]
 8023f28:	f7dd fb88 	bl	800163c <_sbrk>
 8023f2c:	1c43      	adds	r3, r0, #1
 8023f2e:	d102      	bne.n	8023f36 <_sbrk_r+0x1a>
 8023f30:	682b      	ldr	r3, [r5, #0]
 8023f32:	b103      	cbz	r3, 8023f36 <_sbrk_r+0x1a>
 8023f34:	6023      	str	r3, [r4, #0]
 8023f36:	bd38      	pop	{r3, r4, r5, pc}
 8023f38:	2400b144 	.word	0x2400b144

08023f3c <_raise_r>:
 8023f3c:	291f      	cmp	r1, #31
 8023f3e:	b538      	push	{r3, r4, r5, lr}
 8023f40:	4604      	mov	r4, r0
 8023f42:	460d      	mov	r5, r1
 8023f44:	d904      	bls.n	8023f50 <_raise_r+0x14>
 8023f46:	2316      	movs	r3, #22
 8023f48:	6003      	str	r3, [r0, #0]
 8023f4a:	f04f 30ff 	mov.w	r0, #4294967295
 8023f4e:	bd38      	pop	{r3, r4, r5, pc}
 8023f50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023f52:	b112      	cbz	r2, 8023f5a <_raise_r+0x1e>
 8023f54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023f58:	b94b      	cbnz	r3, 8023f6e <_raise_r+0x32>
 8023f5a:	4620      	mov	r0, r4
 8023f5c:	f000 f830 	bl	8023fc0 <_getpid_r>
 8023f60:	462a      	mov	r2, r5
 8023f62:	4601      	mov	r1, r0
 8023f64:	4620      	mov	r0, r4
 8023f66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023f6a:	f000 b817 	b.w	8023f9c <_kill_r>
 8023f6e:	2b01      	cmp	r3, #1
 8023f70:	d00a      	beq.n	8023f88 <_raise_r+0x4c>
 8023f72:	1c59      	adds	r1, r3, #1
 8023f74:	d103      	bne.n	8023f7e <_raise_r+0x42>
 8023f76:	2316      	movs	r3, #22
 8023f78:	6003      	str	r3, [r0, #0]
 8023f7a:	2001      	movs	r0, #1
 8023f7c:	e7e7      	b.n	8023f4e <_raise_r+0x12>
 8023f7e:	2400      	movs	r4, #0
 8023f80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023f84:	4628      	mov	r0, r5
 8023f86:	4798      	blx	r3
 8023f88:	2000      	movs	r0, #0
 8023f8a:	e7e0      	b.n	8023f4e <_raise_r+0x12>

08023f8c <raise>:
 8023f8c:	4b02      	ldr	r3, [pc, #8]	; (8023f98 <raise+0xc>)
 8023f8e:	4601      	mov	r1, r0
 8023f90:	6818      	ldr	r0, [r3, #0]
 8023f92:	f7ff bfd3 	b.w	8023f3c <_raise_r>
 8023f96:	bf00      	nop
 8023f98:	240000c4 	.word	0x240000c4

08023f9c <_kill_r>:
 8023f9c:	b538      	push	{r3, r4, r5, lr}
 8023f9e:	4d07      	ldr	r5, [pc, #28]	; (8023fbc <_kill_r+0x20>)
 8023fa0:	2300      	movs	r3, #0
 8023fa2:	4604      	mov	r4, r0
 8023fa4:	4608      	mov	r0, r1
 8023fa6:	4611      	mov	r1, r2
 8023fa8:	602b      	str	r3, [r5, #0]
 8023faa:	f7dd fabf 	bl	800152c <_kill>
 8023fae:	1c43      	adds	r3, r0, #1
 8023fb0:	d102      	bne.n	8023fb8 <_kill_r+0x1c>
 8023fb2:	682b      	ldr	r3, [r5, #0]
 8023fb4:	b103      	cbz	r3, 8023fb8 <_kill_r+0x1c>
 8023fb6:	6023      	str	r3, [r4, #0]
 8023fb8:	bd38      	pop	{r3, r4, r5, pc}
 8023fba:	bf00      	nop
 8023fbc:	2400b144 	.word	0x2400b144

08023fc0 <_getpid_r>:
 8023fc0:	f7dd baac 	b.w	800151c <_getpid>

08023fc4 <__sread>:
 8023fc4:	b510      	push	{r4, lr}
 8023fc6:	460c      	mov	r4, r1
 8023fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023fcc:	f000 fac8 	bl	8024560 <_read_r>
 8023fd0:	2800      	cmp	r0, #0
 8023fd2:	bfab      	itete	ge
 8023fd4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8023fd8:	181b      	addge	r3, r3, r0
 8023fda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023fde:	bfac      	ite	ge
 8023fe0:	6563      	strge	r3, [r4, #84]	; 0x54
 8023fe2:	81a3      	strhlt	r3, [r4, #12]
 8023fe4:	bd10      	pop	{r4, pc}

08023fe6 <__swrite>:
 8023fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023fea:	461f      	mov	r7, r3
 8023fec:	898b      	ldrh	r3, [r1, #12]
 8023fee:	05db      	lsls	r3, r3, #23
 8023ff0:	4605      	mov	r5, r0
 8023ff2:	460c      	mov	r4, r1
 8023ff4:	4616      	mov	r6, r2
 8023ff6:	d505      	bpl.n	8024004 <__swrite+0x1e>
 8023ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ffc:	2302      	movs	r3, #2
 8023ffe:	2200      	movs	r2, #0
 8024000:	f000 fa2a 	bl	8024458 <_lseek_r>
 8024004:	89a3      	ldrh	r3, [r4, #12]
 8024006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802400a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802400e:	81a3      	strh	r3, [r4, #12]
 8024010:	4632      	mov	r2, r6
 8024012:	463b      	mov	r3, r7
 8024014:	4628      	mov	r0, r5
 8024016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802401a:	f000 b869 	b.w	80240f0 <_write_r>

0802401e <__sseek>:
 802401e:	b510      	push	{r4, lr}
 8024020:	460c      	mov	r4, r1
 8024022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024026:	f000 fa17 	bl	8024458 <_lseek_r>
 802402a:	1c43      	adds	r3, r0, #1
 802402c:	89a3      	ldrh	r3, [r4, #12]
 802402e:	bf15      	itete	ne
 8024030:	6560      	strne	r0, [r4, #84]	; 0x54
 8024032:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024036:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802403a:	81a3      	strheq	r3, [r4, #12]
 802403c:	bf18      	it	ne
 802403e:	81a3      	strhne	r3, [r4, #12]
 8024040:	bd10      	pop	{r4, pc}

08024042 <__sclose>:
 8024042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024046:	f000 b935 	b.w	80242b4 <_close_r>
	...

0802404c <__swbuf_r>:
 802404c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802404e:	460e      	mov	r6, r1
 8024050:	4614      	mov	r4, r2
 8024052:	4605      	mov	r5, r0
 8024054:	b118      	cbz	r0, 802405e <__swbuf_r+0x12>
 8024056:	6983      	ldr	r3, [r0, #24]
 8024058:	b90b      	cbnz	r3, 802405e <__swbuf_r+0x12>
 802405a:	f7ff fa29 	bl	80234b0 <__sinit>
 802405e:	4b21      	ldr	r3, [pc, #132]	; (80240e4 <__swbuf_r+0x98>)
 8024060:	429c      	cmp	r4, r3
 8024062:	d12b      	bne.n	80240bc <__swbuf_r+0x70>
 8024064:	686c      	ldr	r4, [r5, #4]
 8024066:	69a3      	ldr	r3, [r4, #24]
 8024068:	60a3      	str	r3, [r4, #8]
 802406a:	89a3      	ldrh	r3, [r4, #12]
 802406c:	071a      	lsls	r2, r3, #28
 802406e:	d52f      	bpl.n	80240d0 <__swbuf_r+0x84>
 8024070:	6923      	ldr	r3, [r4, #16]
 8024072:	b36b      	cbz	r3, 80240d0 <__swbuf_r+0x84>
 8024074:	6923      	ldr	r3, [r4, #16]
 8024076:	6820      	ldr	r0, [r4, #0]
 8024078:	1ac0      	subs	r0, r0, r3
 802407a:	6963      	ldr	r3, [r4, #20]
 802407c:	b2f6      	uxtb	r6, r6
 802407e:	4283      	cmp	r3, r0
 8024080:	4637      	mov	r7, r6
 8024082:	dc04      	bgt.n	802408e <__swbuf_r+0x42>
 8024084:	4621      	mov	r1, r4
 8024086:	4628      	mov	r0, r5
 8024088:	f000 f9aa 	bl	80243e0 <_fflush_r>
 802408c:	bb30      	cbnz	r0, 80240dc <__swbuf_r+0x90>
 802408e:	68a3      	ldr	r3, [r4, #8]
 8024090:	3b01      	subs	r3, #1
 8024092:	60a3      	str	r3, [r4, #8]
 8024094:	6823      	ldr	r3, [r4, #0]
 8024096:	1c5a      	adds	r2, r3, #1
 8024098:	6022      	str	r2, [r4, #0]
 802409a:	701e      	strb	r6, [r3, #0]
 802409c:	6963      	ldr	r3, [r4, #20]
 802409e:	3001      	adds	r0, #1
 80240a0:	4283      	cmp	r3, r0
 80240a2:	d004      	beq.n	80240ae <__swbuf_r+0x62>
 80240a4:	89a3      	ldrh	r3, [r4, #12]
 80240a6:	07db      	lsls	r3, r3, #31
 80240a8:	d506      	bpl.n	80240b8 <__swbuf_r+0x6c>
 80240aa:	2e0a      	cmp	r6, #10
 80240ac:	d104      	bne.n	80240b8 <__swbuf_r+0x6c>
 80240ae:	4621      	mov	r1, r4
 80240b0:	4628      	mov	r0, r5
 80240b2:	f000 f995 	bl	80243e0 <_fflush_r>
 80240b6:	b988      	cbnz	r0, 80240dc <__swbuf_r+0x90>
 80240b8:	4638      	mov	r0, r7
 80240ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80240bc:	4b0a      	ldr	r3, [pc, #40]	; (80240e8 <__swbuf_r+0x9c>)
 80240be:	429c      	cmp	r4, r3
 80240c0:	d101      	bne.n	80240c6 <__swbuf_r+0x7a>
 80240c2:	68ac      	ldr	r4, [r5, #8]
 80240c4:	e7cf      	b.n	8024066 <__swbuf_r+0x1a>
 80240c6:	4b09      	ldr	r3, [pc, #36]	; (80240ec <__swbuf_r+0xa0>)
 80240c8:	429c      	cmp	r4, r3
 80240ca:	bf08      	it	eq
 80240cc:	68ec      	ldreq	r4, [r5, #12]
 80240ce:	e7ca      	b.n	8024066 <__swbuf_r+0x1a>
 80240d0:	4621      	mov	r1, r4
 80240d2:	4628      	mov	r0, r5
 80240d4:	f000 f81e 	bl	8024114 <__swsetup_r>
 80240d8:	2800      	cmp	r0, #0
 80240da:	d0cb      	beq.n	8024074 <__swbuf_r+0x28>
 80240dc:	f04f 37ff 	mov.w	r7, #4294967295
 80240e0:	e7ea      	b.n	80240b8 <__swbuf_r+0x6c>
 80240e2:	bf00      	nop
 80240e4:	08026448 	.word	0x08026448
 80240e8:	08026468 	.word	0x08026468
 80240ec:	08026428 	.word	0x08026428

080240f0 <_write_r>:
 80240f0:	b538      	push	{r3, r4, r5, lr}
 80240f2:	4d07      	ldr	r5, [pc, #28]	; (8024110 <_write_r+0x20>)
 80240f4:	4604      	mov	r4, r0
 80240f6:	4608      	mov	r0, r1
 80240f8:	4611      	mov	r1, r2
 80240fa:	2200      	movs	r2, #0
 80240fc:	602a      	str	r2, [r5, #0]
 80240fe:	461a      	mov	r2, r3
 8024100:	f7dd fa4b 	bl	800159a <_write>
 8024104:	1c43      	adds	r3, r0, #1
 8024106:	d102      	bne.n	802410e <_write_r+0x1e>
 8024108:	682b      	ldr	r3, [r5, #0]
 802410a:	b103      	cbz	r3, 802410e <_write_r+0x1e>
 802410c:	6023      	str	r3, [r4, #0]
 802410e:	bd38      	pop	{r3, r4, r5, pc}
 8024110:	2400b144 	.word	0x2400b144

08024114 <__swsetup_r>:
 8024114:	4b32      	ldr	r3, [pc, #200]	; (80241e0 <__swsetup_r+0xcc>)
 8024116:	b570      	push	{r4, r5, r6, lr}
 8024118:	681d      	ldr	r5, [r3, #0]
 802411a:	4606      	mov	r6, r0
 802411c:	460c      	mov	r4, r1
 802411e:	b125      	cbz	r5, 802412a <__swsetup_r+0x16>
 8024120:	69ab      	ldr	r3, [r5, #24]
 8024122:	b913      	cbnz	r3, 802412a <__swsetup_r+0x16>
 8024124:	4628      	mov	r0, r5
 8024126:	f7ff f9c3 	bl	80234b0 <__sinit>
 802412a:	4b2e      	ldr	r3, [pc, #184]	; (80241e4 <__swsetup_r+0xd0>)
 802412c:	429c      	cmp	r4, r3
 802412e:	d10f      	bne.n	8024150 <__swsetup_r+0x3c>
 8024130:	686c      	ldr	r4, [r5, #4]
 8024132:	89a3      	ldrh	r3, [r4, #12]
 8024134:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024138:	0719      	lsls	r1, r3, #28
 802413a:	d42c      	bmi.n	8024196 <__swsetup_r+0x82>
 802413c:	06dd      	lsls	r5, r3, #27
 802413e:	d411      	bmi.n	8024164 <__swsetup_r+0x50>
 8024140:	2309      	movs	r3, #9
 8024142:	6033      	str	r3, [r6, #0]
 8024144:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8024148:	81a3      	strh	r3, [r4, #12]
 802414a:	f04f 30ff 	mov.w	r0, #4294967295
 802414e:	e03e      	b.n	80241ce <__swsetup_r+0xba>
 8024150:	4b25      	ldr	r3, [pc, #148]	; (80241e8 <__swsetup_r+0xd4>)
 8024152:	429c      	cmp	r4, r3
 8024154:	d101      	bne.n	802415a <__swsetup_r+0x46>
 8024156:	68ac      	ldr	r4, [r5, #8]
 8024158:	e7eb      	b.n	8024132 <__swsetup_r+0x1e>
 802415a:	4b24      	ldr	r3, [pc, #144]	; (80241ec <__swsetup_r+0xd8>)
 802415c:	429c      	cmp	r4, r3
 802415e:	bf08      	it	eq
 8024160:	68ec      	ldreq	r4, [r5, #12]
 8024162:	e7e6      	b.n	8024132 <__swsetup_r+0x1e>
 8024164:	0758      	lsls	r0, r3, #29
 8024166:	d512      	bpl.n	802418e <__swsetup_r+0x7a>
 8024168:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802416a:	b141      	cbz	r1, 802417e <__swsetup_r+0x6a>
 802416c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024170:	4299      	cmp	r1, r3
 8024172:	d002      	beq.n	802417a <__swsetup_r+0x66>
 8024174:	4630      	mov	r0, r6
 8024176:	f7ff fa99 	bl	80236ac <_free_r>
 802417a:	2300      	movs	r3, #0
 802417c:	6363      	str	r3, [r4, #52]	; 0x34
 802417e:	89a3      	ldrh	r3, [r4, #12]
 8024180:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8024184:	81a3      	strh	r3, [r4, #12]
 8024186:	2300      	movs	r3, #0
 8024188:	6063      	str	r3, [r4, #4]
 802418a:	6923      	ldr	r3, [r4, #16]
 802418c:	6023      	str	r3, [r4, #0]
 802418e:	89a3      	ldrh	r3, [r4, #12]
 8024190:	f043 0308 	orr.w	r3, r3, #8
 8024194:	81a3      	strh	r3, [r4, #12]
 8024196:	6923      	ldr	r3, [r4, #16]
 8024198:	b94b      	cbnz	r3, 80241ae <__swsetup_r+0x9a>
 802419a:	89a3      	ldrh	r3, [r4, #12]
 802419c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80241a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80241a4:	d003      	beq.n	80241ae <__swsetup_r+0x9a>
 80241a6:	4621      	mov	r1, r4
 80241a8:	4630      	mov	r0, r6
 80241aa:	f000 f98d 	bl	80244c8 <__smakebuf_r>
 80241ae:	89a0      	ldrh	r0, [r4, #12]
 80241b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80241b4:	f010 0301 	ands.w	r3, r0, #1
 80241b8:	d00a      	beq.n	80241d0 <__swsetup_r+0xbc>
 80241ba:	2300      	movs	r3, #0
 80241bc:	60a3      	str	r3, [r4, #8]
 80241be:	6963      	ldr	r3, [r4, #20]
 80241c0:	425b      	negs	r3, r3
 80241c2:	61a3      	str	r3, [r4, #24]
 80241c4:	6923      	ldr	r3, [r4, #16]
 80241c6:	b943      	cbnz	r3, 80241da <__swsetup_r+0xc6>
 80241c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80241cc:	d1ba      	bne.n	8024144 <__swsetup_r+0x30>
 80241ce:	bd70      	pop	{r4, r5, r6, pc}
 80241d0:	0781      	lsls	r1, r0, #30
 80241d2:	bf58      	it	pl
 80241d4:	6963      	ldrpl	r3, [r4, #20]
 80241d6:	60a3      	str	r3, [r4, #8]
 80241d8:	e7f4      	b.n	80241c4 <__swsetup_r+0xb0>
 80241da:	2000      	movs	r0, #0
 80241dc:	e7f7      	b.n	80241ce <__swsetup_r+0xba>
 80241de:	bf00      	nop
 80241e0:	240000c4 	.word	0x240000c4
 80241e4:	08026448 	.word	0x08026448
 80241e8:	08026468 	.word	0x08026468
 80241ec:	08026428 	.word	0x08026428

080241f0 <__register_exitproc>:
 80241f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80241f4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80242b0 <__register_exitproc+0xc0>
 80241f8:	4606      	mov	r6, r0
 80241fa:	f8d8 0000 	ldr.w	r0, [r8]
 80241fe:	461f      	mov	r7, r3
 8024200:	460d      	mov	r5, r1
 8024202:	4691      	mov	r9, r2
 8024204:	f7ff fa29 	bl	802365a <__retarget_lock_acquire_recursive>
 8024208:	4b25      	ldr	r3, [pc, #148]	; (80242a0 <__register_exitproc+0xb0>)
 802420a:	681c      	ldr	r4, [r3, #0]
 802420c:	b934      	cbnz	r4, 802421c <__register_exitproc+0x2c>
 802420e:	4c25      	ldr	r4, [pc, #148]	; (80242a4 <__register_exitproc+0xb4>)
 8024210:	601c      	str	r4, [r3, #0]
 8024212:	4b25      	ldr	r3, [pc, #148]	; (80242a8 <__register_exitproc+0xb8>)
 8024214:	b113      	cbz	r3, 802421c <__register_exitproc+0x2c>
 8024216:	681b      	ldr	r3, [r3, #0]
 8024218:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802421c:	6863      	ldr	r3, [r4, #4]
 802421e:	2b1f      	cmp	r3, #31
 8024220:	dd07      	ble.n	8024232 <__register_exitproc+0x42>
 8024222:	f8d8 0000 	ldr.w	r0, [r8]
 8024226:	f7ff fa1a 	bl	802365e <__retarget_lock_release_recursive>
 802422a:	f04f 30ff 	mov.w	r0, #4294967295
 802422e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024232:	b34e      	cbz	r6, 8024288 <__register_exitproc+0x98>
 8024234:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024238:	b988      	cbnz	r0, 802425e <__register_exitproc+0x6e>
 802423a:	4b1c      	ldr	r3, [pc, #112]	; (80242ac <__register_exitproc+0xbc>)
 802423c:	b923      	cbnz	r3, 8024248 <__register_exitproc+0x58>
 802423e:	f8d8 0000 	ldr.w	r0, [r8]
 8024242:	f7ff fa0b 	bl	802365c <__retarget_lock_release>
 8024246:	e7f0      	b.n	802422a <__register_exitproc+0x3a>
 8024248:	f44f 7084 	mov.w	r0, #264	; 0x108
 802424c:	f7ff fa08 	bl	8023660 <malloc>
 8024250:	2800      	cmp	r0, #0
 8024252:	d0f4      	beq.n	802423e <__register_exitproc+0x4e>
 8024254:	2300      	movs	r3, #0
 8024256:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802425a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802425e:	6863      	ldr	r3, [r4, #4]
 8024260:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8024264:	2201      	movs	r2, #1
 8024266:	409a      	lsls	r2, r3
 8024268:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802426c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024270:	4313      	orrs	r3, r2
 8024272:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8024276:	2e02      	cmp	r6, #2
 8024278:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802427c:	bf02      	ittt	eq
 802427e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8024282:	4313      	orreq	r3, r2
 8024284:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024288:	6863      	ldr	r3, [r4, #4]
 802428a:	f8d8 0000 	ldr.w	r0, [r8]
 802428e:	1c5a      	adds	r2, r3, #1
 8024290:	3302      	adds	r3, #2
 8024292:	6062      	str	r2, [r4, #4]
 8024294:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024298:	f7ff f9e1 	bl	802365e <__retarget_lock_release_recursive>
 802429c:	2000      	movs	r0, #0
 802429e:	e7c6      	b.n	802422e <__register_exitproc+0x3e>
 80242a0:	2400b1d4 	.word	0x2400b1d4
 80242a4:	2400b148 	.word	0x2400b148
 80242a8:	080264c0 	.word	0x080264c0
 80242ac:	08023661 	.word	0x08023661
 80242b0:	24000128 	.word	0x24000128

080242b4 <_close_r>:
 80242b4:	b538      	push	{r3, r4, r5, lr}
 80242b6:	4d06      	ldr	r5, [pc, #24]	; (80242d0 <_close_r+0x1c>)
 80242b8:	2300      	movs	r3, #0
 80242ba:	4604      	mov	r4, r0
 80242bc:	4608      	mov	r0, r1
 80242be:	602b      	str	r3, [r5, #0]
 80242c0:	f7dd f987 	bl	80015d2 <_close>
 80242c4:	1c43      	adds	r3, r0, #1
 80242c6:	d102      	bne.n	80242ce <_close_r+0x1a>
 80242c8:	682b      	ldr	r3, [r5, #0]
 80242ca:	b103      	cbz	r3, 80242ce <_close_r+0x1a>
 80242cc:	6023      	str	r3, [r4, #0]
 80242ce:	bd38      	pop	{r3, r4, r5, pc}
 80242d0:	2400b144 	.word	0x2400b144

080242d4 <__sflush_r>:
 80242d4:	898a      	ldrh	r2, [r1, #12]
 80242d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80242da:	4605      	mov	r5, r0
 80242dc:	0710      	lsls	r0, r2, #28
 80242de:	460c      	mov	r4, r1
 80242e0:	d458      	bmi.n	8024394 <__sflush_r+0xc0>
 80242e2:	684b      	ldr	r3, [r1, #4]
 80242e4:	2b00      	cmp	r3, #0
 80242e6:	dc05      	bgt.n	80242f4 <__sflush_r+0x20>
 80242e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	dc02      	bgt.n	80242f4 <__sflush_r+0x20>
 80242ee:	2000      	movs	r0, #0
 80242f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80242f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80242f6:	2e00      	cmp	r6, #0
 80242f8:	d0f9      	beq.n	80242ee <__sflush_r+0x1a>
 80242fa:	2300      	movs	r3, #0
 80242fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024300:	682f      	ldr	r7, [r5, #0]
 8024302:	602b      	str	r3, [r5, #0]
 8024304:	d032      	beq.n	802436c <__sflush_r+0x98>
 8024306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8024308:	89a3      	ldrh	r3, [r4, #12]
 802430a:	075a      	lsls	r2, r3, #29
 802430c:	d505      	bpl.n	802431a <__sflush_r+0x46>
 802430e:	6863      	ldr	r3, [r4, #4]
 8024310:	1ac0      	subs	r0, r0, r3
 8024312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024314:	b10b      	cbz	r3, 802431a <__sflush_r+0x46>
 8024316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8024318:	1ac0      	subs	r0, r0, r3
 802431a:	2300      	movs	r3, #0
 802431c:	4602      	mov	r2, r0
 802431e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024320:	6a21      	ldr	r1, [r4, #32]
 8024322:	4628      	mov	r0, r5
 8024324:	47b0      	blx	r6
 8024326:	1c43      	adds	r3, r0, #1
 8024328:	89a3      	ldrh	r3, [r4, #12]
 802432a:	d106      	bne.n	802433a <__sflush_r+0x66>
 802432c:	6829      	ldr	r1, [r5, #0]
 802432e:	291d      	cmp	r1, #29
 8024330:	d82c      	bhi.n	802438c <__sflush_r+0xb8>
 8024332:	4a2a      	ldr	r2, [pc, #168]	; (80243dc <__sflush_r+0x108>)
 8024334:	40ca      	lsrs	r2, r1
 8024336:	07d6      	lsls	r6, r2, #31
 8024338:	d528      	bpl.n	802438c <__sflush_r+0xb8>
 802433a:	2200      	movs	r2, #0
 802433c:	6062      	str	r2, [r4, #4]
 802433e:	04d9      	lsls	r1, r3, #19
 8024340:	6922      	ldr	r2, [r4, #16]
 8024342:	6022      	str	r2, [r4, #0]
 8024344:	d504      	bpl.n	8024350 <__sflush_r+0x7c>
 8024346:	1c42      	adds	r2, r0, #1
 8024348:	d101      	bne.n	802434e <__sflush_r+0x7a>
 802434a:	682b      	ldr	r3, [r5, #0]
 802434c:	b903      	cbnz	r3, 8024350 <__sflush_r+0x7c>
 802434e:	6560      	str	r0, [r4, #84]	; 0x54
 8024350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024352:	602f      	str	r7, [r5, #0]
 8024354:	2900      	cmp	r1, #0
 8024356:	d0ca      	beq.n	80242ee <__sflush_r+0x1a>
 8024358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802435c:	4299      	cmp	r1, r3
 802435e:	d002      	beq.n	8024366 <__sflush_r+0x92>
 8024360:	4628      	mov	r0, r5
 8024362:	f7ff f9a3 	bl	80236ac <_free_r>
 8024366:	2000      	movs	r0, #0
 8024368:	6360      	str	r0, [r4, #52]	; 0x34
 802436a:	e7c1      	b.n	80242f0 <__sflush_r+0x1c>
 802436c:	6a21      	ldr	r1, [r4, #32]
 802436e:	2301      	movs	r3, #1
 8024370:	4628      	mov	r0, r5
 8024372:	47b0      	blx	r6
 8024374:	1c41      	adds	r1, r0, #1
 8024376:	d1c7      	bne.n	8024308 <__sflush_r+0x34>
 8024378:	682b      	ldr	r3, [r5, #0]
 802437a:	2b00      	cmp	r3, #0
 802437c:	d0c4      	beq.n	8024308 <__sflush_r+0x34>
 802437e:	2b1d      	cmp	r3, #29
 8024380:	d001      	beq.n	8024386 <__sflush_r+0xb2>
 8024382:	2b16      	cmp	r3, #22
 8024384:	d101      	bne.n	802438a <__sflush_r+0xb6>
 8024386:	602f      	str	r7, [r5, #0]
 8024388:	e7b1      	b.n	80242ee <__sflush_r+0x1a>
 802438a:	89a3      	ldrh	r3, [r4, #12]
 802438c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024390:	81a3      	strh	r3, [r4, #12]
 8024392:	e7ad      	b.n	80242f0 <__sflush_r+0x1c>
 8024394:	690f      	ldr	r7, [r1, #16]
 8024396:	2f00      	cmp	r7, #0
 8024398:	d0a9      	beq.n	80242ee <__sflush_r+0x1a>
 802439a:	0793      	lsls	r3, r2, #30
 802439c:	680e      	ldr	r6, [r1, #0]
 802439e:	bf08      	it	eq
 80243a0:	694b      	ldreq	r3, [r1, #20]
 80243a2:	600f      	str	r7, [r1, #0]
 80243a4:	bf18      	it	ne
 80243a6:	2300      	movne	r3, #0
 80243a8:	eba6 0807 	sub.w	r8, r6, r7
 80243ac:	608b      	str	r3, [r1, #8]
 80243ae:	f1b8 0f00 	cmp.w	r8, #0
 80243b2:	dd9c      	ble.n	80242ee <__sflush_r+0x1a>
 80243b4:	6a21      	ldr	r1, [r4, #32]
 80243b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80243b8:	4643      	mov	r3, r8
 80243ba:	463a      	mov	r2, r7
 80243bc:	4628      	mov	r0, r5
 80243be:	47b0      	blx	r6
 80243c0:	2800      	cmp	r0, #0
 80243c2:	dc06      	bgt.n	80243d2 <__sflush_r+0xfe>
 80243c4:	89a3      	ldrh	r3, [r4, #12]
 80243c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80243ca:	81a3      	strh	r3, [r4, #12]
 80243cc:	f04f 30ff 	mov.w	r0, #4294967295
 80243d0:	e78e      	b.n	80242f0 <__sflush_r+0x1c>
 80243d2:	4407      	add	r7, r0
 80243d4:	eba8 0800 	sub.w	r8, r8, r0
 80243d8:	e7e9      	b.n	80243ae <__sflush_r+0xda>
 80243da:	bf00      	nop
 80243dc:	20400001 	.word	0x20400001

080243e0 <_fflush_r>:
 80243e0:	b538      	push	{r3, r4, r5, lr}
 80243e2:	690b      	ldr	r3, [r1, #16]
 80243e4:	4605      	mov	r5, r0
 80243e6:	460c      	mov	r4, r1
 80243e8:	b913      	cbnz	r3, 80243f0 <_fflush_r+0x10>
 80243ea:	2500      	movs	r5, #0
 80243ec:	4628      	mov	r0, r5
 80243ee:	bd38      	pop	{r3, r4, r5, pc}
 80243f0:	b118      	cbz	r0, 80243fa <_fflush_r+0x1a>
 80243f2:	6983      	ldr	r3, [r0, #24]
 80243f4:	b90b      	cbnz	r3, 80243fa <_fflush_r+0x1a>
 80243f6:	f7ff f85b 	bl	80234b0 <__sinit>
 80243fa:	4b14      	ldr	r3, [pc, #80]	; (802444c <_fflush_r+0x6c>)
 80243fc:	429c      	cmp	r4, r3
 80243fe:	d11b      	bne.n	8024438 <_fflush_r+0x58>
 8024400:	686c      	ldr	r4, [r5, #4]
 8024402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8024406:	2b00      	cmp	r3, #0
 8024408:	d0ef      	beq.n	80243ea <_fflush_r+0xa>
 802440a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802440c:	07d0      	lsls	r0, r2, #31
 802440e:	d404      	bmi.n	802441a <_fflush_r+0x3a>
 8024410:	0599      	lsls	r1, r3, #22
 8024412:	d402      	bmi.n	802441a <_fflush_r+0x3a>
 8024414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024416:	f7ff f920 	bl	802365a <__retarget_lock_acquire_recursive>
 802441a:	4628      	mov	r0, r5
 802441c:	4621      	mov	r1, r4
 802441e:	f7ff ff59 	bl	80242d4 <__sflush_r>
 8024422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024424:	07da      	lsls	r2, r3, #31
 8024426:	4605      	mov	r5, r0
 8024428:	d4e0      	bmi.n	80243ec <_fflush_r+0xc>
 802442a:	89a3      	ldrh	r3, [r4, #12]
 802442c:	059b      	lsls	r3, r3, #22
 802442e:	d4dd      	bmi.n	80243ec <_fflush_r+0xc>
 8024430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024432:	f7ff f914 	bl	802365e <__retarget_lock_release_recursive>
 8024436:	e7d9      	b.n	80243ec <_fflush_r+0xc>
 8024438:	4b05      	ldr	r3, [pc, #20]	; (8024450 <_fflush_r+0x70>)
 802443a:	429c      	cmp	r4, r3
 802443c:	d101      	bne.n	8024442 <_fflush_r+0x62>
 802443e:	68ac      	ldr	r4, [r5, #8]
 8024440:	e7df      	b.n	8024402 <_fflush_r+0x22>
 8024442:	4b04      	ldr	r3, [pc, #16]	; (8024454 <_fflush_r+0x74>)
 8024444:	429c      	cmp	r4, r3
 8024446:	bf08      	it	eq
 8024448:	68ec      	ldreq	r4, [r5, #12]
 802444a:	e7da      	b.n	8024402 <_fflush_r+0x22>
 802444c:	08026448 	.word	0x08026448
 8024450:	08026468 	.word	0x08026468
 8024454:	08026428 	.word	0x08026428

08024458 <_lseek_r>:
 8024458:	b538      	push	{r3, r4, r5, lr}
 802445a:	4d07      	ldr	r5, [pc, #28]	; (8024478 <_lseek_r+0x20>)
 802445c:	4604      	mov	r4, r0
 802445e:	4608      	mov	r0, r1
 8024460:	4611      	mov	r1, r2
 8024462:	2200      	movs	r2, #0
 8024464:	602a      	str	r2, [r5, #0]
 8024466:	461a      	mov	r2, r3
 8024468:	f7dd f8da 	bl	8001620 <_lseek>
 802446c:	1c43      	adds	r3, r0, #1
 802446e:	d102      	bne.n	8024476 <_lseek_r+0x1e>
 8024470:	682b      	ldr	r3, [r5, #0]
 8024472:	b103      	cbz	r3, 8024476 <_lseek_r+0x1e>
 8024474:	6023      	str	r3, [r4, #0]
 8024476:	bd38      	pop	{r3, r4, r5, pc}
 8024478:	2400b144 	.word	0x2400b144

0802447c <__swhatbuf_r>:
 802447c:	b570      	push	{r4, r5, r6, lr}
 802447e:	460e      	mov	r6, r1
 8024480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024484:	2900      	cmp	r1, #0
 8024486:	b096      	sub	sp, #88	; 0x58
 8024488:	4614      	mov	r4, r2
 802448a:	461d      	mov	r5, r3
 802448c:	da08      	bge.n	80244a0 <__swhatbuf_r+0x24>
 802448e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8024492:	2200      	movs	r2, #0
 8024494:	602a      	str	r2, [r5, #0]
 8024496:	061a      	lsls	r2, r3, #24
 8024498:	d410      	bmi.n	80244bc <__swhatbuf_r+0x40>
 802449a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802449e:	e00e      	b.n	80244be <__swhatbuf_r+0x42>
 80244a0:	466a      	mov	r2, sp
 80244a2:	f000 f86f 	bl	8024584 <_fstat_r>
 80244a6:	2800      	cmp	r0, #0
 80244a8:	dbf1      	blt.n	802448e <__swhatbuf_r+0x12>
 80244aa:	9a01      	ldr	r2, [sp, #4]
 80244ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80244b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80244b4:	425a      	negs	r2, r3
 80244b6:	415a      	adcs	r2, r3
 80244b8:	602a      	str	r2, [r5, #0]
 80244ba:	e7ee      	b.n	802449a <__swhatbuf_r+0x1e>
 80244bc:	2340      	movs	r3, #64	; 0x40
 80244be:	2000      	movs	r0, #0
 80244c0:	6023      	str	r3, [r4, #0]
 80244c2:	b016      	add	sp, #88	; 0x58
 80244c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080244c8 <__smakebuf_r>:
 80244c8:	898b      	ldrh	r3, [r1, #12]
 80244ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80244cc:	079d      	lsls	r5, r3, #30
 80244ce:	4606      	mov	r6, r0
 80244d0:	460c      	mov	r4, r1
 80244d2:	d507      	bpl.n	80244e4 <__smakebuf_r+0x1c>
 80244d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80244d8:	6023      	str	r3, [r4, #0]
 80244da:	6123      	str	r3, [r4, #16]
 80244dc:	2301      	movs	r3, #1
 80244de:	6163      	str	r3, [r4, #20]
 80244e0:	b002      	add	sp, #8
 80244e2:	bd70      	pop	{r4, r5, r6, pc}
 80244e4:	ab01      	add	r3, sp, #4
 80244e6:	466a      	mov	r2, sp
 80244e8:	f7ff ffc8 	bl	802447c <__swhatbuf_r>
 80244ec:	9900      	ldr	r1, [sp, #0]
 80244ee:	4605      	mov	r5, r0
 80244f0:	4630      	mov	r0, r6
 80244f2:	f7ff f947 	bl	8023784 <_malloc_r>
 80244f6:	b948      	cbnz	r0, 802450c <__smakebuf_r+0x44>
 80244f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80244fc:	059a      	lsls	r2, r3, #22
 80244fe:	d4ef      	bmi.n	80244e0 <__smakebuf_r+0x18>
 8024500:	f023 0303 	bic.w	r3, r3, #3
 8024504:	f043 0302 	orr.w	r3, r3, #2
 8024508:	81a3      	strh	r3, [r4, #12]
 802450a:	e7e3      	b.n	80244d4 <__smakebuf_r+0xc>
 802450c:	4b0d      	ldr	r3, [pc, #52]	; (8024544 <__smakebuf_r+0x7c>)
 802450e:	62b3      	str	r3, [r6, #40]	; 0x28
 8024510:	89a3      	ldrh	r3, [r4, #12]
 8024512:	6020      	str	r0, [r4, #0]
 8024514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024518:	81a3      	strh	r3, [r4, #12]
 802451a:	9b00      	ldr	r3, [sp, #0]
 802451c:	6163      	str	r3, [r4, #20]
 802451e:	9b01      	ldr	r3, [sp, #4]
 8024520:	6120      	str	r0, [r4, #16]
 8024522:	b15b      	cbz	r3, 802453c <__smakebuf_r+0x74>
 8024524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024528:	4630      	mov	r0, r6
 802452a:	f000 f83d 	bl	80245a8 <_isatty_r>
 802452e:	b128      	cbz	r0, 802453c <__smakebuf_r+0x74>
 8024530:	89a3      	ldrh	r3, [r4, #12]
 8024532:	f023 0303 	bic.w	r3, r3, #3
 8024536:	f043 0301 	orr.w	r3, r3, #1
 802453a:	81a3      	strh	r3, [r4, #12]
 802453c:	89a0      	ldrh	r0, [r4, #12]
 802453e:	4305      	orrs	r5, r0
 8024540:	81a5      	strh	r5, [r4, #12]
 8024542:	e7cd      	b.n	80244e0 <__smakebuf_r+0x18>
 8024544:	08023449 	.word	0x08023449

08024548 <__malloc_lock>:
 8024548:	4801      	ldr	r0, [pc, #4]	; (8024550 <__malloc_lock+0x8>)
 802454a:	f7ff b886 	b.w	802365a <__retarget_lock_acquire_recursive>
 802454e:	bf00      	nop
 8024550:	2400b031 	.word	0x2400b031

08024554 <__malloc_unlock>:
 8024554:	4801      	ldr	r0, [pc, #4]	; (802455c <__malloc_unlock+0x8>)
 8024556:	f7ff b882 	b.w	802365e <__retarget_lock_release_recursive>
 802455a:	bf00      	nop
 802455c:	2400b031 	.word	0x2400b031

08024560 <_read_r>:
 8024560:	b538      	push	{r3, r4, r5, lr}
 8024562:	4d07      	ldr	r5, [pc, #28]	; (8024580 <_read_r+0x20>)
 8024564:	4604      	mov	r4, r0
 8024566:	4608      	mov	r0, r1
 8024568:	4611      	mov	r1, r2
 802456a:	2200      	movs	r2, #0
 802456c:	602a      	str	r2, [r5, #0]
 802456e:	461a      	mov	r2, r3
 8024570:	f7dc fff6 	bl	8001560 <_read>
 8024574:	1c43      	adds	r3, r0, #1
 8024576:	d102      	bne.n	802457e <_read_r+0x1e>
 8024578:	682b      	ldr	r3, [r5, #0]
 802457a:	b103      	cbz	r3, 802457e <_read_r+0x1e>
 802457c:	6023      	str	r3, [r4, #0]
 802457e:	bd38      	pop	{r3, r4, r5, pc}
 8024580:	2400b144 	.word	0x2400b144

08024584 <_fstat_r>:
 8024584:	b538      	push	{r3, r4, r5, lr}
 8024586:	4d07      	ldr	r5, [pc, #28]	; (80245a4 <_fstat_r+0x20>)
 8024588:	2300      	movs	r3, #0
 802458a:	4604      	mov	r4, r0
 802458c:	4608      	mov	r0, r1
 802458e:	4611      	mov	r1, r2
 8024590:	602b      	str	r3, [r5, #0]
 8024592:	f7dd f82a 	bl	80015ea <_fstat>
 8024596:	1c43      	adds	r3, r0, #1
 8024598:	d102      	bne.n	80245a0 <_fstat_r+0x1c>
 802459a:	682b      	ldr	r3, [r5, #0]
 802459c:	b103      	cbz	r3, 80245a0 <_fstat_r+0x1c>
 802459e:	6023      	str	r3, [r4, #0]
 80245a0:	bd38      	pop	{r3, r4, r5, pc}
 80245a2:	bf00      	nop
 80245a4:	2400b144 	.word	0x2400b144

080245a8 <_isatty_r>:
 80245a8:	b538      	push	{r3, r4, r5, lr}
 80245aa:	4d06      	ldr	r5, [pc, #24]	; (80245c4 <_isatty_r+0x1c>)
 80245ac:	2300      	movs	r3, #0
 80245ae:	4604      	mov	r4, r0
 80245b0:	4608      	mov	r0, r1
 80245b2:	602b      	str	r3, [r5, #0]
 80245b4:	f7dd f829 	bl	800160a <_isatty>
 80245b8:	1c43      	adds	r3, r0, #1
 80245ba:	d102      	bne.n	80245c2 <_isatty_r+0x1a>
 80245bc:	682b      	ldr	r3, [r5, #0]
 80245be:	b103      	cbz	r3, 80245c2 <_isatty_r+0x1a>
 80245c0:	6023      	str	r3, [r4, #0]
 80245c2:	bd38      	pop	{r3, r4, r5, pc}
 80245c4:	2400b144 	.word	0x2400b144

080245c8 <_init>:
 80245c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245ca:	bf00      	nop
 80245cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245ce:	bc08      	pop	{r3}
 80245d0:	469e      	mov	lr, r3
 80245d2:	4770      	bx	lr

080245d4 <_fini>:
 80245d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245d6:	bf00      	nop
 80245d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80245da:	bc08      	pop	{r3}
 80245dc:	469e      	mov	lr, r3
 80245de:	4770      	bx	lr
