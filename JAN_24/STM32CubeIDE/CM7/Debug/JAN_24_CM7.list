
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006558  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080067f8  080067f8  000167f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006870  08006870  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006870  08006870  00016870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006878  08006878  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800687c  0800687c  0001687c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08006880  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  24000074  080068f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240001c4  080068f4  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000123cf  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002115  00000000  00000000  00032471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00034588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00035258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039842  00000000  00000000  00035e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001129d  00000000  00000000  0006f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017c0dc  00000000  00000000  0008093f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001fca1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000390c  00000000  00000000  001fca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080067e0 	.word	0x080067e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080067e0 	.word	0x080067e0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b0a0      	sub	sp, #128	; 0x80
 8000688:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800068a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068e:	67fb      	str	r3, [r7, #124]	; 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000690:	bf00      	nop
 8000692:	4b37      	ldr	r3, [pc, #220]	; (8000770 <main+0xec>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800069a:	2b00      	cmp	r3, #0
 800069c:	d004      	beq.n	80006a8 <main+0x24>
 800069e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006a0:	1e5a      	subs	r2, r3, #1
 80006a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dcf4      	bgt.n	8000692 <main+0xe>
  if ( timeout < 0 )
 80006a8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	da01      	bge.n	80006b2 <main+0x2e>
  {
  Error_Handler();
 80006ae:	f000 fa17 	bl	8000ae0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fc63 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f865 	bl	8000784 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80006ba:	4b2d      	ldr	r3, [pc, #180]	; (8000770 <main+0xec>)
 80006bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <main+0xec>)
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <main+0xec>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80006d8:	2000      	movs	r0, #0
 80006da:	f000 ffd9 	bl	8001690 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80006de:	2100      	movs	r1, #0
 80006e0:	2000      	movs	r0, #0
 80006e2:	f000 ffef 	bl	80016c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80006e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ea:	67fb      	str	r3, [r7, #124]	; 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80006ec:	bf00      	nop
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <main+0xec>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d104      	bne.n	8000704 <main+0x80>
 80006fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80006fc:	1e5a      	subs	r2, r3, #1
 80006fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8000700:	2b00      	cmp	r3, #0
 8000702:	dcf4      	bgt.n	80006ee <main+0x6a>
if ( timeout < 0 )
 8000704:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000706:	2b00      	cmp	r3, #0
 8000708:	da01      	bge.n	800070e <main+0x8a>
{
Error_Handler();
 800070a:	f000 f9e9 	bl	8000ae0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f95d 	bl	80009cc <MX_GPIO_Init>
  MX_SPI2_Init();
 8000712:	f000 f8b7 	bl	8000884 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000716:	f000 f90d 	bl	8000934 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint16_t writeBuf = 0b0000010010001111;
 800071a:	f240 438f 	movw	r3, #1167	; 0x48f
 800071e:	817b      	strh	r3, [r7, #10]
  while (1)
  {
	  uart_buf_len = sprintf(uart_buf, "HI THERE");
 8000720:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000724:	4913      	ldr	r1, [pc, #76]	; (8000774 <main+0xf0>)
 8000726:	4618      	mov	r0, r3
 8000728:	f005 fbec 	bl	8005f04 <siprintf>
 800072c:	67b8      	str	r0, [r7, #120]	; 0x78
	  spi_buf_len = sprintf(spi_buf, "HI THERE");
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4910      	ldr	r1, [pc, #64]	; (8000774 <main+0xf0>)
 8000734:	4618      	mov	r0, r3
 8000736:	f005 fbe5 	bl	8005f04 <siprintf>
 800073a:	6778      	str	r0, [r7, #116]	; 0x74

	  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 800073c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000740:	480d      	ldr	r0, [pc, #52]	; (8000778 <main+0xf4>)
 8000742:	f000 ff8a 	bl	800165a <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(GPIOH,GPIO_PIN_15);
	  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf,1,100);
 8000746:	f107 010a 	add.w	r1, r7, #10
 800074a:	2364      	movs	r3, #100	; 0x64
 800074c:	2201      	movs	r2, #1
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <main+0xf8>)
 8000750:	f003 ff5c 	bl	800460c <HAL_SPI_Transmit>
	  HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 8000754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000756:	b29a      	uxth	r2, r3
 8000758:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	4808      	ldr	r0, [pc, #32]	; (8000780 <main+0xfc>)
 8000760:	f004 fa89 	bl	8004c76 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000768:	f000 fc9a 	bl	80010a0 <HAL_Delay>
	  uart_buf_len = sprintf(uart_buf, "HI THERE");
 800076c:	e7d8      	b.n	8000720 <main+0x9c>
 800076e:	bf00      	nop
 8000770:	58024400 	.word	0x58024400
 8000774:	080067f8 	.word	0x080067f8
 8000778:	58022000 	.word	0x58022000
 800077c:	24000090 	.word	0x24000090
 8000780:	24000118 	.word	0x24000118

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b09c      	sub	sp, #112	; 0x70
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078e:	224c      	movs	r2, #76	; 0x4c
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fbae 	bl	8005ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2220      	movs	r2, #32
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f005 fba8 	bl	8005ef4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f000 ffa1 	bl	80016ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	4b33      	ldr	r3, [pc, #204]	; (800087c <SystemClock_Config+0xf8>)
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007b2:	4a32      	ldr	r2, [pc, #200]	; (800087c <SystemClock_Config+0xf8>)
 80007b4:	f023 0301 	bic.w	r3, r3, #1
 80007b8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <SystemClock_Config+0xf8>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	603b      	str	r3, [r7, #0]
 80007c4:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <SystemClock_Config+0xfc>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007cc:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <SystemClock_Config+0xfc>)
 80007ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b2a      	ldr	r3, [pc, #168]	; (8000880 <SystemClock_Config+0xfc>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007e0:	bf00      	nop
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <SystemClock_Config+0xfc>)
 80007e4:	699b      	ldr	r3, [r3, #24]
 80007e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007ee:	d1f8      	bne.n	80007e2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007f0:	2303      	movs	r3, #3
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007fe:	2340      	movs	r3, #64	; 0x40
 8000800:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000802:	2302      	movs	r3, #2
 8000804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000806:	2302      	movs	r3, #2
 8000808:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 23;
 800080a:	2317      	movs	r3, #23
 800080c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 177;
 800080e:	23b1      	movs	r3, #177	; 0xb1
 8000810:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000816:	2304      	movs	r3, #4
 8000818:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800081a:	2304      	movs	r3, #4
 800081c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800081e:	2300      	movs	r3, #0
 8000820:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000822:	2300      	movs	r3, #0
 8000824:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	4618      	mov	r0, r3
 8000830:	f000 ffb6 	bl	80017a0 <HAL_RCC_OscConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800083a:	f000 f951 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	233f      	movs	r3, #63	; 0x3f
 8000840:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000852:	2340      	movs	r3, #64	; 0x40
 8000854:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000860:	1d3b      	adds	r3, r7, #4
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fbf5 	bl	8002054 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000870:	f000 f936 	bl	8000ae0 <Error_Handler>
  }
}
 8000874:	bf00      	nop
 8000876:	3770      	adds	r7, #112	; 0x70
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	58000400 	.word	0x58000400
 8000880:	58024800 	.word	0x58024800

08000884 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_SPI2_Init+0xa8>)
 800088a:	4a29      	ldr	r2, [pc, #164]	; (8000930 <MX_SPI2_Init+0xac>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_SPI2_Init+0xa8>)
 8000890:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000894:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_SPI2_Init+0xa8>)
 8000898:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800089c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800089e:	4b23      	ldr	r3, [pc, #140]	; (800092c <MX_SPI2_Init+0xa8>)
 80008a0:	220f      	movs	r2, #15
 80008a2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a4:	4b21      	ldr	r3, [pc, #132]	; (800092c <MX_SPI2_Init+0xa8>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008aa:	4b20      	ldr	r3, [pc, #128]	; (800092c <MX_SPI2_Init+0xa8>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008b0:	4b1e      	ldr	r3, [pc, #120]	; (800092c <MX_SPI2_Init+0xa8>)
 80008b2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80008b6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008b8:	4b1c      	ldr	r3, [pc, #112]	; (800092c <MX_SPI2_Init+0xa8>)
 80008ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80008be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c0:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_SPI2_Init+0xa8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c6:	4b19      	ldr	r3, [pc, #100]	; (800092c <MX_SPI2_Init+0xa8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008cc:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_SPI2_Init+0xa8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <MX_SPI2_Init+0xa8>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008d8:	4b14      	ldr	r3, [pc, #80]	; (800092c <MX_SPI2_Init+0xa8>)
 80008da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008de:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_HIGH;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_SPI2_Init+0xa8>)
 80008e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_SPI2_Init+0xa8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_SPI2_Init+0xa8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_SPI2_Init+0xa8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_SPI2_Init+0xa8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_SPI2_Init+0xa8>)
 8000902:	2200      	movs	r2, #0
 8000904:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_SPI2_Init+0xa8>)
 8000908:	2200      	movs	r2, #0
 800090a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_SPI2_Init+0xa8>)
 800090e:	2200      	movs	r2, #0
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_SPI2_Init+0xa8>)
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_SPI2_Init+0xa8>)
 800091a:	f003 fd53 	bl	80043c4 <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8000924:	f000 f8dc 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	24000090 	.word	0x24000090
 8000930:	40003800 	.word	0x40003800

08000934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000938:	4b22      	ldr	r3, [pc, #136]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <MX_USART3_UART_Init+0x94>)
 800093c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800093e:	4b21      	ldr	r3, [pc, #132]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b1f      	ldr	r3, [pc, #124]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000952:	4b1c      	ldr	r3, [pc, #112]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b19      	ldr	r3, [pc, #100]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097c:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 800097e:	f004 f92a 	bl	8004bd6 <HAL_UART_Init>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000988:	f000 f8aa 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800098c:	2100      	movs	r1, #0
 800098e:	480d      	ldr	r0, [pc, #52]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 8000990:	f005 f9bb 	bl	8005d0a <HAL_UARTEx_SetTxFifoThreshold>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800099a:	f000 f8a1 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800099e:	2100      	movs	r1, #0
 80009a0:	4808      	ldr	r0, [pc, #32]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 80009a2:	f005 f9f0 	bl	8005d86 <HAL_UARTEx_SetRxFifoThreshold>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009ac:	f000 f898 	bl	8000ae0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <MX_USART3_UART_Init+0x90>)
 80009b2:	f005 f971 	bl	8005c98 <HAL_UARTEx_DisableFifoMode>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009bc:	f000 f890 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	24000118 	.word	0x24000118
 80009c8:	40004800 	.word	0x40004800

080009cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08a      	sub	sp, #40	; 0x28
 80009d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b3c      	ldr	r3, [pc, #240]	; (8000ad4 <MX_GPIO_Init+0x108>)
 80009e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e8:	4a3a      	ldr	r2, [pc, #232]	; (8000ad4 <MX_GPIO_Init+0x108>)
 80009ea:	f043 0302 	orr.w	r3, r3, #2
 80009ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f2:	4b38      	ldr	r3, [pc, #224]	; (8000ad4 <MX_GPIO_Init+0x108>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f8:	f003 0302 	and.w	r3, r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a06:	4a33      	ldr	r2, [pc, #204]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a10:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a24:	4a2b      	ldr	r2, [pc, #172]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3c:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a42:	4a24      	ldr	r2, [pc, #144]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a44:	f043 0304 	orr.w	r3, r3, #4
 8000a48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4c:	4b21      	ldr	r3, [pc, #132]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a52:	f003 0304 	and.w	r3, r3, #4
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a60:	4a1c      	ldr	r2, [pc, #112]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6a:	4b1a      	ldr	r3, [pc, #104]	; (8000ad4 <MX_GPIO_Init+0x108>)
 8000a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a7e:	4816      	ldr	r0, [pc, #88]	; (8000ad8 <MX_GPIO_Init+0x10c>)
 8000a80:	f000 fdd2 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8a:	4814      	ldr	r0, [pc, #80]	; (8000adc <MX_GPIO_Init+0x110>)
 8000a8c:	f000 fdcc 	bl	8001628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480b      	ldr	r0, [pc, #44]	; (8000ad8 <MX_GPIO_Init+0x10c>)
 8000aaa:	f000 fc0d 	bl	80012c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000aae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ab2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_GPIO_Init+0x110>)
 8000ac8:	f000 fbfe 	bl	80012c8 <HAL_GPIO_Init>

}
 8000acc:	bf00      	nop
 8000ace:	3728      	adds	r7, #40	; 0x28
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	58024400 	.word	0x58024400
 8000ad8:	58021c00 	.word	0x58021c00
 8000adc:	58022000 	.word	0x58022000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <Error_Handler+0x8>
	...

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000af8:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <HAL_MspInit+0x30>)
 8000afa:	f043 0302 	orr.w	r3, r3, #2
 8000afe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_MspInit+0x30>)
 8000b04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b08:	f003 0302 	and.w	r3, r3, #2
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	58024400 	.word	0x58024400

08000b20 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b0bc      	sub	sp, #240	; 0xf0
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	22c0      	movs	r2, #192	; 0xc0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 f9d7 	bl	8005ef4 <memset>
  if(hspi->Instance==SPI2)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a43      	ldr	r2, [pc, #268]	; (8000c58 <HAL_SPI_MspInit+0x138>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d17e      	bne.n	8000c4e <HAL_SPI_MspInit+0x12e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000b50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b54:	f04f 0300 	mov.w	r3, #0
 8000b58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b60:	f107 0318 	add.w	r3, r7, #24
 8000b64:	4618      	mov	r0, r3
 8000b66:	f001 fe01 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000b70:	f7ff ffb6 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b74:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b7a:	4a38      	ldr	r2, [pc, #224]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b80:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b84:	4b35      	ldr	r3, [pc, #212]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b98:	4a30      	ldr	r2, [pc, #192]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000b9a:	f043 0302 	orr.w	r3, r3, #2
 8000b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb6:	4a29      	ldr	r2, [pc, #164]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bc0:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_SPI_MspInit+0x13c>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc6:	f003 0308 	and.w	r3, r3, #8
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000be6:	2307      	movs	r3, #7
 8000be8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	481b      	ldr	r0, [pc, #108]	; (8000c60 <HAL_SPI_MspInit+0x140>)
 8000bf4:	f000 fb68 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bf8:	2308      	movs	r3, #8
 8000bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c10:	2305      	movs	r3, #5
 8000c12:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4811      	ldr	r0, [pc, #68]	; (8000c64 <HAL_SPI_MspInit+0x144>)
 8000c1e:	f000 fb53 	bl	80012c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3c:	2305      	movs	r3, #5
 8000c3e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c42:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000c46:	4619      	mov	r1, r3
 8000c48:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_SPI_MspInit+0x140>)
 8000c4a:	f000 fb3d 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	37f0      	adds	r7, #240	; 0xf0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40003800 	.word	0x40003800
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020400 	.word	0x58020400
 8000c64:	58020c00 	.word	0x58020c00

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ba      	sub	sp, #232	; 0xe8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	22c0      	movs	r2, #192	; 0xc0
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f933 	bl	8005ef4 <memset>
  if(huart->Instance==USART3)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a27      	ldr	r2, [pc, #156]	; (8000d30 <HAL_UART_MspInit+0xc8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d146      	bne.n	8000d26 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c98:	f04f 0202 	mov.w	r2, #2
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fd5c 	bl	800276c <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cba:	f7ff ff11 	bl	8000ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cc6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce2:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cec:	4b11      	ldr	r3, [pc, #68]	; (8000d34 <HAL_UART_MspInit+0xcc>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000cfa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d14:	2307      	movs	r3, #7
 8000d16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	; (8000d38 <HAL_UART_MspInit+0xd0>)
 8000d22:	f000 fad1 	bl	80012c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d26:	bf00      	nop
 8000d28:	37e8      	adds	r7, #232	; 0xe8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004800 	.word	0x40004800
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020400 	.word	0x58020400

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <MemManage_Handler+0x4>

08000d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d52:	e7fe      	b.n	8000d52 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d88:	f000 f96a 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d98:	4a14      	ldr	r2, [pc, #80]	; (8000dec <_sbrk+0x5c>)
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <_sbrk+0x60>)
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <_sbrk+0x64>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d102      	bne.n	8000db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <_sbrk+0x64>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <_sbrk+0x68>)
 8000db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d207      	bcs.n	8000dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dc0:	f005 f86e 	bl	8005ea0 <__errno>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dca:	f04f 33ff 	mov.w	r3, #4294967295
 8000dce:	e009      	b.n	8000de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <_sbrk+0x64>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <_sbrk+0x64>)
 8000de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3718      	adds	r7, #24
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	24080000 	.word	0x24080000
 8000df0:	00000400 	.word	0x00000400
 8000df4:	240001ac 	.word	0x240001ac
 8000df8:	240001c8 	.word	0x240001c8

08000dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e00:	f000 f826 	bl	8000e50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e06:	490d      	ldr	r1, [pc, #52]	; (8000e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e08:	4a0d      	ldr	r2, [pc, #52]	; (8000e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e0c:	e002      	b.n	8000e14 <LoopCopyDataInit>

08000e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e12:	3304      	adds	r3, #4

08000e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e18:	d3f9      	bcc.n	8000e0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1a:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e1c:	4c0a      	ldr	r4, [pc, #40]	; (8000e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e20:	e001      	b.n	8000e26 <LoopFillZerobss>

08000e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e24:	3204      	adds	r2, #4

08000e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e28:	d3fb      	bcc.n	8000e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f005 f83f 	bl	8005eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2e:	f7ff fc29 	bl	8000684 <main>
  bx  lr
 8000e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e40:	08006880 	.word	0x08006880
  ldr r2, =_sbss
 8000e44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e48:	240001c4 	.word	0x240001c4

08000e4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e4c:	e7fe      	b.n	8000e4c <ADC3_IRQHandler>
	...

08000e50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <SystemInit+0xfc>)
 8000e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e5a:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <SystemInit+0xfc>)
 8000e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <SystemInit+0xfc>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a38      	ldr	r2, [pc, #224]	; (8000f4c <SystemInit+0xfc>)
 8000e6a:	f043 0310 	orr.w	r3, r3, #16
 8000e6e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e70:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <SystemInit+0x100>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f003 030f 	and.w	r3, r3, #15
 8000e78:	2b06      	cmp	r3, #6
 8000e7a:	d807      	bhi.n	8000e8c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <SystemInit+0x100>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f023 030f 	bic.w	r3, r3, #15
 8000e84:	4a32      	ldr	r2, [pc, #200]	; (8000f50 <SystemInit+0x100>)
 8000e86:	f043 0307 	orr.w	r3, r3, #7
 8000e8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e8c:	4b31      	ldr	r3, [pc, #196]	; (8000f54 <SystemInit+0x104>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a30      	ldr	r2, [pc, #192]	; (8000f54 <SystemInit+0x104>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e98:	4b2e      	ldr	r3, [pc, #184]	; (8000f54 <SystemInit+0x104>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <SystemInit+0x104>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	492c      	ldr	r1, [pc, #176]	; (8000f54 <SystemInit+0x104>)
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <SystemInit+0x108>)
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <SystemInit+0x100>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0308 	and.w	r3, r3, #8
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d007      	beq.n	8000ec6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <SystemInit+0x100>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f023 030f 	bic.w	r3, r3, #15
 8000ebe:	4a24      	ldr	r2, [pc, #144]	; (8000f50 <SystemInit+0x100>)
 8000ec0:	f043 0307 	orr.w	r3, r3, #7
 8000ec4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <SystemInit+0x104>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <SystemInit+0x104>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	; (8000f54 <SystemInit+0x104>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <SystemInit+0x104>)
 8000eda:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <SystemInit+0x10c>)
 8000edc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <SystemInit+0x104>)
 8000ee0:	4a1f      	ldr	r2, [pc, #124]	; (8000f60 <SystemInit+0x110>)
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <SystemInit+0x104>)
 8000ee6:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <SystemInit+0x114>)
 8000ee8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <SystemInit+0x104>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ef0:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <SystemInit+0x104>)
 8000ef2:	4a1c      	ldr	r2, [pc, #112]	; (8000f64 <SystemInit+0x114>)
 8000ef4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <SystemInit+0x104>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <SystemInit+0x104>)
 8000efe:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <SystemInit+0x114>)
 8000f00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f02:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <SystemInit+0x104>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <SystemInit+0x104>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a11      	ldr	r2, [pc, #68]	; (8000f54 <SystemInit+0x104>)
 8000f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <SystemInit+0x104>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <SystemInit+0x118>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	4a12      	ldr	r2, [pc, #72]	; (8000f68 <SystemInit+0x118>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <SystemInit+0x11c>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <SystemInit+0x120>)
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000f32:	d202      	bcs.n	8000f3a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <SystemInit+0x124>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <SystemInit+0x128>)
 8000f3c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f40:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00
 8000f50:	52002000 	.word	0x52002000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f5c:	02020200 	.word	0x02020200
 8000f60:	01ff0000 	.word	0x01ff0000
 8000f64:	01010280 	.word	0x01010280
 8000f68:	580000c0 	.word	0x580000c0
 8000f6c:	5c001000 	.word	0x5c001000
 8000f70:	ffff0000 	.word	0xffff0000
 8000f74:	51008108 	.word	0x51008108
 8000f78:	52004000 	.word	0x52004000

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 f96e 	bl	8001264 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f88:	f001 fa1a 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <HAL_Init+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	0a1b      	lsrs	r3, r3, #8
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	4913      	ldr	r1, [pc, #76]	; (8000fe8 <HAL_Init+0x6c>)
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	f003 031f 	and.w	r3, r3, #31
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fa6:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <HAL_Init+0x68>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	4a0e      	ldr	r2, [pc, #56]	; (8000fe8 <HAL_Init+0x6c>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_Init+0x70>)
 8000fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fc0:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_Init+0x74>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f814 	bl	8000ff4 <HAL_InitTick>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e002      	b.n	8000fdc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fd6:	f7ff fd89 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	58024400 	.word	0x58024400
 8000fe8:	08006804 	.word	0x08006804
 8000fec:	24000004 	.word	0x24000004
 8000ff0:	24000000 	.word	0x24000000

08000ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_InitTick+0x60>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d101      	bne.n	8001008 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	e021      	b.n	800104c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001008:	4b13      	ldr	r3, [pc, #76]	; (8001058 <HAL_InitTick+0x64>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_InitTick+0x60>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 f945 	bl	80012ae <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 f91d 	bl	800127a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x68>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2400000c 	.word	0x2400000c
 8001058:	24000000 	.word	0x24000000
 800105c:	24000008 	.word	0x24000008

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	2400000c 	.word	0x2400000c
 8001084:	240001b0 	.word	0x240001b0

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	240001b0 	.word	0x240001b0

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2400000c 	.word	0x2400000c

080010e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetREVID+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	0c1b      	lsrs	r3, r3, #16
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	5c001000 	.word	0x5c001000

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0b      	ldr	r3, [pc, #44]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	4313      	orrs	r3, r2
 800112c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112e:	4a04      	ldr	r2, [pc, #16]	; (8001140 <__NVIC_SetPriorityGrouping+0x40>)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	60d3      	str	r3, [r2, #12]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	05fa0000 	.word	0x05fa0000

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001170:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001174:	2b00      	cmp	r3, #0
 8001176:	db0a      	blt.n	800118e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	b2da      	uxtb	r2, r3
 800117c:	490c      	ldr	r1, [pc, #48]	; (80011b0 <__NVIC_SetPriority+0x4c>)
 800117e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001182:	0112      	lsls	r2, r2, #4
 8001184:	b2d2      	uxtb	r2, r2
 8001186:	440b      	add	r3, r1
 8001188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800118c:	e00a      	b.n	80011a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4908      	ldr	r1, [pc, #32]	; (80011b4 <__NVIC_SetPriority+0x50>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	3b04      	subs	r3, #4
 800119c:	0112      	lsls	r2, r2, #4
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	440b      	add	r3, r1
 80011a2:	761a      	strb	r2, [r3, #24]
}
 80011a4:	bf00      	nop
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b089      	sub	sp, #36	; 0x24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	60f8      	str	r0, [r7, #12]
 80011c0:	60b9      	str	r1, [r7, #8]
 80011c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f1c3 0307 	rsb	r3, r3, #7
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	bf28      	it	cs
 80011d6:	2304      	movcs	r3, #4
 80011d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3304      	adds	r3, #4
 80011de:	2b06      	cmp	r3, #6
 80011e0:	d902      	bls.n	80011e8 <NVIC_EncodePriority+0x30>
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3b03      	subs	r3, #3
 80011e6:	e000      	b.n	80011ea <NVIC_EncodePriority+0x32>
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ec:	f04f 32ff 	mov.w	r2, #4294967295
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	fa02 f303 	lsl.w	r3, r2, r3
 80011f6:	43da      	mvns	r2, r3
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	401a      	ands	r2, r3
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001200:	f04f 31ff 	mov.w	r1, #4294967295
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	fa01 f303 	lsl.w	r3, r1, r3
 800120a:	43d9      	mvns	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	4313      	orrs	r3, r2
         );
}
 8001212:	4618      	mov	r0, r3
 8001214:	3724      	adds	r7, #36	; 0x24
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001230:	d301      	bcc.n	8001236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001232:	2301      	movs	r3, #1
 8001234:	e00f      	b.n	8001256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001236:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <SysTick_Config+0x40>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123e:	210f      	movs	r1, #15
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f7ff ff8e 	bl	8001164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <SysTick_Config+0x40>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124e:	4b04      	ldr	r3, [pc, #16]	; (8001260 <SysTick_Config+0x40>)
 8001250:	2207      	movs	r2, #7
 8001252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	e000e010 	.word	0xe000e010

08001264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff47 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b086      	sub	sp, #24
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	60b9      	str	r1, [r7, #8]
 8001284:	607a      	str	r2, [r7, #4]
 8001286:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001288:	f7ff ff5e 	bl	8001148 <__NVIC_GetPriorityGrouping>
 800128c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6978      	ldr	r0, [r7, #20]
 8001294:	f7ff ff90 	bl	80011b8 <NVIC_EncodePriority>
 8001298:	4602      	mov	r2, r0
 800129a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129e:	4611      	mov	r1, r2
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff ff5f 	bl	8001164 <__NVIC_SetPriority>
}
 80012a6:	bf00      	nop
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffb2 	bl	8001220 <SysTick_Config>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
	...

080012c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80012d6:	4b89      	ldr	r3, [pc, #548]	; (80014fc <HAL_GPIO_Init+0x234>)
 80012d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80012da:	e194      	b.n	8001606 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa01 f303 	lsl.w	r3, r1, r3
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8186 	beq.w	8001600 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0303 	and.w	r3, r3, #3
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d005      	beq.n	800130c <HAL_GPIO_Init+0x44>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 0303 	and.w	r3, r3, #3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d130      	bne.n	800136e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	2203      	movs	r2, #3
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001342:	2201      	movs	r2, #1
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	091b      	lsrs	r3, r3, #4
 8001358:	f003 0201 	and.w	r2, r3, #1
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	2b03      	cmp	r3, #3
 8001378:	d017      	beq.n	80013aa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	2203      	movs	r2, #3
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d123      	bne.n	80013fe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	08da      	lsrs	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3208      	adds	r2, #8
 80013be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0307 	and.w	r3, r3, #7
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	691a      	ldr	r2, [r3, #16]
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	08da      	lsrs	r2, r3, #3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3208      	adds	r2, #8
 80013f8:	69b9      	ldr	r1, [r7, #24]
 80013fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	2203      	movs	r2, #3
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 0203 	and.w	r2, r3, #3
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4313      	orrs	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69ba      	ldr	r2, [r7, #24]
 8001430:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143a:	2b00      	cmp	r3, #0
 800143c:	f000 80e0 	beq.w	8001600 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001440:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <HAL_GPIO_Init+0x238>)
 8001442:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001446:	4a2e      	ldr	r2, [pc, #184]	; (8001500 <HAL_GPIO_Init+0x238>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <HAL_GPIO_Init+0x238>)
 8001452:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a29      	ldr	r2, [pc, #164]	; (8001504 <HAL_GPIO_Init+0x23c>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <HAL_GPIO_Init+0x240>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d052      	beq.n	8001530 <HAL_GPIO_Init+0x268>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a1f      	ldr	r2, [pc, #124]	; (800150c <HAL_GPIO_Init+0x244>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d031      	beq.n	80014f6 <HAL_GPIO_Init+0x22e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_GPIO_Init+0x248>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d02b      	beq.n	80014f2 <HAL_GPIO_Init+0x22a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_GPIO_Init+0x24c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x226>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a1c      	ldr	r2, [pc, #112]	; (8001518 <HAL_GPIO_Init+0x250>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x222>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_GPIO_Init+0x254>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x21e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <HAL_GPIO_Init+0x258>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x21a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x25c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x216>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a18      	ldr	r2, [pc, #96]	; (8001528 <HAL_GPIO_Init+0x260>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x212>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a17      	ldr	r2, [pc, #92]	; (800152c <HAL_GPIO_Init+0x264>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x20e>
 80014d2:	2309      	movs	r3, #9
 80014d4:	e02d      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014d6:	230a      	movs	r3, #10
 80014d8:	e02b      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014da:	2308      	movs	r3, #8
 80014dc:	e029      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014de:	2307      	movs	r3, #7
 80014e0:	e027      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014e2:	2306      	movs	r3, #6
 80014e4:	e025      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014e6:	2305      	movs	r3, #5
 80014e8:	e023      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014ea:	2304      	movs	r3, #4
 80014ec:	e021      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e01f      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e01d      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e01b      	b.n	8001532 <HAL_GPIO_Init+0x26a>
 80014fa:	bf00      	nop
 80014fc:	58000080 	.word	0x58000080
 8001500:	58024400 	.word	0x58024400
 8001504:	58000400 	.word	0x58000400
 8001508:	58020000 	.word	0x58020000
 800150c:	58020400 	.word	0x58020400
 8001510:	58020800 	.word	0x58020800
 8001514:	58020c00 	.word	0x58020c00
 8001518:	58021000 	.word	0x58021000
 800151c:	58021400 	.word	0x58021400
 8001520:	58021800 	.word	0x58021800
 8001524:	58021c00 	.word	0x58021c00
 8001528:	58022000 	.word	0x58022000
 800152c:	58022400 	.word	0x58022400
 8001530:	2300      	movs	r3, #0
 8001532:	69fa      	ldr	r2, [r7, #28]
 8001534:	f002 0203 	and.w	r2, r2, #3
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	4093      	lsls	r3, r2
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	4313      	orrs	r3, r2
 8001540:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001542:	4938      	ldr	r1, [pc, #224]	; (8001624 <HAL_GPIO_Init+0x35c>)
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	089b      	lsrs	r3, r3, #2
 8001548:	3302      	adds	r3, #2
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	43db      	mvns	r3, r3
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4013      	ands	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800157e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	43db      	mvns	r3, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4013      	ands	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	3301      	adds	r3, #1
 8001604:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f ae63 	bne.w	80012dc <HAL_GPIO_Init+0x14>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	3724      	adds	r7, #36	; 0x24
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	58000400 	.word	0x58000400

08001628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	807b      	strh	r3, [r7, #2]
 8001634:	4613      	mov	r3, r2
 8001636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001638:	787b      	ldrb	r3, [r7, #1]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800163e:	887a      	ldrh	r2, [r7, #2]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001644:	e003      	b.n	800164e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001646:	887b      	ldrh	r3, [r7, #2]
 8001648:	041a      	lsls	r2, r3, #16
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	619a      	str	r2, [r3, #24]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	460b      	mov	r3, r1
 8001664:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800166c:	887a      	ldrh	r2, [r7, #2]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	041a      	lsls	r2, r3, #16
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43d9      	mvns	r1, r3
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	400b      	ands	r3, r1
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001698:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_HSEM_FastTake+0x2c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3320      	adds	r3, #32
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_HSEM_FastTake+0x30>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	58026400 	.word	0x58026400
 80016c0:	80000300 	.word	0x80000300

080016c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016ce:	4906      	ldr	r1, [pc, #24]	; (80016e8 <HAL_HSEM_Release+0x24>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58026400 	.word	0x58026400

080016ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016f4:	4b29      	ldr	r3, [pc, #164]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d00a      	beq.n	8001716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e040      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e03e      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001716:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800171e:	491f      	ldr	r1, [pc, #124]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001726:	f7ff fcaf 	bl	8001088 <HAL_GetTick>
 800172a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800172c:	e009      	b.n	8001742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800172e:	f7ff fcab 	bl	8001088 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800173c:	d901      	bls.n	8001742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e028      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001742:	4b16      	ldr	r3, [pc, #88]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800174a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174e:	d1ee      	bne.n	800172e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b1e      	cmp	r3, #30
 8001754:	d008      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b2e      	cmp	r3, #46	; 0x2e
 800175a:	d005      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b1d      	cmp	r3, #29
 8001760:	d002      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b2d      	cmp	r3, #45	; 0x2d
 8001766:	d114      	bne.n	8001792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001768:	f7ff fc8e 	bl	8001088 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176e:	e009      	b.n	8001784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001770:	f7ff fc8a 	bl	8001088 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800177e:	d901      	bls.n	8001784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e007      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001790:	d1ee      	bne.n	8001770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58024800 	.word	0x58024800

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	; 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f000 bc48 	b.w	8002044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8088 	beq.w	80018d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b99      	ldr	r3, [pc, #612]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017cc:	4b96      	ldr	r3, [pc, #600]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d007      	beq.n	80017e8 <HAL_RCC_OscConfig+0x48>
 80017d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017da:	2b18      	cmp	r3, #24
 80017dc:	d111      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d06d      	beq.n	80018d0 <HAL_RCC_OscConfig+0x130>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d169      	bne.n	80018d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f000 bc21 	b.w	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x7a>
 800180c:	4b86      	ldr	r3, [pc, #536]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a85      	ldr	r2, [pc, #532]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x9c>
 8001822:	4b81      	ldr	r3, [pc, #516]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a80      	ldr	r2, [pc, #512]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7e      	ldr	r3, [pc, #504]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7d      	ldr	r2, [pc, #500]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xc0>
 8001846:	4b78      	ldr	r3, [pc, #480]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b75      	ldr	r3, [pc, #468]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a74      	ldr	r2, [pc, #464]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 8001860:	4b71      	ldr	r3, [pc, #452]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a70      	ldr	r2, [pc, #448]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6e      	ldr	r3, [pc, #440]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6d      	ldr	r2, [pc, #436]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fc02 	bl	8001088 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fbfe 	bl	8001088 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e3d4      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189a:	4b63      	ldr	r3, [pc, #396]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fbee 	bl	8001088 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fbea 	bl	8001088 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e3c0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c2:	4b59      	ldr	r3, [pc, #356]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x110>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80ca 	beq.w	8001a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4b51      	ldr	r3, [pc, #324]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ea:	4b4f      	ldr	r3, [pc, #316]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0x166>
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	d156      	bne.n	80019aa <HAL_RCC_OscConfig+0x20a>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d151      	bne.n	80019aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x17e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e392      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800191e:	4b42      	ldr	r3, [pc, #264]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0219 	bic.w	r2, r3, #25
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	493f      	ldr	r1, [pc, #252]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fbaa 	bl	8001088 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fba6 	bl	8001088 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e37c      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194a:	4b37      	ldr	r3, [pc, #220]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	f7ff fbc7 	bl	80010e8 <HAL_GetREVID>
 800195a:	4603      	mov	r3, r0
 800195c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001960:	4293      	cmp	r3, r2
 8001962:	d817      	bhi.n	8001994 <HAL_RCC_OscConfig+0x1f4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b40      	cmp	r3, #64	; 0x40
 800196a:	d108      	bne.n	800197e <HAL_RCC_OscConfig+0x1de>
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001974:	4a2c      	ldr	r2, [pc, #176]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e07a      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	4926      	ldr	r1, [pc, #152]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001992:	e06f      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	4921      	ldr	r1, [pc, #132]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a8:	e064      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d047      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019b2:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0219 	bic.w	r2, r3, #25
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	491a      	ldr	r1, [pc, #104]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb60 	bl	8001088 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fb5c 	bl	8001088 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e332      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019de:	4b12      	ldr	r3, [pc, #72]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	f7ff fb7d 	bl	80010e8 <HAL_GetREVID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d819      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x28c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b40      	cmp	r3, #64	; 0x40
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x272>
 8001a00:	4b09      	ldr	r3, [pc, #36]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a0e:	6053      	str	r3, [r2, #4]
 8001a10:	e030      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	4901      	ldr	r1, [pc, #4]	; (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e025      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	4b9a      	ldr	r3, [pc, #616]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	4997      	ldr	r1, [pc, #604]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e018      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b95      	ldr	r3, [pc, #596]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a94      	ldr	r2, [pc, #592]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb1b 	bl	8001088 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb17 	bl	8001088 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e2ed      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a68:	4b8b      	ldr	r3, [pc, #556]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a9 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b85      	ldr	r3, [pc, #532]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a8c:	4b82      	ldr	r3, [pc, #520]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x308>
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b18      	cmp	r3, #24
 8001a9c:	d13a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x374>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d135      	bne.n	8001b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x320>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b80      	cmp	r3, #128	; 0x80
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2c1      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac0:	f7ff fb12 	bl	80010e8 <HAL_GetREVID>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f241 0203 	movw	r2, #4099	; 0x1003
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d817      	bhi.n	8001afe <HAL_RCC_OscConfig+0x35e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d108      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x348>
 8001ad6:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001ade:	4a6e      	ldr	r2, [pc, #440]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae6:	e075      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	4968      	ldr	r1, [pc, #416]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001afc:	e06a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afe:	4b66      	ldr	r3, [pc, #408]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	061b      	lsls	r3, r3, #24
 8001b0c:	4962      	ldr	r1, [pc, #392]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b12:	e05f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d042      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff faae 	bl	8001088 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b30:	f7ff faaa 	bl	8001088 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e280      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b42:	4b55      	ldr	r3, [pc, #340]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4e:	f7ff facb 	bl	80010e8 <HAL_GetREVID>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d817      	bhi.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d108      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3d6>
 8001b64:	4b4c      	ldr	r3, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
 8001b76:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	069b      	lsls	r3, r3, #26
 8001b84:	4944      	ldr	r1, [pc, #272]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e023      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	493f      	ldr	r1, [pc, #252]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff fa6b 	bl	8001088 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fa67 	bl	8001088 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e23d      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d036      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bec:	4a2a      	ldr	r2, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa48 	bl	8001088 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa44 	bl	8001088 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e21a      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x45c>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c20:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff fa2e 	bl	8001088 <HAL_GetTick>
 8001c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fa2a 	bl	8001088 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e200      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d039      	beq.n	8001cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c62:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fa0b 	bl	8001088 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff fa07 	bl	8001088 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1dd      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c88:	4b03      	ldr	r3, [pc, #12]	; (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
 8001c94:	e01b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a9a      	ldr	r2, [pc, #616]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff f9ee 	bl	8001088 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb0:	f7ff f9ea 	bl	8001088 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1c0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cc2:	4b92      	ldr	r3, [pc, #584]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8081 	beq.w	8001dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cdc:	4b8c      	ldr	r3, [pc, #560]	; (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a8b      	ldr	r2, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff f9ce 	bl	8001088 <HAL_GetTick>
 8001cec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7ff f9ca 	bl	8001088 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	; 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1a0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d02:	4b83      	ldr	r3, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x584>
 8001d16:	4b7d      	ldr	r3, [pc, #500]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	4a7c      	ldr	r2, [pc, #496]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6713      	str	r3, [r2, #112]	; 0x70
 8001d22:	e02d      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5a6>
 8001d2c:	4b77      	ldr	r3, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a76      	ldr	r2, [pc, #472]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
 8001d38:	4b74      	ldr	r3, [pc, #464]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3c:	4a73      	ldr	r2, [pc, #460]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5c8>
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d52:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	; 0x70
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d5e:	4a6b      	ldr	r2, [pc, #428]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	; 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d68:	4b68      	ldr	r3, [pc, #416]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a67      	ldr	r2, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d78:	4a64      	ldr	r2, [pc, #400]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f97e 	bl	8001088 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f97a 	bl	8001088 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e14e      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da6:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x5f0>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f968 	bl	8001088 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f964 	bl	8001088 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e138      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 812d 	beq.w	8002042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001de8:	4b48      	ldr	r3, [pc, #288]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001df0:	2b18      	cmp	r3, #24
 8001df2:	f000 80bd 	beq.w	8001f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	f040 809e 	bne.w	8001f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b42      	ldr	r3, [pc, #264]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a41      	ldr	r2, [pc, #260]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f93c 	bl	8001088 <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f938 	bl	8001088 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e10e      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e26:	4b39      	ldr	r3, [pc, #228]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e32:	4b36      	ldr	r3, [pc, #216]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x774>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4931      	ldr	r1, [pc, #196]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	628b      	str	r3, [r1, #40]	; 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	3b01      	subs	r3, #1
 8001e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e66:	3b01      	subs	r3, #1
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e74:	3b01      	subs	r3, #1
 8001e76:	061b      	lsls	r3, r3, #24
 8001e78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e7c:	4923      	ldr	r1, [pc, #140]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	4a21      	ldr	r2, [pc, #132]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e92:	4b21      	ldr	r3, [pc, #132]	; (8001f18 <HAL_RCC_OscConfig+0x778>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	491b      	ldr	r1, [pc, #108]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	f023 020c 	bic.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	4917      	ldr	r1, [pc, #92]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	f023 0202 	bic.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	4912      	ldr	r1, [pc, #72]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	4a10      	ldr	r2, [pc, #64]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001edc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f8c1 	bl	8001088 <HAL_GetTick>
 8001f06:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f08:	e011      	b.n	8001f2e <HAL_RCC_OscConfig+0x78e>
 8001f0a:	bf00      	nop
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	58024800 	.word	0x58024800
 8001f14:	fffffc0c 	.word	0xfffffc0c
 8001f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f8b4 	bl	8001088 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e08a      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x77c>
 8001f3a:	e082      	b.n	8002042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a42      	ldr	r2, [pc, #264]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f89e 	bl	8001088 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f89a 	bl	8001088 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e070      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f62:	4b3a      	ldr	r3, [pc, #232]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x7b0>
 8001f6e:	e068      	b.n	8002042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f70:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f76:	4b35      	ldr	r3, [pc, #212]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d031      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d12a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d122      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0a5b      	lsrs	r3, r3, #9
 8001fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d111      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0c1b      	lsrs	r3, r3, #16
 8001fc8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0e1b      	lsrs	r3, r3, #24
 8001fda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e02b      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d01f      	beq.n	8002042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200e:	f7ff f83b 	bl	8001088 <HAL_GetTick>
 8002012:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002014:	bf00      	nop
 8002016:	f7ff f837 	bl	8001088 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	4293      	cmp	r3, r2
 8002020:	d0f9      	beq.n	8002016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002024:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_OscConfig+0x8b0>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	4906      	ldr	r1, [pc, #24]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	4a04      	ldr	r2, [pc, #16]	; (800204c <HAL_RCC_OscConfig+0x8ac>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3730      	adds	r7, #48	; 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58024400 	.word	0x58024400
 8002050:	ffff0007 	.word	0xffff0007

08002054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e19c      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b8a      	ldr	r3, [pc, #552]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b87      	ldr	r3, [pc, #540]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	4985      	ldr	r1, [pc, #532]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b83      	ldr	r3, [pc, #524]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e184      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b7b      	ldr	r3, [pc, #492]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d908      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b4:	4b78      	ldr	r3, [pc, #480]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4975      	ldr	r1, [pc, #468]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	4b70      	ldr	r3, [pc, #448]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020de:	429a      	cmp	r2, r3
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020e2:	4b6d      	ldr	r3, [pc, #436]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	496a      	ldr	r1, [pc, #424]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	4b64      	ldr	r3, [pc, #400]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800210c:	429a      	cmp	r2, r3
 800210e:	d908      	bls.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002110:	4b61      	ldr	r3, [pc, #388]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	495e      	ldr	r1, [pc, #376]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	4b59      	ldr	r3, [pc, #356]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213a:	429a      	cmp	r2, r3
 800213c:	d908      	bls.n	8002150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800213e:	4b56      	ldr	r3, [pc, #344]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4953      	ldr	r1, [pc, #332]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 800214c:	4313      	orrs	r3, r2
 800214e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b4d      	ldr	r3, [pc, #308]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b4a      	ldr	r3, [pc, #296]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f023 020f 	bic.w	r2, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4947      	ldr	r1, [pc, #284]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 800217a:	4313      	orrs	r3, r2
 800217c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d055      	beq.n	8002236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800218a:	4b43      	ldr	r3, [pc, #268]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4940      	ldr	r1, [pc, #256]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a4:	4b3c      	ldr	r3, [pc, #240]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0f6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021bc:	4b36      	ldr	r3, [pc, #216]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0ea      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d4:	4b30      	ldr	r3, [pc, #192]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0de      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e4:	4b2c      	ldr	r3, [pc, #176]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f4:	4b28      	ldr	r3, [pc, #160]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f023 0207 	bic.w	r2, r3, #7
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4925      	ldr	r1, [pc, #148]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002202:	4313      	orrs	r3, r2
 8002204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002206:	f7fe ff3f 	bl	8001088 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	e00a      	b.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220e:	f7fe ff3b 	bl	8001088 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	; 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0be      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002224:	4b1c      	ldr	r3, [pc, #112]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	429a      	cmp	r2, r3
 8002234:	d1eb      	bne.n	800220e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b14      	ldr	r3, [pc, #80]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002252:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	490e      	ldr	r1, [pc, #56]	; (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002260:	4313      	orrs	r3, r2
 8002262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d214      	bcs.n	800229c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	4906      	ldr	r1, [pc, #24]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e086      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
 8002294:	52002000 	.word	0x52002000
 8002298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	4b3f      	ldr	r3, [pc, #252]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b8:	4b3c      	ldr	r3, [pc, #240]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4939      	ldr	r1, [pc, #228]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d208      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	492e      	ldr	r1, [pc, #184]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	4b28      	ldr	r3, [pc, #160]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002314:	4b25      	ldr	r3, [pc, #148]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4922      	ldr	r1, [pc, #136]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002322:	4313      	orrs	r3, r2
 8002324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b1d      	ldr	r3, [pc, #116]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d208      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4917      	ldr	r1, [pc, #92]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002350:	4313      	orrs	r3, r2
 8002352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002354:	f000 f834 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4912      	ldr	r1, [pc, #72]	; (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002372:	4b0e      	ldr	r3, [pc, #56]	; (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	4a0d      	ldr	r2, [pc, #52]	; (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	4a0a      	ldr	r2, [pc, #40]	; (80023b4 <HAL_RCC_ClockConfig+0x360>)
 800238a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_RCC_ClockConfig+0x364>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_RCC_ClockConfig+0x368>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fe2c 	bl	8000ff4 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024400 	.word	0x58024400
 80023b0:	08006804 	.word	0x08006804
 80023b4:	24000004 	.word	0x24000004
 80023b8:	24000000 	.word	0x24000000
 80023bc:	24000008 	.word	0x24000008

080023c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	; 0x24
 80023c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c6:	4bb3      	ldr	r3, [pc, #716]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023ce:	2b18      	cmp	r3, #24
 80023d0:	f200 8155 	bhi.w	800267e <HAL_RCC_GetSysClockFreq+0x2be>
 80023d4:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	08002441 	.word	0x08002441
 80023e0:	0800267f 	.word	0x0800267f
 80023e4:	0800267f 	.word	0x0800267f
 80023e8:	0800267f 	.word	0x0800267f
 80023ec:	0800267f 	.word	0x0800267f
 80023f0:	0800267f 	.word	0x0800267f
 80023f4:	0800267f 	.word	0x0800267f
 80023f8:	0800267f 	.word	0x0800267f
 80023fc:	08002467 	.word	0x08002467
 8002400:	0800267f 	.word	0x0800267f
 8002404:	0800267f 	.word	0x0800267f
 8002408:	0800267f 	.word	0x0800267f
 800240c:	0800267f 	.word	0x0800267f
 8002410:	0800267f 	.word	0x0800267f
 8002414:	0800267f 	.word	0x0800267f
 8002418:	0800267f 	.word	0x0800267f
 800241c:	0800246d 	.word	0x0800246d
 8002420:	0800267f 	.word	0x0800267f
 8002424:	0800267f 	.word	0x0800267f
 8002428:	0800267f 	.word	0x0800267f
 800242c:	0800267f 	.word	0x0800267f
 8002430:	0800267f 	.word	0x0800267f
 8002434:	0800267f 	.word	0x0800267f
 8002438:	0800267f 	.word	0x0800267f
 800243c:	08002473 	.word	0x08002473
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002440:	4b94      	ldr	r3, [pc, #592]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d009      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800244c:	4b91      	ldr	r3, [pc, #580]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	08db      	lsrs	r3, r3, #3
 8002452:	f003 0303 	and.w	r3, r3, #3
 8002456:	4a90      	ldr	r2, [pc, #576]	; (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002458:	fa22 f303 	lsr.w	r3, r2, r3
 800245c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800245e:	e111      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002460:	4b8d      	ldr	r3, [pc, #564]	; (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002462:	61bb      	str	r3, [r7, #24]
      break;
 8002464:	e10e      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002466:	4b8d      	ldr	r3, [pc, #564]	; (800269c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002468:	61bb      	str	r3, [r7, #24]
      break;
 800246a:	e10b      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800246c:	4b8c      	ldr	r3, [pc, #560]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800246e:	61bb      	str	r3, [r7, #24]
      break;
 8002470:	e108      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002472:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800247c:	4b85      	ldr	r3, [pc, #532]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002486:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002488:	4b82      	ldr	r3, [pc, #520]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002496:	08db      	lsrs	r3, r3, #3
 8002498:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80e1 	beq.w	8002678 <HAL_RCC_GetSysClockFreq+0x2b8>
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	f000 8083 	beq.w	80025c4 <HAL_RCC_GetSysClockFreq+0x204>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	f200 80a1 	bhi.w	8002608 <HAL_RCC_GetSysClockFreq+0x248>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x114>
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d056      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024d2:	e099      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024d4:	4b6f      	ldr	r3, [pc, #444]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0320 	and.w	r3, r3, #32
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d02d      	beq.n	800253c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80024e0:	4b6c      	ldr	r3, [pc, #432]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	08db      	lsrs	r3, r3, #3
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	4a6b      	ldr	r2, [pc, #428]	; (8002698 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	ee07 3a90 	vmov	s15, r3
 8002502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800251a:	ed97 6a02 	vldr	s12, [r7, #8]
 800251e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800252a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002536:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800253a:	e087      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002546:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800254a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254e:	4b51      	ldr	r3, [pc, #324]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002562:	eddf 5a50 	vldr	s11, [pc, #320]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800256a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800257a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257e:	e065      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800258e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002592:	4b40      	ldr	r3, [pc, #256]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259a:	ee07 3a90 	vmov	s15, r3
 800259e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025c2:	e043      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d6:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002606:	e021      	b.n	800264c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002612:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8002616:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262a:	ed97 6a02 	vldr	s12, [r7, #8]
 800262e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80026a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002632:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002636:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800263e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002642:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002646:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800264a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800264c:	4b11      	ldr	r3, [pc, #68]	; (8002694 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	0a5b      	lsrs	r3, r3, #9
 8002652:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002656:	3301      	adds	r3, #1
 8002658:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	ee07 3a90 	vmov	s15, r3
 8002660:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002664:	edd7 6a07 	vldr	s13, [r7, #28]
 8002668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002670:	ee17 3a90 	vmov	r3, s15
 8002674:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002676:	e005      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	61bb      	str	r3, [r7, #24]
      break;
 800267c:	e002      	b.n	8002684 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800267e:	4b07      	ldr	r3, [pc, #28]	; (800269c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002680:	61bb      	str	r3, [r7, #24]
      break;
 8002682:	bf00      	nop
  }

  return sysclockfreq;
 8002684:	69bb      	ldr	r3, [r7, #24]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3724      	adds	r7, #36	; 0x24
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	58024400 	.word	0x58024400
 8002698:	03d09000 	.word	0x03d09000
 800269c:	003d0900 	.word	0x003d0900
 80026a0:	017d7840 	.word	0x017d7840
 80026a4:	46000000 	.word	0x46000000
 80026a8:	4c742400 	.word	0x4c742400
 80026ac:	4a742400 	.word	0x4a742400
 80026b0:	4bbebc20 	.word	0x4bbebc20

080026b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026ba:	f7ff fe81 	bl	80023c0 <HAL_RCC_GetSysClockFreq>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_RCC_GetHCLKFreq+0x50>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	490f      	ldr	r1, [pc, #60]	; (8002708 <HAL_RCC_GetHCLKFreq+0x54>)
 80026cc:	5ccb      	ldrb	r3, [r1, r3]
 80026ce:	f003 031f 	and.w	r3, r3, #31
 80026d2:	fa22 f303 	lsr.w	r3, r2, r3
 80026d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <HAL_RCC_GetHCLKFreq+0x50>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f003 030f 	and.w	r3, r3, #15
 80026e0:	4a09      	ldr	r2, [pc, #36]	; (8002708 <HAL_RCC_GetHCLKFreq+0x54>)
 80026e2:	5cd3      	ldrb	r3, [r2, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_RCC_GetHCLKFreq+0x58>)
 80026f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026f2:	4a07      	ldr	r2, [pc, #28]	; (8002710 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026f8:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_RCC_GetHCLKFreq+0x58>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	58024400 	.word	0x58024400
 8002708:	08006804 	.word	0x08006804
 800270c:	24000004 	.word	0x24000004
 8002710:	24000000 	.word	0x24000000

08002714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002718:	f7ff ffcc 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 800271c:	4602      	mov	r2, r0
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	091b      	lsrs	r3, r3, #4
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <HAL_RCC_GetPCLK1Freq+0x28>)
 800272a:	5ccb      	ldrb	r3, [r1, r3]
 800272c:	f003 031f 	and.w	r3, r3, #31
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	58024400 	.word	0x58024400
 800273c:	08006804 	.word	0x08006804

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002744:	f7ff ffb6 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b06      	ldr	r3, [pc, #24]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800274c:	69db      	ldr	r3, [r3, #28]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	f003 031f 	and.w	r3, r3, #31
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	58024400 	.word	0x58024400
 8002768:	08006804 	.word	0x08006804

0800276c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800276c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002770:	b0ca      	sub	sp, #296	; 0x128
 8002772:	af00      	add	r7, sp, #0
 8002774:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002778:	2300      	movs	r3, #0
 800277a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800277e:	2300      	movs	r3, #0
 8002780:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002790:	2500      	movs	r5, #0
 8002792:	ea54 0305 	orrs.w	r3, r4, r5
 8002796:	d049      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800279c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800279e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a2:	d02f      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80027a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a8:	d828      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ae:	d01a      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80027b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b4:	d822      	bhi.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027be:	d007      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027c0:	e01c      	b.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c2:	4bb8      	ldr	r3, [pc, #736]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	4ab7      	ldr	r2, [pc, #732]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027ce:	e01a      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80027d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d4:	3308      	adds	r3, #8
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 fc8f 	bl	80040fc <RCCEx_PLL2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027e4:	e00f      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80027e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027ea:	3328      	adds	r3, #40	; 0x28
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f001 fd36 	bl	8004260 <RCCEx_PLL3_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027fa:	e004      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002802:	e000      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002806:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800280e:	4ba5      	ldr	r3, [pc, #660]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002812:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800281a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800281c:	4aa1      	ldr	r2, [pc, #644]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800281e:	430b      	orrs	r3, r1
 8002820:	6513      	str	r3, [r2, #80]	; 0x50
 8002822:	e003      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002824:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002828:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800282c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002838:	f04f 0900 	mov.w	r9, #0
 800283c:	ea58 0309 	orrs.w	r3, r8, r9
 8002840:	d047      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	2b04      	cmp	r3, #4
 800284a:	d82a      	bhi.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800284c:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800284e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002852:	bf00      	nop
 8002854:	08002869 	.word	0x08002869
 8002858:	08002877 	.word	0x08002877
 800285c:	0800288d 	.word	0x0800288d
 8002860:	080028ab 	.word	0x080028ab
 8002864:	080028ab 	.word	0x080028ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002868:	4b8e      	ldr	r3, [pc, #568]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	4a8d      	ldr	r2, [pc, #564]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800286e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002872:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002874:	e01a      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800287a:	3308      	adds	r3, #8
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f001 fc3c 	bl	80040fc <RCCEx_PLL2_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800288a:	e00f      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800288c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002890:	3328      	adds	r3, #40	; 0x28
 8002892:	2100      	movs	r1, #0
 8002894:	4618      	mov	r0, r3
 8002896:	f001 fce3 	bl	8004260 <RCCEx_PLL3_Config>
 800289a:	4603      	mov	r3, r0
 800289c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80028a0:	e004      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80028a8:	e000      	b.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80028aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028b4:	4b7b      	ldr	r3, [pc, #492]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b8:	f023 0107 	bic.w	r1, r3, #7
 80028bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	4a78      	ldr	r2, [pc, #480]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6513      	str	r3, [r2, #80]	; 0x50
 80028c8:	e003      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80028ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80028de:	f04f 0b00 	mov.w	fp, #0
 80028e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80028e6:	d04c      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f2:	d030      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028f8:	d829      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028fa:	2bc0      	cmp	r3, #192	; 0xc0
 80028fc:	d02d      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028fe:	2bc0      	cmp	r3, #192	; 0xc0
 8002900:	d825      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d018      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d821      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800290a:	2b00      	cmp	r3, #0
 800290c:	d002      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d007      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002912:	e01c      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	4a62      	ldr	r2, [pc, #392]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002920:	e01c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002926:	3308      	adds	r3, #8
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fbe6 	bl	80040fc <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002936:	e011      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293c:	3328      	adds	r3, #40	; 0x28
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fc8d 	bl	8004260 <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800295a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002964:	4b4f      	ldr	r3, [pc, #316]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002968:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800296c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002974:	430b      	orrs	r3, r1
 8002976:	6513      	str	r3, [r2, #80]	; 0x50
 8002978:	e003      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800297e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002982:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800298e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002992:	2300      	movs	r3, #0
 8002994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002998:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800299c:	460b      	mov	r3, r1
 800299e:	4313      	orrs	r3, r2
 80029a0:	d053      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029aa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029ae:	d035      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80029b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80029b4:	d82e      	bhi.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029ba:	d031      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80029bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80029c0:	d828      	bhi.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029c6:	d01a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80029c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029cc:	d822      	bhi.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80029d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029d6:	d007      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80029d8:	e01c      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	4a31      	ldr	r2, [pc, #196]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029e6:	e01c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ec:	3308      	adds	r3, #8
 80029ee:	2100      	movs	r1, #0
 80029f0:	4618      	mov	r0, r3
 80029f2:	f001 fb83 	bl	80040fc <RCCEx_PLL2_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029fc:	e011      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a02:	3328      	adds	r3, #40	; 0x28
 8002a04:	2100      	movs	r1, #0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fc2a 	bl	8004260 <RCCEx_PLL3_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a12:	e006      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a1c:	bf00      	nop
 8002a1e:	e000      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d10b      	bne.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a3a:	4a1a      	ldr	r2, [pc, #104]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a3c:	430b      	orrs	r3, r1
 8002a3e:	6593      	str	r3, [r2, #88]	; 0x58
 8002a40:	e003      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002a46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a52:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a64:	460b      	mov	r3, r1
 8002a66:	4313      	orrs	r3, r2
 8002a68:	d056      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a76:	d038      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7c:	d831      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a82:	d034      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a88:	d82b      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a8e:	d01d      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a94:	d825      	bhi.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9e:	d00a      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002aa0:	e01f      	b.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa8:	4ba2      	ldr	r3, [pc, #648]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aac:	4aa1      	ldr	r2, [pc, #644]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ab2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ab4:	e01c      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002aba:	3308      	adds	r3, #8
 8002abc:	2100      	movs	r1, #0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f001 fb1c 	bl	80040fc <RCCEx_PLL2_Config>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002aca:	e011      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad0:	3328      	adds	r3, #40	; 0x28
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f001 fbc3 	bl	8004260 <RCCEx_PLL3_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae0:	e006      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ae8:	e002      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002aea:	bf00      	nop
 8002aec:	e000      	b.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002af8:	4b8e      	ldr	r3, [pc, #568]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b08:	4a8a      	ldr	r2, [pc, #552]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b0e:	e003      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002b32:	460b      	mov	r3, r1
 8002b34:	4313      	orrs	r3, r2
 8002b36:	d03a      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	2b30      	cmp	r3, #48	; 0x30
 8002b40:	d01f      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002b42:	2b30      	cmp	r3, #48	; 0x30
 8002b44:	d819      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d00c      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b4a:	2b20      	cmp	r3, #32
 8002b4c:	d815      	bhi.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d019      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b52:	2b10      	cmp	r3, #16
 8002b54:	d111      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b56:	4b77      	ldr	r3, [pc, #476]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	4a76      	ldr	r2, [pc, #472]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b62:	e011      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b68:	3308      	adds	r3, #8
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f001 fac5 	bl	80040fc <RCCEx_PLL2_Config>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b80:	e002      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b82:	bf00      	nop
 8002b84:	e000      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b90:	4b68      	ldr	r3, [pc, #416]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	4a65      	ldr	r2, [pc, #404]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002baa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002bba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002bc4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	d051      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d035      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002bda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bde:	d82e      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002be0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002be4:	d031      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002be6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002bea:	d828      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf0:	d01a      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002bf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf6:	d822      	bhi.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c00:	d007      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002c02:	e01c      	b.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c04:	4b4b      	ldr	r3, [pc, #300]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c10:	e01c      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c16:	3308      	adds	r3, #8
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 fa6e 	bl	80040fc <RCCEx_PLL2_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c26:	e011      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2c:	3328      	adds	r3, #40	; 0x28
 8002c2e:	2100      	movs	r1, #0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 fb15 	bl	8004260 <RCCEx_PLL3_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002c3c:	e006      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c46:	bf00      	nop
 8002c48:	e000      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d10a      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c54:	4b37      	ldr	r3, [pc, #220]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c64:	430b      	orrs	r3, r1
 8002c66:	6513      	str	r3, [r2, #80]	; 0x50
 8002c68:	e003      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	d056      	beq.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d033      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca2:	d82c      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002ca4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ca8:	d02f      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002caa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cae:	d826      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cb4:	d02b      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002cb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002cba:	d820      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc0:	d012      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc6:	d81a      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d022      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fa0e 	bl	80040fc <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ce6:	e015      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cec:	3328      	adds	r3, #40	; 0x28
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f001 fab5 	bl	8004260 <RCCEx_PLL3_Config>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d04:	e006      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d06:	bf00      	nop
 8002d08:	e004      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d0a:	bf00      	nop
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002d12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d20:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d2a:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	6513      	str	r3, [r2, #80]	; 0x50
 8002d30:	e006      	b.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002d32:	bf00      	nop
 8002d34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d48:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d50:	2300      	movs	r3, #0
 8002d52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	d055      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d6c:	d033      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d72:	d82c      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d02f      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d7e:	d826      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d84:	d02b      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d8a:	d820      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d012      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d96:	d81a      	bhi.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d022      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002da0:	d115      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da6:	3308      	adds	r3, #8
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 f9a6 	bl	80040fc <RCCEx_PLL2_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002db6:	e015      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dbc:	3328      	adds	r3, #40	; 0x28
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f001 fa4d 	bl	8004260 <RCCEx_PLL3_Config>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dd4:	e006      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dd6:	bf00      	nop
 8002dd8:	e004      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e002      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002dde:	bf00      	nop
 8002de0:	e000      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002dec:	4ba3      	ldr	r3, [pc, #652]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002df8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002dfc:	4a9f      	ldr	r2, [pc, #636]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	6593      	str	r3, [r2, #88]	; 0x58
 8002e02:	e003      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e14:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002e22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002e26:	460b      	mov	r3, r1
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	d037      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e36:	d00e      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002e38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e3c:	d816      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002e42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e46:	d111      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e48:	4b8c      	ldr	r3, [pc, #560]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e4c:	4a8b      	ldr	r2, [pc, #556]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e54:	e00f      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e5a:	3308      	adds	r3, #8
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f001 f94c 	bl	80040fc <RCCEx_PLL2_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e6a:	e004      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e72:	e000      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10a      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e7e:	4b7f      	ldr	r3, [pc, #508]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e82:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4a7b      	ldr	r2, [pc, #492]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6513      	str	r3, [r2, #80]	; 0x50
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002eb2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	d039      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d81c      	bhi.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002f09 	.word	0x08002f09
 8002ed0:	08002edd 	.word	0x08002edd
 8002ed4:	08002eeb 	.word	0x08002eeb
 8002ed8:	08002f09 	.word	0x08002f09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	4a66      	ldr	r2, [pc, #408]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ee2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ee6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ee8:	e00f      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eee:	3308      	adds	r3, #8
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 f902 	bl	80040fc <RCCEx_PLL2_Config>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002efe:	e004      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f06:	e000      	b.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f12:	4b5a      	ldr	r3, [pc, #360]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	f023 0103 	bic.w	r1, r3, #3
 8002f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f22:	430b      	orrs	r3, r1
 8002f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f26:	e003      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f38:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002f40:	2300      	movs	r3, #0
 8002f42:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002f46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f000 809f 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f52:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe f893 	bl	8001088 <HAL_GetTick>
 8002f62:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f66:	e00b      	b.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f68:	f7fe f88e 	bl	8001088 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f72:	1ad3      	subs	r3, r2, r3
 8002f74:	2b64      	cmp	r3, #100	; 0x64
 8002f76:	d903      	bls.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f7e:	e005      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f80:	4b3f      	ldr	r3, [pc, #252]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ed      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d179      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f94:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fa0:	4053      	eors	r3, r2
 8002fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d015      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002faa:	4b34      	ldr	r3, [pc, #208]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb6:	4b31      	ldr	r3, [pc, #196]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	4a30      	ldr	r2, [pc, #192]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a2d      	ldr	r2, [pc, #180]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002fce:	4a2b      	ldr	r2, [pc, #172]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d118      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe f850 	bl	8001088 <HAL_GetTick>
 8002fe8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fec:	e00d      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe f84b 	bl	8001088 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002ff8:	1ad2      	subs	r2, r2, r3
 8002ffa:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d903      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003008:	e005      	b.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800300a:	4b1c      	ldr	r3, [pc, #112]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0eb      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800301a:	2b00      	cmp	r3, #0
 800301c:	d129      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800301e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800302e:	d10e      	bne.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003040:	091a      	lsrs	r2, r3, #4
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003044:	4013      	ands	r3, r2
 8003046:	4a0d      	ldr	r2, [pc, #52]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003048:	430b      	orrs	r3, r1
 800304a:	6113      	str	r3, [r2, #16]
 800304c:	e005      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	4a0a      	ldr	r2, [pc, #40]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003054:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003058:	6113      	str	r3, [r2, #16]
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800305c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800305e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003062:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800306c:	430b      	orrs	r3, r1
 800306e:	6713      	str	r3, [r2, #112]	; 0x70
 8003070:	e00e      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003076:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800307a:	e009      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800307c:	58024400 	.word	0x58024400
 8003080:	58024800 	.word	0x58024800
 8003084:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800308c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f002 0301 	and.w	r3, r2, #1
 800309c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030a0:	2300      	movs	r3, #0
 80030a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f000 8089 	beq.w	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80030b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030b8:	2b28      	cmp	r3, #40	; 0x28
 80030ba:	d86b      	bhi.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	0800319d 	.word	0x0800319d
 80030c8:	08003195 	.word	0x08003195
 80030cc:	08003195 	.word	0x08003195
 80030d0:	08003195 	.word	0x08003195
 80030d4:	08003195 	.word	0x08003195
 80030d8:	08003195 	.word	0x08003195
 80030dc:	08003195 	.word	0x08003195
 80030e0:	08003195 	.word	0x08003195
 80030e4:	08003169 	.word	0x08003169
 80030e8:	08003195 	.word	0x08003195
 80030ec:	08003195 	.word	0x08003195
 80030f0:	08003195 	.word	0x08003195
 80030f4:	08003195 	.word	0x08003195
 80030f8:	08003195 	.word	0x08003195
 80030fc:	08003195 	.word	0x08003195
 8003100:	08003195 	.word	0x08003195
 8003104:	0800317f 	.word	0x0800317f
 8003108:	08003195 	.word	0x08003195
 800310c:	08003195 	.word	0x08003195
 8003110:	08003195 	.word	0x08003195
 8003114:	08003195 	.word	0x08003195
 8003118:	08003195 	.word	0x08003195
 800311c:	08003195 	.word	0x08003195
 8003120:	08003195 	.word	0x08003195
 8003124:	0800319d 	.word	0x0800319d
 8003128:	08003195 	.word	0x08003195
 800312c:	08003195 	.word	0x08003195
 8003130:	08003195 	.word	0x08003195
 8003134:	08003195 	.word	0x08003195
 8003138:	08003195 	.word	0x08003195
 800313c:	08003195 	.word	0x08003195
 8003140:	08003195 	.word	0x08003195
 8003144:	0800319d 	.word	0x0800319d
 8003148:	08003195 	.word	0x08003195
 800314c:	08003195 	.word	0x08003195
 8003150:	08003195 	.word	0x08003195
 8003154:	08003195 	.word	0x08003195
 8003158:	08003195 	.word	0x08003195
 800315c:	08003195 	.word	0x08003195
 8003160:	08003195 	.word	0x08003195
 8003164:	0800319d 	.word	0x0800319d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003168:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316c:	3308      	adds	r3, #8
 800316e:	2101      	movs	r1, #1
 8003170:	4618      	mov	r0, r3
 8003172:	f000 ffc3 	bl	80040fc <RCCEx_PLL2_Config>
 8003176:	4603      	mov	r3, r0
 8003178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800317c:	e00f      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003182:	3328      	adds	r3, #40	; 0x28
 8003184:	2101      	movs	r1, #1
 8003186:	4618      	mov	r0, r3
 8003188:	f001 f86a 	bl	8004260 <RCCEx_PLL3_Config>
 800318c:	4603      	mov	r3, r0
 800318e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800319a:	e000      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800319e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031a6:	4bbf      	ldr	r3, [pc, #764]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	4abb      	ldr	r2, [pc, #748]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031b6:	430b      	orrs	r3, r1
 80031b8:	6553      	str	r3, [r2, #84]	; 0x54
 80031ba:	e003      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031cc:	f002 0302 	and.w	r3, r2, #2
 80031d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031d4:	2300      	movs	r3, #0
 80031d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80031de:	460b      	mov	r3, r1
 80031e0:	4313      	orrs	r3, r2
 80031e2:	d041      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80031e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d824      	bhi.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031ee:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f4:	08003241 	.word	0x08003241
 80031f8:	0800320d 	.word	0x0800320d
 80031fc:	08003223 	.word	0x08003223
 8003200:	08003241 	.word	0x08003241
 8003204:	08003241 	.word	0x08003241
 8003208:	08003241 	.word	0x08003241
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003210:	3308      	adds	r3, #8
 8003212:	2101      	movs	r1, #1
 8003214:	4618      	mov	r0, r3
 8003216:	f000 ff71 	bl	80040fc <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003220:	e00f      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003226:	3328      	adds	r3, #40	; 0x28
 8003228:	2101      	movs	r1, #1
 800322a:	4618      	mov	r0, r3
 800322c:	f001 f818 	bl	8004260 <RCCEx_PLL3_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003236:	e004      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10a      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800324a:	4b96      	ldr	r3, [pc, #600]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800324c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324e:	f023 0107 	bic.w	r1, r3, #7
 8003252:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003258:	4a92      	ldr	r2, [pc, #584]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800325a:	430b      	orrs	r3, r1
 800325c:	6553      	str	r3, [r2, #84]	; 0x54
 800325e:	e003      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f002 0304 	and.w	r3, r2, #4
 8003274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800327e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003282:	460b      	mov	r3, r1
 8003284:	4313      	orrs	r3, r2
 8003286:	d044      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003290:	2b05      	cmp	r3, #5
 8003292:	d825      	bhi.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003294:	a201      	add	r2, pc, #4	; (adr r2, 800329c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800329a:	bf00      	nop
 800329c:	080032e9 	.word	0x080032e9
 80032a0:	080032b5 	.word	0x080032b5
 80032a4:	080032cb 	.word	0x080032cb
 80032a8:	080032e9 	.word	0x080032e9
 80032ac:	080032e9 	.word	0x080032e9
 80032b0:	080032e9 	.word	0x080032e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b8:	3308      	adds	r3, #8
 80032ba:	2101      	movs	r1, #1
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 ff1d 	bl	80040fc <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032c8:	e00f      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	3328      	adds	r3, #40	; 0x28
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ffc4 	bl	8004260 <RCCEx_PLL3_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80032de:	e004      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10b      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f2:	4b6c      	ldr	r3, [pc, #432]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f023 0107 	bic.w	r1, r3, #7
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003302:	4a68      	ldr	r2, [pc, #416]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003304:	430b      	orrs	r3, r1
 8003306:	6593      	str	r3, [r2, #88]	; 0x58
 8003308:	e003      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800330e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	f002 0320 	and.w	r3, r2, #32
 800331e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003322:	2300      	movs	r3, #0
 8003324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003328:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800332c:	460b      	mov	r3, r1
 800332e:	4313      	orrs	r3, r2
 8003330:	d055      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800333e:	d033      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003344:	d82c      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003346:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334a:	d02f      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d826      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003352:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003356:	d02b      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003358:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800335c:	d820      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800335e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003362:	d012      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003368:	d81a      	bhi.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800336a:	2b00      	cmp	r3, #0
 800336c:	d022      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800336e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003372:	d115      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003374:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003378:	3308      	adds	r3, #8
 800337a:	2100      	movs	r1, #0
 800337c:	4618      	mov	r0, r3
 800337e:	f000 febd 	bl	80040fc <RCCEx_PLL2_Config>
 8003382:	4603      	mov	r3, r0
 8003384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003388:	e015      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800338a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800338e:	3328      	adds	r3, #40	; 0x28
 8003390:	2102      	movs	r1, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f000 ff64 	bl	8004260 <RCCEx_PLL3_Config>
 8003398:	4603      	mov	r3, r0
 800339a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800339e:	e00a      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033a6:	e006      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033a8:	bf00      	nop
 80033aa:	e004      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033ac:	bf00      	nop
 80033ae:	e002      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033b0:	bf00      	nop
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80033b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80033be:	4b39      	ldr	r3, [pc, #228]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ce:	4a35      	ldr	r2, [pc, #212]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6553      	str	r3, [r2, #84]	; 0x54
 80033d4:	e003      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80033ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033ee:	2300      	movs	r3, #0
 80033f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d058      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003406:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800340a:	d033      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800340c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003410:	d82c      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003412:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003416:	d02f      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341c:	d826      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800341e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003422:	d02b      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003424:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003428:	d820      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800342a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800342e:	d012      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003430:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003434:	d81a      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003436:	2b00      	cmp	r3, #0
 8003438:	d022      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d115      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003444:	3308      	adds	r3, #8
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fe57 	bl	80040fc <RCCEx_PLL2_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003454:	e015      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345a:	3328      	adds	r3, #40	; 0x28
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f000 fefe 	bl	8004260 <RCCEx_PLL3_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800346a:	e00a      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003472:	e006      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003474:	bf00      	nop
 8003476:	e004      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003478:	bf00      	nop
 800347a:	e002      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800347c:	bf00      	nop
 800347e:	e000      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10e      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800349a:	4a02      	ldr	r2, [pc, #8]	; (80034a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800349c:	430b      	orrs	r3, r1
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	e006      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80034bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80034c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80034ca:	460b      	mov	r3, r1
 80034cc:	4313      	orrs	r3, r2
 80034ce:	d055      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80034d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034dc:	d033      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80034de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80034e2:	d82c      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e8:	d02f      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034ee:	d826      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034f4:	d02b      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034fa:	d820      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003500:	d012      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003506:	d81a      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800350c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003510:	d115      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003516:	3308      	adds	r3, #8
 8003518:	2100      	movs	r1, #0
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fdee 	bl	80040fc <RCCEx_PLL2_Config>
 8003520:	4603      	mov	r3, r0
 8003522:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003526:	e015      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003528:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800352c:	3328      	adds	r3, #40	; 0x28
 800352e:	2102      	movs	r1, #2
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fe95 	bl	8004260 <RCCEx_PLL3_Config>
 8003536:	4603      	mov	r3, r0
 8003538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800353c:	e00a      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003544:	e006      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003546:	bf00      	nop
 8003548:	e004      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800354a:	bf00      	nop
 800354c:	e002      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003554:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800355c:	4ba1      	ldr	r3, [pc, #644]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003560:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800356c:	4a9d      	ldr	r2, [pc, #628]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800356e:	430b      	orrs	r3, r1
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
 8003572:	e003      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f002 0308 	and.w	r3, r2, #8
 8003588:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003592:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d01e      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ae:	3328      	adds	r3, #40	; 0x28
 80035b0:	2102      	movs	r1, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fe54 	bl	8004260 <RCCEx_PLL3_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035c4:	4b87      	ldr	r3, [pc, #540]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035d4:	4a83      	ldr	r2, [pc, #524]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f002 0310 	and.w	r3, r2, #16
 80035e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035ea:	2300      	movs	r3, #0
 80035ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035f4:	460b      	mov	r3, r1
 80035f6:	4313      	orrs	r3, r2
 80035f8:	d01e      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003606:	d10c      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800360c:	3328      	adds	r3, #40	; 0x28
 800360e:	2102      	movs	r1, #2
 8003610:	4618      	mov	r0, r3
 8003612:	f000 fe25 	bl	8004260 <RCCEx_PLL3_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003622:	4b70      	ldr	r3, [pc, #448]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003632:	4a6c      	ldr	r2, [pc, #432]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003634:	430b      	orrs	r3, r1
 8003636:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800364e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003652:	460b      	mov	r3, r1
 8003654:	4313      	orrs	r3, r2
 8003656:	d03e      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003660:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003664:	d022      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003666:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800366a:	d81b      	bhi.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d00b      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003676:	e015      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	3308      	adds	r3, #8
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd3b 	bl	80040fc <RCCEx_PLL2_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800368c:	e00f      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003692:	3328      	adds	r3, #40	; 0x28
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fde2 	bl	8004260 <RCCEx_PLL3_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80036a2:	e004      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80036ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036b6:	4b4b      	ldr	r3, [pc, #300]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80036c6:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6593      	str	r3, [r2, #88]	; 0x58
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80036e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80036e4:	2300      	movs	r3, #0
 80036e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80036ec:	460b      	mov	r3, r1
 80036ee:	4313      	orrs	r3, r2
 80036f0:	d03b      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036fe:	d01f      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003700:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003704:	d818      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800370a:	d003      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800370c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003710:	d007      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003714:	4b33      	ldr	r3, [pc, #204]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800371a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003720:	e00f      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	3328      	adds	r3, #40	; 0x28
 8003728:	2101      	movs	r1, #1
 800372a:	4618      	mov	r0, r3
 800372c:	f000 fd98 	bl	8004260 <RCCEx_PLL3_Config>
 8003730:	4603      	mov	r3, r0
 8003732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003736:	e004      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800373e:	e000      	b.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800374c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800375c:	430b      	orrs	r3, r1
 800375e:	6553      	str	r3, [r2, #84]	; 0x54
 8003760:	e003      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003766:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800376e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003772:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003776:	673b      	str	r3, [r7, #112]	; 0x70
 8003778:	2300      	movs	r3, #0
 800377a:	677b      	str	r3, [r7, #116]	; 0x74
 800377c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003780:	460b      	mov	r3, r1
 8003782:	4313      	orrs	r3, r2
 8003784:	d034      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003794:	d007      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003798:	4b12      	ldr	r3, [pc, #72]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800379a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379c:	4a11      	ldr	r2, [pc, #68]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800379e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037a4:	e00e      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037aa:	3308      	adds	r3, #8
 80037ac:	2102      	movs	r1, #2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fca4 	bl	80040fc <RCCEx_PLL2_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10d      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80037cc:	4b05      	ldr	r3, [pc, #20]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037da:	4a02      	ldr	r2, [pc, #8]	; (80037e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80037dc:	430b      	orrs	r3, r1
 80037de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037e0:	e006      	b.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80037e2:	bf00      	nop
 80037e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80037fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80037fe:	2300      	movs	r3, #0
 8003800:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003802:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d00c      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003810:	3328      	adds	r3, #40	; 0x28
 8003812:	2102      	movs	r1, #2
 8003814:	4618      	mov	r0, r3
 8003816:	f000 fd23 	bl	8004260 <RCCEx_PLL3_Config>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d002      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003826:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800382a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003832:	663b      	str	r3, [r7, #96]	; 0x60
 8003834:	2300      	movs	r3, #0
 8003836:	667b      	str	r3, [r7, #100]	; 0x64
 8003838:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800383c:	460b      	mov	r3, r1
 800383e:	4313      	orrs	r3, r2
 8003840:	d038      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800384a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800384e:	d018      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003854:	d811      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003856:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800385a:	d014      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d80b      	bhi.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003862:	2b00      	cmp	r3, #0
 8003864:	d011      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800386a:	d106      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4bc3      	ldr	r3, [pc, #780]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	4ac2      	ldr	r2, [pc, #776]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003878:	e008      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003880:	e004      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003882:	bf00      	nop
 8003884:	e002      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800388a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800388c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003894:	4bb9      	ldr	r3, [pc, #740]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038a4:	4ab5      	ldr	r2, [pc, #724]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038a6:	430b      	orrs	r3, r1
 80038a8:	6553      	str	r3, [r2, #84]	; 0x54
 80038aa:	e003      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038bc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80038c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80038c2:	2300      	movs	r3, #0
 80038c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80038ca:	460b      	mov	r3, r1
 80038cc:	4313      	orrs	r3, r2
 80038ce:	d009      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038d0:	4baa      	ldr	r3, [pc, #680]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038de:	4aa7      	ldr	r2, [pc, #668]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038e0:	430b      	orrs	r3, r1
 80038e2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80038f0:	653b      	str	r3, [r7, #80]	; 0x50
 80038f2:	2300      	movs	r3, #0
 80038f4:	657b      	str	r3, [r7, #84]	; 0x54
 80038f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80038fa:	460b      	mov	r3, r1
 80038fc:	4313      	orrs	r3, r2
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003900:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003910:	4a9a      	ldr	r2, [pc, #616]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003912:	430b      	orrs	r3, r1
 8003914:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003916:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48
 8003924:	2300      	movs	r3, #0
 8003926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003928:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800392c:	460b      	mov	r3, r1
 800392e:	4313      	orrs	r3, r2
 8003930:	d009      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003932:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003936:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800393a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003940:	4a8e      	ldr	r2, [pc, #568]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003942:	430b      	orrs	r3, r1
 8003944:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800394a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003952:	643b      	str	r3, [r7, #64]	; 0x40
 8003954:	2300      	movs	r3, #0
 8003956:	647b      	str	r3, [r7, #68]	; 0x44
 8003958:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800395c:	460b      	mov	r3, r1
 800395e:	4313      	orrs	r3, r2
 8003960:	d00e      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003962:	4b86      	ldr	r3, [pc, #536]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	4a85      	ldr	r2, [pc, #532]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003968:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800396c:	6113      	str	r3, [r2, #16]
 800396e:	4b83      	ldr	r3, [pc, #524]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003970:	6919      	ldr	r1, [r3, #16]
 8003972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003976:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800397a:	4a80      	ldr	r2, [pc, #512]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800397c:	430b      	orrs	r3, r1
 800397e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003988:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800398c:	63bb      	str	r3, [r7, #56]	; 0x38
 800398e:	2300      	movs	r3, #0
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003992:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003996:	460b      	mov	r3, r1
 8003998:	4313      	orrs	r3, r2
 800399a:	d009      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800399c:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800399e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039aa:	4a74      	ldr	r2, [pc, #464]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ac:	430b      	orrs	r3, r1
 80039ae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
 80039be:	2300      	movs	r3, #0
 80039c0:	637b      	str	r3, [r7, #52]	; 0x34
 80039c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d00a      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80039cc:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039dc:	4a67      	ldr	r2, [pc, #412]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80039de:	430b      	orrs	r3, r1
 80039e0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80039e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	2100      	movs	r1, #0
 80039ec:	62b9      	str	r1, [r7, #40]	; 0x28
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80039f8:	460b      	mov	r3, r1
 80039fa:	4313      	orrs	r3, r2
 80039fc:	d011      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a02:	3308      	adds	r3, #8
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fb78 	bl	80040fc <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	6239      	str	r1, [r7, #32]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	d011      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a42:	3308      	adds	r3, #8
 8003a44:	2101      	movs	r1, #1
 8003a46:	4618      	mov	r0, r3
 8003a48:	f000 fb58 	bl	80040fc <RCCEx_PLL2_Config>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	61b9      	str	r1, [r7, #24]
 8003a6e:	f003 0304 	and.w	r3, r3, #4
 8003a72:	61fb      	str	r3, [r7, #28]
 8003a74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a82:	3308      	adds	r3, #8
 8003a84:	2102      	movs	r1, #2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fb38 	bl	80040fc <RCCEx_PLL2_Config>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aaa:	2100      	movs	r1, #0
 8003aac:	6139      	str	r1, [r7, #16]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4313      	orrs	r3, r2
 8003abc:	d011      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac2:	3328      	adds	r3, #40	; 0x28
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 fbca 	bl	8004260 <RCCEx_PLL3_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d003      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aea:	2100      	movs	r1, #0
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	f003 0310 	and.w	r3, r3, #16
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003af8:	460b      	mov	r3, r1
 8003afa:	4313      	orrs	r3, r2
 8003afc:	d011      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b02:	3328      	adds	r3, #40	; 0x28
 8003b04:	2101      	movs	r1, #1
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fbaa 	bl	8004260 <RCCEx_PLL3_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	6039      	str	r1, [r7, #0]
 8003b2e:	f003 0320 	and.w	r3, r3, #32
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	d011      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b42:	3328      	adds	r3, #40	; 0x28
 8003b44:	2102      	movs	r1, #2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f000 fb8a 	bl	8004260 <RCCEx_PLL3_Config>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003b62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e000      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003b76:	46bd      	mov	sp, r7
 8003b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b7c:	58024400 	.word	0x58024400

08003b80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b84:	f7fe fd96 	bl	80026b4 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4904      	ldr	r1, [pc, #16]	; (8003ba8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	f003 031f 	and.w	r3, r3, #31
 8003b9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	58024400 	.word	0x58024400
 8003ba8:	08006804 	.word	0x08006804

08003bac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bb4:	4ba1      	ldr	r3, [pc, #644]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003bbe:	4b9f      	ldr	r3, [pc, #636]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc2:	0b1b      	lsrs	r3, r3, #12
 8003bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003bca:	4b9c      	ldr	r3, [pc, #624]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003bd6:	4b99      	ldr	r3, [pc, #612]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8111 	beq.w	8003e1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	f000 8083 	beq.w	8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	f200 80a1 	bhi.w	8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d056      	beq.n	8003cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003c16:	e099      	b.n	8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c18:	4b88      	ldr	r3, [pc, #544]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d02d      	beq.n	8003c80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c24:	4b85      	ldr	r3, [pc, #532]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	08db      	lsrs	r3, r3, #3
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	4a84      	ldr	r2, [pc, #528]	; (8003e40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
 8003c34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	ee07 3a90 	vmov	s15, r3
 8003c3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	ee07 3a90 	vmov	s15, r3
 8003c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4e:	4b7b      	ldr	r3, [pc, #492]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c62:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c7e:	e087      	b.n	8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c92:	4b6a      	ldr	r3, [pc, #424]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cc2:	e065      	b.n	8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd6:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cea:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d06:	e043      	b.n	8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	ee07 3a90 	vmov	s15, r3
 8003d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d1a:	4b48      	ldr	r3, [pc, #288]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d4a:	e021      	b.n	8003d90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d5e:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d72:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d90:	4b2a      	ldr	r3, [pc, #168]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	0a5b      	lsrs	r3, r3, #9
 8003d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d9a:	ee07 3a90 	vmov	s15, r3
 8003d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003da6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003daa:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db6:	ee17 2a90 	vmov	r2, s15
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003dbe:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	0c1b      	lsrs	r3, r3, #16
 8003dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dc8:	ee07 3a90 	vmov	s15, r3
 8003dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003de4:	ee17 2a90 	vmov	r2, s15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003dec:	4b13      	ldr	r3, [pc, #76]	; (8003e3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df0:	0e1b      	lsrs	r3, r3, #24
 8003df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003df6:	ee07 3a90 	vmov	s15, r3
 8003dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003e02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e06:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e12:	ee17 2a90 	vmov	r2, s15
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003e1a:	e008      	b.n	8003e2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
}
 8003e2e:	bf00      	nop
 8003e30:	3724      	adds	r7, #36	; 0x24
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	03d09000 	.word	0x03d09000
 8003e44:	46000000 	.word	0x46000000
 8003e48:	4c742400 	.word	0x4c742400
 8003e4c:	4a742400 	.word	0x4a742400
 8003e50:	4bbebc20 	.word	0x4bbebc20

08003e54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b089      	sub	sp, #36	; 0x24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e5c:	4ba1      	ldr	r3, [pc, #644]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	f003 0303 	and.w	r3, r3, #3
 8003e64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e66:	4b9f      	ldr	r3, [pc, #636]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	0d1b      	lsrs	r3, r3, #20
 8003e6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e72:	4b9c      	ldr	r3, [pc, #624]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	0a1b      	lsrs	r3, r3, #8
 8003e78:	f003 0301 	and.w	r3, r3, #1
 8003e7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e7e:	4b99      	ldr	r3, [pc, #612]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	08db      	lsrs	r3, r3, #3
 8003e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	fb02 f303 	mul.w	r3, r2, r3
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 8111 	beq.w	80040c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	f000 8083 	beq.w	8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f200 80a1 	bhi.w	8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d056      	beq.n	8003f6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003ebe:	e099      	b.n	8003ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec0:	4b88      	ldr	r3, [pc, #544]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0320 	and.w	r3, r3, #32
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d02d      	beq.n	8003f28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ecc:	4b85      	ldr	r3, [pc, #532]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f003 0303 	and.w	r3, r3, #3
 8003ed6:	4a84      	ldr	r2, [pc, #528]	; (80040e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8003edc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	ee07 3a90 	vmov	s15, r3
 8003ee4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	ee07 3a90 	vmov	s15, r3
 8003eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef6:	4b7b      	ldr	r3, [pc, #492]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efe:	ee07 3a90 	vmov	s15, r3
 8003f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003f26:	e087      	b.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f3a:	4b6a      	ldr	r3, [pc, #424]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f42:	ee07 3a90 	vmov	s15, r3
 8003f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f6a:	e065      	b.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	ee07 3a90 	vmov	s15, r3
 8003f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	4b59      	ldr	r3, [pc, #356]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f92:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003faa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fae:	e043      	b.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	ee07 3a90 	vmov	s15, r3
 8003fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fc2:	4b48      	ldr	r3, [pc, #288]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fca:	ee07 3a90 	vmov	s15, r3
 8003fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ff2:	e021      	b.n	8004038 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	ee07 3a90 	vmov	s15, r3
 8003ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ffe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004006:	4b37      	ldr	r3, [pc, #220]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004016:	ed97 6a03 	vldr	s12, [r7, #12]
 800401a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800401e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800402a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800402e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004036:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004038:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	0a5b      	lsrs	r3, r3, #9
 800403e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004042:	ee07 3a90 	vmov	s15, r3
 8004046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800404a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800404e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004052:	edd7 6a07 	vldr	s13, [r7, #28]
 8004056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800405e:	ee17 2a90 	vmov	r2, s15
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	0c1b      	lsrs	r3, r3, #16
 800406c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004070:	ee07 3a90 	vmov	s15, r3
 8004074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004078:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800407c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004080:	edd7 6a07 	vldr	s13, [r7, #28]
 8004084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800408c:	ee17 2a90 	vmov	r2, s15
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004094:	4b13      	ldr	r3, [pc, #76]	; (80040e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004098:	0e1b      	lsrs	r3, r3, #24
 800409a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409e:	ee07 3a90 	vmov	s15, r3
 80040a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80040b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040ba:	ee17 2a90 	vmov	r2, s15
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80040c2:	e008      	b.n	80040d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
}
 80040d6:	bf00      	nop
 80040d8:	3724      	adds	r7, #36	; 0x24
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	58024400 	.word	0x58024400
 80040e8:	03d09000 	.word	0x03d09000
 80040ec:	46000000 	.word	0x46000000
 80040f0:	4c742400 	.word	0x4c742400
 80040f4:	4a742400 	.word	0x4a742400
 80040f8:	4bbebc20 	.word	0x4bbebc20

080040fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800410a:	4b53      	ldr	r3, [pc, #332]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 800410c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b03      	cmp	r3, #3
 8004114:	d101      	bne.n	800411a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e099      	b.n	800424e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800411a:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a4e      	ldr	r2, [pc, #312]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004120:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004126:	f7fc ffaf 	bl	8001088 <HAL_GetTick>
 800412a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800412c:	e008      	b.n	8004140 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800412e:	f7fc ffab 	bl	8001088 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e086      	b.n	800424e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004140:	4b45      	ldr	r3, [pc, #276]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1f0      	bne.n	800412e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800414c:	4b42      	ldr	r3, [pc, #264]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	031b      	lsls	r3, r3, #12
 800415a:	493f      	ldr	r1, [pc, #252]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	628b      	str	r3, [r1, #40]	; 0x28
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	3b01      	subs	r3, #1
 8004166:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	3b01      	subs	r3, #1
 8004170:	025b      	lsls	r3, r3, #9
 8004172:	b29b      	uxth	r3, r3
 8004174:	431a      	orrs	r2, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	3b01      	subs	r3, #1
 800417c:	041b      	lsls	r3, r3, #16
 800417e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	3b01      	subs	r3, #1
 800418a:	061b      	lsls	r3, r3, #24
 800418c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004190:	4931      	ldr	r1, [pc, #196]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004192:	4313      	orrs	r3, r2
 8004194:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004196:	4b30      	ldr	r3, [pc, #192]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	492d      	ldr	r1, [pc, #180]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80041a8:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ac:	f023 0220 	bic.w	r2, r3, #32
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	4928      	ldr	r1, [pc, #160]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80041ba:	4b27      	ldr	r3, [pc, #156]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	4a26      	ldr	r2, [pc, #152]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041c0:	f023 0310 	bic.w	r3, r3, #16
 80041c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <RCCEx_PLL2_Config+0x160>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	69d2      	ldr	r2, [r2, #28]
 80041d2:	00d2      	lsls	r2, r2, #3
 80041d4:	4920      	ldr	r1, [pc, #128]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80041da:	4b1f      	ldr	r3, [pc, #124]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041e0:	f043 0310 	orr.w	r3, r3, #16
 80041e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041ec:	4b1a      	ldr	r3, [pc, #104]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	4a19      	ldr	r2, [pc, #100]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 80041f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041f8:	e00f      	b.n	800421a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d106      	bne.n	800420e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004200:	4b15      	ldr	r3, [pc, #84]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4a14      	ldr	r2, [pc, #80]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004206:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800420c:	e005      	b.n	800421a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	4a11      	ldr	r2, [pc, #68]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004214:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004218:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800421a:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a0e      	ldr	r2, [pc, #56]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004220:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004226:	f7fc ff2f 	bl	8001088 <HAL_GetTick>
 800422a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800422c:	e008      	b.n	8004240 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800422e:	f7fc ff2b 	bl	8001088 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d901      	bls.n	8004240 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e006      	b.n	800424e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004240:	4b05      	ldr	r3, [pc, #20]	; (8004258 <RCCEx_PLL2_Config+0x15c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d0f0      	beq.n	800422e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800424c:	7bfb      	ldrb	r3, [r7, #15]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	58024400 	.word	0x58024400
 800425c:	ffff0007 	.word	0xffff0007

08004260 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800426e:	4b53      	ldr	r3, [pc, #332]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b03      	cmp	r3, #3
 8004278:	d101      	bne.n	800427e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e099      	b.n	80043b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800427e:	4b4f      	ldr	r3, [pc, #316]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fc fefd 	bl	8001088 <HAL_GetTick>
 800428e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004290:	e008      	b.n	80042a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004292:	f7fc fef9 	bl	8001088 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e086      	b.n	80043b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80042a4:	4b45      	ldr	r3, [pc, #276]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1f0      	bne.n	8004292 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80042b0:	4b42      	ldr	r3, [pc, #264]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	051b      	lsls	r3, r3, #20
 80042be:	493f      	ldr	r1, [pc, #252]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	628b      	str	r3, [r1, #40]	; 0x28
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	3b01      	subs	r3, #1
 80042ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	025b      	lsls	r3, r3, #9
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	431a      	orrs	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	3b01      	subs	r3, #1
 80042e0:	041b      	lsls	r3, r3, #16
 80042e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042f4:	4931      	ldr	r1, [pc, #196]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042fa:	4b30      	ldr	r3, [pc, #192]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80042fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
 8004306:	492d      	ldr	r1, [pc, #180]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004308:	4313      	orrs	r3, r2
 800430a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800430c:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	4928      	ldr	r1, [pc, #160]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 800431a:	4313      	orrs	r3, r2
 800431c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004322:	4a26      	ldr	r2, [pc, #152]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004328:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800432a:	4b24      	ldr	r3, [pc, #144]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 800432c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <RCCEx_PLL3_Config+0x160>)
 8004330:	4013      	ands	r3, r2
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	69d2      	ldr	r2, [r2, #28]
 8004336:	00d2      	lsls	r2, r2, #3
 8004338:	4920      	ldr	r1, [pc, #128]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 800433a:	4313      	orrs	r3, r2
 800433c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800433e:	4b1f      	ldr	r3, [pc, #124]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004350:	4b1a      	ldr	r3, [pc, #104]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a19      	ldr	r2, [pc, #100]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004356:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800435a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800435c:	e00f      	b.n	800437e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d106      	bne.n	8004372 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004364:	4b15      	ldr	r3, [pc, #84]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	4a14      	ldr	r2, [pc, #80]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 800436a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800436e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004370:	e005      	b.n	800437e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004372:	4b12      	ldr	r3, [pc, #72]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	4a11      	ldr	r2, [pc, #68]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004378:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800437c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800437e:	4b0f      	ldr	r3, [pc, #60]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a0e      	ldr	r2, [pc, #56]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800438a:	f7fc fe7d 	bl	8001088 <HAL_GetTick>
 800438e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004390:	e008      	b.n	80043a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004392:	f7fc fe79 	bl	8001088 <HAL_GetTick>
 8004396:	4602      	mov	r2, r0
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	1ad3      	subs	r3, r2, r3
 800439c:	2b02      	cmp	r3, #2
 800439e:	d901      	bls.n	80043a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e006      	b.n	80043b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <RCCEx_PLL3_Config+0x15c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f0      	beq.n	8004392 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	58024400 	.word	0x58024400
 80043c0:	ffff0007 	.word	0xffff0007

080043c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e10f      	b.n	80045f6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a87      	ldr	r2, [pc, #540]	; (8004600 <HAL_SPI_Init+0x23c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00f      	beq.n	8004406 <HAL_SPI_Init+0x42>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a86      	ldr	r2, [pc, #536]	; (8004604 <HAL_SPI_Init+0x240>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d00a      	beq.n	8004406 <HAL_SPI_Init+0x42>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a84      	ldr	r2, [pc, #528]	; (8004608 <HAL_SPI_Init+0x244>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d005      	beq.n	8004406 <HAL_SPI_Init+0x42>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b0f      	cmp	r3, #15
 8004400:	d901      	bls.n	8004406 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e0f7      	b.n	80045f6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fbca 	bl	8004ba0 <SPI_GetPacketSize>
 800440c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a7b      	ldr	r2, [pc, #492]	; (8004600 <HAL_SPI_Init+0x23c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d00c      	beq.n	8004432 <HAL_SPI_Init+0x6e>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a79      	ldr	r2, [pc, #484]	; (8004604 <HAL_SPI_Init+0x240>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <HAL_SPI_Init+0x6e>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a78      	ldr	r2, [pc, #480]	; (8004608 <HAL_SPI_Init+0x244>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d002      	beq.n	8004432 <HAL_SPI_Init+0x6e>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d811      	bhi.n	8004456 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004436:	4a72      	ldr	r2, [pc, #456]	; (8004600 <HAL_SPI_Init+0x23c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a70      	ldr	r2, [pc, #448]	; (8004604 <HAL_SPI_Init+0x240>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d004      	beq.n	8004450 <HAL_SPI_Init+0x8c>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a6f      	ldr	r2, [pc, #444]	; (8004608 <HAL_SPI_Init+0x244>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d104      	bne.n	800445a <HAL_SPI_Init+0x96>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2b10      	cmp	r3, #16
 8004454:	d901      	bls.n	800445a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0cd      	b.n	80045f6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fb56 	bl	8000b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0201 	bic.w	r2, r2, #1
 800448a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004496:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a0:	d119      	bne.n	80044d6 <HAL_SPI_Init+0x112>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044aa:	d103      	bne.n	80044b4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10c      	bne.n	80044d6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80044c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044c4:	d107      	bne.n	80044d6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044d4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00f      	beq.n	8004502 <HAL_SPI_Init+0x13e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	2b06      	cmp	r3, #6
 80044e8:	d90b      	bls.n	8004502 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e007      	b.n	8004512 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69da      	ldr	r2, [r3, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451a:	431a      	orrs	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	ea42 0103 	orr.w	r1, r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	431a      	orrs	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	431a      	orrs	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	431a      	orrs	r2, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	431a      	orrs	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	431a      	orrs	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004572:	ea42 0103 	orr.w	r1, r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	430a      	orrs	r2, r1
 8004580:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d113      	bne.n	80045b2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800459c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045b0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f022 0201 	bic.w	r2, r2, #1
 80045c0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00a      	beq.n	80045e4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40013000 	.word	0x40013000
 8004604:	40003800 	.word	0x40003800
 8004608:	40003c00 	.word	0x40003c00

0800460c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3320      	adds	r3, #32
 8004622:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004624:	2300      	movs	r3, #0
 8004626:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800462e:	2b01      	cmp	r3, #1
 8004630:	d101      	bne.n	8004636 <HAL_SPI_Transmit+0x2a>
 8004632:	2302      	movs	r3, #2
 8004634:	e1e1      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800463e:	f7fc fd23 	bl	8001088 <HAL_GetTick>
 8004642:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b01      	cmp	r3, #1
 800464e:	d007      	beq.n	8004660 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8004650:	2302      	movs	r3, #2
 8004652:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800465c:	7efb      	ldrb	r3, [r7, #27]
 800465e:	e1cc      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <HAL_SPI_Transmit+0x60>
 8004666:	88fb      	ldrh	r3, [r7, #6]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004678:	7efb      	ldrb	r3, [r7, #27]
 800467a:	e1be      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2203      	movs	r2, #3
 8004680:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	88fa      	ldrh	r2, [r7, #6]
 8004696:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	88fa      	ldrh	r2, [r7, #6]
 800469e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80046cc:	d108      	bne.n	80046e0 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	e009      	b.n	80046f4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80046f2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685a      	ldr	r2, [r3, #4]
 80046fa:	4b96      	ldr	r3, [pc, #600]	; (8004954 <HAL_SPI_Transmit+0x348>)
 80046fc:	4013      	ands	r3, r2
 80046fe:	88f9      	ldrh	r1, [r7, #6]
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004720:	d107      	bne.n	8004732 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004730:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	2b0f      	cmp	r3, #15
 8004738:	d947      	bls.n	80047ca <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800473a:	e03f      	b.n	80047bc <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b02      	cmp	r3, #2
 8004748:	d114      	bne.n	8004774 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	1d1a      	adds	r2, r3, #4
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004766:	b29b      	uxth	r3, r3
 8004768:	3b01      	subs	r3, #1
 800476a:	b29a      	uxth	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004772:	e023      	b.n	80047bc <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004774:	f7fc fc88 	bl	8001088 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	683a      	ldr	r2, [r7, #0]
 8004780:	429a      	cmp	r2, r3
 8004782:	d803      	bhi.n	800478c <HAL_SPI_Transmit+0x180>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478a:	d102      	bne.n	8004792 <HAL_SPI_Transmit+0x186>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d114      	bne.n	80047bc <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 f936 	bl	8004a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e11e      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1b9      	bne.n	800473c <HAL_SPI_Transmit+0x130>
 80047c8:	e0f1      	b.n	80049ae <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	2b07      	cmp	r3, #7
 80047d0:	f240 80e6 	bls.w	80049a0 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80047d4:	e05d      	b.n	8004892 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d132      	bne.n	800484a <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d918      	bls.n	8004822 <HAL_SPI_Transmit+0x216>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d014      	beq.n	8004822 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004808:	1d1a      	adds	r2, r3, #4
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b02      	subs	r3, #2
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004820:	e037      	b.n	8004892 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004826:	881a      	ldrh	r2, [r3, #0]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004830:	1c9a      	adds	r2, r3, #2
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800483c:	b29b      	uxth	r3, r3
 800483e:	3b01      	subs	r3, #1
 8004840:	b29a      	uxth	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004848:	e023      	b.n	8004892 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800484a:	f7fc fc1d 	bl	8001088 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	683a      	ldr	r2, [r7, #0]
 8004856:	429a      	cmp	r2, r3
 8004858:	d803      	bhi.n	8004862 <HAL_SPI_Transmit+0x256>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004860:	d102      	bne.n	8004868 <HAL_SPI_Transmit+0x25c>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d114      	bne.n	8004892 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f8cb 	bl	8004a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	e0b3      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d19b      	bne.n	80047d6 <HAL_SPI_Transmit+0x1ca>
 800489e:	e086      	b.n	80049ae <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d154      	bne.n	8004958 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d918      	bls.n	80048ec <HAL_SPI_Transmit+0x2e0>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048be:	2b40      	cmp	r3, #64	; 0x40
 80048c0:	d914      	bls.n	80048ec <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6812      	ldr	r2, [r2, #0]
 80048cc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d2:	1d1a      	adds	r2, r3, #4
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b04      	subs	r3, #4
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80048ea:	e059      	b.n	80049a0 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d917      	bls.n	8004928 <HAL_SPI_Transmit+0x31c>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d013      	beq.n	8004928 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004904:	881a      	ldrh	r2, [r3, #0]
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b02      	subs	r3, #2
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004926:	e03b      	b.n	80049a0 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3320      	adds	r3, #32
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004946:	b29b      	uxth	r3, r3
 8004948:	3b01      	subs	r3, #1
 800494a:	b29a      	uxth	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8004952:	e025      	b.n	80049a0 <HAL_SPI_Transmit+0x394>
 8004954:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004958:	f7fc fb96 	bl	8001088 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d803      	bhi.n	8004970 <HAL_SPI_Transmit+0x364>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d102      	bne.n	8004976 <HAL_SPI_Transmit+0x36a>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d114      	bne.n	80049a0 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f844 	bl	8004a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e02c      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f47f af79 	bne.w	80048a0 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	2200      	movs	r2, #0
 80049b6:	2108      	movs	r1, #8
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8c3 	bl	8004b44 <SPI_WaitOnFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d007      	beq.n	80049d4 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ca:	f043 0220 	orr.w	r2, r3, #32
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f815 	bl	8004a04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e000      	b.n	80049fa <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 80049f8:	7efb      	ldrb	r3, [r7, #27]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3720      	adds	r7, #32
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop

08004a04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	695b      	ldr	r3, [r3, #20]
 8004a12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0208 	orr.w	r2, r2, #8
 8004a22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0210 	orr.w	r2, r2, #16
 8004a32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6919      	ldr	r1, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <SPI_CloseTransfer+0x13c>)
 8004a50:	400b      	ands	r3, r1
 8004a52:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689a      	ldr	r2, [r3, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004a62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d014      	beq.n	8004a9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00f      	beq.n	8004a9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0220 	orr.w	r2, r2, #32
 8004a98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b03      	cmp	r3, #3
 8004aa4:	d014      	beq.n	8004ad0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00f      	beq.n	8004ad0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ab6:	f043 0204 	orr.w	r2, r3, #4
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ace:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00f      	beq.n	8004afa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ae0:	f043 0201 	orr.w	r2, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	699a      	ldr	r2, [r3, #24]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004af8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00f      	beq.n	8004b24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b0a:	f043 0208 	orr.w	r2, r3, #8
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8004b34:	bf00      	nop
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	fffffc90 	.word	0xfffffc90

08004b44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004b54:	e010      	b.n	8004b78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b56:	f7fc fa97 	bl	8001088 <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d803      	bhi.n	8004b6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6c:	d102      	bne.n	8004b74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d101      	bne.n	8004b78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e00f      	b.n	8004b98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4013      	ands	r3, r2
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	bf0c      	ite	eq
 8004b88:	2301      	moveq	r3, #1
 8004b8a:	2300      	movne	r3, #0
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	79fb      	ldrb	r3, [r7, #7]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d0df      	beq.n	8004b56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	095b      	lsrs	r3, r3, #5
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68db      	ldr	r3, [r3, #12]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3307      	adds	r3, #7
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b082      	sub	sp, #8
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d101      	bne.n	8004be8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e042      	b.n	8004c6e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d106      	bne.n	8004c00 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc f834 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2224      	movs	r2, #36	; 0x24
 8004c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0201 	bic.w	r2, r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 f8bb 	bl	8004d94 <UART_SetConfig>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d101      	bne.n	8004c28 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e022      	b.n	8004c6e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 fe17 	bl	8005864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685a      	ldr	r2, [r3, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c54:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f042 0201 	orr.w	r2, r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fe9e 	bl	80059a8 <UART_CheckIdleState>
 8004c6c:	4603      	mov	r3, r0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c76:	b580      	push	{r7, lr}
 8004c78:	b08a      	sub	sp, #40	; 0x28
 8004c7a:	af02      	add	r7, sp, #8
 8004c7c:	60f8      	str	r0, [r7, #12]
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	603b      	str	r3, [r7, #0]
 8004c82:	4613      	mov	r3, r2
 8004c84:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d17b      	bne.n	8004d88 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_UART_Transmit+0x26>
 8004c96:	88fb      	ldrh	r3, [r7, #6]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e074      	b.n	8004d8a <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2221      	movs	r2, #33	; 0x21
 8004cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cb0:	f7fc f9ea 	bl	8001088 <HAL_GetTick>
 8004cb4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	88fa      	ldrh	r2, [r7, #6]
 8004cba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	88fa      	ldrh	r2, [r7, #6]
 8004cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cce:	d108      	bne.n	8004ce2 <HAL_UART_Transmit+0x6c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d104      	bne.n	8004ce2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e003      	b.n	8004cea <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cea:	e030      	b.n	8004d4e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	9300      	str	r3, [sp, #0]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	2180      	movs	r1, #128	; 0x80
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 ff00 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e03d      	b.n	8004d8a <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10b      	bne.n	8004d2c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	3302      	adds	r3, #2
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e007      	b.n	8004d3c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	781a      	ldrb	r2, [r3, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	3301      	adds	r3, #1
 8004d3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b01      	subs	r3, #1
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1c8      	bne.n	8004cec <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2200      	movs	r2, #0
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 fec9 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d005      	beq.n	8004d7c <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e006      	b.n	8004d8a <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
	...

08004d94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d98:	b092      	sub	sp, #72	; 0x48
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	431a      	orrs	r2, r3
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	695b      	ldr	r3, [r3, #20]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4bbe      	ldr	r3, [pc, #760]	; (80050bc <UART_SetConfig+0x328>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4ab3      	ldr	r2, [pc, #716]	; (80050c0 <UART_SetConfig+0x32c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d004      	beq.n	8004e00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	4baf      	ldr	r3, [pc, #700]	; (80050c4 <UART_SetConfig+0x330>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f023 010f 	bic.w	r1, r3, #15
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4aa6      	ldr	r2, [pc, #664]	; (80050c8 <UART_SetConfig+0x334>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d177      	bne.n	8004f24 <UART_SetConfig+0x190>
 8004e34:	4ba5      	ldr	r3, [pc, #660]	; (80050cc <UART_SetConfig+0x338>)
 8004e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e3c:	2b28      	cmp	r3, #40	; 0x28
 8004e3e:	d86d      	bhi.n	8004f1c <UART_SetConfig+0x188>
 8004e40:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <UART_SetConfig+0xb4>)
 8004e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e46:	bf00      	nop
 8004e48:	08004eed 	.word	0x08004eed
 8004e4c:	08004f1d 	.word	0x08004f1d
 8004e50:	08004f1d 	.word	0x08004f1d
 8004e54:	08004f1d 	.word	0x08004f1d
 8004e58:	08004f1d 	.word	0x08004f1d
 8004e5c:	08004f1d 	.word	0x08004f1d
 8004e60:	08004f1d 	.word	0x08004f1d
 8004e64:	08004f1d 	.word	0x08004f1d
 8004e68:	08004ef5 	.word	0x08004ef5
 8004e6c:	08004f1d 	.word	0x08004f1d
 8004e70:	08004f1d 	.word	0x08004f1d
 8004e74:	08004f1d 	.word	0x08004f1d
 8004e78:	08004f1d 	.word	0x08004f1d
 8004e7c:	08004f1d 	.word	0x08004f1d
 8004e80:	08004f1d 	.word	0x08004f1d
 8004e84:	08004f1d 	.word	0x08004f1d
 8004e88:	08004efd 	.word	0x08004efd
 8004e8c:	08004f1d 	.word	0x08004f1d
 8004e90:	08004f1d 	.word	0x08004f1d
 8004e94:	08004f1d 	.word	0x08004f1d
 8004e98:	08004f1d 	.word	0x08004f1d
 8004e9c:	08004f1d 	.word	0x08004f1d
 8004ea0:	08004f1d 	.word	0x08004f1d
 8004ea4:	08004f1d 	.word	0x08004f1d
 8004ea8:	08004f05 	.word	0x08004f05
 8004eac:	08004f1d 	.word	0x08004f1d
 8004eb0:	08004f1d 	.word	0x08004f1d
 8004eb4:	08004f1d 	.word	0x08004f1d
 8004eb8:	08004f1d 	.word	0x08004f1d
 8004ebc:	08004f1d 	.word	0x08004f1d
 8004ec0:	08004f1d 	.word	0x08004f1d
 8004ec4:	08004f1d 	.word	0x08004f1d
 8004ec8:	08004f0d 	.word	0x08004f0d
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004f1d 	.word	0x08004f1d
 8004ed4:	08004f1d 	.word	0x08004f1d
 8004ed8:	08004f1d 	.word	0x08004f1d
 8004edc:	08004f1d 	.word	0x08004f1d
 8004ee0:	08004f1d 	.word	0x08004f1d
 8004ee4:	08004f1d 	.word	0x08004f1d
 8004ee8:	08004f15 	.word	0x08004f15
 8004eec:	2301      	movs	r3, #1
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e222      	b.n	800533a <UART_SetConfig+0x5a6>
 8004ef4:	2304      	movs	r3, #4
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e21e      	b.n	800533a <UART_SetConfig+0x5a6>
 8004efc:	2308      	movs	r3, #8
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e21a      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f04:	2310      	movs	r3, #16
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e216      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f0c:	2320      	movs	r3, #32
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e212      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f14:	2340      	movs	r3, #64	; 0x40
 8004f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f1a:	e20e      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f1c:	2380      	movs	r3, #128	; 0x80
 8004f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f22:	e20a      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a69      	ldr	r2, [pc, #420]	; (80050d0 <UART_SetConfig+0x33c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d130      	bne.n	8004f90 <UART_SetConfig+0x1fc>
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <UART_SetConfig+0x338>)
 8004f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	2b05      	cmp	r3, #5
 8004f38:	d826      	bhi.n	8004f88 <UART_SetConfig+0x1f4>
 8004f3a:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x1ac>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f59 	.word	0x08004f59
 8004f44:	08004f61 	.word	0x08004f61
 8004f48:	08004f69 	.word	0x08004f69
 8004f4c:	08004f71 	.word	0x08004f71
 8004f50:	08004f79 	.word	0x08004f79
 8004f54:	08004f81 	.word	0x08004f81
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e1ec      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e1e8      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e1e4      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f76:	e1e0      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f78:	2320      	movs	r3, #32
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e1dc      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f80:	2340      	movs	r3, #64	; 0x40
 8004f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f86:	e1d8      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f8e:	e1d4      	b.n	800533a <UART_SetConfig+0x5a6>
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4f      	ldr	r2, [pc, #316]	; (80050d4 <UART_SetConfig+0x340>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d130      	bne.n	8004ffc <UART_SetConfig+0x268>
 8004f9a:	4b4c      	ldr	r3, [pc, #304]	; (80050cc <UART_SetConfig+0x338>)
 8004f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	2b05      	cmp	r3, #5
 8004fa4:	d826      	bhi.n	8004ff4 <UART_SetConfig+0x260>
 8004fa6:	a201      	add	r2, pc, #4	; (adr r2, 8004fac <UART_SetConfig+0x218>)
 8004fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fac:	08004fc5 	.word	0x08004fc5
 8004fb0:	08004fcd 	.word	0x08004fcd
 8004fb4:	08004fd5 	.word	0x08004fd5
 8004fb8:	08004fdd 	.word	0x08004fdd
 8004fbc:	08004fe5 	.word	0x08004fe5
 8004fc0:	08004fed 	.word	0x08004fed
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e1b6      	b.n	800533a <UART_SetConfig+0x5a6>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e1b2      	b.n	800533a <UART_SetConfig+0x5a6>
 8004fd4:	2308      	movs	r3, #8
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e1ae      	b.n	800533a <UART_SetConfig+0x5a6>
 8004fdc:	2310      	movs	r3, #16
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e1aa      	b.n	800533a <UART_SetConfig+0x5a6>
 8004fe4:	2320      	movs	r3, #32
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e1a6      	b.n	800533a <UART_SetConfig+0x5a6>
 8004fec:	2340      	movs	r3, #64	; 0x40
 8004fee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ff2:	e1a2      	b.n	800533a <UART_SetConfig+0x5a6>
 8004ff4:	2380      	movs	r3, #128	; 0x80
 8004ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ffa:	e19e      	b.n	800533a <UART_SetConfig+0x5a6>
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a35      	ldr	r2, [pc, #212]	; (80050d8 <UART_SetConfig+0x344>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d130      	bne.n	8005068 <UART_SetConfig+0x2d4>
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <UART_SetConfig+0x338>)
 8005008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800500a:	f003 0307 	and.w	r3, r3, #7
 800500e:	2b05      	cmp	r3, #5
 8005010:	d826      	bhi.n	8005060 <UART_SetConfig+0x2cc>
 8005012:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <UART_SetConfig+0x284>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	08005031 	.word	0x08005031
 800501c:	08005039 	.word	0x08005039
 8005020:	08005041 	.word	0x08005041
 8005024:	08005049 	.word	0x08005049
 8005028:	08005051 	.word	0x08005051
 800502c:	08005059 	.word	0x08005059
 8005030:	2300      	movs	r3, #0
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e180      	b.n	800533a <UART_SetConfig+0x5a6>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e17c      	b.n	800533a <UART_SetConfig+0x5a6>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e178      	b.n	800533a <UART_SetConfig+0x5a6>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e174      	b.n	800533a <UART_SetConfig+0x5a6>
 8005050:	2320      	movs	r3, #32
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e170      	b.n	800533a <UART_SetConfig+0x5a6>
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e16c      	b.n	800533a <UART_SetConfig+0x5a6>
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005066:	e168      	b.n	800533a <UART_SetConfig+0x5a6>
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1b      	ldr	r2, [pc, #108]	; (80050dc <UART_SetConfig+0x348>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d142      	bne.n	80050f8 <UART_SetConfig+0x364>
 8005072:	4b16      	ldr	r3, [pc, #88]	; (80050cc <UART_SetConfig+0x338>)
 8005074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	2b05      	cmp	r3, #5
 800507c:	d838      	bhi.n	80050f0 <UART_SetConfig+0x35c>
 800507e:	a201      	add	r2, pc, #4	; (adr r2, 8005084 <UART_SetConfig+0x2f0>)
 8005080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005084:	0800509d 	.word	0x0800509d
 8005088:	080050a5 	.word	0x080050a5
 800508c:	080050ad 	.word	0x080050ad
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050e1 	.word	0x080050e1
 8005098:	080050e9 	.word	0x080050e9
 800509c:	2300      	movs	r3, #0
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050a2:	e14a      	b.n	800533a <UART_SetConfig+0x5a6>
 80050a4:	2304      	movs	r3, #4
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e146      	b.n	800533a <UART_SetConfig+0x5a6>
 80050ac:	2308      	movs	r3, #8
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e142      	b.n	800533a <UART_SetConfig+0x5a6>
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e13e      	b.n	800533a <UART_SetConfig+0x5a6>
 80050bc:	cfff69f3 	.word	0xcfff69f3
 80050c0:	58000c00 	.word	0x58000c00
 80050c4:	11fff4ff 	.word	0x11fff4ff
 80050c8:	40011000 	.word	0x40011000
 80050cc:	58024400 	.word	0x58024400
 80050d0:	40004400 	.word	0x40004400
 80050d4:	40004800 	.word	0x40004800
 80050d8:	40004c00 	.word	0x40004c00
 80050dc:	40005000 	.word	0x40005000
 80050e0:	2320      	movs	r3, #32
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050e6:	e128      	b.n	800533a <UART_SetConfig+0x5a6>
 80050e8:	2340      	movs	r3, #64	; 0x40
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ee:	e124      	b.n	800533a <UART_SetConfig+0x5a6>
 80050f0:	2380      	movs	r3, #128	; 0x80
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050f6:	e120      	b.n	800533a <UART_SetConfig+0x5a6>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4acb      	ldr	r2, [pc, #812]	; (800542c <UART_SetConfig+0x698>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d176      	bne.n	80051f0 <UART_SetConfig+0x45c>
 8005102:	4bcb      	ldr	r3, [pc, #812]	; (8005430 <UART_SetConfig+0x69c>)
 8005104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005106:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800510a:	2b28      	cmp	r3, #40	; 0x28
 800510c:	d86c      	bhi.n	80051e8 <UART_SetConfig+0x454>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <UART_SetConfig+0x380>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	080051b9 	.word	0x080051b9
 8005118:	080051e9 	.word	0x080051e9
 800511c:	080051e9 	.word	0x080051e9
 8005120:	080051e9 	.word	0x080051e9
 8005124:	080051e9 	.word	0x080051e9
 8005128:	080051e9 	.word	0x080051e9
 800512c:	080051e9 	.word	0x080051e9
 8005130:	080051e9 	.word	0x080051e9
 8005134:	080051c1 	.word	0x080051c1
 8005138:	080051e9 	.word	0x080051e9
 800513c:	080051e9 	.word	0x080051e9
 8005140:	080051e9 	.word	0x080051e9
 8005144:	080051e9 	.word	0x080051e9
 8005148:	080051e9 	.word	0x080051e9
 800514c:	080051e9 	.word	0x080051e9
 8005150:	080051e9 	.word	0x080051e9
 8005154:	080051c9 	.word	0x080051c9
 8005158:	080051e9 	.word	0x080051e9
 800515c:	080051e9 	.word	0x080051e9
 8005160:	080051e9 	.word	0x080051e9
 8005164:	080051e9 	.word	0x080051e9
 8005168:	080051e9 	.word	0x080051e9
 800516c:	080051e9 	.word	0x080051e9
 8005170:	080051e9 	.word	0x080051e9
 8005174:	080051d1 	.word	0x080051d1
 8005178:	080051e9 	.word	0x080051e9
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080051e9 	.word	0x080051e9
 8005184:	080051e9 	.word	0x080051e9
 8005188:	080051e9 	.word	0x080051e9
 800518c:	080051e9 	.word	0x080051e9
 8005190:	080051e9 	.word	0x080051e9
 8005194:	080051d9 	.word	0x080051d9
 8005198:	080051e9 	.word	0x080051e9
 800519c:	080051e9 	.word	0x080051e9
 80051a0:	080051e9 	.word	0x080051e9
 80051a4:	080051e9 	.word	0x080051e9
 80051a8:	080051e9 	.word	0x080051e9
 80051ac:	080051e9 	.word	0x080051e9
 80051b0:	080051e9 	.word	0x080051e9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	2301      	movs	r3, #1
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e0bc      	b.n	800533a <UART_SetConfig+0x5a6>
 80051c0:	2304      	movs	r3, #4
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e0b8      	b.n	800533a <UART_SetConfig+0x5a6>
 80051c8:	2308      	movs	r3, #8
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e0b4      	b.n	800533a <UART_SetConfig+0x5a6>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e0b0      	b.n	800533a <UART_SetConfig+0x5a6>
 80051d8:	2320      	movs	r3, #32
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e0ac      	b.n	800533a <UART_SetConfig+0x5a6>
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051e6:	e0a8      	b.n	800533a <UART_SetConfig+0x5a6>
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e0a4      	b.n	800533a <UART_SetConfig+0x5a6>
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a8f      	ldr	r2, [pc, #572]	; (8005434 <UART_SetConfig+0x6a0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d130      	bne.n	800525c <UART_SetConfig+0x4c8>
 80051fa:	4b8d      	ldr	r3, [pc, #564]	; (8005430 <UART_SetConfig+0x69c>)
 80051fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b05      	cmp	r3, #5
 8005204:	d826      	bhi.n	8005254 <UART_SetConfig+0x4c0>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <UART_SetConfig+0x478>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005225 	.word	0x08005225
 8005210:	0800522d 	.word	0x0800522d
 8005214:	08005235 	.word	0x08005235
 8005218:	0800523d 	.word	0x0800523d
 800521c:	08005245 	.word	0x08005245
 8005220:	0800524d 	.word	0x0800524d
 8005224:	2300      	movs	r3, #0
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e086      	b.n	800533a <UART_SetConfig+0x5a6>
 800522c:	2304      	movs	r3, #4
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e082      	b.n	800533a <UART_SetConfig+0x5a6>
 8005234:	2308      	movs	r3, #8
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e07e      	b.n	800533a <UART_SetConfig+0x5a6>
 800523c:	2310      	movs	r3, #16
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e07a      	b.n	800533a <UART_SetConfig+0x5a6>
 8005244:	2320      	movs	r3, #32
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e076      	b.n	800533a <UART_SetConfig+0x5a6>
 800524c:	2340      	movs	r3, #64	; 0x40
 800524e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005252:	e072      	b.n	800533a <UART_SetConfig+0x5a6>
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800525a:	e06e      	b.n	800533a <UART_SetConfig+0x5a6>
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a75      	ldr	r2, [pc, #468]	; (8005438 <UART_SetConfig+0x6a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d130      	bne.n	80052c8 <UART_SetConfig+0x534>
 8005266:	4b72      	ldr	r3, [pc, #456]	; (8005430 <UART_SetConfig+0x69c>)
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f003 0307 	and.w	r3, r3, #7
 800526e:	2b05      	cmp	r3, #5
 8005270:	d826      	bhi.n	80052c0 <UART_SetConfig+0x52c>
 8005272:	a201      	add	r2, pc, #4	; (adr r2, 8005278 <UART_SetConfig+0x4e4>)
 8005274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005278:	08005291 	.word	0x08005291
 800527c:	08005299 	.word	0x08005299
 8005280:	080052a1 	.word	0x080052a1
 8005284:	080052a9 	.word	0x080052a9
 8005288:	080052b1 	.word	0x080052b1
 800528c:	080052b9 	.word	0x080052b9
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e050      	b.n	800533a <UART_SetConfig+0x5a6>
 8005298:	2304      	movs	r3, #4
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e04c      	b.n	800533a <UART_SetConfig+0x5a6>
 80052a0:	2308      	movs	r3, #8
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e048      	b.n	800533a <UART_SetConfig+0x5a6>
 80052a8:	2310      	movs	r3, #16
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e044      	b.n	800533a <UART_SetConfig+0x5a6>
 80052b0:	2320      	movs	r3, #32
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e040      	b.n	800533a <UART_SetConfig+0x5a6>
 80052b8:	2340      	movs	r3, #64	; 0x40
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052be:	e03c      	b.n	800533a <UART_SetConfig+0x5a6>
 80052c0:	2380      	movs	r3, #128	; 0x80
 80052c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052c6:	e038      	b.n	800533a <UART_SetConfig+0x5a6>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a5b      	ldr	r2, [pc, #364]	; (800543c <UART_SetConfig+0x6a8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d130      	bne.n	8005334 <UART_SetConfig+0x5a0>
 80052d2:	4b57      	ldr	r3, [pc, #348]	; (8005430 <UART_SetConfig+0x69c>)
 80052d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b05      	cmp	r3, #5
 80052dc:	d826      	bhi.n	800532c <UART_SetConfig+0x598>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x550>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	080052fd 	.word	0x080052fd
 80052e8:	08005305 	.word	0x08005305
 80052ec:	0800530d 	.word	0x0800530d
 80052f0:	08005315 	.word	0x08005315
 80052f4:	0800531d 	.word	0x0800531d
 80052f8:	08005325 	.word	0x08005325
 80052fc:	2302      	movs	r3, #2
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005302:	e01a      	b.n	800533a <UART_SetConfig+0x5a6>
 8005304:	2304      	movs	r3, #4
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e016      	b.n	800533a <UART_SetConfig+0x5a6>
 800530c:	2308      	movs	r3, #8
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e012      	b.n	800533a <UART_SetConfig+0x5a6>
 8005314:	2310      	movs	r3, #16
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e00e      	b.n	800533a <UART_SetConfig+0x5a6>
 800531c:	2320      	movs	r3, #32
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e00a      	b.n	800533a <UART_SetConfig+0x5a6>
 8005324:	2340      	movs	r3, #64	; 0x40
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e006      	b.n	800533a <UART_SetConfig+0x5a6>
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e002      	b.n	800533a <UART_SetConfig+0x5a6>
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a3f      	ldr	r2, [pc, #252]	; (800543c <UART_SetConfig+0x6a8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	f040 80f8 	bne.w	8005536 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005346:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800534a:	2b20      	cmp	r3, #32
 800534c:	dc46      	bgt.n	80053dc <UART_SetConfig+0x648>
 800534e:	2b02      	cmp	r3, #2
 8005350:	f2c0 8082 	blt.w	8005458 <UART_SetConfig+0x6c4>
 8005354:	3b02      	subs	r3, #2
 8005356:	2b1e      	cmp	r3, #30
 8005358:	d87e      	bhi.n	8005458 <UART_SetConfig+0x6c4>
 800535a:	a201      	add	r2, pc, #4	; (adr r2, 8005360 <UART_SetConfig+0x5cc>)
 800535c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005360:	080053e3 	.word	0x080053e3
 8005364:	08005459 	.word	0x08005459
 8005368:	080053eb 	.word	0x080053eb
 800536c:	08005459 	.word	0x08005459
 8005370:	08005459 	.word	0x08005459
 8005374:	08005459 	.word	0x08005459
 8005378:	080053fb 	.word	0x080053fb
 800537c:	08005459 	.word	0x08005459
 8005380:	08005459 	.word	0x08005459
 8005384:	08005459 	.word	0x08005459
 8005388:	08005459 	.word	0x08005459
 800538c:	08005459 	.word	0x08005459
 8005390:	08005459 	.word	0x08005459
 8005394:	08005459 	.word	0x08005459
 8005398:	0800540b 	.word	0x0800540b
 800539c:	08005459 	.word	0x08005459
 80053a0:	08005459 	.word	0x08005459
 80053a4:	08005459 	.word	0x08005459
 80053a8:	08005459 	.word	0x08005459
 80053ac:	08005459 	.word	0x08005459
 80053b0:	08005459 	.word	0x08005459
 80053b4:	08005459 	.word	0x08005459
 80053b8:	08005459 	.word	0x08005459
 80053bc:	08005459 	.word	0x08005459
 80053c0:	08005459 	.word	0x08005459
 80053c4:	08005459 	.word	0x08005459
 80053c8:	08005459 	.word	0x08005459
 80053cc:	08005459 	.word	0x08005459
 80053d0:	08005459 	.word	0x08005459
 80053d4:	08005459 	.word	0x08005459
 80053d8:	0800544b 	.word	0x0800544b
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d037      	beq.n	8005450 <UART_SetConfig+0x6bc>
 80053e0:	e03a      	b.n	8005458 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80053e2:	f7fe fbcd 	bl	8003b80 <HAL_RCCEx_GetD3PCLK1Freq>
 80053e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053e8:	e03c      	b.n	8005464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fbdc 	bl	8003bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053f8:	e034      	b.n	8005464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053fa:	f107 0318 	add.w	r3, r7, #24
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fe fd28 	bl	8003e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005408:	e02c      	b.n	8005464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <UART_SetConfig+0x69c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d016      	beq.n	8005444 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <UART_SetConfig+0x69c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	08db      	lsrs	r3, r3, #3
 800541c:	f003 0303 	and.w	r3, r3, #3
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <UART_SetConfig+0x6ac>)
 8005422:	fa22 f303 	lsr.w	r3, r2, r3
 8005426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005428:	e01c      	b.n	8005464 <UART_SetConfig+0x6d0>
 800542a:	bf00      	nop
 800542c:	40011400 	.word	0x40011400
 8005430:	58024400 	.word	0x58024400
 8005434:	40007800 	.word	0x40007800
 8005438:	40007c00 	.word	0x40007c00
 800543c:	58000c00 	.word	0x58000c00
 8005440:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005444:	4b9d      	ldr	r3, [pc, #628]	; (80056bc <UART_SetConfig+0x928>)
 8005446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005448:	e00c      	b.n	8005464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800544a:	4b9d      	ldr	r3, [pc, #628]	; (80056c0 <UART_SetConfig+0x92c>)
 800544c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800544e:	e009      	b.n	8005464 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005450:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005456:	e005      	b.n	8005464 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005458:	2300      	movs	r3, #0
 800545a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005462:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 81de 	beq.w	8005828 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005470:	4a94      	ldr	r2, [pc, #592]	; (80056c4 <UART_SetConfig+0x930>)
 8005472:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005476:	461a      	mov	r2, r3
 8005478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800547a:	fbb3 f3f2 	udiv	r3, r3, r2
 800547e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800548c:	429a      	cmp	r2, r3
 800548e:	d305      	bcc.n	800549c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005496:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005498:	429a      	cmp	r2, r3
 800549a:	d903      	bls.n	80054a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054a2:	e1c1      	b.n	8005828 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80054a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054a6:	2200      	movs	r2, #0
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	60fa      	str	r2, [r7, #12]
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	4a84      	ldr	r2, [pc, #528]	; (80056c4 <UART_SetConfig+0x930>)
 80054b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	2200      	movs	r2, #0
 80054ba:	603b      	str	r3, [r7, #0]
 80054bc:	607a      	str	r2, [r7, #4]
 80054be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054c6:	f7fa ff5b 	bl	8000380 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4610      	mov	r0, r2
 80054d0:	4619      	mov	r1, r3
 80054d2:	f04f 0200 	mov.w	r2, #0
 80054d6:	f04f 0300 	mov.w	r3, #0
 80054da:	020b      	lsls	r3, r1, #8
 80054dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80054e0:	0202      	lsls	r2, r0, #8
 80054e2:	6979      	ldr	r1, [r7, #20]
 80054e4:	6849      	ldr	r1, [r1, #4]
 80054e6:	0849      	lsrs	r1, r1, #1
 80054e8:	2000      	movs	r0, #0
 80054ea:	460c      	mov	r4, r1
 80054ec:	4605      	mov	r5, r0
 80054ee:	eb12 0804 	adds.w	r8, r2, r4
 80054f2:	eb43 0905 	adc.w	r9, r3, r5
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	469a      	mov	sl, r3
 80054fe:	4693      	mov	fp, r2
 8005500:	4652      	mov	r2, sl
 8005502:	465b      	mov	r3, fp
 8005504:	4640      	mov	r0, r8
 8005506:	4649      	mov	r1, r9
 8005508:	f7fa ff3a 	bl	8000380 <__aeabi_uldivmod>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4613      	mov	r3, r2
 8005512:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800551a:	d308      	bcc.n	800552e <UART_SetConfig+0x79a>
 800551c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005522:	d204      	bcs.n	800552e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800552a:	60da      	str	r2, [r3, #12]
 800552c:	e17c      	b.n	8005828 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005534:	e178      	b.n	8005828 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800553e:	f040 80c5 	bne.w	80056cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005542:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005546:	2b20      	cmp	r3, #32
 8005548:	dc48      	bgt.n	80055dc <UART_SetConfig+0x848>
 800554a:	2b00      	cmp	r3, #0
 800554c:	db7b      	blt.n	8005646 <UART_SetConfig+0x8b2>
 800554e:	2b20      	cmp	r3, #32
 8005550:	d879      	bhi.n	8005646 <UART_SetConfig+0x8b2>
 8005552:	a201      	add	r2, pc, #4	; (adr r2, 8005558 <UART_SetConfig+0x7c4>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	080055e3 	.word	0x080055e3
 800555c:	080055eb 	.word	0x080055eb
 8005560:	08005647 	.word	0x08005647
 8005564:	08005647 	.word	0x08005647
 8005568:	080055f3 	.word	0x080055f3
 800556c:	08005647 	.word	0x08005647
 8005570:	08005647 	.word	0x08005647
 8005574:	08005647 	.word	0x08005647
 8005578:	08005603 	.word	0x08005603
 800557c:	08005647 	.word	0x08005647
 8005580:	08005647 	.word	0x08005647
 8005584:	08005647 	.word	0x08005647
 8005588:	08005647 	.word	0x08005647
 800558c:	08005647 	.word	0x08005647
 8005590:	08005647 	.word	0x08005647
 8005594:	08005647 	.word	0x08005647
 8005598:	08005613 	.word	0x08005613
 800559c:	08005647 	.word	0x08005647
 80055a0:	08005647 	.word	0x08005647
 80055a4:	08005647 	.word	0x08005647
 80055a8:	08005647 	.word	0x08005647
 80055ac:	08005647 	.word	0x08005647
 80055b0:	08005647 	.word	0x08005647
 80055b4:	08005647 	.word	0x08005647
 80055b8:	08005647 	.word	0x08005647
 80055bc:	08005647 	.word	0x08005647
 80055c0:	08005647 	.word	0x08005647
 80055c4:	08005647 	.word	0x08005647
 80055c8:	08005647 	.word	0x08005647
 80055cc:	08005647 	.word	0x08005647
 80055d0:	08005647 	.word	0x08005647
 80055d4:	08005647 	.word	0x08005647
 80055d8:	08005639 	.word	0x08005639
 80055dc:	2b40      	cmp	r3, #64	; 0x40
 80055de:	d02e      	beq.n	800563e <UART_SetConfig+0x8aa>
 80055e0:	e031      	b.n	8005646 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055e2:	f7fd f897 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 80055e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055e8:	e033      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ea:	f7fd f8a9 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80055ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80055f0:	e02f      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fe fad8 	bl	8003bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005600:	e027      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005602:	f107 0318 	add.w	r3, r7, #24
 8005606:	4618      	mov	r0, r3
 8005608:	f7fe fc24 	bl	8003e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005610:	e01f      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005612:	4b2d      	ldr	r3, [pc, #180]	; (80056c8 <UART_SetConfig+0x934>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800561e:	4b2a      	ldr	r3, [pc, #168]	; (80056c8 <UART_SetConfig+0x934>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	08db      	lsrs	r3, r3, #3
 8005624:	f003 0303 	and.w	r3, r3, #3
 8005628:	4a24      	ldr	r2, [pc, #144]	; (80056bc <UART_SetConfig+0x928>)
 800562a:	fa22 f303 	lsr.w	r3, r2, r3
 800562e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005630:	e00f      	b.n	8005652 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <UART_SetConfig+0x928>)
 8005634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005636:	e00c      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005638:	4b21      	ldr	r3, [pc, #132]	; (80056c0 <UART_SetConfig+0x92c>)
 800563a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563c:	e009      	b.n	8005652 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800563e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005644:	e005      	b.n	8005652 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005650:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005654:	2b00      	cmp	r3, #0
 8005656:	f000 80e7 	beq.w	8005828 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565e:	4a19      	ldr	r2, [pc, #100]	; (80056c4 <UART_SetConfig+0x930>)
 8005660:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005664:	461a      	mov	r2, r3
 8005666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005668:	fbb3 f3f2 	udiv	r3, r3, r2
 800566c:	005a      	lsls	r2, r3, #1
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	441a      	add	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005682:	2b0f      	cmp	r3, #15
 8005684:	d916      	bls.n	80056b4 <UART_SetConfig+0x920>
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800568c:	d212      	bcs.n	80056b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	b29b      	uxth	r3, r3
 8005692:	f023 030f 	bic.w	r3, r3, #15
 8005696:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	b29b      	uxth	r3, r3
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	b29a      	uxth	r2, r3
 80056a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056a6:	4313      	orrs	r3, r2
 80056a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	e0b9      	b.n	8005828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80056ba:	e0b5      	b.n	8005828 <UART_SetConfig+0xa94>
 80056bc:	03d09000 	.word	0x03d09000
 80056c0:	003d0900 	.word	0x003d0900
 80056c4:	08006814 	.word	0x08006814
 80056c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80056cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80056d0:	2b20      	cmp	r3, #32
 80056d2:	dc49      	bgt.n	8005768 <UART_SetConfig+0x9d4>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	db7c      	blt.n	80057d2 <UART_SetConfig+0xa3e>
 80056d8:	2b20      	cmp	r3, #32
 80056da:	d87a      	bhi.n	80057d2 <UART_SetConfig+0xa3e>
 80056dc:	a201      	add	r2, pc, #4	; (adr r2, 80056e4 <UART_SetConfig+0x950>)
 80056de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e2:	bf00      	nop
 80056e4:	0800576f 	.word	0x0800576f
 80056e8:	08005777 	.word	0x08005777
 80056ec:	080057d3 	.word	0x080057d3
 80056f0:	080057d3 	.word	0x080057d3
 80056f4:	0800577f 	.word	0x0800577f
 80056f8:	080057d3 	.word	0x080057d3
 80056fc:	080057d3 	.word	0x080057d3
 8005700:	080057d3 	.word	0x080057d3
 8005704:	0800578f 	.word	0x0800578f
 8005708:	080057d3 	.word	0x080057d3
 800570c:	080057d3 	.word	0x080057d3
 8005710:	080057d3 	.word	0x080057d3
 8005714:	080057d3 	.word	0x080057d3
 8005718:	080057d3 	.word	0x080057d3
 800571c:	080057d3 	.word	0x080057d3
 8005720:	080057d3 	.word	0x080057d3
 8005724:	0800579f 	.word	0x0800579f
 8005728:	080057d3 	.word	0x080057d3
 800572c:	080057d3 	.word	0x080057d3
 8005730:	080057d3 	.word	0x080057d3
 8005734:	080057d3 	.word	0x080057d3
 8005738:	080057d3 	.word	0x080057d3
 800573c:	080057d3 	.word	0x080057d3
 8005740:	080057d3 	.word	0x080057d3
 8005744:	080057d3 	.word	0x080057d3
 8005748:	080057d3 	.word	0x080057d3
 800574c:	080057d3 	.word	0x080057d3
 8005750:	080057d3 	.word	0x080057d3
 8005754:	080057d3 	.word	0x080057d3
 8005758:	080057d3 	.word	0x080057d3
 800575c:	080057d3 	.word	0x080057d3
 8005760:	080057d3 	.word	0x080057d3
 8005764:	080057c5 	.word	0x080057c5
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d02e      	beq.n	80057ca <UART_SetConfig+0xa36>
 800576c:	e031      	b.n	80057d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576e:	f7fc ffd1 	bl	8002714 <HAL_RCC_GetPCLK1Freq>
 8005772:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005774:	e033      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005776:	f7fc ffe3 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 800577a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800577c:	e02f      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800577e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005782:	4618      	mov	r0, r3
 8005784:	f7fe fa12 	bl	8003bac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800578a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800578c:	e027      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800578e:	f107 0318 	add.w	r3, r7, #24
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fb5e 	bl	8003e54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800579c:	e01f      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800579e:	4b2d      	ldr	r3, [pc, #180]	; (8005854 <UART_SetConfig+0xac0>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d009      	beq.n	80057be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057aa:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <UART_SetConfig+0xac0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	08db      	lsrs	r3, r3, #3
 80057b0:	f003 0303 	and.w	r3, r3, #3
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <UART_SetConfig+0xac4>)
 80057b6:	fa22 f303 	lsr.w	r3, r2, r3
 80057ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057bc:	e00f      	b.n	80057de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80057be:	4b26      	ldr	r3, [pc, #152]	; (8005858 <UART_SetConfig+0xac4>)
 80057c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c2:	e00c      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057c4:	4b25      	ldr	r3, [pc, #148]	; (800585c <UART_SetConfig+0xac8>)
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057c8:	e009      	b.n	80057de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d0:	e005      	b.n	80057de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80057dc:	bf00      	nop
    }

    if (pclk != 0U)
 80057de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d021      	beq.n	8005828 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e8:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <UART_SetConfig+0xacc>)
 80057ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057ee:	461a      	mov	r2, r3
 80057f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f2:	fbb3 f2f2 	udiv	r2, r3, r2
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	441a      	add	r2, r3
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580a:	2b0f      	cmp	r3, #15
 800580c:	d909      	bls.n	8005822 <UART_SetConfig+0xa8e>
 800580e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d205      	bcs.n	8005822 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005818:	b29a      	uxth	r2, r3
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	e002      	b.n	8005828 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	2201      	movs	r2, #1
 800582c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2201      	movs	r2, #1
 8005834:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	2200      	movs	r2, #0
 800583c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005844:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005848:	4618      	mov	r0, r3
 800584a:	3748      	adds	r7, #72	; 0x48
 800584c:	46bd      	mov	sp, r7
 800584e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005852:	bf00      	nop
 8005854:	58024400 	.word	0x58024400
 8005858:	03d09000 	.word	0x03d09000
 800585c:	003d0900 	.word	0x003d0900
 8005860:	08006814 	.word	0x08006814

08005864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	430a      	orrs	r2, r1
 800588c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	f003 0304 	and.w	r3, r3, #4
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00a      	beq.n	80058d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f8:	f003 0310 	and.w	r3, r3, #16
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	f003 0320 	and.w	r3, r3, #32
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b00      	cmp	r3, #0
 8005942:	d01a      	beq.n	800597a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800595e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005962:	d10a      	bne.n	800597a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	430a      	orrs	r2, r1
 8005978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	430a      	orrs	r2, r1
 800599a:	605a      	str	r2, [r3, #4]
  }
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b098      	sub	sp, #96	; 0x60
 80059ac:	af02      	add	r7, sp, #8
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059b8:	f7fb fb66 	bl	8001088 <HAL_GetTick>
 80059bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d12f      	bne.n	8005a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d4:	2200      	movs	r2, #0
 80059d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f88e 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d022      	beq.n	8005a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ee:	e853 3f00 	ldrex	r3, [r3]
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059fa:	653b      	str	r3, [r7, #80]	; 0x50
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a04:	647b      	str	r3, [r7, #68]	; 0x44
 8005a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a0c:	e841 2300 	strex	r3, r2, [r1]
 8005a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1e6      	bne.n	80059e6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2220      	movs	r2, #32
 8005a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e063      	b.n	8005af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d149      	bne.n	8005ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	2200      	movs	r2, #0
 8005a44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f857 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d03c      	beq.n	8005ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	623b      	str	r3, [r7, #32]
   return(result);
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
 8005a74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aa6:	61fa      	str	r2, [r7, #28]
 8005aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	69b9      	ldr	r1, [r7, #24]
 8005aac:	69fa      	ldr	r2, [r7, #28]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e012      	b.n	8005af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3758      	adds	r7, #88	; 0x58
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0c:	e049      	b.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d045      	beq.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b16:	f7fb fab7 	bl	8001088 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d302      	bcc.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d101      	bne.n	8005b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e048      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0304 	and.w	r3, r3, #4
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d031      	beq.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d110      	bne.n	8005b6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2208      	movs	r2, #8
 8005b52:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 f839 	bl	8005bcc <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2208      	movs	r2, #8
 8005b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2200      	movs	r2, #0
 8005b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e029      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b7c:	d111      	bne.n	8005ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f000 f81f 	bl	8005bcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2220      	movs	r2, #32
 8005b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e00f      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69da      	ldr	r2, [r3, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	4013      	ands	r3, r2
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	bf0c      	ite	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	2300      	movne	r3, #0
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	461a      	mov	r2, r3
 8005bba:	79fb      	ldrb	r3, [r7, #7]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d0a6      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
	...

08005bcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b095      	sub	sp, #84	; 0x54
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005be8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8005bf4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	4b1e      	ldr	r3, [pc, #120]	; (8005c94 <UART_EndRxTransfer+0xc8>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c28:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d118      	bne.n	8005c74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	e853 3f00 	ldrex	r3, [r3]
 8005c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f023 0310 	bic.w	r3, r3, #16
 8005c56:	647b      	str	r3, [r7, #68]	; 0x44
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	461a      	mov	r2, r3
 8005c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c60:	61bb      	str	r3, [r7, #24]
 8005c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6979      	ldr	r1, [r7, #20]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e6      	bne.n	8005c42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2220      	movs	r2, #32
 8005c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005c88:	bf00      	nop
 8005c8a:	3754      	adds	r7, #84	; 0x54
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	effffffe 	.word	0xeffffffe

08005c98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_UARTEx_DisableFifoMode+0x16>
 8005caa:	2302      	movs	r3, #2
 8005cac:	e027      	b.n	8005cfe <HAL_UARTEx_DisableFifoMode+0x66>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2224      	movs	r2, #36	; 0x24
 8005cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2220      	movs	r2, #32
 8005cf0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr

08005d0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
 8005d12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e02d      	b.n	8005d7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2224      	movs	r2, #36	; 0x24
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0201 	bic.w	r2, r2, #1
 8005d48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 f850 	bl	8005e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68fa      	ldr	r2, [r7, #12]
 8005d6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e02d      	b.n	8005dfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2224      	movs	r2, #36	; 0x24
 8005daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f022 0201 	bic.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f812 	bl	8005e04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d108      	bne.n	8005e26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e24:	e031      	b.n	8005e8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e26:	2310      	movs	r3, #16
 8005e28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e2a:	2310      	movs	r3, #16
 8005e2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	0e5b      	lsrs	r3, r3, #25
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	0f5b      	lsrs	r3, r3, #29
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e4e:	7bbb      	ldrb	r3, [r7, #14]
 8005e50:	7b3a      	ldrb	r2, [r7, #12]
 8005e52:	4911      	ldr	r1, [pc, #68]	; (8005e98 <UARTEx_SetNbDataToProcess+0x94>)
 8005e54:	5c8a      	ldrb	r2, [r1, r2]
 8005e56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005e5a:	7b3a      	ldrb	r2, [r7, #12]
 8005e5c:	490f      	ldr	r1, [pc, #60]	; (8005e9c <UARTEx_SetNbDataToProcess+0x98>)
 8005e5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005e60:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	7b7a      	ldrb	r2, [r7, #13]
 8005e70:	4909      	ldr	r1, [pc, #36]	; (8005e98 <UARTEx_SetNbDataToProcess+0x94>)
 8005e72:	5c8a      	ldrb	r2, [r1, r2]
 8005e74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005e78:	7b7a      	ldrb	r2, [r7, #13]
 8005e7a:	4908      	ldr	r1, [pc, #32]	; (8005e9c <UARTEx_SetNbDataToProcess+0x98>)
 8005e7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005e7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e8a:	bf00      	nop
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	0800682c 	.word	0x0800682c
 8005e9c:	08006834 	.word	0x08006834

08005ea0 <__errno>:
 8005ea0:	4b01      	ldr	r3, [pc, #4]	; (8005ea8 <__errno+0x8>)
 8005ea2:	6818      	ldr	r0, [r3, #0]
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	24000010 	.word	0x24000010

08005eac <__libc_init_array>:
 8005eac:	b570      	push	{r4, r5, r6, lr}
 8005eae:	4d0d      	ldr	r5, [pc, #52]	; (8005ee4 <__libc_init_array+0x38>)
 8005eb0:	4c0d      	ldr	r4, [pc, #52]	; (8005ee8 <__libc_init_array+0x3c>)
 8005eb2:	1b64      	subs	r4, r4, r5
 8005eb4:	10a4      	asrs	r4, r4, #2
 8005eb6:	2600      	movs	r6, #0
 8005eb8:	42a6      	cmp	r6, r4
 8005eba:	d109      	bne.n	8005ed0 <__libc_init_array+0x24>
 8005ebc:	4d0b      	ldr	r5, [pc, #44]	; (8005eec <__libc_init_array+0x40>)
 8005ebe:	4c0c      	ldr	r4, [pc, #48]	; (8005ef0 <__libc_init_array+0x44>)
 8005ec0:	f000 fc8e 	bl	80067e0 <_init>
 8005ec4:	1b64      	subs	r4, r4, r5
 8005ec6:	10a4      	asrs	r4, r4, #2
 8005ec8:	2600      	movs	r6, #0
 8005eca:	42a6      	cmp	r6, r4
 8005ecc:	d105      	bne.n	8005eda <__libc_init_array+0x2e>
 8005ece:	bd70      	pop	{r4, r5, r6, pc}
 8005ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed4:	4798      	blx	r3
 8005ed6:	3601      	adds	r6, #1
 8005ed8:	e7ee      	b.n	8005eb8 <__libc_init_array+0xc>
 8005eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ede:	4798      	blx	r3
 8005ee0:	3601      	adds	r6, #1
 8005ee2:	e7f2      	b.n	8005eca <__libc_init_array+0x1e>
 8005ee4:	08006878 	.word	0x08006878
 8005ee8:	08006878 	.word	0x08006878
 8005eec:	08006878 	.word	0x08006878
 8005ef0:	0800687c 	.word	0x0800687c

08005ef4 <memset>:
 8005ef4:	4402      	add	r2, r0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d100      	bne.n	8005efe <memset+0xa>
 8005efc:	4770      	bx	lr
 8005efe:	f803 1b01 	strb.w	r1, [r3], #1
 8005f02:	e7f9      	b.n	8005ef8 <memset+0x4>

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	b500      	push	{lr}
 8005f08:	b09c      	sub	sp, #112	; 0x70
 8005f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0c:	9002      	str	r0, [sp, #8]
 8005f0e:	9006      	str	r0, [sp, #24]
 8005f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f14:	4809      	ldr	r0, [pc, #36]	; (8005f3c <siprintf+0x38>)
 8005f16:	9107      	str	r1, [sp, #28]
 8005f18:	9104      	str	r1, [sp, #16]
 8005f1a:	4909      	ldr	r1, [pc, #36]	; (8005f40 <siprintf+0x3c>)
 8005f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f20:	9105      	str	r1, [sp, #20]
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	f000 f868 	bl	8005ffc <_svfiprintf_r>
 8005f2c:	9b02      	ldr	r3, [sp, #8]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	b01c      	add	sp, #112	; 0x70
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	24000010 	.word	0x24000010
 8005f40:	ffff0208 	.word	0xffff0208

08005f44 <__ssputs_r>:
 8005f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f48:	688e      	ldr	r6, [r1, #8]
 8005f4a:	429e      	cmp	r6, r3
 8005f4c:	4682      	mov	sl, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	4690      	mov	r8, r2
 8005f52:	461f      	mov	r7, r3
 8005f54:	d838      	bhi.n	8005fc8 <__ssputs_r+0x84>
 8005f56:	898a      	ldrh	r2, [r1, #12]
 8005f58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005f5c:	d032      	beq.n	8005fc4 <__ssputs_r+0x80>
 8005f5e:	6825      	ldr	r5, [r4, #0]
 8005f60:	6909      	ldr	r1, [r1, #16]
 8005f62:	eba5 0901 	sub.w	r9, r5, r1
 8005f66:	6965      	ldr	r5, [r4, #20]
 8005f68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005f6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005f70:	3301      	adds	r3, #1
 8005f72:	444b      	add	r3, r9
 8005f74:	106d      	asrs	r5, r5, #1
 8005f76:	429d      	cmp	r5, r3
 8005f78:	bf38      	it	cc
 8005f7a:	461d      	movcc	r5, r3
 8005f7c:	0553      	lsls	r3, r2, #21
 8005f7e:	d531      	bpl.n	8005fe4 <__ssputs_r+0xa0>
 8005f80:	4629      	mov	r1, r5
 8005f82:	f000 fb63 	bl	800664c <_malloc_r>
 8005f86:	4606      	mov	r6, r0
 8005f88:	b950      	cbnz	r0, 8005fa0 <__ssputs_r+0x5c>
 8005f8a:	230c      	movs	r3, #12
 8005f8c:	f8ca 3000 	str.w	r3, [sl]
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f96:	81a3      	strh	r3, [r4, #12]
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa0:	6921      	ldr	r1, [r4, #16]
 8005fa2:	464a      	mov	r2, r9
 8005fa4:	f000 fabe 	bl	8006524 <memcpy>
 8005fa8:	89a3      	ldrh	r3, [r4, #12]
 8005faa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	6126      	str	r6, [r4, #16]
 8005fb6:	6165      	str	r5, [r4, #20]
 8005fb8:	444e      	add	r6, r9
 8005fba:	eba5 0509 	sub.w	r5, r5, r9
 8005fbe:	6026      	str	r6, [r4, #0]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	463e      	mov	r6, r7
 8005fc4:	42be      	cmp	r6, r7
 8005fc6:	d900      	bls.n	8005fca <__ssputs_r+0x86>
 8005fc8:	463e      	mov	r6, r7
 8005fca:	6820      	ldr	r0, [r4, #0]
 8005fcc:	4632      	mov	r2, r6
 8005fce:	4641      	mov	r1, r8
 8005fd0:	f000 fab6 	bl	8006540 <memmove>
 8005fd4:	68a3      	ldr	r3, [r4, #8]
 8005fd6:	1b9b      	subs	r3, r3, r6
 8005fd8:	60a3      	str	r3, [r4, #8]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	4433      	add	r3, r6
 8005fde:	6023      	str	r3, [r4, #0]
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e7db      	b.n	8005f9c <__ssputs_r+0x58>
 8005fe4:	462a      	mov	r2, r5
 8005fe6:	f000 fba5 	bl	8006734 <_realloc_r>
 8005fea:	4606      	mov	r6, r0
 8005fec:	2800      	cmp	r0, #0
 8005fee:	d1e1      	bne.n	8005fb4 <__ssputs_r+0x70>
 8005ff0:	6921      	ldr	r1, [r4, #16]
 8005ff2:	4650      	mov	r0, sl
 8005ff4:	f000 fabe 	bl	8006574 <_free_r>
 8005ff8:	e7c7      	b.n	8005f8a <__ssputs_r+0x46>
	...

08005ffc <_svfiprintf_r>:
 8005ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006000:	4698      	mov	r8, r3
 8006002:	898b      	ldrh	r3, [r1, #12]
 8006004:	061b      	lsls	r3, r3, #24
 8006006:	b09d      	sub	sp, #116	; 0x74
 8006008:	4607      	mov	r7, r0
 800600a:	460d      	mov	r5, r1
 800600c:	4614      	mov	r4, r2
 800600e:	d50e      	bpl.n	800602e <_svfiprintf_r+0x32>
 8006010:	690b      	ldr	r3, [r1, #16]
 8006012:	b963      	cbnz	r3, 800602e <_svfiprintf_r+0x32>
 8006014:	2140      	movs	r1, #64	; 0x40
 8006016:	f000 fb19 	bl	800664c <_malloc_r>
 800601a:	6028      	str	r0, [r5, #0]
 800601c:	6128      	str	r0, [r5, #16]
 800601e:	b920      	cbnz	r0, 800602a <_svfiprintf_r+0x2e>
 8006020:	230c      	movs	r3, #12
 8006022:	603b      	str	r3, [r7, #0]
 8006024:	f04f 30ff 	mov.w	r0, #4294967295
 8006028:	e0d1      	b.n	80061ce <_svfiprintf_r+0x1d2>
 800602a:	2340      	movs	r3, #64	; 0x40
 800602c:	616b      	str	r3, [r5, #20]
 800602e:	2300      	movs	r3, #0
 8006030:	9309      	str	r3, [sp, #36]	; 0x24
 8006032:	2320      	movs	r3, #32
 8006034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006038:	f8cd 800c 	str.w	r8, [sp, #12]
 800603c:	2330      	movs	r3, #48	; 0x30
 800603e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80061e8 <_svfiprintf_r+0x1ec>
 8006042:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006046:	f04f 0901 	mov.w	r9, #1
 800604a:	4623      	mov	r3, r4
 800604c:	469a      	mov	sl, r3
 800604e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006052:	b10a      	cbz	r2, 8006058 <_svfiprintf_r+0x5c>
 8006054:	2a25      	cmp	r2, #37	; 0x25
 8006056:	d1f9      	bne.n	800604c <_svfiprintf_r+0x50>
 8006058:	ebba 0b04 	subs.w	fp, sl, r4
 800605c:	d00b      	beq.n	8006076 <_svfiprintf_r+0x7a>
 800605e:	465b      	mov	r3, fp
 8006060:	4622      	mov	r2, r4
 8006062:	4629      	mov	r1, r5
 8006064:	4638      	mov	r0, r7
 8006066:	f7ff ff6d 	bl	8005f44 <__ssputs_r>
 800606a:	3001      	adds	r0, #1
 800606c:	f000 80aa 	beq.w	80061c4 <_svfiprintf_r+0x1c8>
 8006070:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006072:	445a      	add	r2, fp
 8006074:	9209      	str	r2, [sp, #36]	; 0x24
 8006076:	f89a 3000 	ldrb.w	r3, [sl]
 800607a:	2b00      	cmp	r3, #0
 800607c:	f000 80a2 	beq.w	80061c4 <_svfiprintf_r+0x1c8>
 8006080:	2300      	movs	r3, #0
 8006082:	f04f 32ff 	mov.w	r2, #4294967295
 8006086:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800608a:	f10a 0a01 	add.w	sl, sl, #1
 800608e:	9304      	str	r3, [sp, #16]
 8006090:	9307      	str	r3, [sp, #28]
 8006092:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006096:	931a      	str	r3, [sp, #104]	; 0x68
 8006098:	4654      	mov	r4, sl
 800609a:	2205      	movs	r2, #5
 800609c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060a0:	4851      	ldr	r0, [pc, #324]	; (80061e8 <_svfiprintf_r+0x1ec>)
 80060a2:	f7fa f91d 	bl	80002e0 <memchr>
 80060a6:	9a04      	ldr	r2, [sp, #16]
 80060a8:	b9d8      	cbnz	r0, 80060e2 <_svfiprintf_r+0xe6>
 80060aa:	06d0      	lsls	r0, r2, #27
 80060ac:	bf44      	itt	mi
 80060ae:	2320      	movmi	r3, #32
 80060b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060b4:	0711      	lsls	r1, r2, #28
 80060b6:	bf44      	itt	mi
 80060b8:	232b      	movmi	r3, #43	; 0x2b
 80060ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80060be:	f89a 3000 	ldrb.w	r3, [sl]
 80060c2:	2b2a      	cmp	r3, #42	; 0x2a
 80060c4:	d015      	beq.n	80060f2 <_svfiprintf_r+0xf6>
 80060c6:	9a07      	ldr	r2, [sp, #28]
 80060c8:	4654      	mov	r4, sl
 80060ca:	2000      	movs	r0, #0
 80060cc:	f04f 0c0a 	mov.w	ip, #10
 80060d0:	4621      	mov	r1, r4
 80060d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80060d6:	3b30      	subs	r3, #48	; 0x30
 80060d8:	2b09      	cmp	r3, #9
 80060da:	d94e      	bls.n	800617a <_svfiprintf_r+0x17e>
 80060dc:	b1b0      	cbz	r0, 800610c <_svfiprintf_r+0x110>
 80060de:	9207      	str	r2, [sp, #28]
 80060e0:	e014      	b.n	800610c <_svfiprintf_r+0x110>
 80060e2:	eba0 0308 	sub.w	r3, r0, r8
 80060e6:	fa09 f303 	lsl.w	r3, r9, r3
 80060ea:	4313      	orrs	r3, r2
 80060ec:	9304      	str	r3, [sp, #16]
 80060ee:	46a2      	mov	sl, r4
 80060f0:	e7d2      	b.n	8006098 <_svfiprintf_r+0x9c>
 80060f2:	9b03      	ldr	r3, [sp, #12]
 80060f4:	1d19      	adds	r1, r3, #4
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	9103      	str	r1, [sp, #12]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	bfbb      	ittet	lt
 80060fe:	425b      	neglt	r3, r3
 8006100:	f042 0202 	orrlt.w	r2, r2, #2
 8006104:	9307      	strge	r3, [sp, #28]
 8006106:	9307      	strlt	r3, [sp, #28]
 8006108:	bfb8      	it	lt
 800610a:	9204      	strlt	r2, [sp, #16]
 800610c:	7823      	ldrb	r3, [r4, #0]
 800610e:	2b2e      	cmp	r3, #46	; 0x2e
 8006110:	d10c      	bne.n	800612c <_svfiprintf_r+0x130>
 8006112:	7863      	ldrb	r3, [r4, #1]
 8006114:	2b2a      	cmp	r3, #42	; 0x2a
 8006116:	d135      	bne.n	8006184 <_svfiprintf_r+0x188>
 8006118:	9b03      	ldr	r3, [sp, #12]
 800611a:	1d1a      	adds	r2, r3, #4
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	9203      	str	r2, [sp, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	bfb8      	it	lt
 8006124:	f04f 33ff 	movlt.w	r3, #4294967295
 8006128:	3402      	adds	r4, #2
 800612a:	9305      	str	r3, [sp, #20]
 800612c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80061f8 <_svfiprintf_r+0x1fc>
 8006130:	7821      	ldrb	r1, [r4, #0]
 8006132:	2203      	movs	r2, #3
 8006134:	4650      	mov	r0, sl
 8006136:	f7fa f8d3 	bl	80002e0 <memchr>
 800613a:	b140      	cbz	r0, 800614e <_svfiprintf_r+0x152>
 800613c:	2340      	movs	r3, #64	; 0x40
 800613e:	eba0 000a 	sub.w	r0, r0, sl
 8006142:	fa03 f000 	lsl.w	r0, r3, r0
 8006146:	9b04      	ldr	r3, [sp, #16]
 8006148:	4303      	orrs	r3, r0
 800614a:	3401      	adds	r4, #1
 800614c:	9304      	str	r3, [sp, #16]
 800614e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006152:	4826      	ldr	r0, [pc, #152]	; (80061ec <_svfiprintf_r+0x1f0>)
 8006154:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006158:	2206      	movs	r2, #6
 800615a:	f7fa f8c1 	bl	80002e0 <memchr>
 800615e:	2800      	cmp	r0, #0
 8006160:	d038      	beq.n	80061d4 <_svfiprintf_r+0x1d8>
 8006162:	4b23      	ldr	r3, [pc, #140]	; (80061f0 <_svfiprintf_r+0x1f4>)
 8006164:	bb1b      	cbnz	r3, 80061ae <_svfiprintf_r+0x1b2>
 8006166:	9b03      	ldr	r3, [sp, #12]
 8006168:	3307      	adds	r3, #7
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	3308      	adds	r3, #8
 8006170:	9303      	str	r3, [sp, #12]
 8006172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006174:	4433      	add	r3, r6
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	e767      	b.n	800604a <_svfiprintf_r+0x4e>
 800617a:	fb0c 3202 	mla	r2, ip, r2, r3
 800617e:	460c      	mov	r4, r1
 8006180:	2001      	movs	r0, #1
 8006182:	e7a5      	b.n	80060d0 <_svfiprintf_r+0xd4>
 8006184:	2300      	movs	r3, #0
 8006186:	3401      	adds	r4, #1
 8006188:	9305      	str	r3, [sp, #20]
 800618a:	4619      	mov	r1, r3
 800618c:	f04f 0c0a 	mov.w	ip, #10
 8006190:	4620      	mov	r0, r4
 8006192:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006196:	3a30      	subs	r2, #48	; 0x30
 8006198:	2a09      	cmp	r2, #9
 800619a:	d903      	bls.n	80061a4 <_svfiprintf_r+0x1a8>
 800619c:	2b00      	cmp	r3, #0
 800619e:	d0c5      	beq.n	800612c <_svfiprintf_r+0x130>
 80061a0:	9105      	str	r1, [sp, #20]
 80061a2:	e7c3      	b.n	800612c <_svfiprintf_r+0x130>
 80061a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80061a8:	4604      	mov	r4, r0
 80061aa:	2301      	movs	r3, #1
 80061ac:	e7f0      	b.n	8006190 <_svfiprintf_r+0x194>
 80061ae:	ab03      	add	r3, sp, #12
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	462a      	mov	r2, r5
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <_svfiprintf_r+0x1f8>)
 80061b6:	a904      	add	r1, sp, #16
 80061b8:	4638      	mov	r0, r7
 80061ba:	f3af 8000 	nop.w
 80061be:	1c42      	adds	r2, r0, #1
 80061c0:	4606      	mov	r6, r0
 80061c2:	d1d6      	bne.n	8006172 <_svfiprintf_r+0x176>
 80061c4:	89ab      	ldrh	r3, [r5, #12]
 80061c6:	065b      	lsls	r3, r3, #25
 80061c8:	f53f af2c 	bmi.w	8006024 <_svfiprintf_r+0x28>
 80061cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80061ce:	b01d      	add	sp, #116	; 0x74
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061d4:	ab03      	add	r3, sp, #12
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	462a      	mov	r2, r5
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <_svfiprintf_r+0x1f8>)
 80061dc:	a904      	add	r1, sp, #16
 80061de:	4638      	mov	r0, r7
 80061e0:	f000 f87a 	bl	80062d8 <_printf_i>
 80061e4:	e7eb      	b.n	80061be <_svfiprintf_r+0x1c2>
 80061e6:	bf00      	nop
 80061e8:	0800683c 	.word	0x0800683c
 80061ec:	08006846 	.word	0x08006846
 80061f0:	00000000 	.word	0x00000000
 80061f4:	08005f45 	.word	0x08005f45
 80061f8:	08006842 	.word	0x08006842

080061fc <_printf_common>:
 80061fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006200:	4616      	mov	r6, r2
 8006202:	4699      	mov	r9, r3
 8006204:	688a      	ldr	r2, [r1, #8]
 8006206:	690b      	ldr	r3, [r1, #16]
 8006208:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800620c:	4293      	cmp	r3, r2
 800620e:	bfb8      	it	lt
 8006210:	4613      	movlt	r3, r2
 8006212:	6033      	str	r3, [r6, #0]
 8006214:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006218:	4607      	mov	r7, r0
 800621a:	460c      	mov	r4, r1
 800621c:	b10a      	cbz	r2, 8006222 <_printf_common+0x26>
 800621e:	3301      	adds	r3, #1
 8006220:	6033      	str	r3, [r6, #0]
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	0699      	lsls	r1, r3, #26
 8006226:	bf42      	ittt	mi
 8006228:	6833      	ldrmi	r3, [r6, #0]
 800622a:	3302      	addmi	r3, #2
 800622c:	6033      	strmi	r3, [r6, #0]
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	f015 0506 	ands.w	r5, r5, #6
 8006234:	d106      	bne.n	8006244 <_printf_common+0x48>
 8006236:	f104 0a19 	add.w	sl, r4, #25
 800623a:	68e3      	ldr	r3, [r4, #12]
 800623c:	6832      	ldr	r2, [r6, #0]
 800623e:	1a9b      	subs	r3, r3, r2
 8006240:	42ab      	cmp	r3, r5
 8006242:	dc26      	bgt.n	8006292 <_printf_common+0x96>
 8006244:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006248:	1e13      	subs	r3, r2, #0
 800624a:	6822      	ldr	r2, [r4, #0]
 800624c:	bf18      	it	ne
 800624e:	2301      	movne	r3, #1
 8006250:	0692      	lsls	r2, r2, #26
 8006252:	d42b      	bmi.n	80062ac <_printf_common+0xb0>
 8006254:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006258:	4649      	mov	r1, r9
 800625a:	4638      	mov	r0, r7
 800625c:	47c0      	blx	r8
 800625e:	3001      	adds	r0, #1
 8006260:	d01e      	beq.n	80062a0 <_printf_common+0xa4>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	68e5      	ldr	r5, [r4, #12]
 8006266:	6832      	ldr	r2, [r6, #0]
 8006268:	f003 0306 	and.w	r3, r3, #6
 800626c:	2b04      	cmp	r3, #4
 800626e:	bf08      	it	eq
 8006270:	1aad      	subeq	r5, r5, r2
 8006272:	68a3      	ldr	r3, [r4, #8]
 8006274:	6922      	ldr	r2, [r4, #16]
 8006276:	bf0c      	ite	eq
 8006278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800627c:	2500      	movne	r5, #0
 800627e:	4293      	cmp	r3, r2
 8006280:	bfc4      	itt	gt
 8006282:	1a9b      	subgt	r3, r3, r2
 8006284:	18ed      	addgt	r5, r5, r3
 8006286:	2600      	movs	r6, #0
 8006288:	341a      	adds	r4, #26
 800628a:	42b5      	cmp	r5, r6
 800628c:	d11a      	bne.n	80062c4 <_printf_common+0xc8>
 800628e:	2000      	movs	r0, #0
 8006290:	e008      	b.n	80062a4 <_printf_common+0xa8>
 8006292:	2301      	movs	r3, #1
 8006294:	4652      	mov	r2, sl
 8006296:	4649      	mov	r1, r9
 8006298:	4638      	mov	r0, r7
 800629a:	47c0      	blx	r8
 800629c:	3001      	adds	r0, #1
 800629e:	d103      	bne.n	80062a8 <_printf_common+0xac>
 80062a0:	f04f 30ff 	mov.w	r0, #4294967295
 80062a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7c6      	b.n	800623a <_printf_common+0x3e>
 80062ac:	18e1      	adds	r1, r4, r3
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	2030      	movs	r0, #48	; 0x30
 80062b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80062b6:	4422      	add	r2, r4
 80062b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80062bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80062c0:	3302      	adds	r3, #2
 80062c2:	e7c7      	b.n	8006254 <_printf_common+0x58>
 80062c4:	2301      	movs	r3, #1
 80062c6:	4622      	mov	r2, r4
 80062c8:	4649      	mov	r1, r9
 80062ca:	4638      	mov	r0, r7
 80062cc:	47c0      	blx	r8
 80062ce:	3001      	adds	r0, #1
 80062d0:	d0e6      	beq.n	80062a0 <_printf_common+0xa4>
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7d9      	b.n	800628a <_printf_common+0x8e>
	...

080062d8 <_printf_i>:
 80062d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	7e0f      	ldrb	r7, [r1, #24]
 80062de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80062e0:	2f78      	cmp	r7, #120	; 0x78
 80062e2:	4691      	mov	r9, r2
 80062e4:	4680      	mov	r8, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	469a      	mov	sl, r3
 80062ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80062ee:	d807      	bhi.n	8006300 <_printf_i+0x28>
 80062f0:	2f62      	cmp	r7, #98	; 0x62
 80062f2:	d80a      	bhi.n	800630a <_printf_i+0x32>
 80062f4:	2f00      	cmp	r7, #0
 80062f6:	f000 80d8 	beq.w	80064aa <_printf_i+0x1d2>
 80062fa:	2f58      	cmp	r7, #88	; 0x58
 80062fc:	f000 80a3 	beq.w	8006446 <_printf_i+0x16e>
 8006300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006304:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006308:	e03a      	b.n	8006380 <_printf_i+0xa8>
 800630a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800630e:	2b15      	cmp	r3, #21
 8006310:	d8f6      	bhi.n	8006300 <_printf_i+0x28>
 8006312:	a101      	add	r1, pc, #4	; (adr r1, 8006318 <_printf_i+0x40>)
 8006314:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006318:	08006371 	.word	0x08006371
 800631c:	08006385 	.word	0x08006385
 8006320:	08006301 	.word	0x08006301
 8006324:	08006301 	.word	0x08006301
 8006328:	08006301 	.word	0x08006301
 800632c:	08006301 	.word	0x08006301
 8006330:	08006385 	.word	0x08006385
 8006334:	08006301 	.word	0x08006301
 8006338:	08006301 	.word	0x08006301
 800633c:	08006301 	.word	0x08006301
 8006340:	08006301 	.word	0x08006301
 8006344:	08006491 	.word	0x08006491
 8006348:	080063b5 	.word	0x080063b5
 800634c:	08006473 	.word	0x08006473
 8006350:	08006301 	.word	0x08006301
 8006354:	08006301 	.word	0x08006301
 8006358:	080064b3 	.word	0x080064b3
 800635c:	08006301 	.word	0x08006301
 8006360:	080063b5 	.word	0x080063b5
 8006364:	08006301 	.word	0x08006301
 8006368:	08006301 	.word	0x08006301
 800636c:	0800647b 	.word	0x0800647b
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	602a      	str	r2, [r5, #0]
 8006378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800637c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006380:	2301      	movs	r3, #1
 8006382:	e0a3      	b.n	80064cc <_printf_i+0x1f4>
 8006384:	6820      	ldr	r0, [r4, #0]
 8006386:	6829      	ldr	r1, [r5, #0]
 8006388:	0606      	lsls	r6, r0, #24
 800638a:	f101 0304 	add.w	r3, r1, #4
 800638e:	d50a      	bpl.n	80063a6 <_printf_i+0xce>
 8006390:	680e      	ldr	r6, [r1, #0]
 8006392:	602b      	str	r3, [r5, #0]
 8006394:	2e00      	cmp	r6, #0
 8006396:	da03      	bge.n	80063a0 <_printf_i+0xc8>
 8006398:	232d      	movs	r3, #45	; 0x2d
 800639a:	4276      	negs	r6, r6
 800639c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063a0:	485e      	ldr	r0, [pc, #376]	; (800651c <_printf_i+0x244>)
 80063a2:	230a      	movs	r3, #10
 80063a4:	e019      	b.n	80063da <_printf_i+0x102>
 80063a6:	680e      	ldr	r6, [r1, #0]
 80063a8:	602b      	str	r3, [r5, #0]
 80063aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80063ae:	bf18      	it	ne
 80063b0:	b236      	sxthne	r6, r6
 80063b2:	e7ef      	b.n	8006394 <_printf_i+0xbc>
 80063b4:	682b      	ldr	r3, [r5, #0]
 80063b6:	6820      	ldr	r0, [r4, #0]
 80063b8:	1d19      	adds	r1, r3, #4
 80063ba:	6029      	str	r1, [r5, #0]
 80063bc:	0601      	lsls	r1, r0, #24
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0xec>
 80063c0:	681e      	ldr	r6, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0xf2>
 80063c4:	0646      	lsls	r6, r0, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0xe8>
 80063c8:	881e      	ldrh	r6, [r3, #0]
 80063ca:	4854      	ldr	r0, [pc, #336]	; (800651c <_printf_i+0x244>)
 80063cc:	2f6f      	cmp	r7, #111	; 0x6f
 80063ce:	bf0c      	ite	eq
 80063d0:	2308      	moveq	r3, #8
 80063d2:	230a      	movne	r3, #10
 80063d4:	2100      	movs	r1, #0
 80063d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80063da:	6865      	ldr	r5, [r4, #4]
 80063dc:	60a5      	str	r5, [r4, #8]
 80063de:	2d00      	cmp	r5, #0
 80063e0:	bfa2      	ittt	ge
 80063e2:	6821      	ldrge	r1, [r4, #0]
 80063e4:	f021 0104 	bicge.w	r1, r1, #4
 80063e8:	6021      	strge	r1, [r4, #0]
 80063ea:	b90e      	cbnz	r6, 80063f0 <_printf_i+0x118>
 80063ec:	2d00      	cmp	r5, #0
 80063ee:	d04d      	beq.n	800648c <_printf_i+0x1b4>
 80063f0:	4615      	mov	r5, r2
 80063f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80063f6:	fb03 6711 	mls	r7, r3, r1, r6
 80063fa:	5dc7      	ldrb	r7, [r0, r7]
 80063fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006400:	4637      	mov	r7, r6
 8006402:	42bb      	cmp	r3, r7
 8006404:	460e      	mov	r6, r1
 8006406:	d9f4      	bls.n	80063f2 <_printf_i+0x11a>
 8006408:	2b08      	cmp	r3, #8
 800640a:	d10b      	bne.n	8006424 <_printf_i+0x14c>
 800640c:	6823      	ldr	r3, [r4, #0]
 800640e:	07de      	lsls	r6, r3, #31
 8006410:	d508      	bpl.n	8006424 <_printf_i+0x14c>
 8006412:	6923      	ldr	r3, [r4, #16]
 8006414:	6861      	ldr	r1, [r4, #4]
 8006416:	4299      	cmp	r1, r3
 8006418:	bfde      	ittt	le
 800641a:	2330      	movle	r3, #48	; 0x30
 800641c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006424:	1b52      	subs	r2, r2, r5
 8006426:	6122      	str	r2, [r4, #16]
 8006428:	f8cd a000 	str.w	sl, [sp]
 800642c:	464b      	mov	r3, r9
 800642e:	aa03      	add	r2, sp, #12
 8006430:	4621      	mov	r1, r4
 8006432:	4640      	mov	r0, r8
 8006434:	f7ff fee2 	bl	80061fc <_printf_common>
 8006438:	3001      	adds	r0, #1
 800643a:	d14c      	bne.n	80064d6 <_printf_i+0x1fe>
 800643c:	f04f 30ff 	mov.w	r0, #4294967295
 8006440:	b004      	add	sp, #16
 8006442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006446:	4835      	ldr	r0, [pc, #212]	; (800651c <_printf_i+0x244>)
 8006448:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800644c:	6829      	ldr	r1, [r5, #0]
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	f851 6b04 	ldr.w	r6, [r1], #4
 8006454:	6029      	str	r1, [r5, #0]
 8006456:	061d      	lsls	r5, r3, #24
 8006458:	d514      	bpl.n	8006484 <_printf_i+0x1ac>
 800645a:	07df      	lsls	r7, r3, #31
 800645c:	bf44      	itt	mi
 800645e:	f043 0320 	orrmi.w	r3, r3, #32
 8006462:	6023      	strmi	r3, [r4, #0]
 8006464:	b91e      	cbnz	r6, 800646e <_printf_i+0x196>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	f023 0320 	bic.w	r3, r3, #32
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	2310      	movs	r3, #16
 8006470:	e7b0      	b.n	80063d4 <_printf_i+0xfc>
 8006472:	6823      	ldr	r3, [r4, #0]
 8006474:	f043 0320 	orr.w	r3, r3, #32
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	2378      	movs	r3, #120	; 0x78
 800647c:	4828      	ldr	r0, [pc, #160]	; (8006520 <_printf_i+0x248>)
 800647e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006482:	e7e3      	b.n	800644c <_printf_i+0x174>
 8006484:	0659      	lsls	r1, r3, #25
 8006486:	bf48      	it	mi
 8006488:	b2b6      	uxthmi	r6, r6
 800648a:	e7e6      	b.n	800645a <_printf_i+0x182>
 800648c:	4615      	mov	r5, r2
 800648e:	e7bb      	b.n	8006408 <_printf_i+0x130>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	6826      	ldr	r6, [r4, #0]
 8006494:	6961      	ldr	r1, [r4, #20]
 8006496:	1d18      	adds	r0, r3, #4
 8006498:	6028      	str	r0, [r5, #0]
 800649a:	0635      	lsls	r5, r6, #24
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	d501      	bpl.n	80064a4 <_printf_i+0x1cc>
 80064a0:	6019      	str	r1, [r3, #0]
 80064a2:	e002      	b.n	80064aa <_printf_i+0x1d2>
 80064a4:	0670      	lsls	r0, r6, #25
 80064a6:	d5fb      	bpl.n	80064a0 <_printf_i+0x1c8>
 80064a8:	8019      	strh	r1, [r3, #0]
 80064aa:	2300      	movs	r3, #0
 80064ac:	6123      	str	r3, [r4, #16]
 80064ae:	4615      	mov	r5, r2
 80064b0:	e7ba      	b.n	8006428 <_printf_i+0x150>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	1d1a      	adds	r2, r3, #4
 80064b6:	602a      	str	r2, [r5, #0]
 80064b8:	681d      	ldr	r5, [r3, #0]
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	2100      	movs	r1, #0
 80064be:	4628      	mov	r0, r5
 80064c0:	f7f9 ff0e 	bl	80002e0 <memchr>
 80064c4:	b108      	cbz	r0, 80064ca <_printf_i+0x1f2>
 80064c6:	1b40      	subs	r0, r0, r5
 80064c8:	6060      	str	r0, [r4, #4]
 80064ca:	6863      	ldr	r3, [r4, #4]
 80064cc:	6123      	str	r3, [r4, #16]
 80064ce:	2300      	movs	r3, #0
 80064d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064d4:	e7a8      	b.n	8006428 <_printf_i+0x150>
 80064d6:	6923      	ldr	r3, [r4, #16]
 80064d8:	462a      	mov	r2, r5
 80064da:	4649      	mov	r1, r9
 80064dc:	4640      	mov	r0, r8
 80064de:	47d0      	blx	sl
 80064e0:	3001      	adds	r0, #1
 80064e2:	d0ab      	beq.n	800643c <_printf_i+0x164>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	079b      	lsls	r3, r3, #30
 80064e8:	d413      	bmi.n	8006512 <_printf_i+0x23a>
 80064ea:	68e0      	ldr	r0, [r4, #12]
 80064ec:	9b03      	ldr	r3, [sp, #12]
 80064ee:	4298      	cmp	r0, r3
 80064f0:	bfb8      	it	lt
 80064f2:	4618      	movlt	r0, r3
 80064f4:	e7a4      	b.n	8006440 <_printf_i+0x168>
 80064f6:	2301      	movs	r3, #1
 80064f8:	4632      	mov	r2, r6
 80064fa:	4649      	mov	r1, r9
 80064fc:	4640      	mov	r0, r8
 80064fe:	47d0      	blx	sl
 8006500:	3001      	adds	r0, #1
 8006502:	d09b      	beq.n	800643c <_printf_i+0x164>
 8006504:	3501      	adds	r5, #1
 8006506:	68e3      	ldr	r3, [r4, #12]
 8006508:	9903      	ldr	r1, [sp, #12]
 800650a:	1a5b      	subs	r3, r3, r1
 800650c:	42ab      	cmp	r3, r5
 800650e:	dcf2      	bgt.n	80064f6 <_printf_i+0x21e>
 8006510:	e7eb      	b.n	80064ea <_printf_i+0x212>
 8006512:	2500      	movs	r5, #0
 8006514:	f104 0619 	add.w	r6, r4, #25
 8006518:	e7f5      	b.n	8006506 <_printf_i+0x22e>
 800651a:	bf00      	nop
 800651c:	0800684d 	.word	0x0800684d
 8006520:	0800685e 	.word	0x0800685e

08006524 <memcpy>:
 8006524:	440a      	add	r2, r1
 8006526:	4291      	cmp	r1, r2
 8006528:	f100 33ff 	add.w	r3, r0, #4294967295
 800652c:	d100      	bne.n	8006530 <memcpy+0xc>
 800652e:	4770      	bx	lr
 8006530:	b510      	push	{r4, lr}
 8006532:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800653a:	4291      	cmp	r1, r2
 800653c:	d1f9      	bne.n	8006532 <memcpy+0xe>
 800653e:	bd10      	pop	{r4, pc}

08006540 <memmove>:
 8006540:	4288      	cmp	r0, r1
 8006542:	b510      	push	{r4, lr}
 8006544:	eb01 0402 	add.w	r4, r1, r2
 8006548:	d902      	bls.n	8006550 <memmove+0x10>
 800654a:	4284      	cmp	r4, r0
 800654c:	4623      	mov	r3, r4
 800654e:	d807      	bhi.n	8006560 <memmove+0x20>
 8006550:	1e43      	subs	r3, r0, #1
 8006552:	42a1      	cmp	r1, r4
 8006554:	d008      	beq.n	8006568 <memmove+0x28>
 8006556:	f811 2b01 	ldrb.w	r2, [r1], #1
 800655a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800655e:	e7f8      	b.n	8006552 <memmove+0x12>
 8006560:	4402      	add	r2, r0
 8006562:	4601      	mov	r1, r0
 8006564:	428a      	cmp	r2, r1
 8006566:	d100      	bne.n	800656a <memmove+0x2a>
 8006568:	bd10      	pop	{r4, pc}
 800656a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800656e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006572:	e7f7      	b.n	8006564 <memmove+0x24>

08006574 <_free_r>:
 8006574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006576:	2900      	cmp	r1, #0
 8006578:	d044      	beq.n	8006604 <_free_r+0x90>
 800657a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800657e:	9001      	str	r0, [sp, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	f1a1 0404 	sub.w	r4, r1, #4
 8006586:	bfb8      	it	lt
 8006588:	18e4      	addlt	r4, r4, r3
 800658a:	f000 f913 	bl	80067b4 <__malloc_lock>
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <_free_r+0x94>)
 8006590:	9801      	ldr	r0, [sp, #4]
 8006592:	6813      	ldr	r3, [r2, #0]
 8006594:	b933      	cbnz	r3, 80065a4 <_free_r+0x30>
 8006596:	6063      	str	r3, [r4, #4]
 8006598:	6014      	str	r4, [r2, #0]
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a0:	f000 b90e 	b.w	80067c0 <__malloc_unlock>
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	d908      	bls.n	80065ba <_free_r+0x46>
 80065a8:	6825      	ldr	r5, [r4, #0]
 80065aa:	1961      	adds	r1, r4, r5
 80065ac:	428b      	cmp	r3, r1
 80065ae:	bf01      	itttt	eq
 80065b0:	6819      	ldreq	r1, [r3, #0]
 80065b2:	685b      	ldreq	r3, [r3, #4]
 80065b4:	1949      	addeq	r1, r1, r5
 80065b6:	6021      	streq	r1, [r4, #0]
 80065b8:	e7ed      	b.n	8006596 <_free_r+0x22>
 80065ba:	461a      	mov	r2, r3
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	b10b      	cbz	r3, 80065c4 <_free_r+0x50>
 80065c0:	42a3      	cmp	r3, r4
 80065c2:	d9fa      	bls.n	80065ba <_free_r+0x46>
 80065c4:	6811      	ldr	r1, [r2, #0]
 80065c6:	1855      	adds	r5, r2, r1
 80065c8:	42a5      	cmp	r5, r4
 80065ca:	d10b      	bne.n	80065e4 <_free_r+0x70>
 80065cc:	6824      	ldr	r4, [r4, #0]
 80065ce:	4421      	add	r1, r4
 80065d0:	1854      	adds	r4, r2, r1
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	d1e0      	bne.n	800659a <_free_r+0x26>
 80065d8:	681c      	ldr	r4, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	6053      	str	r3, [r2, #4]
 80065de:	4421      	add	r1, r4
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	e7da      	b.n	800659a <_free_r+0x26>
 80065e4:	d902      	bls.n	80065ec <_free_r+0x78>
 80065e6:	230c      	movs	r3, #12
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	e7d6      	b.n	800659a <_free_r+0x26>
 80065ec:	6825      	ldr	r5, [r4, #0]
 80065ee:	1961      	adds	r1, r4, r5
 80065f0:	428b      	cmp	r3, r1
 80065f2:	bf04      	itt	eq
 80065f4:	6819      	ldreq	r1, [r3, #0]
 80065f6:	685b      	ldreq	r3, [r3, #4]
 80065f8:	6063      	str	r3, [r4, #4]
 80065fa:	bf04      	itt	eq
 80065fc:	1949      	addeq	r1, r1, r5
 80065fe:	6021      	streq	r1, [r4, #0]
 8006600:	6054      	str	r4, [r2, #4]
 8006602:	e7ca      	b.n	800659a <_free_r+0x26>
 8006604:	b003      	add	sp, #12
 8006606:	bd30      	pop	{r4, r5, pc}
 8006608:	240001b4 	.word	0x240001b4

0800660c <sbrk_aligned>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	4e0e      	ldr	r6, [pc, #56]	; (8006648 <sbrk_aligned+0x3c>)
 8006610:	460c      	mov	r4, r1
 8006612:	6831      	ldr	r1, [r6, #0]
 8006614:	4605      	mov	r5, r0
 8006616:	b911      	cbnz	r1, 800661e <sbrk_aligned+0x12>
 8006618:	f000 f8bc 	bl	8006794 <_sbrk_r>
 800661c:	6030      	str	r0, [r6, #0]
 800661e:	4621      	mov	r1, r4
 8006620:	4628      	mov	r0, r5
 8006622:	f000 f8b7 	bl	8006794 <_sbrk_r>
 8006626:	1c43      	adds	r3, r0, #1
 8006628:	d00a      	beq.n	8006640 <sbrk_aligned+0x34>
 800662a:	1cc4      	adds	r4, r0, #3
 800662c:	f024 0403 	bic.w	r4, r4, #3
 8006630:	42a0      	cmp	r0, r4
 8006632:	d007      	beq.n	8006644 <sbrk_aligned+0x38>
 8006634:	1a21      	subs	r1, r4, r0
 8006636:	4628      	mov	r0, r5
 8006638:	f000 f8ac 	bl	8006794 <_sbrk_r>
 800663c:	3001      	adds	r0, #1
 800663e:	d101      	bne.n	8006644 <sbrk_aligned+0x38>
 8006640:	f04f 34ff 	mov.w	r4, #4294967295
 8006644:	4620      	mov	r0, r4
 8006646:	bd70      	pop	{r4, r5, r6, pc}
 8006648:	240001b8 	.word	0x240001b8

0800664c <_malloc_r>:
 800664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006650:	1ccd      	adds	r5, r1, #3
 8006652:	f025 0503 	bic.w	r5, r5, #3
 8006656:	3508      	adds	r5, #8
 8006658:	2d0c      	cmp	r5, #12
 800665a:	bf38      	it	cc
 800665c:	250c      	movcc	r5, #12
 800665e:	2d00      	cmp	r5, #0
 8006660:	4607      	mov	r7, r0
 8006662:	db01      	blt.n	8006668 <_malloc_r+0x1c>
 8006664:	42a9      	cmp	r1, r5
 8006666:	d905      	bls.n	8006674 <_malloc_r+0x28>
 8006668:	230c      	movs	r3, #12
 800666a:	603b      	str	r3, [r7, #0]
 800666c:	2600      	movs	r6, #0
 800666e:	4630      	mov	r0, r6
 8006670:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006674:	4e2e      	ldr	r6, [pc, #184]	; (8006730 <_malloc_r+0xe4>)
 8006676:	f000 f89d 	bl	80067b4 <__malloc_lock>
 800667a:	6833      	ldr	r3, [r6, #0]
 800667c:	461c      	mov	r4, r3
 800667e:	bb34      	cbnz	r4, 80066ce <_malloc_r+0x82>
 8006680:	4629      	mov	r1, r5
 8006682:	4638      	mov	r0, r7
 8006684:	f7ff ffc2 	bl	800660c <sbrk_aligned>
 8006688:	1c43      	adds	r3, r0, #1
 800668a:	4604      	mov	r4, r0
 800668c:	d14d      	bne.n	800672a <_malloc_r+0xde>
 800668e:	6834      	ldr	r4, [r6, #0]
 8006690:	4626      	mov	r6, r4
 8006692:	2e00      	cmp	r6, #0
 8006694:	d140      	bne.n	8006718 <_malloc_r+0xcc>
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	4631      	mov	r1, r6
 800669a:	4638      	mov	r0, r7
 800669c:	eb04 0803 	add.w	r8, r4, r3
 80066a0:	f000 f878 	bl	8006794 <_sbrk_r>
 80066a4:	4580      	cmp	r8, r0
 80066a6:	d13a      	bne.n	800671e <_malloc_r+0xd2>
 80066a8:	6821      	ldr	r1, [r4, #0]
 80066aa:	3503      	adds	r5, #3
 80066ac:	1a6d      	subs	r5, r5, r1
 80066ae:	f025 0503 	bic.w	r5, r5, #3
 80066b2:	3508      	adds	r5, #8
 80066b4:	2d0c      	cmp	r5, #12
 80066b6:	bf38      	it	cc
 80066b8:	250c      	movcc	r5, #12
 80066ba:	4629      	mov	r1, r5
 80066bc:	4638      	mov	r0, r7
 80066be:	f7ff ffa5 	bl	800660c <sbrk_aligned>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d02b      	beq.n	800671e <_malloc_r+0xd2>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	442b      	add	r3, r5
 80066ca:	6023      	str	r3, [r4, #0]
 80066cc:	e00e      	b.n	80066ec <_malloc_r+0xa0>
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	1b52      	subs	r2, r2, r5
 80066d2:	d41e      	bmi.n	8006712 <_malloc_r+0xc6>
 80066d4:	2a0b      	cmp	r2, #11
 80066d6:	d916      	bls.n	8006706 <_malloc_r+0xba>
 80066d8:	1961      	adds	r1, r4, r5
 80066da:	42a3      	cmp	r3, r4
 80066dc:	6025      	str	r5, [r4, #0]
 80066de:	bf18      	it	ne
 80066e0:	6059      	strne	r1, [r3, #4]
 80066e2:	6863      	ldr	r3, [r4, #4]
 80066e4:	bf08      	it	eq
 80066e6:	6031      	streq	r1, [r6, #0]
 80066e8:	5162      	str	r2, [r4, r5]
 80066ea:	604b      	str	r3, [r1, #4]
 80066ec:	4638      	mov	r0, r7
 80066ee:	f104 060b 	add.w	r6, r4, #11
 80066f2:	f000 f865 	bl	80067c0 <__malloc_unlock>
 80066f6:	f026 0607 	bic.w	r6, r6, #7
 80066fa:	1d23      	adds	r3, r4, #4
 80066fc:	1af2      	subs	r2, r6, r3
 80066fe:	d0b6      	beq.n	800666e <_malloc_r+0x22>
 8006700:	1b9b      	subs	r3, r3, r6
 8006702:	50a3      	str	r3, [r4, r2]
 8006704:	e7b3      	b.n	800666e <_malloc_r+0x22>
 8006706:	6862      	ldr	r2, [r4, #4]
 8006708:	42a3      	cmp	r3, r4
 800670a:	bf0c      	ite	eq
 800670c:	6032      	streq	r2, [r6, #0]
 800670e:	605a      	strne	r2, [r3, #4]
 8006710:	e7ec      	b.n	80066ec <_malloc_r+0xa0>
 8006712:	4623      	mov	r3, r4
 8006714:	6864      	ldr	r4, [r4, #4]
 8006716:	e7b2      	b.n	800667e <_malloc_r+0x32>
 8006718:	4634      	mov	r4, r6
 800671a:	6876      	ldr	r6, [r6, #4]
 800671c:	e7b9      	b.n	8006692 <_malloc_r+0x46>
 800671e:	230c      	movs	r3, #12
 8006720:	603b      	str	r3, [r7, #0]
 8006722:	4638      	mov	r0, r7
 8006724:	f000 f84c 	bl	80067c0 <__malloc_unlock>
 8006728:	e7a1      	b.n	800666e <_malloc_r+0x22>
 800672a:	6025      	str	r5, [r4, #0]
 800672c:	e7de      	b.n	80066ec <_malloc_r+0xa0>
 800672e:	bf00      	nop
 8006730:	240001b4 	.word	0x240001b4

08006734 <_realloc_r>:
 8006734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006738:	4680      	mov	r8, r0
 800673a:	4614      	mov	r4, r2
 800673c:	460e      	mov	r6, r1
 800673e:	b921      	cbnz	r1, 800674a <_realloc_r+0x16>
 8006740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006744:	4611      	mov	r1, r2
 8006746:	f7ff bf81 	b.w	800664c <_malloc_r>
 800674a:	b92a      	cbnz	r2, 8006758 <_realloc_r+0x24>
 800674c:	f7ff ff12 	bl	8006574 <_free_r>
 8006750:	4625      	mov	r5, r4
 8006752:	4628      	mov	r0, r5
 8006754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006758:	f000 f838 	bl	80067cc <_malloc_usable_size_r>
 800675c:	4284      	cmp	r4, r0
 800675e:	4607      	mov	r7, r0
 8006760:	d802      	bhi.n	8006768 <_realloc_r+0x34>
 8006762:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006766:	d812      	bhi.n	800678e <_realloc_r+0x5a>
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff ff6e 	bl	800664c <_malloc_r>
 8006770:	4605      	mov	r5, r0
 8006772:	2800      	cmp	r0, #0
 8006774:	d0ed      	beq.n	8006752 <_realloc_r+0x1e>
 8006776:	42bc      	cmp	r4, r7
 8006778:	4622      	mov	r2, r4
 800677a:	4631      	mov	r1, r6
 800677c:	bf28      	it	cs
 800677e:	463a      	movcs	r2, r7
 8006780:	f7ff fed0 	bl	8006524 <memcpy>
 8006784:	4631      	mov	r1, r6
 8006786:	4640      	mov	r0, r8
 8006788:	f7ff fef4 	bl	8006574 <_free_r>
 800678c:	e7e1      	b.n	8006752 <_realloc_r+0x1e>
 800678e:	4635      	mov	r5, r6
 8006790:	e7df      	b.n	8006752 <_realloc_r+0x1e>
	...

08006794 <_sbrk_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d06      	ldr	r5, [pc, #24]	; (80067b0 <_sbrk_r+0x1c>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	602b      	str	r3, [r5, #0]
 80067a0:	f7fa faf6 	bl	8000d90 <_sbrk>
 80067a4:	1c43      	adds	r3, r0, #1
 80067a6:	d102      	bne.n	80067ae <_sbrk_r+0x1a>
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	b103      	cbz	r3, 80067ae <_sbrk_r+0x1a>
 80067ac:	6023      	str	r3, [r4, #0]
 80067ae:	bd38      	pop	{r3, r4, r5, pc}
 80067b0:	240001bc 	.word	0x240001bc

080067b4 <__malloc_lock>:
 80067b4:	4801      	ldr	r0, [pc, #4]	; (80067bc <__malloc_lock+0x8>)
 80067b6:	f000 b811 	b.w	80067dc <__retarget_lock_acquire_recursive>
 80067ba:	bf00      	nop
 80067bc:	240001c0 	.word	0x240001c0

080067c0 <__malloc_unlock>:
 80067c0:	4801      	ldr	r0, [pc, #4]	; (80067c8 <__malloc_unlock+0x8>)
 80067c2:	f000 b80c 	b.w	80067de <__retarget_lock_release_recursive>
 80067c6:	bf00      	nop
 80067c8:	240001c0 	.word	0x240001c0

080067cc <_malloc_usable_size_r>:
 80067cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067d0:	1f18      	subs	r0, r3, #4
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	bfbc      	itt	lt
 80067d6:	580b      	ldrlt	r3, [r1, r0]
 80067d8:	18c0      	addlt	r0, r0, r3
 80067da:	4770      	bx	lr

080067dc <__retarget_lock_acquire_recursive>:
 80067dc:	4770      	bx	lr

080067de <__retarget_lock_release_recursive>:
 80067de:	4770      	bx	lr

080067e0 <_init>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr

080067ec <_fini>:
 80067ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ee:	bf00      	nop
 80067f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f2:	bc08      	pop	{r3}
 80067f4:	469e      	mov	lr, r3
 80067f6:	4770      	bx	lr
