
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007acc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007d64  08007d64  00017d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da4  08007da4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000038c  24000010  08007dbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400039c  08007dbc  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001896d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000254f  00000000  00000000  000389ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  0003af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003c130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ac85  00000000  00000000  0003d298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a8e  00000000  00000000  00077f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00188fa7  00000000  00000000  0008e9ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00217952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e34  00000000  00000000  002179a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007d4c 	.word	0x08007d4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007d4c 	.word	0x08007d4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0a2      	sub	sp, #136	; 0x88
 80005e0:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80005e2:	4b77      	ldr	r3, [pc, #476]	; (80007c0 <main+0x1e4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d11b      	bne.n	8000626 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005ee:	f3bf 8f4f 	dsb	sy
}
 80005f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005f4:	f3bf 8f6f 	isb	sy
}
 80005f8:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005fa:	4b71      	ldr	r3, [pc, #452]	; (80007c0 <main+0x1e4>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000602:	f3bf 8f4f 	dsb	sy
}
 8000606:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000608:	f3bf 8f6f 	isb	sy
}
 800060c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800060e:	4b6c      	ldr	r3, [pc, #432]	; (80007c0 <main+0x1e4>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	4a6b      	ldr	r2, [pc, #428]	; (80007c0 <main+0x1e4>)
 8000614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000618:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800061a:	f3bf 8f4f 	dsb	sy
}
 800061e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000620:	f3bf 8f6f 	isb	sy
}
 8000624:	e000      	b.n	8000628 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000626:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000628:	4b65      	ldr	r3, [pc, #404]	; (80007c0 <main+0x1e4>)
 800062a:	695b      	ldr	r3, [r3, #20]
 800062c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000630:	2b00      	cmp	r3, #0
 8000632:	d138      	bne.n	80006a6 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000634:	4b62      	ldr	r3, [pc, #392]	; (80007c0 <main+0x1e4>)
 8000636:	2200      	movs	r2, #0
 8000638:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063c:	f3bf 8f4f 	dsb	sy
}
 8000640:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000642:	4b5f      	ldr	r3, [pc, #380]	; (80007c0 <main+0x1e4>)
 8000644:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000648:	67bb      	str	r3, [r7, #120]	; 0x78

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800064c:	0b5b      	lsrs	r3, r3, #13
 800064e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000652:	677b      	str	r3, [r7, #116]	; 0x74
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000656:	08db      	lsrs	r3, r3, #3
 8000658:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065c:	673b      	str	r3, [r7, #112]	; 0x70
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800065e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000660:	015a      	lsls	r2, r3, #5
 8000662:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000666:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000668:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800066a:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066c:	4954      	ldr	r1, [pc, #336]	; (80007c0 <main+0x1e4>)
 800066e:	4313      	orrs	r3, r2
 8000670:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000674:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	673a      	str	r2, [r7, #112]	; 0x70
 800067a:	2b00      	cmp	r3, #0
 800067c:	d1ef      	bne.n	800065e <main+0x82>
    } while(sets-- != 0U);
 800067e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000680:	1e5a      	subs	r2, r3, #1
 8000682:	677a      	str	r2, [r7, #116]	; 0x74
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1e5      	bne.n	8000654 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8000688:	f3bf 8f4f 	dsb	sy
}
 800068c:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800068e:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <main+0x1e4>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	4a4b      	ldr	r2, [pc, #300]	; (80007c0 <main+0x1e4>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000698:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069a:	f3bf 8f4f 	dsb	sy
}
 800069e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a0:	f3bf 8f6f 	isb	sy
}
 80006a4:	e000      	b.n	80006a8 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006a6:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f001 fafa 	bl	8001ca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f8a2 	bl	80007f4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80006b0:	4b44      	ldr	r3, [pc, #272]	; (80007c4 <main+0x1e8>)
 80006b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006b6:	4a43      	ldr	r2, [pc, #268]	; (80007c4 <main+0x1e8>)
 80006b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80006c0:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <main+0x1e8>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80006c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 fc23 	bl	8000f18 <MX_GPIO_Init>
  MX_SPI2_Init();
 80006d2:	f000 f95f 	bl	8000994 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80006d6:	f000 fbd3 	bl	8000e80 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80006da:	f000 fab3 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM1_Init();
 80006de:	f000 fa05 	bl	8000aec <MX_TIM1_Init>
  MX_TIM4_Init();
 80006e2:	f000 fafb 	bl	8000cdc <MX_TIM4_Init>
  MX_TIM16_Init();
 80006e6:	f000 fb53 	bl	8000d90 <MX_TIM16_Init>
  MX_SPI1_Init();
 80006ea:	f000 f8fd 	bl	80008e8 <MX_SPI1_Init>
  MX_SPI3_Init();
 80006ee:	f000 f9a9 	bl	8000a44 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80006f2:	4835      	ldr	r0, [pc, #212]	; (80007c8 <main+0x1ec>)
 80006f4:	f004 fe82 	bl	80053fc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	4834      	ldr	r0, [pc, #208]	; (80007cc <main+0x1f0>)
 80006fc:	f004 ff7c 	bl	80055f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 8000700:	2100      	movs	r1, #0
 8000702:	4833      	ldr	r0, [pc, #204]	; (80007d0 <main+0x1f4>)
 8000704:	f004 ff78 	bl	80055f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 8000708:	2104      	movs	r1, #4
 800070a:	4831      	ldr	r0, [pc, #196]	; (80007d0 <main+0x1f4>)
 800070c:	f004 ff74 	bl	80055f8 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = (htim1.Init.Period *1);
 8000710:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <main+0x1f8>)
 8000712:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <main+0x1f0>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	6353      	str	r3, [r2, #52]	; 0x34
  TIM4->CCR1 = 5;//(htim4.Init.Period / 2);
 8000718:	4b2f      	ldr	r3, [pc, #188]	; (80007d8 <main+0x1fc>)
 800071a:	2205      	movs	r2, #5
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5;
 800071e:	4b2e      	ldr	r3, [pc, #184]	; (80007d8 <main+0x1fc>)
 8000720:	2205      	movs	r2, #5
 8000722:	639a      	str	r2, [r3, #56]	; 0x38
  TIM16->CCR1 = 5;//(htim16.Init.Period *1);
 8000724:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <main+0x200>)
 8000726:	2205      	movs	r2, #5
 8000728:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint16_t writeBuf1 = 0b0000110010001111;
 800072a:	f640 438f 	movw	r3, #3215	; 0xc8f
 800072e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
  const uint16_t writeBuf2 = 0b0000110011110000;
 8000732:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 8000736:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
  const uint16_t writeBuf3 = 0b0000110011110000;
 800073a:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 800073e:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
  const uint16_t writeBuf4 = 0b0000110011110000;
 8000742:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 8000746:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
  const uint16_t writeBuf5 = 0b0000110011110000;
 800074a:	f44f 634f 	mov.w	r3, #3312	; 0xcf0
 800074e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e

  state = collect;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <main+0x204>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <main+0x204>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <main+0x188>
 8000760:	2b01      	cmp	r3, #1
				{

				}
				break;
	  	  case wait:
	  		  break;
 8000762:	e02c      	b.n	80007be <main+0x1e2>
	  		    if (counter == 200) // reset after one data collection cycle
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <main+0x208>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	2bc8      	cmp	r3, #200	; 0xc8
 800076a:	d102      	bne.n	8000772 <main+0x196>
					counter = 0;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <main+0x208>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
				if (counter == 0) // set spec reset pin high to tell h-chip to send data
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <main+0x208>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d106      	bne.n	8000788 <main+0x1ac>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <main+0x20c>)
 8000782:	f001 fdeb 	bl	800235c <HAL_GPIO_WritePin>
				break;
 8000786:	e019      	b.n	80007bc <main+0x1e0>
				else if (counter == 10) // set spec reset back low
 8000788:	4b16      	ldr	r3, [pc, #88]	; (80007e4 <main+0x208>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d106      	bne.n	800079e <main+0x1c2>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000796:	4814      	ldr	r0, [pc, #80]	; (80007e8 <main+0x20c>)
 8000798:	f001 fde0 	bl	800235c <HAL_GPIO_WritePin>
				break;
 800079c:	e00e      	b.n	80007bc <main+0x1e0>
				else if (optReady) // wait for AD_SP from the h-chip then turn on fast timer to drive adc
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <main+0x210>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d007      	beq.n	80007b6 <main+0x1da>
					HAL_TIM_Base_Start_IT(&htim16);
 80007a6:	4812      	ldr	r0, [pc, #72]	; (80007f0 <main+0x214>)
 80007a8:	f004 fe28 	bl	80053fc <HAL_TIM_Base_Start_IT>
					HAL_TIMEx_PWMN_Start(&htim16,TIM_CHANNEL_1);
 80007ac:	2100      	movs	r1, #0
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <main+0x214>)
 80007b0:	f005 ffb8 	bl	8006724 <HAL_TIMEx_PWMN_Start>
				break;
 80007b4:	e002      	b.n	80007bc <main+0x1e0>
				else if (counter > 40 && fastCounter % 4 == 0)
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x208>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2b28      	cmp	r3, #40	; 0x28
				break;
 80007bc:	bf00      	nop
	  switch(state){
 80007be:	e7cb      	b.n	8000758 <main+0x17c>
 80007c0:	e000ed00 	.word	0xe000ed00
 80007c4:	58024400 	.word	0x58024400
 80007c8:	24000210 	.word	0x24000210
 80007cc:	240001c4 	.word	0x240001c4
 80007d0:	2400025c 	.word	0x2400025c
 80007d4:	40010000 	.word	0x40010000
 80007d8:	40000800 	.word	0x40000800
 80007dc:	40014400 	.word	0x40014400
 80007e0:	24000394 	.word	0x24000394
 80007e4:	2400038c 	.word	0x2400038c
 80007e8:	58020c00 	.word	0x58020c00
 80007ec:	24000388 	.word	0x24000388
 80007f0:	240002a8 	.word	0x240002a8

080007f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b09c      	sub	sp, #112	; 0x70
 80007f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fe:	224c      	movs	r2, #76	; 0x4c
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f007 fa9a 	bl	8007d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2220      	movs	r2, #32
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f007 fa94 	bl	8007d3c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000814:	2004      	movs	r0, #4
 8000816:	f001 fdef 	bl	80023f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <SystemClock_Config+0xec>)
 8000820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000822:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <SystemClock_Config+0xec>)
 8000824:	f023 0301 	bic.w	r3, r3, #1
 8000828:	62d3      	str	r3, [r2, #44]	; 0x2c
 800082a:	4b2d      	ldr	r3, [pc, #180]	; (80008e0 <SystemClock_Config+0xec>)
 800082c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0xf0>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0xf0>)
 800083a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800083e:	6193      	str	r3, [r2, #24]
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xf0>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800084c:	bf00      	nop
 800084e:	4b25      	ldr	r3, [pc, #148]	; (80008e4 <SystemClock_Config+0xf0>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800085a:	d1f8      	bne.n	800084e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800086e:	2305      	movs	r3, #5
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000872:	23a0      	movs	r3, #160	; 0xa0
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800087a:	2304      	movs	r3, #4
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000882:	2308      	movs	r3, #8
 8000884:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000886:	2300      	movs	r3, #0
 8000888:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe0a 	bl	80024ac <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800089e:	f000 fd61 	bl	8001364 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	233f      	movs	r3, #63	; 0x3f
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ae:	2308      	movs	r3, #8
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2102      	movs	r1, #2
 80008c8:	4618      	mov	r0, r3
 80008ca:	f002 fa49 	bl	8002d60 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008d4:	f000 fd46 	bl	8001364 <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3770      	adds	r7, #112	; 0x70
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58000400 	.word	0x58000400
 80008e4:	58024800 	.word	0x58024800

080008e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008ec:	4b27      	ldr	r3, [pc, #156]	; (800098c <MX_SPI1_Init+0xa4>)
 80008ee:	4a28      	ldr	r2, [pc, #160]	; (8000990 <MX_SPI1_Init+0xa8>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_SPI1_Init+0xa4>)
 80008f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_SPI1_Init+0xa4>)
 80008fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000900:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000902:	4b22      	ldr	r3, [pc, #136]	; (800098c <MX_SPI1_Init+0xa4>)
 8000904:	2203      	movs	r2, #3
 8000906:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b20      	ldr	r3, [pc, #128]	; (800098c <MX_SPI1_Init+0xa4>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_SPI1_Init+0xa4>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000914:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_SPI1_Init+0xa4>)
 8000916:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800091a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_SPI1_Init+0xa4>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_SPI1_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_SPI1_Init+0xa4>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_SPI1_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_SPI1_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_SPI1_Init+0xa4>)
 800093c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_SPI1_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_SPI1_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <MX_SPI1_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000954:	4b0d      	ldr	r3, [pc, #52]	; (800098c <MX_SPI1_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800095a:	4b0c      	ldr	r3, [pc, #48]	; (800098c <MX_SPI1_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000960:	4b0a      	ldr	r3, [pc, #40]	; (800098c <MX_SPI1_Init+0xa4>)
 8000962:	2200      	movs	r2, #0
 8000964:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <MX_SPI1_Init+0xa4>)
 8000968:	2200      	movs	r2, #0
 800096a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <MX_SPI1_Init+0xa4>)
 800096e:	2200      	movs	r2, #0
 8000970:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_SPI1_Init+0xa4>)
 8000974:	2200      	movs	r2, #0
 8000976:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000978:	4804      	ldr	r0, [pc, #16]	; (800098c <MX_SPI1_Init+0xa4>)
 800097a:	f004 fba9 	bl	80050d0 <HAL_SPI_Init>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000984:	f000 fcee 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	bd80      	pop	{r7, pc}
 800098c:	2400002c 	.word	0x2400002c
 8000990:	40013000 	.word	0x40013000

08000994 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000998:	4b28      	ldr	r3, [pc, #160]	; (8000a3c <MX_SPI2_Init+0xa8>)
 800099a:	4a29      	ldr	r2, [pc, #164]	; (8000a40 <MX_SPI2_Init+0xac>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b27      	ldr	r3, [pc, #156]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009a6:	4b25      	ldr	r3, [pc, #148]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009b0:	220f      	movs	r2, #15
 80009b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b21      	ldr	r3, [pc, #132]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b20      	ldr	r3, [pc, #128]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009c2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80009c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80009ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI2_Init+0xa8>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SPI2_Init+0xa8>)
 8000a28:	f004 fb52 	bl	80050d0 <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000a32:	f000 fc97 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	240000b4 	.word	0x240000b4
 8000a40:	40003800 	.word	0x40003800

08000a44 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <MX_SPI3_Init+0xa4>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b25      	ldr	r3, [pc, #148]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a50:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a54:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b23      	ldr	r3, [pc, #140]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a5c:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a5e:	2203      	movs	r2, #3
 8000a60:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a62:	4b20      	ldr	r3, [pc, #128]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a68:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a8c:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_SPI3_Init+0xa0>)
 8000ad2:	f004 fafd 	bl	80050d0 <HAL_SPI_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_SPI3_Init+0x9c>
  {
    Error_Handler();
 8000adc:	f000 fc42 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	2400013c 	.word	0x2400013c
 8000ae8:	40003c00 	.word	0x40003c00

08000aec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09a      	sub	sp, #104	; 0x68
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000af2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	222c      	movs	r2, #44	; 0x2c
 8000b24:	2100      	movs	r1, #0
 8000b26:	4618      	mov	r0, r3
 8000b28:	f007 f908 	bl	8007d3c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b2e:	4a44      	ldr	r2, [pc, #272]	; (8000c40 <MX_TIM1_Init+0x154>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000b32:	4b42      	ldr	r3, [pc, #264]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b34:	22c8      	movs	r2, #200	; 0xc8
 8000b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b40      	ldr	r3, [pc, #256]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b40:	2232      	movs	r2, #50	; 0x32
 8000b42:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b3d      	ldr	r3, [pc, #244]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4a:	4b3c      	ldr	r3, [pc, #240]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b50:	4b3a      	ldr	r3, [pc, #232]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b52:	2280      	movs	r2, #128	; 0x80
 8000b54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b56:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b58:	f004 fbf9 	bl	800534e <HAL_TIM_Base_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b62:	f000 fbff 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6a:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b70:	4619      	mov	r1, r3
 8000b72:	4832      	ldr	r0, [pc, #200]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b74:	f005 f882 	bl	8005c7c <HAL_TIM_ConfigClockSource>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b7e:	f000 fbf1 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b82:	482e      	ldr	r0, [pc, #184]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000b84:	f004 fce1 	bl	800554a <HAL_TIM_PWM_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b8e:	f000 fbe9 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b96:	2300      	movs	r3, #0
 8000b98:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b9e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4825      	ldr	r0, [pc, #148]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000ba6:	f005 fe7f 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000bb0:	f000 fbd8 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb4:	2360      	movs	r3, #96	; 0x60
 8000bb6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4818      	ldr	r0, [pc, #96]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000bda:	f004 ff3b 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000be4:	f000 fbbe 	bl	8001364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bfc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000c1e:	f005 fed1 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000c28:	f000 fb9c 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM1_Init+0x150>)
 8000c2e:	f000 fe2b 	bl	8001888 <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3768      	adds	r7, #104	; 0x68
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	240001c4 	.word	0x240001c4
 8000c40:	40010000 	.word	0x40010000

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4a:	f107 0310 	add.w	r3, r7, #16
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c62:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c64:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c68:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000c6a:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c6c:	22c7      	movs	r2, #199	; 0xc7
 8000c6e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c78:	2209      	movs	r2, #9
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	4813      	ldr	r0, [pc, #76]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000c8a:	f004 fb60 	bl	800534e <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c94:	f000 fb66 	bl	8001364 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0310 	add.w	r3, r7, #16
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000ca6:	f004 ffe9 	bl	8005c7c <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cb0:	f000 fb58 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM2_Init+0x94>)
 8000cc2:	f005 fdf1 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ccc:	f000 fb4a 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	24000210 	.word	0x24000210

08000cdc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d00:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d02:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MX_TIM4_Init+0xb0>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000d06:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d08:	22c7      	movs	r2, #199	; 0xc7
 8000d0a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000d12:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d14:	2209      	movs	r2, #9
 8000d16:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d20:	2280      	movs	r2, #128	; 0x80
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d26:	f004 fc10 	bl	800554a <HAL_TIM_PWM_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 fb18 	bl	8001364 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 031c 	add.w	r3, r7, #28
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d44:	f005 fdb0 	bl	80068a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000d4e:	f000 fb09 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	; 0x60
 8000d54:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d6a:	f004 fe73 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d74:	f000 faf6 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM4_Init+0xac>)
 8000d7a:	f000 fd85 	bl	8001888 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2400025c 	.word	0x2400025c
 8000d8c:	40000800 	.word	0x40000800

08000d90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b092      	sub	sp, #72	; 0x48
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
 8000da6:	615a      	str	r2, [r3, #20]
 8000da8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000daa:	463b      	mov	r3, r7
 8000dac:	222c      	movs	r2, #44	; 0x2c
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 ffc3 	bl	8007d3c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000db6:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000db8:	4a30      	ldr	r2, [pc, #192]	; (8000e7c <MX_TIM16_Init+0xec>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4-1;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 8000dc8:	4b2b      	ldr	r3, [pc, #172]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000dca:	2209      	movs	r2, #9
 8000dcc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000dd4:	4b28      	ldr	r3, [pc, #160]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dda:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000de0:	4825      	ldr	r0, [pc, #148]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000de2:	f004 fab4 	bl	800534e <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8000dec:	f000 faba 	bl	8001364 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000df0:	4821      	ldr	r0, [pc, #132]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000df2:	f004 fbaa 	bl	800554a <HAL_TIM_PWM_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8000dfc:	f000 fab2 	bl	8001364 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	; 0x60
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e20:	2200      	movs	r2, #0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4814      	ldr	r0, [pc, #80]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000e26:	f004 fe15 	bl	8005a54 <HAL_TIM_PWM_ConfigChannel>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8000e30:	f000 fa98 	bl	8001364 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e40:	2300      	movs	r3, #0
 8000e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000e56:	463b      	mov	r3, r7
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000e5c:	f005 fdb2 	bl	80069c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 8000e66:	f000 fa7d 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000e6a:	4803      	ldr	r0, [pc, #12]	; (8000e78 <MX_TIM16_Init+0xe8>)
 8000e6c:	f000 fd0c 	bl	8001888 <HAL_TIM_MspPostInit>

}
 8000e70:	bf00      	nop
 8000e72:	3748      	adds	r7, #72	; 0x48
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	240002a8 	.word	0x240002a8
 8000e7c:	40014400 	.word	0x40014400

08000e80 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e86:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <MX_USART3_UART_Init+0x94>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e90:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b17      	ldr	r3, [pc, #92]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eca:	f005 fe3c 	bl	8006b46 <HAL_UART_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ed4:	f000 fa46 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000edc:	f006 fe3f 	bl	8007b5e <HAL_UARTEx_SetTxFifoThreshold>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000ee6:	f000 fa3d 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4808      	ldr	r0, [pc, #32]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000eee:	f006 fe74 	bl	8007bda <HAL_UARTEx_SetRxFifoThreshold>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ef8:	f000 fa34 	bl	8001364 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_USART3_UART_Init+0x90>)
 8000efe:	f006 fdf5 	bl	8007aec <HAL_UARTEx_DisableFifoMode>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f000 fa2c 	bl	8001364 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	240002f4 	.word	0x240002f4
 8000f14:	40004800 	.word	0x40004800

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b090      	sub	sp, #64	; 0x40
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
 8000f2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f2e:	4bc0      	ldr	r3, [pc, #768]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4abe      	ldr	r2, [pc, #760]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f3e:	4bbc      	ldr	r3, [pc, #752]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4bb8      	ldr	r3, [pc, #736]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f52:	4ab7      	ldr	r2, [pc, #732]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5c:	4bb4      	ldr	r3, [pc, #720]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
 8000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4bb1      	ldr	r3, [pc, #708]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f70:	4aaf      	ldr	r2, [pc, #700]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7a:	4bad      	ldr	r3, [pc, #692]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f80:	f003 0302 	and.w	r3, r3, #2
 8000f84:	623b      	str	r3, [r7, #32]
 8000f86:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f88:	4ba9      	ldr	r3, [pc, #676]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8e:	4aa8      	ldr	r2, [pc, #672]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f98:	4ba5      	ldr	r3, [pc, #660]	; (8001230 <MX_GPIO_Init+0x318>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fa6:	4ba2      	ldr	r3, [pc, #648]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fac:	4aa0      	ldr	r2, [pc, #640]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb6:	4b9e      	ldr	r3, [pc, #632]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fc0:	61bb      	str	r3, [r7, #24]
 8000fc2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc4:	4b9a      	ldr	r3, [pc, #616]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fca:	4a99      	ldr	r2, [pc, #612]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd4:	4b96      	ldr	r3, [pc, #600]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fe2:	4b93      	ldr	r3, [pc, #588]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe8:	4a91      	ldr	r2, [pc, #580]	; (8001230 <MX_GPIO_Init+0x318>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff2:	4b8f      	ldr	r3, [pc, #572]	; (8001230 <MX_GPIO_Init+0x318>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001000:	4b8b      	ldr	r3, [pc, #556]	; (8001230 <MX_GPIO_Init+0x318>)
 8001002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001006:	4a8a      	ldr	r2, [pc, #552]	; (8001230 <MX_GPIO_Init+0x318>)
 8001008:	f043 0310 	orr.w	r3, r3, #16
 800100c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001010:	4b87      	ldr	r3, [pc, #540]	; (8001230 <MX_GPIO_Init+0x318>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800101e:	4b84      	ldr	r3, [pc, #528]	; (8001230 <MX_GPIO_Init+0x318>)
 8001020:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001024:	4a82      	ldr	r2, [pc, #520]	; (8001230 <MX_GPIO_Init+0x318>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800102e:	4b80      	ldr	r3, [pc, #512]	; (8001230 <MX_GPIO_Init+0x318>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103c:	4b7c      	ldr	r3, [pc, #496]	; (8001230 <MX_GPIO_Init+0x318>)
 800103e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001042:	4a7b      	ldr	r2, [pc, #492]	; (8001230 <MX_GPIO_Init+0x318>)
 8001044:	f043 0320 	orr.w	r3, r3, #32
 8001048:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800104c:	4b78      	ldr	r3, [pc, #480]	; (8001230 <MX_GPIO_Init+0x318>)
 800104e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800105a:	4b75      	ldr	r3, [pc, #468]	; (8001230 <MX_GPIO_Init+0x318>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001060:	4a73      	ldr	r2, [pc, #460]	; (8001230 <MX_GPIO_Init+0x318>)
 8001062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800106a:	4b71      	ldr	r3, [pc, #452]	; (8001230 <MX_GPIO_Init+0x318>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8001078:	2200      	movs	r2, #0
 800107a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800107e:	486d      	ldr	r0, [pc, #436]	; (8001234 <MX_GPIO_Init+0x31c>)
 8001080:	f001 f96c 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VNA_TRIG_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5184 	mov.w	r1, #4224	; 0x1080
 800108a:	486b      	ldr	r0, [pc, #428]	; (8001238 <MX_GPIO_Init+0x320>)
 800108c:	f001 f966 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001096:	4869      	ldr	r0, [pc, #420]	; (800123c <MX_GPIO_Init+0x324>)
 8001098:	f001 f960 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	2140      	movs	r1, #64	; 0x40
 80010a0:	4867      	ldr	r0, [pc, #412]	; (8001240 <MX_GPIO_Init+0x328>)
 80010a2:	f001 f95b 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_RST_GPIO_Port, SPEC_RST_Pin, GPIO_PIN_RESET);
 80010a6:	2200      	movs	r2, #0
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ac:	4865      	ldr	r0, [pc, #404]	; (8001244 <MX_GPIO_Init+0x32c>)
 80010ae:	f001 f955 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2104      	movs	r1, #4
 80010b6:	4864      	ldr	r0, [pc, #400]	; (8001248 <MX_GPIO_Init+0x330>)
 80010b8:	f001 f950 	bl	800235c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80010ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d2:	4619      	mov	r1, r3
 80010d4:	4857      	ldr	r0, [pc, #348]	; (8001234 <MX_GPIO_Init+0x31c>)
 80010d6:	f000 ff91 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : VNA_TRIG_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = VNA_TRIG_Pin|LCD_RST_Pin;
 80010da:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 80010de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010f0:	4619      	mov	r1, r3
 80010f2:	4851      	ldr	r0, [pc, #324]	; (8001238 <MX_GPIO_Init+0x320>)
 80010f4:	f000 ff82 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001108:	4619      	mov	r1, r3
 800110a:	484e      	ldr	r0, [pc, #312]	; (8001244 <MX_GPIO_Init+0x32c>)
 800110c:	f000 ff76 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8001110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	4846      	ldr	r0, [pc, #280]	; (8001240 <MX_GPIO_Init+0x328>)
 8001126:	f000 ff69 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4843      	ldr	r0, [pc, #268]	; (800124c <MX_GPIO_Init+0x334>)
 8001140:	f000 ff5c 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001144:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001154:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001158:	4619      	mov	r1, r3
 800115a:	4838      	ldr	r0, [pc, #224]	; (800123c <MX_GPIO_Init+0x324>)
 800115c:	f000 ff4e 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001160:	2340      	movs	r3, #64	; 0x40
 8001162:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001164:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800116e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001172:	4619      	mov	r1, r3
 8001174:	4836      	ldr	r0, [pc, #216]	; (8001250 <MX_GPIO_Init+0x338>)
 8001176:	f000 ff41 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800118c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001190:	4619      	mov	r1, r3
 8001192:	482a      	ldr	r0, [pc, #168]	; (800123c <MX_GPIO_Init+0x324>)
 8001194:	f000 ff32 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001198:	2308      	movs	r3, #8
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011a8:	4619      	mov	r1, r3
 80011aa:	482a      	ldr	r0, [pc, #168]	; (8001254 <MX_GPIO_Init+0x33c>)
 80011ac:	f000 ff26 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80011b0:	2301      	movs	r3, #1
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c0:	4619      	mov	r1, r3
 80011c2:	4825      	ldr	r0, [pc, #148]	; (8001258 <MX_GPIO_Init+0x340>)
 80011c4:	f000 ff1a 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : VSENSE2_Pin */
  GPIO_InitStruct.Pin = VSENSE2_Pin;
 80011c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ce:	2303      	movs	r3, #3
 80011d0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VSENSE2_GPIO_Port, &GPIO_InitStruct);
 80011d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011da:	4619      	mov	r1, r3
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <MX_GPIO_Init+0x344>)
 80011de:	f000 ff0d 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE1_Pin PC3 */
  GPIO_InitStruct.Pin = VSENSE1_Pin|GPIO_PIN_3;
 80011e2:	2309      	movs	r3, #9
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4815      	ldr	r0, [pc, #84]	; (800124c <MX_GPIO_Init+0x334>)
 80011f6:	f000 ff01 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800120a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800120e:	4619      	mov	r1, r3
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <MX_GPIO_Init+0x328>)
 8001212:	f000 fef3 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_RST_Pin */
  GPIO_InitStruct.Pin = SPEC_RST_Pin;
 8001216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800121a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121c:	2301      	movs	r3, #1
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPEC_RST_GPIO_Port, &GPIO_InitStruct);
 8001228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800122c:	4619      	mov	r1, r3
 800122e:	e017      	b.n	8001260 <MX_GPIO_Init+0x348>
 8001230:	58024400 	.word	0x58024400
 8001234:	58021c00 	.word	0x58021c00
 8001238:	58020400 	.word	0x58020400
 800123c:	58022000 	.word	0x58022000
 8001240:	58020000 	.word	0x58020000
 8001244:	58020c00 	.word	0x58020c00
 8001248:	58022400 	.word	0x58022400
 800124c:	58020800 	.word	0x58020800
 8001250:	58021000 	.word	0x58021000
 8001254:	58021800 	.word	0x58021800
 8001258:	58022800 	.word	0x58022800
 800125c:	58021400 	.word	0x58021400
 8001260:	4814      	ldr	r0, [pc, #80]	; (80012b4 <MX_GPIO_Init+0x39c>)
 8001262:	f000 fecb 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE3_Pin VSENSE4_Pin */
  GPIO_InitStruct.Pin = VSENSE3_Pin|VSENSE4_Pin;
 8001266:	2303      	movs	r3, #3
 8001268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800126a:	2303      	movs	r3, #3
 800126c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001276:	4619      	mov	r1, r3
 8001278:	480f      	ldr	r0, [pc, #60]	; (80012b8 <MX_GPIO_Init+0x3a0>)
 800127a:	f000 febf 	bl	8001ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800127e:	2304      	movs	r3, #4
 8001280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001282:	2301      	movs	r3, #1
 8001284:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001292:	4619      	mov	r1, r3
 8001294:	4809      	ldr	r0, [pc, #36]	; (80012bc <MX_GPIO_Init+0x3a4>)
 8001296:	f000 feb1 	bl	8001ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129a:	2200      	movs	r2, #0
 800129c:	2100      	movs	r1, #0
 800129e:	2017      	movs	r0, #23
 80012a0:	f000 fe77 	bl	8001f92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a4:	2017      	movs	r0, #23
 80012a6:	f000 fe8e 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

}
 80012aa:	bf00      	nop
 80012ac:	3740      	adds	r7, #64	; 0x40
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	58020000 	.word	0x58020000
 80012bc:	58022400 	.word	0x58022400

080012c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_6)
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	2b40      	cmp	r3, #64	; 0x40
 80012ce:	d103      	bne.n	80012d8 <HAL_GPIO_EXTI_Callback+0x18>
	{

		optReady = true;
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_GPIO_EXTI_Callback+0x34>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	701a      	strb	r2, [r3, #0]
	}
	else if (GPIO_Pin == GPIO_PIN_8)
	{
		HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
	}
}
 80012d6:	e008      	b.n	80012ea <HAL_GPIO_EXTI_Callback+0x2a>
	else if (GPIO_Pin == GPIO_PIN_8)
 80012d8:	88fb      	ldrh	r3, [r7, #6]
 80012da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012de:	d104      	bne.n	80012ea <HAL_GPIO_EXTI_Callback+0x2a>
		HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 80012e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <HAL_GPIO_EXTI_Callback+0x38>)
 80012e6:	f001 f852 	bl	800238e <HAL_GPIO_TogglePin>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	24000388 	.word	0x24000388
 80012f8:	58022000 	.word	0x58022000

080012fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d105      	bne.n	8001318 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		counter++;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a10      	ldr	r2, [pc, #64]	; (8001354 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e00d      	b.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x38>
	}
	else if (htim == &htim16)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d109      	bne.n	8001334 <HAL_TIM_PeriodElapsedCallback+0x38>
	{
		HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 8001320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001326:	f001 f832 	bl	800238e <HAL_GPIO_TogglePin>
		fastCounter++;
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	3301      	adds	r3, #1
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001332:	6013      	str	r3, [r2, #0]
	}
	if (fastCounter == 2)
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b02      	cmp	r3, #2
 800133a:	d105      	bne.n	8001348 <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		//HAL_TIMEx_PWMN_Stop(&htim16,TIM_CHANNEL_1);
		HAL_TIM_Base_Stop_IT(&htim16);
 800133c:	4806      	ldr	r0, [pc, #24]	; (8001358 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800133e:	f004 f8d5 	bl	80054ec <HAL_TIM_Base_Stop_IT>
		fastCounter = 0;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
	}
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	24000210 	.word	0x24000210
 8001354:	2400038c 	.word	0x2400038c
 8001358:	240002a8 	.word	0x240002a8
 800135c:	58022000 	.word	0x58022000
 8001360:	24000390 	.word	0x24000390

08001364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001368:	b672      	cpsid	i
}
 800136a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800136c:	e7fe      	b.n	800136c <Error_Handler+0x8>
	...

08001370 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_MspInit+0x30>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800137c:	4a08      	ldr	r2, [pc, #32]	; (80013a0 <HAL_MspInit+0x30>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_MspInit+0x30>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	58024400 	.word	0x58024400

080013a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0c4      	sub	sp, #272	; 0x110
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013b2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013c8:	22c0      	movs	r2, #192	; 0xc0
 80013ca:	2100      	movs	r1, #0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f006 fcb5 	bl	8007d3c <memset>
  if(hspi->Instance==SPI1)
 80013d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a85      	ldr	r2, [pc, #532]	; (80015f4 <HAL_SPI_MspInit+0x250>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d16b      	bne.n	80014bc <HAL_SPI_MspInit+0x118>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80013e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 f83c 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_SPI_MspInit+0x66>
    {
      Error_Handler();
 8001406:	f7ff ffad 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800140a:	4b7b      	ldr	r3, [pc, #492]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800140c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001410:	4a79      	ldr	r2, [pc, #484]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001412:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800141a:	4b77      	ldr	r3, [pc, #476]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800141c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001424:	637b      	str	r3, [r7, #52]	; 0x34
 8001426:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001428:	4b73      	ldr	r3, [pc, #460]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800142a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800142e:	4a72      	ldr	r2, [pc, #456]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001434:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001438:	4b6f      	ldr	r3, [pc, #444]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800143a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800143e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001442:	633b      	str	r3, [r7, #48]	; 0x30
 8001444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	4b6c      	ldr	r3, [pc, #432]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800144c:	4a6a      	ldr	r2, [pc, #424]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**SPI1 GPIO Configuration
    PG9     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001468:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146c:	2302      	movs	r3, #2
 800146e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800147e:	2305      	movs	r3, #5
 8001480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001484:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001488:	4619      	mov	r1, r3
 800148a:	485c      	ldr	r0, [pc, #368]	; (80015fc <HAL_SPI_MspInit+0x258>)
 800148c:	f000 fdb6 	bl	8001ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001490:	2320      	movs	r3, #32
 8001492:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001496:	2302      	movs	r3, #2
 8001498:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a8:	2305      	movs	r3, #5
 80014aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80014b2:	4619      	mov	r1, r3
 80014b4:	4852      	ldr	r0, [pc, #328]	; (8001600 <HAL_SPI_MspInit+0x25c>)
 80014b6:	f000 fda1 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014ba:	e152      	b.n	8001762 <HAL_SPI_MspInit+0x3be>
  else if(hspi->Instance==SPI2)
 80014bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80014c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a4e      	ldr	r2, [pc, #312]	; (8001604 <HAL_SPI_MspInit+0x260>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f040 80a0 	bne.w	8001610 <HAL_SPI_MspInit+0x26c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 ffc6 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_SPI_MspInit+0x152>
      Error_Handler();
 80014f2:	f7ff ff37 	bl	8001364 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014f6:	4b40      	ldr	r3, [pc, #256]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fc:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 80014fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001502:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
 8001512:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001514:	4b38      	ldr	r3, [pc, #224]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800151c:	f043 0308 	orr.w	r3, r3, #8
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	627b      	str	r3, [r7, #36]	; 0x24
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	4b31      	ldr	r3, [pc, #196]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001538:	4a2f      	ldr	r2, [pc, #188]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	623b      	str	r3, [r7, #32]
 800154e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001550:	4b29      	ldr	r3, [pc, #164]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001556:	4a28      	ldr	r2, [pc, #160]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001558:	f043 0302 	orr.w	r3, r3, #2
 800155c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_SPI_MspInit+0x254>)
 8001562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800156e:	2308      	movs	r3, #8
 8001570:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001586:	2305      	movs	r3, #5
 8001588:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001590:	4619      	mov	r1, r3
 8001592:	481d      	ldr	r0, [pc, #116]	; (8001608 <HAL_SPI_MspInit+0x264>)
 8001594:	f000 fd32 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001598:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800159c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b2:	2305      	movs	r3, #5
 80015b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015bc:	4619      	mov	r1, r3
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <HAL_SPI_MspInit+0x25c>)
 80015c0:	f000 fd1c 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015c8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015de:	2305      	movs	r3, #5
 80015e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80015e8:	4619      	mov	r1, r3
 80015ea:	4808      	ldr	r0, [pc, #32]	; (800160c <HAL_SPI_MspInit+0x268>)
 80015ec:	f000 fd06 	bl	8001ffc <HAL_GPIO_Init>
}
 80015f0:	e0b7      	b.n	8001762 <HAL_SPI_MspInit+0x3be>
 80015f2:	bf00      	nop
 80015f4:	40013000 	.word	0x40013000
 80015f8:	58024400 	.word	0x58024400
 80015fc:	58021800 	.word	0x58021800
 8001600:	58020000 	.word	0x58020000
 8001604:	40003800 	.word	0x40003800
 8001608:	58020c00 	.word	0x58020c00
 800160c:	58020400 	.word	0x58020400
  else if(hspi->Instance==SPI3)
 8001610:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001614:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a53      	ldr	r2, [pc, #332]	; (800176c <HAL_SPI_MspInit+0x3c8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	f040 809f 	bne.w	8001762 <HAL_SPI_MspInit+0x3be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001624:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001636:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800163a:	4618      	mov	r0, r3
 800163c:	f001 ff1c 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_SPI_MspInit+0x2a6>
      Error_Handler();
 8001646:	f7ff fe8d 	bl	8001364 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800164a:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 800164c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001650:	4a47      	ldr	r2, [pc, #284]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800165a:	4b45      	ldr	r3, [pc, #276]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 800165c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	61bb      	str	r3, [r7, #24]
 8001666:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	4a40      	ldr	r2, [pc, #256]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001678:	4b3d      	ldr	r3, [pc, #244]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 800167a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	4b3a      	ldr	r3, [pc, #232]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	4a38      	ldr	r2, [pc, #224]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 800168e:	f043 0302 	orr.w	r3, r3, #2
 8001692:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169c:	f003 0202 	and.w	r2, r3, #2
 80016a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ae:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016b2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 80016b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ba:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_SPI_MspInit+0x3cc>)
 80016c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016ca:	f003 0208 	and.w	r2, r3, #8
 80016ce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80016e0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	2302      	movs	r3, #2
 80016ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80016fc:	2306      	movs	r3, #6
 80016fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001702:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001706:	4619      	mov	r1, r3
 8001708:	481a      	ldr	r0, [pc, #104]	; (8001774 <HAL_SPI_MspInit+0x3d0>)
 800170a:	f000 fc77 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800170e:	2318      	movs	r3, #24
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001726:	2306      	movs	r3, #6
 8001728:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001730:	4619      	mov	r1, r3
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <HAL_SPI_MspInit+0x3d4>)
 8001734:	f000 fc62 	bl	8001ffc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001738:	2340      	movs	r3, #64	; 0x40
 800173a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 8001750:	2305      	movs	r3, #5
 8001752:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001756:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800175a:	4619      	mov	r1, r3
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <HAL_SPI_MspInit+0x3d8>)
 800175e:	f000 fc4d 	bl	8001ffc <HAL_GPIO_Init>
}
 8001762:	bf00      	nop
 8001764:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40003c00 	.word	0x40003c00
 8001770:	58024400 	.word	0x58024400
 8001774:	58020000 	.word	0x58020000
 8001778:	58020400 	.word	0x58020400
 800177c:	58020c00 	.word	0x58020c00

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a27      	ldr	r2, [pc, #156]	; (800182c <HAL_TIM_Base_MspInit+0xac>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10f      	bne.n	80017b2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 8001794:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001798:	4a25      	ldr	r2, [pc, #148]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017b0:	e038      	b.n	8001824 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ba:	d117      	bne.n	80017ec <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017bc:	4b1c      	ldr	r3, [pc, #112]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017c2:	4a1b      	ldr	r2, [pc, #108]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017cc:	4b18      	ldr	r3, [pc, #96]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	201c      	movs	r0, #28
 80017e0:	f000 fbd7 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e4:	201c      	movs	r0, #28
 80017e6:	f000 fbee 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 80017ea:	e01b      	b.n	8001824 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a10      	ldr	r2, [pc, #64]	; (8001834 <HAL_TIM_Base_MspInit+0xb4>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d116      	bne.n	8001824 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017fc:	4a0c      	ldr	r2, [pc, #48]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 80017fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001802:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_TIM_Base_MspInit+0xb0>)
 8001808:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800180c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2100      	movs	r1, #0
 8001818:	2075      	movs	r0, #117	; 0x75
 800181a:	f000 fbba 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800181e:	2075      	movs	r0, #117	; 0x75
 8001820:	f000 fbd1 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 8001824:	bf00      	nop
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40010000 	.word	0x40010000
 8001830:	58024400 	.word	0x58024400
 8001834:	40014400 	.word	0x40014400

08001838 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0e      	ldr	r2, [pc, #56]	; (8001880 <HAL_TIM_PWM_MspInit+0x48>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d116      	bne.n	8001878 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_TIM_PWM_MspInit+0x4c>)
 800184c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001850:	4a0c      	ldr	r2, [pc, #48]	; (8001884 <HAL_TIM_PWM_MspInit+0x4c>)
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_PWM_MspInit+0x4c>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001868:	2200      	movs	r2, #0
 800186a:	2100      	movs	r1, #0
 800186c:	201e      	movs	r0, #30
 800186e:	f000 fb90 	bl	8001f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001872:	201e      	movs	r0, #30
 8001874:	f000 fba7 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40000800 	.word	0x40000800
 8001884:	58024400 	.word	0x58024400

08001888 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a38      	ldr	r2, [pc, #224]	; (8001988 <HAL_TIM_MspPostInit+0x100>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d120      	bne.n	80018ec <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a36      	ldr	r2, [pc, #216]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b34      	ldr	r3, [pc, #208]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	613b      	str	r3, [r7, #16]
 80018c6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018da:	2301      	movs	r3, #1
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	482a      	ldr	r0, [pc, #168]	; (8001990 <HAL_TIM_MspPostInit+0x108>)
 80018e6:	f000 fb89 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80018ea:	e049      	b.n	8001980 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a28      	ldr	r2, [pc, #160]	; (8001994 <HAL_TIM_MspPostInit+0x10c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d120      	bne.n	8001938 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 80018f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018fc:	4a23      	ldr	r2, [pc, #140]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 8001908:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191a:	2302      	movs	r3, #2
 800191c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001926:	2302      	movs	r3, #2
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192a:	f107 0314 	add.w	r3, r7, #20
 800192e:	4619      	mov	r1, r3
 8001930:	4819      	ldr	r0, [pc, #100]	; (8001998 <HAL_TIM_MspPostInit+0x110>)
 8001932:	f000 fb63 	bl	8001ffc <HAL_GPIO_Init>
}
 8001936:	e023      	b.n	8001980 <HAL_TIM_MspPostInit+0xf8>
  else if(htim->Instance==TIM16)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a17      	ldr	r2, [pc, #92]	; (800199c <HAL_TIM_MspPostInit+0x114>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d11e      	bne.n	8001980 <HAL_TIM_MspPostInit+0xf8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 800194a:	f043 0302 	orr.w	r3, r3, #2
 800194e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_TIM_MspPostInit+0x104>)
 8001954:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001960:	2340      	movs	r3, #64	; 0x40
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001970:	2301      	movs	r3, #1
 8001972:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_TIM_MspPostInit+0x118>)
 800197c:	f000 fb3e 	bl	8001ffc <HAL_GPIO_Init>
}
 8001980:	bf00      	nop
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40010000 	.word	0x40010000
 800198c:	58024400 	.word	0x58024400
 8001990:	58020000 	.word	0x58020000
 8001994:	40000800 	.word	0x40000800
 8001998:	58020c00 	.word	0x58020c00
 800199c:	40014400 	.word	0x40014400
 80019a0:	58020400 	.word	0x58020400

080019a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0ba      	sub	sp, #232	; 0xe8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	22c0      	movs	r2, #192	; 0xc0
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f006 f9b9 	bl	8007d3c <memset>
  if(huart->Instance==USART3)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a27      	ldr	r2, [pc, #156]	; (8001a6c <HAL_UART_MspInit+0xc8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d146      	bne.n	8001a62 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019d4:	f04f 0202 	mov.w	r2, #2
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 0310 	add.w	r3, r7, #16
 80019ea:	4618      	mov	r0, r3
 80019ec:	f001 fd44 	bl	8003478 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80019f6:	f7ff fcb5 	bl	8001364 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019fa:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 80019fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 8001a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a0a:	4b19      	ldr	r3, [pc, #100]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 8001a0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	4a14      	ldr	r2, [pc, #80]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a28:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_UART_MspInit+0xcc>)
 8001a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a36:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4805      	ldr	r0, [pc, #20]	; (8001a74 <HAL_UART_MspInit+0xd0>)
 8001a5e:	f000 facd 	bl	8001ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	37e8      	adds	r7, #232	; 0xe8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40004800 	.word	0x40004800
 8001a70:	58024400 	.word	0x58024400
 8001a74:	58020400 	.word	0x58020400

08001a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <NMI_Handler+0x4>

08001a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a8e:	e7fe      	b.n	8001a8e <BusFault_Handler+0x4>

08001a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <UsageFault_Handler+0x4>

08001a96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ac4:	f000 f95e 	bl	8001d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ad0:	2040      	movs	r0, #64	; 0x40
 8001ad2:	f000 fc76 	bl	80023c2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001ad6:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ada:	f000 fc72 	bl	80023c2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f003 fe93 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	24000210 	.word	0x24000210

08001af8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM4_IRQHandler+0x10>)
 8001afe:	f003 fe89 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2400025c 	.word	0x2400025c

08001b0c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM16_IRQHandler+0x10>)
 8001b12:	f003 fe7f 	bl	8005814 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	240002a8 	.word	0x240002a8

08001b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b24:	f000 f826 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b2a:	490d      	ldr	r1, [pc, #52]	; (8001b60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b30:	e002      	b.n	8001b38 <LoopCopyDataInit>

08001b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b36:	3304      	adds	r3, #4

08001b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b3c:	d3f9      	bcc.n	8001b32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b40:	4c0a      	ldr	r4, [pc, #40]	; (8001b6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b44:	e001      	b.n	8001b4a <LoopFillZerobss>

08001b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b48:	3204      	adds	r2, #4

08001b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b4c:	d3fb      	bcc.n	8001b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4e:	f006 f8d1 	bl	8007cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b52:	f7fe fd43 	bl	80005dc <main>
  bx  lr
 8001b56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001b64:	08007dac 	.word	0x08007dac
  ldr r2, =_sbss
 8001b68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001b6c:	2400039c 	.word	0x2400039c

08001b70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b70:	e7fe      	b.n	8001b70 <ADC3_IRQHandler>
	...

08001b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b78:	4b3d      	ldr	r3, [pc, #244]	; (8001c70 <SystemInit+0xfc>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a3c      	ldr	r2, [pc, #240]	; (8001c70 <SystemInit+0xfc>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001b88:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <SystemInit+0xfc>)
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	4a38      	ldr	r2, [pc, #224]	; (8001c70 <SystemInit+0xfc>)
 8001b8e:	f043 0310 	orr.w	r3, r3, #16
 8001b92:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b94:	4b37      	ldr	r3, [pc, #220]	; (8001c74 <SystemInit+0x100>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	2b06      	cmp	r3, #6
 8001b9e:	d807      	bhi.n	8001bb0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ba0:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <SystemInit+0x100>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <SystemInit+0x100>)
 8001baa:	f043 0307 	orr.w	r3, r3, #7
 8001bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001bb0:	4b31      	ldr	r3, [pc, #196]	; (8001c78 <SystemInit+0x104>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <SystemInit+0x104>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <SystemInit+0x104>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bc2:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <SystemInit+0x104>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	492c      	ldr	r1, [pc, #176]	; (8001c78 <SystemInit+0x104>)
 8001bc8:	4b2c      	ldr	r3, [pc, #176]	; (8001c7c <SystemInit+0x108>)
 8001bca:	4013      	ands	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bce:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <SystemInit+0x100>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bda:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <SystemInit+0x100>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 030f 	bic.w	r3, r3, #15
 8001be2:	4a24      	ldr	r2, [pc, #144]	; (8001c74 <SystemInit+0x100>)
 8001be4:	f043 0307 	orr.w	r3, r3, #7
 8001be8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <SystemInit+0x104>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001bf0:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <SystemInit+0x104>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <SystemInit+0x104>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bfc:	4b1e      	ldr	r3, [pc, #120]	; (8001c78 <SystemInit+0x104>)
 8001bfe:	4a20      	ldr	r2, [pc, #128]	; (8001c80 <SystemInit+0x10c>)
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c02:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <SystemInit+0x104>)
 8001c04:	4a1f      	ldr	r2, [pc, #124]	; (8001c84 <SystemInit+0x110>)
 8001c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c08:	4b1b      	ldr	r3, [pc, #108]	; (8001c78 <SystemInit+0x104>)
 8001c0a:	4a1f      	ldr	r2, [pc, #124]	; (8001c88 <SystemInit+0x114>)
 8001c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <SystemInit+0x104>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c14:	4b18      	ldr	r3, [pc, #96]	; (8001c78 <SystemInit+0x104>)
 8001c16:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <SystemInit+0x114>)
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c1a:	4b17      	ldr	r3, [pc, #92]	; (8001c78 <SystemInit+0x104>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c20:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <SystemInit+0x104>)
 8001c22:	4a19      	ldr	r2, [pc, #100]	; (8001c88 <SystemInit+0x114>)
 8001c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c26:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <SystemInit+0x104>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c2c:	4b12      	ldr	r3, [pc, #72]	; (8001c78 <SystemInit+0x104>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a11      	ldr	r2, [pc, #68]	; (8001c78 <SystemInit+0x104>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c38:	4b0f      	ldr	r3, [pc, #60]	; (8001c78 <SystemInit+0x104>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <SystemInit+0x118>)
 8001c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <SystemInit+0x118>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c48:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <SystemInit+0x11c>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <SystemInit+0x120>)
 8001c50:	4013      	ands	r3, r2
 8001c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c56:	d202      	bcs.n	8001c5e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <SystemInit+0x124>)
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <SystemInit+0x128>)
 8001c60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c64:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00
 8001c74:	52002000 	.word	0x52002000
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c80:	02020200 	.word	0x02020200
 8001c84:	01ff0000 	.word	0x01ff0000
 8001c88:	01010280 	.word	0x01010280
 8001c8c:	580000c0 	.word	0x580000c0
 8001c90:	5c001000 	.word	0x5c001000
 8001c94:	ffff0000 	.word	0xffff0000
 8001c98:	51008108 	.word	0x51008108
 8001c9c:	52004000 	.word	0x52004000

08001ca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f000 f968 	bl	8001f7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001cac:	f001 fa0e 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b15      	ldr	r3, [pc, #84]	; (8001d08 <HAL_Init+0x68>)
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	0a1b      	lsrs	r3, r3, #8
 8001cb8:	f003 030f 	and.w	r3, r3, #15
 8001cbc:	4913      	ldr	r1, [pc, #76]	; (8001d0c <HAL_Init+0x6c>)
 8001cbe:	5ccb      	ldrb	r3, [r1, r3]
 8001cc0:	f003 031f 	and.w	r3, r3, #31
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_Init+0x68>)
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	4a0e      	ldr	r2, [pc, #56]	; (8001d0c <HAL_Init+0x6c>)
 8001cd4:	5cd3      	ldrb	r3, [r2, r3]
 8001cd6:	f003 031f 	and.w	r3, r3, #31
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ce0:	4a0b      	ldr	r2, [pc, #44]	; (8001d10 <HAL_Init+0x70>)
 8001ce2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001ce4:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_Init+0x74>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cea:	2000      	movs	r0, #0
 8001cec:	f000 f814 	bl	8001d18 <HAL_InitTick>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e002      	b.n	8001d00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001cfa:	f7ff fb39 	bl	8001370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	08007d64 	.word	0x08007d64
 8001d10:	24000004 	.word	0x24000004
 8001d14:	24000000 	.word	0x24000000

08001d18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001d20:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <HAL_InitTick+0x60>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e021      	b.n	8001d70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001d2c:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_InitTick+0x64>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <HAL_InitTick+0x60>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	4619      	mov	r1, r3
 8001d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f000 f94d 	bl	8001fe2 <HAL_SYSTICK_Config>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e00e      	b.n	8001d70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b0f      	cmp	r3, #15
 8001d56:	d80a      	bhi.n	8001d6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	6879      	ldr	r1, [r7, #4]
 8001d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d60:	f000 f917 	bl	8001f92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d64:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <HAL_InitTick+0x68>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e000      	b.n	8001d70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	2400000c 	.word	0x2400000c
 8001d7c:	24000000 	.word	0x24000000
 8001d80:	24000008 	.word	0x24000008

08001d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d88:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_IncTick+0x20>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_IncTick+0x24>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4413      	add	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_IncTick+0x24>)
 8001d96:	6013      	str	r3, [r2, #0]
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	2400000c 	.word	0x2400000c
 8001da8:	24000398 	.word	0x24000398

08001dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return uwTick;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_GetTick+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	24000398 	.word	0x24000398

08001dc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_GetREVID+0x14>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	0c1b      	lsrs	r3, r3, #16
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	5c001000 	.word	0x5c001000

08001ddc <__NVIC_SetPriorityGrouping>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0b      	ldr	r3, [pc, #44]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0a:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <__NVIC_SetPriorityGrouping+0x40>)
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	60d3      	str	r3, [r2, #12]
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00
 8001e20:	05fa0000 	.word	0x05fa0000

08001e24 <__NVIC_GetPriorityGrouping>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	88fb      	ldrh	r3, [r7, #6]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f48:	d301      	bcc.n	8001f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00f      	b.n	8001f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <SysTick_Config+0x40>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3b01      	subs	r3, #1
 8001f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f56:	210f      	movs	r1, #15
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f7ff ff8e 	bl	8001e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f60:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <SysTick_Config+0x40>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f66:	4b04      	ldr	r3, [pc, #16]	; (8001f78 <SysTick_Config+0x40>)
 8001f68:	2207      	movs	r2, #7
 8001f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	e000e010 	.word	0xe000e010

08001f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff ff29 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b086      	sub	sp, #24
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fa0:	f7ff ff40 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001fa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7ff ff90 	bl	8001ed0 <NVIC_EncodePriority>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff5f 	bl	8001e7c <__NVIC_SetPriority>
}
 8001fbe:	bf00      	nop
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	4603      	mov	r3, r0
 8001fce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff ff33 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ffa4 	bl	8001f38 <SysTick_Config>
 8001ff0:	4603      	mov	r3, r0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800200a:	4b89      	ldr	r3, [pc, #548]	; (8002230 <HAL_GPIO_Init+0x234>)
 800200c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800200e:	e194      	b.n	800233a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8186 	beq.w	8002334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b01      	cmp	r3, #1
 8002032:	d005      	beq.n	8002040 <HAL_GPIO_Init+0x44>
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d130      	bne.n	80020a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	2203      	movs	r2, #3
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002076:	2201      	movs	r2, #1
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f003 0201 	and.w	r2, r3, #1
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4313      	orrs	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 0303 	and.w	r3, r3, #3
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	d017      	beq.n	80020de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2203      	movs	r2, #3
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4013      	ands	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4313      	orrs	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	69b9      	ldr	r1, [r7, #24]
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80e0 	beq.w	8002334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002174:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x238>)
 8002176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800217a:	4a2e      	ldr	r2, [pc, #184]	; (8002234 <HAL_GPIO_Init+0x238>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <HAL_GPIO_Init+0x238>)
 8002186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002192:	4a29      	ldr	r2, [pc, #164]	; (8002238 <HAL_GPIO_Init+0x23c>)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	089b      	lsrs	r3, r3, #2
 8002198:	3302      	adds	r3, #2
 800219a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	220f      	movs	r2, #15
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a20      	ldr	r2, [pc, #128]	; (800223c <HAL_GPIO_Init+0x240>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d052      	beq.n	8002264 <HAL_GPIO_Init+0x268>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <HAL_GPIO_Init+0x244>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d031      	beq.n	800222a <HAL_GPIO_Init+0x22e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a1e      	ldr	r2, [pc, #120]	; (8002244 <HAL_GPIO_Init+0x248>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02b      	beq.n	8002226 <HAL_GPIO_Init+0x22a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a1d      	ldr	r2, [pc, #116]	; (8002248 <HAL_GPIO_Init+0x24c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x226>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_GPIO_Init+0x250>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x222>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a1b      	ldr	r2, [pc, #108]	; (8002250 <HAL_GPIO_Init+0x254>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x21e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a1a      	ldr	r2, [pc, #104]	; (8002254 <HAL_GPIO_Init+0x258>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x21a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a19      	ldr	r2, [pc, #100]	; (8002258 <HAL_GPIO_Init+0x25c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x216>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_GPIO_Init+0x260>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x212>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_GPIO_Init+0x264>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x20e>
 8002206:	2309      	movs	r3, #9
 8002208:	e02d      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800220a:	230a      	movs	r3, #10
 800220c:	e02b      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800220e:	2308      	movs	r3, #8
 8002210:	e029      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 8002212:	2307      	movs	r3, #7
 8002214:	e027      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 8002216:	2306      	movs	r3, #6
 8002218:	e025      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800221a:	2305      	movs	r3, #5
 800221c:	e023      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800221e:	2304      	movs	r3, #4
 8002220:	e021      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 8002222:	2303      	movs	r3, #3
 8002224:	e01f      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 8002226:	2302      	movs	r3, #2
 8002228:	e01d      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800222a:	2301      	movs	r3, #1
 800222c:	e01b      	b.n	8002266 <HAL_GPIO_Init+0x26a>
 800222e:	bf00      	nop
 8002230:	58000080 	.word	0x58000080
 8002234:	58024400 	.word	0x58024400
 8002238:	58000400 	.word	0x58000400
 800223c:	58020000 	.word	0x58020000
 8002240:	58020400 	.word	0x58020400
 8002244:	58020800 	.word	0x58020800
 8002248:	58020c00 	.word	0x58020c00
 800224c:	58021000 	.word	0x58021000
 8002250:	58021400 	.word	0x58021400
 8002254:	58021800 	.word	0x58021800
 8002258:	58021c00 	.word	0x58021c00
 800225c:	58022000 	.word	0x58022000
 8002260:	58022400 	.word	0x58022400
 8002264:	2300      	movs	r3, #0
 8002266:	69fa      	ldr	r2, [r7, #28]
 8002268:	f002 0203 	and.w	r2, r2, #3
 800226c:	0092      	lsls	r2, r2, #2
 800226e:	4093      	lsls	r3, r2
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002276:	4938      	ldr	r1, [pc, #224]	; (8002358 <HAL_GPIO_Init+0x35c>)
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	089b      	lsrs	r3, r3, #2
 800227c:	3302      	adds	r3, #2
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	43db      	mvns	r3, r3
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80022aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80022d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d003      	beq.n	8002304 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	3301      	adds	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f47f ae63 	bne.w	8002010 <HAL_GPIO_Init+0x14>
  }
}
 800234a:	bf00      	nop
 800234c:	bf00      	nop
 800234e:	3724      	adds	r7, #36	; 0x24
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	58000400 	.word	0x58000400

0800235c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	460b      	mov	r3, r1
 8002366:	807b      	strh	r3, [r7, #2]
 8002368:	4613      	mov	r3, r2
 800236a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800236c:	787b      	ldrb	r3, [r7, #1]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d003      	beq.n	800237a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002372:	887a      	ldrh	r2, [r7, #2]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002378:	e003      	b.n	8002382 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800237a:	887b      	ldrh	r3, [r7, #2]
 800237c:	041a      	lsls	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	619a      	str	r2, [r3, #24]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800238e:	b480      	push	{r7}
 8002390:	b085      	sub	sp, #20
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
 8002396:	460b      	mov	r3, r1
 8002398:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	4013      	ands	r3, r2
 80023a6:	041a      	lsls	r2, r3, #16
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	887b      	ldrh	r3, [r7, #2]
 80023ae:	400b      	ands	r3, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80023cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d008      	beq.n	80023ee <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e6:	88fb      	ldrh	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe ff69 	bl	80012c0 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002400:	4b29      	ldr	r3, [pc, #164]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	2b06      	cmp	r3, #6
 800240a:	d00a      	beq.n	8002422 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800240c:	4b26      	ldr	r3, [pc, #152]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	429a      	cmp	r2, r3
 8002418:	d001      	beq.n	800241e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e040      	b.n	80024a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	e03e      	b.n	80024a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002422:	4b21      	ldr	r3, [pc, #132]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800242a:	491f      	ldr	r1, [pc, #124]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	4313      	orrs	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002432:	f7ff fcbb 	bl	8001dac <HAL_GetTick>
 8002436:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002438:	e009      	b.n	800244e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800243a:	f7ff fcb7 	bl	8001dac <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002448:	d901      	bls.n	800244e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e028      	b.n	80024a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002456:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800245a:	d1ee      	bne.n	800243a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2b1e      	cmp	r3, #30
 8002460:	d008      	beq.n	8002474 <HAL_PWREx_ConfigSupply+0x7c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b2e      	cmp	r3, #46	; 0x2e
 8002466:	d005      	beq.n	8002474 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b1d      	cmp	r3, #29
 800246c:	d002      	beq.n	8002474 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b2d      	cmp	r3, #45	; 0x2d
 8002472:	d114      	bne.n	800249e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002474:	f7ff fc9a 	bl	8001dac <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800247a:	e009      	b.n	8002490 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800247c:	f7ff fc96 	bl	8001dac <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248a:	d901      	bls.n	8002490 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e007      	b.n	80024a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002490:	4b05      	ldr	r3, [pc, #20]	; (80024a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249c:	d1ee      	bne.n	800247c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024800 	.word	0x58024800

080024ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08c      	sub	sp, #48	; 0x30
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d102      	bne.n	80024c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f000 bc48 	b.w	8002d50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0301 	and.w	r3, r3, #1
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 8088 	beq.w	80025de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ce:	4b99      	ldr	r3, [pc, #612]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d8:	4b96      	ldr	r3, [pc, #600]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024dc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	2b10      	cmp	r3, #16
 80024e2:	d007      	beq.n	80024f4 <HAL_RCC_OscConfig+0x48>
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	2b18      	cmp	r3, #24
 80024e8:	d111      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
 80024ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d10c      	bne.n	800250e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f4:	4b8f      	ldr	r3, [pc, #572]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d06d      	beq.n	80025dc <HAL_RCC_OscConfig+0x130>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d169      	bne.n	80025dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	f000 bc21 	b.w	8002d50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002516:	d106      	bne.n	8002526 <HAL_RCC_OscConfig+0x7a>
 8002518:	4b86      	ldr	r3, [pc, #536]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a85      	ldr	r2, [pc, #532]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800251e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002522:	6013      	str	r3, [r2, #0]
 8002524:	e02e      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d10c      	bne.n	8002548 <HAL_RCC_OscConfig+0x9c>
 800252e:	4b81      	ldr	r3, [pc, #516]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a80      	ldr	r2, [pc, #512]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002538:	6013      	str	r3, [r2, #0]
 800253a:	4b7e      	ldr	r3, [pc, #504]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7d      	ldr	r2, [pc, #500]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0xc0>
 8002552:	4b78      	ldr	r3, [pc, #480]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a77      	ldr	r2, [pc, #476]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a74      	ldr	r2, [pc, #464]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xd8>
 800256c:	4b71      	ldr	r3, [pc, #452]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a70      	ldr	r2, [pc, #448]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b6e      	ldr	r3, [pc, #440]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff fc0e 	bl	8001dac <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff fc0a 	bl	8001dac <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	; 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e3d4      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a6:	4b63      	ldr	r3, [pc, #396]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff fbfa 	bl	8001dac <HAL_GetTick>
 80025b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff fbf6 	bl	8001dac <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	; 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e3c0      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ce:	4b59      	ldr	r3, [pc, #356]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x110>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80ca 	beq.w	8002780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ec:	4b51      	ldr	r3, [pc, #324]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025fc:	6a3b      	ldr	r3, [r7, #32]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d007      	beq.n	8002612 <HAL_RCC_OscConfig+0x166>
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2b18      	cmp	r3, #24
 8002606:	d156      	bne.n	80026b6 <HAL_RCC_OscConfig+0x20a>
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d151      	bne.n	80026b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d005      	beq.n	800262a <HAL_RCC_OscConfig+0x17e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e392      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800262a:	4b42      	ldr	r3, [pc, #264]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0219 	bic.w	r2, r3, #25
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	493f      	ldr	r1, [pc, #252]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff fbb6 	bl	8001dac <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff fbb2 	bl	8001dac <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e37c      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002656:	4b37      	ldr	r3, [pc, #220]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	f7ff fbaf 	bl	8001dc4 <HAL_GetREVID>
 8002666:	4603      	mov	r3, r0
 8002668:	f241 0203 	movw	r2, #4099	; 0x1003
 800266c:	4293      	cmp	r3, r2
 800266e:	d817      	bhi.n	80026a0 <HAL_RCC_OscConfig+0x1f4>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b40      	cmp	r3, #64	; 0x40
 8002676:	d108      	bne.n	800268a <HAL_RCC_OscConfig+0x1de>
 8002678:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002680:	4a2c      	ldr	r2, [pc, #176]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002688:	e07a      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	031b      	lsls	r3, r3, #12
 8002698:	4926      	ldr	r1, [pc, #152]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269e:	e06f      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	4921      	ldr	r1, [pc, #132]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b4:	e064      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d047      	beq.n	800274e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 0219 	bic.w	r2, r3, #25
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7ff fb6c 	bl	8001dac <HAL_GetTick>
 80026d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d8:	f7ff fb68 	bl	8001dac <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e332      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ea:	4b12      	ldr	r3, [pc, #72]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d0f0      	beq.n	80026d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f6:	f7ff fb65 	bl	8001dc4 <HAL_GetREVID>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002700:	4293      	cmp	r3, r2
 8002702:	d819      	bhi.n	8002738 <HAL_RCC_OscConfig+0x28c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b40      	cmp	r3, #64	; 0x40
 800270a:	d108      	bne.n	800271e <HAL_RCC_OscConfig+0x272>
 800270c:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002714:	4a07      	ldr	r2, [pc, #28]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271a:	6053      	str	r3, [r2, #4]
 800271c:	e030      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
 800271e:	4b05      	ldr	r3, [pc, #20]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	031b      	lsls	r3, r3, #12
 800272c:	4901      	ldr	r1, [pc, #4]	; (8002734 <HAL_RCC_OscConfig+0x288>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
 8002732:	e025      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
 8002734:	58024400 	.word	0x58024400
 8002738:	4b9a      	ldr	r3, [pc, #616]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	061b      	lsls	r3, r3, #24
 8002746:	4997      	ldr	r1, [pc, #604]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002748:	4313      	orrs	r3, r2
 800274a:	604b      	str	r3, [r1, #4]
 800274c:	e018      	b.n	8002780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274e:	4b95      	ldr	r3, [pc, #596]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a94      	ldr	r2, [pc, #592]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275a:	f7ff fb27 	bl	8001dac <HAL_GetTick>
 800275e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002760:	e008      	b.n	8002774 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002762:	f7ff fb23 	bl	8001dac <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d901      	bls.n	8002774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002770:	2303      	movs	r3, #3
 8002772:	e2ed      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002774:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0304 	and.w	r3, r3, #4
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f0      	bne.n	8002762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0310 	and.w	r3, r3, #16
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a9 	beq.w	80028e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002798:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800279a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d007      	beq.n	80027b4 <HAL_RCC_OscConfig+0x308>
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	2b18      	cmp	r3, #24
 80027a8:	d13a      	bne.n	8002820 <HAL_RCC_OscConfig+0x374>
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d135      	bne.n	8002820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b4:	4b7b      	ldr	r3, [pc, #492]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x320>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e2c1      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027cc:	f7ff fafa 	bl	8001dc4 <HAL_GetREVID>
 80027d0:	4603      	mov	r3, r0
 80027d2:	f241 0203 	movw	r2, #4099	; 0x1003
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d817      	bhi.n	800280a <HAL_RCC_OscConfig+0x35e>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	2b20      	cmp	r3, #32
 80027e0:	d108      	bne.n	80027f4 <HAL_RCC_OscConfig+0x348>
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027ea:	4a6e      	ldr	r2, [pc, #440]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027f2:	e075      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f4:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	069b      	lsls	r3, r3, #26
 8002802:	4968      	ldr	r1, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002808:	e06a      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800280a:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	061b      	lsls	r3, r3, #24
 8002818:	4962      	ldr	r1, [pc, #392]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	4313      	orrs	r3, r2
 800281c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281e:	e05f      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d042      	beq.n	80028ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002828:	4b5e      	ldr	r3, [pc, #376]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a5d      	ldr	r2, [pc, #372]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800282e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff faba 	bl	8001dac <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800283c:	f7ff fab6 	bl	8001dac <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e280      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284e:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285a:	f7ff fab3 	bl	8001dc4 <HAL_GetREVID>
 800285e:	4603      	mov	r3, r0
 8002860:	f241 0203 	movw	r2, #4099	; 0x1003
 8002864:	4293      	cmp	r3, r2
 8002866:	d817      	bhi.n	8002898 <HAL_RCC_OscConfig+0x3ec>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	2b20      	cmp	r3, #32
 800286e:	d108      	bne.n	8002882 <HAL_RCC_OscConfig+0x3d6>
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002878:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287e:	6053      	str	r3, [r2, #4]
 8002880:	e02e      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
 8002882:	4b48      	ldr	r3, [pc, #288]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	069b      	lsls	r3, r3, #26
 8002890:	4944      	ldr	r1, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
 8002896:	e023      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
 8002898:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	061b      	lsls	r3, r3, #24
 80028a6:	493f      	ldr	r1, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	60cb      	str	r3, [r1, #12]
 80028ac:	e018      	b.n	80028e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028ae:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3c      	ldr	r2, [pc, #240]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ba:	f7ff fa77 	bl	8001dac <HAL_GetTick>
 80028be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028c2:	f7ff fa73 	bl	8001dac <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e23d      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0308 	and.w	r3, r3, #8
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d036      	beq.n	800295a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d019      	beq.n	8002928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f8:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7ff fa54 	bl	8001dac <HAL_GetTick>
 8002904:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002908:	f7ff fa50 	bl	8001dac <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e21a      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800291a:	4b22      	ldr	r3, [pc, #136]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d0f0      	beq.n	8002908 <HAL_RCC_OscConfig+0x45c>
 8002926:	e018      	b.n	800295a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292c:	4a1d      	ldr	r2, [pc, #116]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	f023 0301 	bic.w	r3, r3, #1
 8002932:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7ff fa3a 	bl	8001dac <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800293c:	f7ff fa36 	bl	8001dac <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b02      	cmp	r3, #2
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e200      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800294e:	4b15      	ldr	r3, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	2b00      	cmp	r3, #0
 8002964:	d039      	beq.n	80029da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002974:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800297a:	f7ff fa17 	bl	8001dac <HAL_GetTick>
 800297e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002982:	f7ff fa13 	bl	8001dac <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1dd      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002994:	4b03      	ldr	r3, [pc, #12]	; (80029a4 <HAL_RCC_OscConfig+0x4f8>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0f0      	beq.n	8002982 <HAL_RCC_OscConfig+0x4d6>
 80029a0:	e01b      	b.n	80029da <HAL_RCC_OscConfig+0x52e>
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a8:	4b9b      	ldr	r3, [pc, #620]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a9a      	ldr	r2, [pc, #616]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b4:	f7ff f9fa 	bl	8001dac <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029bc:	f7ff f9f6 	bl	8001dac <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1c0      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ce:	4b92      	ldr	r3, [pc, #584]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 8081 	beq.w	8002aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a8b      	ldr	r2, [pc, #556]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 80029ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f4:	f7ff f9da 	bl	8001dac <HAL_GetTick>
 80029f8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029fc:	f7ff f9d6 	bl	8001dac <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	; 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e1a0      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0e:	4b83      	ldr	r3, [pc, #524]	; (8002c1c <HAL_RCC_OscConfig+0x770>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0f0      	beq.n	80029fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d106      	bne.n	8002a30 <HAL_RCC_OscConfig+0x584>
 8002a22:	4b7d      	ldr	r3, [pc, #500]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2e:	e02d      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10c      	bne.n	8002a52 <HAL_RCC_OscConfig+0x5a6>
 8002a38:	4b77      	ldr	r3, [pc, #476]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3c:	4a76      	ldr	r2, [pc, #472]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a3e:	f023 0301 	bic.w	r3, r3, #1
 8002a42:	6713      	str	r3, [r2, #112]	; 0x70
 8002a44:	4b74      	ldr	r3, [pc, #464]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	4a73      	ldr	r2, [pc, #460]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a50:	e01c      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b05      	cmp	r3, #5
 8002a58:	d10c      	bne.n	8002a74 <HAL_RCC_OscConfig+0x5c8>
 8002a5a:	4b6f      	ldr	r3, [pc, #444]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5e:	4a6e      	ldr	r2, [pc, #440]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	6713      	str	r3, [r2, #112]	; 0x70
 8002a66:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a6b      	ldr	r2, [pc, #428]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	f043 0301 	orr.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	e00b      	b.n	8002a8c <HAL_RCC_OscConfig+0x5e0>
 8002a74:	4b68      	ldr	r3, [pc, #416]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a78:	4a67      	ldr	r2, [pc, #412]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a7a:	f023 0301 	bic.w	r3, r3, #1
 8002a7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a80:	4b65      	ldr	r3, [pc, #404]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a84:	4a64      	ldr	r2, [pc, #400]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002a86:	f023 0304 	bic.w	r3, r3, #4
 8002a8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d015      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a94:	f7ff f98a 	bl	8001dac <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a9a:	e00a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a9c:	f7ff f986 	bl	8001dac <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e14e      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ab2:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0ee      	beq.n	8002a9c <HAL_RCC_OscConfig+0x5f0>
 8002abe:	e014      	b.n	8002aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac0:	f7ff f974 	bl	8001dac <HAL_GetTick>
 8002ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac8:	f7ff f970 	bl	8001dac <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e138      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ade:	4b4e      	ldr	r3, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ee      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 812d 	beq.w	8002d4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002af4:	4b48      	ldr	r3, [pc, #288]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002afc:	2b18      	cmp	r3, #24
 8002afe:	f000 80bd 	beq.w	8002c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	f040 809e 	bne.w	8002c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b42      	ldr	r3, [pc, #264]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a41      	ldr	r2, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7ff f948 	bl	8001dac <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b20:	f7ff f944 	bl	8001dac <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e10e      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b32:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3e:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b42:	4b37      	ldr	r3, [pc, #220]	; (8002c20 <HAL_RCC_OscConfig+0x774>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b4e:	0112      	lsls	r2, r2, #4
 8002b50:	430a      	orrs	r2, r1
 8002b52:	4931      	ldr	r1, [pc, #196]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	628b      	str	r3, [r1, #40]	; 0x28
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b66:	3b01      	subs	r3, #1
 8002b68:	025b      	lsls	r3, r3, #9
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	3b01      	subs	r3, #1
 8002b74:	041b      	lsls	r3, r3, #16
 8002b76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b80:	3b01      	subs	r3, #1
 8002b82:	061b      	lsls	r3, r3, #24
 8002b84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b88:	4923      	ldr	r1, [pc, #140]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b8e:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b92:	4a21      	ldr	r2, [pc, #132]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b9a:	4b1f      	ldr	r3, [pc, #124]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9e:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x778>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba6:	00d2      	lsls	r2, r2, #3
 8002ba8:	491b      	ldr	r1, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	f023 020c 	bic.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bba:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bc0:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	f023 0202 	bic.w	r2, r3, #2
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	4912      	ldr	r1, [pc, #72]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	4a10      	ldr	r2, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be2:	4a0d      	ldr	r2, [pc, #52]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bea:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bf6:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4a07      	ldr	r2, [pc, #28]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c02:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a04      	ldr	r2, [pc, #16]	; (8002c18 <HAL_RCC_OscConfig+0x76c>)
 8002c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7ff f8cd 	bl	8001dac <HAL_GetTick>
 8002c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c14:	e011      	b.n	8002c3a <HAL_RCC_OscConfig+0x78e>
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	58024800 	.word	0x58024800
 8002c20:	fffffc0c 	.word	0xfffffc0c
 8002c24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c28:	f7ff f8c0 	bl	8001dac <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e08a      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x77c>
 8002c46:	e082      	b.n	8002d4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c48:	4b43      	ldr	r3, [pc, #268]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff f8aa 	bl	8001dac <HAL_GetTick>
 8002c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7ff f8a6 	bl	8001dac <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e070      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6e:	4b3a      	ldr	r3, [pc, #232]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1f0      	bne.n	8002c5c <HAL_RCC_OscConfig+0x7b0>
 8002c7a:	e068      	b.n	8002d4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c7c:	4b36      	ldr	r3, [pc, #216]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c82:	4b35      	ldr	r3, [pc, #212]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d031      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f003 0203 	and.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d12a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d122      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d11a      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	0a5b      	lsrs	r3, r3, #9
 8002cc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d111      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	0c1b      	lsrs	r3, r3, #16
 8002cd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d108      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0e1b      	lsrs	r3, r3, #24
 8002ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d001      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e02b      	b.n	8002d50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cfc:	08db      	lsrs	r3, r3, #3
 8002cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d01f      	beq.n	8002d4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d0e:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d14:	f023 0301 	bic.w	r3, r3, #1
 8002d18:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d1a:	f7ff f847 	bl	8001dac <HAL_GetTick>
 8002d1e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d20:	bf00      	nop
 8002d22:	f7ff f843 	bl	8001dac <HAL_GetTick>
 8002d26:	4602      	mov	r2, r0
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d0f9      	beq.n	8002d22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <HAL_RCC_OscConfig+0x8b0>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d3a:	00d2      	lsls	r2, r2, #3
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d42:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	4a04      	ldr	r2, [pc, #16]	; (8002d58 <HAL_RCC_OscConfig+0x8ac>)
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3730      	adds	r7, #48	; 0x30
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	58024400 	.word	0x58024400
 8002d5c:	ffff0007 	.word	0xffff0007

08002d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e19c      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d74:	4b8a      	ldr	r3, [pc, #552]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d910      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 020f 	bic.w	r2, r3, #15
 8002d8a:	4985      	ldr	r1, [pc, #532]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b83      	ldr	r3, [pc, #524]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e184      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0304 	and.w	r3, r3, #4
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	4b7b      	ldr	r3, [pc, #492]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d908      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dc0:	4b78      	ldr	r3, [pc, #480]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4975      	ldr	r1, [pc, #468]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d010      	beq.n	8002e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695a      	ldr	r2, [r3, #20]
 8002de2:	4b70      	ldr	r3, [pc, #448]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d908      	bls.n	8002e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dee:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	496a      	ldr	r1, [pc, #424]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d010      	beq.n	8002e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d908      	bls.n	8002e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	69db      	ldr	r3, [r3, #28]
 8002e20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	495e      	ldr	r1, [pc, #376]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d010      	beq.n	8002e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d908      	bls.n	8002e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e4a:	4b56      	ldr	r3, [pc, #344]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	6a1b      	ldr	r3, [r3, #32]
 8002e4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	4953      	ldr	r1, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d010      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	4b4d      	ldr	r3, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d908      	bls.n	8002e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e78:	4b4a      	ldr	r3, [pc, #296]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	f023 020f 	bic.w	r2, r3, #15
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4947      	ldr	r1, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d055      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e96:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4940      	ldr	r1, [pc, #256]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d107      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eb0:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d121      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e0f6      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d115      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0ea      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d107      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ee0:	4b30      	ldr	r3, [pc, #192]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0de      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ef0:	4b2c      	ldr	r3, [pc, #176]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d101      	bne.n	8002f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0d6      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f023 0207 	bic.w	r2, r3, #7
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4925      	ldr	r1, [pc, #148]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f12:	f7fe ff4b 	bl	8001dac <HAL_GetTick>
 8002f16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f18:	e00a      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f1a:	f7fe ff47 	bl	8001dac <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e0be      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d1eb      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d010      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	4b14      	ldr	r3, [pc, #80]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f003 030f 	and.w	r3, r3, #15
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d208      	bcs.n	8002f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f023 020f 	bic.w	r2, r3, #15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x244>)
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d214      	bcs.n	8002fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f023 020f 	bic.w	r2, r3, #15
 8002f86:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8e:	4b04      	ldr	r3, [pc, #16]	; (8002fa0 <HAL_RCC_ClockConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e086      	b.n	80030ae <HAL_RCC_ClockConfig+0x34e>
 8002fa0:	52002000 	.word	0x52002000
 8002fa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d010      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691a      	ldr	r2, [r3, #16]
 8002fb8:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d208      	bcs.n	8002fd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fc4:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	4939      	ldr	r1, [pc, #228]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d010      	beq.n	8003004 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695a      	ldr	r2, [r3, #20]
 8002fe6:	4b34      	ldr	r3, [pc, #208]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8002fe8:	69db      	ldr	r3, [r3, #28]
 8002fea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d208      	bcs.n	8003004 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ff2:	4b31      	ldr	r3, [pc, #196]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	492e      	ldr	r1, [pc, #184]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003000:	4313      	orrs	r3, r2
 8003002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0310 	and.w	r3, r3, #16
 800300c:	2b00      	cmp	r3, #0
 800300e:	d010      	beq.n	8003032 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003016:	69db      	ldr	r3, [r3, #28]
 8003018:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800301c:	429a      	cmp	r2, r3
 800301e:	d208      	bcs.n	8003032 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003022:	69db      	ldr	r3, [r3, #28]
 8003024:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4922      	ldr	r1, [pc, #136]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 800302e:	4313      	orrs	r3, r2
 8003030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0320 	and.w	r3, r3, #32
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	69da      	ldr	r2, [r3, #28]
 8003042:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304a:	429a      	cmp	r2, r3
 800304c:	d208      	bcs.n	8003060 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800304e:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	4917      	ldr	r1, [pc, #92]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 800305c:	4313      	orrs	r3, r2
 800305e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003060:	f000 f834 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 8003064:	4602      	mov	r2, r0
 8003066:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	0a1b      	lsrs	r3, r3, #8
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	4912      	ldr	r1, [pc, #72]	; (80030bc <HAL_RCC_ClockConfig+0x35c>)
 8003072:	5ccb      	ldrb	r3, [r1, r3]
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	fa22 f303 	lsr.w	r3, r2, r3
 800307c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_RCC_ClockConfig+0x358>)
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	4a0d      	ldr	r2, [pc, #52]	; (80030bc <HAL_RCC_ClockConfig+0x35c>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x360>)
 8003096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003098:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x364>)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800309e:	4b0a      	ldr	r3, [pc, #40]	; (80030c8 <HAL_RCC_ClockConfig+0x368>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7fe fe38 	bl	8001d18 <HAL_InitTick>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3718      	adds	r7, #24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
 80030bc:	08007d64 	.word	0x08007d64
 80030c0:	24000004 	.word	0x24000004
 80030c4:	24000000 	.word	0x24000000
 80030c8:	24000008 	.word	0x24000008

080030cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b089      	sub	sp, #36	; 0x24
 80030d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030d2:	4bb3      	ldr	r3, [pc, #716]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030da:	2b18      	cmp	r3, #24
 80030dc:	f200 8155 	bhi.w	800338a <HAL_RCC_GetSysClockFreq+0x2be>
 80030e0:	a201      	add	r2, pc, #4	; (adr r2, 80030e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e6:	bf00      	nop
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	0800338b 	.word	0x0800338b
 80030f0:	0800338b 	.word	0x0800338b
 80030f4:	0800338b 	.word	0x0800338b
 80030f8:	0800338b 	.word	0x0800338b
 80030fc:	0800338b 	.word	0x0800338b
 8003100:	0800338b 	.word	0x0800338b
 8003104:	0800338b 	.word	0x0800338b
 8003108:	08003173 	.word	0x08003173
 800310c:	0800338b 	.word	0x0800338b
 8003110:	0800338b 	.word	0x0800338b
 8003114:	0800338b 	.word	0x0800338b
 8003118:	0800338b 	.word	0x0800338b
 800311c:	0800338b 	.word	0x0800338b
 8003120:	0800338b 	.word	0x0800338b
 8003124:	0800338b 	.word	0x0800338b
 8003128:	08003179 	.word	0x08003179
 800312c:	0800338b 	.word	0x0800338b
 8003130:	0800338b 	.word	0x0800338b
 8003134:	0800338b 	.word	0x0800338b
 8003138:	0800338b 	.word	0x0800338b
 800313c:	0800338b 	.word	0x0800338b
 8003140:	0800338b 	.word	0x0800338b
 8003144:	0800338b 	.word	0x0800338b
 8003148:	0800317f 	.word	0x0800317f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800314c:	4b94      	ldr	r3, [pc, #592]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d009      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003158:	4b91      	ldr	r3, [pc, #580]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	4a90      	ldr	r2, [pc, #576]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003164:	fa22 f303 	lsr.w	r3, r2, r3
 8003168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800316a:	e111      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800316c:	4b8d      	ldr	r3, [pc, #564]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800316e:	61bb      	str	r3, [r7, #24]
      break;
 8003170:	e10e      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003172:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003174:	61bb      	str	r3, [r7, #24]
      break;
 8003176:	e10b      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003178:	4b8c      	ldr	r3, [pc, #560]	; (80033ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800317a:	61bb      	str	r3, [r7, #24]
      break;
 800317c:	e108      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	f003 0303 	and.w	r3, r3, #3
 8003186:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003188:	4b85      	ldr	r3, [pc, #532]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003192:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003194:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800319e:	4b80      	ldr	r3, [pc, #512]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a2:	08db      	lsrs	r3, r3, #3
 80031a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	fb02 f303 	mul.w	r3, r2, r3
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80e1 	beq.w	8003384 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	f000 8083 	beq.w	80032d0 <HAL_RCC_GetSysClockFreq+0x204>
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	f200 80a1 	bhi.w	8003314 <HAL_RCC_GetSysClockFreq+0x248>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x114>
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d056      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x1c0>
 80031de:	e099      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d02d      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031ec:	4b6c      	ldr	r3, [pc, #432]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	08db      	lsrs	r3, r3, #3
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	4a6b      	ldr	r2, [pc, #428]	; (80033a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f8:	fa22 f303 	lsr.w	r3, r2, r3
 80031fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003216:	4b62      	ldr	r3, [pc, #392]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003226:	ed97 6a02 	vldr	s12, [r7, #8]
 800322a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80033b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800322e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800323a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003246:	e087      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003252:	eddf 6a58 	vldr	s13, [pc, #352]	; 80033b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325a:	4b51      	ldr	r3, [pc, #324]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326a:	ed97 6a02 	vldr	s12, [r7, #8]
 800326e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80033b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800327e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328a:	e065      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	eddf 6a48 	vldr	s13, [pc, #288]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329e:	4b40      	ldr	r3, [pc, #256]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80033b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ce:	e043      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	eddf 6a38 	vldr	s13, [pc, #224]	; 80033bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b2f      	ldr	r3, [pc, #188]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80033b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003312:	e021      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	ee07 3a90 	vmov	s15, r3
 800331a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80033b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003326:	4b1e      	ldr	r3, [pc, #120]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003336:	ed97 6a02 	vldr	s12, [r7, #8]
 800333a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80033b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800333e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003356:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	0a5b      	lsrs	r3, r3, #9
 800335e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003362:	3301      	adds	r3, #1
 8003364:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	ee07 3a90 	vmov	s15, r3
 800336c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003370:	edd7 6a07 	vldr	s13, [r7, #28]
 8003374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337c:	ee17 3a90 	vmov	r3, s15
 8003380:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003382:	e005      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
      break;
 8003388:	e002      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800338a:	4b07      	ldr	r3, [pc, #28]	; (80033a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800338c:	61bb      	str	r3, [r7, #24]
      break;
 800338e:	bf00      	nop
  }

  return sysclockfreq;
 8003390:	69bb      	ldr	r3, [r7, #24]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	58024400 	.word	0x58024400
 80033a4:	03d09000 	.word	0x03d09000
 80033a8:	003d0900 	.word	0x003d0900
 80033ac:	017d7840 	.word	0x017d7840
 80033b0:	46000000 	.word	0x46000000
 80033b4:	4c742400 	.word	0x4c742400
 80033b8:	4a742400 	.word	0x4a742400
 80033bc:	4bbebc20 	.word	0x4bbebc20

080033c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033c6:	f7ff fe81 	bl	80030cc <HAL_RCC_GetSysClockFreq>
 80033ca:	4602      	mov	r2, r0
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_GetHCLKFreq+0x50>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	0a1b      	lsrs	r3, r3, #8
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	490f      	ldr	r1, [pc, #60]	; (8003414 <HAL_RCC_GetHCLKFreq+0x54>)
 80033d8:	5ccb      	ldrb	r3, [r1, r3]
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e4:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_RCC_GetHCLKFreq+0x50>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	4a09      	ldr	r2, [pc, #36]	; (8003414 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	fa22 f303 	lsr.w	r3, r2, r3
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_RCC_GetHCLKFreq+0x58>)
 80033fc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033fe:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003404:	4b04      	ldr	r3, [pc, #16]	; (8003418 <HAL_RCC_GetHCLKFreq+0x58>)
 8003406:	681b      	ldr	r3, [r3, #0]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3708      	adds	r7, #8
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	58024400 	.word	0x58024400
 8003414:	08007d64 	.word	0x08007d64
 8003418:	24000004 	.word	0x24000004
 800341c:	24000000 	.word	0x24000000

08003420 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003424:	f7ff ffcc 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 8003428:	4602      	mov	r2, r0
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x24>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	091b      	lsrs	r3, r3, #4
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	4904      	ldr	r1, [pc, #16]	; (8003448 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003436:	5ccb      	ldrb	r3, [r1, r3]
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003440:	4618      	mov	r0, r3
 8003442:	bd80      	pop	{r7, pc}
 8003444:	58024400 	.word	0x58024400
 8003448:	08007d64 	.word	0x08007d64

0800344c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003450:	f7ff ffb6 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 8003454:	4602      	mov	r2, r0
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	f003 0307 	and.w	r3, r3, #7
 8003460:	4904      	ldr	r1, [pc, #16]	; (8003474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003462:	5ccb      	ldrb	r3, [r1, r3]
 8003464:	f003 031f 	and.w	r3, r3, #31
 8003468:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800346c:	4618      	mov	r0, r3
 800346e:	bd80      	pop	{r7, pc}
 8003470:	58024400 	.word	0x58024400
 8003474:	08007d64 	.word	0x08007d64

08003478 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800347c:	b0ca      	sub	sp, #296	; 0x128
 800347e:	af00      	add	r7, sp, #0
 8003480:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800348a:	2300      	movs	r3, #0
 800348c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003498:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800349c:	2500      	movs	r5, #0
 800349e:	ea54 0305 	orrs.w	r3, r4, r5
 80034a2:	d049      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034ae:	d02f      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034b0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034b4:	d828      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ba:	d01a      	beq.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034c0:	d822      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d007      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034cc:	e01c      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ce:	4bb8      	ldr	r3, [pc, #736]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d2:	4ab7      	ldr	r2, [pc, #732]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034da:	e01a      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e0:	3308      	adds	r3, #8
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 fc8f 	bl	8004e08 <RCCEx_PLL2_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034f0:	e00f      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f6:	3328      	adds	r3, #40	; 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f001 fd36 	bl	8004f6c <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003506:	e004      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10a      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800351a:	4ba5      	ldr	r3, [pc, #660]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003528:	4aa1      	ldr	r2, [pc, #644]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352a:	430b      	orrs	r3, r1
 800352c:	6513      	str	r3, [r2, #80]	; 0x50
 800352e:	e003      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003534:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003538:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	ea58 0309 	orrs.w	r3, r8, r9
 800354c:	d047      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003554:	2b04      	cmp	r3, #4
 8003556:	d82a      	bhi.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003558:	a201      	add	r2, pc, #4	; (adr r2, 8003560 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800355a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355e:	bf00      	nop
 8003560:	08003575 	.word	0x08003575
 8003564:	08003583 	.word	0x08003583
 8003568:	08003599 	.word	0x08003599
 800356c:	080035b7 	.word	0x080035b7
 8003570:	080035b7 	.word	0x080035b7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003574:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	4a8d      	ldr	r2, [pc, #564]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800357a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800357e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e01a      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003586:	3308      	adds	r3, #8
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f001 fc3c 	bl	8004e08 <RCCEx_PLL2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003596:	e00f      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800359c:	3328      	adds	r3, #40	; 0x28
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fce3 	bl	8004f6c <RCCEx_PLL3_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ac:	e004      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035b4:	e000      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035c0:	4b7b      	ldr	r3, [pc, #492]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c4:	f023 0107 	bic.w	r1, r3, #7
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ce:	4a78      	ldr	r2, [pc, #480]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6513      	str	r3, [r2, #80]	; 0x50
 80035d4:	e003      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e6:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	ea5a 030b 	orrs.w	r3, sl, fp
 80035f2:	d04c      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d030      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003600:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003604:	d829      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003606:	2bc0      	cmp	r3, #192	; 0xc0
 8003608:	d02d      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800360a:	2bc0      	cmp	r3, #192	; 0xc0
 800360c:	d825      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800360e:	2b80      	cmp	r3, #128	; 0x80
 8003610:	d018      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003612:	2b80      	cmp	r3, #128	; 0x80
 8003614:	d821      	bhi.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d007      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800361e:	e01c      	b.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003620:	4b63      	ldr	r3, [pc, #396]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	4a62      	ldr	r2, [pc, #392]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800362c:	e01c      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003632:	3308      	adds	r3, #8
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f001 fbe6 	bl	8004e08 <RCCEx_PLL2_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003642:	e011      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003648:	3328      	adds	r3, #40	; 0x28
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc8d 	bl	8004f6c <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003658:	e006      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003660:	e002      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003662:	bf00      	nop
 8003664:	e000      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003666:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003668:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003670:	4b4f      	ldr	r3, [pc, #316]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003674:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	4a4c      	ldr	r2, [pc, #304]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003680:	430b      	orrs	r3, r1
 8003682:	6513      	str	r3, [r2, #80]	; 0x50
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800368a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800369a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800369e:	2300      	movs	r3, #0
 80036a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80036a4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80036a8:	460b      	mov	r3, r1
 80036aa:	4313      	orrs	r3, r2
 80036ac:	d053      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036ba:	d035      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036c0:	d82e      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036c6:	d031      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036cc:	d828      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d2:	d01a      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036d8:	d822      	bhi.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d003      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036e2:	d007      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036e4:	e01c      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e6:	4b32      	ldr	r3, [pc, #200]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ea:	4a31      	ldr	r2, [pc, #196]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f2:	e01c      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f8:	3308      	adds	r3, #8
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fb83 	bl	8004e08 <RCCEx_PLL2_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003708:	e011      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	3328      	adds	r3, #40	; 0x28
 8003710:	2100      	movs	r1, #0
 8003712:	4618      	mov	r0, r3
 8003714:	f001 fc2a 	bl	8004f6c <RCCEx_PLL3_Config>
 8003718:	4603      	mov	r3, r0
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800371e:	e006      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003726:	e002      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003728:	bf00      	nop
 800372a:	e000      	b.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800372c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10b      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003746:	4a1a      	ldr	r2, [pc, #104]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003748:	430b      	orrs	r3, r1
 800374a:	6593      	str	r3, [r2, #88]	; 0x58
 800374c:	e003      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375e:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003762:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800376c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003770:	460b      	mov	r3, r1
 8003772:	4313      	orrs	r3, r2
 8003774:	d056      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800377e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003782:	d038      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003784:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003788:	d831      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 800378a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800378e:	d034      	beq.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003790:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003794:	d82b      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003796:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800379a:	d01d      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800379c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037a0:	d825      	bhi.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d006      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037aa:	d00a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037ac:	e01f      	b.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b4:	4ba2      	ldr	r3, [pc, #648]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	4aa1      	ldr	r2, [pc, #644]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c0:	e01c      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c6:	3308      	adds	r3, #8
 80037c8:	2100      	movs	r1, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f001 fb1c 	bl	8004e08 <RCCEx_PLL2_Config>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d6:	e011      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037dc:	3328      	adds	r3, #40	; 0x28
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 fbc3 	bl	8004f6c <RCCEx_PLL3_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037ec:	e006      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037f4:	e002      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003800:	2b00      	cmp	r3, #0
 8003802:	d10b      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003804:	4b8e      	ldr	r3, [pc, #568]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003808:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003810:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003814:	4a8a      	ldr	r2, [pc, #552]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003816:	430b      	orrs	r3, r1
 8003818:	6593      	str	r3, [r2, #88]	; 0x58
 800381a:	e003      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800381c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003820:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003834:	2300      	movs	r3, #0
 8003836:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800383a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800383e:	460b      	mov	r3, r1
 8003840:	4313      	orrs	r3, r2
 8003842:	d03a      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800384a:	2b30      	cmp	r3, #48	; 0x30
 800384c:	d01f      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800384e:	2b30      	cmp	r3, #48	; 0x30
 8003850:	d819      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d00c      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003856:	2b20      	cmp	r3, #32
 8003858:	d815      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800385e:	2b10      	cmp	r3, #16
 8003860:	d111      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003862:	4b77      	ldr	r3, [pc, #476]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	4a76      	ldr	r2, [pc, #472]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	3308      	adds	r3, #8
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fac5 	bl	8004e08 <RCCEx_PLL2_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800389c:	4b68      	ldr	r3, [pc, #416]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038aa:	4a65      	ldr	r2, [pc, #404]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80038c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d051      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e4:	d035      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ea:	d82e      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f0:	d031      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038f6:	d828      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	d01a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d822      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d007      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800390e:	e01c      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003910:	4b4b      	ldr	r3, [pc, #300]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	4a4a      	ldr	r2, [pc, #296]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e01c      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	3308      	adds	r3, #8
 8003924:	2100      	movs	r1, #0
 8003926:	4618      	mov	r0, r3
 8003928:	f001 fa6e 	bl	8004e08 <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003938:	3328      	adds	r3, #40	; 0x28
 800393a:	2100      	movs	r1, #0
 800393c:	4618      	mov	r0, r3
 800393e:	f001 fb15 	bl	8004f6c <RCCEx_PLL3_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003948:	e006      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003950:	e002      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003956:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003958:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003960:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003964:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800396e:	4a34      	ldr	r2, [pc, #208]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6513      	str	r3, [r2, #80]	; 0x50
 8003974:	e003      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800398a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800398e:	2300      	movs	r3, #0
 8003990:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003994:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d056      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800399e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039a8:	d033      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ae:	d82c      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039b4:	d02f      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039ba:	d826      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c0:	d02b      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039c6:	d820      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039cc:	d012      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d2:	d81a      	bhi.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d022      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d115      	bne.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039e2:	3308      	adds	r3, #8
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa0e 	bl	8004e08 <RCCEx_PLL2_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039f2:	e015      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f8:	3328      	adds	r3, #40	; 0x28
 80039fa:	2101      	movs	r1, #1
 80039fc:	4618      	mov	r0, r3
 80039fe:	f001 fab5 	bl	8004f6c <RCCEx_PLL3_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a08:	e00a      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a12:	bf00      	nop
 8003a14:	e004      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e002      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1a:	bf00      	nop
 8003a1c:	e000      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10d      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a28:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a36:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6513      	str	r3, [r2, #80]	; 0x50
 8003a3c:	e006      	b.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a3e:	bf00      	nop
 8003a40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a62:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	d055      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a78:	d033      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a7e:	d82c      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a84:	d02f      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8a:	d826      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a90:	d02b      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a96:	d820      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a9c:	d012      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa2:	d81a      	bhi.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d022      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003aa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aac:	d115      	bne.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab2:	3308      	adds	r3, #8
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 f9a6 	bl	8004e08 <RCCEx_PLL2_Config>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ac2:	e015      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	3328      	adds	r3, #40	; 0x28
 8003aca:	2101      	movs	r1, #1
 8003acc:	4618      	mov	r0, r3
 8003ace:	f001 fa4d 	bl	8004f6c <RCCEx_PLL3_Config>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ad8:	e00a      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ae0:	e006      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e004      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e002      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aea:	bf00      	nop
 8003aec:	e000      	b.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003af8:	4ba3      	ldr	r3, [pc, #652]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003afc:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b08:	4a9f      	ldr	r2, [pc, #636]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b0e:	e003      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b20:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b2e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b32:	460b      	mov	r3, r1
 8003b34:	4313      	orrs	r3, r2
 8003b36:	d037      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b42:	d00e      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b48:	d816      	bhi.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d111      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b54:	4b8c      	ldr	r3, [pc, #560]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b58:	4a8b      	ldr	r2, [pc, #556]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b60:	e00f      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b66:	3308      	adds	r3, #8
 8003b68:	2101      	movs	r1, #1
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f001 f94c 	bl	8004e08 <RCCEx_PLL2_Config>
 8003b70:	4603      	mov	r3, r0
 8003b72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b76:	e004      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b7e:	e000      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d10a      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b8a:	4b7f      	ldr	r3, [pc, #508]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b8e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b98:	4a7b      	ldr	r2, [pc, #492]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9a:	430b      	orrs	r3, r1
 8003b9c:	6513      	str	r3, [r2, #80]	; 0x50
 8003b9e:	e003      	b.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ba4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003bbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003bc2:	460b      	mov	r3, r1
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	d039      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d81c      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003bd2:	a201      	add	r2, pc, #4	; (adr r2, 8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd8:	08003c15 	.word	0x08003c15
 8003bdc:	08003be9 	.word	0x08003be9
 8003be0:	08003bf7 	.word	0x08003bf7
 8003be4:	08003c15 	.word	0x08003c15
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b67      	ldr	r3, [pc, #412]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a66      	ldr	r2, [pc, #408]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bf4:	e00f      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f902 	bl	8004e08 <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c0a:	e004      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c12:	e000      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c1e:	4b5a      	ldr	r3, [pc, #360]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c22:	f023 0103 	bic.w	r1, r3, #3
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c2c:	4a56      	ldr	r2, [pc, #344]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c32:	e003      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c38:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c56:	460b      	mov	r3, r1
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f000 809f 	beq.w	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5e:	4b4b      	ldr	r3, [pc, #300]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a4a      	ldr	r2, [pc, #296]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c6a:	f7fe f89f 	bl	8001dac <HAL_GetTick>
 8003c6e:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c72:	e00b      	b.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c74:	f7fe f89a 	bl	8001dac <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	2b64      	cmp	r3, #100	; 0x64
 8003c82:	d903      	bls.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c8a:	e005      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c8c:	4b3f      	ldr	r3, [pc, #252]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ed      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d179      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ca0:	4b39      	ldr	r3, [pc, #228]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cac:	4053      	eors	r3, r2
 8003cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d015      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cbe:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	4a30      	ldr	r2, [pc, #192]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cce:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd2:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cda:	4a2b      	ldr	r2, [pc, #172]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d118      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f85c 	bl	8001dac <HAL_GetTick>
 8003cf4:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf8:	e00d      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cfa:	f7fe f857 	bl	8001dac <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003d04:	1ad2      	subs	r2, r2, r3
 8003d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003d14:	e005      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d0eb      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d129      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3a:	d10e      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d4c:	091a      	lsrs	r2, r3, #4
 8003d4e:	4b10      	ldr	r3, [pc, #64]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d54:	430b      	orrs	r3, r1
 8003d56:	6113      	str	r3, [r2, #16]
 8003d58:	e005      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d5a:	4b0b      	ldr	r3, [pc, #44]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d64:	6113      	str	r3, [r2, #16]
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d78:	430b      	orrs	r3, r1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	e00e      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d82:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003d86:	e009      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58024800 	.word	0x58024800
 8003d90:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f002 0301 	and.w	r3, r2, #1
 8003da8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003db2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	f000 8089 	beq.w	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dc4:	2b28      	cmp	r3, #40	; 0x28
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003ea9 	.word	0x08003ea9
 8003dd4:	08003ea1 	.word	0x08003ea1
 8003dd8:	08003ea1 	.word	0x08003ea1
 8003ddc:	08003ea1 	.word	0x08003ea1
 8003de0:	08003ea1 	.word	0x08003ea1
 8003de4:	08003ea1 	.word	0x08003ea1
 8003de8:	08003ea1 	.word	0x08003ea1
 8003dec:	08003ea1 	.word	0x08003ea1
 8003df0:	08003e75 	.word	0x08003e75
 8003df4:	08003ea1 	.word	0x08003ea1
 8003df8:	08003ea1 	.word	0x08003ea1
 8003dfc:	08003ea1 	.word	0x08003ea1
 8003e00:	08003ea1 	.word	0x08003ea1
 8003e04:	08003ea1 	.word	0x08003ea1
 8003e08:	08003ea1 	.word	0x08003ea1
 8003e0c:	08003ea1 	.word	0x08003ea1
 8003e10:	08003e8b 	.word	0x08003e8b
 8003e14:	08003ea1 	.word	0x08003ea1
 8003e18:	08003ea1 	.word	0x08003ea1
 8003e1c:	08003ea1 	.word	0x08003ea1
 8003e20:	08003ea1 	.word	0x08003ea1
 8003e24:	08003ea1 	.word	0x08003ea1
 8003e28:	08003ea1 	.word	0x08003ea1
 8003e2c:	08003ea1 	.word	0x08003ea1
 8003e30:	08003ea9 	.word	0x08003ea9
 8003e34:	08003ea1 	.word	0x08003ea1
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003ea1 	.word	0x08003ea1
 8003e40:	08003ea1 	.word	0x08003ea1
 8003e44:	08003ea1 	.word	0x08003ea1
 8003e48:	08003ea1 	.word	0x08003ea1
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003ea9 	.word	0x08003ea9
 8003e54:	08003ea1 	.word	0x08003ea1
 8003e58:	08003ea1 	.word	0x08003ea1
 8003e5c:	08003ea1 	.word	0x08003ea1
 8003e60:	08003ea1 	.word	0x08003ea1
 8003e64:	08003ea1 	.word	0x08003ea1
 8003e68:	08003ea1 	.word	0x08003ea1
 8003e6c:	08003ea1 	.word	0x08003ea1
 8003e70:	08003ea9 	.word	0x08003ea9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e78:	3308      	adds	r3, #8
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 ffc3 	bl	8004e08 <RCCEx_PLL2_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e88:	e00f      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8e:	3328      	adds	r3, #40	; 0x28
 8003e90:	2101      	movs	r1, #1
 8003e92:	4618      	mov	r0, r3
 8003e94:	f001 f86a 	bl	8004f6c <RCCEx_PLL3_Config>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e9e:	e004      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ea6:	e000      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eb2:	4bbf      	ldr	r3, [pc, #764]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb6:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ebe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec0:	4abb      	ldr	r2, [pc, #748]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ec6:	e003      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ecc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	f002 0302 	and.w	r3, r2, #2
 8003edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ee6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003eea:	460b      	mov	r3, r1
 8003eec:	4313      	orrs	r3, r2
 8003eee:	d041      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d824      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003efa:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f19 	.word	0x08003f19
 8003f08:	08003f2f 	.word	0x08003f2f
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2101      	movs	r1, #1
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 ff71 	bl	8004e08 <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	3328      	adds	r3, #40	; 0x28
 8003f34:	2101      	movs	r1, #1
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 f818 	bl	8004f6c <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10a      	bne.n	8003f6c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f56:	4b96      	ldr	r3, [pc, #600]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f5a:	f023 0107 	bic.w	r1, r3, #7
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f64:	4a92      	ldr	r2, [pc, #584]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f66:	430b      	orrs	r3, r1
 8003f68:	6553      	str	r3, [r2, #84]	; 0x54
 8003f6a:	e003      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f70:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f002 0304 	and.w	r3, r2, #4
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f84:	2300      	movs	r3, #0
 8003f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f8a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4313      	orrs	r3, r2
 8003f92:	d044      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9c:	2b05      	cmp	r3, #5
 8003f9e:	d825      	bhi.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003fa0:	a201      	add	r2, pc, #4	; (adr r2, 8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa6:	bf00      	nop
 8003fa8:	08003ff5 	.word	0x08003ff5
 8003fac:	08003fc1 	.word	0x08003fc1
 8003fb0:	08003fd7 	.word	0x08003fd7
 8003fb4:	08003ff5 	.word	0x08003ff5
 8003fb8:	08003ff5 	.word	0x08003ff5
 8003fbc:	08003ff5 	.word	0x08003ff5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ff1d 	bl	8004e08 <RCCEx_PLL2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00f      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fda:	3328      	adds	r3, #40	; 0x28
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 ffc4 	bl	8004f6c <RCCEx_PLL3_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fea:	e004      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ff4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ffe:	4b6c      	ldr	r3, [pc, #432]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f023 0107 	bic.w	r1, r3, #7
 8004006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400e:	4a68      	ldr	r2, [pc, #416]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004010:	430b      	orrs	r3, r1
 8004012:	6593      	str	r3, [r2, #88]	; 0x58
 8004014:	e003      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800401a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004026:	f002 0320 	and.w	r3, r2, #32
 800402a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800402e:	2300      	movs	r3, #0
 8004030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004034:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004038:	460b      	mov	r3, r1
 800403a:	4313      	orrs	r3, r2
 800403c:	d055      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004046:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800404a:	d033      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800404c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004050:	d82c      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004056:	d02f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800405c:	d826      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800405e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004062:	d02b      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004064:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004068:	d820      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800406a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800406e:	d012      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004074:	d81a      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004076:	2b00      	cmp	r3, #0
 8004078:	d022      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800407a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800407e:	d115      	bne.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004084:	3308      	adds	r3, #8
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f000 febd 	bl	8004e08 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004094:	e015      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800409a:	3328      	adds	r3, #40	; 0x28
 800409c:	2102      	movs	r1, #2
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ff64 	bl	8004f6c <RCCEx_PLL3_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040aa:	e00a      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040b2:	e006      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b4:	bf00      	nop
 80040b6:	e004      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b8:	bf00      	nop
 80040ba:	e002      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040bc:	bf00      	nop
 80040be:	e000      	b.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ca:	4b39      	ldr	r3, [pc, #228]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ce:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040da:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040dc:	430b      	orrs	r3, r1
 80040de:	6553      	str	r3, [r2, #84]	; 0x54
 80040e0:	e003      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80040f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004100:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004104:	460b      	mov	r3, r1
 8004106:	4313      	orrs	r3, r2
 8004108:	d058      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004112:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004116:	d033      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004118:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800411c:	d82c      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800411e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004122:	d02f      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004128:	d826      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800412a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800412e:	d02b      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004130:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004134:	d820      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413a:	d012      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800413c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004140:	d81a      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d115      	bne.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004150:	3308      	adds	r3, #8
 8004152:	2100      	movs	r1, #0
 8004154:	4618      	mov	r0, r3
 8004156:	f000 fe57 	bl	8004e08 <RCCEx_PLL2_Config>
 800415a:	4603      	mov	r3, r0
 800415c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004160:	e015      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	2102      	movs	r1, #2
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fefe 	bl	8004f6c <RCCEx_PLL3_Config>
 8004170:	4603      	mov	r3, r0
 8004172:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004176:	e00a      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800417e:	e006      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004180:	bf00      	nop
 8004182:	e004      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004184:	bf00      	nop
 8004186:	e002      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004188:	bf00      	nop
 800418a:	e000      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800418c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10e      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041a6:	4a02      	ldr	r2, [pc, #8]	; (80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6593      	str	r3, [r2, #88]	; 0x58
 80041ac:	e006      	b.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041ae:	bf00      	nop
 80041b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80041c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041cc:	2300      	movs	r3, #0
 80041ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041d2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80041d6:	460b      	mov	r3, r1
 80041d8:	4313      	orrs	r3, r2
 80041da:	d055      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041e8:	d033      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041ee:	d82c      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	d02f      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041fa:	d826      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041fc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004200:	d02b      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004202:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004206:	d820      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004208:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800420c:	d012      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800420e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004212:	d81a      	bhi.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d022      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421c:	d115      	bne.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004222:	3308      	adds	r3, #8
 8004224:	2100      	movs	r1, #0
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fdee 	bl	8004e08 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004232:	e015      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004238:	3328      	adds	r3, #40	; 0x28
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe95 	bl	8004f6c <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004248:	e00a      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004250:	e006      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004252:	bf00      	nop
 8004254:	e004      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004256:	bf00      	nop
 8004258:	e002      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425a:	bf00      	nop
 800425c:	e000      	b.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004268:	4ba1      	ldr	r3, [pc, #644]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800426c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004274:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004278:	4a9d      	ldr	r2, [pc, #628]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427a:	430b      	orrs	r3, r1
 800427c:	6593      	str	r3, [r2, #88]	; 0x58
 800427e:	e003      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 0308 	and.w	r3, r2, #8
 8004294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004298:	2300      	movs	r3, #0
 800429a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800429e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80042a2:	460b      	mov	r3, r1
 80042a4:	4313      	orrs	r3, r2
 80042a6:	d01e      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ba:	3328      	adds	r3, #40	; 0x28
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fe54 	bl	8004f6c <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042d0:	4b87      	ldr	r3, [pc, #540]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e0:	4a83      	ldr	r2, [pc, #524]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f002 0310 	and.w	r3, r2, #16
 80042f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042f6:	2300      	movs	r3, #0
 80042f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042fc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004300:	460b      	mov	r3, r1
 8004302:	4313      	orrs	r3, r2
 8004304:	d01e      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004306:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800430e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004312:	d10c      	bne.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004318:	3328      	adds	r3, #40	; 0x28
 800431a:	2102      	movs	r1, #2
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fe25 	bl	8004f6c <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800432e:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800433a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800433e:	4a6c      	ldr	r2, [pc, #432]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004340:	430b      	orrs	r3, r1
 8004342:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004354:	2300      	movs	r3, #0
 8004356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800435a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d03e      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800436c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004370:	d022      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004372:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004376:	d81b      	bhi.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800437c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004380:	d00b      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004382:	e015      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	3308      	adds	r3, #8
 800438a:	2100      	movs	r1, #0
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fd3b 	bl	8004e08 <RCCEx_PLL2_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004398:	e00f      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800439a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800439e:	3328      	adds	r3, #40	; 0x28
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fde2 	bl	8004f6c <RCCEx_PLL3_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043ae:	e004      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043b6:	e000      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043c2:	4b4b      	ldr	r3, [pc, #300]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043d2:	4a47      	ldr	r2, [pc, #284]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6593      	str	r3, [r2, #88]	; 0x58
 80043d8:	e003      	b.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ea:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80043ee:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f0:	2300      	movs	r3, #0
 80043f2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043f4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043f8:	460b      	mov	r3, r1
 80043fa:	4313      	orrs	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004406:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800440a:	d01f      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800440c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004410:	d818      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004416:	d003      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800441c:	d007      	beq.n	800442e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800441e:	e011      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004424:	4a32      	ldr	r2, [pc, #200]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004426:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800442c:	e00f      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004432:	3328      	adds	r3, #40	; 0x28
 8004434:	2101      	movs	r1, #1
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fd98 	bl	8004f6c <RCCEx_PLL3_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004442:	e004      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800444c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004456:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004468:	430b      	orrs	r3, r1
 800446a:	6553      	str	r3, [r2, #84]	; 0x54
 800446c:	e003      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004472:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004482:	673b      	str	r3, [r7, #112]	; 0x70
 8004484:	2300      	movs	r3, #0
 8004486:	677b      	str	r3, [r7, #116]	; 0x74
 8004488:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800448c:	460b      	mov	r3, r1
 800448e:	4313      	orrs	r3, r2
 8004490:	d034      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004492:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004498:	2b00      	cmp	r3, #0
 800449a:	d003      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800449c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a0:	d007      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80044a2:	e011      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b12      	ldr	r3, [pc, #72]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044b0:	e00e      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b6:	3308      	adds	r3, #8
 80044b8:	2102      	movs	r1, #2
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fca4 	bl	8004e08 <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e6:	4a02      	ldr	r2, [pc, #8]	; (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e8:	430b      	orrs	r3, r1
 80044ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044ec:	e006      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044ee:	bf00      	nop
 80044f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004504:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004508:	66bb      	str	r3, [r7, #104]	; 0x68
 800450a:	2300      	movs	r3, #0
 800450c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800450e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d00c      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	3328      	adds	r3, #40	; 0x28
 800451e:	2102      	movs	r1, #2
 8004520:	4618      	mov	r0, r3
 8004522:	f000 fd23 	bl	8004f6c <RCCEx_PLL3_Config>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800453e:	663b      	str	r3, [r7, #96]	; 0x60
 8004540:	2300      	movs	r3, #0
 8004542:	667b      	str	r3, [r7, #100]	; 0x64
 8004544:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004548:	460b      	mov	r3, r1
 800454a:	4313      	orrs	r3, r2
 800454c:	d038      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800454e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004556:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800455a:	d018      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800455c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004560:	d811      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004562:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004566:	d014      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d80b      	bhi.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d011      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004576:	d106      	bne.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004578:	4bc3      	ldr	r3, [pc, #780]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457c:	4ac2      	ldr	r2, [pc, #776]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004584:	e008      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800458c:	e004      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004598:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045a0:	4bb9      	ldr	r3, [pc, #740]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80045a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045b0:	4ab5      	ldr	r2, [pc, #724]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b2:	430b      	orrs	r3, r1
 80045b4:	6553      	str	r3, [r2, #84]	; 0x54
 80045b6:	e003      	b.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045bc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80045cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80045ce:	2300      	movs	r3, #0
 80045d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045d2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80045d6:	460b      	mov	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045dc:	4baa      	ldr	r3, [pc, #680]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4aa7      	ldr	r2, [pc, #668]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ec:	430b      	orrs	r3, r1
 80045ee:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80045fc:	653b      	str	r3, [r7, #80]	; 0x50
 80045fe:	2300      	movs	r3, #0
 8004600:	657b      	str	r3, [r7, #84]	; 0x54
 8004602:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004606:	460b      	mov	r3, r1
 8004608:	4313      	orrs	r3, r2
 800460a:	d00a      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800460c:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800461c:	4a9a      	ldr	r2, [pc, #616]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461e:	430b      	orrs	r3, r1
 8004620:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004630:	2300      	movs	r3, #0
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004638:	460b      	mov	r3, r1
 800463a:	4313      	orrs	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800463e:	4b92      	ldr	r3, [pc, #584]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800464a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800464c:	4a8e      	ldr	r2, [pc, #568]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464e:	430b      	orrs	r3, r1
 8004650:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800465e:	643b      	str	r3, [r7, #64]	; 0x40
 8004660:	2300      	movs	r3, #0
 8004662:	647b      	str	r3, [r7, #68]	; 0x44
 8004664:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004668:	460b      	mov	r3, r1
 800466a:	4313      	orrs	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800466e:	4b86      	ldr	r3, [pc, #536]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	4a85      	ldr	r2, [pc, #532]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004678:	6113      	str	r3, [r2, #16]
 800467a:	4b83      	ldr	r3, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800467c:	6919      	ldr	r1, [r3, #16]
 800467e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004682:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004686:	4a80      	ldr	r2, [pc, #512]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004688:	430b      	orrs	r3, r1
 800468a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800468c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004694:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
 800469a:	2300      	movs	r3, #0
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800469e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80046a2:	460b      	mov	r3, r1
 80046a4:	4313      	orrs	r3, r2
 80046a6:	d009      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046a8:	4b77      	ldr	r3, [pc, #476]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b6:	4a74      	ldr	r2, [pc, #464]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b8:	430b      	orrs	r3, r1
 80046ba:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ca:	2300      	movs	r3, #0
 80046cc:	637b      	str	r3, [r7, #52]	; 0x34
 80046ce:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80046d2:	460b      	mov	r3, r1
 80046d4:	4313      	orrs	r3, r2
 80046d6:	d00a      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d8:	4b6b      	ldr	r3, [pc, #428]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046dc:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80046e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046e8:	4a67      	ldr	r2, [pc, #412]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	2100      	movs	r1, #0
 80046f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004700:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d011      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800470a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800470e:	3308      	adds	r3, #8
 8004710:	2100      	movs	r1, #0
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fb78 	bl	8004e08 <RCCEx_PLL2_Config>
 8004718:	4603      	mov	r3, r0
 800471a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800471e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800472a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800472e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	2100      	movs	r1, #0
 8004738:	6239      	str	r1, [r7, #32]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	627b      	str	r3, [r7, #36]	; 0x24
 8004740:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004744:	460b      	mov	r3, r1
 8004746:	4313      	orrs	r3, r2
 8004748:	d011      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800474e:	3308      	adds	r3, #8
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fb58 	bl	8004e08 <RCCEx_PLL2_Config>
 8004758:	4603      	mov	r3, r0
 800475a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800475e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800476a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800476e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	2100      	movs	r1, #0
 8004778:	61b9      	str	r1, [r7, #24]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004784:	460b      	mov	r3, r1
 8004786:	4313      	orrs	r3, r2
 8004788:	d011      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800478e:	3308      	adds	r3, #8
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb38 	bl	8004e08 <RCCEx_PLL2_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800479e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b6:	2100      	movs	r1, #0
 80047b8:	6139      	str	r1, [r7, #16]
 80047ba:	f003 0308 	and.w	r3, r3, #8
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047c4:	460b      	mov	r3, r1
 80047c6:	4313      	orrs	r3, r2
 80047c8:	d011      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047ce:	3328      	adds	r3, #40	; 0x28
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fbca 	bl	8004f6c <RCCEx_PLL3_Config>
 80047d8:	4603      	mov	r3, r0
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80047de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	2100      	movs	r1, #0
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004804:	460b      	mov	r3, r1
 8004806:	4313      	orrs	r3, r2
 8004808:	d011      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	3328      	adds	r3, #40	; 0x28
 8004810:	2101      	movs	r1, #1
 8004812:	4618      	mov	r0, r3
 8004814:	f000 fbaa 	bl	8004f6c <RCCEx_PLL3_Config>
 8004818:	4603      	mov	r3, r0
 800481a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004826:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800482a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	2100      	movs	r1, #0
 8004838:	6039      	str	r1, [r7, #0]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004844:	460b      	mov	r3, r1
 8004846:	4313      	orrs	r3, r2
 8004848:	d011      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800484a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800484e:	3328      	adds	r3, #40	; 0x28
 8004850:	2102      	movs	r1, #2
 8004852:	4618      	mov	r0, r3
 8004854:	f000 fb8a 	bl	8004f6c <RCCEx_PLL3_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800485e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004866:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800486a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800486e:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004876:	2300      	movs	r3, #0
 8004878:	e000      	b.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
}
 800487c:	4618      	mov	r0, r3
 800487e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004882:	46bd      	mov	sp, r7
 8004884:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004888:	58024400 	.word	0x58024400

0800488c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004890:	f7fe fd96 	bl	80033c0 <HAL_RCC_GetHCLKFreq>
 8004894:	4602      	mov	r2, r0
 8004896:	4b06      	ldr	r3, [pc, #24]	; (80048b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	f003 0307 	and.w	r3, r3, #7
 80048a0:	4904      	ldr	r1, [pc, #16]	; (80048b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80048a2:	5ccb      	ldrb	r3, [r1, r3]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	58024400 	.word	0x58024400
 80048b4:	08007d64 	.word	0x08007d64

080048b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	; 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c0:	4ba1      	ldr	r3, [pc, #644]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80048ca:	4b9f      	ldr	r3, [pc, #636]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ce:	0b1b      	lsrs	r3, r3, #12
 80048d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80048d6:	4b9c      	ldr	r3, [pc, #624]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048da:	091b      	lsrs	r3, r3, #4
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80048e2:	4b99      	ldr	r3, [pc, #612]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8111 	beq.w	8004b28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f000 8083 	beq.w	8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b02      	cmp	r3, #2
 8004912:	f200 80a1 	bhi.w	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d056      	beq.n	80049d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004922:	e099      	b.n	8004a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004924:	4b88      	ldr	r3, [pc, #544]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02d      	beq.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004930:	4b85      	ldr	r3, [pc, #532]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	4a84      	ldr	r2, [pc, #528]	; (8004b4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b7b      	ldr	r3, [pc, #492]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800498a:	e087      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ce:	e065      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	e043      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a56:	e021      	b.n	8004a9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b37      	ldr	r3, [pc, #220]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	0a5b      	lsrs	r3, r3, #9
 8004aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac2:	ee17 2a90 	vmov	r2, s15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004aca:	4b1f      	ldr	r3, [pc, #124]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004adc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af0:	ee17 2a90 	vmov	r2, s15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004af8:	4b13      	ldr	r3, [pc, #76]	; (8004b48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
}
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	; 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	03d09000 	.word	0x03d09000
 8004b50:	46000000 	.word	0x46000000
 8004b54:	4c742400 	.word	0x4c742400
 8004b58:	4a742400 	.word	0x4a742400
 8004b5c:	4bbebc20 	.word	0x4bbebc20

08004b60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b68:	4ba1      	ldr	r3, [pc, #644]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b72:	4b9f      	ldr	r3, [pc, #636]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b76:	0d1b      	lsrs	r3, r3, #20
 8004b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b7e:	4b9c      	ldr	r3, [pc, #624]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b82:	0a1b      	lsrs	r3, r3, #8
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b8a:	4b99      	ldr	r3, [pc, #612]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	fb02 f303 	mul.w	r3, r2, r3
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	f000 8111 	beq.w	8004dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	f000 8083 	beq.w	8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f200 80a1 	bhi.w	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d056      	beq.n	8004c78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004bca:	e099      	b.n	8004d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bcc:	4b88      	ldr	r3, [pc, #544]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d02d      	beq.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd8:	4b85      	ldr	r3, [pc, #532]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	08db      	lsrs	r3, r3, #3
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	4a84      	ldr	r2, [pc, #528]	; (8004df4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004be4:	fa22 f303 	lsr.w	r3, r2, r3
 8004be8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	ee07 3a90 	vmov	s15, r3
 8004bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c02:	4b7b      	ldr	r3, [pc, #492]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c32:	e087      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004dfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c46:	4b6a      	ldr	r3, [pc, #424]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c76:	e065      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c8a:	4b59      	ldr	r3, [pc, #356]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cba:	e043      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	ee07 3a90 	vmov	s15, r3
 8004cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004e04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cce:	4b48      	ldr	r3, [pc, #288]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ce2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cfe:	e021      	b.n	8004d44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	ee07 3a90 	vmov	s15, r3
 8004d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004e00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d12:	4b37      	ldr	r3, [pc, #220]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004df8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004d44:	4b2a      	ldr	r3, [pc, #168]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	0a5b      	lsrs	r3, r3, #9
 8004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4e:	ee07 3a90 	vmov	s15, r3
 8004d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d6a:	ee17 2a90 	vmov	r2, s15
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d72:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	0c1b      	lsrs	r3, r3, #16
 8004d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7c:	ee07 3a90 	vmov	s15, r3
 8004d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d98:	ee17 2a90 	vmov	r2, s15
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc6:	ee17 2a90 	vmov	r2, s15
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004dce:	e008      	b.n	8004de2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
}
 8004de2:	bf00      	nop
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	58024400 	.word	0x58024400
 8004df4:	03d09000 	.word	0x03d09000
 8004df8:	46000000 	.word	0x46000000
 8004dfc:	4c742400 	.word	0x4c742400
 8004e00:	4a742400 	.word	0x4a742400
 8004e04:	4bbebc20 	.word	0x4bbebc20

08004e08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e16:	4b53      	ldr	r3, [pc, #332]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1a:	f003 0303 	and.w	r3, r3, #3
 8004e1e:	2b03      	cmp	r3, #3
 8004e20:	d101      	bne.n	8004e26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e099      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e26:	4b4f      	ldr	r3, [pc, #316]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a4e      	ldr	r2, [pc, #312]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e32:	f7fc ffbb 	bl	8001dac <HAL_GetTick>
 8004e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e3a:	f7fc ffb7 	bl	8001dac <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e086      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e4c:	4b45      	ldr	r3, [pc, #276]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	031b      	lsls	r3, r3, #12
 8004e66:	493f      	ldr	r1, [pc, #252]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	628b      	str	r3, [r1, #40]	; 0x28
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	025b      	lsls	r3, r3, #9
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	431a      	orrs	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	041b      	lsls	r3, r3, #16
 8004e8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e8e:	431a      	orrs	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	3b01      	subs	r3, #1
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e9c:	4931      	ldr	r1, [pc, #196]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004ea2:	4b30      	ldr	r3, [pc, #192]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	492d      	ldr	r1, [pc, #180]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004eb4:	4b2b      	ldr	r3, [pc, #172]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb8:	f023 0220 	bic.w	r2, r3, #32
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	4928      	ldr	r1, [pc, #160]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004ec6:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	4a26      	ldr	r2, [pc, #152]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	f023 0310 	bic.w	r3, r3, #16
 8004ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ed4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ed6:	4b24      	ldr	r3, [pc, #144]	; (8004f68 <RCCEx_PLL2_Config+0x160>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	69d2      	ldr	r2, [r2, #28]
 8004ede:	00d2      	lsls	r2, r2, #3
 8004ee0:	4920      	ldr	r1, [pc, #128]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	4a1e      	ldr	r2, [pc, #120]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004eec:	f043 0310 	orr.w	r3, r3, #16
 8004ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ef8:	4b1a      	ldr	r3, [pc, #104]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f04:	e00f      	b.n	8004f26 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d106      	bne.n	8004f1a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f0c:	4b15      	ldr	r3, [pc, #84]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a14      	ldr	r2, [pc, #80]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f18:	e005      	b.n	8004f26 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f1a:	4b12      	ldr	r3, [pc, #72]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1e:	4a11      	ldr	r2, [pc, #68]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f26:	4b0f      	ldr	r3, [pc, #60]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f32:	f7fc ff3b 	bl	8001dac <HAL_GetTick>
 8004f36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f38:	e008      	b.n	8004f4c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f3a:	f7fc ff37 	bl	8001dac <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e006      	b.n	8004f5a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f4c:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <RCCEx_PLL2_Config+0x15c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0f0      	beq.n	8004f3a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	58024400 	.word	0x58024400
 8004f68:	ffff0007 	.word	0xffff0007

08004f6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f7a:	4b53      	ldr	r3, [pc, #332]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	f003 0303 	and.w	r3, r3, #3
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	d101      	bne.n	8004f8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e099      	b.n	80050be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f8a:	4b4f      	ldr	r3, [pc, #316]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a4e      	ldr	r2, [pc, #312]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f96:	f7fc ff09 	bl	8001dac <HAL_GetTick>
 8004f9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f9c:	e008      	b.n	8004fb0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f9e:	f7fc ff05 	bl	8001dac <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e086      	b.n	80050be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004fb0:	4b45      	ldr	r3, [pc, #276]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004fbc:	4b42      	ldr	r3, [pc, #264]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	051b      	lsls	r3, r3, #20
 8004fca:	493f      	ldr	r1, [pc, #252]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	628b      	str	r3, [r1, #40]	; 0x28
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	025b      	lsls	r3, r3, #9
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	041b      	lsls	r3, r3, #16
 8004fee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005000:	4931      	ldr	r1, [pc, #196]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005002:	4313      	orrs	r3, r2
 8005004:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005006:	4b30      	ldr	r3, [pc, #192]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	492d      	ldr	r1, [pc, #180]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005014:	4313      	orrs	r3, r2
 8005016:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005018:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800501a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	4928      	ldr	r1, [pc, #160]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005026:	4313      	orrs	r3, r2
 8005028:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800502a:	4b27      	ldr	r3, [pc, #156]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800502c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502e:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005030:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005034:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <RCCEx_PLL3_Config+0x160>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	69d2      	ldr	r2, [r2, #28]
 8005042:	00d2      	lsls	r2, r2, #3
 8005044:	4920      	ldr	r1, [pc, #128]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005046:	4313      	orrs	r3, r2
 8005048:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800504a:	4b1f      	ldr	r3, [pc, #124]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800504c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005054:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800505c:	4b1a      	ldr	r3, [pc, #104]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005062:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005066:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005068:	e00f      	b.n	800508a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d106      	bne.n	800507e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005070:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005076:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800507a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800507c:	e005      	b.n	800508a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800507e:	4b12      	ldr	r3, [pc, #72]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005082:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005084:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005088:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800508a:	4b0f      	ldr	r3, [pc, #60]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a0e      	ldr	r2, [pc, #56]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 8005090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005094:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fc fe89 	bl	8001dac <HAL_GetTick>
 800509a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800509c:	e008      	b.n	80050b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800509e:	f7fc fe85 	bl	8001dac <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e006      	b.n	80050be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <RCCEx_PLL3_Config+0x15c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0f0      	beq.n	800509e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	58024400 	.word	0x58024400
 80050cc:	ffff0007 	.word	0xffff0007

080050d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e10f      	b.n	8005302 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a87      	ldr	r2, [pc, #540]	; (800530c <HAL_SPI_Init+0x23c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d00f      	beq.n	8005112 <HAL_SPI_Init+0x42>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a86      	ldr	r2, [pc, #536]	; (8005310 <HAL_SPI_Init+0x240>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00a      	beq.n	8005112 <HAL_SPI_Init+0x42>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a84      	ldr	r2, [pc, #528]	; (8005314 <HAL_SPI_Init+0x244>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d005      	beq.n	8005112 <HAL_SPI_Init+0x42>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d901      	bls.n	8005112 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e0f7      	b.n	8005302 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f900 	bl	8005318 <SPI_GetPacketSize>
 8005118:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a7b      	ldr	r2, [pc, #492]	; (800530c <HAL_SPI_Init+0x23c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00c      	beq.n	800513e <HAL_SPI_Init+0x6e>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a79      	ldr	r2, [pc, #484]	; (8005310 <HAL_SPI_Init+0x240>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d007      	beq.n	800513e <HAL_SPI_Init+0x6e>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a78      	ldr	r2, [pc, #480]	; (8005314 <HAL_SPI_Init+0x244>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d002      	beq.n	800513e <HAL_SPI_Init+0x6e>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2b08      	cmp	r3, #8
 800513c:	d811      	bhi.n	8005162 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005142:	4a72      	ldr	r2, [pc, #456]	; (800530c <HAL_SPI_Init+0x23c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d009      	beq.n	800515c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a70      	ldr	r2, [pc, #448]	; (8005310 <HAL_SPI_Init+0x240>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_SPI_Init+0x8c>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a6f      	ldr	r2, [pc, #444]	; (8005314 <HAL_SPI_Init+0x244>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d104      	bne.n	8005166 <HAL_SPI_Init+0x96>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2b10      	cmp	r3, #16
 8005160:	d901      	bls.n	8005166 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e0cd      	b.n	8005302 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fc f912 	bl	80013a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80051a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051ac:	d119      	bne.n	80051e2 <HAL_SPI_Init+0x112>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051b6:	d103      	bne.n	80051c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d10c      	bne.n	80051e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80051cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d0:	d107      	bne.n	80051e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00f      	beq.n	800520e <HAL_SPI_Init+0x13e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d90b      	bls.n	800520e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e007      	b.n	800521e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69da      	ldr	r2, [r3, #28]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005226:	431a      	orrs	r2, r3
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	ea42 0103 	orr.w	r1, r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	431a      	orrs	r2, r3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	431a      	orrs	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800527e:	ea42 0103 	orr.w	r1, r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d113      	bne.n	80052be <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052bc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0201 	bic.w	r2, r2, #1
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40013000 	.word	0x40013000
 8005310:	40003800 	.word	0x40003800
 8005314:	40003c00 	.word	0x40003c00

08005318 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	3301      	adds	r3, #1
 8005328:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	3307      	adds	r3, #7
 8005336:	08db      	lsrs	r3, r3, #3
 8005338:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	fb02 f303 	mul.w	r3, r2, r3
}
 8005342:	4618      	mov	r0, r3
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr

0800534e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b082      	sub	sp, #8
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e049      	b.n	80053f4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fc fa03 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	3304      	adds	r3, #4
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f000 fd95 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3708      	adds	r7, #8
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b01      	cmp	r3, #1
 800540e:	d001      	beq.n	8005414 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e054      	b.n	80054be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f042 0201 	orr.w	r2, r2, #1
 800542a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a26      	ldr	r2, [pc, #152]	; (80054cc <HAL_TIM_Base_Start_IT+0xd0>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d022      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543e:	d01d      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a22      	ldr	r2, [pc, #136]	; (80054d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d018      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a21      	ldr	r2, [pc, #132]	; (80054d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1f      	ldr	r2, [pc, #124]	; (80054d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d00e      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1e      	ldr	r2, [pc, #120]	; (80054dc <HAL_TIM_Base_Start_IT+0xe0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a1c      	ldr	r2, [pc, #112]	; (80054e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIM_Base_Start_IT+0x80>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1b      	ldr	r2, [pc, #108]	; (80054e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d115      	bne.n	80054a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	689a      	ldr	r2, [r3, #8]
 8005482:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_TIM_Base_Start_IT+0xec>)
 8005484:	4013      	ands	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2b06      	cmp	r3, #6
 800548c:	d015      	beq.n	80054ba <HAL_TIM_Base_Start_IT+0xbe>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005494:	d011      	beq.n	80054ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a6:	e008      	b.n	80054ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e000      	b.n	80054bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40010000 	.word	0x40010000
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800
 80054d8:	40000c00 	.word	0x40000c00
 80054dc:	40010400 	.word	0x40010400
 80054e0:	40001800 	.word	0x40001800
 80054e4:	40014000 	.word	0x40014000
 80054e8:	00010007 	.word	0x00010007

080054ec <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68da      	ldr	r2, [r3, #12]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f022 0201 	bic.w	r2, r2, #1
 8005502:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6a1a      	ldr	r2, [r3, #32]
 800550a:	f241 1311 	movw	r3, #4369	; 0x1111
 800550e:	4013      	ands	r3, r2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10f      	bne.n	8005534 <HAL_TIM_Base_Stop_IT+0x48>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6a1a      	ldr	r2, [r3, #32]
 800551a:	f240 4344 	movw	r3, #1092	; 0x444
 800551e:	4013      	ands	r3, r2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d107      	bne.n	8005534 <HAL_TIM_Base_Stop_IT+0x48>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e049      	b.n	80055f0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7fc f961 	bl	8001838 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f000 fc97 	bl	8005ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <HAL_TIM_PWM_Start+0x24>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b01      	cmp	r3, #1
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	e03c      	b.n	8005696 <HAL_TIM_PWM_Start+0x9e>
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d109      	bne.n	8005636 <HAL_TIM_PWM_Start+0x3e>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b01      	cmp	r3, #1
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2db      	uxtb	r3, r3
 8005634:	e02f      	b.n	8005696 <HAL_TIM_PWM_Start+0x9e>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b08      	cmp	r3, #8
 800563a:	d109      	bne.n	8005650 <HAL_TIM_PWM_Start+0x58>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b01      	cmp	r3, #1
 8005646:	bf14      	ite	ne
 8005648:	2301      	movne	r3, #1
 800564a:	2300      	moveq	r3, #0
 800564c:	b2db      	uxtb	r3, r3
 800564e:	e022      	b.n	8005696 <HAL_TIM_PWM_Start+0x9e>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b0c      	cmp	r3, #12
 8005654:	d109      	bne.n	800566a <HAL_TIM_PWM_Start+0x72>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800565c:	b2db      	uxtb	r3, r3
 800565e:	2b01      	cmp	r3, #1
 8005660:	bf14      	ite	ne
 8005662:	2301      	movne	r3, #1
 8005664:	2300      	moveq	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	e015      	b.n	8005696 <HAL_TIM_PWM_Start+0x9e>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b10      	cmp	r3, #16
 800566e:	d109      	bne.n	8005684 <HAL_TIM_PWM_Start+0x8c>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	bf14      	ite	ne
 800567c:	2301      	movne	r3, #1
 800567e:	2300      	moveq	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	e008      	b.n	8005696 <HAL_TIM_PWM_Start+0x9e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e0a1      	b.n	80057e2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d104      	bne.n	80056ae <HAL_TIM_PWM_Start+0xb6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056ac:	e023      	b.n	80056f6 <HAL_TIM_PWM_Start+0xfe>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0xc6>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056bc:	e01b      	b.n	80056f6 <HAL_TIM_PWM_Start+0xfe>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0xd6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	e013      	b.n	80056f6 <HAL_TIM_PWM_Start+0xfe>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b0c      	cmp	r3, #12
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0xe6>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056dc:	e00b      	b.n	80056f6 <HAL_TIM_PWM_Start+0xfe>
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d104      	bne.n	80056ee <HAL_TIM_PWM_Start+0xf6>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056ec:	e003      	b.n	80056f6 <HAL_TIM_PWM_Start+0xfe>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	6839      	ldr	r1, [r7, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 ffea 	bl	80066d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a38      	ldr	r2, [pc, #224]	; (80057ec <HAL_TIM_PWM_Start+0x1f4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d013      	beq.n	8005736 <HAL_TIM_PWM_Start+0x13e>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a37      	ldr	r2, [pc, #220]	; (80057f0 <HAL_TIM_PWM_Start+0x1f8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d00e      	beq.n	8005736 <HAL_TIM_PWM_Start+0x13e>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <HAL_TIM_PWM_Start+0x1fc>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d009      	beq.n	8005736 <HAL_TIM_PWM_Start+0x13e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a34      	ldr	r2, [pc, #208]	; (80057f8 <HAL_TIM_PWM_Start+0x200>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d004      	beq.n	8005736 <HAL_TIM_PWM_Start+0x13e>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a32      	ldr	r2, [pc, #200]	; (80057fc <HAL_TIM_PWM_Start+0x204>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_TIM_PWM_Start+0x142>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <HAL_TIM_PWM_Start+0x144>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800574e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <HAL_TIM_PWM_Start+0x1f4>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d022      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d01d      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <HAL_TIM_PWM_Start+0x208>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d018      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a24      	ldr	r2, [pc, #144]	; (8005804 <HAL_TIM_PWM_Start+0x20c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a22      	ldr	r2, [pc, #136]	; (8005808 <HAL_TIM_PWM_Start+0x210>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d00e      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_TIM_PWM_Start+0x1f8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d009      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1e      	ldr	r2, [pc, #120]	; (800580c <HAL_TIM_PWM_Start+0x214>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d004      	beq.n	80057a0 <HAL_TIM_PWM_Start+0x1a8>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a16      	ldr	r2, [pc, #88]	; (80057f4 <HAL_TIM_PWM_Start+0x1fc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d115      	bne.n	80057cc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	689a      	ldr	r2, [r3, #8]
 80057a6:	4b1a      	ldr	r3, [pc, #104]	; (8005810 <HAL_TIM_PWM_Start+0x218>)
 80057a8:	4013      	ands	r3, r2
 80057aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b06      	cmp	r3, #6
 80057b0:	d015      	beq.n	80057de <HAL_TIM_PWM_Start+0x1e6>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b8:	d011      	beq.n	80057de <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f042 0201 	orr.w	r2, r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ca:	e008      	b.n	80057de <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]
 80057dc:	e000      	b.n	80057e0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40010400 	.word	0x40010400
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800
 8005808:	40000c00 	.word	0x40000c00
 800580c:	40001800 	.word	0x40001800
 8005810:	00010007 	.word	0x00010007

08005814 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b02      	cmp	r3, #2
 8005828:	d122      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	2b02      	cmp	r3, #2
 8005836:	d11b      	bne.n	8005870 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0202 	mvn.w	r2, #2
 8005840:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fb12 	bl	8005e80 <HAL_TIM_IC_CaptureCallback>
 800585c:	e005      	b.n	800586a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 fb04 	bl	8005e6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 fb15 	bl	8005e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f003 0304 	and.w	r3, r3, #4
 800587a:	2b04      	cmp	r3, #4
 800587c:	d122      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b04      	cmp	r3, #4
 800588a:	d11b      	bne.n	80058c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f06f 0204 	mvn.w	r2, #4
 8005894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2202      	movs	r2, #2
 800589a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d003      	beq.n	80058b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fae8 	bl	8005e80 <HAL_TIM_IC_CaptureCallback>
 80058b0:	e005      	b.n	80058be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fada 	bl	8005e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 faeb 	bl	8005e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	f003 0308 	and.w	r3, r3, #8
 80058ce:	2b08      	cmp	r3, #8
 80058d0:	d122      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f003 0308 	and.w	r3, r3, #8
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d11b      	bne.n	8005918 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f06f 0208 	mvn.w	r2, #8
 80058e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	69db      	ldr	r3, [r3, #28]
 80058f6:	f003 0303 	and.w	r3, r3, #3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fabe 	bl	8005e80 <HAL_TIM_IC_CaptureCallback>
 8005904:	e005      	b.n	8005912 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fab0 	bl	8005e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fac1 	bl	8005e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	f003 0310 	and.w	r3, r3, #16
 8005922:	2b10      	cmp	r3, #16
 8005924:	d122      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 0310 	and.w	r3, r3, #16
 8005930:	2b10      	cmp	r3, #16
 8005932:	d11b      	bne.n	800596c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f06f 0210 	mvn.w	r2, #16
 800593c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2208      	movs	r2, #8
 8005942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f000 fa94 	bl	8005e80 <HAL_TIM_IC_CaptureCallback>
 8005958:	e005      	b.n	8005966 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fa86 	bl	8005e6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fa97 	bl	8005e94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b01      	cmp	r3, #1
 8005978:	d10e      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d107      	bne.n	8005998 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0201 	mvn.w	r2, #1
 8005990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fb fcb2 	bl	80012fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059a2:	2b80      	cmp	r3, #128	; 0x80
 80059a4:	d10e      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059b0:	2b80      	cmp	r3, #128	; 0x80
 80059b2:	d107      	bne.n	80059c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f001 f888 	bl	8006ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	691b      	ldr	r3, [r3, #16]
 80059ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059d2:	d10e      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059de:	2b80      	cmp	r3, #128	; 0x80
 80059e0:	d107      	bne.n	80059f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80059ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 f87b 	bl	8006ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059fc:	2b40      	cmp	r3, #64	; 0x40
 80059fe:	d10e      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0a:	2b40      	cmp	r3, #64	; 0x40
 8005a0c:	d107      	bne.n	8005a1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa45 	bl	8005ea8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	d10e      	bne.n	8005a4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	f003 0320 	and.w	r3, r3, #32
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	d107      	bne.n	8005a4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f06f 0220 	mvn.w	r2, #32
 8005a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f001 f83b 	bl	8006ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a4a:	bf00      	nop
 8005a4c:	3708      	adds	r7, #8
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
	...

08005a54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e0ff      	b.n	8005c72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2b14      	cmp	r3, #20
 8005a7e:	f200 80f0 	bhi.w	8005c62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a82:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a88:	08005add 	.word	0x08005add
 8005a8c:	08005c63 	.word	0x08005c63
 8005a90:	08005c63 	.word	0x08005c63
 8005a94:	08005c63 	.word	0x08005c63
 8005a98:	08005b1d 	.word	0x08005b1d
 8005a9c:	08005c63 	.word	0x08005c63
 8005aa0:	08005c63 	.word	0x08005c63
 8005aa4:	08005c63 	.word	0x08005c63
 8005aa8:	08005b5f 	.word	0x08005b5f
 8005aac:	08005c63 	.word	0x08005c63
 8005ab0:	08005c63 	.word	0x08005c63
 8005ab4:	08005c63 	.word	0x08005c63
 8005ab8:	08005b9f 	.word	0x08005b9f
 8005abc:	08005c63 	.word	0x08005c63
 8005ac0:	08005c63 	.word	0x08005c63
 8005ac4:	08005c63 	.word	0x08005c63
 8005ac8:	08005be1 	.word	0x08005be1
 8005acc:	08005c63 	.word	0x08005c63
 8005ad0:	08005c63 	.word	0x08005c63
 8005ad4:	08005c63 	.word	0x08005c63
 8005ad8:	08005c21 	.word	0x08005c21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fa84 	bl	8005ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	699a      	ldr	r2, [r3, #24]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0208 	orr.w	r2, r2, #8
 8005af6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	699a      	ldr	r2, [r3, #24]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0204 	bic.w	r2, r2, #4
 8005b06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	6999      	ldr	r1, [r3, #24]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	691a      	ldr	r2, [r3, #16]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	619a      	str	r2, [r3, #24]
      break;
 8005b1a:	e0a5      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f000 faf4 	bl	8006110 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	699a      	ldr	r2, [r3, #24]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	6999      	ldr	r1, [r3, #24]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	619a      	str	r2, [r3, #24]
      break;
 8005b5c:	e084      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 fb5d 	bl	8006224 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	69da      	ldr	r2, [r3, #28]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 0208 	orr.w	r2, r2, #8
 8005b78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	69da      	ldr	r2, [r3, #28]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0204 	bic.w	r2, r2, #4
 8005b88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	69d9      	ldr	r1, [r3, #28]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	691a      	ldr	r2, [r3, #16]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	61da      	str	r2, [r3, #28]
      break;
 8005b9c:	e064      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68b9      	ldr	r1, [r7, #8]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f000 fbc5 	bl	8006334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	69da      	ldr	r2, [r3, #28]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69da      	ldr	r2, [r3, #28]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	69d9      	ldr	r1, [r3, #28]
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	021a      	lsls	r2, r3, #8
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	61da      	str	r2, [r3, #28]
      break;
 8005bde:	e043      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f000 fc0e 	bl	8006408 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0208 	orr.w	r2, r2, #8
 8005bfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0204 	bic.w	r2, r2, #4
 8005c0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c1e:	e023      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 fc52 	bl	80064d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	021a      	lsls	r2, r3, #8
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c60:	e002      	b.n	8005c68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	75fb      	strb	r3, [r7, #23]
      break;
 8005c66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_TIM_ConfigClockSource+0x1c>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e0dc      	b.n	8005e52 <HAL_TIM_ConfigClockSource+0x1d6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	4b6a      	ldr	r3, [pc, #424]	; (8005e5c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a64      	ldr	r2, [pc, #400]	; (8005e60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f000 80a9 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cd4:	4a62      	ldr	r2, [pc, #392]	; (8005e60 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	f200 80ae 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cdc:	4a61      	ldr	r2, [pc, #388]	; (8005e64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	f000 80a1 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ce4:	4a5f      	ldr	r2, [pc, #380]	; (8005e64 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	f200 80a6 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cec:	4a5e      	ldr	r2, [pc, #376]	; (8005e68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f000 8099 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005cf4:	4a5c      	ldr	r2, [pc, #368]	; (8005e68 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f200 809e 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005cfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d00:	f000 8091 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005d08:	f200 8096 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d10:	f000 8089 	beq.w	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d18:	f200 808e 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d20:	d03e      	beq.n	8005da0 <HAL_TIM_ConfigClockSource+0x124>
 8005d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d26:	f200 8087 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	f000 8086 	beq.w	8005e3e <HAL_TIM_ConfigClockSource+0x1c2>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d87f      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d38:	2b70      	cmp	r3, #112	; 0x70
 8005d3a:	d01a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xf6>
 8005d3c:	2b70      	cmp	r3, #112	; 0x70
 8005d3e:	d87b      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d40:	2b60      	cmp	r3, #96	; 0x60
 8005d42:	d050      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x16a>
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d877      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d48:	2b50      	cmp	r3, #80	; 0x50
 8005d4a:	d03c      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0x14a>
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d873      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d058      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x18a>
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d86f      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d58:	2b30      	cmp	r3, #48	; 0x30
 8005d5a:	d064      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d86b      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d060      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d867      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05c      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d05a      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x1aa>
 8005d70:	e062      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f000 fc89 	bl	8006698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	609a      	str	r2, [r3, #8]
      break;
 8005d9e:	e04f      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	6899      	ldr	r1, [r3, #8]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f000 fc72 	bl	8006698 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dc2:	609a      	str	r2, [r3, #8]
      break;
 8005dc4:	e03c      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 fbe2 	bl	800659c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2150      	movs	r1, #80	; 0x50
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fc3c 	bl	800665c <TIM_ITRx_SetConfig>
      break;
 8005de4:	e02c      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fc01 	bl	80065fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2160      	movs	r1, #96	; 0x60
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fc2c 	bl	800665c <TIM_ITRx_SetConfig>
      break;
 8005e04:	e01c      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 fbc2 	bl	800659c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2140      	movs	r1, #64	; 0x40
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 fc1c 	bl	800665c <TIM_ITRx_SetConfig>
      break;
 8005e24:	e00c      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f000 fc13 	bl	800665c <TIM_ITRx_SetConfig>
      break;
 8005e36:	e003      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e3c:	e000      	b.n	8005e40 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	ffceff88 	.word	0xffceff88
 8005e60:	00100040 	.word	0x00100040
 8005e64:	00100030 	.word	0x00100030
 8005e68:	00100020 	.word	0x00100020

08005e6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d013      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d00f      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3d      	ldr	r2, [pc, #244]	; (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d00b      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3c      	ldr	r2, [pc, #240]	; (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a3b      	ldr	r2, [pc, #236]	; (8005fdc <TIM_Base_SetConfig+0x120>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_Base_SetConfig+0x40>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a3a      	ldr	r2, [pc, #232]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d108      	bne.n	8005f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2f      	ldr	r2, [pc, #188]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d01f      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d01b      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2c      	ldr	r2, [pc, #176]	; (8005fd4 <TIM_Base_SetConfig+0x118>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d017      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a2b      	ldr	r2, [pc, #172]	; (8005fd8 <TIM_Base_SetConfig+0x11c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d013      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a2a      	ldr	r2, [pc, #168]	; (8005fdc <TIM_Base_SetConfig+0x120>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d00f      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00b      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a28      	ldr	r2, [pc, #160]	; (8005fe4 <TIM_Base_SetConfig+0x128>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a27      	ldr	r2, [pc, #156]	; (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d003      	beq.n	8005f56 <TIM_Base_SetConfig+0x9a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a26      	ldr	r2, [pc, #152]	; (8005fec <TIM_Base_SetConfig+0x130>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d108      	bne.n	8005f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a10      	ldr	r2, [pc, #64]	; (8005fd0 <TIM_Base_SetConfig+0x114>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00f      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a12      	ldr	r2, [pc, #72]	; (8005fe0 <TIM_Base_SetConfig+0x124>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d00b      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <TIM_Base_SetConfig+0x128>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d007      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a10      	ldr	r2, [pc, #64]	; (8005fe8 <TIM_Base_SetConfig+0x12c>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d003      	beq.n	8005fb4 <TIM_Base_SetConfig+0xf8>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	4a0f      	ldr	r2, [pc, #60]	; (8005fec <TIM_Base_SetConfig+0x130>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d103      	bne.n	8005fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	691a      	ldr	r2, [r3, #16]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	615a      	str	r2, [r3, #20]
}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40010000 	.word	0x40010000
 8005fd4:	40000400 	.word	0x40000400
 8005fd8:	40000800 	.word	0x40000800
 8005fdc:	40000c00 	.word	0x40000c00
 8005fe0:	40010400 	.word	0x40010400
 8005fe4:	40014000 	.word	0x40014000
 8005fe8:	40014400 	.word	0x40014400
 8005fec:	40014800 	.word	0x40014800

08005ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b087      	sub	sp, #28
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <TIM_OC1_SetConfig+0x108>)
 800601c:	4013      	ands	r3, r2
 800601e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0303 	bic.w	r3, r3, #3
 8006026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f023 0302 	bic.w	r3, r3, #2
 8006038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a2d      	ldr	r2, [pc, #180]	; (80060fc <TIM_OC1_SetConfig+0x10c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00f      	beq.n	800606c <TIM_OC1_SetConfig+0x7c>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a2c      	ldr	r2, [pc, #176]	; (8006100 <TIM_OC1_SetConfig+0x110>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00b      	beq.n	800606c <TIM_OC1_SetConfig+0x7c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a2b      	ldr	r2, [pc, #172]	; (8006104 <TIM_OC1_SetConfig+0x114>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d007      	beq.n	800606c <TIM_OC1_SetConfig+0x7c>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a2a      	ldr	r2, [pc, #168]	; (8006108 <TIM_OC1_SetConfig+0x118>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d003      	beq.n	800606c <TIM_OC1_SetConfig+0x7c>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a29      	ldr	r2, [pc, #164]	; (800610c <TIM_OC1_SetConfig+0x11c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d10c      	bne.n	8006086 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f023 0308 	bic.w	r3, r3, #8
 8006072:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	4313      	orrs	r3, r2
 800607c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f023 0304 	bic.w	r3, r3, #4
 8006084:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4a1c      	ldr	r2, [pc, #112]	; (80060fc <TIM_OC1_SetConfig+0x10c>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d00f      	beq.n	80060ae <TIM_OC1_SetConfig+0xbe>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1b      	ldr	r2, [pc, #108]	; (8006100 <TIM_OC1_SetConfig+0x110>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_OC1_SetConfig+0xbe>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a1a      	ldr	r2, [pc, #104]	; (8006104 <TIM_OC1_SetConfig+0x114>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d007      	beq.n	80060ae <TIM_OC1_SetConfig+0xbe>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <TIM_OC1_SetConfig+0x118>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_OC1_SetConfig+0xbe>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <TIM_OC1_SetConfig+0x11c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d111      	bne.n	80060d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685a      	ldr	r2, [r3, #4]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	621a      	str	r2, [r3, #32]
}
 80060ec:	bf00      	nop
 80060ee:	371c      	adds	r7, #28
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr
 80060f8:	fffeff8f 	.word	0xfffeff8f
 80060fc:	40010000 	.word	0x40010000
 8006100:	40010400 	.word	0x40010400
 8006104:	40014000 	.word	0x40014000
 8006108:	40014400 	.word	0x40014400
 800610c:	40014800 	.word	0x40014800

08006110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0210 	bic.w	r2, r3, #16
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4b34      	ldr	r3, [pc, #208]	; (800620c <TIM_OC2_SetConfig+0xfc>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0320 	bic.w	r3, r3, #32
 800615a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	011b      	lsls	r3, r3, #4
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4313      	orrs	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a29      	ldr	r2, [pc, #164]	; (8006210 <TIM_OC2_SetConfig+0x100>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d003      	beq.n	8006178 <TIM_OC2_SetConfig+0x68>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a28      	ldr	r2, [pc, #160]	; (8006214 <TIM_OC2_SetConfig+0x104>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d10d      	bne.n	8006194 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	4313      	orrs	r3, r2
 800618a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006192:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <TIM_OC2_SetConfig+0x100>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d00f      	beq.n	80061bc <TIM_OC2_SetConfig+0xac>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1d      	ldr	r2, [pc, #116]	; (8006214 <TIM_OC2_SetConfig+0x104>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00b      	beq.n	80061bc <TIM_OC2_SetConfig+0xac>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1c      	ldr	r2, [pc, #112]	; (8006218 <TIM_OC2_SetConfig+0x108>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d007      	beq.n	80061bc <TIM_OC2_SetConfig+0xac>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a1b      	ldr	r2, [pc, #108]	; (800621c <TIM_OC2_SetConfig+0x10c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0xac>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a1a      	ldr	r2, [pc, #104]	; (8006220 <TIM_OC2_SetConfig+0x110>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d113      	bne.n	80061e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	621a      	str	r2, [r3, #32]
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	feff8fff 	.word	0xfeff8fff
 8006210:	40010000 	.word	0x40010000
 8006214:	40010400 	.word	0x40010400
 8006218:	40014000 	.word	0x40014000
 800621c:	40014400 	.word	0x40014400
 8006220:	40014800 	.word	0x40014800

08006224 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006224:	b480      	push	{r7}
 8006226:	b087      	sub	sp, #28
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	69db      	ldr	r3, [r3, #28]
 800624a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	4b33      	ldr	r3, [pc, #204]	; (800631c <TIM_OC3_SetConfig+0xf8>)
 8006250:	4013      	ands	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f023 0303 	bic.w	r3, r3, #3
 800625a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68fa      	ldr	r2, [r7, #12]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800626c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	021b      	lsls	r3, r3, #8
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a28      	ldr	r2, [pc, #160]	; (8006320 <TIM_OC3_SetConfig+0xfc>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d003      	beq.n	800628a <TIM_OC3_SetConfig+0x66>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a27      	ldr	r2, [pc, #156]	; (8006324 <TIM_OC3_SetConfig+0x100>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d10d      	bne.n	80062a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	4313      	orrs	r3, r2
 800629c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a1d      	ldr	r2, [pc, #116]	; (8006320 <TIM_OC3_SetConfig+0xfc>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d00f      	beq.n	80062ce <TIM_OC3_SetConfig+0xaa>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a1c      	ldr	r2, [pc, #112]	; (8006324 <TIM_OC3_SetConfig+0x100>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00b      	beq.n	80062ce <TIM_OC3_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <TIM_OC3_SetConfig+0x104>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d007      	beq.n	80062ce <TIM_OC3_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a1a      	ldr	r2, [pc, #104]	; (800632c <TIM_OC3_SetConfig+0x108>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC3_SetConfig+0xaa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a19      	ldr	r2, [pc, #100]	; (8006330 <TIM_OC3_SetConfig+0x10c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
}
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	fffeff8f 	.word	0xfffeff8f
 8006320:	40010000 	.word	0x40010000
 8006324:	40010400 	.word	0x40010400
 8006328:	40014000 	.word	0x40014000
 800632c:	40014400 	.word	0x40014400
 8006330:	40014800 	.word	0x40014800

08006334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006334:	b480      	push	{r7}
 8006336:	b087      	sub	sp, #28
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	4b24      	ldr	r3, [pc, #144]	; (80063f0 <TIM_OC4_SetConfig+0xbc>)
 8006360:	4013      	ands	r3, r2
 8006362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800636a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	021b      	lsls	r3, r3, #8
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	4313      	orrs	r3, r2
 8006376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	031b      	lsls	r3, r3, #12
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4313      	orrs	r3, r2
 800638a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a19      	ldr	r2, [pc, #100]	; (80063f4 <TIM_OC4_SetConfig+0xc0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00f      	beq.n	80063b4 <TIM_OC4_SetConfig+0x80>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <TIM_OC4_SetConfig+0xc4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_OC4_SetConfig+0x80>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a17      	ldr	r2, [pc, #92]	; (80063fc <TIM_OC4_SetConfig+0xc8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_OC4_SetConfig+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a16      	ldr	r2, [pc, #88]	; (8006400 <TIM_OC4_SetConfig+0xcc>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC4_SetConfig+0x80>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a15      	ldr	r2, [pc, #84]	; (8006404 <TIM_OC4_SetConfig+0xd0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d109      	bne.n	80063c8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	019b      	lsls	r3, r3, #6
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68fa      	ldr	r2, [r7, #12]
 80063d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	685a      	ldr	r2, [r3, #4]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	621a      	str	r2, [r3, #32]
}
 80063e2:	bf00      	nop
 80063e4:	371c      	adds	r7, #28
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop
 80063f0:	feff8fff 	.word	0xfeff8fff
 80063f4:	40010000 	.word	0x40010000
 80063f8:	40010400 	.word	0x40010400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4b21      	ldr	r3, [pc, #132]	; (80064b8 <TIM_OC5_SetConfig+0xb0>)
 8006434:	4013      	ands	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4313      	orrs	r3, r2
 8006440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	041b      	lsls	r3, r3, #16
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a18      	ldr	r2, [pc, #96]	; (80064bc <TIM_OC5_SetConfig+0xb4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00f      	beq.n	800647e <TIM_OC5_SetConfig+0x76>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <TIM_OC5_SetConfig+0xb8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00b      	beq.n	800647e <TIM_OC5_SetConfig+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <TIM_OC5_SetConfig+0xbc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d007      	beq.n	800647e <TIM_OC5_SetConfig+0x76>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <TIM_OC5_SetConfig+0xc0>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d003      	beq.n	800647e <TIM_OC5_SetConfig+0x76>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a14      	ldr	r2, [pc, #80]	; (80064cc <TIM_OC5_SetConfig+0xc4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d109      	bne.n	8006492 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006484:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	621a      	str	r2, [r3, #32]
}
 80064ac:	bf00      	nop
 80064ae:	371c      	adds	r7, #28
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	fffeff8f 	.word	0xfffeff8f
 80064bc:	40010000 	.word	0x40010000
 80064c0:	40010400 	.word	0x40010400
 80064c4:	40014000 	.word	0x40014000
 80064c8:	40014400 	.word	0x40014400
 80064cc:	40014800 	.word	0x40014800

080064d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <TIM_OC6_SetConfig+0xb4>)
 80064fc:	4013      	ands	r3, r2
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	021b      	lsls	r3, r3, #8
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	051b      	lsls	r3, r3, #20
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a19      	ldr	r2, [pc, #100]	; (8006588 <TIM_OC6_SetConfig+0xb8>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00f      	beq.n	8006548 <TIM_OC6_SetConfig+0x78>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a18      	ldr	r2, [pc, #96]	; (800658c <TIM_OC6_SetConfig+0xbc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00b      	beq.n	8006548 <TIM_OC6_SetConfig+0x78>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a17      	ldr	r2, [pc, #92]	; (8006590 <TIM_OC6_SetConfig+0xc0>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d007      	beq.n	8006548 <TIM_OC6_SetConfig+0x78>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a16      	ldr	r2, [pc, #88]	; (8006594 <TIM_OC6_SetConfig+0xc4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d003      	beq.n	8006548 <TIM_OC6_SetConfig+0x78>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a15      	ldr	r2, [pc, #84]	; (8006598 <TIM_OC6_SetConfig+0xc8>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d109      	bne.n	800655c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800654e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	029b      	lsls	r3, r3, #10
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	697a      	ldr	r2, [r7, #20]
 8006560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	685a      	ldr	r2, [r3, #4]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	feff8fff 	.word	0xfeff8fff
 8006588:	40010000 	.word	0x40010000
 800658c:	40010400 	.word	0x40010400
 8006590:	40014000 	.word	0x40014000
 8006594:	40014400 	.word	0x40014400
 8006598:	40014800 	.word	0x40014800

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0210 	bic.w	r2, r3, #16
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006624:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006636:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
	...

0800665c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4b09      	ldr	r3, [pc, #36]	; (8006694 <TIM_ITRx_SetConfig+0x38>)
 8006670:	4013      	ands	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4313      	orrs	r3, r2
 800667a:	f043 0307 	orr.w	r3, r3, #7
 800667e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	609a      	str	r2, [r3, #8]
}
 8006686:	bf00      	nop
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	ffcfff8f 	.word	0xffcfff8f

08006698 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	607a      	str	r2, [r7, #4]
 80066a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	021a      	lsls	r2, r3, #8
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	431a      	orrs	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	4313      	orrs	r3, r2
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	609a      	str	r2, [r3, #8]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 031f 	and.w	r3, r3, #31
 80066ea:	2201      	movs	r2, #1
 80066ec:	fa02 f303 	lsl.w	r3, r2, r3
 80066f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1a      	ldr	r2, [r3, #32]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	43db      	mvns	r3, r3
 80066fa:	401a      	ands	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a1a      	ldr	r2, [r3, #32]
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	fa01 f303 	lsl.w	r3, r1, r3
 8006710:	431a      	orrs	r2, r3
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	621a      	str	r2, [r3, #32]
}
 8006716:	bf00      	nop
 8006718:	371c      	adds	r7, #28
 800671a:	46bd      	mov	sp, r7
 800671c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006720:	4770      	bx	lr
	...

08006724 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d109      	bne.n	8006748 <HAL_TIMEx_PWMN_Start+0x24>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800673a:	b2db      	uxtb	r3, r3
 800673c:	2b01      	cmp	r3, #1
 800673e:	bf14      	ite	ne
 8006740:	2301      	movne	r3, #1
 8006742:	2300      	moveq	r3, #0
 8006744:	b2db      	uxtb	r3, r3
 8006746:	e022      	b.n	800678e <HAL_TIMEx_PWMN_Start+0x6a>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b04      	cmp	r3, #4
 800674c:	d109      	bne.n	8006762 <HAL_TIMEx_PWMN_Start+0x3e>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	e015      	b.n	800678e <HAL_TIMEx_PWMN_Start+0x6a>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d109      	bne.n	800677c <HAL_TIMEx_PWMN_Start+0x58>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b01      	cmp	r3, #1
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	e008      	b.n	800678e <HAL_TIMEx_PWMN_Start+0x6a>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006782:	b2db      	uxtb	r3, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	bf14      	ite	ne
 8006788:	2301      	movne	r3, #1
 800678a:	2300      	moveq	r3, #0
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e073      	b.n	800687e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d104      	bne.n	80067a6 <HAL_TIMEx_PWMN_Start+0x82>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2202      	movs	r2, #2
 80067a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a4:	e013      	b.n	80067ce <HAL_TIMEx_PWMN_Start+0xaa>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d104      	bne.n	80067b6 <HAL_TIMEx_PWMN_Start+0x92>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2202      	movs	r2, #2
 80067b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067b4:	e00b      	b.n	80067ce <HAL_TIMEx_PWMN_Start+0xaa>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d104      	bne.n	80067c6 <HAL_TIMEx_PWMN_Start+0xa2>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067c4:	e003      	b.n	80067ce <HAL_TIMEx_PWMN_Start+0xaa>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	2204      	movs	r2, #4
 80067d4:	6839      	ldr	r1, [r7, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f990 	bl	8006afc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a25      	ldr	r2, [pc, #148]	; (8006888 <HAL_TIMEx_PWMN_Start+0x164>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d022      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fe:	d01d      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a21      	ldr	r2, [pc, #132]	; (800688c <HAL_TIMEx_PWMN_Start+0x168>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d018      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a20      	ldr	r2, [pc, #128]	; (8006890 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a1e      	ldr	r2, [pc, #120]	; (8006894 <HAL_TIMEx_PWMN_Start+0x170>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00e      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a1d      	ldr	r2, [pc, #116]	; (8006898 <HAL_TIMEx_PWMN_Start+0x174>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d009      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a1b      	ldr	r2, [pc, #108]	; (800689c <HAL_TIMEx_PWMN_Start+0x178>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d004      	beq.n	800683c <HAL_TIMEx_PWMN_Start+0x118>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a1a      	ldr	r2, [pc, #104]	; (80068a0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d115      	bne.n	8006868 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	689a      	ldr	r2, [r3, #8]
 8006842:	4b18      	ldr	r3, [pc, #96]	; (80068a4 <HAL_TIMEx_PWMN_Start+0x180>)
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2b06      	cmp	r3, #6
 800684c:	d015      	beq.n	800687a <HAL_TIMEx_PWMN_Start+0x156>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006854:	d011      	beq.n	800687a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f042 0201 	orr.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006866:	e008      	b.n	800687a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0201 	orr.w	r2, r2, #1
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e000      	b.n	800687c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800687a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800687c:	2300      	movs	r3, #0
}
 800687e:	4618      	mov	r0, r3
 8006880:	3710      	adds	r7, #16
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	40010000 	.word	0x40010000
 800688c:	40000400 	.word	0x40000400
 8006890:	40000800 	.word	0x40000800
 8006894:	40000c00 	.word	0x40000c00
 8006898:	40010400 	.word	0x40010400
 800689c:	40001800 	.word	0x40001800
 80068a0:	40014000 	.word	0x40014000
 80068a4:	00010007 	.word	0x00010007

080068a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	d101      	bne.n	80068c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068bc:	2302      	movs	r3, #2
 80068be:	e06d      	b.n	800699c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2201      	movs	r2, #1
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a30      	ldr	r2, [pc, #192]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d004      	beq.n	80068f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d108      	bne.n	8006906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80068fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a20      	ldr	r2, [pc, #128]	; (80069a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d022      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d01d      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d018      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d013      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a1a      	ldr	r2, [pc, #104]	; (80069b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00e      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a15      	ldr	r2, [pc, #84]	; (80069ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d009      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d004      	beq.n	8006970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a15      	ldr	r2, [pc, #84]	; (80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d10c      	bne.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	4313      	orrs	r3, r2
 8006980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3714      	adds	r7, #20
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	40010000 	.word	0x40010000
 80069ac:	40010400 	.word	0x40010400
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40001800 	.word	0x40001800
 80069c0:	40014000 	.word	0x40014000

080069c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b085      	sub	sp, #20
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069dc:	2302      	movs	r3, #2
 80069de:	e065      	b.n	8006aac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	041b      	lsls	r3, r3, #16
 8006a56:	4313      	orrs	r3, r2
 8006a58:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a16      	ldr	r2, [pc, #88]	; (8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d004      	beq.n	8006a6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a14      	ldr	r2, [pc, #80]	; (8006abc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d115      	bne.n	8006a9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	051b      	lsls	r3, r3, #20
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	69db      	ldr	r3, [r3, #28]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr
 8006ab8:	40010000 	.word	0x40010000
 8006abc:	40010400 	.word	0x40010400

08006ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac8:	bf00      	nop
 8006aca:	370c      	adds	r7, #12
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr

08006ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006adc:	bf00      	nop
 8006ade:	370c      	adds	r7, #12
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b087      	sub	sp, #28
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	f003 031f 	and.w	r3, r3, #31
 8006b0e:	2204      	movs	r2, #4
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6a1a      	ldr	r2, [r3, #32]
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	43db      	mvns	r3, r3
 8006b1e:	401a      	ands	r2, r3
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1a      	ldr	r2, [r3, #32]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	f003 031f 	and.w	r3, r3, #31
 8006b2e:	6879      	ldr	r1, [r7, #4]
 8006b30:	fa01 f303 	lsl.w	r3, r1, r3
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	621a      	str	r2, [r3, #32]
}
 8006b3a:	bf00      	nop
 8006b3c:	371c      	adds	r7, #28
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e042      	b.n	8006bde <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fa ff1a 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f022 0201 	bic.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f82d 	bl	8006be8 <UART_SetConfig>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d101      	bne.n	8006b98 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e022      	b.n	8006bde <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d002      	beq.n	8006ba6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fd89 	bl	80076b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685a      	ldr	r2, [r3, #4]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fe10 	bl	80077fc <UART_CheckIdleState>
 8006bdc:	4603      	mov	r3, r0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
	...

08006be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bec:	b092      	sub	sp, #72	; 0x48
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	695b      	ldr	r3, [r3, #20]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	4bbe      	ldr	r3, [pc, #760]	; (8006f10 <UART_SetConfig+0x328>)
 8006c18:	4013      	ands	r3, r2
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	6812      	ldr	r2, [r2, #0]
 8006c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	699b      	ldr	r3, [r3, #24]
 8006c3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4ab3      	ldr	r2, [pc, #716]	; (8006f14 <UART_SetConfig+0x32c>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d004      	beq.n	8006c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c50:	4313      	orrs	r3, r2
 8006c52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689a      	ldr	r2, [r3, #8]
 8006c5a:	4baf      	ldr	r3, [pc, #700]	; (8006f18 <UART_SetConfig+0x330>)
 8006c5c:	4013      	ands	r3, r2
 8006c5e:	697a      	ldr	r2, [r7, #20]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c64:	430b      	orrs	r3, r1
 8006c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6e:	f023 010f 	bic.w	r1, r3, #15
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4aa6      	ldr	r2, [pc, #664]	; (8006f1c <UART_SetConfig+0x334>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d177      	bne.n	8006d78 <UART_SetConfig+0x190>
 8006c88:	4ba5      	ldr	r3, [pc, #660]	; (8006f20 <UART_SetConfig+0x338>)
 8006c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006c90:	2b28      	cmp	r3, #40	; 0x28
 8006c92:	d86d      	bhi.n	8006d70 <UART_SetConfig+0x188>
 8006c94:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0xb4>)
 8006c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9a:	bf00      	nop
 8006c9c:	08006d41 	.word	0x08006d41
 8006ca0:	08006d71 	.word	0x08006d71
 8006ca4:	08006d71 	.word	0x08006d71
 8006ca8:	08006d71 	.word	0x08006d71
 8006cac:	08006d71 	.word	0x08006d71
 8006cb0:	08006d71 	.word	0x08006d71
 8006cb4:	08006d71 	.word	0x08006d71
 8006cb8:	08006d71 	.word	0x08006d71
 8006cbc:	08006d49 	.word	0x08006d49
 8006cc0:	08006d71 	.word	0x08006d71
 8006cc4:	08006d71 	.word	0x08006d71
 8006cc8:	08006d71 	.word	0x08006d71
 8006ccc:	08006d71 	.word	0x08006d71
 8006cd0:	08006d71 	.word	0x08006d71
 8006cd4:	08006d71 	.word	0x08006d71
 8006cd8:	08006d71 	.word	0x08006d71
 8006cdc:	08006d51 	.word	0x08006d51
 8006ce0:	08006d71 	.word	0x08006d71
 8006ce4:	08006d71 	.word	0x08006d71
 8006ce8:	08006d71 	.word	0x08006d71
 8006cec:	08006d71 	.word	0x08006d71
 8006cf0:	08006d71 	.word	0x08006d71
 8006cf4:	08006d71 	.word	0x08006d71
 8006cf8:	08006d71 	.word	0x08006d71
 8006cfc:	08006d59 	.word	0x08006d59
 8006d00:	08006d71 	.word	0x08006d71
 8006d04:	08006d71 	.word	0x08006d71
 8006d08:	08006d71 	.word	0x08006d71
 8006d0c:	08006d71 	.word	0x08006d71
 8006d10:	08006d71 	.word	0x08006d71
 8006d14:	08006d71 	.word	0x08006d71
 8006d18:	08006d71 	.word	0x08006d71
 8006d1c:	08006d61 	.word	0x08006d61
 8006d20:	08006d71 	.word	0x08006d71
 8006d24:	08006d71 	.word	0x08006d71
 8006d28:	08006d71 	.word	0x08006d71
 8006d2c:	08006d71 	.word	0x08006d71
 8006d30:	08006d71 	.word	0x08006d71
 8006d34:	08006d71 	.word	0x08006d71
 8006d38:	08006d71 	.word	0x08006d71
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e222      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e21e      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d50:	2308      	movs	r3, #8
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e21a      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e216      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d60:	2320      	movs	r3, #32
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e212      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d68:	2340      	movs	r3, #64	; 0x40
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e20e      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e20a      	b.n	800718e <UART_SetConfig+0x5a6>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a69      	ldr	r2, [pc, #420]	; (8006f24 <UART_SetConfig+0x33c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d130      	bne.n	8006de4 <UART_SetConfig+0x1fc>
 8006d82:	4b67      	ldr	r3, [pc, #412]	; (8006f20 <UART_SetConfig+0x338>)
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d826      	bhi.n	8006ddc <UART_SetConfig+0x1f4>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <UART_SetConfig+0x1ac>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006dad 	.word	0x08006dad
 8006d98:	08006db5 	.word	0x08006db5
 8006d9c:	08006dbd 	.word	0x08006dbd
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e1ec      	b.n	800718e <UART_SetConfig+0x5a6>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e1e8      	b.n	800718e <UART_SetConfig+0x5a6>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e1e4      	b.n	800718e <UART_SetConfig+0x5a6>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e1e0      	b.n	800718e <UART_SetConfig+0x5a6>
 8006dcc:	2320      	movs	r3, #32
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e1dc      	b.n	800718e <UART_SetConfig+0x5a6>
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e1d8      	b.n	800718e <UART_SetConfig+0x5a6>
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e1d4      	b.n	800718e <UART_SetConfig+0x5a6>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a4f      	ldr	r2, [pc, #316]	; (8006f28 <UART_SetConfig+0x340>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d130      	bne.n	8006e50 <UART_SetConfig+0x268>
 8006dee:	4b4c      	ldr	r3, [pc, #304]	; (8006f20 <UART_SetConfig+0x338>)
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d826      	bhi.n	8006e48 <UART_SetConfig+0x260>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x218>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e19 	.word	0x08006e19
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e39 	.word	0x08006e39
 8006e14:	08006e41 	.word	0x08006e41
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e1b6      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e1b2      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e1ae      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e1aa      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e38:	2320      	movs	r3, #32
 8006e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e3e:	e1a6      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e46:	e1a2      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e48:	2380      	movs	r3, #128	; 0x80
 8006e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e4e:	e19e      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a35      	ldr	r2, [pc, #212]	; (8006f2c <UART_SetConfig+0x344>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d130      	bne.n	8006ebc <UART_SetConfig+0x2d4>
 8006e5a:	4b31      	ldr	r3, [pc, #196]	; (8006f20 <UART_SetConfig+0x338>)
 8006e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	2b05      	cmp	r3, #5
 8006e64:	d826      	bhi.n	8006eb4 <UART_SetConfig+0x2cc>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <UART_SetConfig+0x284>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006e85 	.word	0x08006e85
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006e95 	.word	0x08006e95
 8006e78:	08006e9d 	.word	0x08006e9d
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ead 	.word	0x08006ead
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8a:	e180      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e8c:	2304      	movs	r3, #4
 8006e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e92:	e17c      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e94:	2308      	movs	r3, #8
 8006e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e9a:	e178      	b.n	800718e <UART_SetConfig+0x5a6>
 8006e9c:	2310      	movs	r3, #16
 8006e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ea2:	e174      	b.n	800718e <UART_SetConfig+0x5a6>
 8006ea4:	2320      	movs	r3, #32
 8006ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eaa:	e170      	b.n	800718e <UART_SetConfig+0x5a6>
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eb2:	e16c      	b.n	800718e <UART_SetConfig+0x5a6>
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eba:	e168      	b.n	800718e <UART_SetConfig+0x5a6>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a1b      	ldr	r2, [pc, #108]	; (8006f30 <UART_SetConfig+0x348>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d142      	bne.n	8006f4c <UART_SetConfig+0x364>
 8006ec6:	4b16      	ldr	r3, [pc, #88]	; (8006f20 <UART_SetConfig+0x338>)
 8006ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eca:	f003 0307 	and.w	r3, r3, #7
 8006ece:	2b05      	cmp	r3, #5
 8006ed0:	d838      	bhi.n	8006f44 <UART_SetConfig+0x35c>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <UART_SetConfig+0x2f0>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006ef9 	.word	0x08006ef9
 8006ee0:	08006f01 	.word	0x08006f01
 8006ee4:	08006f09 	.word	0x08006f09
 8006ee8:	08006f35 	.word	0x08006f35
 8006eec:	08006f3d 	.word	0x08006f3d
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e14a      	b.n	800718e <UART_SetConfig+0x5a6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e146      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f06:	e142      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0e:	e13e      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f10:	cfff69f3 	.word	0xcfff69f3
 8006f14:	58000c00 	.word	0x58000c00
 8006f18:	11fff4ff 	.word	0x11fff4ff
 8006f1c:	40011000 	.word	0x40011000
 8006f20:	58024400 	.word	0x58024400
 8006f24:	40004400 	.word	0x40004400
 8006f28:	40004800 	.word	0x40004800
 8006f2c:	40004c00 	.word	0x40004c00
 8006f30:	40005000 	.word	0x40005000
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e128      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e124      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e120      	b.n	800718e <UART_SetConfig+0x5a6>
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4acb      	ldr	r2, [pc, #812]	; (8007280 <UART_SetConfig+0x698>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d176      	bne.n	8007044 <UART_SetConfig+0x45c>
 8006f56:	4bcb      	ldr	r3, [pc, #812]	; (8007284 <UART_SetConfig+0x69c>)
 8006f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f5e:	2b28      	cmp	r3, #40	; 0x28
 8006f60:	d86c      	bhi.n	800703c <UART_SetConfig+0x454>
 8006f62:	a201      	add	r2, pc, #4	; (adr r2, 8006f68 <UART_SetConfig+0x380>)
 8006f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f68:	0800700d 	.word	0x0800700d
 8006f6c:	0800703d 	.word	0x0800703d
 8006f70:	0800703d 	.word	0x0800703d
 8006f74:	0800703d 	.word	0x0800703d
 8006f78:	0800703d 	.word	0x0800703d
 8006f7c:	0800703d 	.word	0x0800703d
 8006f80:	0800703d 	.word	0x0800703d
 8006f84:	0800703d 	.word	0x0800703d
 8006f88:	08007015 	.word	0x08007015
 8006f8c:	0800703d 	.word	0x0800703d
 8006f90:	0800703d 	.word	0x0800703d
 8006f94:	0800703d 	.word	0x0800703d
 8006f98:	0800703d 	.word	0x0800703d
 8006f9c:	0800703d 	.word	0x0800703d
 8006fa0:	0800703d 	.word	0x0800703d
 8006fa4:	0800703d 	.word	0x0800703d
 8006fa8:	0800701d 	.word	0x0800701d
 8006fac:	0800703d 	.word	0x0800703d
 8006fb0:	0800703d 	.word	0x0800703d
 8006fb4:	0800703d 	.word	0x0800703d
 8006fb8:	0800703d 	.word	0x0800703d
 8006fbc:	0800703d 	.word	0x0800703d
 8006fc0:	0800703d 	.word	0x0800703d
 8006fc4:	0800703d 	.word	0x0800703d
 8006fc8:	08007025 	.word	0x08007025
 8006fcc:	0800703d 	.word	0x0800703d
 8006fd0:	0800703d 	.word	0x0800703d
 8006fd4:	0800703d 	.word	0x0800703d
 8006fd8:	0800703d 	.word	0x0800703d
 8006fdc:	0800703d 	.word	0x0800703d
 8006fe0:	0800703d 	.word	0x0800703d
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	0800702d 	.word	0x0800702d
 8006fec:	0800703d 	.word	0x0800703d
 8006ff0:	0800703d 	.word	0x0800703d
 8006ff4:	0800703d 	.word	0x0800703d
 8006ff8:	0800703d 	.word	0x0800703d
 8006ffc:	0800703d 	.word	0x0800703d
 8007000:	0800703d 	.word	0x0800703d
 8007004:	0800703d 	.word	0x0800703d
 8007008:	08007035 	.word	0x08007035
 800700c:	2301      	movs	r3, #1
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e0bc      	b.n	800718e <UART_SetConfig+0x5a6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e0b8      	b.n	800718e <UART_SetConfig+0x5a6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e0b4      	b.n	800718e <UART_SetConfig+0x5a6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e0b0      	b.n	800718e <UART_SetConfig+0x5a6>
 800702c:	2320      	movs	r3, #32
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e0ac      	b.n	800718e <UART_SetConfig+0x5a6>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e0a8      	b.n	800718e <UART_SetConfig+0x5a6>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e0a4      	b.n	800718e <UART_SetConfig+0x5a6>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a8f      	ldr	r2, [pc, #572]	; (8007288 <UART_SetConfig+0x6a0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d130      	bne.n	80070b0 <UART_SetConfig+0x4c8>
 800704e:	4b8d      	ldr	r3, [pc, #564]	; (8007284 <UART_SetConfig+0x69c>)
 8007050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b05      	cmp	r3, #5
 8007058:	d826      	bhi.n	80070a8 <UART_SetConfig+0x4c0>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <UART_SetConfig+0x478>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007079 	.word	0x08007079
 8007064:	08007081 	.word	0x08007081
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	2300      	movs	r3, #0
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e086      	b.n	800718e <UART_SetConfig+0x5a6>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e082      	b.n	800718e <UART_SetConfig+0x5a6>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e07e      	b.n	800718e <UART_SetConfig+0x5a6>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e07a      	b.n	800718e <UART_SetConfig+0x5a6>
 8007098:	2320      	movs	r3, #32
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e076      	b.n	800718e <UART_SetConfig+0x5a6>
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e072      	b.n	800718e <UART_SetConfig+0x5a6>
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e06e      	b.n	800718e <UART_SetConfig+0x5a6>
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a75      	ldr	r2, [pc, #468]	; (800728c <UART_SetConfig+0x6a4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d130      	bne.n	800711c <UART_SetConfig+0x534>
 80070ba:	4b72      	ldr	r3, [pc, #456]	; (8007284 <UART_SetConfig+0x69c>)
 80070bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	2b05      	cmp	r3, #5
 80070c4:	d826      	bhi.n	8007114 <UART_SetConfig+0x52c>
 80070c6:	a201      	add	r2, pc, #4	; (adr r2, 80070cc <UART_SetConfig+0x4e4>)
 80070c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070cc:	080070e5 	.word	0x080070e5
 80070d0:	080070ed 	.word	0x080070ed
 80070d4:	080070f5 	.word	0x080070f5
 80070d8:	080070fd 	.word	0x080070fd
 80070dc:	08007105 	.word	0x08007105
 80070e0:	0800710d 	.word	0x0800710d
 80070e4:	2300      	movs	r3, #0
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e050      	b.n	800718e <UART_SetConfig+0x5a6>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e04c      	b.n	800718e <UART_SetConfig+0x5a6>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e048      	b.n	800718e <UART_SetConfig+0x5a6>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007102:	e044      	b.n	800718e <UART_SetConfig+0x5a6>
 8007104:	2320      	movs	r3, #32
 8007106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800710a:	e040      	b.n	800718e <UART_SetConfig+0x5a6>
 800710c:	2340      	movs	r3, #64	; 0x40
 800710e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007112:	e03c      	b.n	800718e <UART_SetConfig+0x5a6>
 8007114:	2380      	movs	r3, #128	; 0x80
 8007116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800711a:	e038      	b.n	800718e <UART_SetConfig+0x5a6>
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a5b      	ldr	r2, [pc, #364]	; (8007290 <UART_SetConfig+0x6a8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d130      	bne.n	8007188 <UART_SetConfig+0x5a0>
 8007126:	4b57      	ldr	r3, [pc, #348]	; (8007284 <UART_SetConfig+0x69c>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b05      	cmp	r3, #5
 8007130:	d826      	bhi.n	8007180 <UART_SetConfig+0x598>
 8007132:	a201      	add	r2, pc, #4	; (adr r2, 8007138 <UART_SetConfig+0x550>)
 8007134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007138:	08007151 	.word	0x08007151
 800713c:	08007159 	.word	0x08007159
 8007140:	08007161 	.word	0x08007161
 8007144:	08007169 	.word	0x08007169
 8007148:	08007171 	.word	0x08007171
 800714c:	08007179 	.word	0x08007179
 8007150:	2302      	movs	r3, #2
 8007152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007156:	e01a      	b.n	800718e <UART_SetConfig+0x5a6>
 8007158:	2304      	movs	r3, #4
 800715a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715e:	e016      	b.n	800718e <UART_SetConfig+0x5a6>
 8007160:	2308      	movs	r3, #8
 8007162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007166:	e012      	b.n	800718e <UART_SetConfig+0x5a6>
 8007168:	2310      	movs	r3, #16
 800716a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800716e:	e00e      	b.n	800718e <UART_SetConfig+0x5a6>
 8007170:	2320      	movs	r3, #32
 8007172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007176:	e00a      	b.n	800718e <UART_SetConfig+0x5a6>
 8007178:	2340      	movs	r3, #64	; 0x40
 800717a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800717e:	e006      	b.n	800718e <UART_SetConfig+0x5a6>
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007186:	e002      	b.n	800718e <UART_SetConfig+0x5a6>
 8007188:	2380      	movs	r3, #128	; 0x80
 800718a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a3f      	ldr	r2, [pc, #252]	; (8007290 <UART_SetConfig+0x6a8>)
 8007194:	4293      	cmp	r3, r2
 8007196:	f040 80f8 	bne.w	800738a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800719a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800719e:	2b20      	cmp	r3, #32
 80071a0:	dc46      	bgt.n	8007230 <UART_SetConfig+0x648>
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	f2c0 8082 	blt.w	80072ac <UART_SetConfig+0x6c4>
 80071a8:	3b02      	subs	r3, #2
 80071aa:	2b1e      	cmp	r3, #30
 80071ac:	d87e      	bhi.n	80072ac <UART_SetConfig+0x6c4>
 80071ae:	a201      	add	r2, pc, #4	; (adr r2, 80071b4 <UART_SetConfig+0x5cc>)
 80071b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b4:	08007237 	.word	0x08007237
 80071b8:	080072ad 	.word	0x080072ad
 80071bc:	0800723f 	.word	0x0800723f
 80071c0:	080072ad 	.word	0x080072ad
 80071c4:	080072ad 	.word	0x080072ad
 80071c8:	080072ad 	.word	0x080072ad
 80071cc:	0800724f 	.word	0x0800724f
 80071d0:	080072ad 	.word	0x080072ad
 80071d4:	080072ad 	.word	0x080072ad
 80071d8:	080072ad 	.word	0x080072ad
 80071dc:	080072ad 	.word	0x080072ad
 80071e0:	080072ad 	.word	0x080072ad
 80071e4:	080072ad 	.word	0x080072ad
 80071e8:	080072ad 	.word	0x080072ad
 80071ec:	0800725f 	.word	0x0800725f
 80071f0:	080072ad 	.word	0x080072ad
 80071f4:	080072ad 	.word	0x080072ad
 80071f8:	080072ad 	.word	0x080072ad
 80071fc:	080072ad 	.word	0x080072ad
 8007200:	080072ad 	.word	0x080072ad
 8007204:	080072ad 	.word	0x080072ad
 8007208:	080072ad 	.word	0x080072ad
 800720c:	080072ad 	.word	0x080072ad
 8007210:	080072ad 	.word	0x080072ad
 8007214:	080072ad 	.word	0x080072ad
 8007218:	080072ad 	.word	0x080072ad
 800721c:	080072ad 	.word	0x080072ad
 8007220:	080072ad 	.word	0x080072ad
 8007224:	080072ad 	.word	0x080072ad
 8007228:	080072ad 	.word	0x080072ad
 800722c:	0800729f 	.word	0x0800729f
 8007230:	2b40      	cmp	r3, #64	; 0x40
 8007232:	d037      	beq.n	80072a4 <UART_SetConfig+0x6bc>
 8007234:	e03a      	b.n	80072ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007236:	f7fd fb29 	bl	800488c <HAL_RCCEx_GetD3PCLK1Freq>
 800723a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800723c:	e03c      	b.n	80072b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800723e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007242:	4618      	mov	r0, r3
 8007244:	f7fd fb38 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800724c:	e034      	b.n	80072b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800724e:	f107 0318 	add.w	r3, r7, #24
 8007252:	4618      	mov	r0, r3
 8007254:	f7fd fc84 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800725c:	e02c      	b.n	80072b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <UART_SetConfig+0x69c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d016      	beq.n	8007298 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800726a:	4b06      	ldr	r3, [pc, #24]	; (8007284 <UART_SetConfig+0x69c>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	08db      	lsrs	r3, r3, #3
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	4a07      	ldr	r2, [pc, #28]	; (8007294 <UART_SetConfig+0x6ac>)
 8007276:	fa22 f303 	lsr.w	r3, r2, r3
 800727a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800727c:	e01c      	b.n	80072b8 <UART_SetConfig+0x6d0>
 800727e:	bf00      	nop
 8007280:	40011400 	.word	0x40011400
 8007284:	58024400 	.word	0x58024400
 8007288:	40007800 	.word	0x40007800
 800728c:	40007c00 	.word	0x40007c00
 8007290:	58000c00 	.word	0x58000c00
 8007294:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007298:	4b9d      	ldr	r3, [pc, #628]	; (8007510 <UART_SetConfig+0x928>)
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729c:	e00c      	b.n	80072b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800729e:	4b9d      	ldr	r3, [pc, #628]	; (8007514 <UART_SetConfig+0x92c>)
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072a2:	e009      	b.n	80072b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072aa:	e005      	b.n	80072b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072ac:	2300      	movs	r3, #0
 80072ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80072b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 81de 	beq.w	800767c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c4:	4a94      	ldr	r2, [pc, #592]	; (8007518 <UART_SetConfig+0x930>)
 80072c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072ca:	461a      	mov	r2, r3
 80072cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80072d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	685a      	ldr	r2, [r3, #4]
 80072d8:	4613      	mov	r3, r2
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	4413      	add	r3, r2
 80072de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d305      	bcc.n	80072f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80072ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d903      	bls.n	80072f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072f6:	e1c1      	b.n	800767c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fa:	2200      	movs	r2, #0
 80072fc:	60bb      	str	r3, [r7, #8]
 80072fe:	60fa      	str	r2, [r7, #12]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	4a84      	ldr	r2, [pc, #528]	; (8007518 <UART_SetConfig+0x930>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	b29b      	uxth	r3, r3
 800730c:	2200      	movs	r2, #0
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	607a      	str	r2, [r7, #4]
 8007312:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007316:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800731a:	f7f8 ffdd 	bl	80002d8 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4610      	mov	r0, r2
 8007324:	4619      	mov	r1, r3
 8007326:	f04f 0200 	mov.w	r2, #0
 800732a:	f04f 0300 	mov.w	r3, #0
 800732e:	020b      	lsls	r3, r1, #8
 8007330:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007334:	0202      	lsls	r2, r0, #8
 8007336:	6979      	ldr	r1, [r7, #20]
 8007338:	6849      	ldr	r1, [r1, #4]
 800733a:	0849      	lsrs	r1, r1, #1
 800733c:	2000      	movs	r0, #0
 800733e:	460c      	mov	r4, r1
 8007340:	4605      	mov	r5, r0
 8007342:	eb12 0804 	adds.w	r8, r2, r4
 8007346:	eb43 0905 	adc.w	r9, r3, r5
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	469a      	mov	sl, r3
 8007352:	4693      	mov	fp, r2
 8007354:	4652      	mov	r2, sl
 8007356:	465b      	mov	r3, fp
 8007358:	4640      	mov	r0, r8
 800735a:	4649      	mov	r1, r9
 800735c:	f7f8 ffbc 	bl	80002d8 <__aeabi_uldivmod>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4613      	mov	r3, r2
 8007366:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800736e:	d308      	bcc.n	8007382 <UART_SetConfig+0x79a>
 8007370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007376:	d204      	bcs.n	8007382 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800737e:	60da      	str	r2, [r3, #12]
 8007380:	e17c      	b.n	800767c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007388:	e178      	b.n	800767c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007392:	f040 80c5 	bne.w	8007520 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007396:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800739a:	2b20      	cmp	r3, #32
 800739c:	dc48      	bgt.n	8007430 <UART_SetConfig+0x848>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	db7b      	blt.n	800749a <UART_SetConfig+0x8b2>
 80073a2:	2b20      	cmp	r3, #32
 80073a4:	d879      	bhi.n	800749a <UART_SetConfig+0x8b2>
 80073a6:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <UART_SetConfig+0x7c4>)
 80073a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ac:	08007437 	.word	0x08007437
 80073b0:	0800743f 	.word	0x0800743f
 80073b4:	0800749b 	.word	0x0800749b
 80073b8:	0800749b 	.word	0x0800749b
 80073bc:	08007447 	.word	0x08007447
 80073c0:	0800749b 	.word	0x0800749b
 80073c4:	0800749b 	.word	0x0800749b
 80073c8:	0800749b 	.word	0x0800749b
 80073cc:	08007457 	.word	0x08007457
 80073d0:	0800749b 	.word	0x0800749b
 80073d4:	0800749b 	.word	0x0800749b
 80073d8:	0800749b 	.word	0x0800749b
 80073dc:	0800749b 	.word	0x0800749b
 80073e0:	0800749b 	.word	0x0800749b
 80073e4:	0800749b 	.word	0x0800749b
 80073e8:	0800749b 	.word	0x0800749b
 80073ec:	08007467 	.word	0x08007467
 80073f0:	0800749b 	.word	0x0800749b
 80073f4:	0800749b 	.word	0x0800749b
 80073f8:	0800749b 	.word	0x0800749b
 80073fc:	0800749b 	.word	0x0800749b
 8007400:	0800749b 	.word	0x0800749b
 8007404:	0800749b 	.word	0x0800749b
 8007408:	0800749b 	.word	0x0800749b
 800740c:	0800749b 	.word	0x0800749b
 8007410:	0800749b 	.word	0x0800749b
 8007414:	0800749b 	.word	0x0800749b
 8007418:	0800749b 	.word	0x0800749b
 800741c:	0800749b 	.word	0x0800749b
 8007420:	0800749b 	.word	0x0800749b
 8007424:	0800749b 	.word	0x0800749b
 8007428:	0800749b 	.word	0x0800749b
 800742c:	0800748d 	.word	0x0800748d
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	d02e      	beq.n	8007492 <UART_SetConfig+0x8aa>
 8007434:	e031      	b.n	800749a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007436:	f7fb fff3 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 800743a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800743c:	e033      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800743e:	f7fc f805 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 8007442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007444:	e02f      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f7fd fa34 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007454:	e027      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007456:	f107 0318 	add.w	r3, r7, #24
 800745a:	4618      	mov	r0, r3
 800745c:	f7fd fb80 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007464:	e01f      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007466:	4b2d      	ldr	r3, [pc, #180]	; (800751c <UART_SetConfig+0x934>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d009      	beq.n	8007486 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007472:	4b2a      	ldr	r3, [pc, #168]	; (800751c <UART_SetConfig+0x934>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	08db      	lsrs	r3, r3, #3
 8007478:	f003 0303 	and.w	r3, r3, #3
 800747c:	4a24      	ldr	r2, [pc, #144]	; (8007510 <UART_SetConfig+0x928>)
 800747e:	fa22 f303 	lsr.w	r3, r2, r3
 8007482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007484:	e00f      	b.n	80074a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007486:	4b22      	ldr	r3, [pc, #136]	; (8007510 <UART_SetConfig+0x928>)
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800748a:	e00c      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800748c:	4b21      	ldr	r3, [pc, #132]	; (8007514 <UART_SetConfig+0x92c>)
 800748e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007490:	e009      	b.n	80074a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007498:	e005      	b.n	80074a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800749a:	2300      	movs	r3, #0
 800749c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 80e7 	beq.w	800767c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b2:	4a19      	ldr	r2, [pc, #100]	; (8007518 <UART_SetConfig+0x930>)
 80074b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074b8:	461a      	mov	r2, r3
 80074ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80074c0:	005a      	lsls	r2, r3, #1
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	085b      	lsrs	r3, r3, #1
 80074c8:	441a      	add	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	2b0f      	cmp	r3, #15
 80074d8:	d916      	bls.n	8007508 <UART_SetConfig+0x920>
 80074da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e0:	d212      	bcs.n	8007508 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f023 030f 	bic.w	r3, r3, #15
 80074ea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ee:	085b      	lsrs	r3, r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80074fa:	4313      	orrs	r3, r2
 80074fc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007504:	60da      	str	r2, [r3, #12]
 8007506:	e0b9      	b.n	800767c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800750e:	e0b5      	b.n	800767c <UART_SetConfig+0xa94>
 8007510:	03d09000 	.word	0x03d09000
 8007514:	003d0900 	.word	0x003d0900
 8007518:	08007d74 	.word	0x08007d74
 800751c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007520:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007524:	2b20      	cmp	r3, #32
 8007526:	dc49      	bgt.n	80075bc <UART_SetConfig+0x9d4>
 8007528:	2b00      	cmp	r3, #0
 800752a:	db7c      	blt.n	8007626 <UART_SetConfig+0xa3e>
 800752c:	2b20      	cmp	r3, #32
 800752e:	d87a      	bhi.n	8007626 <UART_SetConfig+0xa3e>
 8007530:	a201      	add	r2, pc, #4	; (adr r2, 8007538 <UART_SetConfig+0x950>)
 8007532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007536:	bf00      	nop
 8007538:	080075c3 	.word	0x080075c3
 800753c:	080075cb 	.word	0x080075cb
 8007540:	08007627 	.word	0x08007627
 8007544:	08007627 	.word	0x08007627
 8007548:	080075d3 	.word	0x080075d3
 800754c:	08007627 	.word	0x08007627
 8007550:	08007627 	.word	0x08007627
 8007554:	08007627 	.word	0x08007627
 8007558:	080075e3 	.word	0x080075e3
 800755c:	08007627 	.word	0x08007627
 8007560:	08007627 	.word	0x08007627
 8007564:	08007627 	.word	0x08007627
 8007568:	08007627 	.word	0x08007627
 800756c:	08007627 	.word	0x08007627
 8007570:	08007627 	.word	0x08007627
 8007574:	08007627 	.word	0x08007627
 8007578:	080075f3 	.word	0x080075f3
 800757c:	08007627 	.word	0x08007627
 8007580:	08007627 	.word	0x08007627
 8007584:	08007627 	.word	0x08007627
 8007588:	08007627 	.word	0x08007627
 800758c:	08007627 	.word	0x08007627
 8007590:	08007627 	.word	0x08007627
 8007594:	08007627 	.word	0x08007627
 8007598:	08007627 	.word	0x08007627
 800759c:	08007627 	.word	0x08007627
 80075a0:	08007627 	.word	0x08007627
 80075a4:	08007627 	.word	0x08007627
 80075a8:	08007627 	.word	0x08007627
 80075ac:	08007627 	.word	0x08007627
 80075b0:	08007627 	.word	0x08007627
 80075b4:	08007627 	.word	0x08007627
 80075b8:	08007619 	.word	0x08007619
 80075bc:	2b40      	cmp	r3, #64	; 0x40
 80075be:	d02e      	beq.n	800761e <UART_SetConfig+0xa36>
 80075c0:	e031      	b.n	8007626 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075c2:	f7fb ff2d 	bl	8003420 <HAL_RCC_GetPCLK1Freq>
 80075c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075c8:	e033      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ca:	f7fb ff3f 	bl	800344c <HAL_RCC_GetPCLK2Freq>
 80075ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075d0:	e02f      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fd f96e 	bl	80048b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80075dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075e0:	e027      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80075e2:	f107 0318 	add.w	r3, r7, #24
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fd faba 	bl	8004b60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80075f0:	e01f      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075f2:	4b2d      	ldr	r3, [pc, #180]	; (80076a8 <UART_SetConfig+0xac0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f003 0320 	and.w	r3, r3, #32
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d009      	beq.n	8007612 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80075fe:	4b2a      	ldr	r3, [pc, #168]	; (80076a8 <UART_SetConfig+0xac0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	08db      	lsrs	r3, r3, #3
 8007604:	f003 0303 	and.w	r3, r3, #3
 8007608:	4a28      	ldr	r2, [pc, #160]	; (80076ac <UART_SetConfig+0xac4>)
 800760a:	fa22 f303 	lsr.w	r3, r2, r3
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007610:	e00f      	b.n	8007632 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007612:	4b26      	ldr	r3, [pc, #152]	; (80076ac <UART_SetConfig+0xac4>)
 8007614:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007616:	e00c      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007618:	4b25      	ldr	r3, [pc, #148]	; (80076b0 <UART_SetConfig+0xac8>)
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800761c:	e009      	b.n	8007632 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007624:	e005      	b.n	8007632 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007630:	bf00      	nop
    }

    if (pclk != 0U)
 8007632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007634:	2b00      	cmp	r3, #0
 8007636:	d021      	beq.n	800767c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763c:	4a1d      	ldr	r2, [pc, #116]	; (80076b4 <UART_SetConfig+0xacc>)
 800763e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007642:	461a      	mov	r2, r3
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	fbb3 f2f2 	udiv	r2, r3, r2
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	085b      	lsrs	r3, r3, #1
 8007650:	441a      	add	r2, r3
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	fbb2 f3f3 	udiv	r3, r2, r3
 800765a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d909      	bls.n	8007676 <UART_SetConfig+0xa8e>
 8007662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007668:	d205      	bcs.n	8007676 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	b29a      	uxth	r2, r3
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	60da      	str	r2, [r3, #12]
 8007674:	e002      	b.n	800767c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	2201      	movs	r2, #1
 8007680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2201      	movs	r2, #1
 8007688:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2200      	movs	r2, #0
 8007690:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2200      	movs	r2, #0
 8007696:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007698:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800769c:	4618      	mov	r0, r3
 800769e:	3748      	adds	r7, #72	; 0x48
 80076a0:	46bd      	mov	sp, r7
 80076a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a6:	bf00      	nop
 80076a8:	58024400 	.word	0x58024400
 80076ac:	03d09000 	.word	0x03d09000
 80076b0:	003d0900 	.word	0x003d0900
 80076b4:	08007d74 	.word	0x08007d74

080076b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e6:	f003 0302 	and.w	r3, r3, #2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	430a      	orrs	r2, r1
 8007702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007708:	f003 0304 	and.w	r3, r3, #4
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772a:	f003 0308 	and.w	r3, r3, #8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	430a      	orrs	r2, r1
 8007768:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776e:	f003 0320 	and.w	r3, r3, #32
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	689b      	ldr	r3, [r3, #8]
 800777c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	430a      	orrs	r2, r1
 800778a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d01a      	beq.n	80077ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	430a      	orrs	r2, r1
 80077ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077b6:	d10a      	bne.n	80077ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00a      	beq.n	80077f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	430a      	orrs	r2, r1
 80077ee:	605a      	str	r2, [r3, #4]
  }
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b098      	sub	sp, #96	; 0x60
 8007800:	af02      	add	r7, sp, #8
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800780c:	f7fa face 	bl	8001dac <HAL_GetTick>
 8007810:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 0308 	and.w	r3, r3, #8
 800781c:	2b08      	cmp	r3, #8
 800781e:	d12f      	bne.n	8007880 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007820:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007828:	2200      	movs	r2, #0
 800782a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f88e 	bl	8007950 <UART_WaitOnFlagUntilTimeout>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d022      	beq.n	8007880 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800784e:	653b      	str	r3, [r7, #80]	; 0x50
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007858:	647b      	str	r3, [r7, #68]	; 0x44
 800785a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800785e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e6      	bne.n	800783a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2220      	movs	r2, #32
 8007870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e063      	b.n	8007948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b04      	cmp	r3, #4
 800788c:	d149      	bne.n	8007922 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800788e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007892:	9300      	str	r3, [sp, #0]
 8007894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007896:	2200      	movs	r2, #0
 8007898:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f857 	bl	8007950 <UART_WaitOnFlagUntilTimeout>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d03c      	beq.n	8007922 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	623b      	str	r3, [r7, #32]
   return(result);
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078c6:	633b      	str	r3, [r7, #48]	; 0x30
 80078c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ce:	e841 2300 	strex	r3, r2, [r1]
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1e6      	bne.n	80078a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3308      	adds	r3, #8
 80078e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	e853 3f00 	ldrex	r3, [r3]
 80078e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	3308      	adds	r3, #8
 80078f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80078fa:	61fa      	str	r2, [r7, #28]
 80078fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078fe:	69b9      	ldr	r1, [r7, #24]
 8007900:	69fa      	ldr	r2, [r7, #28]
 8007902:	e841 2300 	strex	r3, r2, [r1]
 8007906:	617b      	str	r3, [r7, #20]
   return(result);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d1e5      	bne.n	80078da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2220      	movs	r2, #32
 8007912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e012      	b.n	8007948 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2220      	movs	r2, #32
 800792e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	3758      	adds	r7, #88	; 0x58
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	603b      	str	r3, [r7, #0]
 800795c:	4613      	mov	r3, r2
 800795e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007960:	e049      	b.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007962:	69bb      	ldr	r3, [r7, #24]
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d045      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800796a:	f7fa fa1f 	bl	8001dac <HAL_GetTick>
 800796e:	4602      	mov	r2, r0
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	1ad3      	subs	r3, r2, r3
 8007974:	69ba      	ldr	r2, [r7, #24]
 8007976:	429a      	cmp	r2, r3
 8007978:	d302      	bcc.n	8007980 <UART_WaitOnFlagUntilTimeout+0x30>
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d101      	bne.n	8007984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e048      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0304 	and.w	r3, r3, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	d031      	beq.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	f003 0308 	and.w	r3, r3, #8
 800799c:	2b08      	cmp	r3, #8
 800799e:	d110      	bne.n	80079c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2208      	movs	r2, #8
 80079a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 f839 	bl	8007a20 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2208      	movs	r2, #8
 80079b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e029      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d0:	d111      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f81f 	bl	8007a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2220      	movs	r2, #32
 80079e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e00f      	b.n	8007a16 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	4013      	ands	r3, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	bf0c      	ite	eq
 8007a06:	2301      	moveq	r3, #1
 8007a08:	2300      	movne	r3, #0
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d0a6      	beq.n	8007962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3710      	adds	r7, #16
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
	...

08007a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b095      	sub	sp, #84	; 0x54
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	461a      	mov	r2, r3
 8007a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a46:	643b      	str	r3, [r7, #64]	; 0x40
 8007a48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a4e:	e841 2300 	strex	r3, r2, [r1]
 8007a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1e6      	bne.n	8007a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	3308      	adds	r3, #8
 8007a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6a:	69fa      	ldr	r2, [r7, #28]
 8007a6c:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <UART_EndRxTransfer+0xc8>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3308      	adds	r3, #8
 8007a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e5      	bne.n	8007a5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d118      	bne.n	8007ac8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	6979      	ldr	r1, [r7, #20]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2220      	movs	r2, #32
 8007acc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007adc:	bf00      	nop
 8007ade:	3754      	adds	r7, #84	; 0x54
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	effffffe 	.word	0xeffffffe

08007aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e027      	b.n	8007b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	; 0x24
 8007b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e02d      	b.n	8007bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2224      	movs	r2, #36	; 0x24
 8007b82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f850 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e02d      	b.n	8007c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	; 0x24
 8007bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f812 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d108      	bne.n	8007c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c78:	e031      	b.n	8007cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c7a:	2310      	movs	r3, #16
 8007c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c7e:	2310      	movs	r3, #16
 8007c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	0e5b      	lsrs	r3, r3, #25
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0f5b      	lsrs	r3, r3, #29
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	7b3a      	ldrb	r2, [r7, #12]
 8007ca6:	4911      	ldr	r1, [pc, #68]	; (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007ca8:	5c8a      	ldrb	r2, [r1, r2]
 8007caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cae:	7b3a      	ldrb	r2, [r7, #12]
 8007cb0:	490f      	ldr	r1, [pc, #60]	; (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	7b7a      	ldrb	r2, [r7, #13]
 8007cc4:	4909      	ldr	r1, [pc, #36]	; (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007cc6:	5c8a      	ldrb	r2, [r1, r2]
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ccc:	7b7a      	ldrb	r2, [r7, #13]
 8007cce:	4908      	ldr	r1, [pc, #32]	; (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	08007d8c 	.word	0x08007d8c
 8007cf0:	08007d94 	.word	0x08007d94

08007cf4 <__libc_init_array>:
 8007cf4:	b570      	push	{r4, r5, r6, lr}
 8007cf6:	4d0d      	ldr	r5, [pc, #52]	; (8007d2c <__libc_init_array+0x38>)
 8007cf8:	4c0d      	ldr	r4, [pc, #52]	; (8007d30 <__libc_init_array+0x3c>)
 8007cfa:	1b64      	subs	r4, r4, r5
 8007cfc:	10a4      	asrs	r4, r4, #2
 8007cfe:	2600      	movs	r6, #0
 8007d00:	42a6      	cmp	r6, r4
 8007d02:	d109      	bne.n	8007d18 <__libc_init_array+0x24>
 8007d04:	4d0b      	ldr	r5, [pc, #44]	; (8007d34 <__libc_init_array+0x40>)
 8007d06:	4c0c      	ldr	r4, [pc, #48]	; (8007d38 <__libc_init_array+0x44>)
 8007d08:	f000 f820 	bl	8007d4c <_init>
 8007d0c:	1b64      	subs	r4, r4, r5
 8007d0e:	10a4      	asrs	r4, r4, #2
 8007d10:	2600      	movs	r6, #0
 8007d12:	42a6      	cmp	r6, r4
 8007d14:	d105      	bne.n	8007d22 <__libc_init_array+0x2e>
 8007d16:	bd70      	pop	{r4, r5, r6, pc}
 8007d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d1c:	4798      	blx	r3
 8007d1e:	3601      	adds	r6, #1
 8007d20:	e7ee      	b.n	8007d00 <__libc_init_array+0xc>
 8007d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d26:	4798      	blx	r3
 8007d28:	3601      	adds	r6, #1
 8007d2a:	e7f2      	b.n	8007d12 <__libc_init_array+0x1e>
 8007d2c:	08007da4 	.word	0x08007da4
 8007d30:	08007da4 	.word	0x08007da4
 8007d34:	08007da4 	.word	0x08007da4
 8007d38:	08007da8 	.word	0x08007da8

08007d3c <memset>:
 8007d3c:	4402      	add	r2, r0
 8007d3e:	4603      	mov	r3, r0
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d100      	bne.n	8007d46 <memset+0xa>
 8007d44:	4770      	bx	lr
 8007d46:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4a:	e7f9      	b.n	8007d40 <memset+0x4>

08007d4c <_init>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	bf00      	nop
 8007d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d52:	bc08      	pop	{r3}
 8007d54:	469e      	mov	lr, r3
 8007d56:	4770      	bx	lr

08007d58 <_fini>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr
