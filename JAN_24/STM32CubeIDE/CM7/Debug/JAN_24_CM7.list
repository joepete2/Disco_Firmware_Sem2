
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ad4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008d74  08008d74  00018d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008de8  08008de8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008de8  08008de8  00018de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008df0  08008df0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008df0  08008df0  00018df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008df4  08008df4  00018df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  08008df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  24000078  08008e70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000310  08008e70  00020310  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018aa3  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002629  00000000  00000000  00038b49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  0003b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b048  00000000  00000000  0003d520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e4e  00000000  00000000  00078568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018959c  00000000  00000000  0008f3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218952  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000524c  00000000  00000000  002189a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008d5c 	.word	0x08008d5c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	08008d5c 	.word	0x08008d5c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000688:	b0a6      	sub	sp, #152	; 0x98
 800068a:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800068c:	4bb2      	ldr	r3, [pc, #712]	; (8000958 <main+0x2d4>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d11b      	bne.n	80006d0 <main+0x4c>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000698:	f3bf 8f4f 	dsb	sy
}
 800069c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800069e:	f3bf 8f6f 	isb	sy
}
 80006a2:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006a4:	4bac      	ldr	r3, [pc, #688]	; (8000958 <main+0x2d4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ac:	f3bf 8f4f 	dsb	sy
}
 80006b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b2:	f3bf 8f6f 	isb	sy
}
 80006b6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006b8:	4ba7      	ldr	r3, [pc, #668]	; (8000958 <main+0x2d4>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	4aa6      	ldr	r2, [pc, #664]	; (8000958 <main+0x2d4>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006c4:	f3bf 8f4f 	dsb	sy
}
 80006c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006ca:	f3bf 8f6f 	isb	sy
}
 80006ce:	e000      	b.n	80006d2 <main+0x4e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006d0:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006d2:	4ba1      	ldr	r3, [pc, #644]	; (8000958 <main+0x2d4>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d13f      	bne.n	800075e <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006de:	4b9e      	ldr	r3, [pc, #632]	; (8000958 <main+0x2d4>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006e6:	f3bf 8f4f 	dsb	sy
}
 80006ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006ec:	4b9a      	ldr	r3, [pc, #616]	; (8000958 <main+0x2d4>)
 80006ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80006f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80006f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80006fa:	0b5b      	lsrs	r3, r3, #13
 80006fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000704:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800070e:	67fb      	str	r3, [r7, #124]	; 0x7c
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000710:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000714:	015a      	lsls	r2, r3, #5
 8000716:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800071a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800071c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800071e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000720:	498d      	ldr	r1, [pc, #564]	; (8000958 <main+0x2d4>)
 8000722:	4313      	orrs	r3, r2
 8000724:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800072a:	1e5a      	subs	r2, r3, #1
 800072c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1ee      	bne.n	8000710 <main+0x8c>
    } while(sets-- != 0U);
 8000732:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000736:	1e5a      	subs	r2, r3, #1
 8000738:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1e1      	bne.n	8000704 <main+0x80>
  __ASM volatile ("dsb 0xF":::"memory");
 8000740:	f3bf 8f4f 	dsb	sy
}
 8000744:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000746:	4b84      	ldr	r3, [pc, #528]	; (8000958 <main+0x2d4>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a83      	ldr	r2, [pc, #524]	; (8000958 <main+0x2d4>)
 800074c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000750:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000752:	f3bf 8f4f 	dsb	sy
}
 8000756:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000758:	f3bf 8f6f 	isb	sy
}
 800075c:	e000      	b.n	8000760 <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800075e:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f001 fa0e 	bl	8001b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 fa10 	bl	8000b88 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000768:	4b7c      	ldr	r3, [pc, #496]	; (800095c <main+0x2d8>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076e:	4a7b      	ldr	r2, [pc, #492]	; (800095c <main+0x2d8>)
 8000770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000778:	4b78      	ldr	r3, [pc, #480]	; (800095c <main+0x2d8>)
 800077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000786:	f000 fc97 	bl	80010b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 800078a:	f000 fa77 	bl	8000c7c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800078e:	f000 fc47 	bl	8001020 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000792:	f000 fb77 	bl	8000e84 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000796:	f000 fac9 	bl	8000d2c <MX_TIM1_Init>
  MX_TIM4_Init();
 800079a:	f000 fbbf 	bl	8000f1c <MX_TIM4_Init>
  MX_TIM16_Init();
 800079e:	f000 fc17 	bl	8000fd0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007a2:	486f      	ldr	r0, [pc, #444]	; (8000960 <main+0x2dc>)
 80007a4:	f005 fa18 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80007a8:	486e      	ldr	r0, [pc, #440]	; (8000964 <main+0x2e0>)
 80007aa:	f005 fa15 	bl	8005bd8 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80007ae:	2100      	movs	r1, #0
 80007b0:	486d      	ldr	r0, [pc, #436]	; (8000968 <main+0x2e4>)
 80007b2:	f005 fb0f 	bl	8005dd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80007b6:	2104      	movs	r1, #4
 80007b8:	486b      	ldr	r0, [pc, #428]	; (8000968 <main+0x2e4>)
 80007ba:	f005 fb0b 	bl	8005dd4 <HAL_TIM_PWM_Start>


  //TIM1->CCR1 = (htim1.Init.Period *1);
  TIM4->CCR1 = 5;//(htim4.Init.Period / 2);
 80007be:	4b6b      	ldr	r3, [pc, #428]	; (800096c <main+0x2e8>)
 80007c0:	2205      	movs	r2, #5
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <main+0x2e8>)
 80007c6:	2205      	movs	r2, #5
 80007c8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM16->CCR1 = 5;//(htim16.Init.Period *1);
 80007ca:	4b69      	ldr	r3, [pc, #420]	; (8000970 <main+0x2ec>)
 80007cc:	2205      	movs	r2, #5
 80007ce:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  const uint16_t writeBuf1 = 0b0000100010000000;
 80007d0:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80007d4:	827b      	strh	r3, [r7, #18]
  const uint16_t writeBuf2 = 0b0000010010000000;
 80007d6:	f44f 6390 	mov.w	r3, #1152	; 0x480
 80007da:	823b      	strh	r3, [r7, #16]
  const uint16_t writeBuf3 = 0b0000110010000000;
 80007dc:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80007e0:	81fb      	strh	r3, [r7, #14]
  const uint16_t writeBuf4 = 0b0000001010000000;
 80007e2:	f44f 7320 	mov.w	r3, #640	; 0x280
 80007e6:	81bb      	strh	r3, [r7, #12]
  const uint16_t writeBuf5 = 0b0000101010000000;
 80007e8:	f44f 6328 	mov.w	r3, #2688	; 0xa80
 80007ec:	817b      	strh	r3, [r7, #10]
  const uint16_t writeBuf6 = 0b0000011010000000;
 80007ee:	f44f 63d0 	mov.w	r3, #1664	; 0x680
 80007f2:	813b      	strh	r3, [r7, #8]
  uint16_t ADCData[needed];
 80007f4:	4b5f      	ldr	r3, [pc, #380]	; (8000974 <main+0x2f0>)
 80007f6:	6819      	ldr	r1, [r3, #0]
 80007f8:	1e4b      	subs	r3, r1, #1
 80007fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80007fe:	460a      	mov	r2, r1
 8000800:	2300      	movs	r3, #0
 8000802:	4690      	mov	r8, r2
 8000804:	4699      	mov	r9, r3
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	f04f 0300 	mov.w	r3, #0
 800080e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000812:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000816:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800081a:	460a      	mov	r2, r1
 800081c:	2300      	movs	r3, #0
 800081e:	4614      	mov	r4, r2
 8000820:	461d      	mov	r5, r3
 8000822:	f04f 0200 	mov.w	r2, #0
 8000826:	f04f 0300 	mov.w	r3, #0
 800082a:	012b      	lsls	r3, r5, #4
 800082c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000830:	0122      	lsls	r2, r4, #4
 8000832:	460b      	mov	r3, r1
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	3307      	adds	r3, #7
 8000838:	08db      	lsrs	r3, r3, #3
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	ebad 0d03 	sub.w	sp, sp, r3
 8000840:	466b      	mov	r3, sp
 8000842:	3301      	adds	r3, #1
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	4849      	ldr	r0, [pc, #292]	; (8000978 <main+0x2f4>)
 8000852:	f001 fd17 	bl	8002284 <HAL_GPIO_WritePin>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 8000856:	f107 0112 	add.w	r1, r7, #18
 800085a:	2364      	movs	r3, #100	; 0x64
 800085c:	2201      	movs	r2, #1
 800085e:	4847      	ldr	r0, [pc, #284]	; (800097c <main+0x2f8>)
 8000860:	f004 fcee 	bl	8005240 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 8000864:	f107 0110 	add.w	r1, r7, #16
 8000868:	2364      	movs	r3, #100	; 0x64
 800086a:	2201      	movs	r2, #1
 800086c:	4843      	ldr	r0, [pc, #268]	; (800097c <main+0x2f8>)
 800086e:	f004 fce7 	bl	8005240 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 8000872:	f107 010e 	add.w	r1, r7, #14
 8000876:	2364      	movs	r3, #100	; 0x64
 8000878:	2201      	movs	r2, #1
 800087a:	4840      	ldr	r0, [pc, #256]	; (800097c <main+0x2f8>)
 800087c:	f004 fce0 	bl	8005240 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000880:	f107 010c 	add.w	r1, r7, #12
 8000884:	2364      	movs	r3, #100	; 0x64
 8000886:	2201      	movs	r2, #1
 8000888:	483c      	ldr	r0, [pc, #240]	; (800097c <main+0x2f8>)
 800088a:	f004 fcd9 	bl	8005240 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 800088e:	f107 010a 	add.w	r1, r7, #10
 8000892:	2364      	movs	r3, #100	; 0x64
 8000894:	2201      	movs	r2, #1
 8000896:	4839      	ldr	r0, [pc, #228]	; (800097c <main+0x2f8>)
 8000898:	f004 fcd2 	bl	8005240 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 800089c:	f107 0108 	add.w	r1, r7, #8
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	2201      	movs	r2, #1
 80008a4:	4835      	ldr	r0, [pc, #212]	; (800097c <main+0x2f8>)
 80008a6:	f004 fccb 	bl	8005240 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008aa:	2201      	movs	r2, #1
 80008ac:	2110      	movs	r1, #16
 80008ae:	4832      	ldr	r0, [pc, #200]	; (8000978 <main+0x2f4>)
 80008b0:	f001 fce8 	bl	8002284 <HAL_GPIO_WritePin>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  //hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  //char spi_read_buf[20];

  state = collect;
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <main+0x2fc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <main+0x2fc>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b02      	cmp	r3, #2
 80008c0:	f000 80dd 	beq.w	8000a7e <main+0x3fa>
 80008c4:	2b02      	cmp	r3, #2
 80008c6:	dcf8      	bgt.n	80008ba <main+0x236>
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <main+0x24c>
 80008cc:	2b01      	cmp	r3, #1
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
	  		    }
				break;
	  	  case wait:

	  		  	break;
 80008ce:	e13a      	b.n	8000b46 <main+0x4c2>
	  		    if (counter == 200) // reset after one data collection cycle
 80008d0:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <main+0x300>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2bc8      	cmp	r3, #200	; 0xc8
 80008d6:	d109      	bne.n	80008ec <main+0x268>
					counter = 0;
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <main+0x300>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
					counterPrevious = 0;
 80008de:	4b2a      	ldr	r3, [pc, #168]	; (8000988 <main+0x304>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
					state = wait;
 80008e4:	4b26      	ldr	r3, [pc, #152]	; (8000980 <main+0x2fc>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e0be      	b.n	8000a6a <main+0x3e6>
	  		    else if (counter == 0) // set spec reset pin high to tell h-chip to send data
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <main+0x300>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d10b      	bne.n	800090c <main+0x288>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_SET);
 80008f4:	2201      	movs	r2, #1
 80008f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008fa:	4824      	ldr	r0, [pc, #144]	; (800098c <main+0x308>)
 80008fc:	f001 fcc2 	bl	8002284 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, VNA_TRIG_Pin,GPIO_PIN_SET);
 8000900:	2201      	movs	r2, #1
 8000902:	2180      	movs	r1, #128	; 0x80
 8000904:	481c      	ldr	r0, [pc, #112]	; (8000978 <main+0x2f4>)
 8000906:	f001 fcbd 	bl	8002284 <HAL_GPIO_WritePin>
 800090a:	e0ae      	b.n	8000a6a <main+0x3e6>
	  		    else if (counter == 10) // set spec reset back low
 800090c:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <main+0x300>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b0a      	cmp	r3, #10
 8000912:	d109      	bne.n	8000928 <main+0x2a4>
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_RESET);
 8000914:	2200      	movs	r2, #0
 8000916:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <main+0x308>)
 800091c:	f001 fcb2 	bl	8002284 <HAL_GPIO_WritePin>
					optReady = true;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <main+0x30c>)
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e0a0      	b.n	8000a6a <main+0x3e6>
				else if (optReady && (counter > counterPrevious) && (collected < needed) && (counter > 14)) // wait for AD_SP from the h-chip then uses spi2 to read from adc
 8000928:	4b19      	ldr	r3, [pc, #100]	; (8000990 <main+0x30c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d069      	beq.n	8000a04 <main+0x380>
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <main+0x300>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b14      	ldr	r3, [pc, #80]	; (8000988 <main+0x304>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	429a      	cmp	r2, r3
 800093a:	dd63      	ble.n	8000a04 <main+0x380>
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <main+0x310>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <main+0x2f0>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	da5d      	bge.n	8000a04 <main+0x380>
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <main+0x300>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b0e      	cmp	r3, #14
 800094e:	dd59      	ble.n	8000a04 <main+0x380>
					for(int i = 0; i < 12; i++)
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000956:	e029      	b.n	80009ac <main+0x328>
 8000958:	e000ed00 	.word	0xe000ed00
 800095c:	58024400 	.word	0x58024400
 8000960:	24000168 	.word	0x24000168
 8000964:	24000200 	.word	0x24000200
 8000968:	240001b4 	.word	0x240001b4
 800096c:	40000800 	.word	0x40000800
 8000970:	40014400 	.word	0x40014400
 8000974:	24000000 	.word	0x24000000
 8000978:	58020400 	.word	0x58020400
 800097c:	24000094 	.word	0x24000094
 8000980:	240002f4 	.word	0x240002f4
 8000984:	240002e8 	.word	0x240002e8
 8000988:	240002f0 	.word	0x240002f0
 800098c:	58020c00 	.word	0x58020c00
 8000990:	240002e0 	.word	0x240002e0
 8000994:	240002ec 	.word	0x240002ec
						HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 8000998:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099c:	486a      	ldr	r0, [pc, #424]	; (8000b48 <main+0x4c4>)
 800099e:	f001 fc8a 	bl	80022b6 <HAL_GPIO_TogglePin>
					for(int i = 0; i < 12; i++)
 80009a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009a6:	3301      	adds	r3, #1
 80009a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80009ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80009b0:	2b0b      	cmp	r3, #11
 80009b2:	ddf1      	ble.n	8000998 <main+0x314>
					HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	4864      	ldr	r0, [pc, #400]	; (8000b4c <main+0x4c8>)
 80009ba:	f001 fc63 	bl	8002284 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_destroy_buf, 1, 100);
 80009be:	2364      	movs	r3, #100	; 0x64
 80009c0:	2201      	movs	r2, #1
 80009c2:	4963      	ldr	r1, [pc, #396]	; (8000b50 <main+0x4cc>)
 80009c4:	4863      	ldr	r0, [pc, #396]	; (8000b54 <main+0x4d0>)
 80009c6:	f004 fe37 	bl	8005638 <HAL_SPI_Receive>
				    HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	485f      	ldr	r0, [pc, #380]	; (8000b4c <main+0x4c8>)
 80009d0:	f001 fc58 	bl	8002284 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_read_buf, 1, 100);
 80009d4:	2364      	movs	r3, #100	; 0x64
 80009d6:	2201      	movs	r2, #1
 80009d8:	495f      	ldr	r1, [pc, #380]	; (8000b58 <main+0x4d4>)
 80009da:	485e      	ldr	r0, [pc, #376]	; (8000b54 <main+0x4d0>)
 80009dc:	f004 fe2c 	bl	8005638 <HAL_SPI_Receive>
				    counterPrevious = counter;
 80009e0:	4b5e      	ldr	r3, [pc, #376]	; (8000b5c <main+0x4d8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a5e      	ldr	r2, [pc, #376]	; (8000b60 <main+0x4dc>)
 80009e6:	6013      	str	r3, [r2, #0]
				    ADCData[collected] = spi_read_buf;
 80009e8:	4b5e      	ldr	r3, [pc, #376]	; (8000b64 <main+0x4e0>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b5a      	ldr	r3, [pc, #360]	; (8000b58 <main+0x4d4>)
 80009ee:	8819      	ldrh	r1, [r3, #0]
 80009f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80009f4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				    collected++;
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <main+0x4e0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a59      	ldr	r2, [pc, #356]	; (8000b64 <main+0x4e0>)
 8000a00:	6013      	str	r3, [r2, #0]
 8000a02:	e032      	b.n	8000a6a <main+0x3e6>
				else if (collected == needed)
 8000a04:	4b57      	ldr	r3, [pc, #348]	; (8000b64 <main+0x4e0>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b57      	ldr	r3, [pc, #348]	; (8000b68 <main+0x4e4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d12c      	bne.n	8000a6a <main+0x3e6>
					uart_buf_len = sprintf(uart_buf, "%d", ADCData[40]);
 8000a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000a18:	461a      	mov	r2, r3
 8000a1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a1e:	4953      	ldr	r1, [pc, #332]	; (8000b6c <main+0x4e8>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f007 fd2d 	bl	8008480 <siprintf>
 8000a26:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 8000a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	484e      	ldr	r0, [pc, #312]	; (8000b70 <main+0x4ec>)
 8000a38:	f006 fbdc 	bl	80071f4 <HAL_UART_Transmit>
					uart_buf_len = sprintf(uart_buf, "\n");
 8000a3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a40:	494c      	ldr	r1, [pc, #304]	; (8000b74 <main+0x4f0>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f007 fd1c 	bl	8008480 <siprintf>
 8000a48:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
 8000a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	4845      	ldr	r0, [pc, #276]	; (8000b70 <main+0x4ec>)
 8000a5a:	f006 fbcb 	bl	80071f4 <HAL_UART_Transmit>
					collected = 0;
 8000a5e:	4b41      	ldr	r3, [pc, #260]	; (8000b64 <main+0x4e0>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
					optReady = false;
 8000a64:	4b44      	ldr	r3, [pc, #272]	; (8000b78 <main+0x4f4>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
	  		    if (counter == 20)
 8000a6a:	4b3c      	ldr	r3, [pc, #240]	; (8000b5c <main+0x4d8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b14      	cmp	r3, #20
 8000a70:	d168      	bne.n	8000b44 <main+0x4c0>
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4841      	ldr	r0, [pc, #260]	; (8000b7c <main+0x4f8>)
 8000a78:	f001 fc04 	bl	8002284 <HAL_GPIO_WritePin>
				break;
 8000a7c:	e062      	b.n	8000b44 <main+0x4c0>

	  	  case test:
	  		  HAL_TIM_Base_Stop_IT(&htim2);
 8000a7e:	4840      	ldr	r0, [pc, #256]	; (8000b80 <main+0x4fc>)
 8000a80:	f005 f922 	bl	8005cc8 <HAL_TIM_Base_Stop_IT>
	  		  HAL_TIM_Base_Stop_IT(&htim16);
 8000a84:	483f      	ldr	r0, [pc, #252]	; (8000b84 <main+0x500>)
 8000a86:	f005 f91f 	bl	8005cc8 <HAL_TIM_Base_Stop_IT>


	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	483b      	ldr	r0, [pc, #236]	; (8000b7c <main+0x4f8>)
 8000a90:	f001 fbf8 	bl	8002284 <HAL_GPIO_WritePin>
	  		  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <main+0x4d0>)
 8000a96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a9a:	61da      	str	r2, [r3, #28]
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 8000a9c:	f107 0112 	add.w	r1, r7, #18
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	482b      	ldr	r0, [pc, #172]	; (8000b54 <main+0x4d0>)
 8000aa6:	f004 fbcb 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 8000aaa:	f107 0110 	add.w	r1, r7, #16
 8000aae:	2364      	movs	r3, #100	; 0x64
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	4828      	ldr	r0, [pc, #160]	; (8000b54 <main+0x4d0>)
 8000ab4:	f004 fbc4 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 8000ab8:	f107 010e 	add.w	r1, r7, #14
 8000abc:	2364      	movs	r3, #100	; 0x64
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4824      	ldr	r0, [pc, #144]	; (8000b54 <main+0x4d0>)
 8000ac2:	f004 fbbd 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000ac6:	f107 010c 	add.w	r1, r7, #12
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	4821      	ldr	r0, [pc, #132]	; (8000b54 <main+0x4d0>)
 8000ad0:	f004 fbb6 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000ad4:	f107 010a 	add.w	r1, r7, #10
 8000ad8:	2364      	movs	r3, #100	; 0x64
 8000ada:	2201      	movs	r2, #1
 8000adc:	481d      	ldr	r0, [pc, #116]	; (8000b54 <main+0x4d0>)
 8000ade:	f004 fbaf 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 8000ae2:	f107 0108 	add.w	r1, r7, #8
 8000ae6:	2364      	movs	r3, #100	; 0x64
 8000ae8:	2201      	movs	r2, #1
 8000aea:	481a      	ldr	r0, [pc, #104]	; (8000b54 <main+0x4d0>)
 8000aec:	f004 fba8 	bl	8005240 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	4821      	ldr	r0, [pc, #132]	; (8000b7c <main+0x4f8>)
 8000af6:	f001 fbc5 	bl	8002284 <HAL_GPIO_WritePin>
	  		  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <main+0x4d0>)
 8000afc:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000b00:	61da      	str	r2, [r3, #28]
	  		  //hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
 8000b02:	2140      	movs	r1, #64	; 0x40
 8000b04:	4811      	ldr	r0, [pc, #68]	; (8000b4c <main+0x4c8>)
 8000b06:	f001 fbd6 	bl	80022b6 <HAL_GPIO_TogglePin>
	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <main+0x4d4>)
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	2364      	movs	r3, #100	; 0x64
 8000b12:	2201      	movs	r2, #1
 8000b14:	480f      	ldr	r0, [pc, #60]	; (8000b54 <main+0x4d0>)
 8000b16:	f004 fd8f 	bl	8005638 <HAL_SPI_Receive>
	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
 8000b1a:	2140      	movs	r1, #64	; 0x40
 8000b1c:	480b      	ldr	r0, [pc, #44]	; (8000b4c <main+0x4c8>)
 8000b1e:	f001 fbca 	bl	80022b6 <HAL_GPIO_TogglePin>
	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <main+0x4d4>)
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	4619      	mov	r1, r3
 8000b28:	2364      	movs	r3, #100	; 0x64
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	4809      	ldr	r0, [pc, #36]	; (8000b54 <main+0x4d0>)
 8000b2e:	f004 fd83 	bl	8005638 <HAL_SPI_Receive>
	  		  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
 8000b32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b36:	4804      	ldr	r0, [pc, #16]	; (8000b48 <main+0x4c4>)
 8000b38:	f001 fbbd 	bl	80022b6 <HAL_GPIO_TogglePin>
	  		  HAL_Delay(50);
 8000b3c:	2032      	movs	r0, #50	; 0x32
 8000b3e:	f001 f8b1 	bl	8001ca4 <HAL_Delay>

	  		  break;
 8000b42:	e000      	b.n	8000b46 <main+0x4c2>
				break;
 8000b44:	bf00      	nop
	  switch(state){
 8000b46:	e6b8      	b.n	80008ba <main+0x236>
 8000b48:	58022000 	.word	0x58022000
 8000b4c:	58020000 	.word	0x58020000
 8000b50:	240002e4 	.word	0x240002e4
 8000b54:	24000094 	.word	0x24000094
 8000b58:	240002e2 	.word	0x240002e2
 8000b5c:	240002e8 	.word	0x240002e8
 8000b60:	240002f0 	.word	0x240002f0
 8000b64:	240002ec 	.word	0x240002ec
 8000b68:	24000000 	.word	0x24000000
 8000b6c:	08008d74 	.word	0x08008d74
 8000b70:	2400024c 	.word	0x2400024c
 8000b74:	08008d78 	.word	0x08008d78
 8000b78:	240002e0 	.word	0x240002e0
 8000b7c:	58020400 	.word	0x58020400
 8000b80:	24000168 	.word	0x24000168
 8000b84:	24000200 	.word	0x24000200

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b09c      	sub	sp, #112	; 0x70
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b92:	224c      	movs	r2, #76	; 0x4c
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 fc6a 	bl	8008470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2220      	movs	r2, #32
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f007 fc64 	bl	8008470 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000ba8:	2004      	movs	r0, #4
 8000baa:	f001 fbb9 	bl	8002320 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <SystemClock_Config+0xec>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <SystemClock_Config+0xec>)
 8000bb8:	f023 0301 	bic.w	r3, r3, #1
 8000bbc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bbe:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <SystemClock_Config+0xec>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <SystemClock_Config+0xf0>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a2a      	ldr	r2, [pc, #168]	; (8000c78 <SystemClock_Config+0xf0>)
 8000bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <SystemClock_Config+0xf0>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000be0:	bf00      	nop
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <SystemClock_Config+0xf0>)
 8000be4:	699b      	ldr	r3, [r3, #24]
 8000be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bee:	d1f8      	bne.n	8000be2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c02:	2305      	movs	r3, #5
 8000c04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000c06:	23a0      	movs	r3, #160	; 0xa0
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000c12:	2304      	movs	r3, #4
 8000c14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c16:	2308      	movs	r3, #8
 8000c18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c26:	4618      	mov	r0, r3
 8000c28:	f001 fbd4 	bl	80023d4 <HAL_RCC_OscConfig>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c32:	f000 fc31 	bl	8001498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	233f      	movs	r3, #63	; 0x3f
 8000c38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c42:	2308      	movs	r3, #8
 8000c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c46:	2340      	movs	r3, #64	; 0x40
 8000c48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c4a:	2340      	movs	r3, #64	; 0x40
 8000c4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c54:	2340      	movs	r3, #64	; 0x40
 8000c56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f002 f813 	bl	8002c88 <HAL_RCC_ClockConfig>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000c68:	f000 fc16 	bl	8001498 <Error_Handler>
  }
}
 8000c6c:	bf00      	nop
 8000c6e:	3770      	adds	r7, #112	; 0x70
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	58000400 	.word	0x58000400
 8000c78:	58024800 	.word	0x58024800

08000c7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000c80:	4b28      	ldr	r3, [pc, #160]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000c82:	4a29      	ldr	r2, [pc, #164]	; (8000d28 <MX_SPI2_Init+0xac>)
 8000c84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c86:	4b27      	ldr	r3, [pc, #156]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000c88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c94:	4b23      	ldr	r3, [pc, #140]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000c96:	220f      	movs	r2, #15
 8000c98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c9a:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000c9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ca0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ca2:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ca8:	4b1e      	ldr	r3, [pc, #120]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000caa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cb2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000cb6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb8:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cbe:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cd2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_SPI2_Init+0xa8>)
 8000d10:	f004 f972 	bl	8004ff8 <HAL_SPI_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000d1a:	f000 fbbd 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	24000094 	.word	0x24000094
 8000d28:	40003800 	.word	0x40003800

08000d2c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	; 0x68
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
 8000d5c:	615a      	str	r2, [r3, #20]
 8000d5e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	222c      	movs	r2, #44	; 0x2c
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f007 fb82 	bl	8008470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d6c:	4b43      	ldr	r3, [pc, #268]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <MX_TIM1_Init+0x154>)
 8000d70:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000d72:	4b42      	ldr	r3, [pc, #264]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d74:	22c8      	movs	r2, #200	; 0xc8
 8000d76:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d78:	4b40      	ldr	r3, [pc, #256]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d80:	2232      	movs	r2, #50	; 0x32
 8000d82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d84:	4b3d      	ldr	r3, [pc, #244]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d8a:	4b3c      	ldr	r3, [pc, #240]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d90:	4b3a      	ldr	r3, [pc, #232]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d92:	2280      	movs	r2, #128	; 0x80
 8000d94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d96:	4839      	ldr	r0, [pc, #228]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000d98:	f004 fec7 	bl	8005b2a <HAL_TIM_Base_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000da2:	f000 fb79 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000daa:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dac:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000db0:	4619      	mov	r1, r3
 8000db2:	4832      	ldr	r0, [pc, #200]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000db4:	f005 fb50 	bl	8006458 <HAL_TIM_ConfigClockSource>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000dbe:	f000 fb6b 	bl	8001498 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000dc2:	482e      	ldr	r0, [pc, #184]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000dc4:	f004 ffaf 	bl	8005d26 <HAL_TIM_PWM_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000dce:	f000 fb63 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dde:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000de2:	4619      	mov	r1, r3
 8000de4:	4825      	ldr	r0, [pc, #148]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000de6:	f006 f88b 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000df0:	f000 fb52 	bl	8001498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df4:	2360      	movs	r3, #96	; 0x60
 8000df6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e04:	2300      	movs	r3, #0
 8000e06:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e14:	2200      	movs	r2, #0
 8000e16:	4619      	mov	r1, r3
 8000e18:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e1a:	f005 fa09 	bl	8006230 <HAL_TIM_PWM_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000e24:	f000 fb38 	bl	8001498 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e5e:	f006 f8dd 	bl	800701c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000e68:	f000 fb16 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM1_Init+0x150>)
 8000e6e:	f000 fc6d 	bl	800174c <HAL_TIM_MspPostInit>

}
 8000e72:	bf00      	nop
 8000e74:	3768      	adds	r7, #104	; 0x68
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2400011c 	.word	0x2400011c
 8000e80:	40010000 	.word	0x40010000

08000e84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000eac:	22c7      	movs	r2, #199	; 0xc7
 8000eae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000eb8:	2209      	movs	r2, #9
 8000eba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000eca:	f004 fe2e 	bl	8005b2a <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed4:	f000 fae0 	bl	8001498 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000ee6:	f005 fab7 	bl	8006458 <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 fad2 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM2_Init+0x94>)
 8000f02:	f005 fffd 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 fac4 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	24000168 	.word	0x24000168

08000f1c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f2e:	463b      	mov	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
 8000f3c:	615a      	str	r2, [r3, #20]
 8000f3e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f42:	4a22      	ldr	r2, [pc, #136]	; (8000fcc <MX_TIM4_Init+0xb0>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f48:	22c7      	movs	r2, #199	; 0xc7
 8000f4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4c:	4b1e      	ldr	r3, [pc, #120]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f54:	2209      	movs	r2, #9
 8000f56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f64:	4818      	ldr	r0, [pc, #96]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f66:	f004 fede 	bl	8005d26 <HAL_TIM_PWM_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000f70:	f000 fa92 	bl	8001498 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	4619      	mov	r1, r3
 8000f82:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000f84:	f005 ffbc 	bl	8006f00 <HAL_TIMEx_MasterConfigSynchronization>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000f8e:	f000 fa83 	bl	8001498 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f92:	2360      	movs	r3, #96	; 0x60
 8000f94:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000faa:	f005 f941 	bl	8006230 <HAL_TIM_PWM_ConfigChannel>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000fb4:	f000 fa70 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fb8:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM4_Init+0xac>)
 8000fba:	f000 fbc7 	bl	800174c <HAL_TIM_MspPostInit>

}
 8000fbe:	bf00      	nop
 8000fc0:	3728      	adds	r7, #40	; 0x28
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	240001b4 	.word	0x240001b4
 8000fcc:	40000800 	.word	0x40000800

08000fd0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_TIM16_Init+0x48>)
 8000fd6:	4a11      	ldr	r2, [pc, #68]	; (800101c <MX_TIM16_Init+0x4c>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000-1;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_TIM16_Init+0x48>)
 8000fdc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fe0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <MX_TIM16_Init+0x48>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 8000fe8:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_TIM16_Init+0x48>)
 8000fea:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000fee:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_TIM16_Init+0x48>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_TIM16_Init+0x48>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_TIM16_Init+0x48>)
 8000ffe:	2280      	movs	r2, #128	; 0x80
 8001000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_TIM16_Init+0x48>)
 8001004:	f004 fd91 	bl	8005b2a <HAL_TIM_Base_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800100e:	f000 fa43 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	24000200 	.word	0x24000200
 800101c:	40014400 	.word	0x40014400

08001020 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001024:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001026:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <MX_USART3_UART_Init+0x94>)
 8001028:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800102a:	4b21      	ldr	r3, [pc, #132]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b1d      	ldr	r3, [pc, #116]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800104c:	2200      	movs	r2, #0
 800104e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001052:	2200      	movs	r2, #0
 8001054:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001058:	2200      	movs	r2, #0
 800105a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 8001064:	2200      	movs	r2, #0
 8001066:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001068:	4811      	ldr	r0, [pc, #68]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800106a:	f006 f873 	bl	8007154 <HAL_UART_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001074:	f000 fa10 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001078:	2100      	movs	r1, #0
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800107c:	f007 f903 	bl	8008286 <HAL_UARTEx_SetTxFifoThreshold>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001086:	f000 fa07 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108a:	2100      	movs	r1, #0
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800108e:	f007 f938 	bl	8008302 <HAL_UARTEx_SetRxFifoThreshold>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001098:	f000 f9fe 	bl	8001498 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800109c:	4804      	ldr	r0, [pc, #16]	; (80010b0 <MX_USART3_UART_Init+0x90>)
 800109e:	f007 f8b9 	bl	8008214 <HAL_UARTEx_DisableFifoMode>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80010a8:	f000 f9f6 	bl	8001498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	2400024c 	.word	0x2400024c
 80010b4:	40004800 	.word	0x40004800

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b090      	sub	sp, #64	; 0x40
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4bc1      	ldr	r3, [pc, #772]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	4abf      	ldr	r2, [pc, #764]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010de:	4bbd      	ldr	r3, [pc, #756]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ec:	4bb9      	ldr	r3, [pc, #740]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	4ab8      	ldr	r2, [pc, #736]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010fc:	4bb5      	ldr	r3, [pc, #724]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80010fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
 8001108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800110a:	4bb2      	ldr	r3, [pc, #712]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	4ab0      	ldr	r2, [pc, #704]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111a:	4bae      	ldr	r3, [pc, #696]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001128:	4baa      	ldr	r3, [pc, #680]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800112a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800112e:	4aa9      	ldr	r2, [pc, #676]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001138:	4ba6      	ldr	r3, [pc, #664]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800113a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800113e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800114c:	4aa1      	ldr	r2, [pc, #644]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001156:	4b9f      	ldr	r3, [pc, #636]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
 8001162:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001164:	4b9b      	ldr	r3, [pc, #620]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116a:	4a9a      	ldr	r2, [pc, #616]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001174:	4b97      	ldr	r3, [pc, #604]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001182:	4b94      	ldr	r3, [pc, #592]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	4a92      	ldr	r2, [pc, #584]	; (80013d4 <MX_GPIO_Init+0x31c>)
 800118a:	f043 0310 	orr.w	r3, r3, #16
 800118e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001192:	4b90      	ldr	r3, [pc, #576]	; (80013d4 <MX_GPIO_Init+0x31c>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80011a0:	4b8c      	ldr	r3, [pc, #560]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	4a8b      	ldr	r2, [pc, #556]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011be:	4b85      	ldr	r3, [pc, #532]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	4a83      	ldr	r2, [pc, #524]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011c6:	f043 0320 	orr.w	r3, r3, #32
 80011ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	f003 0320 	and.w	r3, r3, #32
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011dc:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e2:	4a7c      	ldr	r2, [pc, #496]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ec:	4b79      	ldr	r3, [pc, #484]	; (80013d4 <MX_GPIO_Init+0x31c>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80011fa:	2200      	movs	r2, #0
 80011fc:	f241 0190 	movw	r1, #4240	; 0x1090
 8001200:	4875      	ldr	r0, [pc, #468]	; (80013d8 <MX_GPIO_Init+0x320>)
 8001202:	f001 f83f 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120c:	4873      	ldr	r0, [pc, #460]	; (80013dc <MX_GPIO_Init+0x324>)
 800120e:	f001 f839 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	4871      	ldr	r0, [pc, #452]	; (80013e0 <MX_GPIO_Init+0x328>)
 800121a:	f001 f833 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	2140      	movs	r1, #64	; 0x40
 8001222:	4870      	ldr	r0, [pc, #448]	; (80013e4 <MX_GPIO_Init+0x32c>)
 8001224:	f001 f82e 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_RST_GPIO_Port, SPEC_RST_Pin, GPIO_PIN_SET);
 8001228:	2201      	movs	r2, #1
 800122a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800122e:	486e      	ldr	r0, [pc, #440]	; (80013e8 <MX_GPIO_Init+0x330>)
 8001230:	f001 f828 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	2104      	movs	r1, #4
 8001238:	486c      	ldr	r0, [pc, #432]	; (80013ec <MX_GPIO_Init+0x334>)
 800123a:	f001 f823 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800123e:	2340      	movs	r3, #64	; 0x40
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800124e:	4619      	mov	r1, r3
 8001250:	4861      	ldr	r0, [pc, #388]	; (80013d8 <MX_GPIO_Init+0x320>)
 8001252:	f000 fe67 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 VNA_TRIG_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin;
 8001256:	f241 0390 	movw	r3, #4240	; 0x1090
 800125a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800126c:	4619      	mov	r1, r3
 800126e:	485a      	ldr	r0, [pc, #360]	; (80013d8 <MX_GPIO_Init+0x320>)
 8001270:	f000 fe58 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001274:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127a:	2301      	movs	r3, #1
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001282:	2300      	movs	r3, #0
 8001284:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001286:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128a:	4619      	mov	r1, r3
 800128c:	4853      	ldr	r0, [pc, #332]	; (80013dc <MX_GPIO_Init+0x324>)
 800128e:	f000 fe49 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001292:	2380      	movs	r3, #128	; 0x80
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a2:	4619      	mov	r1, r3
 80012a4:	4850      	ldr	r0, [pc, #320]	; (80013e8 <MX_GPIO_Init+0x330>)
 80012a6:	f000 fe3d 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012bc:	4619      	mov	r1, r3
 80012be:	4849      	ldr	r0, [pc, #292]	; (80013e4 <MX_GPIO_Init+0x32c>)
 80012c0:	f000 fe30 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012d6:	4619      	mov	r1, r3
 80012d8:	4845      	ldr	r0, [pc, #276]	; (80013f0 <MX_GPIO_Init+0x338>)
 80012da:	f000 fe23 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012f2:	4619      	mov	r1, r3
 80012f4:	483a      	ldr	r0, [pc, #232]	; (80013e0 <MX_GPIO_Init+0x328>)
 80012f6:	f000 fe15 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012fa:	2340      	movs	r3, #64	; 0x40
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001308:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800130c:	4619      	mov	r1, r3
 800130e:	4839      	ldr	r0, [pc, #228]	; (80013f4 <MX_GPIO_Init+0x33c>)
 8001310:	f000 fe08 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	482c      	ldr	r0, [pc, #176]	; (80013e0 <MX_GPIO_Init+0x328>)
 800132e:	f000 fdf9 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001332:	2301      	movs	r3, #1
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001336:	2300      	movs	r3, #0
 8001338:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001342:	4619      	mov	r1, r3
 8001344:	482c      	ldr	r0, [pc, #176]	; (80013f8 <MX_GPIO_Init+0x340>)
 8001346:	f000 fded 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : VSENSE2_Pin */
  GPIO_InitStruct.Pin = VSENSE2_Pin;
 800134a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001350:	2303      	movs	r3, #3
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(VSENSE2_GPIO_Port, &GPIO_InitStruct);
 8001358:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800135c:	4619      	mov	r1, r3
 800135e:	4827      	ldr	r0, [pc, #156]	; (80013fc <MX_GPIO_Init+0x344>)
 8001360:	f000 fde0 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE1_Pin PC3 */
  GPIO_InitStruct.Pin = VSENSE1_Pin|GPIO_PIN_3;
 8001364:	2309      	movs	r3, #9
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001370:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001374:	4619      	mov	r1, r3
 8001376:	481e      	ldr	r0, [pc, #120]	; (80013f0 <MX_GPIO_Init+0x338>)
 8001378:	f000 fdd4 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001390:	4619      	mov	r1, r3
 8001392:	4814      	ldr	r0, [pc, #80]	; (80013e4 <MX_GPIO_Init+0x32c>)
 8001394:	f000 fdc6 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_RST_Pin */
  GPIO_InitStruct.Pin = SPEC_RST_Pin;
 8001398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013a2:	2302      	movs	r3, #2
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPEC_RST_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013ae:	4619      	mov	r1, r3
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <MX_GPIO_Init+0x330>)
 80013b2:	f000 fdb7 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : VSENSE3_Pin VSENSE4_Pin */
  GPIO_InitStruct.Pin = VSENSE3_Pin|VSENSE4_Pin;
 80013b6:	2303      	movs	r3, #3
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ba:	2303      	movs	r3, #3
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_GPIO_Init+0x32c>)
 80013ca:	f000 fdab 	bl	8001f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 80013ce:	2304      	movs	r3, #4
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d2:	e015      	b.n	8001400 <MX_GPIO_Init+0x348>
 80013d4:	58024400 	.word	0x58024400
 80013d8:	58020400 	.word	0x58020400
 80013dc:	58021c00 	.word	0x58021c00
 80013e0:	58022000 	.word	0x58022000
 80013e4:	58020000 	.word	0x58020000
 80013e8:	58020c00 	.word	0x58020c00
 80013ec:	58022400 	.word	0x58022400
 80013f0:	58020800 	.word	0x58020800
 80013f4:	58021000 	.word	0x58021000
 80013f8:	58022800 	.word	0x58022800
 80013fc:	58021400 	.word	0x58021400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001400:	2301      	movs	r3, #1
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800140c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001410:	4619      	mov	r1, r3
 8001412:	4807      	ldr	r0, [pc, #28]	; (8001430 <MX_GPIO_Init+0x378>)
 8001414:	f000 fd86 	bl	8001f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2017      	movs	r0, #23
 800141e:	f000 fd4c 	bl	8001eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001422:	2017      	movs	r0, #23
 8001424:	f000 fd63 	bl	8001eee <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3740      	adds	r7, #64	; 0x40
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	58022400 	.word	0x58022400

08001434 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]
	else if (GPIO_Pin == GPIO_PIN_8)
	{
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//optReady = true;
	}
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d105      	bne.n	8001468 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//		HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//counterPrevious = counter;
		counter++;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001464:	6013      	str	r3, [r2, #0]
	{
		state = collect;
		counter = 0;
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
	}
}
 8001466:	e009      	b.n	800147c <HAL_TIM_PeriodElapsedCallback+0x30>
	else if (htim == &htim16)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d105      	bne.n	800147c <HAL_TIM_PeriodElapsedCallback+0x30>
		state = collect;
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	24000168 	.word	0x24000168
 800148c:	240002e8 	.word	0x240002e8
 8001490:	24000200 	.word	0x24000200
 8001494:	240002f4 	.word	0x240002f4

08001498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <Error_Handler+0x8>
	...

080014a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_MspInit+0x30>)
 80014ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014b0:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_MspInit+0x30>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_MspInit+0x30>)
 80014bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	58024400 	.word	0x58024400

080014d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b0bc      	sub	sp, #240	; 0xf0
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	22c0      	movs	r2, #192	; 0xc0
 80014f6:	2100      	movs	r1, #0
 80014f8:	4618      	mov	r0, r3
 80014fa:	f006 ffb9 	bl	8008470 <memset>
  if(hspi->Instance==SPI2)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a4b      	ldr	r2, [pc, #300]	; (8001630 <HAL_SPI_MspInit+0x158>)
 8001504:	4293      	cmp	r3, r2
 8001506:	f040 808e 	bne.w	8001626 <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800150a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001516:	2300      	movs	r3, #0
 8001518:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	4618      	mov	r0, r3
 8001520:	f001 ff3e 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800152a:	f7ff ffb5 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001530:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001534:	4a3f      	ldr	r2, [pc, #252]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800153a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800154e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001554:	f043 0308 	orr.w	r3, r3, #8
 8001558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155c:	4b35      	ldr	r3, [pc, #212]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800155e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001562:	f003 0308 	and.w	r3, r3, #8
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800156a:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800156c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001570:	4a30      	ldr	r2, [pc, #192]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800157c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800158a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158e:	4a29      	ldr	r2, [pc, #164]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <HAL_SPI_MspInit+0x15c>)
 800159a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015a6:	2308      	movs	r3, #8
 80015a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015be:	2305      	movs	r3, #5
 80015c0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015c8:	4619      	mov	r1, r3
 80015ca:	481b      	ldr	r0, [pc, #108]	; (8001638 <HAL_SPI_MspInit+0x160>)
 80015cc:	f000 fcaa 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d0:	2304      	movs	r3, #4
 80015d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e8:	2305      	movs	r3, #5
 80015ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015f2:	4619      	mov	r1, r3
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <HAL_SPI_MspInit+0x164>)
 80015f6:	f000 fc95 	bl	8001f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001614:	2305      	movs	r3, #5
 8001616:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800161e:	4619      	mov	r1, r3
 8001620:	4807      	ldr	r0, [pc, #28]	; (8001640 <HAL_SPI_MspInit+0x168>)
 8001622:	f000 fc7f 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001626:	bf00      	nop
 8001628:	37f0      	adds	r7, #240	; 0xf0
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40003800 	.word	0x40003800
 8001634:	58024400 	.word	0x58024400
 8001638:	58020c00 	.word	0x58020c00
 800163c:	58022000 	.word	0x58022000
 8001640:	58020400 	.word	0x58020400

08001644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a27      	ldr	r2, [pc, #156]	; (80016f0 <HAL_TIM_Base_MspInit+0xac>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10f      	bne.n	8001676 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001656:	4b27      	ldr	r3, [pc, #156]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001658:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800165c:	4a25      	ldr	r2, [pc, #148]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001668:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	617b      	str	r3, [r7, #20]
 8001672:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001674:	e038      	b.n	80016e8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167e:	d117      	bne.n	80016b0 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001680:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001686:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 8001692:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	201c      	movs	r0, #28
 80016a4:	f000 fc09 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016a8:	201c      	movs	r0, #28
 80016aa:	f000 fc20 	bl	8001eee <HAL_NVIC_EnableIRQ>
}
 80016ae:	e01b      	b.n	80016e8 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a10      	ldr	r2, [pc, #64]	; (80016f8 <HAL_TIM_Base_MspInit+0xb4>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d116      	bne.n	80016e8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 80016bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 80016c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <HAL_TIM_Base_MspInit+0xb0>)
 80016cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80016d8:	2200      	movs	r2, #0
 80016da:	2100      	movs	r1, #0
 80016dc:	2075      	movs	r0, #117	; 0x75
 80016de:	f000 fbec 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80016e2:	2075      	movs	r0, #117	; 0x75
 80016e4:	f000 fc03 	bl	8001eee <HAL_NVIC_EnableIRQ>
}
 80016e8:	bf00      	nop
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40010000 	.word	0x40010000
 80016f4:	58024400 	.word	0x58024400
 80016f8:	40014400 	.word	0x40014400

080016fc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0e      	ldr	r2, [pc, #56]	; (8001744 <HAL_TIM_PWM_MspInit+0x48>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d116      	bne.n	800173c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <HAL_TIM_PWM_MspInit+0x4c>)
 8001710:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001714:	4a0c      	ldr	r2, [pc, #48]	; (8001748 <HAL_TIM_PWM_MspInit+0x4c>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800171e:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <HAL_TIM_PWM_MspInit+0x4c>)
 8001720:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2100      	movs	r1, #0
 8001730:	201e      	movs	r0, #30
 8001732:	f000 fbc2 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001736:	201e      	movs	r0, #30
 8001738:	f000 fbd9 	bl	8001eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40000800 	.word	0x40000800
 8001748:	58024400 	.word	0x58024400

0800174c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_TIM_MspPostInit+0xb8>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d120      	bne.n	80017b0 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	4b26      	ldr	r3, [pc, #152]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	4a24      	ldr	r2, [pc, #144]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 8001776:	f043 0301 	orr.w	r3, r3, #1
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177e:	4b22      	ldr	r3, [pc, #136]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800178c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800179e:	2301      	movs	r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4818      	ldr	r0, [pc, #96]	; (800180c <HAL_TIM_MspPostInit+0xc0>)
 80017aa:	f000 fbbb 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80017ae:	e024      	b.n	80017fa <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a16      	ldr	r2, [pc, #88]	; (8001810 <HAL_TIM_MspPostInit+0xc4>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d11f      	bne.n	80017fa <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 80017bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 80017c2:	f043 0308 	orr.w	r3, r3, #8
 80017c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017ca:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <HAL_TIM_MspPostInit+0xbc>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017ea:	2302      	movs	r3, #2
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <HAL_TIM_MspPostInit+0xc8>)
 80017f6:	f000 fb95 	bl	8001f24 <HAL_GPIO_Init>
}
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40010000 	.word	0x40010000
 8001808:	58024400 	.word	0x58024400
 800180c:	58020000 	.word	0x58020000
 8001810:	40000800 	.word	0x40000800
 8001814:	58020c00 	.word	0x58020c00

08001818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b0ba      	sub	sp, #232	; 0xe8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001820:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001830:	f107 0310 	add.w	r3, r7, #16
 8001834:	22c0      	movs	r2, #192	; 0xc0
 8001836:	2100      	movs	r1, #0
 8001838:	4618      	mov	r0, r3
 800183a:	f006 fe19 	bl	8008470 <memset>
  if(huart->Instance==USART3)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_UART_MspInit+0xc8>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d146      	bne.n	80018d6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001848:	f04f 0202 	mov.w	r2, #2
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	f107 0310 	add.w	r3, r7, #16
 800185e:	4618      	mov	r0, r3
 8001860:	f001 fd9e 	bl	80033a0 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800186a:	f7ff fe15 	bl	8001498 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 8001870:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001874:	4a1b      	ldr	r2, [pc, #108]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 8001876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 8001880:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001884:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 8001894:	f043 0302 	orr.w	r3, r3, #2
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <HAL_UART_MspInit+0xcc>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80018aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c4:	2307      	movs	r3, #7
 80018c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4805      	ldr	r0, [pc, #20]	; (80018e8 <HAL_UART_MspInit+0xd0>)
 80018d2:	f000 fb27 	bl	8001f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80018d6:	bf00      	nop
 80018d8:	37e8      	adds	r7, #232	; 0xe8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40004800 	.word	0x40004800
 80018e4:	58024400 	.word	0x58024400
 80018e8:	58020400 	.word	0x58020400

080018ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <NMI_Handler+0x4>

080018f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018f6:	e7fe      	b.n	80018f6 <HardFault_Handler+0x4>

080018f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018fc:	e7fe      	b.n	80018fc <MemManage_Handler+0x4>

080018fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018fe:	b480      	push	{r7}
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001902:	e7fe      	b.n	8001902 <BusFault_Handler+0x4>

08001904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001908:	e7fe      	b.n	8001908 <UsageFault_Handler+0x4>

0800190a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800190a:	b480      	push	{r7}
 800190c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001938:	f000 f994 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}

08001940 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001944:	2040      	movs	r0, #64	; 0x40
 8001946:	f000 fcd0 	bl	80022ea <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800194a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800194e:	f000 fccc 	bl	80022ea <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800195c:	4802      	ldr	r0, [pc, #8]	; (8001968 <TIM2_IRQHandler+0x10>)
 800195e:	f004 fb47 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	24000168 	.word	0x24000168

0800196c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <TIM4_IRQHandler+0x10>)
 8001972:	f004 fb3d 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	240001b4 	.word	0x240001b4

08001980 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM16_IRQHandler+0x10>)
 8001986:	f004 fb33 	bl	8005ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000200 	.word	0x24000200

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f006 fd2a 	bl	800841c <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24080000 	.word	0x24080000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	240002f8 	.word	0x240002f8
 80019fc:	24000310 	.word	0x24000310

08001a00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001a00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001a04:	f000 f826 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a0a:	490d      	ldr	r1, [pc, #52]	; (8001a40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	; (8001a44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a20:	4c0a      	ldr	r4, [pc, #40]	; (8001a4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f006 fcfb 	bl	8008428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a32:	f7fe fe27 	bl	8000684 <main>
  bx  lr
 8001a36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a38:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a3c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a40:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001a44:	08008df8 	.word	0x08008df8
  ldr r2, =_sbss
 8001a48:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 8001a4c:	24000310 	.word	0x24000310

08001a50 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a50:	e7fe      	b.n	8001a50 <ADC3_IRQHandler>
	...

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <SystemInit+0xfc>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <SystemInit+0xfc>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <SystemInit+0xfc>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <SystemInit+0xfc>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <SystemInit+0x100>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d807      	bhi.n	8001a90 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <SystemInit+0x100>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <SystemInit+0x100>)
 8001a8a:	f043 0307 	orr.w	r3, r3, #7
 8001a8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <SystemInit+0x104>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <SystemInit+0x104>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <SystemInit+0x104>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <SystemInit+0x104>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	492c      	ldr	r1, [pc, #176]	; (8001b58 <SystemInit+0x104>)
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <SystemInit+0x108>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <SystemInit+0x100>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <SystemInit+0x100>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 030f 	bic.w	r3, r3, #15
 8001ac2:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <SystemInit+0x100>)
 8001ac4:	f043 0307 	orr.w	r3, r3, #7
 8001ac8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <SystemInit+0x104>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <SystemInit+0x104>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <SystemInit+0x104>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <SystemInit+0x104>)
 8001ade:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <SystemInit+0x10c>)
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <SystemInit+0x104>)
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <SystemInit+0x110>)
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <SystemInit+0x104>)
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <SystemInit+0x114>)
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <SystemInit+0x104>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <SystemInit+0x104>)
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <SystemInit+0x114>)
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <SystemInit+0x104>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <SystemInit+0x104>)
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <SystemInit+0x114>)
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <SystemInit+0x104>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0x104>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <SystemInit+0x104>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <SystemInit+0x104>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <SystemInit+0x118>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <SystemInit+0x118>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <SystemInit+0x11c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <SystemInit+0x120>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b36:	d202      	bcs.n	8001b3e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <SystemInit+0x124>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <SystemInit+0x128>)
 8001b40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b44:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	52002000 	.word	0x52002000
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b60:	02020200 	.word	0x02020200
 8001b64:	01ff0000 	.word	0x01ff0000
 8001b68:	01010280 	.word	0x01010280
 8001b6c:	580000c0 	.word	0x580000c0
 8001b70:	5c001000 	.word	0x5c001000
 8001b74:	ffff0000 	.word	0xffff0000
 8001b78:	51008108 	.word	0x51008108
 8001b7c:	52004000 	.word	0x52004000

08001b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b86:	2003      	movs	r0, #3
 8001b88:	f000 f98c 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b8c:	f001 fa32 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8001b90:	4602      	mov	r2, r0
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_Init+0x68>)
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	4913      	ldr	r1, [pc, #76]	; (8001bec <HAL_Init+0x6c>)
 8001b9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
 8001ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_Init+0x68>)
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_Init+0x6c>)
 8001bb4:	5cd3      	ldrb	r3, [r2, r3]
 8001bb6:	f003 031f 	and.w	r3, r3, #31
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_Init+0x70>)
 8001bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bc4:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <HAL_Init+0x74>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f000 f814 	bl	8001bf8 <HAL_InitTick>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e002      	b.n	8001be0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bda:	f7ff fc63 	bl	80014a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	58024400 	.word	0x58024400
 8001bec:	08008d7c 	.word	0x08008d7c
 8001bf0:	24000008 	.word	0x24000008
 8001bf4:	24000004 	.word	0x24000004

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c00:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_InitTick+0x60>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e021      	b.n	8001c50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <HAL_InitTick+0x64>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_InitTick+0x60>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f971 	bl	8001f0a <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f93b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x68>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	24000010 	.word	0x24000010
 8001c5c:	24000004 	.word	0x24000004
 8001c60:	2400000c 	.word	0x2400000c

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	24000010 	.word	0x24000010
 8001c88:	240002fc 	.word	0x240002fc

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	240002fc 	.word	0x240002fc

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	24000010 	.word	0x24000010

08001cec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_GetREVID+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0c1b      	lsrs	r3, r3, #16
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	5c001000 	.word	0x5c001000

08001d04 <__NVIC_SetPriorityGrouping>:
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	68ba      	ldr	r2, [r7, #8]
 8001d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d20:	4013      	ands	r3, r2
 8001d22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <__NVIC_SetPriorityGrouping+0x44>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d32:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <__NVIC_SetPriorityGrouping+0x40>)
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	60d3      	str	r3, [r2, #12]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	05fa0000 	.word	0x05fa0000

08001d4c <__NVIC_GetPriorityGrouping>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <__NVIC_GetPriorityGrouping+0x18>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 0307 	and.w	r3, r3, #7
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <__NVIC_EnableIRQ>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db0b      	blt.n	8001d92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	f003 021f 	and.w	r2, r3, #31
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <__NVIC_EnableIRQ+0x38>)
 8001d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d86:	095b      	lsrs	r3, r3, #5
 8001d88:	2001      	movs	r0, #1
 8001d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000e100 	.word	0xe000e100

08001da4 <__NVIC_SetPriority>:
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	6039      	str	r1, [r7, #0]
 8001dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	db0a      	blt.n	8001dce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	490c      	ldr	r1, [pc, #48]	; (8001df0 <__NVIC_SetPriority+0x4c>)
 8001dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc2:	0112      	lsls	r2, r2, #4
 8001dc4:	b2d2      	uxtb	r2, r2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dcc:	e00a      	b.n	8001de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	4908      	ldr	r1, [pc, #32]	; (8001df4 <__NVIC_SetPriority+0x50>)
 8001dd4:	88fb      	ldrh	r3, [r7, #6]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	3b04      	subs	r3, #4
 8001ddc:	0112      	lsls	r2, r2, #4
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	440b      	add	r3, r1
 8001de2:	761a      	strb	r2, [r3, #24]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000e100 	.word	0xe000e100
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <NVIC_EncodePriority>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b089      	sub	sp, #36	; 0x24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f003 0307 	and.w	r3, r3, #7
 8001e0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f1c3 0307 	rsb	r3, r3, #7
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	bf28      	it	cs
 8001e16:	2304      	movcs	r3, #4
 8001e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d902      	bls.n	8001e28 <NVIC_EncodePriority+0x30>
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	3b03      	subs	r3, #3
 8001e26:	e000      	b.n	8001e2a <NVIC_EncodePriority+0x32>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43da      	mvns	r2, r3
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	401a      	ands	r2, r3
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4a:	43d9      	mvns	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	4313      	orrs	r3, r2
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff8e 	bl	8001da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff29 	bl	8001d04 <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec8:	f7ff ff40 	bl	8001d4c <__NVIC_GetPriorityGrouping>
 8001ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	68b9      	ldr	r1, [r7, #8]
 8001ed2:	6978      	ldr	r0, [r7, #20]
 8001ed4:	f7ff ff90 	bl	8001df8 <NVIC_EncodePriority>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ede:	4611      	mov	r1, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff ff5f 	bl	8001da4 <__NVIC_SetPriority>
}
 8001ee6:	bf00      	nop
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff ff33 	bl	8001d68 <__NVIC_EnableIRQ>
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b082      	sub	sp, #8
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff ffa4 	bl	8001e60 <SysTick_Config>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b089      	sub	sp, #36	; 0x24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001f32:	4b89      	ldr	r3, [pc, #548]	; (8002158 <HAL_GPIO_Init+0x234>)
 8001f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f36:	e194      	b.n	8002262 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	fa01 f303 	lsl.w	r3, r1, r3
 8001f44:	4013      	ands	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 8186 	beq.w	800225c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d005      	beq.n	8001f68 <HAL_GPIO_Init+0x44>
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d130      	bne.n	8001fca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	68da      	ldr	r2, [r3, #12]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	f003 0201 	and.w	r2, r3, #1
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d017      	beq.n	8002006 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	689a      	ldr	r2, [r3, #8]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d123      	bne.n	800205a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	08da      	lsrs	r2, r3, #3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3208      	adds	r2, #8
 800201a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	220f      	movs	r2, #15
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	691a      	ldr	r2, [r3, #16]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	08da      	lsrs	r2, r3, #3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	3208      	adds	r2, #8
 8002054:	69b9      	ldr	r1, [r7, #24]
 8002056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	2203      	movs	r2, #3
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43db      	mvns	r3, r3
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4013      	ands	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0203 	and.w	r2, r3, #3
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	fa02 f303 	lsl.w	r3, r2, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4313      	orrs	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80e0 	beq.w	800225c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_GPIO_Init+0x238>)
 800209e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020a2:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_GPIO_Init+0x238>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_GPIO_Init+0x238>)
 80020ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ba:	4a29      	ldr	r2, [pc, #164]	; (8002160 <HAL_GPIO_Init+0x23c>)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	089b      	lsrs	r3, r3, #2
 80020c0:	3302      	adds	r3, #2
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <HAL_GPIO_Init+0x240>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d052      	beq.n	800218c <HAL_GPIO_Init+0x268>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a1f      	ldr	r2, [pc, #124]	; (8002168 <HAL_GPIO_Init+0x244>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d031      	beq.n	8002152 <HAL_GPIO_Init+0x22e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a1e      	ldr	r2, [pc, #120]	; (800216c <HAL_GPIO_Init+0x248>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x22a>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a1d      	ldr	r2, [pc, #116]	; (8002170 <HAL_GPIO_Init+0x24c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x226>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_GPIO_Init+0x250>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x222>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a1b      	ldr	r2, [pc, #108]	; (8002178 <HAL_GPIO_Init+0x254>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x21e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1a      	ldr	r2, [pc, #104]	; (800217c <HAL_GPIO_Init+0x258>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x21a>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a19      	ldr	r2, [pc, #100]	; (8002180 <HAL_GPIO_Init+0x25c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x216>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_GPIO_Init+0x260>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x212>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a17      	ldr	r2, [pc, #92]	; (8002188 <HAL_GPIO_Init+0x264>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x20e>
 800212e:	2309      	movs	r3, #9
 8002130:	e02d      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002132:	230a      	movs	r3, #10
 8002134:	e02b      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002136:	2308      	movs	r3, #8
 8002138:	e029      	b.n	800218e <HAL_GPIO_Init+0x26a>
 800213a:	2307      	movs	r3, #7
 800213c:	e027      	b.n	800218e <HAL_GPIO_Init+0x26a>
 800213e:	2306      	movs	r3, #6
 8002140:	e025      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002142:	2305      	movs	r3, #5
 8002144:	e023      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002146:	2304      	movs	r3, #4
 8002148:	e021      	b.n	800218e <HAL_GPIO_Init+0x26a>
 800214a:	2303      	movs	r3, #3
 800214c:	e01f      	b.n	800218e <HAL_GPIO_Init+0x26a>
 800214e:	2302      	movs	r3, #2
 8002150:	e01d      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002152:	2301      	movs	r3, #1
 8002154:	e01b      	b.n	800218e <HAL_GPIO_Init+0x26a>
 8002156:	bf00      	nop
 8002158:	58000080 	.word	0x58000080
 800215c:	58024400 	.word	0x58024400
 8002160:	58000400 	.word	0x58000400
 8002164:	58020000 	.word	0x58020000
 8002168:	58020400 	.word	0x58020400
 800216c:	58020800 	.word	0x58020800
 8002170:	58020c00 	.word	0x58020c00
 8002174:	58021000 	.word	0x58021000
 8002178:	58021400 	.word	0x58021400
 800217c:	58021800 	.word	0x58021800
 8002180:	58021c00 	.word	0x58021c00
 8002184:	58022000 	.word	0x58022000
 8002188:	58022400 	.word	0x58022400
 800218c:	2300      	movs	r3, #0
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f002 0203 	and.w	r2, r2, #3
 8002194:	0092      	lsls	r2, r2, #2
 8002196:	4093      	lsls	r3, r2
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219e:	4938      	ldr	r1, [pc, #224]	; (8002280 <HAL_GPIO_Init+0x35c>)
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	089b      	lsrs	r3, r3, #2
 80021a4:	3302      	adds	r3, #2
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	43db      	mvns	r3, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4013      	ands	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80021d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d003      	beq.n	8002200 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002200:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	43db      	mvns	r3, r3
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4013      	ands	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	43db      	mvns	r3, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4013      	ands	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	3301      	adds	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa22 f303 	lsr.w	r3, r2, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	f47f ae63 	bne.w	8001f38 <HAL_GPIO_Init+0x14>
  }
}
 8002272:	bf00      	nop
 8002274:	bf00      	nop
 8002276:	3724      	adds	r7, #36	; 0x24
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	58000400 	.word	0x58000400

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022fc:	88fb      	ldrh	r3, [r7, #6]
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	d008      	beq.n	8002316 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff f88f 	bl	8001434 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002328:	4b29      	ldr	r3, [pc, #164]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	2b06      	cmp	r3, #6
 8002332:	d00a      	beq.n	800234a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002334:	4b26      	ldr	r3, [pc, #152]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e040      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e03e      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800234a:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002352:	491f      	ldr	r1, [pc, #124]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4313      	orrs	r3, r2
 8002358:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800235a:	f7ff fc97 	bl	8001c8c <HAL_GetTick>
 800235e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002360:	e009      	b.n	8002376 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002362:	f7ff fc93 	bl	8001c8c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002370:	d901      	bls.n	8002376 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e028      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800237e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002382:	d1ee      	bne.n	8002362 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b1e      	cmp	r3, #30
 8002388:	d008      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b2e      	cmp	r3, #46	; 0x2e
 800238e:	d005      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b1d      	cmp	r3, #29
 8002394:	d002      	beq.n	800239c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b2d      	cmp	r3, #45	; 0x2d
 800239a:	d114      	bne.n	80023c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800239c:	f7ff fc76 	bl	8001c8c <HAL_GetTick>
 80023a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023a2:	e009      	b.n	80023b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80023a4:	f7ff fc72 	bl	8001c8c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023b2:	d901      	bls.n	80023b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c4:	d1ee      	bne.n	80023a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	58024800 	.word	0x58024800

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08c      	sub	sp, #48	; 0x30
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f000 bc48 	b.w	8002c78 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8088 	beq.w	8002506 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023f6:	4b99      	ldr	r3, [pc, #612]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002400:	4b96      	ldr	r3, [pc, #600]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	2b10      	cmp	r3, #16
 800240a:	d007      	beq.n	800241c <HAL_RCC_OscConfig+0x48>
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	2b18      	cmp	r3, #24
 8002410:	d111      	bne.n	8002436 <HAL_RCC_OscConfig+0x62>
 8002412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d10c      	bne.n	8002436 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d06d      	beq.n	8002504 <HAL_RCC_OscConfig+0x130>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d169      	bne.n	8002504 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	f000 bc21 	b.w	8002c78 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243e:	d106      	bne.n	800244e <HAL_RCC_OscConfig+0x7a>
 8002440:	4b86      	ldr	r3, [pc, #536]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a85      	ldr	r2, [pc, #532]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e02e      	b.n	80024ac <HAL_RCC_OscConfig+0xd8>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x9c>
 8002456:	4b81      	ldr	r3, [pc, #516]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a80      	ldr	r2, [pc, #512]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b7e      	ldr	r3, [pc, #504]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a7d      	ldr	r2, [pc, #500]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002468:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xd8>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0xc0>
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a77      	ldr	r2, [pc, #476]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b75      	ldr	r3, [pc, #468]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a74      	ldr	r2, [pc, #464]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xd8>
 8002494:	4b71      	ldr	r3, [pc, #452]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a70      	ldr	r2, [pc, #448]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b6e      	ldr	r3, [pc, #440]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6d      	ldr	r2, [pc, #436]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fbea 	bl	8001c8c <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fbe6 	bl	8001c8c <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e3d4      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fbd6 	bl	8001c8c <HAL_GetTick>
 80024e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fbd2 	bl	8001c8c <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e3c0      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80024f6:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x110>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80ca 	beq.w	80026a8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002514:	4b51      	ldr	r3, [pc, #324]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800251c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002522:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d007      	beq.n	800253a <HAL_RCC_OscConfig+0x166>
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	2b18      	cmp	r3, #24
 800252e:	d156      	bne.n	80025de <HAL_RCC_OscConfig+0x20a>
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d151      	bne.n	80025de <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253a:	4b48      	ldr	r3, [pc, #288]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e392      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002552:	4b42      	ldr	r3, [pc, #264]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 0219 	bic.w	r2, r3, #25
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	493f      	ldr	r1, [pc, #252]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002560:	4313      	orrs	r3, r2
 8002562:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff fb92 	bl	8001c8c <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256c:	f7ff fb8e 	bl	8001c8c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e37c      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800257e:	4b37      	ldr	r3, [pc, #220]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258a:	f7ff fbaf 	bl	8001cec <HAL_GetREVID>
 800258e:	4603      	mov	r3, r0
 8002590:	f241 0203 	movw	r2, #4099	; 0x1003
 8002594:	4293      	cmp	r3, r2
 8002596:	d817      	bhi.n	80025c8 <HAL_RCC_OscConfig+0x1f4>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b40      	cmp	r3, #64	; 0x40
 800259e:	d108      	bne.n	80025b2 <HAL_RCC_OscConfig+0x1de>
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80025a8:	4a2c      	ldr	r2, [pc, #176]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ae:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b0:	e07a      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	4b2a      	ldr	r3, [pc, #168]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	031b      	lsls	r3, r3, #12
 80025c0:	4926      	ldr	r1, [pc, #152]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c6:	e06f      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c8:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025dc:	e064      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d047      	beq.n	8002676 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025e6:	4b1d      	ldr	r3, [pc, #116]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 0219 	bic.w	r2, r3, #25
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	491a      	ldr	r1, [pc, #104]	; (800265c <HAL_RCC_OscConfig+0x288>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff fb48 	bl	8001c8c <HAL_GetTick>
 80025fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002600:	f7ff fb44 	bl	8001c8c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e332      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	f7ff fb65 	bl	8001cec <HAL_GetREVID>
 8002622:	4603      	mov	r3, r0
 8002624:	f241 0203 	movw	r2, #4099	; 0x1003
 8002628:	4293      	cmp	r3, r2
 800262a:	d819      	bhi.n	8002660 <HAL_RCC_OscConfig+0x28c>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b40      	cmp	r3, #64	; 0x40
 8002632:	d108      	bne.n	8002646 <HAL_RCC_OscConfig+0x272>
 8002634:	4b09      	ldr	r3, [pc, #36]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800263c:	4a07      	ldr	r2, [pc, #28]	; (800265c <HAL_RCC_OscConfig+0x288>)
 800263e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e030      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	4901      	ldr	r1, [pc, #4]	; (800265c <HAL_RCC_OscConfig+0x288>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
 800265a:	e025      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
 800265c:	58024400 	.word	0x58024400
 8002660:	4b9a      	ldr	r3, [pc, #616]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	061b      	lsls	r3, r3, #24
 800266e:	4997      	ldr	r1, [pc, #604]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	604b      	str	r3, [r1, #4]
 8002674:	e018      	b.n	80026a8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b95      	ldr	r3, [pc, #596]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a94      	ldr	r2, [pc, #592]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002682:	f7ff fb03 	bl	8001c8c <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268a:	f7ff faff 	bl	8001c8c <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e2ed      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800269c:	4b8b      	ldr	r3, [pc, #556]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f0      	bne.n	800268a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 80a9 	beq.w	8002808 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b6:	4b85      	ldr	r3, [pc, #532]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026be:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c0:	4b82      	ldr	r3, [pc, #520]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d007      	beq.n	80026dc <HAL_RCC_OscConfig+0x308>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b18      	cmp	r3, #24
 80026d0:	d13a      	bne.n	8002748 <HAL_RCC_OscConfig+0x374>
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f003 0303 	and.w	r3, r3, #3
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d135      	bne.n	8002748 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026dc:	4b7b      	ldr	r3, [pc, #492]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d005      	beq.n	80026f4 <HAL_RCC_OscConfig+0x320>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	2b80      	cmp	r3, #128	; 0x80
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e2c1      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026f4:	f7ff fafa 	bl	8001cec <HAL_GetREVID>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f241 0203 	movw	r2, #4099	; 0x1003
 80026fe:	4293      	cmp	r3, r2
 8002700:	d817      	bhi.n	8002732 <HAL_RCC_OscConfig+0x35e>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b20      	cmp	r3, #32
 8002708:	d108      	bne.n	800271c <HAL_RCC_OscConfig+0x348>
 800270a:	4b70      	ldr	r3, [pc, #448]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002712:	4a6e      	ldr	r2, [pc, #440]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002714:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002718:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800271a:	e075      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800271c:	4b6b      	ldr	r3, [pc, #428]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	069b      	lsls	r3, r3, #26
 800272a:	4968      	ldr	r1, [pc, #416]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002730:	e06a      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002732:	4b66      	ldr	r3, [pc, #408]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	061b      	lsls	r3, r3, #24
 8002740:	4962      	ldr	r1, [pc, #392]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002746:	e05f      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d042      	beq.n	80027d6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002750:	4b5e      	ldr	r3, [pc, #376]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a5d      	ldr	r2, [pc, #372]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800275a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7ff fa96 	bl	8001c8c <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002764:	f7ff fa92 	bl	8001c8c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e280      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002776:	4b55      	ldr	r3, [pc, #340]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002782:	f7ff fab3 	bl	8001cec <HAL_GetREVID>
 8002786:	4603      	mov	r3, r0
 8002788:	f241 0203 	movw	r2, #4099	; 0x1003
 800278c:	4293      	cmp	r3, r2
 800278e:	d817      	bhi.n	80027c0 <HAL_RCC_OscConfig+0x3ec>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	2b20      	cmp	r3, #32
 8002796:	d108      	bne.n	80027aa <HAL_RCC_OscConfig+0x3d6>
 8002798:	4b4c      	ldr	r3, [pc, #304]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027a0:	4a4a      	ldr	r2, [pc, #296]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027a6:	6053      	str	r3, [r2, #4]
 80027a8:	e02e      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
 80027aa:	4b48      	ldr	r3, [pc, #288]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	069b      	lsls	r3, r3, #26
 80027b8:	4944      	ldr	r1, [pc, #272]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
 80027be:	e023      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
 80027c0:	4b42      	ldr	r3, [pc, #264]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a1b      	ldr	r3, [r3, #32]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	493f      	ldr	r1, [pc, #252]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e018      	b.n	8002808 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a3c      	ldr	r2, [pc, #240]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff fa53 	bl	8001c8c <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027ea:	f7ff fa4f 	bl	8001c8c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e23d      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d036      	beq.n	8002882 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d019      	beq.n	8002850 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800281c:	4b2b      	ldr	r3, [pc, #172]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7ff fa30 	bl	8001c8c <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7ff fa2c 	bl	8001c8c <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e21a      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002842:	4b22      	ldr	r3, [pc, #136]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002846:	f003 0302 	and.w	r3, r3, #2
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0x45c>
 800284e:	e018      	b.n	8002882 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002850:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002854:	4a1d      	ldr	r2, [pc, #116]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7ff fa16 	bl	8001c8c <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002864:	f7ff fa12 	bl	8001c8c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e200      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0320 	and.w	r3, r3, #32
 800288a:	2b00      	cmp	r3, #0
 800288c:	d039      	beq.n	8002902 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d01c      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002896:	4b0d      	ldr	r3, [pc, #52]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 800289c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80028a0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028a2:	f7ff f9f3 	bl	8001c8c <HAL_GetTick>
 80028a6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028aa:	f7ff f9ef 	bl	8001c8c <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e1dd      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_RCC_OscConfig+0x4f8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x4d6>
 80028c8:	e01b      	b.n	8002902 <HAL_RCC_OscConfig+0x52e>
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028d0:	4b9b      	ldr	r3, [pc, #620]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a9a      	ldr	r2, [pc, #616]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80028d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028da:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028dc:	f7ff f9d6 	bl	8001c8c <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e4:	f7ff f9d2 	bl	8001c8c <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1c0      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028f6:	4b92      	ldr	r3, [pc, #584]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 8081 	beq.w	8002a12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002910:	4b8c      	ldr	r3, [pc, #560]	; (8002b44 <HAL_RCC_OscConfig+0x770>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a8b      	ldr	r2, [pc, #556]	; (8002b44 <HAL_RCC_OscConfig+0x770>)
 8002916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800291c:	f7ff f9b6 	bl	8001c8c <HAL_GetTick>
 8002920:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002924:	f7ff f9b2 	bl	8001c8c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b64      	cmp	r3, #100	; 0x64
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1a0      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002936:	4b83      	ldr	r3, [pc, #524]	; (8002b44 <HAL_RCC_OscConfig+0x770>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x584>
 800294a:	4b7d      	ldr	r3, [pc, #500]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 800294c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294e:	4a7c      	ldr	r2, [pc, #496]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002950:	f043 0301 	orr.w	r3, r3, #1
 8002954:	6713      	str	r3, [r2, #112]	; 0x70
 8002956:	e02d      	b.n	80029b4 <HAL_RCC_OscConfig+0x5e0>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x5a6>
 8002960:	4b77      	ldr	r3, [pc, #476]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002964:	4a76      	ldr	r2, [pc, #472]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002966:	f023 0301 	bic.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	; 0x70
 800296c:	4b74      	ldr	r3, [pc, #464]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	4a73      	ldr	r2, [pc, #460]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002972:	f023 0304 	bic.w	r3, r3, #4
 8002976:	6713      	str	r3, [r2, #112]	; 0x70
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x5e0>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x5c8>
 8002982:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002986:	4a6e      	ldr	r2, [pc, #440]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002988:	f043 0304 	orr.w	r3, r3, #4
 800298c:	6713      	str	r3, [r2, #112]	; 0x70
 800298e:	4b6c      	ldr	r3, [pc, #432]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x5e0>
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	4a67      	ldr	r2, [pc, #412]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	; 0x70
 80029a8:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	4a64      	ldr	r2, [pc, #400]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80029ae:	f023 0304 	bic.w	r3, r3, #4
 80029b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7ff f966 	bl	8001c8c <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029c2:	e00a      	b.n	80029da <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7ff f962 	bl	8001c8c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e14e      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029da:	4b59      	ldr	r3, [pc, #356]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0ee      	beq.n	80029c4 <HAL_RCC_OscConfig+0x5f0>
 80029e6:	e014      	b.n	8002a12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e8:	f7ff f950 	bl	8001c8c <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029ee:	e00a      	b.n	8002a06 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7ff f94c 	bl	8001c8c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e138      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a06:	4b4e      	ldr	r3, [pc, #312]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1ee      	bne.n	80029f0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 812d 	beq.w	8002c76 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a24:	2b18      	cmp	r3, #24
 8002a26:	f000 80bd 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	f040 809e 	bne.w	8002b70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a34:	4b42      	ldr	r3, [pc, #264]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a41      	ldr	r2, [pc, #260]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a40:	f7ff f924 	bl	8001c8c <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a48:	f7ff f920 	bl	8001c8c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e10e      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a66:	4b36      	ldr	r3, [pc, #216]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a6a:	4b37      	ldr	r3, [pc, #220]	; (8002b48 <HAL_RCC_OscConfig+0x774>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002a76:	0112      	lsls	r2, r2, #4
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	4931      	ldr	r1, [pc, #196]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	3b01      	subs	r3, #1
 8002a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	025b      	lsls	r3, r3, #9
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	041b      	lsls	r3, r3, #16
 8002a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	061b      	lsls	r3, r3, #24
 8002aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002ab0:	4923      	ldr	r1, [pc, #140]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aba:	4a21      	ldr	r2, [pc, #132]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ac2:	4b1f      	ldr	r3, [pc, #124]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac6:	4b21      	ldr	r3, [pc, #132]	; (8002b4c <HAL_RCC_OscConfig+0x778>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	491b      	ldr	r1, [pc, #108]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ad6:	4b1a      	ldr	r3, [pc, #104]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	f023 020c 	bic.w	r2, r3, #12
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4917      	ldr	r1, [pc, #92]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ae8:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aec:	f023 0202 	bic.w	r2, r3, #2
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af4:	4912      	ldr	r1, [pc, #72]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002afa:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afe:	4a10      	ldr	r2, [pc, #64]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b06:	4b0e      	ldr	r3, [pc, #56]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0a:	4a0d      	ldr	r2, [pc, #52]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b16:	4a0a      	ldr	r2, [pc, #40]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b1e:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b22:	4a07      	ldr	r2, [pc, #28]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a04      	ldr	r2, [pc, #16]	; (8002b40 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7ff f8a9 	bl	8001c8c <HAL_GetTick>
 8002b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b3c:	e011      	b.n	8002b62 <HAL_RCC_OscConfig+0x78e>
 8002b3e:	bf00      	nop
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58024800 	.word	0x58024800
 8002b48:	fffffc0c 	.word	0xfffffc0c
 8002b4c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b50:	f7ff f89c 	bl	8001c8c <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d901      	bls.n	8002b62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	e08a      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0f0      	beq.n	8002b50 <HAL_RCC_OscConfig+0x77c>
 8002b6e:	e082      	b.n	8002c76 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b70:	4b43      	ldr	r3, [pc, #268]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a42      	ldr	r2, [pc, #264]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002b76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7ff f886 	bl	8001c8c <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7ff f882 	bl	8001c8c <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e070      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b96:	4b3a      	ldr	r3, [pc, #232]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x7b0>
 8002ba2:	e068      	b.n	8002c76 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ba4:	4b36      	ldr	r3, [pc, #216]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d031      	beq.n	8002c1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d12a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	091b      	lsrs	r3, r3, #4
 8002bca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d122      	bne.n	8002c1c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d11a      	bne.n	8002c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	0a5b      	lsrs	r3, r3, #9
 8002bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d111      	bne.n	8002c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d108      	bne.n	8002c1c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e02b      	b.n	8002c78 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c20:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c2a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d01f      	beq.n	8002c76 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c36:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	4a11      	ldr	r2, [pc, #68]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c42:	f7ff f823 	bl	8001c8c <HAL_GetTick>
 8002c46:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c48:	bf00      	nop
 8002c4a:	f7ff f81f 	bl	8001c8c <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d0f9      	beq.n	8002c4a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <HAL_RCC_OscConfig+0x8b0>)
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c62:	00d2      	lsls	r2, r2, #3
 8002c64:	4906      	ldr	r1, [pc, #24]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_RCC_OscConfig+0x8ac>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3730      	adds	r7, #48	; 0x30
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	58024400 	.word	0x58024400
 8002c84:	ffff0007 	.word	0xffff0007

08002c88 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e19c      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b8a      	ldr	r3, [pc, #552]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d910      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b87      	ldr	r3, [pc, #540]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f023 020f 	bic.w	r2, r3, #15
 8002cb2:	4985      	ldr	r1, [pc, #532]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b83      	ldr	r3, [pc, #524]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e184      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d010      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	4b7b      	ldr	r3, [pc, #492]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d908      	bls.n	8002cfa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ce8:	4b78      	ldr	r3, [pc, #480]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	4975      	ldr	r1, [pc, #468]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d010      	beq.n	8002d28 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	695a      	ldr	r2, [r3, #20]
 8002d0a:	4b70      	ldr	r3, [pc, #448]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d908      	bls.n	8002d28 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d16:	4b6d      	ldr	r3, [pc, #436]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	496a      	ldr	r1, [pc, #424]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0310 	and.w	r3, r3, #16
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699a      	ldr	r2, [r3, #24]
 8002d38:	4b64      	ldr	r3, [pc, #400]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d908      	bls.n	8002d56 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	495e      	ldr	r1, [pc, #376]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0320 	and.w	r3, r3, #32
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d010      	beq.n	8002d84 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	4b59      	ldr	r3, [pc, #356]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d908      	bls.n	8002d84 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d72:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	4953      	ldr	r1, [pc, #332]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d010      	beq.n	8002db2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	4b4d      	ldr	r3, [pc, #308]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d908      	bls.n	8002db2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da0:	4b4a      	ldr	r3, [pc, #296]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f023 020f 	bic.w	r2, r3, #15
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4947      	ldr	r1, [pc, #284]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d055      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dbe:	4b43      	ldr	r3, [pc, #268]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	4940      	ldr	r1, [pc, #256]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d121      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0f6      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d107      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df0:	4b36      	ldr	r3, [pc, #216]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d115      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0ea      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d107      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d109      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0de      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e0d6      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f023 0207 	bic.w	r2, r3, #7
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4925      	ldr	r1, [pc, #148]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3a:	f7fe ff27 	bl	8001c8c <HAL_GetTick>
 8002e3e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e40:	e00a      	b.n	8002e58 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e42:	f7fe ff23 	bl	8001c8c <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e0be      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e58:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d1eb      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d010      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 030f 	and.w	r3, r3, #15
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d208      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	f023 020f 	bic.w	r2, r3, #15
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	490e      	ldr	r1, [pc, #56]	; (8002ecc <HAL_RCC_ClockConfig+0x244>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d214      	bcs.n	8002ed0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 020f 	bic.w	r2, r3, #15
 8002eae:	4906      	ldr	r1, [pc, #24]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d005      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e086      	b.n	8002fd6 <HAL_RCC_ClockConfig+0x34e>
 8002ec8:	52002000 	.word	0x52002000
 8002ecc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d010      	beq.n	8002efe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	4b3f      	ldr	r3, [pc, #252]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d208      	bcs.n	8002efe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002eec:	4b3c      	ldr	r3, [pc, #240]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	4939      	ldr	r1, [pc, #228]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0308 	and.w	r3, r3, #8
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695a      	ldr	r2, [r3, #20]
 8002f0e:	4b34      	ldr	r3, [pc, #208]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d208      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1a:	4b31      	ldr	r3, [pc, #196]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	69db      	ldr	r3, [r3, #28]
 8002f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	492e      	ldr	r1, [pc, #184]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699a      	ldr	r2, [r3, #24]
 8002f3c:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d208      	bcs.n	8002f5a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f48:	4b25      	ldr	r3, [pc, #148]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0320 	and.w	r3, r3, #32
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d010      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69da      	ldr	r2, [r3, #28]
 8002f6a:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d208      	bcs.n	8002f88 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	69db      	ldr	r3, [r3, #28]
 8002f82:	4917      	ldr	r1, [pc, #92]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f88:	f000 f834 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	4912      	ldr	r1, [pc, #72]	; (8002fe4 <HAL_RCC_ClockConfig+0x35c>)
 8002f9a:	5ccb      	ldrb	r3, [r1, r3]
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fa6:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <HAL_RCC_ClockConfig+0x358>)
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 030f 	and.w	r3, r3, #15
 8002fae:	4a0d      	ldr	r2, [pc, #52]	; (8002fe4 <HAL_RCC_ClockConfig+0x35c>)
 8002fb0:	5cd3      	ldrb	r3, [r2, r3]
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbc:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_RCC_ClockConfig+0x360>)
 8002fbe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc0:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <HAL_RCC_ClockConfig+0x364>)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	; (8002ff0 <HAL_RCC_ClockConfig+0x368>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe fe14 	bl	8001bf8 <HAL_InitTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	58024400 	.word	0x58024400
 8002fe4:	08008d7c 	.word	0x08008d7c
 8002fe8:	24000008 	.word	0x24000008
 8002fec:	24000004 	.word	0x24000004
 8002ff0:	2400000c 	.word	0x2400000c

08002ff4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ffa:	4bb3      	ldr	r3, [pc, #716]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003002:	2b18      	cmp	r3, #24
 8003004:	f200 8155 	bhi.w	80032b2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <HAL_RCC_GetSysClockFreq+0x1c>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003075 	.word	0x08003075
 8003014:	080032b3 	.word	0x080032b3
 8003018:	080032b3 	.word	0x080032b3
 800301c:	080032b3 	.word	0x080032b3
 8003020:	080032b3 	.word	0x080032b3
 8003024:	080032b3 	.word	0x080032b3
 8003028:	080032b3 	.word	0x080032b3
 800302c:	080032b3 	.word	0x080032b3
 8003030:	0800309b 	.word	0x0800309b
 8003034:	080032b3 	.word	0x080032b3
 8003038:	080032b3 	.word	0x080032b3
 800303c:	080032b3 	.word	0x080032b3
 8003040:	080032b3 	.word	0x080032b3
 8003044:	080032b3 	.word	0x080032b3
 8003048:	080032b3 	.word	0x080032b3
 800304c:	080032b3 	.word	0x080032b3
 8003050:	080030a1 	.word	0x080030a1
 8003054:	080032b3 	.word	0x080032b3
 8003058:	080032b3 	.word	0x080032b3
 800305c:	080032b3 	.word	0x080032b3
 8003060:	080032b3 	.word	0x080032b3
 8003064:	080032b3 	.word	0x080032b3
 8003068:	080032b3 	.word	0x080032b3
 800306c:	080032b3 	.word	0x080032b3
 8003070:	080030a7 	.word	0x080030a7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003074:	4b94      	ldr	r3, [pc, #592]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d009      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003080:	4b91      	ldr	r3, [pc, #580]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	08db      	lsrs	r3, r3, #3
 8003086:	f003 0303 	and.w	r3, r3, #3
 800308a:	4a90      	ldr	r2, [pc, #576]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003092:	e111      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003094:	4b8d      	ldr	r3, [pc, #564]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003096:	61bb      	str	r3, [r7, #24]
      break;
 8003098:	e10e      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800309a:	4b8d      	ldr	r3, [pc, #564]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800309c:	61bb      	str	r3, [r7, #24]
      break;
 800309e:	e10b      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030a0:	4b8c      	ldr	r3, [pc, #560]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030a2:	61bb      	str	r3, [r7, #24]
      break;
 80030a4:	e108      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030a6:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030b0:	4b85      	ldr	r3, [pc, #532]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ba:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030bc:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030c6:	4b80      	ldr	r3, [pc, #512]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 80e1 	beq.w	80032ac <HAL_RCC_GetSysClockFreq+0x2b8>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	f000 8083 	beq.w	80031f8 <HAL_RCC_GetSysClockFreq+0x204>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f200 80a1 	bhi.w	800323c <HAL_RCC_GetSysClockFreq+0x248>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_RCC_GetSysClockFreq+0x114>
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d056      	beq.n	80031b4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003106:	e099      	b.n	800323c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003108:	4b6f      	ldr	r3, [pc, #444]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02d      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003114:	4b6c      	ldr	r3, [pc, #432]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313e:	4b62      	ldr	r3, [pc, #392]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003152:	eddf 5a61 	vldr	s11, [pc, #388]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800316e:	e087      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80032dc <HAL_RCC_GetSysClockFreq+0x2e8>
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b51      	ldr	r3, [pc, #324]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a02 	vldr	s12, [r7, #8]
 8003196:	eddf 5a50 	vldr	s11, [pc, #320]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031b2:	e065      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eddf 6a48 	vldr	s13, [pc, #288]	; 80032e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031f6:	e043      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032e4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800323a:	e021      	b.n	8003280 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a26 	vldr	s13, [pc, #152]	; 80032e0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80032d8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800327e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	0a5b      	lsrs	r3, r3, #9
 8003286:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328a:	3301      	adds	r3, #1
 800328c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003298:	edd7 6a07 	vldr	s13, [r7, #28]
 800329c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a4:	ee17 3a90 	vmov	r3, s15
 80032a8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032b4:	61bb      	str	r3, [r7, #24]
      break;
 80032b6:	bf00      	nop
  }

  return sysclockfreq;
 80032b8:	69bb      	ldr	r3, [r7, #24]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	58024400 	.word	0x58024400
 80032cc:	03d09000 	.word	0x03d09000
 80032d0:	003d0900 	.word	0x003d0900
 80032d4:	017d7840 	.word	0x017d7840
 80032d8:	46000000 	.word	0x46000000
 80032dc:	4c742400 	.word	0x4c742400
 80032e0:	4a742400 	.word	0x4a742400
 80032e4:	4bbebc20 	.word	0x4bbebc20

080032e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032ee:	f7ff fe81 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 80032f2:	4602      	mov	r2, r0
 80032f4:	4b10      	ldr	r3, [pc, #64]	; (8003338 <HAL_RCC_GetHCLKFreq+0x50>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	0a1b      	lsrs	r3, r3, #8
 80032fa:	f003 030f 	and.w	r3, r3, #15
 80032fe:	490f      	ldr	r1, [pc, #60]	; (800333c <HAL_RCC_GetHCLKFreq+0x54>)
 8003300:	5ccb      	ldrb	r3, [r1, r3]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	fa22 f303 	lsr.w	r3, r2, r3
 800330a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800330c:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_RCC_GetHCLKFreq+0x50>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	f003 030f 	and.w	r3, r3, #15
 8003314:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_GetHCLKFreq+0x54>)
 8003316:	5cd3      	ldrb	r3, [r2, r3]
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	fa22 f303 	lsr.w	r3, r2, r3
 8003322:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_RCC_GetHCLKFreq+0x58>)
 8003324:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003326:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <HAL_RCC_GetHCLKFreq+0x58>)
 800332e:	681b      	ldr	r3, [r3, #0]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	58024400 	.word	0x58024400
 800333c:	08008d7c 	.word	0x08008d7c
 8003340:	24000008 	.word	0x24000008
 8003344:	24000004 	.word	0x24000004

08003348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800334c:	f7ff ffcc 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 8003350:	4602      	mov	r2, r0
 8003352:	4b06      	ldr	r3, [pc, #24]	; (800336c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	091b      	lsrs	r3, r3, #4
 8003358:	f003 0307 	and.w	r3, r3, #7
 800335c:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCC_GetPCLK1Freq+0x28>)
 800335e:	5ccb      	ldrb	r3, [r1, r3]
 8003360:	f003 031f 	and.w	r3, r3, #31
 8003364:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	58024400 	.word	0x58024400
 8003370:	08008d7c 	.word	0x08008d7c

08003374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003378:	f7ff ffb6 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4904      	ldr	r1, [pc, #16]	; (800339c <HAL_RCC_GetPCLK2Freq+0x28>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003394:	4618      	mov	r0, r3
 8003396:	bd80      	pop	{r7, pc}
 8003398:	58024400 	.word	0x58024400
 800339c:	08008d7c 	.word	0x08008d7c

080033a0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a4:	b0ca      	sub	sp, #296	; 0x128
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033b2:	2300      	movs	r3, #0
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80033c4:	2500      	movs	r5, #0
 80033c6:	ea54 0305 	orrs.w	r3, r4, r5
 80033ca:	d049      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80033d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033d6:	d02f      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033dc:	d828      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e2:	d01a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033e8:	d822      	bhi.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f2:	d007      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033f4:	e01c      	b.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4bb8      	ldr	r3, [pc, #736]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4ab7      	ldr	r2, [pc, #732]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003402:	e01a      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	3308      	adds	r3, #8
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fc8f 	bl	8004d30 <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003418:	e00f      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341e:	3328      	adds	r3, #40	; 0x28
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fd36 	bl	8004e94 <RCCEx_PLL3_Config>
 8003428:	4603      	mov	r3, r0
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10a      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003442:	4ba5      	ldr	r3, [pc, #660]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003450:	4aa1      	ldr	r2, [pc, #644]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003452:	430b      	orrs	r3, r1
 8003454:	6513      	str	r3, [r2, #80]	; 0x50
 8003456:	e003      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800345c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003468:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800346c:	f04f 0900 	mov.w	r9, #0
 8003470:	ea58 0309 	orrs.w	r3, r8, r9
 8003474:	d047      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800347c:	2b04      	cmp	r3, #4
 800347e:	d82a      	bhi.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003480:	a201      	add	r2, pc, #4	; (adr r2, 8003488 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	0800349d 	.word	0x0800349d
 800348c:	080034ab 	.word	0x080034ab
 8003490:	080034c1 	.word	0x080034c1
 8003494:	080034df 	.word	0x080034df
 8003498:	080034df 	.word	0x080034df
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800349c:	4b8e      	ldr	r3, [pc, #568]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	4a8d      	ldr	r2, [pc, #564]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034a8:	e01a      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ae:	3308      	adds	r3, #8
 80034b0:	2100      	movs	r1, #0
 80034b2:	4618      	mov	r0, r3
 80034b4:	f001 fc3c 	bl	8004d30 <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034be:	e00f      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c4:	3328      	adds	r3, #40	; 0x28
 80034c6:	2100      	movs	r1, #0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fce3 	bl	8004e94 <RCCEx_PLL3_Config>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d4:	e004      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034dc:	e000      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e8:	4b7b      	ldr	r3, [pc, #492]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	f023 0107 	bic.w	r1, r3, #7
 80034f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4a78      	ldr	r2, [pc, #480]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f8:	430b      	orrs	r3, r1
 80034fa:	6513      	str	r3, [r2, #80]	; 0x50
 80034fc:	e003      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003502:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003506:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003512:	f04f 0b00 	mov.w	fp, #0
 8003516:	ea5a 030b 	orrs.w	r3, sl, fp
 800351a:	d04c      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003522:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003526:	d030      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d829      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800352e:	2bc0      	cmp	r3, #192	; 0xc0
 8003530:	d02d      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003532:	2bc0      	cmp	r3, #192	; 0xc0
 8003534:	d825      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003536:	2b80      	cmp	r3, #128	; 0x80
 8003538:	d018      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800353a:	2b80      	cmp	r3, #128	; 0x80
 800353c:	d821      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003542:	2b40      	cmp	r3, #64	; 0x40
 8003544:	d007      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003546:	e01c      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b63      	ldr	r3, [pc, #396]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a62      	ldr	r2, [pc, #392]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800355a:	3308      	adds	r3, #8
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fbe6 	bl	8004d30 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800356a:	e011      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fc8d 	bl	8004e94 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003598:	4b4f      	ldr	r3, [pc, #316]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800359a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800359c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	4a4c      	ldr	r2, [pc, #304]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	430b      	orrs	r3, r1
 80035aa:	6513      	str	r3, [r2, #80]	; 0x50
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035be:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80035c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80035c6:	2300      	movs	r3, #0
 80035c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80035cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80035d0:	460b      	mov	r3, r1
 80035d2:	4313      	orrs	r3, r2
 80035d4:	d053      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e2:	d035      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035e8:	d82e      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035ee:	d031      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80035f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80035f4:	d828      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035fa:	d01a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80035fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003600:	d822      	bhi.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003606:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360a:	d007      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800360c:	e01c      	b.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800360e:	4b32      	ldr	r3, [pc, #200]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	4a31      	ldr	r2, [pc, #196]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003618:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800361a:	e01c      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800361c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003620:	3308      	adds	r3, #8
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f001 fb83 	bl	8004d30 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003630:	e011      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003636:	3328      	adds	r3, #40	; 0x28
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fc2a 	bl	8004e94 <RCCEx_PLL3_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003646:	e006      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003656:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10b      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800365e:	4b1e      	ldr	r3, [pc, #120]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003662:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800366a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800366e:	4a1a      	ldr	r2, [pc, #104]	; (80036d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003670:	430b      	orrs	r3, r1
 8003672:	6593      	str	r3, [r2, #88]	; 0x58
 8003674:	e003      	b.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003676:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800367a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003686:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800368a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800368e:	2300      	movs	r3, #0
 8003690:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003694:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003698:	460b      	mov	r3, r1
 800369a:	4313      	orrs	r3, r2
 800369c:	d056      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800369e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80036a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036aa:	d038      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b0:	d831      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b6:	d034      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036bc:	d82b      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c2:	d01d      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c8:	d825      	bhi.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d006      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036d2:	d00a      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036d4:	e01f      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036d6:	bf00      	nop
 80036d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036dc:	4ba2      	ldr	r3, [pc, #648]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e0:	4aa1      	ldr	r2, [pc, #644]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e8:	e01c      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ee:	3308      	adds	r3, #8
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f001 fb1c 	bl	8004d30 <RCCEx_PLL2_Config>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036fe:	e011      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003704:	3328      	adds	r3, #40	; 0x28
 8003706:	2100      	movs	r1, #0
 8003708:	4618      	mov	r0, r3
 800370a:	f001 fbc3 	bl	8004e94 <RCCEx_PLL3_Config>
 800370e:	4603      	mov	r3, r0
 8003710:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003714:	e006      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800371c:	e002      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800371e:	bf00      	nop
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003722:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003724:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10b      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800372c:	4b8e      	ldr	r3, [pc, #568]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003738:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800373c:	4a8a      	ldr	r2, [pc, #552]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800373e:	430b      	orrs	r3, r1
 8003740:	6593      	str	r3, [r2, #88]	; 0x58
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003744:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003748:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003758:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800375c:	2300      	movs	r3, #0
 800375e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003762:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003766:	460b      	mov	r3, r1
 8003768:	4313      	orrs	r3, r2
 800376a:	d03a      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800376c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003772:	2b30      	cmp	r3, #48	; 0x30
 8003774:	d01f      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003776:	2b30      	cmp	r3, #48	; 0x30
 8003778:	d819      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800377a:	2b20      	cmp	r3, #32
 800377c:	d00c      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800377e:	2b20      	cmp	r3, #32
 8003780:	d815      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d019      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003786:	2b10      	cmp	r3, #16
 8003788:	d111      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378a:	4b77      	ldr	r3, [pc, #476]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378e:	4a76      	ldr	r2, [pc, #472]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003798:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800379c:	3308      	adds	r3, #8
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fac5 	bl	8004d30 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037c4:	4b68      	ldr	r3, [pc, #416]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	4a65      	ldr	r2, [pc, #404]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037d8:	e003      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80037ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80037f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80037fc:	460b      	mov	r3, r1
 80037fe:	4313      	orrs	r3, r2
 8003800:	d051      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800380c:	d035      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800380e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003812:	d82e      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003814:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003818:	d031      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800381a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800381e:	d828      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003824:	d01a      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382a:	d822      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003834:	d007      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003836:	e01c      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	4a4a      	ldr	r2, [pc, #296]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003842:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003844:	e01c      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800384a:	3308      	adds	r3, #8
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f001 fa6e 	bl	8004d30 <RCCEx_PLL2_Config>
 8003854:	4603      	mov	r3, r0
 8003856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800385a:	e011      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003860:	3328      	adds	r3, #40	; 0x28
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fb15 	bl	8004e94 <RCCEx_PLL3_Config>
 800386a:	4603      	mov	r3, r0
 800386c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003878:	e002      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800387e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003888:	4b37      	ldr	r3, [pc, #220]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	4a34      	ldr	r2, [pc, #208]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	; 0x50
 800389c:	e003      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038bc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038c0:	460b      	mov	r3, r1
 80038c2:	4313      	orrs	r3, r2
 80038c4:	d056      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d0:	d033      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038d6:	d82c      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038dc:	d02f      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038e2:	d826      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038e8:	d02b      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ee:	d820      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038f4:	d012      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80038f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038fa:	d81a      	bhi.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d022      	beq.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d115      	bne.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390a:	3308      	adds	r3, #8
 800390c:	2101      	movs	r1, #1
 800390e:	4618      	mov	r0, r3
 8003910:	f001 fa0e 	bl	8004d30 <RCCEx_PLL2_Config>
 8003914:	4603      	mov	r3, r0
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800391a:	e015      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800391c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	2101      	movs	r1, #1
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fab5 	bl	8004e94 <RCCEx_PLL3_Config>
 800392a:	4603      	mov	r3, r0
 800392c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003930:	e00a      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003938:	e006      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393a:	bf00      	nop
 800393c:	e004      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003948:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10d      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003954:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800395c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395e:	4a02      	ldr	r2, [pc, #8]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003960:	430b      	orrs	r3, r1
 8003962:	6513      	str	r3, [r2, #80]	; 0x50
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003966:	bf00      	nop
 8003968:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003970:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003984:	2300      	movs	r3, #0
 8003986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800398a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800398e:	460b      	mov	r3, r1
 8003990:	4313      	orrs	r3, r2
 8003992:	d055      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a0:	d033      	beq.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039a6:	d82c      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ac:	d02f      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b2:	d826      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039b8:	d02b      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039be:	d820      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039c4:	d012      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ca:	d81a      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d022      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039d4:	d115      	bne.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039da:	3308      	adds	r3, #8
 80039dc:	2101      	movs	r1, #1
 80039de:	4618      	mov	r0, r3
 80039e0:	f001 f9a6 	bl	8004d30 <RCCEx_PLL2_Config>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039ea:	e015      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039f0:	3328      	adds	r3, #40	; 0x28
 80039f2:	2101      	movs	r1, #1
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fa4d 	bl	8004e94 <RCCEx_PLL3_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a00:	e00a      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a08:	e006      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0a:	bf00      	nop
 8003a0c:	e004      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e002      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a12:	bf00      	nop
 8003a14:	e000      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a20:	4ba3      	ldr	r3, [pc, #652]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a2c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a30:	4a9f      	ldr	r2, [pc, #636]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a32:	430b      	orrs	r3, r1
 8003a34:	6593      	str	r3, [r2, #88]	; 0x58
 8003a36:	e003      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a48:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003a4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a50:	2300      	movs	r3, #0
 8003a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d037      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a6a:	d00e      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a70:	d816      	bhi.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d018      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a7a:	d111      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4b8c      	ldr	r3, [pc, #560]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a8b      	ldr	r2, [pc, #556]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a88:	e00f      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2101      	movs	r1, #1
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f94c 	bl	8004d30 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a9e:	e004      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003ab2:	4b7f      	ldr	r3, [pc, #508]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ac0:	4a7b      	ldr	r2, [pc, #492]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	6513      	str	r3, [r2, #80]	; 0x50
 8003ac6:	e003      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003adc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ae6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d039      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d81c      	bhi.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b3d 	.word	0x08003b3d
 8003b04:	08003b11 	.word	0x08003b11
 8003b08:	08003b1f 	.word	0x08003b1f
 8003b0c:	08003b3d 	.word	0x08003b3d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b10:	4b67      	ldr	r3, [pc, #412]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	4a66      	ldr	r2, [pc, #408]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b1c:	e00f      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b22:	3308      	adds	r3, #8
 8003b24:	2102      	movs	r1, #2
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f902 	bl	8004d30 <RCCEx_PLL2_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b32:	e004      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b3a:	e000      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b46:	4b5a      	ldr	r3, [pc, #360]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	f023 0103 	bic.w	r1, r3, #3
 8003b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b54:	4a56      	ldr	r2, [pc, #344]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	430b      	orrs	r3, r1
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	e003      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f000 809f 	beq.w	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b86:	4b4b      	ldr	r3, [pc, #300]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a4a      	ldr	r2, [pc, #296]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b90:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b92:	f7fe f87b 	bl	8001c8c <HAL_GetTick>
 8003b96:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b9a:	e00b      	b.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b9c:	f7fe f876 	bl	8001c8c <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b64      	cmp	r3, #100	; 0x64
 8003baa:	d903      	bls.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bb2:	e005      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bb4:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0ed      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003bc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d179      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bc8:	4b39      	ldr	r3, [pc, #228]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bd4:	4053      	eors	r3, r2
 8003bd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bde:	4b34      	ldr	r3, [pc, #208]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003be6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003bea:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a30      	ldr	r2, [pc, #192]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bf6:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c00:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c02:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c16:	d118      	bne.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fe f838 	bl	8001c8c <HAL_GetTick>
 8003c1c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c20:	e00d      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c22:	f7fe f833 	bl	8001c8c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003c2c:	1ad2      	subs	r2, r2, r3
 8003c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d903      	bls.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003c3c:	e005      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c3e:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0eb      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d129      	bne.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c62:	d10e      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003c64:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c74:	091a      	lsrs	r2, r3, #4
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c78:	4013      	ands	r3, r2
 8003c7a:	4a0d      	ldr	r2, [pc, #52]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6113      	str	r3, [r2, #16]
 8003c80:	e005      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c8c:	6113      	str	r3, [r2, #16]
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9e:	4a04      	ldr	r2, [pc, #16]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ca4:	e00e      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003caa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003cae:	e009      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003cb0:	58024400 	.word	0x58024400
 8003cb4:	58024800 	.word	0x58024800
 8003cb8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	f002 0301 	and.w	r3, r2, #1
 8003cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003cda:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f000 8089 	beq.w	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cec:	2b28      	cmp	r3, #40	; 0x28
 8003cee:	d86b      	bhi.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003cf0:	a201      	add	r2, pc, #4	; (adr r2, 8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003dd1 	.word	0x08003dd1
 8003cfc:	08003dc9 	.word	0x08003dc9
 8003d00:	08003dc9 	.word	0x08003dc9
 8003d04:	08003dc9 	.word	0x08003dc9
 8003d08:	08003dc9 	.word	0x08003dc9
 8003d0c:	08003dc9 	.word	0x08003dc9
 8003d10:	08003dc9 	.word	0x08003dc9
 8003d14:	08003dc9 	.word	0x08003dc9
 8003d18:	08003d9d 	.word	0x08003d9d
 8003d1c:	08003dc9 	.word	0x08003dc9
 8003d20:	08003dc9 	.word	0x08003dc9
 8003d24:	08003dc9 	.word	0x08003dc9
 8003d28:	08003dc9 	.word	0x08003dc9
 8003d2c:	08003dc9 	.word	0x08003dc9
 8003d30:	08003dc9 	.word	0x08003dc9
 8003d34:	08003dc9 	.word	0x08003dc9
 8003d38:	08003db3 	.word	0x08003db3
 8003d3c:	08003dc9 	.word	0x08003dc9
 8003d40:	08003dc9 	.word	0x08003dc9
 8003d44:	08003dc9 	.word	0x08003dc9
 8003d48:	08003dc9 	.word	0x08003dc9
 8003d4c:	08003dc9 	.word	0x08003dc9
 8003d50:	08003dc9 	.word	0x08003dc9
 8003d54:	08003dc9 	.word	0x08003dc9
 8003d58:	08003dd1 	.word	0x08003dd1
 8003d5c:	08003dc9 	.word	0x08003dc9
 8003d60:	08003dc9 	.word	0x08003dc9
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003dc9 	.word	0x08003dc9
 8003d6c:	08003dc9 	.word	0x08003dc9
 8003d70:	08003dc9 	.word	0x08003dc9
 8003d74:	08003dc9 	.word	0x08003dc9
 8003d78:	08003dd1 	.word	0x08003dd1
 8003d7c:	08003dc9 	.word	0x08003dc9
 8003d80:	08003dc9 	.word	0x08003dc9
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	08003dc9 	.word	0x08003dc9
 8003d8c:	08003dc9 	.word	0x08003dc9
 8003d90:	08003dc9 	.word	0x08003dc9
 8003d94:	08003dc9 	.word	0x08003dc9
 8003d98:	08003dd1 	.word	0x08003dd1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003da0:	3308      	adds	r3, #8
 8003da2:	2101      	movs	r1, #1
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 ffc3 	bl	8004d30 <RCCEx_PLL2_Config>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003db0:	e00f      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	3328      	adds	r3, #40	; 0x28
 8003db8:	2101      	movs	r1, #1
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f001 f86a 	bl	8004e94 <RCCEx_PLL3_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e004      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003dce:	e000      	b.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003dd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10a      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dda:	4bbf      	ldr	r3, [pc, #764]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003de8:	4abb      	ldr	r2, [pc, #748]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003dea:	430b      	orrs	r3, r1
 8003dec:	6553      	str	r3, [r2, #84]	; 0x54
 8003dee:	e003      	b.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e00:	f002 0302 	and.w	r3, r2, #2
 8003e04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e08:	2300      	movs	r3, #0
 8003e0a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003e0e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003e12:	460b      	mov	r3, r1
 8003e14:	4313      	orrs	r3, r2
 8003e16:	d041      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e1e:	2b05      	cmp	r3, #5
 8003e20:	d824      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003e22:	a201      	add	r2, pc, #4	; (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e75 	.word	0x08003e75
 8003e3c:	08003e75 	.word	0x08003e75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e44:	3308      	adds	r3, #8
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff71 	bl	8004d30 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e54:	e00f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5a:	3328      	adds	r3, #40	; 0x28
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f818 	bl	8004e94 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e7e:	4b96      	ldr	r3, [pc, #600]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e82:	f023 0107 	bic.w	r1, r3, #7
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8c:	4a92      	ldr	r2, [pc, #584]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e8e:	430b      	orrs	r3, r1
 8003e90:	6553      	str	r3, [r2, #84]	; 0x54
 8003e92:	e003      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	f002 0304 	and.w	r3, r2, #4
 8003ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eac:	2300      	movs	r3, #0
 8003eae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	d044      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d825      	bhi.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003ec8:	a201      	add	r2, pc, #4	; (adr r2, 8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f1d 	.word	0x08003f1d
 8003ed4:	08003ee9 	.word	0x08003ee9
 8003ed8:	08003eff 	.word	0x08003eff
 8003edc:	08003f1d 	.word	0x08003f1d
 8003ee0:	08003f1d 	.word	0x08003f1d
 8003ee4:	08003f1d 	.word	0x08003f1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	3308      	adds	r3, #8
 8003eee:	2101      	movs	r1, #1
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 ff1d 	bl	8004d30 <RCCEx_PLL2_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003efc:	e00f      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f02:	3328      	adds	r3, #40	; 0x28
 8003f04:	2101      	movs	r1, #1
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 ffc4 	bl	8004e94 <RCCEx_PLL3_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f12:	e004      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f1a:	e000      	b.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f26:	4b6c      	ldr	r3, [pc, #432]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f023 0107 	bic.w	r1, r3, #7
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	4a68      	ldr	r2, [pc, #416]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3c:	e003      	b.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f002 0320 	and.w	r3, r2, #32
 8003f52:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f56:	2300      	movs	r3, #0
 8003f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d055      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f72:	d033      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f78:	d82c      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f84:	d826      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f8a:	d02b      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f90:	d820      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f96:	d012      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f9c:	d81a      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d022      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fac:	3308      	adds	r3, #8
 8003fae:	2100      	movs	r1, #0
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 febd 	bl	8004d30 <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fbc:	e015      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	3328      	adds	r3, #40	; 0x28
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 ff64 	bl	8004e94 <RCCEx_PLL3_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fd2:	e00a      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fda:	e006      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e004      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe0:	bf00      	nop
 8003fe2:	e002      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10b      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ff2:	4b39      	ldr	r3, [pc, #228]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004002:	4a35      	ldr	r2, [pc, #212]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004004:	430b      	orrs	r3, r1
 8004006:	6553      	str	r3, [r2, #84]	; 0x54
 8004008:	e003      	b.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800400e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800401e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004022:	2300      	movs	r3, #0
 8004024:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004028:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800402c:	460b      	mov	r3, r1
 800402e:	4313      	orrs	r3, r2
 8004030:	d058      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004032:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004036:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800403a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800403e:	d033      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004040:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004044:	d82c      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800404a:	d02f      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d826      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004052:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004056:	d02b      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800405c:	d820      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800405e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004062:	d012      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004068:	d81a      	bhi.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d022      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800406e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004072:	d115      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	3308      	adds	r3, #8
 800407a:	2100      	movs	r1, #0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 fe57 	bl	8004d30 <RCCEx_PLL2_Config>
 8004082:	4603      	mov	r3, r0
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004088:	e015      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800408e:	3328      	adds	r3, #40	; 0x28
 8004090:	2102      	movs	r1, #2
 8004092:	4618      	mov	r0, r3
 8004094:	f000 fefe 	bl	8004e94 <RCCEx_PLL3_Config>
 8004098:	4603      	mov	r3, r0
 800409a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800409e:	e00a      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040a6:	e006      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040a8:	bf00      	nop
 80040aa:	e004      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040ac:	bf00      	nop
 80040ae:	e002      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80040b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10e      	bne.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040be:	4b06      	ldr	r3, [pc, #24]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ce:	4a02      	ldr	r2, [pc, #8]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6593      	str	r3, [r2, #88]	; 0x58
 80040d4:	e006      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80040f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040fe:	460b      	mov	r3, r1
 8004100:	4313      	orrs	r3, r2
 8004102:	d055      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004108:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800410c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004110:	d033      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004112:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004116:	d82c      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411c:	d02f      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800411e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004122:	d826      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004124:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004128:	d02b      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800412a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800412e:	d820      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004134:	d012      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004136:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800413a:	d81a      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800413c:	2b00      	cmp	r3, #0
 800413e:	d022      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004144:	d115      	bne.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800414a:	3308      	adds	r3, #8
 800414c:	2100      	movs	r1, #0
 800414e:	4618      	mov	r0, r3
 8004150:	f000 fdee 	bl	8004d30 <RCCEx_PLL2_Config>
 8004154:	4603      	mov	r3, r0
 8004156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800415a:	e015      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004160:	3328      	adds	r3, #40	; 0x28
 8004162:	2102      	movs	r1, #2
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fe95 	bl	8004e94 <RCCEx_PLL3_Config>
 800416a:	4603      	mov	r3, r0
 800416c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004170:	e00a      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417a:	bf00      	nop
 800417c:	e004      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800417e:	bf00      	nop
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004190:	4ba1      	ldr	r3, [pc, #644]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800419c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041a0:	4a9d      	ldr	r2, [pc, #628]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6593      	str	r3, [r2, #88]	; 0x58
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f002 0308 	and.w	r3, r2, #8
 80041bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80041ca:	460b      	mov	r3, r1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d01e      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	3328      	adds	r3, #40	; 0x28
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fe54 	bl	8004e94 <RCCEx_PLL3_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d002      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80041f8:	4b87      	ldr	r3, [pc, #540]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004204:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004208:	4a83      	ldr	r2, [pc, #524]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800420a:	430b      	orrs	r3, r1
 800420c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800420e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004216:	f002 0310 	and.w	r3, r2, #16
 800421a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800421e:	2300      	movs	r3, #0
 8004220:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004224:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004228:	460b      	mov	r3, r1
 800422a:	4313      	orrs	r3, r2
 800422c:	d01e      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800422e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800423a:	d10c      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004240:	3328      	adds	r3, #40	; 0x28
 8004242:	2102      	movs	r1, #2
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fe25 	bl	8004e94 <RCCEx_PLL3_Config>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004256:	4b70      	ldr	r3, [pc, #448]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800425e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004266:	4a6c      	ldr	r2, [pc, #432]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004268:	430b      	orrs	r3, r1
 800426a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800427c:	2300      	movs	r3, #0
 800427e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004282:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004286:	460b      	mov	r3, r1
 8004288:	4313      	orrs	r3, r2
 800428a:	d03e      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800428c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004290:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004298:	d022      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800429a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800429e:	d81b      	bhi.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d00b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80042aa:	e015      	b.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042b0:	3308      	adds	r3, #8
 80042b2:	2100      	movs	r1, #0
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd3b 	bl	8004d30 <RCCEx_PLL2_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042c0:	e00f      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	3328      	adds	r3, #40	; 0x28
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fde2 	bl	8004e94 <RCCEx_PLL3_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042d6:	e004      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042de:	e000      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80042e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042ea:	4b4b      	ldr	r3, [pc, #300]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ee:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80042f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80042fa:	4a47      	ldr	r2, [pc, #284]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	e003      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004316:	67bb      	str	r3, [r7, #120]	; 0x78
 8004318:	2300      	movs	r3, #0
 800431a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800431c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004320:	460b      	mov	r3, r1
 8004322:	4313      	orrs	r3, r2
 8004324:	d03b      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004332:	d01f      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004334:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004338:	d818      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800433a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800433e:	d003      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004340:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004344:	d007      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004346:	e011      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004348:	4b33      	ldr	r3, [pc, #204]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	4a32      	ldr	r2, [pc, #200]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004354:	e00f      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800435a:	3328      	adds	r3, #40	; 0x28
 800435c:	2101      	movs	r1, #1
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fd98 	bl	8004e94 <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800436a:	e004      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004372:	e000      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10b      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800437e:	4b26      	ldr	r3, [pc, #152]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004382:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004390:	430b      	orrs	r3, r1
 8004392:	6553      	str	r3, [r2, #84]	; 0x54
 8004394:	e003      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800439a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80043aa:	673b      	str	r3, [r7, #112]	; 0x70
 80043ac:	2300      	movs	r3, #0
 80043ae:	677b      	str	r3, [r7, #116]	; 0x74
 80043b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d034      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80043c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c8:	d007      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80043ca:	e011      	b.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043cc:	4b12      	ldr	r3, [pc, #72]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d0:	4a11      	ldr	r2, [pc, #68]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043d8:	e00e      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043de:	3308      	adds	r3, #8
 80043e0:	2102      	movs	r1, #2
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fca4 	bl	8004d30 <RCCEx_PLL2_Config>
 80043e8:	4603      	mov	r3, r0
 80043ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043ee:	e003      	b.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80043f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004400:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800440c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800440e:	4a02      	ldr	r2, [pc, #8]	; (8004418 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004410:	430b      	orrs	r3, r1
 8004412:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004414:	e006      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004416:	bf00      	nop
 8004418:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004420:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004430:	66bb      	str	r3, [r7, #104]	; 0x68
 8004432:	2300      	movs	r3, #0
 8004434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004436:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800443a:	460b      	mov	r3, r1
 800443c:	4313      	orrs	r3, r2
 800443e:	d00c      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004440:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004444:	3328      	adds	r3, #40	; 0x28
 8004446:	2102      	movs	r1, #2
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fd23 	bl	8004e94 <RCCEx_PLL3_Config>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d002      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	2300      	movs	r3, #0
 800446a:	667b      	str	r3, [r7, #100]	; 0x64
 800446c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004470:	460b      	mov	r3, r1
 8004472:	4313      	orrs	r3, r2
 8004474:	d038      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004476:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004482:	d018      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004488:	d811      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800448e:	d014      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004494:	d80b      	bhi.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d011      	beq.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800449e:	d106      	bne.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a0:	4bc3      	ldr	r3, [pc, #780]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	4ac2      	ldr	r2, [pc, #776]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80044ac:	e008      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044b4:	e004      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044b6:	bf00      	nop
 80044b8:	e002      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044ba:	bf00      	nop
 80044bc:	e000      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80044be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10b      	bne.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c8:	4bb9      	ldr	r3, [pc, #740]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044d8:	4ab5      	ldr	r2, [pc, #724]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	6553      	str	r3, [r2, #84]	; 0x54
 80044de:	e003      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80044f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80044f6:	2300      	movs	r3, #0
 80044f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044fa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80044fe:	460b      	mov	r3, r1
 8004500:	4313      	orrs	r3, r2
 8004502:	d009      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004504:	4baa      	ldr	r3, [pc, #680]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004512:	4aa7      	ldr	r2, [pc, #668]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004514:	430b      	orrs	r3, r1
 8004516:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004520:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004524:	653b      	str	r3, [r7, #80]	; 0x50
 8004526:	2300      	movs	r3, #0
 8004528:	657b      	str	r3, [r7, #84]	; 0x54
 800452a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800452e:	460b      	mov	r3, r1
 8004530:	4313      	orrs	r3, r2
 8004532:	d00a      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004534:	4b9e      	ldr	r3, [pc, #632]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800453c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004540:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004544:	4a9a      	ldr	r2, [pc, #616]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004546:	430b      	orrs	r3, r1
 8004548:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004552:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004556:	64bb      	str	r3, [r7, #72]	; 0x48
 8004558:	2300      	movs	r3, #0
 800455a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800455c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004560:	460b      	mov	r3, r1
 8004562:	4313      	orrs	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004566:	4b92      	ldr	r3, [pc, #584]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800456e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004574:	4a8e      	ldr	r2, [pc, #568]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004576:	430b      	orrs	r3, r1
 8004578:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004586:	643b      	str	r3, [r7, #64]	; 0x40
 8004588:	2300      	movs	r3, #0
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d00e      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004596:	4b86      	ldr	r3, [pc, #536]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	4a85      	ldr	r2, [pc, #532]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045a0:	6113      	str	r3, [r2, #16]
 80045a2:	4b83      	ldr	r3, [pc, #524]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a4:	6919      	ldr	r1, [r3, #16]
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045ae:	4a80      	ldr	r2, [pc, #512]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80045c2:	2300      	movs	r3, #0
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045d0:	4b77      	ldr	r3, [pc, #476]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d4:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80045d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045de:	4a74      	ldr	r2, [pc, #464]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e0:	430b      	orrs	r3, r1
 80045e2:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ec:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80045f0:	633b      	str	r3, [r7, #48]	; 0x30
 80045f2:	2300      	movs	r3, #0
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
 80045f6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80045fa:	460b      	mov	r3, r1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004600:	4b6b      	ldr	r3, [pc, #428]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004604:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800460c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004610:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004612:	430b      	orrs	r3, r1
 8004614:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004616:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	2100      	movs	r1, #0
 8004620:	62b9      	str	r1, [r7, #40]	; 0x28
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004628:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800462c:	460b      	mov	r3, r1
 800462e:	4313      	orrs	r3, r2
 8004630:	d011      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	3308      	adds	r3, #8
 8004638:	2100      	movs	r1, #0
 800463a:	4618      	mov	r0, r3
 800463c:	f000 fb78 	bl	8004d30 <RCCEx_PLL2_Config>
 8004640:	4603      	mov	r3, r0
 8004642:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004646:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004656:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	2100      	movs	r1, #0
 8004660:	6239      	str	r1, [r7, #32]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	627b      	str	r3, [r7, #36]	; 0x24
 8004668:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800466c:	460b      	mov	r3, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	d011      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004676:	3308      	adds	r3, #8
 8004678:	2101      	movs	r1, #1
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fb58 	bl	8004d30 <RCCEx_PLL2_Config>
 8004680:	4603      	mov	r3, r0
 8004682:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800468a:	2b00      	cmp	r3, #0
 800468c:	d003      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800469a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469e:	2100      	movs	r1, #0
 80046a0:	61b9      	str	r1, [r7, #24]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	61fb      	str	r3, [r7, #28]
 80046a8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80046ac:	460b      	mov	r3, r1
 80046ae:	4313      	orrs	r3, r2
 80046b0:	d011      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046b6:	3308      	adds	r3, #8
 80046b8:	2102      	movs	r1, #2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fb38 	bl	8004d30 <RCCEx_PLL2_Config>
 80046c0:	4603      	mov	r3, r0
 80046c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80046c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	2100      	movs	r1, #0
 80046e0:	6139      	str	r1, [r7, #16]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046ec:	460b      	mov	r3, r1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	d011      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f6:	3328      	adds	r3, #40	; 0x28
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fbca 	bl	8004e94 <RCCEx_PLL3_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004706:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004712:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004716:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	2100      	movs	r1, #0
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	60fb      	str	r3, [r7, #12]
 8004728:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800472c:	460b      	mov	r3, r1
 800472e:	4313      	orrs	r3, r2
 8004730:	d011      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004736:	3328      	adds	r3, #40	; 0x28
 8004738:	2101      	movs	r1, #1
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fbaa 	bl	8004e94 <RCCEx_PLL3_Config>
 8004740:	4603      	mov	r3, r0
 8004742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004746:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	2100      	movs	r1, #0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	607b      	str	r3, [r7, #4]
 8004768:	e9d7 1200 	ldrd	r1, r2, [r7]
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d011      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004776:	3328      	adds	r3, #40	; 0x28
 8004778:	2102      	movs	r1, #2
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb8a 	bl	8004e94 <RCCEx_PLL3_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004796:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	e000      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80047aa:	46bd      	mov	sp, r7
 80047ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b0:	58024400 	.word	0x58024400

080047b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80047b8:	f7fe fd96 	bl	80032e8 <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4904      	ldr	r1, [pc, #16]	; (80047dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	f003 031f 	and.w	r3, r3, #31
 80047d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	58024400 	.word	0x58024400
 80047dc:	08008d7c 	.word	0x08008d7c

080047e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b089      	sub	sp, #36	; 0x24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047e8:	4ba1      	ldr	r3, [pc, #644]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f003 0303 	and.w	r3, r3, #3
 80047f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047f2:	4b9f      	ldr	r3, [pc, #636]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	0b1b      	lsrs	r3, r3, #12
 80047f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047fe:	4b9c      	ldr	r3, [pc, #624]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	091b      	lsrs	r3, r3, #4
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800480a:	4b99      	ldr	r3, [pc, #612]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480e:	08db      	lsrs	r3, r3, #3
 8004810:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	fb02 f303 	mul.w	r3, r2, r3
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8111 	beq.w	8004a50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b02      	cmp	r3, #2
 8004832:	f000 8083 	beq.w	800493c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b02      	cmp	r3, #2
 800483a:	f200 80a1 	bhi.w	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d056      	beq.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800484a:	e099      	b.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484c:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02d      	beq.n	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004858:	4b85      	ldr	r3, [pc, #532]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	08db      	lsrs	r3, r3, #3
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	4a84      	ldr	r2, [pc, #528]	; (8004a74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
 8004868:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	ee07 3a90 	vmov	s15, r3
 8004870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048b2:	e087      	b.n	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b6a      	ldr	r3, [pc, #424]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	e065      	b.n	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	e043      	b.n	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004a84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b48      	ldr	r3, [pc, #288]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	e021      	b.n	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004a80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004a78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80049c4:	4b2a      	ldr	r3, [pc, #168]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	0a5b      	lsrs	r3, r3, #9
 80049ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ce:	ee07 3a90 	vmov	s15, r3
 80049d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049de:	edd7 6a07 	vldr	s13, [r7, #28]
 80049e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ea:	ee17 2a90 	vmov	r2, s15
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049f2:	4b1f      	ldr	r3, [pc, #124]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049fc:	ee07 3a90 	vmov	s15, r3
 8004a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a18:	ee17 2a90 	vmov	r2, s15
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	0e1b      	lsrs	r3, r3, #24
 8004a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a46:	ee17 2a90 	vmov	r2, s15
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a4e:	e008      	b.n	8004a62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
}
 8004a62:	bf00      	nop
 8004a64:	3724      	adds	r7, #36	; 0x24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	58024400 	.word	0x58024400
 8004a74:	03d09000 	.word	0x03d09000
 8004a78:	46000000 	.word	0x46000000
 8004a7c:	4c742400 	.word	0x4c742400
 8004a80:	4a742400 	.word	0x4a742400
 8004a84:	4bbebc20 	.word	0x4bbebc20

08004a88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b089      	sub	sp, #36	; 0x24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a90:	4ba1      	ldr	r3, [pc, #644]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a9a:	4b9f      	ldr	r3, [pc, #636]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	0d1b      	lsrs	r3, r3, #20
 8004aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004aa4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004aa6:	4b9c      	ldr	r3, [pc, #624]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0301 	and.w	r3, r3, #1
 8004ab0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004ab2:	4b99      	ldr	r3, [pc, #612]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8111 	beq.w	8004cf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	f000 8083 	beq.w	8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	f200 80a1 	bhi.w	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d056      	beq.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004af2:	e099      	b.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004af4:	4b88      	ldr	r3, [pc, #544]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0320 	and.w	r3, r3, #32
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d02d      	beq.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b00:	4b85      	ldr	r3, [pc, #532]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	08db      	lsrs	r3, r3, #3
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	4a84      	ldr	r2, [pc, #528]	; (8004d1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	ee07 3a90 	vmov	s15, r3
 8004b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b5a:	e087      	b.n	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b6a      	ldr	r3, [pc, #424]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	e065      	b.n	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	ee07 3a90 	vmov	s15, r3
 8004ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004baa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b59      	ldr	r3, [pc, #356]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be2:	e043      	b.n	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b48      	ldr	r3, [pc, #288]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	e021      	b.n	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b37      	ldr	r3, [pc, #220]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004d20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	0a5b      	lsrs	r3, r3, #9
 8004c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c76:	ee07 3a90 	vmov	s15, r3
 8004c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c86:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c92:	ee17 2a90 	vmov	r2, s15
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c9a:	4b1f      	ldr	r3, [pc, #124]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	0c1b      	lsrs	r3, r3, #16
 8004ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc0:	ee17 2a90 	vmov	r2, s15
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	0e1b      	lsrs	r3, r3, #24
 8004cce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cd2:	ee07 3a90 	vmov	s15, r3
 8004cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004cde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ce2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cee:	ee17 2a90 	vmov	r2, s15
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cf6:	e008      	b.n	8004d0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2200      	movs	r2, #0
 8004d02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	609a      	str	r2, [r3, #8]
}
 8004d0a:	bf00      	nop
 8004d0c:	3724      	adds	r7, #36	; 0x24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	58024400 	.word	0x58024400
 8004d1c:	03d09000 	.word	0x03d09000
 8004d20:	46000000 	.word	0x46000000
 8004d24:	4c742400 	.word	0x4c742400
 8004d28:	4a742400 	.word	0x4a742400
 8004d2c:	4bbebc20 	.word	0x4bbebc20

08004d30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d3e:	4b53      	ldr	r3, [pc, #332]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d101      	bne.n	8004d4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e099      	b.n	8004e82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d4e:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a4e      	ldr	r2, [pc, #312]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5a:	f7fc ff97 	bl	8001c8c <HAL_GetTick>
 8004d5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d60:	e008      	b.n	8004d74 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d62:	f7fc ff93 	bl	8001c8c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b02      	cmp	r3, #2
 8004d6e:	d901      	bls.n	8004d74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e086      	b.n	8004e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d74:	4b45      	ldr	r3, [pc, #276]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1f0      	bne.n	8004d62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d80:	4b42      	ldr	r3, [pc, #264]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	031b      	lsls	r3, r3, #12
 8004d8e:	493f      	ldr	r1, [pc, #252]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	628b      	str	r3, [r1, #40]	; 0x28
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	025b      	lsls	r3, r3, #9
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	041b      	lsls	r3, r3, #16
 8004db2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	061b      	lsls	r3, r3, #24
 8004dc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004dc4:	4931      	ldr	r1, [pc, #196]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dca:	4b30      	ldr	r3, [pc, #192]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	492d      	ldr	r1, [pc, #180]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ddc:	4b2b      	ldr	r3, [pc, #172]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	f023 0220 	bic.w	r2, r3, #32
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	4928      	ldr	r1, [pc, #160]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dee:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004df4:	f023 0310 	bic.w	r3, r3, #16
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dfa:	4b24      	ldr	r3, [pc, #144]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfe:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <RCCEx_PLL2_Config+0x160>)
 8004e00:	4013      	ands	r3, r2
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	69d2      	ldr	r2, [r2, #28]
 8004e06:	00d2      	lsls	r2, r2, #3
 8004e08:	4920      	ldr	r1, [pc, #128]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e0e:	4b1f      	ldr	r3, [pc, #124]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e14:	f043 0310 	orr.w	r3, r3, #16
 8004e18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e20:	4b1a      	ldr	r3, [pc, #104]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e24:	4a19      	ldr	r2, [pc, #100]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e2c:	e00f      	b.n	8004e4e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e34:	4b15      	ldr	r3, [pc, #84]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	4a14      	ldr	r2, [pc, #80]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004e40:	e005      	b.n	8004e4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e42:	4b12      	ldr	r3, [pc, #72]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	4a11      	ldr	r2, [pc, #68]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e4e:	4b0f      	ldr	r3, [pc, #60]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a0e      	ldr	r2, [pc, #56]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e5a:	f7fc ff17 	bl	8001c8c <HAL_GetTick>
 8004e5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e60:	e008      	b.n	8004e74 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e62:	f7fc ff13 	bl	8001c8c <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d901      	bls.n	8004e74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e006      	b.n	8004e82 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e74:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <RCCEx_PLL2_Config+0x15c>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0f0      	beq.n	8004e62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	58024400 	.word	0x58024400
 8004e90:	ffff0007 	.word	0xffff0007

08004e94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ea2:	4b53      	ldr	r3, [pc, #332]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d101      	bne.n	8004eb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e099      	b.n	8004fe6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004eb2:	4b4f      	ldr	r3, [pc, #316]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a4e      	ldr	r2, [pc, #312]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ebe:	f7fc fee5 	bl	8001c8c <HAL_GetTick>
 8004ec2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ec4:	e008      	b.n	8004ed8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ec6:	f7fc fee1 	bl	8001c8c <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d901      	bls.n	8004ed8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e086      	b.n	8004fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ed8:	4b45      	ldr	r3, [pc, #276]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f0      	bne.n	8004ec6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ee4:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	051b      	lsls	r3, r3, #20
 8004ef2:	493f      	ldr	r1, [pc, #252]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	628b      	str	r3, [r1, #40]	; 0x28
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	025b      	lsls	r3, r3, #9
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	431a      	orrs	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	3b01      	subs	r3, #1
 8004f14:	041b      	lsls	r3, r3, #16
 8004f16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	3b01      	subs	r3, #1
 8004f22:	061b      	lsls	r3, r3, #24
 8004f24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004f28:	4931      	ldr	r1, [pc, #196]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f2e:	4b30      	ldr	r3, [pc, #192]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	492d      	ldr	r1, [pc, #180]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f40:	4b2b      	ldr	r3, [pc, #172]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	4928      	ldr	r1, [pc, #160]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f52:	4b27      	ldr	r3, [pc, #156]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f56:	4a26      	ldr	r2, [pc, #152]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f5e:	4b24      	ldr	r3, [pc, #144]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f62:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <RCCEx_PLL3_Config+0x160>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	69d2      	ldr	r2, [r2, #28]
 8004f6a:	00d2      	lsls	r2, r2, #3
 8004f6c:	4920      	ldr	r1, [pc, #128]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f72:	4b1f      	ldr	r3, [pc, #124]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d106      	bne.n	8004f92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f84:	4b1a      	ldr	r3, [pc, #104]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f88:	4a19      	ldr	r2, [pc, #100]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004f8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004f90:	e00f      	b.n	8004fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004f9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fa2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004fa4:	e005      	b.n	8004fb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fa6:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004faa:	4a11      	ldr	r2, [pc, #68]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004fac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a0e      	ldr	r2, [pc, #56]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fbe:	f7fc fe65 	bl	8001c8c <HAL_GetTick>
 8004fc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fc4:	e008      	b.n	8004fd8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004fc6:	f7fc fe61 	bl	8001c8c <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004fd8:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <RCCEx_PLL3_Config+0x15c>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	ffff0007 	.word	0xffff0007

08004ff8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e10f      	b.n	800522a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a87      	ldr	r2, [pc, #540]	; (8005234 <HAL_SPI_Init+0x23c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <HAL_SPI_Init+0x42>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a86      	ldr	r2, [pc, #536]	; (8005238 <HAL_SPI_Init+0x240>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00a      	beq.n	800503a <HAL_SPI_Init+0x42>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a84      	ldr	r2, [pc, #528]	; (800523c <HAL_SPI_Init+0x244>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d005      	beq.n	800503a <HAL_SPI_Init+0x42>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	2b0f      	cmp	r3, #15
 8005034:	d901      	bls.n	800503a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e0f7      	b.n	800522a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fd5a 	bl	8005af4 <SPI_GetPacketSize>
 8005040:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a7b      	ldr	r2, [pc, #492]	; (8005234 <HAL_SPI_Init+0x23c>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00c      	beq.n	8005066 <HAL_SPI_Init+0x6e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a79      	ldr	r2, [pc, #484]	; (8005238 <HAL_SPI_Init+0x240>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d007      	beq.n	8005066 <HAL_SPI_Init+0x6e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a78      	ldr	r2, [pc, #480]	; (800523c <HAL_SPI_Init+0x244>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d002      	beq.n	8005066 <HAL_SPI_Init+0x6e>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b08      	cmp	r3, #8
 8005064:	d811      	bhi.n	800508a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800506a:	4a72      	ldr	r2, [pc, #456]	; (8005234 <HAL_SPI_Init+0x23c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a70      	ldr	r2, [pc, #448]	; (8005238 <HAL_SPI_Init+0x240>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_SPI_Init+0x8c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6f      	ldr	r2, [pc, #444]	; (800523c <HAL_SPI_Init+0x244>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d104      	bne.n	800508e <HAL_SPI_Init+0x96>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b10      	cmp	r3, #16
 8005088:	d901      	bls.n	800508e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e0cd      	b.n	800522a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d106      	bne.n	80050a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fc fa18 	bl	80014d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2202      	movs	r2, #2
 80050ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0201 	bic.w	r2, r2, #1
 80050be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80050ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050d4:	d119      	bne.n	800510a <HAL_SPI_Init+0x112>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050de:	d103      	bne.n	80050e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80050f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050f8:	d107      	bne.n	800510a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005108:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00f      	beq.n	8005136 <HAL_SPI_Init+0x13e>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	2b06      	cmp	r3, #6
 800511c:	d90b      	bls.n	8005136 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	601a      	str	r2, [r3, #0]
 8005134:	e007      	b.n	8005146 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005144:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69da      	ldr	r2, [r3, #28]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	431a      	orrs	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	431a      	orrs	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	ea42 0103 	orr.w	r1, r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	431a      	orrs	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6a1b      	ldr	r3, [r3, #32]
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	431a      	orrs	r2, r3
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a6:	ea42 0103 	orr.w	r1, r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d113      	bne.n	80051e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0201 	bic.w	r2, r2, #1
 80051f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	430a      	orrs	r2, r1
 8005216:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40013000 	.word	0x40013000
 8005238:	40003800 	.word	0x40003800
 800523c:	40003c00 	.word	0x40003c00

08005240 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	603b      	str	r3, [r7, #0]
 800524c:	4613      	mov	r3, r2
 800524e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	3320      	adds	r3, #32
 8005256:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005258:	2300      	movs	r3, #0
 800525a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_SPI_Transmit+0x2a>
 8005266:	2302      	movs	r3, #2
 8005268:	e1e1      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005272:	f7fc fd0b 	bl	8001c8c <HAL_GetTick>
 8005276:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b01      	cmp	r3, #1
 8005282:	d007      	beq.n	8005294 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8005284:	2302      	movs	r3, #2
 8005286:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005290:	7efb      	ldrb	r3, [r7, #27]
 8005292:	e1cc      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Transmit+0x60>
 800529a:	88fb      	ldrh	r3, [r7, #6]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d107      	bne.n	80052b0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80052ac:	7efb      	ldrb	r3, [r7, #27]
 80052ae:	e1be      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2203      	movs	r2, #3
 80052b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	88fa      	ldrh	r2, [r7, #6]
 80052d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8005300:	d108      	bne.n	8005314 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005310:	601a      	str	r2, [r3, #0]
 8005312:	e009      	b.n	8005328 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005326:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	4b96      	ldr	r3, [pc, #600]	; (8005588 <HAL_SPI_Transmit+0x348>)
 8005330:	4013      	ands	r3, r2
 8005332:	88f9      	ldrh	r1, [r7, #6]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	6812      	ldr	r2, [r2, #0]
 8005338:	430b      	orrs	r3, r1
 800533a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f042 0201 	orr.w	r2, r2, #1
 800534a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005354:	d107      	bne.n	8005366 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005364:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b0f      	cmp	r3, #15
 800536c:	d947      	bls.n	80053fe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800536e:	e03f      	b.n	80053f0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d114      	bne.n	80053a8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800539a:	b29b      	uxth	r3, r3
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80053a6:	e023      	b.n	80053f0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053a8:	f7fc fc70 	bl	8001c8c <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d803      	bhi.n	80053c0 <HAL_SPI_Transmit+0x180>
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053be:	d102      	bne.n	80053c6 <HAL_SPI_Transmit+0x186>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d114      	bne.n	80053f0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fac6 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e11e      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1b9      	bne.n	8005370 <HAL_SPI_Transmit+0x130>
 80053fc:	e0f1      	b.n	80055e2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	2b07      	cmp	r3, #7
 8005404:	f240 80e6 	bls.w	80055d4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8005408:	e05d      	b.n	80054c6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b02      	cmp	r3, #2
 8005416:	d132      	bne.n	800547e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	d918      	bls.n	8005456 <HAL_SPI_Transmit+0x216>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d014      	beq.n	8005456 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800543c:	1d1a      	adds	r2, r3, #4
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005448:	b29b      	uxth	r3, r3
 800544a:	3b02      	subs	r3, #2
 800544c:	b29a      	uxth	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005454:	e037      	b.n	80054c6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	881a      	ldrh	r2, [r3, #0]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005464:	1c9a      	adds	r2, r3, #2
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005470:	b29b      	uxth	r3, r3
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800547c:	e023      	b.n	80054c6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800547e:	f7fc fc05 	bl	8001c8c <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d803      	bhi.n	8005496 <HAL_SPI_Transmit+0x256>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005494:	d102      	bne.n	800549c <HAL_SPI_Transmit+0x25c>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d114      	bne.n	80054c6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800549c:	68f8      	ldr	r0, [r7, #12]
 800549e:	f000 fa5b 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e0b3      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054cc:	b29b      	uxth	r3, r3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d19b      	bne.n	800540a <HAL_SPI_Transmit+0x1ca>
 80054d2:	e086      	b.n	80055e2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d154      	bne.n	800558c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d918      	bls.n	8005520 <HAL_SPI_Transmit+0x2e0>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d914      	bls.n	8005520 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005506:	1d1a      	adds	r2, r3, #4
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005512:	b29b      	uxth	r3, r3
 8005514:	3b04      	subs	r3, #4
 8005516:	b29a      	uxth	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800551e:	e059      	b.n	80055d4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005526:	b29b      	uxth	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	d917      	bls.n	800555c <HAL_SPI_Transmit+0x31c>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	2b00      	cmp	r3, #0
 8005532:	d013      	beq.n	800555c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005538:	881a      	ldrh	r2, [r3, #0]
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	1c9a      	adds	r2, r3, #2
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b02      	subs	r3, #2
 8005552:	b29a      	uxth	r2, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800555a:	e03b      	b.n	80055d4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3320      	adds	r3, #32
 8005566:	7812      	ldrb	r2, [r2, #0]
 8005568:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800557a:	b29b      	uxth	r3, r3
 800557c:	3b01      	subs	r3, #1
 800557e:	b29a      	uxth	r2, r3
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8005586:	e025      	b.n	80055d4 <HAL_SPI_Transmit+0x394>
 8005588:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800558c:	f7fc fb7e 	bl	8001c8c <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d803      	bhi.n	80055a4 <HAL_SPI_Transmit+0x364>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055a2:	d102      	bne.n	80055aa <HAL_SPI_Transmit+0x36a>
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d114      	bne.n	80055d4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f9d4 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e02c      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80055da:	b29b      	uxth	r3, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f47f af79 	bne.w	80054d4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	9300      	str	r3, [sp, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2200      	movs	r2, #0
 80055ea:	2108      	movs	r1, #8
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f000 fa53 	bl	8005a98 <SPI_WaitOnFlagUntilTimeout>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d007      	beq.n	8005608 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055fe:	f043 0220 	orr.w	r2, r3, #32
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f9a5 	bl	8005958 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800562c:	7efb      	ldrb	r3, [r7, #27]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3720      	adds	r7, #32
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop

08005638 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005648:	2300      	movs	r3, #0
 800564a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	3330      	adds	r3, #48	; 0x30
 8005652:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800565a:	2b01      	cmp	r3, #1
 800565c:	d101      	bne.n	8005662 <HAL_SPI_Receive+0x2a>
 800565e:	2302      	movs	r3, #2
 8005660:	e173      	b.n	800594a <HAL_SPI_Receive+0x312>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800566a:	f7fc fb0f 	bl	8001c8c <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005676:	b2db      	uxtb	r3, r3
 8005678:	2b01      	cmp	r3, #1
 800567a:	d007      	beq.n	800568c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800567c:	2302      	movs	r3, #2
 800567e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8005688:	7ffb      	ldrb	r3, [r7, #31]
 800568a:	e15e      	b.n	800594a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d002      	beq.n	8005698 <HAL_SPI_Receive+0x60>
 8005692:	88fb      	ldrh	r3, [r7, #6]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d107      	bne.n	80056a8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80056a4:	7ffb      	ldrb	r3, [r7, #31]
 80056a6:	e150      	b.n	800594a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2204      	movs	r2, #4
 80056ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	88fa      	ldrh	r2, [r7, #6]
 80056ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80056f8:	d108      	bne.n	800570c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	e009      	b.n	8005720 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800571e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b8b      	ldr	r3, [pc, #556]	; (8005954 <HAL_SPI_Receive+0x31c>)
 8005728:	4013      	ands	r3, r2
 800572a:	88f9      	ldrh	r1, [r7, #6]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	6812      	ldr	r2, [r2, #0]
 8005730:	430b      	orrs	r3, r1
 8005732:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0201 	orr.w	r2, r2, #1
 8005742:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d107      	bne.n	800575e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800575c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	2b0f      	cmp	r3, #15
 8005764:	d948      	bls.n	80057f8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005766:	e040      	b.n	80057ea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	695a      	ldr	r2, [r3, #20]
 800576e:	f248 0308 	movw	r3, #32776	; 0x8008
 8005772:	4013      	ands	r3, r2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d014      	beq.n	80057a2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005780:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005782:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005788:	1d1a      	adds	r2, r3, #4
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005794:	b29b      	uxth	r3, r3
 8005796:	3b01      	subs	r3, #1
 8005798:	b29a      	uxth	r2, r3
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80057a0:	e023      	b.n	80057ea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a2:	f7fc fa73 	bl	8001c8c <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d803      	bhi.n	80057ba <HAL_SPI_Receive+0x182>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b8:	d102      	bne.n	80057c0 <HAL_SPI_Receive+0x188>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d114      	bne.n	80057ea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f000 f8c9 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e0af      	b.n	800594a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1b8      	bne.n	8005768 <HAL_SPI_Receive+0x130>
 80057f6:	e095      	b.n	8005924 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	2b07      	cmp	r3, #7
 80057fe:	f240 808b 	bls.w	8005918 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8005802:	e03f      	b.n	8005884 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	d114      	bne.n	800583c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	8812      	ldrh	r2, [r2, #0]
 800581a:	b292      	uxth	r2, r2
 800581c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005822:	1c9a      	adds	r2, r3, #2
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800583a:	e023      	b.n	8005884 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800583c:	f7fc fa26 	bl	8001c8c <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d803      	bhi.n	8005854 <HAL_SPI_Receive+0x21c>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005852:	d102      	bne.n	800585a <HAL_SPI_Receive+0x222>
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d114      	bne.n	8005884 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f000 f87c 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800586e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e062      	b.n	800594a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800588a:	b29b      	uxth	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1b9      	bne.n	8005804 <HAL_SPI_Receive+0x1cc>
 8005890:	e048      	b.n	8005924 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b01      	cmp	r3, #1
 800589e:	d117      	bne.n	80058d0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ac:	7812      	ldrb	r2, [r2, #0]
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	3b01      	subs	r3, #1
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80058ce:	e023      	b.n	8005918 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d0:	f7fc f9dc 	bl	8001c8c <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d803      	bhi.n	80058e8 <HAL_SPI_Receive+0x2b0>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Receive+0x2b6>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d114      	bne.n	8005918 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f000 f832 	bl	8005958 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e018      	b.n	800594a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1b6      	bne.n	8005892 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f817 	bl	8005958 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e000      	b.n	800594a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 8005948:	7ffb      	ldrb	r3, [r7, #31]
}
 800594a:	4618      	mov	r0, r3
 800594c:	3720      	adds	r7, #32
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	ffff0000 	.word	0xffff0000

08005958 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699a      	ldr	r2, [r3, #24]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0208 	orr.w	r2, r2, #8
 8005976:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699a      	ldr	r2, [r3, #24]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0210 	orr.w	r2, r2, #16
 8005986:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f022 0201 	bic.w	r2, r2, #1
 8005996:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <SPI_CloseTransfer+0x13c>)
 80059a4:	400b      	ands	r3, r1
 80059a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80059b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d014      	beq.n	80059ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f003 0320 	and.w	r3, r3, #32
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00f      	beq.n	80059ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699a      	ldr	r2, [r3, #24]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0220 	orr.w	r2, r2, #32
 80059ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d014      	beq.n	8005a24 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00f      	beq.n	8005a24 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a22:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00f      	beq.n	8005a4e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a34:	f043 0201 	orr.w	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	699a      	ldr	r2, [r3, #24]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a4c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00f      	beq.n	8005a78 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5e:	f043 0208 	orr.w	r2, r3, #8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a76:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	fffffc90 	.word	0xfffffc90

08005a98 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	603b      	str	r3, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005aa8:	e010      	b.n	8005acc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aaa:	f7fc f8ef 	bl	8001c8c <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d803      	bhi.n	8005ac2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ac0:	d102      	bne.n	8005ac8 <SPI_WaitOnFlagUntilTimeout+0x30>
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d101      	bne.n	8005acc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e00f      	b.n	8005aec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695a      	ldr	r2, [r3, #20]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	bf0c      	ite	eq
 8005adc:	2301      	moveq	r3, #1
 8005ade:	2300      	movne	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d0df      	beq.n	8005aaa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b00:	095b      	lsrs	r3, r3, #5
 8005b02:	3301      	adds	r3, #1
 8005b04:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3307      	adds	r3, #7
 8005b12:	08db      	lsrs	r3, r3, #3
 8005b14:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	fb02 f303 	mul.w	r3, r2, r3
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e049      	b.n	8005bd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7fb fd77 	bl	8001644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f000 fd95 	bl	8006698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b085      	sub	sp, #20
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d001      	beq.n	8005bf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e054      	b.n	8005c9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68da      	ldr	r2, [r3, #12]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0201 	orr.w	r2, r2, #1
 8005c06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	; (8005ca8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d022      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c1a:	d01d      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a22      	ldr	r2, [pc, #136]	; (8005cac <HAL_TIM_Base_Start_IT+0xd4>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d018      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a21      	ldr	r2, [pc, #132]	; (8005cb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d013      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00e      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1e      	ldr	r2, [pc, #120]	; (8005cb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d009      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1c      	ldr	r2, [pc, #112]	; (8005cbc <HAL_TIM_Base_Start_IT+0xe4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d004      	beq.n	8005c58 <HAL_TIM_Base_Start_IT+0x80>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a1b      	ldr	r2, [pc, #108]	; (8005cc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d115      	bne.n	8005c84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	689a      	ldr	r2, [r3, #8]
 8005c5e:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <HAL_TIM_Base_Start_IT+0xec>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b06      	cmp	r3, #6
 8005c68:	d015      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0xbe>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c70:	d011      	beq.n	8005c96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f042 0201 	orr.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c82:	e008      	b.n	8005c96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0201 	orr.w	r2, r2, #1
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	e000      	b.n	8005c98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40001800 	.word	0x40001800
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	00010007 	.word	0x00010007

08005cc8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0201 	bic.w	r2, r2, #1
 8005cde:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6a1a      	ldr	r2, [r3, #32]
 8005ce6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cea:	4013      	ands	r3, r2
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10f      	bne.n	8005d10 <HAL_TIM_Base_Stop_IT+0x48>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a1a      	ldr	r2, [r3, #32]
 8005cf6:	f240 4344 	movw	r3, #1092	; 0x444
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d107      	bne.n	8005d10 <HAL_TIM_Base_Stop_IT+0x48>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f022 0201 	bic.w	r2, r2, #1
 8005d0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e049      	b.n	8005dcc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7fb fcd5 	bl	80016fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2202      	movs	r2, #2
 8005d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 fc97 	bl	8006698 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3708      	adds	r7, #8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d109      	bne.n	8005df8 <HAL_TIM_PWM_Start+0x24>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	e03c      	b.n	8005e72 <HAL_TIM_PWM_Start+0x9e>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d109      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x3e>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	2b01      	cmp	r3, #1
 8005e08:	bf14      	ite	ne
 8005e0a:	2301      	movne	r3, #1
 8005e0c:	2300      	moveq	r3, #0
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e02f      	b.n	8005e72 <HAL_TIM_PWM_Start+0x9e>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d109      	bne.n	8005e2c <HAL_TIM_PWM_Start+0x58>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	bf14      	ite	ne
 8005e24:	2301      	movne	r3, #1
 8005e26:	2300      	moveq	r3, #0
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	e022      	b.n	8005e72 <HAL_TIM_PWM_Start+0x9e>
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d109      	bne.n	8005e46 <HAL_TIM_PWM_Start+0x72>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	bf14      	ite	ne
 8005e3e:	2301      	movne	r3, #1
 8005e40:	2300      	moveq	r3, #0
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	e015      	b.n	8005e72 <HAL_TIM_PWM_Start+0x9e>
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d109      	bne.n	8005e60 <HAL_TIM_PWM_Start+0x8c>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	bf14      	ite	ne
 8005e58:	2301      	movne	r3, #1
 8005e5a:	2300      	moveq	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	e008      	b.n	8005e72 <HAL_TIM_PWM_Start+0x9e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0a1      	b.n	8005fbe <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d104      	bne.n	8005e8a <HAL_TIM_PWM_Start+0xb6>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e88:	e023      	b.n	8005ed2 <HAL_TIM_PWM_Start+0xfe>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d104      	bne.n	8005e9a <HAL_TIM_PWM_Start+0xc6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e98:	e01b      	b.n	8005ed2 <HAL_TIM_PWM_Start+0xfe>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d104      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xd6>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2202      	movs	r2, #2
 8005ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ea8:	e013      	b.n	8005ed2 <HAL_TIM_PWM_Start+0xfe>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b0c      	cmp	r3, #12
 8005eae:	d104      	bne.n	8005eba <HAL_TIM_PWM_Start+0xe6>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005eb8:	e00b      	b.n	8005ed2 <HAL_TIM_PWM_Start+0xfe>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	2b10      	cmp	r3, #16
 8005ebe:	d104      	bne.n	8005eca <HAL_TIM_PWM_Start+0xf6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2202      	movs	r2, #2
 8005ec4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ec8:	e003      	b.n	8005ed2 <HAL_TIM_PWM_Start+0xfe>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2202      	movs	r2, #2
 8005ece:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 ffea 	bl	8006eb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a38      	ldr	r2, [pc, #224]	; (8005fc8 <HAL_TIM_PWM_Start+0x1f4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x13e>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a37      	ldr	r2, [pc, #220]	; (8005fcc <HAL_TIM_PWM_Start+0x1f8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x13e>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a35      	ldr	r2, [pc, #212]	; (8005fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x13e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a34      	ldr	r2, [pc, #208]	; (8005fd4 <HAL_TIM_PWM_Start+0x200>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x13e>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a32      	ldr	r2, [pc, #200]	; (8005fd8 <HAL_TIM_PWM_Start+0x204>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <HAL_TIM_PWM_Start+0x142>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <HAL_TIM_PWM_Start+0x144>
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f2a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a25      	ldr	r2, [pc, #148]	; (8005fc8 <HAL_TIM_PWM_Start+0x1f4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f3e:	d01d      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a25      	ldr	r2, [pc, #148]	; (8005fdc <HAL_TIM_PWM_Start+0x208>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a24      	ldr	r2, [pc, #144]	; (8005fe0 <HAL_TIM_PWM_Start+0x20c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a22      	ldr	r2, [pc, #136]	; (8005fe4 <HAL_TIM_PWM_Start+0x210>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1a      	ldr	r2, [pc, #104]	; (8005fcc <HAL_TIM_PWM_Start+0x1f8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a1e      	ldr	r2, [pc, #120]	; (8005fe8 <HAL_TIM_PWM_Start+0x214>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_TIM_PWM_Start+0x1a8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <HAL_TIM_PWM_Start+0x1fc>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d115      	bne.n	8005fa8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689a      	ldr	r2, [r3, #8]
 8005f82:	4b1a      	ldr	r3, [pc, #104]	; (8005fec <HAL_TIM_PWM_Start+0x218>)
 8005f84:	4013      	ands	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b06      	cmp	r3, #6
 8005f8c:	d015      	beq.n	8005fba <HAL_TIM_PWM_Start+0x1e6>
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f94:	d011      	beq.n	8005fba <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f042 0201 	orr.w	r2, r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fa6:	e008      	b.n	8005fba <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
 8005fb8:	e000      	b.n	8005fbc <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40010000 	.word	0x40010000
 8005fcc:	40010400 	.word	0x40010400
 8005fd0:	40014000 	.word	0x40014000
 8005fd4:	40014400 	.word	0x40014400
 8005fd8:	40014800 	.word	0x40014800
 8005fdc:	40000400 	.word	0x40000400
 8005fe0:	40000800 	.word	0x40000800
 8005fe4:	40000c00 	.word	0x40000c00
 8005fe8:	40001800 	.word	0x40001800
 8005fec:	00010007 	.word	0x00010007

08005ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b02      	cmp	r3, #2
 8006004:	d122      	bne.n	800604c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11b      	bne.n	800604c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f06f 0202 	mvn.w	r2, #2
 800601c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0303 	and.w	r3, r3, #3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 fb12 	bl	800665c <HAL_TIM_IC_CaptureCallback>
 8006038:	e005      	b.n	8006046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fb04 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	f000 fb15 	bl	8006670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	2b04      	cmp	r3, #4
 8006058:	d122      	bne.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b04      	cmp	r3, #4
 8006066:	d11b      	bne.n	80060a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0204 	mvn.w	r2, #4
 8006070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2202      	movs	r2, #2
 8006076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fae8 	bl	800665c <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 fada 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 faeb 	bl	8006670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d122      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d11b      	bne.n	80060f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f06f 0208 	mvn.w	r2, #8
 80060c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2204      	movs	r2, #4
 80060ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	69db      	ldr	r3, [r3, #28]
 80060d2:	f003 0303 	and.w	r3, r3, #3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 fabe 	bl	800665c <HAL_TIM_IC_CaptureCallback>
 80060e0:	e005      	b.n	80060ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fab0 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fac1 	bl	8006670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	f003 0310 	and.w	r3, r3, #16
 80060fe:	2b10      	cmp	r3, #16
 8006100:	d122      	bne.n	8006148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0310 	and.w	r3, r3, #16
 800610c:	2b10      	cmp	r3, #16
 800610e:	d11b      	bne.n	8006148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0210 	mvn.w	r2, #16
 8006118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2208      	movs	r2, #8
 800611e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	69db      	ldr	r3, [r3, #28]
 8006126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 fa94 	bl	800665c <HAL_TIM_IC_CaptureCallback>
 8006134:	e005      	b.n	8006142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fa86 	bl	8006648 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f000 fa97 	bl	8006670 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b01      	cmp	r3, #1
 8006154:	d10e      	bne.n	8006174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b01      	cmp	r3, #1
 8006162:	d107      	bne.n	8006174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f06f 0201 	mvn.w	r2, #1
 800616c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f7fb f96c 	bl	800144c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800617e:	2b80      	cmp	r3, #128	; 0x80
 8006180:	d10e      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b80      	cmp	r3, #128	; 0x80
 800618e:	d107      	bne.n	80061a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 ffc6 	bl	800712c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	691b      	ldr	r3, [r3, #16]
 80061a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ae:	d10e      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68db      	ldr	r3, [r3, #12]
 80061b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ba:	2b80      	cmp	r3, #128	; 0x80
 80061bc:	d107      	bne.n	80061ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80061c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 ffb9 	bl	8007140 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d8:	2b40      	cmp	r3, #64	; 0x40
 80061da:	d10e      	bne.n	80061fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e6:	2b40      	cmp	r3, #64	; 0x40
 80061e8:	d107      	bne.n	80061fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 fa45 	bl	8006684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d10e      	bne.n	8006226 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b20      	cmp	r3, #32
 8006214:	d107      	bne.n	8006226 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f06f 0220 	mvn.w	r2, #32
 800621e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 ff79 	bl	8007118 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006226:	bf00      	nop
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
	...

08006230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006246:	2b01      	cmp	r3, #1
 8006248:	d101      	bne.n	800624e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800624a:	2302      	movs	r3, #2
 800624c:	e0ff      	b.n	800644e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b14      	cmp	r3, #20
 800625a:	f200 80f0 	bhi.w	800643e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800625e:	a201      	add	r2, pc, #4	; (adr r2, 8006264 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	080062b9 	.word	0x080062b9
 8006268:	0800643f 	.word	0x0800643f
 800626c:	0800643f 	.word	0x0800643f
 8006270:	0800643f 	.word	0x0800643f
 8006274:	080062f9 	.word	0x080062f9
 8006278:	0800643f 	.word	0x0800643f
 800627c:	0800643f 	.word	0x0800643f
 8006280:	0800643f 	.word	0x0800643f
 8006284:	0800633b 	.word	0x0800633b
 8006288:	0800643f 	.word	0x0800643f
 800628c:	0800643f 	.word	0x0800643f
 8006290:	0800643f 	.word	0x0800643f
 8006294:	0800637b 	.word	0x0800637b
 8006298:	0800643f 	.word	0x0800643f
 800629c:	0800643f 	.word	0x0800643f
 80062a0:	0800643f 	.word	0x0800643f
 80062a4:	080063bd 	.word	0x080063bd
 80062a8:	0800643f 	.word	0x0800643f
 80062ac:	0800643f 	.word	0x0800643f
 80062b0:	0800643f 	.word	0x0800643f
 80062b4:	080063fd 	.word	0x080063fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 fa84 	bl	80067cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	699a      	ldr	r2, [r3, #24]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0208 	orr.w	r2, r2, #8
 80062d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699a      	ldr	r2, [r3, #24]
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f022 0204 	bic.w	r2, r2, #4
 80062e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	6999      	ldr	r1, [r3, #24]
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	691a      	ldr	r2, [r3, #16]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	619a      	str	r2, [r3, #24]
      break;
 80062f6:	e0a5      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68b9      	ldr	r1, [r7, #8]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 faf4 	bl	80068ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	699a      	ldr	r2, [r3, #24]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006312:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006322:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6999      	ldr	r1, [r3, #24]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	021a      	lsls	r2, r3, #8
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	430a      	orrs	r2, r1
 8006336:	619a      	str	r2, [r3, #24]
      break;
 8006338:	e084      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	4618      	mov	r0, r3
 8006342:	f000 fb5d 	bl	8006a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69da      	ldr	r2, [r3, #28]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0208 	orr.w	r2, r2, #8
 8006354:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69da      	ldr	r2, [r3, #28]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0204 	bic.w	r2, r2, #4
 8006364:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	69d9      	ldr	r1, [r3, #28]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	430a      	orrs	r2, r1
 8006376:	61da      	str	r2, [r3, #28]
      break;
 8006378:	e064      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	4618      	mov	r0, r3
 8006382:	f000 fbc5 	bl	8006b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	69da      	ldr	r2, [r3, #28]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006394:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69da      	ldr	r2, [r3, #28]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	69d9      	ldr	r1, [r3, #28]
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	021a      	lsls	r2, r3, #8
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	430a      	orrs	r2, r1
 80063b8:	61da      	str	r2, [r3, #28]
      break;
 80063ba:	e043      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68b9      	ldr	r1, [r7, #8]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fc0e 	bl	8006be4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f042 0208 	orr.w	r2, r2, #8
 80063d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0204 	bic.w	r2, r2, #4
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80063fa:	e023      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	68b9      	ldr	r1, [r7, #8]
 8006402:	4618      	mov	r0, r3
 8006404:	f000 fc52 	bl	8006cac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006416:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006426:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	430a      	orrs	r2, r1
 800643a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800643c:	e002      	b.n	8006444 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	75fb      	strb	r3, [r7, #23]
      break;
 8006442:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_TIM_ConfigClockSource+0x1c>
 8006470:	2302      	movs	r3, #2
 8006472:	e0dc      	b.n	800662e <HAL_TIM_ConfigClockSource+0x1d6>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	4b6a      	ldr	r3, [pc, #424]	; (8006638 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006490:	4013      	ands	r3, r2
 8006492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800649a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a64      	ldr	r2, [pc, #400]	; (800663c <HAL_TIM_ConfigClockSource+0x1e4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	f000 80a9 	beq.w	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 80064b0:	4a62      	ldr	r2, [pc, #392]	; (800663c <HAL_TIM_ConfigClockSource+0x1e4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	f200 80ae 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 80064b8:	4a61      	ldr	r2, [pc, #388]	; (8006640 <HAL_TIM_ConfigClockSource+0x1e8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	f000 80a1 	beq.w	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 80064c0:	4a5f      	ldr	r2, [pc, #380]	; (8006640 <HAL_TIM_ConfigClockSource+0x1e8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	f200 80a6 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 80064c8:	4a5e      	ldr	r2, [pc, #376]	; (8006644 <HAL_TIM_ConfigClockSource+0x1ec>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	f000 8099 	beq.w	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 80064d0:	4a5c      	ldr	r2, [pc, #368]	; (8006644 <HAL_TIM_ConfigClockSource+0x1ec>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	f200 809e 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 80064d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064dc:	f000 8091 	beq.w	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 80064e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80064e4:	f200 8096 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 80064e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064ec:	f000 8089 	beq.w	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 80064f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064f4:	f200 808e 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 80064f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064fc:	d03e      	beq.n	800657c <HAL_TIM_ConfigClockSource+0x124>
 80064fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006502:	f200 8087 	bhi.w	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 8006506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800650a:	f000 8086 	beq.w	800661a <HAL_TIM_ConfigClockSource+0x1c2>
 800650e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006512:	d87f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 8006514:	2b70      	cmp	r3, #112	; 0x70
 8006516:	d01a      	beq.n	800654e <HAL_TIM_ConfigClockSource+0xf6>
 8006518:	2b70      	cmp	r3, #112	; 0x70
 800651a:	d87b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 800651c:	2b60      	cmp	r3, #96	; 0x60
 800651e:	d050      	beq.n	80065c2 <HAL_TIM_ConfigClockSource+0x16a>
 8006520:	2b60      	cmp	r3, #96	; 0x60
 8006522:	d877      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 8006524:	2b50      	cmp	r3, #80	; 0x50
 8006526:	d03c      	beq.n	80065a2 <HAL_TIM_ConfigClockSource+0x14a>
 8006528:	2b50      	cmp	r3, #80	; 0x50
 800652a:	d873      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d058      	beq.n	80065e2 <HAL_TIM_ConfigClockSource+0x18a>
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d86f      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 8006534:	2b30      	cmp	r3, #48	; 0x30
 8006536:	d064      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 8006538:	2b30      	cmp	r3, #48	; 0x30
 800653a:	d86b      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 800653c:	2b20      	cmp	r3, #32
 800653e:	d060      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d867      	bhi.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
 8006544:	2b00      	cmp	r3, #0
 8006546:	d05c      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 8006548:	2b10      	cmp	r3, #16
 800654a:	d05a      	beq.n	8006602 <HAL_TIM_ConfigClockSource+0x1aa>
 800654c:	e062      	b.n	8006614 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6899      	ldr	r1, [r3, #8]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f000 fc89 	bl	8006e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	609a      	str	r2, [r3, #8]
      break;
 800657a:	e04f      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	6899      	ldr	r1, [r3, #8]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f000 fc72 	bl	8006e74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800659e:	609a      	str	r2, [r3, #8]
      break;
 80065a0:	e03c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6818      	ldr	r0, [r3, #0]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	6859      	ldr	r1, [r3, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	f000 fbe2 	bl	8006d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2150      	movs	r1, #80	; 0x50
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fc3c 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 80065c0:	e02c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6818      	ldr	r0, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	6859      	ldr	r1, [r3, #4]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	461a      	mov	r2, r3
 80065d0:	f000 fc01 	bl	8006dd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2160      	movs	r1, #96	; 0x60
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fc2c 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 80065e0:	e01c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	6859      	ldr	r1, [r3, #4]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	461a      	mov	r2, r3
 80065f0:	f000 fbc2 	bl	8006d78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2140      	movs	r1, #64	; 0x40
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fc1c 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 8006600:	e00c      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4619      	mov	r1, r3
 800660c:	4610      	mov	r0, r2
 800660e:	f000 fc13 	bl	8006e38 <TIM_ITRx_SetConfig>
      break;
 8006612:	e003      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	73fb      	strb	r3, [r7, #15]
      break;
 8006618:	e000      	b.n	800661c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800661a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800662c:	7bfb      	ldrb	r3, [r7, #15]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	ffceff88 	.word	0xffceff88
 800663c:	00100040 	.word	0x00100040
 8006640:	00100030 	.word	0x00100030
 8006644:	00100020 	.word	0x00100020

08006648 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a40      	ldr	r2, [pc, #256]	; (80067ac <TIM_Base_SetConfig+0x114>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d013      	beq.n	80066d8 <TIM_Base_SetConfig+0x40>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066b6:	d00f      	beq.n	80066d8 <TIM_Base_SetConfig+0x40>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a3d      	ldr	r2, [pc, #244]	; (80067b0 <TIM_Base_SetConfig+0x118>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d00b      	beq.n	80066d8 <TIM_Base_SetConfig+0x40>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	4a3c      	ldr	r2, [pc, #240]	; (80067b4 <TIM_Base_SetConfig+0x11c>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d007      	beq.n	80066d8 <TIM_Base_SetConfig+0x40>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a3b      	ldr	r2, [pc, #236]	; (80067b8 <TIM_Base_SetConfig+0x120>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_Base_SetConfig+0x40>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a3a      	ldr	r2, [pc, #232]	; (80067bc <TIM_Base_SetConfig+0x124>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d108      	bne.n	80066ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2f      	ldr	r2, [pc, #188]	; (80067ac <TIM_Base_SetConfig+0x114>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d01f      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066f8:	d01b      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <TIM_Base_SetConfig+0x118>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d017      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a2b      	ldr	r2, [pc, #172]	; (80067b4 <TIM_Base_SetConfig+0x11c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <TIM_Base_SetConfig+0x120>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00f      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a29      	ldr	r2, [pc, #164]	; (80067bc <TIM_Base_SetConfig+0x124>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d00b      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a28      	ldr	r2, [pc, #160]	; (80067c0 <TIM_Base_SetConfig+0x128>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d007      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a27      	ldr	r2, [pc, #156]	; (80067c4 <TIM_Base_SetConfig+0x12c>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d003      	beq.n	8006732 <TIM_Base_SetConfig+0x9a>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a26      	ldr	r2, [pc, #152]	; (80067c8 <TIM_Base_SetConfig+0x130>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d108      	bne.n	8006744 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	4313      	orrs	r3, r2
 8006750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	689a      	ldr	r2, [r3, #8]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a10      	ldr	r2, [pc, #64]	; (80067ac <TIM_Base_SetConfig+0x114>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00f      	beq.n	8006790 <TIM_Base_SetConfig+0xf8>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <TIM_Base_SetConfig+0x124>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00b      	beq.n	8006790 <TIM_Base_SetConfig+0xf8>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <TIM_Base_SetConfig+0x128>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_Base_SetConfig+0xf8>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <TIM_Base_SetConfig+0x12c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_Base_SetConfig+0xf8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <TIM_Base_SetConfig+0x130>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d103      	bne.n	8006798 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	615a      	str	r2, [r3, #20]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40010000 	.word	0x40010000
 80067b0:	40000400 	.word	0x40000400
 80067b4:	40000800 	.word	0x40000800
 80067b8:	40000c00 	.word	0x40000c00
 80067bc:	40010400 	.word	0x40010400
 80067c0:	40014000 	.word	0x40014000
 80067c4:	40014400 	.word	0x40014400
 80067c8:	40014800 	.word	0x40014800

080067cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b087      	sub	sp, #28
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	4b37      	ldr	r3, [pc, #220]	; (80068d4 <TIM_OC1_SetConfig+0x108>)
 80067f8:	4013      	ands	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f023 0302 	bic.w	r3, r3, #2
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	697a      	ldr	r2, [r7, #20]
 800681c:	4313      	orrs	r3, r2
 800681e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a2d      	ldr	r2, [pc, #180]	; (80068d8 <TIM_OC1_SetConfig+0x10c>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00f      	beq.n	8006848 <TIM_OC1_SetConfig+0x7c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a2c      	ldr	r2, [pc, #176]	; (80068dc <TIM_OC1_SetConfig+0x110>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00b      	beq.n	8006848 <TIM_OC1_SetConfig+0x7c>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a2b      	ldr	r2, [pc, #172]	; (80068e0 <TIM_OC1_SetConfig+0x114>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_OC1_SetConfig+0x7c>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a2a      	ldr	r2, [pc, #168]	; (80068e4 <TIM_OC1_SetConfig+0x118>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_OC1_SetConfig+0x7c>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <TIM_OC1_SetConfig+0x11c>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d10c      	bne.n	8006862 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0308 	bic.w	r3, r3, #8
 800684e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f023 0304 	bic.w	r3, r3, #4
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a1c      	ldr	r2, [pc, #112]	; (80068d8 <TIM_OC1_SetConfig+0x10c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00f      	beq.n	800688a <TIM_OC1_SetConfig+0xbe>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <TIM_OC1_SetConfig+0x110>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d00b      	beq.n	800688a <TIM_OC1_SetConfig+0xbe>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <TIM_OC1_SetConfig+0x114>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d007      	beq.n	800688a <TIM_OC1_SetConfig+0xbe>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <TIM_OC1_SetConfig+0x118>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d003      	beq.n	800688a <TIM_OC1_SetConfig+0xbe>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a18      	ldr	r2, [pc, #96]	; (80068e8 <TIM_OC1_SetConfig+0x11c>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d111      	bne.n	80068ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	621a      	str	r2, [r3, #32]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	fffeff8f 	.word	0xfffeff8f
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40010400 	.word	0x40010400
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0210 	bic.w	r2, r3, #16
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4b34      	ldr	r3, [pc, #208]	; (80069e8 <TIM_OC2_SetConfig+0xfc>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006922:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	021b      	lsls	r3, r3, #8
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	4313      	orrs	r3, r2
 800692e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	f023 0320 	bic.w	r3, r3, #32
 8006936:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	4313      	orrs	r3, r2
 8006942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a29      	ldr	r2, [pc, #164]	; (80069ec <TIM_OC2_SetConfig+0x100>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_OC2_SetConfig+0x68>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a28      	ldr	r2, [pc, #160]	; (80069f0 <TIM_OC2_SetConfig+0x104>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d10d      	bne.n	8006970 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800695a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	011b      	lsls	r3, r3, #4
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800696e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a1e      	ldr	r2, [pc, #120]	; (80069ec <TIM_OC2_SetConfig+0x100>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00f      	beq.n	8006998 <TIM_OC2_SetConfig+0xac>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a1d      	ldr	r2, [pc, #116]	; (80069f0 <TIM_OC2_SetConfig+0x104>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d00b      	beq.n	8006998 <TIM_OC2_SetConfig+0xac>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a1c      	ldr	r2, [pc, #112]	; (80069f4 <TIM_OC2_SetConfig+0x108>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d007      	beq.n	8006998 <TIM_OC2_SetConfig+0xac>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a1b      	ldr	r2, [pc, #108]	; (80069f8 <TIM_OC2_SetConfig+0x10c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d003      	beq.n	8006998 <TIM_OC2_SetConfig+0xac>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a1a      	ldr	r2, [pc, #104]	; (80069fc <TIM_OC2_SetConfig+0x110>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d113      	bne.n	80069c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800699e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	4313      	orrs	r3, r2
 80069b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	feff8fff 	.word	0xfeff8fff
 80069ec:	40010000 	.word	0x40010000
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800

08006a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a28:	68fa      	ldr	r2, [r7, #12]
 8006a2a:	4b33      	ldr	r3, [pc, #204]	; (8006af8 <TIM_OC3_SetConfig+0xf8>)
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0303 	bic.w	r3, r3, #3
 8006a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	021b      	lsls	r3, r3, #8
 8006a50:	697a      	ldr	r2, [r7, #20]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a28      	ldr	r2, [pc, #160]	; (8006afc <TIM_OC3_SetConfig+0xfc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC3_SetConfig+0x66>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a27      	ldr	r2, [pc, #156]	; (8006b00 <TIM_OC3_SetConfig+0x100>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d10d      	bne.n	8006a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	68db      	ldr	r3, [r3, #12]
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a1d      	ldr	r2, [pc, #116]	; (8006afc <TIM_OC3_SetConfig+0xfc>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d00f      	beq.n	8006aaa <TIM_OC3_SetConfig+0xaa>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a1c      	ldr	r2, [pc, #112]	; (8006b00 <TIM_OC3_SetConfig+0x100>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d00b      	beq.n	8006aaa <TIM_OC3_SetConfig+0xaa>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a1b      	ldr	r2, [pc, #108]	; (8006b04 <TIM_OC3_SetConfig+0x104>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d007      	beq.n	8006aaa <TIM_OC3_SetConfig+0xaa>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	; (8006b08 <TIM_OC3_SetConfig+0x108>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d003      	beq.n	8006aaa <TIM_OC3_SetConfig+0xaa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a19      	ldr	r2, [pc, #100]	; (8006b0c <TIM_OC3_SetConfig+0x10c>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d113      	bne.n	8006ad2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	695b      	ldr	r3, [r3, #20]
 8006abe:	011b      	lsls	r3, r3, #4
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	621a      	str	r2, [r3, #32]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	fffeff8f 	.word	0xfffeff8f
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40014400 	.word	0x40014400
 8006b0c:	40014800 	.word	0x40014800

08006b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4b24      	ldr	r3, [pc, #144]	; (8006bcc <TIM_OC4_SetConfig+0xbc>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	021b      	lsls	r3, r3, #8
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	031b      	lsls	r3, r3, #12
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <TIM_OC4_SetConfig+0xc0>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d00f      	beq.n	8006b90 <TIM_OC4_SetConfig+0x80>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a18      	ldr	r2, [pc, #96]	; (8006bd4 <TIM_OC4_SetConfig+0xc4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <TIM_OC4_SetConfig+0x80>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <TIM_OC4_SetConfig+0xc8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d007      	beq.n	8006b90 <TIM_OC4_SetConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <TIM_OC4_SetConfig+0xcc>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d003      	beq.n	8006b90 <TIM_OC4_SetConfig+0x80>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a15      	ldr	r2, [pc, #84]	; (8006be0 <TIM_OC4_SetConfig+0xd0>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d109      	bne.n	8006ba4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	695b      	ldr	r3, [r3, #20]
 8006b9c:	019b      	lsls	r3, r3, #6
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	697a      	ldr	r2, [r7, #20]
 8006ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	693a      	ldr	r2, [r7, #16]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	feff8fff 	.word	0xfeff8fff
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400
 8006bd8:	40014000 	.word	0x40014000
 8006bdc:	40014400 	.word	0x40014400
 8006be0:	40014800 	.word	0x40014800

08006be4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b087      	sub	sp, #28
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	4b21      	ldr	r3, [pc, #132]	; (8006c94 <TIM_OC5_SetConfig+0xb0>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a18      	ldr	r2, [pc, #96]	; (8006c98 <TIM_OC5_SetConfig+0xb4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00f      	beq.n	8006c5a <TIM_OC5_SetConfig+0x76>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a17      	ldr	r2, [pc, #92]	; (8006c9c <TIM_OC5_SetConfig+0xb8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <TIM_OC5_SetConfig+0x76>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a16      	ldr	r2, [pc, #88]	; (8006ca0 <TIM_OC5_SetConfig+0xbc>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d007      	beq.n	8006c5a <TIM_OC5_SetConfig+0x76>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <TIM_OC5_SetConfig+0xc0>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d003      	beq.n	8006c5a <TIM_OC5_SetConfig+0x76>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a14      	ldr	r2, [pc, #80]	; (8006ca8 <TIM_OC5_SetConfig+0xc4>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d109      	bne.n	8006c6e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	021b      	lsls	r3, r3, #8
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	693a      	ldr	r2, [r7, #16]
 8006c86:	621a      	str	r2, [r3, #32]
}
 8006c88:	bf00      	nop
 8006c8a:	371c      	adds	r7, #28
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr
 8006c94:	fffeff8f 	.word	0xfffeff8f
 8006c98:	40010000 	.word	0x40010000
 8006c9c:	40010400 	.word	0x40010400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40014400 	.word	0x40014400
 8006ca8:	40014800 	.word	0x40014800

08006cac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4b22      	ldr	r3, [pc, #136]	; (8006d60 <TIM_OC6_SetConfig+0xb4>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	021b      	lsls	r3, r3, #8
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	051b      	lsls	r3, r3, #20
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	4a19      	ldr	r2, [pc, #100]	; (8006d64 <TIM_OC6_SetConfig+0xb8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d00f      	beq.n	8006d24 <TIM_OC6_SetConfig+0x78>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <TIM_OC6_SetConfig+0xbc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d00b      	beq.n	8006d24 <TIM_OC6_SetConfig+0x78>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a17      	ldr	r2, [pc, #92]	; (8006d6c <TIM_OC6_SetConfig+0xc0>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d007      	beq.n	8006d24 <TIM_OC6_SetConfig+0x78>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <TIM_OC6_SetConfig+0xc4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC6_SetConfig+0x78>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <TIM_OC6_SetConfig+0xc8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d109      	bne.n	8006d38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	029b      	lsls	r3, r3, #10
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	feff8fff 	.word	0xfeff8fff
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400
 8006d6c:	40014000 	.word	0x40014000
 8006d70:	40014400 	.word	0x40014400
 8006d74:	40014800 	.word	0x40014800

08006d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6a1b      	ldr	r3, [r3, #32]
 8006d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	f023 0201 	bic.w	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	011b      	lsls	r3, r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f023 030a 	bic.w	r3, r3, #10
 8006db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	693a      	ldr	r2, [r7, #16]
 8006dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	621a      	str	r2, [r3, #32]
}
 8006dca:	bf00      	nop
 8006dcc:	371c      	adds	r7, #28
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	b087      	sub	sp, #28
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	f023 0210 	bic.w	r2, r3, #16
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	031b      	lsls	r3, r3, #12
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	693a      	ldr	r2, [r7, #16]
 8006e28:	621a      	str	r2, [r3, #32]
}
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <TIM_ITRx_SetConfig+0x38>)
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e50:	683a      	ldr	r2, [r7, #0]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	f043 0307 	orr.w	r3, r3, #7
 8006e5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	609a      	str	r2, [r3, #8]
}
 8006e62:	bf00      	nop
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	ffcfff8f 	.word	0xffcfff8f

08006e74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b087      	sub	sp, #28
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	021a      	lsls	r2, r3, #8
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	431a      	orrs	r2, r3
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	609a      	str	r2, [r3, #8]
}
 8006ea8:	bf00      	nop
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 031f 	and.w	r3, r3, #31
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a1a      	ldr	r2, [r3, #32]
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	43db      	mvns	r3, r3
 8006ed6:	401a      	ands	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6a1a      	ldr	r2, [r3, #32]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	f003 031f 	and.w	r3, r3, #31
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8006eec:	431a      	orrs	r2, r3
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	621a      	str	r2, [r3, #32]
}
 8006ef2:	bf00      	nop
 8006ef4:	371c      	adds	r7, #28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d101      	bne.n	8006f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f14:	2302      	movs	r3, #2
 8006f16:	e06d      	b.n	8006ff4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a30      	ldr	r2, [pc, #192]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d004      	beq.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d108      	bne.n	8006f5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a20      	ldr	r2, [pc, #128]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d022      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f8a:	d01d      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1d      	ldr	r2, [pc, #116]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1c      	ldr	r2, [pc, #112]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d013      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1a      	ldr	r2, [pc, #104]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a15      	ldr	r2, [pc, #84]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a16      	ldr	r2, [pc, #88]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d10c      	bne.n	8006fe2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3714      	adds	r7, #20
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400
 8007008:	40000400 	.word	0x40000400
 800700c:	40000800 	.word	0x40000800
 8007010:	40000c00 	.word	0x40000c00
 8007014:	40001800 	.word	0x40001800
 8007018:	40014000 	.word	0x40014000

0800701c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007034:	2302      	movs	r3, #2
 8007036:	e065      	b.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	041b      	lsls	r3, r3, #16
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a16      	ldr	r2, [pc, #88]	; (8007110 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d004      	beq.n	80070c6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a14      	ldr	r2, [pc, #80]	; (8007114 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d115      	bne.n	80070f2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	051b      	lsls	r3, r3, #20
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	69db      	ldr	r3, [r3, #28]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	6a1b      	ldr	r3, [r3, #32]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	40010000 	.word	0x40010000
 8007114:	40010400 	.word	0x40010400

08007118 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007120:	bf00      	nop
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr

0800712c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e042      	b.n	80071ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7fa fb4d 	bl	8001818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2224      	movs	r2, #36	; 0x24
 8007182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f8ba 	bl	8007310 <UART_SetConfig>
 800719c:	4603      	mov	r3, r0
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e022      	b.n	80071ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d002      	beq.n	80071b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fe16 	bl	8007de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fe9d 	bl	8007f24 <UART_CheckIdleState>
 80071ea:	4603      	mov	r3, r0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	; 0x28
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720a:	2b20      	cmp	r3, #32
 800720c:	d17b      	bne.n	8007306 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Transmit+0x26>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e074      	b.n	8007308 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2221      	movs	r2, #33	; 0x21
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fa fd2d 	bl	8001c8c <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800724c:	d108      	bne.n	8007260 <HAL_UART_Transmit+0x6c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e003      	b.n	8007268 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007268:	e030      	b.n	80072cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	; 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 feff 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e03d      	b.n	8007308 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	3302      	adds	r3, #2
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e007      	b.n	80072ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1c8      	bne.n	800726a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fec8 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e006      	b.n	8007308 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007314:	b092      	sub	sp, #72	; 0x48
 8007316:	af00      	add	r7, sp, #0
 8007318:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	431a      	orrs	r2, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	431a      	orrs	r2, r3
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	4313      	orrs	r3, r2
 8007336:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	4bbe      	ldr	r3, [pc, #760]	; (8007638 <UART_SetConfig+0x328>)
 8007340:	4013      	ands	r3, r2
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	6812      	ldr	r2, [r2, #0]
 8007346:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007348:	430b      	orrs	r3, r1
 800734a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	68da      	ldr	r2, [r3, #12]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4ab3      	ldr	r2, [pc, #716]	; (800763c <UART_SetConfig+0x32c>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d004      	beq.n	800737c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007378:	4313      	orrs	r3, r2
 800737a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	4baf      	ldr	r3, [pc, #700]	; (8007640 <UART_SetConfig+0x330>)
 8007384:	4013      	ands	r3, r2
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	6812      	ldr	r2, [r2, #0]
 800738a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800738c:	430b      	orrs	r3, r1
 800738e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007396:	f023 010f 	bic.w	r1, r3, #15
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4aa6      	ldr	r2, [pc, #664]	; (8007644 <UART_SetConfig+0x334>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d177      	bne.n	80074a0 <UART_SetConfig+0x190>
 80073b0:	4ba5      	ldr	r3, [pc, #660]	; (8007648 <UART_SetConfig+0x338>)
 80073b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073b8:	2b28      	cmp	r3, #40	; 0x28
 80073ba:	d86d      	bhi.n	8007498 <UART_SetConfig+0x188>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <UART_SetConfig+0xb4>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	08007469 	.word	0x08007469
 80073c8:	08007499 	.word	0x08007499
 80073cc:	08007499 	.word	0x08007499
 80073d0:	08007499 	.word	0x08007499
 80073d4:	08007499 	.word	0x08007499
 80073d8:	08007499 	.word	0x08007499
 80073dc:	08007499 	.word	0x08007499
 80073e0:	08007499 	.word	0x08007499
 80073e4:	08007471 	.word	0x08007471
 80073e8:	08007499 	.word	0x08007499
 80073ec:	08007499 	.word	0x08007499
 80073f0:	08007499 	.word	0x08007499
 80073f4:	08007499 	.word	0x08007499
 80073f8:	08007499 	.word	0x08007499
 80073fc:	08007499 	.word	0x08007499
 8007400:	08007499 	.word	0x08007499
 8007404:	08007479 	.word	0x08007479
 8007408:	08007499 	.word	0x08007499
 800740c:	08007499 	.word	0x08007499
 8007410:	08007499 	.word	0x08007499
 8007414:	08007499 	.word	0x08007499
 8007418:	08007499 	.word	0x08007499
 800741c:	08007499 	.word	0x08007499
 8007420:	08007499 	.word	0x08007499
 8007424:	08007481 	.word	0x08007481
 8007428:	08007499 	.word	0x08007499
 800742c:	08007499 	.word	0x08007499
 8007430:	08007499 	.word	0x08007499
 8007434:	08007499 	.word	0x08007499
 8007438:	08007499 	.word	0x08007499
 800743c:	08007499 	.word	0x08007499
 8007440:	08007499 	.word	0x08007499
 8007444:	08007489 	.word	0x08007489
 8007448:	08007499 	.word	0x08007499
 800744c:	08007499 	.word	0x08007499
 8007450:	08007499 	.word	0x08007499
 8007454:	08007499 	.word	0x08007499
 8007458:	08007499 	.word	0x08007499
 800745c:	08007499 	.word	0x08007499
 8007460:	08007499 	.word	0x08007499
 8007464:	08007491 	.word	0x08007491
 8007468:	2301      	movs	r3, #1
 800746a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800746e:	e222      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007470:	2304      	movs	r3, #4
 8007472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007476:	e21e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007478:	2308      	movs	r3, #8
 800747a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800747e:	e21a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007480:	2310      	movs	r3, #16
 8007482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007486:	e216      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007488:	2320      	movs	r3, #32
 800748a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800748e:	e212      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007490:	2340      	movs	r3, #64	; 0x40
 8007492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007496:	e20e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007498:	2380      	movs	r3, #128	; 0x80
 800749a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800749e:	e20a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a69      	ldr	r2, [pc, #420]	; (800764c <UART_SetConfig+0x33c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d130      	bne.n	800750c <UART_SetConfig+0x1fc>
 80074aa:	4b67      	ldr	r3, [pc, #412]	; (8007648 <UART_SetConfig+0x338>)
 80074ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b05      	cmp	r3, #5
 80074b4:	d826      	bhi.n	8007504 <UART_SetConfig+0x1f4>
 80074b6:	a201      	add	r2, pc, #4	; (adr r2, 80074bc <UART_SetConfig+0x1ac>)
 80074b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074bc:	080074d5 	.word	0x080074d5
 80074c0:	080074dd 	.word	0x080074dd
 80074c4:	080074e5 	.word	0x080074e5
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	2300      	movs	r3, #0
 80074d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074da:	e1ec      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074dc:	2304      	movs	r3, #4
 80074de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074e2:	e1e8      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074e4:	2308      	movs	r3, #8
 80074e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074ea:	e1e4      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074ec:	2310      	movs	r3, #16
 80074ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074f2:	e1e0      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074f4:	2320      	movs	r3, #32
 80074f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80074fa:	e1dc      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80074fc:	2340      	movs	r3, #64	; 0x40
 80074fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007502:	e1d8      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007504:	2380      	movs	r3, #128	; 0x80
 8007506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800750a:	e1d4      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a4f      	ldr	r2, [pc, #316]	; (8007650 <UART_SetConfig+0x340>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d130      	bne.n	8007578 <UART_SetConfig+0x268>
 8007516:	4b4c      	ldr	r3, [pc, #304]	; (8007648 <UART_SetConfig+0x338>)
 8007518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b05      	cmp	r3, #5
 8007520:	d826      	bhi.n	8007570 <UART_SetConfig+0x260>
 8007522:	a201      	add	r2, pc, #4	; (adr r2, 8007528 <UART_SetConfig+0x218>)
 8007524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007528:	08007541 	.word	0x08007541
 800752c:	08007549 	.word	0x08007549
 8007530:	08007551 	.word	0x08007551
 8007534:	08007559 	.word	0x08007559
 8007538:	08007561 	.word	0x08007561
 800753c:	08007569 	.word	0x08007569
 8007540:	2300      	movs	r3, #0
 8007542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007546:	e1b6      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007548:	2304      	movs	r3, #4
 800754a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800754e:	e1b2      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007550:	2308      	movs	r3, #8
 8007552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007556:	e1ae      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007558:	2310      	movs	r3, #16
 800755a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800755e:	e1aa      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007560:	2320      	movs	r3, #32
 8007562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007566:	e1a6      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007568:	2340      	movs	r3, #64	; 0x40
 800756a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800756e:	e1a2      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007570:	2380      	movs	r3, #128	; 0x80
 8007572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007576:	e19e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a35      	ldr	r2, [pc, #212]	; (8007654 <UART_SetConfig+0x344>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d130      	bne.n	80075e4 <UART_SetConfig+0x2d4>
 8007582:	4b31      	ldr	r3, [pc, #196]	; (8007648 <UART_SetConfig+0x338>)
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	f003 0307 	and.w	r3, r3, #7
 800758a:	2b05      	cmp	r3, #5
 800758c:	d826      	bhi.n	80075dc <UART_SetConfig+0x2cc>
 800758e:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0x284>)
 8007590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007594:	080075ad 	.word	0x080075ad
 8007598:	080075b5 	.word	0x080075b5
 800759c:	080075bd 	.word	0x080075bd
 80075a0:	080075c5 	.word	0x080075c5
 80075a4:	080075cd 	.word	0x080075cd
 80075a8:	080075d5 	.word	0x080075d5
 80075ac:	2300      	movs	r3, #0
 80075ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075b2:	e180      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075b4:	2304      	movs	r3, #4
 80075b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ba:	e17c      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075bc:	2308      	movs	r3, #8
 80075be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075c2:	e178      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075ca:	e174      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075cc:	2320      	movs	r3, #32
 80075ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075d2:	e170      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075d4:	2340      	movs	r3, #64	; 0x40
 80075d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075da:	e16c      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075dc:	2380      	movs	r3, #128	; 0x80
 80075de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80075e2:	e168      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <UART_SetConfig+0x348>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d142      	bne.n	8007674 <UART_SetConfig+0x364>
 80075ee:	4b16      	ldr	r3, [pc, #88]	; (8007648 <UART_SetConfig+0x338>)
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	f003 0307 	and.w	r3, r3, #7
 80075f6:	2b05      	cmp	r3, #5
 80075f8:	d838      	bhi.n	800766c <UART_SetConfig+0x35c>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <UART_SetConfig+0x2f0>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007619 	.word	0x08007619
 8007604:	08007621 	.word	0x08007621
 8007608:	08007629 	.word	0x08007629
 800760c:	08007631 	.word	0x08007631
 8007610:	0800765d 	.word	0x0800765d
 8007614:	08007665 	.word	0x08007665
 8007618:	2300      	movs	r3, #0
 800761a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800761e:	e14a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007620:	2304      	movs	r3, #4
 8007622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007626:	e146      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007628:	2308      	movs	r3, #8
 800762a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800762e:	e142      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007630:	2310      	movs	r3, #16
 8007632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007636:	e13e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007638:	cfff69f3 	.word	0xcfff69f3
 800763c:	58000c00 	.word	0x58000c00
 8007640:	11fff4ff 	.word	0x11fff4ff
 8007644:	40011000 	.word	0x40011000
 8007648:	58024400 	.word	0x58024400
 800764c:	40004400 	.word	0x40004400
 8007650:	40004800 	.word	0x40004800
 8007654:	40004c00 	.word	0x40004c00
 8007658:	40005000 	.word	0x40005000
 800765c:	2320      	movs	r3, #32
 800765e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007662:	e128      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007664:	2340      	movs	r3, #64	; 0x40
 8007666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800766a:	e124      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800766c:	2380      	movs	r3, #128	; 0x80
 800766e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007672:	e120      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4acb      	ldr	r2, [pc, #812]	; (80079a8 <UART_SetConfig+0x698>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d176      	bne.n	800776c <UART_SetConfig+0x45c>
 800767e:	4bcb      	ldr	r3, [pc, #812]	; (80079ac <UART_SetConfig+0x69c>)
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007686:	2b28      	cmp	r3, #40	; 0x28
 8007688:	d86c      	bhi.n	8007764 <UART_SetConfig+0x454>
 800768a:	a201      	add	r2, pc, #4	; (adr r2, 8007690 <UART_SetConfig+0x380>)
 800768c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007690:	08007735 	.word	0x08007735
 8007694:	08007765 	.word	0x08007765
 8007698:	08007765 	.word	0x08007765
 800769c:	08007765 	.word	0x08007765
 80076a0:	08007765 	.word	0x08007765
 80076a4:	08007765 	.word	0x08007765
 80076a8:	08007765 	.word	0x08007765
 80076ac:	08007765 	.word	0x08007765
 80076b0:	0800773d 	.word	0x0800773d
 80076b4:	08007765 	.word	0x08007765
 80076b8:	08007765 	.word	0x08007765
 80076bc:	08007765 	.word	0x08007765
 80076c0:	08007765 	.word	0x08007765
 80076c4:	08007765 	.word	0x08007765
 80076c8:	08007765 	.word	0x08007765
 80076cc:	08007765 	.word	0x08007765
 80076d0:	08007745 	.word	0x08007745
 80076d4:	08007765 	.word	0x08007765
 80076d8:	08007765 	.word	0x08007765
 80076dc:	08007765 	.word	0x08007765
 80076e0:	08007765 	.word	0x08007765
 80076e4:	08007765 	.word	0x08007765
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007765 	.word	0x08007765
 80076f0:	0800774d 	.word	0x0800774d
 80076f4:	08007765 	.word	0x08007765
 80076f8:	08007765 	.word	0x08007765
 80076fc:	08007765 	.word	0x08007765
 8007700:	08007765 	.word	0x08007765
 8007704:	08007765 	.word	0x08007765
 8007708:	08007765 	.word	0x08007765
 800770c:	08007765 	.word	0x08007765
 8007710:	08007755 	.word	0x08007755
 8007714:	08007765 	.word	0x08007765
 8007718:	08007765 	.word	0x08007765
 800771c:	08007765 	.word	0x08007765
 8007720:	08007765 	.word	0x08007765
 8007724:	08007765 	.word	0x08007765
 8007728:	08007765 	.word	0x08007765
 800772c:	08007765 	.word	0x08007765
 8007730:	0800775d 	.word	0x0800775d
 8007734:	2301      	movs	r3, #1
 8007736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800773a:	e0bc      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800773c:	2304      	movs	r3, #4
 800773e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007742:	e0b8      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007744:	2308      	movs	r3, #8
 8007746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800774a:	e0b4      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800774c:	2310      	movs	r3, #16
 800774e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007752:	e0b0      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007754:	2320      	movs	r3, #32
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800775a:	e0ac      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800775c:	2340      	movs	r3, #64	; 0x40
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007762:	e0a8      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007764:	2380      	movs	r3, #128	; 0x80
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800776a:	e0a4      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a8f      	ldr	r2, [pc, #572]	; (80079b0 <UART_SetConfig+0x6a0>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d130      	bne.n	80077d8 <UART_SetConfig+0x4c8>
 8007776:	4b8d      	ldr	r3, [pc, #564]	; (80079ac <UART_SetConfig+0x69c>)
 8007778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	2b05      	cmp	r3, #5
 8007780:	d826      	bhi.n	80077d0 <UART_SetConfig+0x4c0>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <UART_SetConfig+0x478>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	080077a1 	.word	0x080077a1
 800778c:	080077a9 	.word	0x080077a9
 8007790:	080077b1 	.word	0x080077b1
 8007794:	080077b9 	.word	0x080077b9
 8007798:	080077c1 	.word	0x080077c1
 800779c:	080077c9 	.word	0x080077c9
 80077a0:	2300      	movs	r3, #0
 80077a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077a6:	e086      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077a8:	2304      	movs	r3, #4
 80077aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ae:	e082      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077b0:	2308      	movs	r3, #8
 80077b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077b6:	e07e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077b8:	2310      	movs	r3, #16
 80077ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077be:	e07a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077c0:	2320      	movs	r3, #32
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077c6:	e076      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077c8:	2340      	movs	r3, #64	; 0x40
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077ce:	e072      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077d0:	2380      	movs	r3, #128	; 0x80
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80077d6:	e06e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a75      	ldr	r2, [pc, #468]	; (80079b4 <UART_SetConfig+0x6a4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d130      	bne.n	8007844 <UART_SetConfig+0x534>
 80077e2:	4b72      	ldr	r3, [pc, #456]	; (80079ac <UART_SetConfig+0x69c>)
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	f003 0307 	and.w	r3, r3, #7
 80077ea:	2b05      	cmp	r3, #5
 80077ec:	d826      	bhi.n	800783c <UART_SetConfig+0x52c>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <UART_SetConfig+0x4e4>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	0800780d 	.word	0x0800780d
 80077f8:	08007815 	.word	0x08007815
 80077fc:	0800781d 	.word	0x0800781d
 8007800:	08007825 	.word	0x08007825
 8007804:	0800782d 	.word	0x0800782d
 8007808:	08007835 	.word	0x08007835
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007812:	e050      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007814:	2304      	movs	r3, #4
 8007816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800781a:	e04c      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800781c:	2308      	movs	r3, #8
 800781e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007822:	e048      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007824:	2310      	movs	r3, #16
 8007826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800782a:	e044      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800782c:	2320      	movs	r3, #32
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007832:	e040      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800783a:	e03c      	b.n	80078b6 <UART_SetConfig+0x5a6>
 800783c:	2380      	movs	r3, #128	; 0x80
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007842:	e038      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a5b      	ldr	r2, [pc, #364]	; (80079b8 <UART_SetConfig+0x6a8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d130      	bne.n	80078b0 <UART_SetConfig+0x5a0>
 800784e:	4b57      	ldr	r3, [pc, #348]	; (80079ac <UART_SetConfig+0x69c>)
 8007850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b05      	cmp	r3, #5
 8007858:	d826      	bhi.n	80078a8 <UART_SetConfig+0x598>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x550>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007879 	.word	0x08007879
 8007864:	08007881 	.word	0x08007881
 8007868:	08007889 	.word	0x08007889
 800786c:	08007891 	.word	0x08007891
 8007870:	08007899 	.word	0x08007899
 8007874:	080078a1 	.word	0x080078a1
 8007878:	2302      	movs	r3, #2
 800787a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800787e:	e01a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007880:	2304      	movs	r3, #4
 8007882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007886:	e016      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007888:	2308      	movs	r3, #8
 800788a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800788e:	e012      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007890:	2310      	movs	r3, #16
 8007892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007896:	e00e      	b.n	80078b6 <UART_SetConfig+0x5a6>
 8007898:	2320      	movs	r3, #32
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800789e:	e00a      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80078a0:	2340      	movs	r3, #64	; 0x40
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078a6:	e006      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80078a8:	2380      	movs	r3, #128	; 0x80
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80078ae:	e002      	b.n	80078b6 <UART_SetConfig+0x5a6>
 80078b0:	2380      	movs	r3, #128	; 0x80
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a3f      	ldr	r2, [pc, #252]	; (80079b8 <UART_SetConfig+0x6a8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	f040 80f8 	bne.w	8007ab2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80078c6:	2b20      	cmp	r3, #32
 80078c8:	dc46      	bgt.n	8007958 <UART_SetConfig+0x648>
 80078ca:	2b02      	cmp	r3, #2
 80078cc:	f2c0 8082 	blt.w	80079d4 <UART_SetConfig+0x6c4>
 80078d0:	3b02      	subs	r3, #2
 80078d2:	2b1e      	cmp	r3, #30
 80078d4:	d87e      	bhi.n	80079d4 <UART_SetConfig+0x6c4>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0x5cc>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	0800795f 	.word	0x0800795f
 80078e0:	080079d5 	.word	0x080079d5
 80078e4:	08007967 	.word	0x08007967
 80078e8:	080079d5 	.word	0x080079d5
 80078ec:	080079d5 	.word	0x080079d5
 80078f0:	080079d5 	.word	0x080079d5
 80078f4:	08007977 	.word	0x08007977
 80078f8:	080079d5 	.word	0x080079d5
 80078fc:	080079d5 	.word	0x080079d5
 8007900:	080079d5 	.word	0x080079d5
 8007904:	080079d5 	.word	0x080079d5
 8007908:	080079d5 	.word	0x080079d5
 800790c:	080079d5 	.word	0x080079d5
 8007910:	080079d5 	.word	0x080079d5
 8007914:	08007987 	.word	0x08007987
 8007918:	080079d5 	.word	0x080079d5
 800791c:	080079d5 	.word	0x080079d5
 8007920:	080079d5 	.word	0x080079d5
 8007924:	080079d5 	.word	0x080079d5
 8007928:	080079d5 	.word	0x080079d5
 800792c:	080079d5 	.word	0x080079d5
 8007930:	080079d5 	.word	0x080079d5
 8007934:	080079d5 	.word	0x080079d5
 8007938:	080079d5 	.word	0x080079d5
 800793c:	080079d5 	.word	0x080079d5
 8007940:	080079d5 	.word	0x080079d5
 8007944:	080079d5 	.word	0x080079d5
 8007948:	080079d5 	.word	0x080079d5
 800794c:	080079d5 	.word	0x080079d5
 8007950:	080079d5 	.word	0x080079d5
 8007954:	080079c7 	.word	0x080079c7
 8007958:	2b40      	cmp	r3, #64	; 0x40
 800795a:	d037      	beq.n	80079cc <UART_SetConfig+0x6bc>
 800795c:	e03a      	b.n	80079d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800795e:	f7fc ff29 	bl	80047b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007962:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007964:	e03c      	b.n	80079e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796a:	4618      	mov	r0, r3
 800796c:	f7fc ff38 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007974:	e034      	b.n	80079e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007976:	f107 0318 	add.w	r3, r7, #24
 800797a:	4618      	mov	r0, r3
 800797c:	f7fd f884 	bl	8004a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007984:	e02c      	b.n	80079e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <UART_SetConfig+0x69c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f003 0320 	and.w	r3, r3, #32
 800798e:	2b00      	cmp	r3, #0
 8007990:	d016      	beq.n	80079c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <UART_SetConfig+0x69c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	08db      	lsrs	r3, r3, #3
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	4a07      	ldr	r2, [pc, #28]	; (80079bc <UART_SetConfig+0x6ac>)
 800799e:	fa22 f303 	lsr.w	r3, r2, r3
 80079a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80079a4:	e01c      	b.n	80079e0 <UART_SetConfig+0x6d0>
 80079a6:	bf00      	nop
 80079a8:	40011400 	.word	0x40011400
 80079ac:	58024400 	.word	0x58024400
 80079b0:	40007800 	.word	0x40007800
 80079b4:	40007c00 	.word	0x40007c00
 80079b8:	58000c00 	.word	0x58000c00
 80079bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80079c0:	4b9d      	ldr	r3, [pc, #628]	; (8007c38 <UART_SetConfig+0x928>)
 80079c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079c4:	e00c      	b.n	80079e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80079c6:	4b9d      	ldr	r3, [pc, #628]	; (8007c3c <UART_SetConfig+0x92c>)
 80079c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079ca:	e009      	b.n	80079e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80079d2:	e005      	b.n	80079e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80079d4:	2300      	movs	r3, #0
 80079d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80079de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80079e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 81de 	beq.w	8007da4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	4a94      	ldr	r2, [pc, #592]	; (8007c40 <UART_SetConfig+0x930>)
 80079ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	4613      	mov	r3, r2
 8007a02:	005b      	lsls	r3, r3, #1
 8007a04:	4413      	add	r3, r2
 8007a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d305      	bcc.n	8007a18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a14:	429a      	cmp	r2, r3
 8007a16:	d903      	bls.n	8007a20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007a1e:	e1c1      	b.n	8007da4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a22:	2200      	movs	r2, #0
 8007a24:	60bb      	str	r3, [r7, #8]
 8007a26:	60fa      	str	r2, [r7, #12]
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	4a84      	ldr	r2, [pc, #528]	; (8007c40 <UART_SetConfig+0x930>)
 8007a2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	2200      	movs	r2, #0
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	607a      	str	r2, [r7, #4]
 8007a3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007a42:	f7f8 fc9d 	bl	8000380 <__aeabi_uldivmod>
 8007a46:	4602      	mov	r2, r0
 8007a48:	460b      	mov	r3, r1
 8007a4a:	4610      	mov	r0, r2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	020b      	lsls	r3, r1, #8
 8007a58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007a5c:	0202      	lsls	r2, r0, #8
 8007a5e:	6979      	ldr	r1, [r7, #20]
 8007a60:	6849      	ldr	r1, [r1, #4]
 8007a62:	0849      	lsrs	r1, r1, #1
 8007a64:	2000      	movs	r0, #0
 8007a66:	460c      	mov	r4, r1
 8007a68:	4605      	mov	r5, r0
 8007a6a:	eb12 0804 	adds.w	r8, r2, r4
 8007a6e:	eb43 0905 	adc.w	r9, r3, r5
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	469a      	mov	sl, r3
 8007a7a:	4693      	mov	fp, r2
 8007a7c:	4652      	mov	r2, sl
 8007a7e:	465b      	mov	r3, fp
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f8 fc7c 	bl	8000380 <__aeabi_uldivmod>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	460b      	mov	r3, r1
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a96:	d308      	bcc.n	8007aaa <UART_SetConfig+0x79a>
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a9e:	d204      	bcs.n	8007aaa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007aa6:	60da      	str	r2, [r3, #12]
 8007aa8:	e17c      	b.n	8007da4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007ab0:	e178      	b.n	8007da4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	69db      	ldr	r3, [r3, #28]
 8007ab6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007aba:	f040 80c5 	bne.w	8007c48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007abe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	dc48      	bgt.n	8007b58 <UART_SetConfig+0x848>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	db7b      	blt.n	8007bc2 <UART_SetConfig+0x8b2>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d879      	bhi.n	8007bc2 <UART_SetConfig+0x8b2>
 8007ace:	a201      	add	r2, pc, #4	; (adr r2, 8007ad4 <UART_SetConfig+0x7c4>)
 8007ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad4:	08007b5f 	.word	0x08007b5f
 8007ad8:	08007b67 	.word	0x08007b67
 8007adc:	08007bc3 	.word	0x08007bc3
 8007ae0:	08007bc3 	.word	0x08007bc3
 8007ae4:	08007b6f 	.word	0x08007b6f
 8007ae8:	08007bc3 	.word	0x08007bc3
 8007aec:	08007bc3 	.word	0x08007bc3
 8007af0:	08007bc3 	.word	0x08007bc3
 8007af4:	08007b7f 	.word	0x08007b7f
 8007af8:	08007bc3 	.word	0x08007bc3
 8007afc:	08007bc3 	.word	0x08007bc3
 8007b00:	08007bc3 	.word	0x08007bc3
 8007b04:	08007bc3 	.word	0x08007bc3
 8007b08:	08007bc3 	.word	0x08007bc3
 8007b0c:	08007bc3 	.word	0x08007bc3
 8007b10:	08007bc3 	.word	0x08007bc3
 8007b14:	08007b8f 	.word	0x08007b8f
 8007b18:	08007bc3 	.word	0x08007bc3
 8007b1c:	08007bc3 	.word	0x08007bc3
 8007b20:	08007bc3 	.word	0x08007bc3
 8007b24:	08007bc3 	.word	0x08007bc3
 8007b28:	08007bc3 	.word	0x08007bc3
 8007b2c:	08007bc3 	.word	0x08007bc3
 8007b30:	08007bc3 	.word	0x08007bc3
 8007b34:	08007bc3 	.word	0x08007bc3
 8007b38:	08007bc3 	.word	0x08007bc3
 8007b3c:	08007bc3 	.word	0x08007bc3
 8007b40:	08007bc3 	.word	0x08007bc3
 8007b44:	08007bc3 	.word	0x08007bc3
 8007b48:	08007bc3 	.word	0x08007bc3
 8007b4c:	08007bc3 	.word	0x08007bc3
 8007b50:	08007bc3 	.word	0x08007bc3
 8007b54:	08007bb5 	.word	0x08007bb5
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d02e      	beq.n	8007bba <UART_SetConfig+0x8aa>
 8007b5c:	e031      	b.n	8007bc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b5e:	f7fb fbf3 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8007b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b64:	e033      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b66:	f7fb fc05 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8007b6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007b6c:	e02f      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b72:	4618      	mov	r0, r3
 8007b74:	f7fc fe34 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b7c:	e027      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b7e:	f107 0318 	add.w	r3, r7, #24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fc ff80 	bl	8004a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007b88:	69fb      	ldr	r3, [r7, #28]
 8007b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007b8c:	e01f      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b8e:	4b2d      	ldr	r3, [pc, #180]	; (8007c44 <UART_SetConfig+0x934>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <UART_SetConfig+0x934>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	08db      	lsrs	r3, r3, #3
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	4a24      	ldr	r2, [pc, #144]	; (8007c38 <UART_SetConfig+0x928>)
 8007ba6:	fa22 f303 	lsr.w	r3, r2, r3
 8007baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007bac:	e00f      	b.n	8007bce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007bae:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <UART_SetConfig+0x928>)
 8007bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb2:	e00c      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007bb4:	4b21      	ldr	r3, [pc, #132]	; (8007c3c <UART_SetConfig+0x92c>)
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bb8:	e009      	b.n	8007bce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007bc0:	e005      	b.n	8007bce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007bcc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 80e7 	beq.w	8007da4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bda:	4a19      	ldr	r2, [pc, #100]	; (8007c40 <UART_SetConfig+0x930>)
 8007bdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007be0:	461a      	mov	r2, r3
 8007be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007be8:	005a      	lsls	r2, r3, #1
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	085b      	lsrs	r3, r3, #1
 8007bf0:	441a      	add	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	2b0f      	cmp	r3, #15
 8007c00:	d916      	bls.n	8007c30 <UART_SetConfig+0x920>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c08:	d212      	bcs.n	8007c30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	b29b      	uxth	r3, r3
 8007c0e:	f023 030f 	bic.w	r3, r3, #15
 8007c12:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	085b      	lsrs	r3, r3, #1
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	b29a      	uxth	r2, r3
 8007c20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c22:	4313      	orrs	r3, r2
 8007c24:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007c2c:	60da      	str	r2, [r3, #12]
 8007c2e:	e0b9      	b.n	8007da4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007c30:	2301      	movs	r3, #1
 8007c32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007c36:	e0b5      	b.n	8007da4 <UART_SetConfig+0xa94>
 8007c38:	03d09000 	.word	0x03d09000
 8007c3c:	003d0900 	.word	0x003d0900
 8007c40:	08008d8c 	.word	0x08008d8c
 8007c44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c48:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007c4c:	2b20      	cmp	r3, #32
 8007c4e:	dc49      	bgt.n	8007ce4 <UART_SetConfig+0x9d4>
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	db7c      	blt.n	8007d4e <UART_SetConfig+0xa3e>
 8007c54:	2b20      	cmp	r3, #32
 8007c56:	d87a      	bhi.n	8007d4e <UART_SetConfig+0xa3e>
 8007c58:	a201      	add	r2, pc, #4	; (adr r2, 8007c60 <UART_SetConfig+0x950>)
 8007c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c5e:	bf00      	nop
 8007c60:	08007ceb 	.word	0x08007ceb
 8007c64:	08007cf3 	.word	0x08007cf3
 8007c68:	08007d4f 	.word	0x08007d4f
 8007c6c:	08007d4f 	.word	0x08007d4f
 8007c70:	08007cfb 	.word	0x08007cfb
 8007c74:	08007d4f 	.word	0x08007d4f
 8007c78:	08007d4f 	.word	0x08007d4f
 8007c7c:	08007d4f 	.word	0x08007d4f
 8007c80:	08007d0b 	.word	0x08007d0b
 8007c84:	08007d4f 	.word	0x08007d4f
 8007c88:	08007d4f 	.word	0x08007d4f
 8007c8c:	08007d4f 	.word	0x08007d4f
 8007c90:	08007d4f 	.word	0x08007d4f
 8007c94:	08007d4f 	.word	0x08007d4f
 8007c98:	08007d4f 	.word	0x08007d4f
 8007c9c:	08007d4f 	.word	0x08007d4f
 8007ca0:	08007d1b 	.word	0x08007d1b
 8007ca4:	08007d4f 	.word	0x08007d4f
 8007ca8:	08007d4f 	.word	0x08007d4f
 8007cac:	08007d4f 	.word	0x08007d4f
 8007cb0:	08007d4f 	.word	0x08007d4f
 8007cb4:	08007d4f 	.word	0x08007d4f
 8007cb8:	08007d4f 	.word	0x08007d4f
 8007cbc:	08007d4f 	.word	0x08007d4f
 8007cc0:	08007d4f 	.word	0x08007d4f
 8007cc4:	08007d4f 	.word	0x08007d4f
 8007cc8:	08007d4f 	.word	0x08007d4f
 8007ccc:	08007d4f 	.word	0x08007d4f
 8007cd0:	08007d4f 	.word	0x08007d4f
 8007cd4:	08007d4f 	.word	0x08007d4f
 8007cd8:	08007d4f 	.word	0x08007d4f
 8007cdc:	08007d4f 	.word	0x08007d4f
 8007ce0:	08007d41 	.word	0x08007d41
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d02e      	beq.n	8007d46 <UART_SetConfig+0xa36>
 8007ce8:	e031      	b.n	8007d4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cea:	f7fb fb2d 	bl	8003348 <HAL_RCC_GetPCLK1Freq>
 8007cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cf0:	e033      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf2:	f7fb fb3f 	bl	8003374 <HAL_RCC_GetPCLK2Freq>
 8007cf6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007cf8:	e02f      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fc fd6e 	bl	80047e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d08:	e027      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007d0a:	f107 0318 	add.w	r3, r7, #24
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fc feba 	bl	8004a88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d18:	e01f      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d1a:	4b2d      	ldr	r3, [pc, #180]	; (8007dd0 <UART_SetConfig+0xac0>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0320 	and.w	r3, r3, #32
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d009      	beq.n	8007d3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007d26:	4b2a      	ldr	r3, [pc, #168]	; (8007dd0 <UART_SetConfig+0xac0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	08db      	lsrs	r3, r3, #3
 8007d2c:	f003 0303 	and.w	r3, r3, #3
 8007d30:	4a28      	ldr	r2, [pc, #160]	; (8007dd4 <UART_SetConfig+0xac4>)
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d38:	e00f      	b.n	8007d5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007d3a:	4b26      	ldr	r3, [pc, #152]	; (8007dd4 <UART_SetConfig+0xac4>)
 8007d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d3e:	e00c      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007d40:	4b25      	ldr	r3, [pc, #148]	; (8007dd8 <UART_SetConfig+0xac8>)
 8007d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d44:	e009      	b.n	8007d5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007d4c:	e005      	b.n	8007d5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007d58:	bf00      	nop
    }

    if (pclk != 0U)
 8007d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d021      	beq.n	8007da4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d64:	4a1d      	ldr	r2, [pc, #116]	; (8007ddc <UART_SetConfig+0xacc>)
 8007d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d6e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	085b      	lsrs	r3, r3, #1
 8007d78:	441a      	add	r2, r3
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d82:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d909      	bls.n	8007d9e <UART_SetConfig+0xa8e>
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d90:	d205      	bcs.n	8007d9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	60da      	str	r2, [r3, #12]
 8007d9c:	e002      	b.n	8007da4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2201      	movs	r2, #1
 8007da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	2201      	movs	r2, #1
 8007db0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2200      	movs	r2, #0
 8007db8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007dc0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3748      	adds	r7, #72	; 0x48
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dce:	bf00      	nop
 8007dd0:	58024400 	.word	0x58024400
 8007dd4:	03d09000 	.word	0x03d09000
 8007dd8:	003d0900 	.word	0x003d0900
 8007ddc:	08008d8c 	.word	0x08008d8c

08007de0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d00a      	beq.n	8007e0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0e:	f003 0302 	and.w	r3, r3, #2
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00a      	beq.n	8007e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	430a      	orrs	r2, r1
 8007e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e30:	f003 0304 	and.w	r3, r3, #4
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e52:	f003 0308 	and.w	r3, r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00a      	beq.n	8007e70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	430a      	orrs	r2, r1
 8007e6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e74:	f003 0310 	and.w	r3, r3, #16
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00a      	beq.n	8007e92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	430a      	orrs	r2, r1
 8007e90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e96:	f003 0320 	and.w	r3, r3, #32
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00a      	beq.n	8007eb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	430a      	orrs	r2, r1
 8007eb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d01a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ede:	d10a      	bne.n	8007ef6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	605a      	str	r2, [r3, #4]
  }
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b098      	sub	sp, #96	; 0x60
 8007f28:	af02      	add	r7, sp, #8
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f34:	f7f9 feaa 	bl	8001c8c <HAL_GetTick>
 8007f38:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0308 	and.w	r3, r3, #8
 8007f44:	2b08      	cmp	r3, #8
 8007f46:	d12f      	bne.n	8007fa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f4c:	9300      	str	r3, [sp, #0]
 8007f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f50:	2200      	movs	r2, #0
 8007f52:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f88e 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d022      	beq.n	8007fa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	e853 3f00 	ldrex	r3, [r3]
 8007f6e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f76:	653b      	str	r3, [r7, #80]	; 0x50
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f80:	647b      	str	r3, [r7, #68]	; 0x44
 8007f82:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f84:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f88:	e841 2300 	strex	r3, r2, [r1]
 8007f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e6      	bne.n	8007f62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e063      	b.n	8008070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0304 	and.w	r3, r3, #4
 8007fb2:	2b04      	cmp	r3, #4
 8007fb4:	d149      	bne.n	800804a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fb6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f857 	bl	8008078 <UART_WaitOnFlagUntilTimeout>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d03c      	beq.n	800804a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	e853 3f00 	ldrex	r3, [r3]
 8007fdc:	623b      	str	r3, [r7, #32]
   return(result);
 8007fde:	6a3b      	ldr	r3, [r7, #32]
 8007fe0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff6:	e841 2300 	strex	r3, r2, [r1]
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1e6      	bne.n	8007fd0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	3308      	adds	r3, #8
 8008008:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	e853 3f00 	ldrex	r3, [r3]
 8008010:	60fb      	str	r3, [r7, #12]
   return(result);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f023 0301 	bic.w	r3, r3, #1
 8008018:	64bb      	str	r3, [r7, #72]	; 0x48
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008022:	61fa      	str	r2, [r7, #28]
 8008024:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008026:	69b9      	ldr	r1, [r7, #24]
 8008028:	69fa      	ldr	r2, [r7, #28]
 800802a:	e841 2300 	strex	r3, r2, [r1]
 800802e:	617b      	str	r3, [r7, #20]
   return(result);
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d1e5      	bne.n	8008002 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2220      	movs	r2, #32
 800803a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008046:	2303      	movs	r3, #3
 8008048:	e012      	b.n	8008070 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2220      	movs	r2, #32
 800804e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2200      	movs	r2, #0
 800806a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800806e:	2300      	movs	r3, #0
}
 8008070:	4618      	mov	r0, r3
 8008072:	3758      	adds	r7, #88	; 0x58
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008088:	e049      	b.n	800811e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800808a:	69bb      	ldr	r3, [r7, #24]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d045      	beq.n	800811e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008092:	f7f9 fdfb 	bl	8001c8c <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d302      	bcc.n	80080a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e048      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d031      	beq.n	800811e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	69db      	ldr	r3, [r3, #28]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d110      	bne.n	80080ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2208      	movs	r2, #8
 80080ce:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f839 	bl	8008148 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2208      	movs	r2, #8
 80080da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e029      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080f8:	d111      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008102:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 f81f 	bl	8008148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2220      	movs	r2, #32
 800810e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e00f      	b.n	800813e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	69da      	ldr	r2, [r3, #28]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4013      	ands	r3, r2
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	429a      	cmp	r2, r3
 800812c:	bf0c      	ite	eq
 800812e:	2301      	moveq	r3, #1
 8008130:	2300      	movne	r3, #0
 8008132:	b2db      	uxtb	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d0a6      	beq.n	800808a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
	...

08008148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008148:	b480      	push	{r7}
 800814a:	b095      	sub	sp, #84	; 0x54
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008158:	e853 3f00 	ldrex	r3, [r3]
 800815c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008164:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	643b      	str	r3, [r7, #64]	; 0x40
 8008170:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008172:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008174:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008176:	e841 2300 	strex	r3, r2, [r1]
 800817a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800817c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1e6      	bne.n	8008150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3308      	adds	r3, #8
 8008188:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	e853 3f00 	ldrex	r3, [r3]
 8008190:	61fb      	str	r3, [r7, #28]
   return(result);
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <UART_EndRxTransfer+0xc8>)
 8008196:	4013      	ands	r3, r2
 8008198:	64bb      	str	r3, [r7, #72]	; 0x48
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	3308      	adds	r3, #8
 80081a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081aa:	e841 2300 	strex	r3, r2, [r1]
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d1e5      	bne.n	8008182 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d118      	bne.n	80081f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f023 0310 	bic.w	r3, r3, #16
 80081d2:	647b      	str	r3, [r7, #68]	; 0x44
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	461a      	mov	r2, r3
 80081da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081dc:	61bb      	str	r3, [r7, #24]
 80081de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	6979      	ldr	r1, [r7, #20]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	e841 2300 	strex	r3, r2, [r1]
 80081e8:	613b      	str	r3, [r7, #16]
   return(result);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e6      	bne.n	80081be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008204:	bf00      	nop
 8008206:	3754      	adds	r7, #84	; 0x54
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	effffffe 	.word	0xeffffffe

08008214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008214:	b480      	push	{r7}
 8008216:	b085      	sub	sp, #20
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <HAL_UARTEx_DisableFifoMode+0x16>
 8008226:	2302      	movs	r3, #2
 8008228:	e027      	b.n	800827a <HAL_UARTEx_DisableFifoMode+0x66>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2224      	movs	r2, #36	; 0x24
 8008236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f022 0201 	bic.w	r2, r2, #1
 8008250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2220      	movs	r2, #32
 800826c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008278:	2300      	movs	r3, #0
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr

08008286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800829a:	2302      	movs	r3, #2
 800829c:	e02d      	b.n	80082fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2224      	movs	r2, #36	; 0x24
 80082aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f022 0201 	bic.w	r2, r2, #1
 80082c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	683a      	ldr	r2, [r7, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 f850 	bl	8008380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68fa      	ldr	r2, [r7, #12]
 80082e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2220      	movs	r2, #32
 80082ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b084      	sub	sp, #16
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008316:	2302      	movs	r3, #2
 8008318:	e02d      	b.n	8008376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2224      	movs	r2, #36	; 0x24
 8008326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 0201 	bic.w	r2, r2, #1
 8008340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	683a      	ldr	r2, [r7, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f812 	bl	8008380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2220      	movs	r2, #32
 8008368:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800838c:	2b00      	cmp	r3, #0
 800838e:	d108      	bne.n	80083a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083a0:	e031      	b.n	8008406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083a2:	2310      	movs	r3, #16
 80083a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083a6:	2310      	movs	r3, #16
 80083a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	0e5b      	lsrs	r3, r3, #25
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	0f5b      	lsrs	r3, r3, #29
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	f003 0307 	and.w	r3, r3, #7
 80083c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	7b3a      	ldrb	r2, [r7, #12]
 80083ce:	4911      	ldr	r1, [pc, #68]	; (8008414 <UARTEx_SetNbDataToProcess+0x94>)
 80083d0:	5c8a      	ldrb	r2, [r1, r2]
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80083d6:	7b3a      	ldrb	r2, [r7, #12]
 80083d8:	490f      	ldr	r1, [pc, #60]	; (8008418 <UARTEx_SetNbDataToProcess+0x98>)
 80083da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80083e0:	b29a      	uxth	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	7b7a      	ldrb	r2, [r7, #13]
 80083ec:	4909      	ldr	r1, [pc, #36]	; (8008414 <UARTEx_SetNbDataToProcess+0x94>)
 80083ee:	5c8a      	ldrb	r2, [r1, r2]
 80083f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083f4:	7b7a      	ldrb	r2, [r7, #13]
 80083f6:	4908      	ldr	r1, [pc, #32]	; (8008418 <UARTEx_SetNbDataToProcess+0x98>)
 80083f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80083fe:	b29a      	uxth	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008406:	bf00      	nop
 8008408:	3714      	adds	r7, #20
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	08008da4 	.word	0x08008da4
 8008418:	08008dac 	.word	0x08008dac

0800841c <__errno>:
 800841c:	4b01      	ldr	r3, [pc, #4]	; (8008424 <__errno+0x8>)
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	24000014 	.word	0x24000014

08008428 <__libc_init_array>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4d0d      	ldr	r5, [pc, #52]	; (8008460 <__libc_init_array+0x38>)
 800842c:	4c0d      	ldr	r4, [pc, #52]	; (8008464 <__libc_init_array+0x3c>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	2600      	movs	r6, #0
 8008434:	42a6      	cmp	r6, r4
 8008436:	d109      	bne.n	800844c <__libc_init_array+0x24>
 8008438:	4d0b      	ldr	r5, [pc, #44]	; (8008468 <__libc_init_array+0x40>)
 800843a:	4c0c      	ldr	r4, [pc, #48]	; (800846c <__libc_init_array+0x44>)
 800843c:	f000 fc8e 	bl	8008d5c <_init>
 8008440:	1b64      	subs	r4, r4, r5
 8008442:	10a4      	asrs	r4, r4, #2
 8008444:	2600      	movs	r6, #0
 8008446:	42a6      	cmp	r6, r4
 8008448:	d105      	bne.n	8008456 <__libc_init_array+0x2e>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008450:	4798      	blx	r3
 8008452:	3601      	adds	r6, #1
 8008454:	e7ee      	b.n	8008434 <__libc_init_array+0xc>
 8008456:	f855 3b04 	ldr.w	r3, [r5], #4
 800845a:	4798      	blx	r3
 800845c:	3601      	adds	r6, #1
 800845e:	e7f2      	b.n	8008446 <__libc_init_array+0x1e>
 8008460:	08008df0 	.word	0x08008df0
 8008464:	08008df0 	.word	0x08008df0
 8008468:	08008df0 	.word	0x08008df0
 800846c:	08008df4 	.word	0x08008df4

08008470 <memset>:
 8008470:	4402      	add	r2, r0
 8008472:	4603      	mov	r3, r0
 8008474:	4293      	cmp	r3, r2
 8008476:	d100      	bne.n	800847a <memset+0xa>
 8008478:	4770      	bx	lr
 800847a:	f803 1b01 	strb.w	r1, [r3], #1
 800847e:	e7f9      	b.n	8008474 <memset+0x4>

08008480 <siprintf>:
 8008480:	b40e      	push	{r1, r2, r3}
 8008482:	b500      	push	{lr}
 8008484:	b09c      	sub	sp, #112	; 0x70
 8008486:	ab1d      	add	r3, sp, #116	; 0x74
 8008488:	9002      	str	r0, [sp, #8]
 800848a:	9006      	str	r0, [sp, #24]
 800848c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <siprintf+0x38>)
 8008492:	9107      	str	r1, [sp, #28]
 8008494:	9104      	str	r1, [sp, #16]
 8008496:	4909      	ldr	r1, [pc, #36]	; (80084bc <siprintf+0x3c>)
 8008498:	f853 2b04 	ldr.w	r2, [r3], #4
 800849c:	9105      	str	r1, [sp, #20]
 800849e:	6800      	ldr	r0, [r0, #0]
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	a902      	add	r1, sp, #8
 80084a4:	f000 f868 	bl	8008578 <_svfiprintf_r>
 80084a8:	9b02      	ldr	r3, [sp, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	701a      	strb	r2, [r3, #0]
 80084ae:	b01c      	add	sp, #112	; 0x70
 80084b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084b4:	b003      	add	sp, #12
 80084b6:	4770      	bx	lr
 80084b8:	24000014 	.word	0x24000014
 80084bc:	ffff0208 	.word	0xffff0208

080084c0 <__ssputs_r>:
 80084c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	688e      	ldr	r6, [r1, #8]
 80084c6:	429e      	cmp	r6, r3
 80084c8:	4682      	mov	sl, r0
 80084ca:	460c      	mov	r4, r1
 80084cc:	4690      	mov	r8, r2
 80084ce:	461f      	mov	r7, r3
 80084d0:	d838      	bhi.n	8008544 <__ssputs_r+0x84>
 80084d2:	898a      	ldrh	r2, [r1, #12]
 80084d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084d8:	d032      	beq.n	8008540 <__ssputs_r+0x80>
 80084da:	6825      	ldr	r5, [r4, #0]
 80084dc:	6909      	ldr	r1, [r1, #16]
 80084de:	eba5 0901 	sub.w	r9, r5, r1
 80084e2:	6965      	ldr	r5, [r4, #20]
 80084e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084ec:	3301      	adds	r3, #1
 80084ee:	444b      	add	r3, r9
 80084f0:	106d      	asrs	r5, r5, #1
 80084f2:	429d      	cmp	r5, r3
 80084f4:	bf38      	it	cc
 80084f6:	461d      	movcc	r5, r3
 80084f8:	0553      	lsls	r3, r2, #21
 80084fa:	d531      	bpl.n	8008560 <__ssputs_r+0xa0>
 80084fc:	4629      	mov	r1, r5
 80084fe:	f000 fb63 	bl	8008bc8 <_malloc_r>
 8008502:	4606      	mov	r6, r0
 8008504:	b950      	cbnz	r0, 800851c <__ssputs_r+0x5c>
 8008506:	230c      	movs	r3, #12
 8008508:	f8ca 3000 	str.w	r3, [sl]
 800850c:	89a3      	ldrh	r3, [r4, #12]
 800850e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008512:	81a3      	strh	r3, [r4, #12]
 8008514:	f04f 30ff 	mov.w	r0, #4294967295
 8008518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800851c:	6921      	ldr	r1, [r4, #16]
 800851e:	464a      	mov	r2, r9
 8008520:	f000 fabe 	bl	8008aa0 <memcpy>
 8008524:	89a3      	ldrh	r3, [r4, #12]
 8008526:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800852a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800852e:	81a3      	strh	r3, [r4, #12]
 8008530:	6126      	str	r6, [r4, #16]
 8008532:	6165      	str	r5, [r4, #20]
 8008534:	444e      	add	r6, r9
 8008536:	eba5 0509 	sub.w	r5, r5, r9
 800853a:	6026      	str	r6, [r4, #0]
 800853c:	60a5      	str	r5, [r4, #8]
 800853e:	463e      	mov	r6, r7
 8008540:	42be      	cmp	r6, r7
 8008542:	d900      	bls.n	8008546 <__ssputs_r+0x86>
 8008544:	463e      	mov	r6, r7
 8008546:	6820      	ldr	r0, [r4, #0]
 8008548:	4632      	mov	r2, r6
 800854a:	4641      	mov	r1, r8
 800854c:	f000 fab6 	bl	8008abc <memmove>
 8008550:	68a3      	ldr	r3, [r4, #8]
 8008552:	1b9b      	subs	r3, r3, r6
 8008554:	60a3      	str	r3, [r4, #8]
 8008556:	6823      	ldr	r3, [r4, #0]
 8008558:	4433      	add	r3, r6
 800855a:	6023      	str	r3, [r4, #0]
 800855c:	2000      	movs	r0, #0
 800855e:	e7db      	b.n	8008518 <__ssputs_r+0x58>
 8008560:	462a      	mov	r2, r5
 8008562:	f000 fba5 	bl	8008cb0 <_realloc_r>
 8008566:	4606      	mov	r6, r0
 8008568:	2800      	cmp	r0, #0
 800856a:	d1e1      	bne.n	8008530 <__ssputs_r+0x70>
 800856c:	6921      	ldr	r1, [r4, #16]
 800856e:	4650      	mov	r0, sl
 8008570:	f000 fabe 	bl	8008af0 <_free_r>
 8008574:	e7c7      	b.n	8008506 <__ssputs_r+0x46>
	...

08008578 <_svfiprintf_r>:
 8008578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800857c:	4698      	mov	r8, r3
 800857e:	898b      	ldrh	r3, [r1, #12]
 8008580:	061b      	lsls	r3, r3, #24
 8008582:	b09d      	sub	sp, #116	; 0x74
 8008584:	4607      	mov	r7, r0
 8008586:	460d      	mov	r5, r1
 8008588:	4614      	mov	r4, r2
 800858a:	d50e      	bpl.n	80085aa <_svfiprintf_r+0x32>
 800858c:	690b      	ldr	r3, [r1, #16]
 800858e:	b963      	cbnz	r3, 80085aa <_svfiprintf_r+0x32>
 8008590:	2140      	movs	r1, #64	; 0x40
 8008592:	f000 fb19 	bl	8008bc8 <_malloc_r>
 8008596:	6028      	str	r0, [r5, #0]
 8008598:	6128      	str	r0, [r5, #16]
 800859a:	b920      	cbnz	r0, 80085a6 <_svfiprintf_r+0x2e>
 800859c:	230c      	movs	r3, #12
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	f04f 30ff 	mov.w	r0, #4294967295
 80085a4:	e0d1      	b.n	800874a <_svfiprintf_r+0x1d2>
 80085a6:	2340      	movs	r3, #64	; 0x40
 80085a8:	616b      	str	r3, [r5, #20]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9309      	str	r3, [sp, #36]	; 0x24
 80085ae:	2320      	movs	r3, #32
 80085b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80085b8:	2330      	movs	r3, #48	; 0x30
 80085ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008764 <_svfiprintf_r+0x1ec>
 80085be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085c2:	f04f 0901 	mov.w	r9, #1
 80085c6:	4623      	mov	r3, r4
 80085c8:	469a      	mov	sl, r3
 80085ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ce:	b10a      	cbz	r2, 80085d4 <_svfiprintf_r+0x5c>
 80085d0:	2a25      	cmp	r2, #37	; 0x25
 80085d2:	d1f9      	bne.n	80085c8 <_svfiprintf_r+0x50>
 80085d4:	ebba 0b04 	subs.w	fp, sl, r4
 80085d8:	d00b      	beq.n	80085f2 <_svfiprintf_r+0x7a>
 80085da:	465b      	mov	r3, fp
 80085dc:	4622      	mov	r2, r4
 80085de:	4629      	mov	r1, r5
 80085e0:	4638      	mov	r0, r7
 80085e2:	f7ff ff6d 	bl	80084c0 <__ssputs_r>
 80085e6:	3001      	adds	r0, #1
 80085e8:	f000 80aa 	beq.w	8008740 <_svfiprintf_r+0x1c8>
 80085ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ee:	445a      	add	r2, fp
 80085f0:	9209      	str	r2, [sp, #36]	; 0x24
 80085f2:	f89a 3000 	ldrb.w	r3, [sl]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 80a2 	beq.w	8008740 <_svfiprintf_r+0x1c8>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008606:	f10a 0a01 	add.w	sl, sl, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	9307      	str	r3, [sp, #28]
 800860e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008612:	931a      	str	r3, [sp, #104]	; 0x68
 8008614:	4654      	mov	r4, sl
 8008616:	2205      	movs	r2, #5
 8008618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800861c:	4851      	ldr	r0, [pc, #324]	; (8008764 <_svfiprintf_r+0x1ec>)
 800861e:	f7f7 fe5f 	bl	80002e0 <memchr>
 8008622:	9a04      	ldr	r2, [sp, #16]
 8008624:	b9d8      	cbnz	r0, 800865e <_svfiprintf_r+0xe6>
 8008626:	06d0      	lsls	r0, r2, #27
 8008628:	bf44      	itt	mi
 800862a:	2320      	movmi	r3, #32
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008630:	0711      	lsls	r1, r2, #28
 8008632:	bf44      	itt	mi
 8008634:	232b      	movmi	r3, #43	; 0x2b
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863a:	f89a 3000 	ldrb.w	r3, [sl]
 800863e:	2b2a      	cmp	r3, #42	; 0x2a
 8008640:	d015      	beq.n	800866e <_svfiprintf_r+0xf6>
 8008642:	9a07      	ldr	r2, [sp, #28]
 8008644:	4654      	mov	r4, sl
 8008646:	2000      	movs	r0, #0
 8008648:	f04f 0c0a 	mov.w	ip, #10
 800864c:	4621      	mov	r1, r4
 800864e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008652:	3b30      	subs	r3, #48	; 0x30
 8008654:	2b09      	cmp	r3, #9
 8008656:	d94e      	bls.n	80086f6 <_svfiprintf_r+0x17e>
 8008658:	b1b0      	cbz	r0, 8008688 <_svfiprintf_r+0x110>
 800865a:	9207      	str	r2, [sp, #28]
 800865c:	e014      	b.n	8008688 <_svfiprintf_r+0x110>
 800865e:	eba0 0308 	sub.w	r3, r0, r8
 8008662:	fa09 f303 	lsl.w	r3, r9, r3
 8008666:	4313      	orrs	r3, r2
 8008668:	9304      	str	r3, [sp, #16]
 800866a:	46a2      	mov	sl, r4
 800866c:	e7d2      	b.n	8008614 <_svfiprintf_r+0x9c>
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	9103      	str	r1, [sp, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	bfbb      	ittet	lt
 800867a:	425b      	neglt	r3, r3
 800867c:	f042 0202 	orrlt.w	r2, r2, #2
 8008680:	9307      	strge	r3, [sp, #28]
 8008682:	9307      	strlt	r3, [sp, #28]
 8008684:	bfb8      	it	lt
 8008686:	9204      	strlt	r2, [sp, #16]
 8008688:	7823      	ldrb	r3, [r4, #0]
 800868a:	2b2e      	cmp	r3, #46	; 0x2e
 800868c:	d10c      	bne.n	80086a8 <_svfiprintf_r+0x130>
 800868e:	7863      	ldrb	r3, [r4, #1]
 8008690:	2b2a      	cmp	r3, #42	; 0x2a
 8008692:	d135      	bne.n	8008700 <_svfiprintf_r+0x188>
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	1d1a      	adds	r2, r3, #4
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	9203      	str	r2, [sp, #12]
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfb8      	it	lt
 80086a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80086a4:	3402      	adds	r4, #2
 80086a6:	9305      	str	r3, [sp, #20]
 80086a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008774 <_svfiprintf_r+0x1fc>
 80086ac:	7821      	ldrb	r1, [r4, #0]
 80086ae:	2203      	movs	r2, #3
 80086b0:	4650      	mov	r0, sl
 80086b2:	f7f7 fe15 	bl	80002e0 <memchr>
 80086b6:	b140      	cbz	r0, 80086ca <_svfiprintf_r+0x152>
 80086b8:	2340      	movs	r3, #64	; 0x40
 80086ba:	eba0 000a 	sub.w	r0, r0, sl
 80086be:	fa03 f000 	lsl.w	r0, r3, r0
 80086c2:	9b04      	ldr	r3, [sp, #16]
 80086c4:	4303      	orrs	r3, r0
 80086c6:	3401      	adds	r4, #1
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086ce:	4826      	ldr	r0, [pc, #152]	; (8008768 <_svfiprintf_r+0x1f0>)
 80086d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086d4:	2206      	movs	r2, #6
 80086d6:	f7f7 fe03 	bl	80002e0 <memchr>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d038      	beq.n	8008750 <_svfiprintf_r+0x1d8>
 80086de:	4b23      	ldr	r3, [pc, #140]	; (800876c <_svfiprintf_r+0x1f4>)
 80086e0:	bb1b      	cbnz	r3, 800872a <_svfiprintf_r+0x1b2>
 80086e2:	9b03      	ldr	r3, [sp, #12]
 80086e4:	3307      	adds	r3, #7
 80086e6:	f023 0307 	bic.w	r3, r3, #7
 80086ea:	3308      	adds	r3, #8
 80086ec:	9303      	str	r3, [sp, #12]
 80086ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f0:	4433      	add	r3, r6
 80086f2:	9309      	str	r3, [sp, #36]	; 0x24
 80086f4:	e767      	b.n	80085c6 <_svfiprintf_r+0x4e>
 80086f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80086fa:	460c      	mov	r4, r1
 80086fc:	2001      	movs	r0, #1
 80086fe:	e7a5      	b.n	800864c <_svfiprintf_r+0xd4>
 8008700:	2300      	movs	r3, #0
 8008702:	3401      	adds	r4, #1
 8008704:	9305      	str	r3, [sp, #20]
 8008706:	4619      	mov	r1, r3
 8008708:	f04f 0c0a 	mov.w	ip, #10
 800870c:	4620      	mov	r0, r4
 800870e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008712:	3a30      	subs	r2, #48	; 0x30
 8008714:	2a09      	cmp	r2, #9
 8008716:	d903      	bls.n	8008720 <_svfiprintf_r+0x1a8>
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0c5      	beq.n	80086a8 <_svfiprintf_r+0x130>
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	e7c3      	b.n	80086a8 <_svfiprintf_r+0x130>
 8008720:	fb0c 2101 	mla	r1, ip, r1, r2
 8008724:	4604      	mov	r4, r0
 8008726:	2301      	movs	r3, #1
 8008728:	e7f0      	b.n	800870c <_svfiprintf_r+0x194>
 800872a:	ab03      	add	r3, sp, #12
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	462a      	mov	r2, r5
 8008730:	4b0f      	ldr	r3, [pc, #60]	; (8008770 <_svfiprintf_r+0x1f8>)
 8008732:	a904      	add	r1, sp, #16
 8008734:	4638      	mov	r0, r7
 8008736:	f3af 8000 	nop.w
 800873a:	1c42      	adds	r2, r0, #1
 800873c:	4606      	mov	r6, r0
 800873e:	d1d6      	bne.n	80086ee <_svfiprintf_r+0x176>
 8008740:	89ab      	ldrh	r3, [r5, #12]
 8008742:	065b      	lsls	r3, r3, #25
 8008744:	f53f af2c 	bmi.w	80085a0 <_svfiprintf_r+0x28>
 8008748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800874a:	b01d      	add	sp, #116	; 0x74
 800874c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	462a      	mov	r2, r5
 8008756:	4b06      	ldr	r3, [pc, #24]	; (8008770 <_svfiprintf_r+0x1f8>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4638      	mov	r0, r7
 800875c:	f000 f87a 	bl	8008854 <_printf_i>
 8008760:	e7eb      	b.n	800873a <_svfiprintf_r+0x1c2>
 8008762:	bf00      	nop
 8008764:	08008db4 	.word	0x08008db4
 8008768:	08008dbe 	.word	0x08008dbe
 800876c:	00000000 	.word	0x00000000
 8008770:	080084c1 	.word	0x080084c1
 8008774:	08008dba 	.word	0x08008dba

08008778 <_printf_common>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	4616      	mov	r6, r2
 800877e:	4699      	mov	r9, r3
 8008780:	688a      	ldr	r2, [r1, #8]
 8008782:	690b      	ldr	r3, [r1, #16]
 8008784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008788:	4293      	cmp	r3, r2
 800878a:	bfb8      	it	lt
 800878c:	4613      	movlt	r3, r2
 800878e:	6033      	str	r3, [r6, #0]
 8008790:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008794:	4607      	mov	r7, r0
 8008796:	460c      	mov	r4, r1
 8008798:	b10a      	cbz	r2, 800879e <_printf_common+0x26>
 800879a:	3301      	adds	r3, #1
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	0699      	lsls	r1, r3, #26
 80087a2:	bf42      	ittt	mi
 80087a4:	6833      	ldrmi	r3, [r6, #0]
 80087a6:	3302      	addmi	r3, #2
 80087a8:	6033      	strmi	r3, [r6, #0]
 80087aa:	6825      	ldr	r5, [r4, #0]
 80087ac:	f015 0506 	ands.w	r5, r5, #6
 80087b0:	d106      	bne.n	80087c0 <_printf_common+0x48>
 80087b2:	f104 0a19 	add.w	sl, r4, #25
 80087b6:	68e3      	ldr	r3, [r4, #12]
 80087b8:	6832      	ldr	r2, [r6, #0]
 80087ba:	1a9b      	subs	r3, r3, r2
 80087bc:	42ab      	cmp	r3, r5
 80087be:	dc26      	bgt.n	800880e <_printf_common+0x96>
 80087c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087c4:	1e13      	subs	r3, r2, #0
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	bf18      	it	ne
 80087ca:	2301      	movne	r3, #1
 80087cc:	0692      	lsls	r2, r2, #26
 80087ce:	d42b      	bmi.n	8008828 <_printf_common+0xb0>
 80087d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087d4:	4649      	mov	r1, r9
 80087d6:	4638      	mov	r0, r7
 80087d8:	47c0      	blx	r8
 80087da:	3001      	adds	r0, #1
 80087dc:	d01e      	beq.n	800881c <_printf_common+0xa4>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	68e5      	ldr	r5, [r4, #12]
 80087e2:	6832      	ldr	r2, [r6, #0]
 80087e4:	f003 0306 	and.w	r3, r3, #6
 80087e8:	2b04      	cmp	r3, #4
 80087ea:	bf08      	it	eq
 80087ec:	1aad      	subeq	r5, r5, r2
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	6922      	ldr	r2, [r4, #16]
 80087f2:	bf0c      	ite	eq
 80087f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087f8:	2500      	movne	r5, #0
 80087fa:	4293      	cmp	r3, r2
 80087fc:	bfc4      	itt	gt
 80087fe:	1a9b      	subgt	r3, r3, r2
 8008800:	18ed      	addgt	r5, r5, r3
 8008802:	2600      	movs	r6, #0
 8008804:	341a      	adds	r4, #26
 8008806:	42b5      	cmp	r5, r6
 8008808:	d11a      	bne.n	8008840 <_printf_common+0xc8>
 800880a:	2000      	movs	r0, #0
 800880c:	e008      	b.n	8008820 <_printf_common+0xa8>
 800880e:	2301      	movs	r3, #1
 8008810:	4652      	mov	r2, sl
 8008812:	4649      	mov	r1, r9
 8008814:	4638      	mov	r0, r7
 8008816:	47c0      	blx	r8
 8008818:	3001      	adds	r0, #1
 800881a:	d103      	bne.n	8008824 <_printf_common+0xac>
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008824:	3501      	adds	r5, #1
 8008826:	e7c6      	b.n	80087b6 <_printf_common+0x3e>
 8008828:	18e1      	adds	r1, r4, r3
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	2030      	movs	r0, #48	; 0x30
 800882e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008832:	4422      	add	r2, r4
 8008834:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008838:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800883c:	3302      	adds	r3, #2
 800883e:	e7c7      	b.n	80087d0 <_printf_common+0x58>
 8008840:	2301      	movs	r3, #1
 8008842:	4622      	mov	r2, r4
 8008844:	4649      	mov	r1, r9
 8008846:	4638      	mov	r0, r7
 8008848:	47c0      	blx	r8
 800884a:	3001      	adds	r0, #1
 800884c:	d0e6      	beq.n	800881c <_printf_common+0xa4>
 800884e:	3601      	adds	r6, #1
 8008850:	e7d9      	b.n	8008806 <_printf_common+0x8e>
	...

08008854 <_printf_i>:
 8008854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008858:	7e0f      	ldrb	r7, [r1, #24]
 800885a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800885c:	2f78      	cmp	r7, #120	; 0x78
 800885e:	4691      	mov	r9, r2
 8008860:	4680      	mov	r8, r0
 8008862:	460c      	mov	r4, r1
 8008864:	469a      	mov	sl, r3
 8008866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800886a:	d807      	bhi.n	800887c <_printf_i+0x28>
 800886c:	2f62      	cmp	r7, #98	; 0x62
 800886e:	d80a      	bhi.n	8008886 <_printf_i+0x32>
 8008870:	2f00      	cmp	r7, #0
 8008872:	f000 80d8 	beq.w	8008a26 <_printf_i+0x1d2>
 8008876:	2f58      	cmp	r7, #88	; 0x58
 8008878:	f000 80a3 	beq.w	80089c2 <_printf_i+0x16e>
 800887c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008884:	e03a      	b.n	80088fc <_printf_i+0xa8>
 8008886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800888a:	2b15      	cmp	r3, #21
 800888c:	d8f6      	bhi.n	800887c <_printf_i+0x28>
 800888e:	a101      	add	r1, pc, #4	; (adr r1, 8008894 <_printf_i+0x40>)
 8008890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008894:	080088ed 	.word	0x080088ed
 8008898:	08008901 	.word	0x08008901
 800889c:	0800887d 	.word	0x0800887d
 80088a0:	0800887d 	.word	0x0800887d
 80088a4:	0800887d 	.word	0x0800887d
 80088a8:	0800887d 	.word	0x0800887d
 80088ac:	08008901 	.word	0x08008901
 80088b0:	0800887d 	.word	0x0800887d
 80088b4:	0800887d 	.word	0x0800887d
 80088b8:	0800887d 	.word	0x0800887d
 80088bc:	0800887d 	.word	0x0800887d
 80088c0:	08008a0d 	.word	0x08008a0d
 80088c4:	08008931 	.word	0x08008931
 80088c8:	080089ef 	.word	0x080089ef
 80088cc:	0800887d 	.word	0x0800887d
 80088d0:	0800887d 	.word	0x0800887d
 80088d4:	08008a2f 	.word	0x08008a2f
 80088d8:	0800887d 	.word	0x0800887d
 80088dc:	08008931 	.word	0x08008931
 80088e0:	0800887d 	.word	0x0800887d
 80088e4:	0800887d 	.word	0x0800887d
 80088e8:	080089f7 	.word	0x080089f7
 80088ec:	682b      	ldr	r3, [r5, #0]
 80088ee:	1d1a      	adds	r2, r3, #4
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	602a      	str	r2, [r5, #0]
 80088f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80088fc:	2301      	movs	r3, #1
 80088fe:	e0a3      	b.n	8008a48 <_printf_i+0x1f4>
 8008900:	6820      	ldr	r0, [r4, #0]
 8008902:	6829      	ldr	r1, [r5, #0]
 8008904:	0606      	lsls	r6, r0, #24
 8008906:	f101 0304 	add.w	r3, r1, #4
 800890a:	d50a      	bpl.n	8008922 <_printf_i+0xce>
 800890c:	680e      	ldr	r6, [r1, #0]
 800890e:	602b      	str	r3, [r5, #0]
 8008910:	2e00      	cmp	r6, #0
 8008912:	da03      	bge.n	800891c <_printf_i+0xc8>
 8008914:	232d      	movs	r3, #45	; 0x2d
 8008916:	4276      	negs	r6, r6
 8008918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800891c:	485e      	ldr	r0, [pc, #376]	; (8008a98 <_printf_i+0x244>)
 800891e:	230a      	movs	r3, #10
 8008920:	e019      	b.n	8008956 <_printf_i+0x102>
 8008922:	680e      	ldr	r6, [r1, #0]
 8008924:	602b      	str	r3, [r5, #0]
 8008926:	f010 0f40 	tst.w	r0, #64	; 0x40
 800892a:	bf18      	it	ne
 800892c:	b236      	sxthne	r6, r6
 800892e:	e7ef      	b.n	8008910 <_printf_i+0xbc>
 8008930:	682b      	ldr	r3, [r5, #0]
 8008932:	6820      	ldr	r0, [r4, #0]
 8008934:	1d19      	adds	r1, r3, #4
 8008936:	6029      	str	r1, [r5, #0]
 8008938:	0601      	lsls	r1, r0, #24
 800893a:	d501      	bpl.n	8008940 <_printf_i+0xec>
 800893c:	681e      	ldr	r6, [r3, #0]
 800893e:	e002      	b.n	8008946 <_printf_i+0xf2>
 8008940:	0646      	lsls	r6, r0, #25
 8008942:	d5fb      	bpl.n	800893c <_printf_i+0xe8>
 8008944:	881e      	ldrh	r6, [r3, #0]
 8008946:	4854      	ldr	r0, [pc, #336]	; (8008a98 <_printf_i+0x244>)
 8008948:	2f6f      	cmp	r7, #111	; 0x6f
 800894a:	bf0c      	ite	eq
 800894c:	2308      	moveq	r3, #8
 800894e:	230a      	movne	r3, #10
 8008950:	2100      	movs	r1, #0
 8008952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008956:	6865      	ldr	r5, [r4, #4]
 8008958:	60a5      	str	r5, [r4, #8]
 800895a:	2d00      	cmp	r5, #0
 800895c:	bfa2      	ittt	ge
 800895e:	6821      	ldrge	r1, [r4, #0]
 8008960:	f021 0104 	bicge.w	r1, r1, #4
 8008964:	6021      	strge	r1, [r4, #0]
 8008966:	b90e      	cbnz	r6, 800896c <_printf_i+0x118>
 8008968:	2d00      	cmp	r5, #0
 800896a:	d04d      	beq.n	8008a08 <_printf_i+0x1b4>
 800896c:	4615      	mov	r5, r2
 800896e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008972:	fb03 6711 	mls	r7, r3, r1, r6
 8008976:	5dc7      	ldrb	r7, [r0, r7]
 8008978:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800897c:	4637      	mov	r7, r6
 800897e:	42bb      	cmp	r3, r7
 8008980:	460e      	mov	r6, r1
 8008982:	d9f4      	bls.n	800896e <_printf_i+0x11a>
 8008984:	2b08      	cmp	r3, #8
 8008986:	d10b      	bne.n	80089a0 <_printf_i+0x14c>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	07de      	lsls	r6, r3, #31
 800898c:	d508      	bpl.n	80089a0 <_printf_i+0x14c>
 800898e:	6923      	ldr	r3, [r4, #16]
 8008990:	6861      	ldr	r1, [r4, #4]
 8008992:	4299      	cmp	r1, r3
 8008994:	bfde      	ittt	le
 8008996:	2330      	movle	r3, #48	; 0x30
 8008998:	f805 3c01 	strble.w	r3, [r5, #-1]
 800899c:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089a0:	1b52      	subs	r2, r2, r5
 80089a2:	6122      	str	r2, [r4, #16]
 80089a4:	f8cd a000 	str.w	sl, [sp]
 80089a8:	464b      	mov	r3, r9
 80089aa:	aa03      	add	r2, sp, #12
 80089ac:	4621      	mov	r1, r4
 80089ae:	4640      	mov	r0, r8
 80089b0:	f7ff fee2 	bl	8008778 <_printf_common>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d14c      	bne.n	8008a52 <_printf_i+0x1fe>
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	b004      	add	sp, #16
 80089be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089c2:	4835      	ldr	r0, [pc, #212]	; (8008a98 <_printf_i+0x244>)
 80089c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089c8:	6829      	ldr	r1, [r5, #0]
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80089d0:	6029      	str	r1, [r5, #0]
 80089d2:	061d      	lsls	r5, r3, #24
 80089d4:	d514      	bpl.n	8008a00 <_printf_i+0x1ac>
 80089d6:	07df      	lsls	r7, r3, #31
 80089d8:	bf44      	itt	mi
 80089da:	f043 0320 	orrmi.w	r3, r3, #32
 80089de:	6023      	strmi	r3, [r4, #0]
 80089e0:	b91e      	cbnz	r6, 80089ea <_printf_i+0x196>
 80089e2:	6823      	ldr	r3, [r4, #0]
 80089e4:	f023 0320 	bic.w	r3, r3, #32
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	2310      	movs	r3, #16
 80089ec:	e7b0      	b.n	8008950 <_printf_i+0xfc>
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f043 0320 	orr.w	r3, r3, #32
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	2378      	movs	r3, #120	; 0x78
 80089f8:	4828      	ldr	r0, [pc, #160]	; (8008a9c <_printf_i+0x248>)
 80089fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80089fe:	e7e3      	b.n	80089c8 <_printf_i+0x174>
 8008a00:	0659      	lsls	r1, r3, #25
 8008a02:	bf48      	it	mi
 8008a04:	b2b6      	uxthmi	r6, r6
 8008a06:	e7e6      	b.n	80089d6 <_printf_i+0x182>
 8008a08:	4615      	mov	r5, r2
 8008a0a:	e7bb      	b.n	8008984 <_printf_i+0x130>
 8008a0c:	682b      	ldr	r3, [r5, #0]
 8008a0e:	6826      	ldr	r6, [r4, #0]
 8008a10:	6961      	ldr	r1, [r4, #20]
 8008a12:	1d18      	adds	r0, r3, #4
 8008a14:	6028      	str	r0, [r5, #0]
 8008a16:	0635      	lsls	r5, r6, #24
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	d501      	bpl.n	8008a20 <_printf_i+0x1cc>
 8008a1c:	6019      	str	r1, [r3, #0]
 8008a1e:	e002      	b.n	8008a26 <_printf_i+0x1d2>
 8008a20:	0670      	lsls	r0, r6, #25
 8008a22:	d5fb      	bpl.n	8008a1c <_printf_i+0x1c8>
 8008a24:	8019      	strh	r1, [r3, #0]
 8008a26:	2300      	movs	r3, #0
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	4615      	mov	r5, r2
 8008a2c:	e7ba      	b.n	80089a4 <_printf_i+0x150>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	1d1a      	adds	r2, r3, #4
 8008a32:	602a      	str	r2, [r5, #0]
 8008a34:	681d      	ldr	r5, [r3, #0]
 8008a36:	6862      	ldr	r2, [r4, #4]
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7f7 fc50 	bl	80002e0 <memchr>
 8008a40:	b108      	cbz	r0, 8008a46 <_printf_i+0x1f2>
 8008a42:	1b40      	subs	r0, r0, r5
 8008a44:	6060      	str	r0, [r4, #4]
 8008a46:	6863      	ldr	r3, [r4, #4]
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a50:	e7a8      	b.n	80089a4 <_printf_i+0x150>
 8008a52:	6923      	ldr	r3, [r4, #16]
 8008a54:	462a      	mov	r2, r5
 8008a56:	4649      	mov	r1, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	47d0      	blx	sl
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d0ab      	beq.n	80089b8 <_printf_i+0x164>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	079b      	lsls	r3, r3, #30
 8008a64:	d413      	bmi.n	8008a8e <_printf_i+0x23a>
 8008a66:	68e0      	ldr	r0, [r4, #12]
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	4298      	cmp	r0, r3
 8008a6c:	bfb8      	it	lt
 8008a6e:	4618      	movlt	r0, r3
 8008a70:	e7a4      	b.n	80089bc <_printf_i+0x168>
 8008a72:	2301      	movs	r3, #1
 8008a74:	4632      	mov	r2, r6
 8008a76:	4649      	mov	r1, r9
 8008a78:	4640      	mov	r0, r8
 8008a7a:	47d0      	blx	sl
 8008a7c:	3001      	adds	r0, #1
 8008a7e:	d09b      	beq.n	80089b8 <_printf_i+0x164>
 8008a80:	3501      	adds	r5, #1
 8008a82:	68e3      	ldr	r3, [r4, #12]
 8008a84:	9903      	ldr	r1, [sp, #12]
 8008a86:	1a5b      	subs	r3, r3, r1
 8008a88:	42ab      	cmp	r3, r5
 8008a8a:	dcf2      	bgt.n	8008a72 <_printf_i+0x21e>
 8008a8c:	e7eb      	b.n	8008a66 <_printf_i+0x212>
 8008a8e:	2500      	movs	r5, #0
 8008a90:	f104 0619 	add.w	r6, r4, #25
 8008a94:	e7f5      	b.n	8008a82 <_printf_i+0x22e>
 8008a96:	bf00      	nop
 8008a98:	08008dc5 	.word	0x08008dc5
 8008a9c:	08008dd6 	.word	0x08008dd6

08008aa0 <memcpy>:
 8008aa0:	440a      	add	r2, r1
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa8:	d100      	bne.n	8008aac <memcpy+0xc>
 8008aaa:	4770      	bx	lr
 8008aac:	b510      	push	{r4, lr}
 8008aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d1f9      	bne.n	8008aae <memcpy+0xe>
 8008aba:	bd10      	pop	{r4, pc}

08008abc <memmove>:
 8008abc:	4288      	cmp	r0, r1
 8008abe:	b510      	push	{r4, lr}
 8008ac0:	eb01 0402 	add.w	r4, r1, r2
 8008ac4:	d902      	bls.n	8008acc <memmove+0x10>
 8008ac6:	4284      	cmp	r4, r0
 8008ac8:	4623      	mov	r3, r4
 8008aca:	d807      	bhi.n	8008adc <memmove+0x20>
 8008acc:	1e43      	subs	r3, r0, #1
 8008ace:	42a1      	cmp	r1, r4
 8008ad0:	d008      	beq.n	8008ae4 <memmove+0x28>
 8008ad2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ad6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ada:	e7f8      	b.n	8008ace <memmove+0x12>
 8008adc:	4402      	add	r2, r0
 8008ade:	4601      	mov	r1, r0
 8008ae0:	428a      	cmp	r2, r1
 8008ae2:	d100      	bne.n	8008ae6 <memmove+0x2a>
 8008ae4:	bd10      	pop	{r4, pc}
 8008ae6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008aea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008aee:	e7f7      	b.n	8008ae0 <memmove+0x24>

08008af0 <_free_r>:
 8008af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008af2:	2900      	cmp	r1, #0
 8008af4:	d044      	beq.n	8008b80 <_free_r+0x90>
 8008af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008afa:	9001      	str	r0, [sp, #4]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	f1a1 0404 	sub.w	r4, r1, #4
 8008b02:	bfb8      	it	lt
 8008b04:	18e4      	addlt	r4, r4, r3
 8008b06:	f000 f913 	bl	8008d30 <__malloc_lock>
 8008b0a:	4a1e      	ldr	r2, [pc, #120]	; (8008b84 <_free_r+0x94>)
 8008b0c:	9801      	ldr	r0, [sp, #4]
 8008b0e:	6813      	ldr	r3, [r2, #0]
 8008b10:	b933      	cbnz	r3, 8008b20 <_free_r+0x30>
 8008b12:	6063      	str	r3, [r4, #4]
 8008b14:	6014      	str	r4, [r2, #0]
 8008b16:	b003      	add	sp, #12
 8008b18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b1c:	f000 b90e 	b.w	8008d3c <__malloc_unlock>
 8008b20:	42a3      	cmp	r3, r4
 8008b22:	d908      	bls.n	8008b36 <_free_r+0x46>
 8008b24:	6825      	ldr	r5, [r4, #0]
 8008b26:	1961      	adds	r1, r4, r5
 8008b28:	428b      	cmp	r3, r1
 8008b2a:	bf01      	itttt	eq
 8008b2c:	6819      	ldreq	r1, [r3, #0]
 8008b2e:	685b      	ldreq	r3, [r3, #4]
 8008b30:	1949      	addeq	r1, r1, r5
 8008b32:	6021      	streq	r1, [r4, #0]
 8008b34:	e7ed      	b.n	8008b12 <_free_r+0x22>
 8008b36:	461a      	mov	r2, r3
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	b10b      	cbz	r3, 8008b40 <_free_r+0x50>
 8008b3c:	42a3      	cmp	r3, r4
 8008b3e:	d9fa      	bls.n	8008b36 <_free_r+0x46>
 8008b40:	6811      	ldr	r1, [r2, #0]
 8008b42:	1855      	adds	r5, r2, r1
 8008b44:	42a5      	cmp	r5, r4
 8008b46:	d10b      	bne.n	8008b60 <_free_r+0x70>
 8008b48:	6824      	ldr	r4, [r4, #0]
 8008b4a:	4421      	add	r1, r4
 8008b4c:	1854      	adds	r4, r2, r1
 8008b4e:	42a3      	cmp	r3, r4
 8008b50:	6011      	str	r1, [r2, #0]
 8008b52:	d1e0      	bne.n	8008b16 <_free_r+0x26>
 8008b54:	681c      	ldr	r4, [r3, #0]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	6053      	str	r3, [r2, #4]
 8008b5a:	4421      	add	r1, r4
 8008b5c:	6011      	str	r1, [r2, #0]
 8008b5e:	e7da      	b.n	8008b16 <_free_r+0x26>
 8008b60:	d902      	bls.n	8008b68 <_free_r+0x78>
 8008b62:	230c      	movs	r3, #12
 8008b64:	6003      	str	r3, [r0, #0]
 8008b66:	e7d6      	b.n	8008b16 <_free_r+0x26>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf04      	itt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	6063      	str	r3, [r4, #4]
 8008b76:	bf04      	itt	eq
 8008b78:	1949      	addeq	r1, r1, r5
 8008b7a:	6021      	streq	r1, [r4, #0]
 8008b7c:	6054      	str	r4, [r2, #4]
 8008b7e:	e7ca      	b.n	8008b16 <_free_r+0x26>
 8008b80:	b003      	add	sp, #12
 8008b82:	bd30      	pop	{r4, r5, pc}
 8008b84:	24000300 	.word	0x24000300

08008b88 <sbrk_aligned>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	4e0e      	ldr	r6, [pc, #56]	; (8008bc4 <sbrk_aligned+0x3c>)
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6831      	ldr	r1, [r6, #0]
 8008b90:	4605      	mov	r5, r0
 8008b92:	b911      	cbnz	r1, 8008b9a <sbrk_aligned+0x12>
 8008b94:	f000 f8bc 	bl	8008d10 <_sbrk_r>
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f000 f8b7 	bl	8008d10 <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d00a      	beq.n	8008bbc <sbrk_aligned+0x34>
 8008ba6:	1cc4      	adds	r4, r0, #3
 8008ba8:	f024 0403 	bic.w	r4, r4, #3
 8008bac:	42a0      	cmp	r0, r4
 8008bae:	d007      	beq.n	8008bc0 <sbrk_aligned+0x38>
 8008bb0:	1a21      	subs	r1, r4, r0
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	f000 f8ac 	bl	8008d10 <_sbrk_r>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d101      	bne.n	8008bc0 <sbrk_aligned+0x38>
 8008bbc:	f04f 34ff 	mov.w	r4, #4294967295
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	24000304 	.word	0x24000304

08008bc8 <_malloc_r>:
 8008bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bcc:	1ccd      	adds	r5, r1, #3
 8008bce:	f025 0503 	bic.w	r5, r5, #3
 8008bd2:	3508      	adds	r5, #8
 8008bd4:	2d0c      	cmp	r5, #12
 8008bd6:	bf38      	it	cc
 8008bd8:	250c      	movcc	r5, #12
 8008bda:	2d00      	cmp	r5, #0
 8008bdc:	4607      	mov	r7, r0
 8008bde:	db01      	blt.n	8008be4 <_malloc_r+0x1c>
 8008be0:	42a9      	cmp	r1, r5
 8008be2:	d905      	bls.n	8008bf0 <_malloc_r+0x28>
 8008be4:	230c      	movs	r3, #12
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	2600      	movs	r6, #0
 8008bea:	4630      	mov	r0, r6
 8008bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bf0:	4e2e      	ldr	r6, [pc, #184]	; (8008cac <_malloc_r+0xe4>)
 8008bf2:	f000 f89d 	bl	8008d30 <__malloc_lock>
 8008bf6:	6833      	ldr	r3, [r6, #0]
 8008bf8:	461c      	mov	r4, r3
 8008bfa:	bb34      	cbnz	r4, 8008c4a <_malloc_r+0x82>
 8008bfc:	4629      	mov	r1, r5
 8008bfe:	4638      	mov	r0, r7
 8008c00:	f7ff ffc2 	bl	8008b88 <sbrk_aligned>
 8008c04:	1c43      	adds	r3, r0, #1
 8008c06:	4604      	mov	r4, r0
 8008c08:	d14d      	bne.n	8008ca6 <_malloc_r+0xde>
 8008c0a:	6834      	ldr	r4, [r6, #0]
 8008c0c:	4626      	mov	r6, r4
 8008c0e:	2e00      	cmp	r6, #0
 8008c10:	d140      	bne.n	8008c94 <_malloc_r+0xcc>
 8008c12:	6823      	ldr	r3, [r4, #0]
 8008c14:	4631      	mov	r1, r6
 8008c16:	4638      	mov	r0, r7
 8008c18:	eb04 0803 	add.w	r8, r4, r3
 8008c1c:	f000 f878 	bl	8008d10 <_sbrk_r>
 8008c20:	4580      	cmp	r8, r0
 8008c22:	d13a      	bne.n	8008c9a <_malloc_r+0xd2>
 8008c24:	6821      	ldr	r1, [r4, #0]
 8008c26:	3503      	adds	r5, #3
 8008c28:	1a6d      	subs	r5, r5, r1
 8008c2a:	f025 0503 	bic.w	r5, r5, #3
 8008c2e:	3508      	adds	r5, #8
 8008c30:	2d0c      	cmp	r5, #12
 8008c32:	bf38      	it	cc
 8008c34:	250c      	movcc	r5, #12
 8008c36:	4629      	mov	r1, r5
 8008c38:	4638      	mov	r0, r7
 8008c3a:	f7ff ffa5 	bl	8008b88 <sbrk_aligned>
 8008c3e:	3001      	adds	r0, #1
 8008c40:	d02b      	beq.n	8008c9a <_malloc_r+0xd2>
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	442b      	add	r3, r5
 8008c46:	6023      	str	r3, [r4, #0]
 8008c48:	e00e      	b.n	8008c68 <_malloc_r+0xa0>
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	1b52      	subs	r2, r2, r5
 8008c4e:	d41e      	bmi.n	8008c8e <_malloc_r+0xc6>
 8008c50:	2a0b      	cmp	r2, #11
 8008c52:	d916      	bls.n	8008c82 <_malloc_r+0xba>
 8008c54:	1961      	adds	r1, r4, r5
 8008c56:	42a3      	cmp	r3, r4
 8008c58:	6025      	str	r5, [r4, #0]
 8008c5a:	bf18      	it	ne
 8008c5c:	6059      	strne	r1, [r3, #4]
 8008c5e:	6863      	ldr	r3, [r4, #4]
 8008c60:	bf08      	it	eq
 8008c62:	6031      	streq	r1, [r6, #0]
 8008c64:	5162      	str	r2, [r4, r5]
 8008c66:	604b      	str	r3, [r1, #4]
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f104 060b 	add.w	r6, r4, #11
 8008c6e:	f000 f865 	bl	8008d3c <__malloc_unlock>
 8008c72:	f026 0607 	bic.w	r6, r6, #7
 8008c76:	1d23      	adds	r3, r4, #4
 8008c78:	1af2      	subs	r2, r6, r3
 8008c7a:	d0b6      	beq.n	8008bea <_malloc_r+0x22>
 8008c7c:	1b9b      	subs	r3, r3, r6
 8008c7e:	50a3      	str	r3, [r4, r2]
 8008c80:	e7b3      	b.n	8008bea <_malloc_r+0x22>
 8008c82:	6862      	ldr	r2, [r4, #4]
 8008c84:	42a3      	cmp	r3, r4
 8008c86:	bf0c      	ite	eq
 8008c88:	6032      	streq	r2, [r6, #0]
 8008c8a:	605a      	strne	r2, [r3, #4]
 8008c8c:	e7ec      	b.n	8008c68 <_malloc_r+0xa0>
 8008c8e:	4623      	mov	r3, r4
 8008c90:	6864      	ldr	r4, [r4, #4]
 8008c92:	e7b2      	b.n	8008bfa <_malloc_r+0x32>
 8008c94:	4634      	mov	r4, r6
 8008c96:	6876      	ldr	r6, [r6, #4]
 8008c98:	e7b9      	b.n	8008c0e <_malloc_r+0x46>
 8008c9a:	230c      	movs	r3, #12
 8008c9c:	603b      	str	r3, [r7, #0]
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	f000 f84c 	bl	8008d3c <__malloc_unlock>
 8008ca4:	e7a1      	b.n	8008bea <_malloc_r+0x22>
 8008ca6:	6025      	str	r5, [r4, #0]
 8008ca8:	e7de      	b.n	8008c68 <_malloc_r+0xa0>
 8008caa:	bf00      	nop
 8008cac:	24000300 	.word	0x24000300

08008cb0 <_realloc_r>:
 8008cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4614      	mov	r4, r2
 8008cb8:	460e      	mov	r6, r1
 8008cba:	b921      	cbnz	r1, 8008cc6 <_realloc_r+0x16>
 8008cbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	f7ff bf81 	b.w	8008bc8 <_malloc_r>
 8008cc6:	b92a      	cbnz	r2, 8008cd4 <_realloc_r+0x24>
 8008cc8:	f7ff ff12 	bl	8008af0 <_free_r>
 8008ccc:	4625      	mov	r5, r4
 8008cce:	4628      	mov	r0, r5
 8008cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cd4:	f000 f838 	bl	8008d48 <_malloc_usable_size_r>
 8008cd8:	4284      	cmp	r4, r0
 8008cda:	4607      	mov	r7, r0
 8008cdc:	d802      	bhi.n	8008ce4 <_realloc_r+0x34>
 8008cde:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008ce2:	d812      	bhi.n	8008d0a <_realloc_r+0x5a>
 8008ce4:	4621      	mov	r1, r4
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	f7ff ff6e 	bl	8008bc8 <_malloc_r>
 8008cec:	4605      	mov	r5, r0
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d0ed      	beq.n	8008cce <_realloc_r+0x1e>
 8008cf2:	42bc      	cmp	r4, r7
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	4631      	mov	r1, r6
 8008cf8:	bf28      	it	cs
 8008cfa:	463a      	movcs	r2, r7
 8008cfc:	f7ff fed0 	bl	8008aa0 <memcpy>
 8008d00:	4631      	mov	r1, r6
 8008d02:	4640      	mov	r0, r8
 8008d04:	f7ff fef4 	bl	8008af0 <_free_r>
 8008d08:	e7e1      	b.n	8008cce <_realloc_r+0x1e>
 8008d0a:	4635      	mov	r5, r6
 8008d0c:	e7df      	b.n	8008cce <_realloc_r+0x1e>
	...

08008d10 <_sbrk_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	; (8008d2c <_sbrk_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f8 fe3a 	bl	8001994 <_sbrk>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_sbrk_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_sbrk_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	24000308 	.word	0x24000308

08008d30 <__malloc_lock>:
 8008d30:	4801      	ldr	r0, [pc, #4]	; (8008d38 <__malloc_lock+0x8>)
 8008d32:	f000 b811 	b.w	8008d58 <__retarget_lock_acquire_recursive>
 8008d36:	bf00      	nop
 8008d38:	2400030c 	.word	0x2400030c

08008d3c <__malloc_unlock>:
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <__malloc_unlock+0x8>)
 8008d3e:	f000 b80c 	b.w	8008d5a <__retarget_lock_release_recursive>
 8008d42:	bf00      	nop
 8008d44:	2400030c 	.word	0x2400030c

08008d48 <_malloc_usable_size_r>:
 8008d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d4c:	1f18      	subs	r0, r3, #4
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	bfbc      	itt	lt
 8008d52:	580b      	ldrlt	r3, [r1, r0]
 8008d54:	18c0      	addlt	r0, r0, r3
 8008d56:	4770      	bx	lr

08008d58 <__retarget_lock_acquire_recursive>:
 8008d58:	4770      	bx	lr

08008d5a <__retarget_lock_release_recursive>:
 8008d5a:	4770      	bx	lr

08008d5c <_init>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	bf00      	nop
 8008d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d62:	bc08      	pop	{r3}
 8008d64:	469e      	mov	lr, r3
 8008d66:	4770      	bx	lr

08008d68 <_fini>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr
