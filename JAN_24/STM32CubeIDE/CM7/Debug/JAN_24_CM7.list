
JAN_24_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d828  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800dac8  0800dac8  0001dac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db48  0800db48  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db50  0800db50  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db50  0800db50  0001db50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db54  0800db54  0001db54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  24000000  0800db58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  24000078  0800dbd0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000460  0800dbd0  00020460  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f20c  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302c  00000000  00000000  0003f2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001778  00000000  00000000  000422e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001660  00000000  00000000  00043a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d8c1  00000000  00000000  000450b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f395  00000000  00000000  00082979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019e956  00000000  00000000  000a1d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00240664  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a44  00000000  00000000  002406b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000078 	.word	0x24000078
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dab0 	.word	0x0800dab0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400007c 	.word	0x2400007c
 80002dc:	0800dab0 	.word	0x0800dab0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000698:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
 800069c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800069e:	4bcd      	ldr	r3, [pc, #820]	; (80009d4 <main+0x340>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d11b      	bne.n	80006e2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006aa:	f3bf 8f4f 	dsb	sy
}
 80006ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006b0:	f3bf 8f6f 	isb	sy
}
 80006b4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006b6:	4bc7      	ldr	r3, [pc, #796]	; (80009d4 <main+0x340>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006be:	f3bf 8f4f 	dsb	sy
}
 80006c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006c4:	f3bf 8f6f 	isb	sy
}
 80006c8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006ca:	4bc2      	ldr	r3, [pc, #776]	; (80009d4 <main+0x340>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4ac1      	ldr	r2, [pc, #772]	; (80009d4 <main+0x340>)
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006d6:	f3bf 8f4f 	dsb	sy
}
 80006da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006dc:	f3bf 8f6f 	isb	sy
}
 80006e0:	e000      	b.n	80006e4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006e2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006e4:	4bbb      	ldr	r3, [pc, #748]	; (80009d4 <main+0x340>)
 80006e6:	695b      	ldr	r3, [r3, #20]
 80006e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d143      	bne.n	8000778 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006f0:	4bb8      	ldr	r3, [pc, #736]	; (80009d4 <main+0x340>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80006f8:	f3bf 8f4f 	dsb	sy
}
 80006fc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80006fe:	4bb5      	ldr	r3, [pc, #724]	; (80009d4 <main+0x340>)
 8000700:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000704:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000708:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800070c:	0b5b      	lsrs	r3, r3, #13
 800070e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000712:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000716:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 800071a:	08db      	lsrs	r3, r3, #3
 800071c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000720:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000724:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	f8d7 2400 	ldr.w	r2, [r7, #1024]	; 0x400
 8000734:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000736:	49a7      	ldr	r1, [pc, #668]	; (80009d4 <main+0x340>)
 8000738:	4313      	orrs	r3, r2
 800073a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073e:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 8000742:	1e5a      	subs	r2, r3, #1
 8000744:	f8c7 2400 	str.w	r2, [r7, #1024]	; 0x400
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1eb      	bne.n	8000724 <main+0x90>
    } while(sets-- != 0U);
 800074c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8000750:	1e5a      	subs	r2, r3, #1
 8000752:	f8c7 2404 	str.w	r2, [r7, #1028]	; 0x404
 8000756:	2b00      	cmp	r3, #0
 8000758:	d1dd      	bne.n	8000716 <main+0x82>
  __ASM volatile ("dsb 0xF":::"memory");
 800075a:	f3bf 8f4f 	dsb	sy
}
 800075e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000760:	4b9c      	ldr	r3, [pc, #624]	; (80009d4 <main+0x340>)
 8000762:	695b      	ldr	r3, [r3, #20]
 8000764:	4a9b      	ldr	r2, [pc, #620]	; (80009d4 <main+0x340>)
 8000766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800076a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800076c:	f3bf 8f4f 	dsb	sy
}
 8000770:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000772:	f3bf 8f6f 	isb	sy
}
 8000776:	e000      	b.n	800077a <main+0xe6>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000778:	bf00      	nop
  }*/
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f001 fd2d 	bl	80021d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 faef 	bl	8000d60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000782:	f000 fb71 	bl	8000e68 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000786:	4b94      	ldr	r3, [pc, #592]	; (80009d8 <main+0x344>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078c:	4a92      	ldr	r2, [pc, #584]	; (80009d8 <main+0x344>)
 800078e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000792:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000796:	4b90      	ldr	r3, [pc, #576]	; (80009d8 <main+0x344>)
 8000798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079c:	f003 7200 	and.w	r2, r3, #33554432	; 0x2000000
 80007a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80007a4:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80007ae:	f5a3 6383 	sub.w	r3, r3, #1048	; 0x418
 80007b2:	681b      	ldr	r3, [r3, #0]
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007b4:	f000 fec2 	bl	800153c <MX_GPIO_Init>
  MX_DMA_Init();
 80007b8:	f000 fea0 	bl	80014fc <MX_DMA_Init>
  MX_USART3_UART_Init();
 80007bc:	f000 fe52 	bl	8001464 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80007c0:	f000 fd82 	bl	80012c8 <MX_TIM2_Init>
  MX_TIM1_Init();
 80007c4:	f000 fcd4 	bl	8001170 <MX_TIM1_Init>
  MX_TIM4_Init();
 80007c8:	f000 fdca 	bl	8001360 <MX_TIM4_Init>
  MX_TIM16_Init();
 80007cc:	f000 fe22 	bl	8001414 <MX_TIM16_Init>
  MX_ADC1_Init();
 80007d0:	f000 fb7a 	bl	8000ec8 <MX_ADC1_Init>
  MX_SPI2_Init();
 80007d4:	f000 fc74 	bl	80010c0 <MX_SPI2_Init>
  MX_ADC3_Init();
 80007d8:	f000 fc10 	bl	8000ffc <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007dc:	487f      	ldr	r0, [pc, #508]	; (80009dc <main+0x348>)
 80007de:	f00a f897 	bl	800a910 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 80007e2:	487f      	ldr	r0, [pc, #508]	; (80009e0 <main+0x34c>)
 80007e4:	f00a f894 	bl	800a910 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80007e8:	2100      	movs	r1, #0
 80007ea:	487e      	ldr	r0, [pc, #504]	; (80009e4 <main+0x350>)
 80007ec:	f00a f98e 	bl	800ab0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80007f0:	2104      	movs	r1, #4
 80007f2:	487c      	ldr	r0, [pc, #496]	; (80009e4 <main+0x350>)
 80007f4:	f00a f98a 	bl	800ab0c <HAL_TIM_PWM_Start>



  TIM4->CCR1 = 5;
 80007f8:	4b7b      	ldr	r3, [pc, #492]	; (80009e8 <main+0x354>)
 80007fa:	2205      	movs	r2, #5
 80007fc:	635a      	str	r2, [r3, #52]	; 0x34
  TIM4->CCR2 = 5; // 5/10 50 percent duty cycle, becomes the clock for the H-chip
 80007fe:	4b7a      	ldr	r3, [pc, #488]	; (80009e8 <main+0x354>)
 8000800:	2205      	movs	r2, #5
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint16_t writeBuf1 = 0b0000100000000000; // LED
 8000804:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000808:	f8a7 33fe 	strh.w	r3, [r7, #1022]	; 0x3fe
  uint16_t writeBuf2 = 0b0000010000000000; // LED
 800080c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000810:	f8a7 33fc 	strh.w	r3, [r7, #1020]	; 0x3fc
  uint16_t writeBuf3 = 0b0000110000000000; // LED
 8000814:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000818:	f8a7 33fa 	strh.w	r3, [r7, #1018]	; 0x3fa
  uint16_t writeBuf4 = 0b0000001000000000; // LED
 800081c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000820:	f8a7 33f8 	strh.w	r3, [r7, #1016]	; 0x3f8
  uint16_t writeBuf5 = 0b0000101000000000; // LED
 8000824:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000828:	f8a7 33f6 	strh.w	r3, [r7, #1014]	; 0x3f6
  uint16_t writeBuf6 = 0b0000011000000000; // LED
 800082c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000830:	f8a7 33f4 	strh.w	r3, [r7, #1012]	; 0x3f4
  uint16_t ADCData[needed];
 8000834:	4b6d      	ldr	r3, [pc, #436]	; (80009ec <main+0x358>)
 8000836:	6819      	ldr	r1, [r3, #0]
 8000838:	1e4b      	subs	r3, r1, #1
 800083a:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 800083e:	460a      	mov	r2, r1
 8000840:	2300      	movs	r3, #0
 8000842:	4690      	mov	r8, r2
 8000844:	4699      	mov	r9, r3
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000852:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000856:	ea4f 1208 	mov.w	r2, r8, lsl #4
 800085a:	460a      	mov	r2, r1
 800085c:	2300      	movs	r3, #0
 800085e:	4614      	mov	r4, r2
 8000860:	461d      	mov	r5, r3
 8000862:	f04f 0200 	mov.w	r2, #0
 8000866:	f04f 0300 	mov.w	r3, #0
 800086a:	012b      	lsls	r3, r5, #4
 800086c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000870:	0122      	lsls	r2, r4, #4
 8000872:	460b      	mov	r3, r1
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	3307      	adds	r3, #7
 8000878:	08db      	lsrs	r3, r3, #3
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	ebad 0d03 	sub.w	sp, sp, r3
 8000880:	466b      	mov	r3, sp
 8000882:	3301      	adds	r3, #1
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
  char uart_buf[1000];
  int uart_buf_len;

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800088c:	2200      	movs	r2, #0
 800088e:	2110      	movs	r1, #16
 8000890:	4857      	ldr	r0, [pc, #348]	; (80009f0 <main+0x35c>)
 8000892:	f005 fcc1 	bl	8006218 <HAL_GPIO_WritePin>
  slowSPI = true;
 8000896:	4b57      	ldr	r3, [pc, #348]	; (80009f4 <main+0x360>)
 8000898:	2201      	movs	r2, #1
 800089a:	701a      	strb	r2, [r3, #0]
  MX_SPI2_Init();
 800089c:	f000 fc10 	bl	80010c0 <MX_SPI2_Init>
  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 80008a0:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 80008a4:	2364      	movs	r3, #100	; 0x64
 80008a6:	2201      	movs	r2, #1
 80008a8:	4853      	ldr	r0, [pc, #332]	; (80009f8 <main+0x364>)
 80008aa:	f009 fb65 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2110      	movs	r1, #16
 80008b2:	484f      	ldr	r0, [pc, #316]	; (80009f0 <main+0x35c>)
 80008b4:	f005 fcb0 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2110      	movs	r1, #16
 80008bc:	484c      	ldr	r0, [pc, #304]	; (80009f0 <main+0x35c>)
 80008be:	f005 fcab 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 80008c2:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	2201      	movs	r2, #1
 80008ca:	484b      	ldr	r0, [pc, #300]	; (80009f8 <main+0x364>)
 80008cc:	f009 fb54 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2110      	movs	r1, #16
 80008d4:	4846      	ldr	r0, [pc, #280]	; (80009f0 <main+0x35c>)
 80008d6:	f005 fc9f 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2110      	movs	r1, #16
 80008de:	4844      	ldr	r0, [pc, #272]	; (80009f0 <main+0x35c>)
 80008e0:	f005 fc9a 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 80008e4:	f207 31fa 	addw	r1, r7, #1018	; 0x3fa
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	2201      	movs	r2, #1
 80008ec:	4842      	ldr	r0, [pc, #264]	; (80009f8 <main+0x364>)
 80008ee:	f009 fb43 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2110      	movs	r1, #16
 80008f6:	483e      	ldr	r0, [pc, #248]	; (80009f0 <main+0x35c>)
 80008f8:	f005 fc8e 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2110      	movs	r1, #16
 8000900:	483b      	ldr	r0, [pc, #236]	; (80009f0 <main+0x35c>)
 8000902:	f005 fc89 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000906:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	2201      	movs	r2, #1
 800090e:	483a      	ldr	r0, [pc, #232]	; (80009f8 <main+0x364>)
 8000910:	f009 fb32 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000914:	2201      	movs	r2, #1
 8000916:	2110      	movs	r1, #16
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <main+0x35c>)
 800091a:	f005 fc7d 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2110      	movs	r1, #16
 8000922:	4833      	ldr	r0, [pc, #204]	; (80009f0 <main+0x35c>)
 8000924:	f005 fc78 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000928:	f207 31f6 	addw	r1, r7, #1014	; 0x3f6
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	2201      	movs	r2, #1
 8000930:	4831      	ldr	r0, [pc, #196]	; (80009f8 <main+0x364>)
 8000932:	f009 fb21 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2110      	movs	r1, #16
 800093a:	482d      	ldr	r0, [pc, #180]	; (80009f0 <main+0x35c>)
 800093c:	f005 fc6c 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000940:	2200      	movs	r2, #0
 8000942:	2110      	movs	r1, #16
 8000944:	482a      	ldr	r0, [pc, #168]	; (80009f0 <main+0x35c>)
 8000946:	f005 fc67 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 800094a:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	2201      	movs	r2, #1
 8000952:	4829      	ldr	r0, [pc, #164]	; (80009f8 <main+0x364>)
 8000954:	f009 fb10 	bl	8009f78 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2110      	movs	r1, #16
 800095c:	4824      	ldr	r0, [pc, #144]	; (80009f0 <main+0x35c>)
 800095e:	f005 fc5b 	bl	8006218 <HAL_GPIO_WritePin>
  HAL_ADC_Start_DMA(&hadc1, value, 3);
 8000962:	2203      	movs	r2, #3
 8000964:	4925      	ldr	r1, [pc, #148]	; (80009fc <main+0x368>)
 8000966:	4826      	ldr	r0, [pc, #152]	; (8000a00 <main+0x36c>)
 8000968:	f002 f898 	bl	8002a9c <HAL_ADC_Start_DMA>

  HAL_Delay(1000);
 800096c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000970:	f001 fcc4 	bl	80022fc <HAL_Delay>

  //char spi_read_buf[20];

  state = collect; //Initial state. Set to test to test out a block of code.
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <main+0x370>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  switch(state){
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <main+0x370>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b03      	cmp	r3, #3
 8000980:	d8fb      	bhi.n	800097a <main+0x2e6>
 8000982:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <main+0x2f4>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000999 	.word	0x08000999
 800098c:	08000b01 	.word	0x08000b01
 8000990:	08000c21 	.word	0x08000c21
 8000994:	0800097b 	.word	0x0800097b
	  	  case collect:

	  		    if (counter == 0) // set spec reset pin high to tell h-chip to send data
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <main+0x374>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d10b      	bne.n	80009b8 <main+0x324>
				{
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_SET); // Tells H-chip to send data
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a6:	4819      	ldr	r0, [pc, #100]	; (8000a0c <main+0x378>)
 80009a8:	f005 fc36 	bl	8006218 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(GPIOB, VNA_TRIG_Pin,GPIO_PIN_SET); // Tells VNA to collect data
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	480f      	ldr	r0, [pc, #60]	; (80009f0 <main+0x35c>)
 80009b2:	f005 fc31 	bl	8006218 <HAL_GPIO_WritePin>
 80009b6:	e098      	b.n	8000aea <main+0x456>
				}
	  		    else if (counter == 10) // set spec reset back low
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <main+0x374>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b0a      	cmp	r3, #10
 80009be:	d129      	bne.n	8000a14 <main+0x380>
				{
					HAL_GPIO_WritePin(GPIOD, SPEC_RST_Pin,GPIO_PIN_RESET); // Sends SPEC_RST back low
 80009c0:	2200      	movs	r2, #0
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <main+0x378>)
 80009c8:	f005 fc26 	bl	8006218 <HAL_GPIO_WritePin>
					optReady = true; // We found that it was more effective to hard code the timing of this rather than tying optReady to an external interrupt
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <main+0x37c>)
 80009ce:	2201      	movs	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	e08a      	b.n	8000aea <main+0x456>
 80009d4:	e000ed00 	.word	0xe000ed00
 80009d8:	58024400 	.word	0x58024400
 80009dc:	240002a8 	.word	0x240002a8
 80009e0:	24000340 	.word	0x24000340
 80009e4:	240002f4 	.word	0x240002f4
 80009e8:	40000800 	.word	0x40000800
 80009ec:	24000000 	.word	0x24000000
 80009f0:	58020400 	.word	0x58020400
 80009f4:	24000421 	.word	0x24000421
 80009f8:	240001d4 	.word	0x240001d4
 80009fc:	2400043c 	.word	0x2400043c
 8000a00:	24000094 	.word	0x24000094
 8000a04:	24000438 	.word	0x24000438
 8000a08:	24000428 	.word	0x24000428
 8000a0c:	58020c00 	.word	0x58020c00
 8000a10:	24000420 	.word	0x24000420
				}
				else if (optReady && (counter > counterPrevious) && (collected < needed) && (counter > 14)) // wait for AD_SP from the h-chip then uses spi2 to read from adc
 8000a14:	4bbd      	ldr	r3, [pc, #756]	; (8000d0c <main+0x678>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d049      	beq.n	8000ab0 <main+0x41c>
 8000a1c:	4bbc      	ldr	r3, [pc, #752]	; (8000d10 <main+0x67c>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4bbc      	ldr	r3, [pc, #752]	; (8000d14 <main+0x680>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	dd43      	ble.n	8000ab0 <main+0x41c>
 8000a28:	4bbb      	ldr	r3, [pc, #748]	; (8000d18 <main+0x684>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4bbb      	ldr	r3, [pc, #748]	; (8000d1c <main+0x688>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	da3d      	bge.n	8000ab0 <main+0x41c>
 8000a34:	4bb6      	ldr	r3, [pc, #728]	; (8000d10 <main+0x67c>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	2b0e      	cmp	r3, #14
 8000a3a:	dd39      	ble.n	8000ab0 <main+0x41c>
				{

					for(int i = 0; i < 12; i++) // A little jenky, delays so that timing is right for data collection from H-chip
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8000a42:	e009      	b.n	8000a58 <main+0x3c4>
					{
						HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);//This is the onboard red LED
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	48b5      	ldr	r0, [pc, #724]	; (8000d20 <main+0x68c>)
 8000a4a:	f005 fbfe 	bl	800624a <HAL_GPIO_TogglePin>
					for(int i = 0; i < 12; i++) // A little jenky, delays so that timing is right for data collection from H-chip
 8000a4e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000a52:	3301      	adds	r3, #1
 8000a54:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
 8000a58:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 8000a5c:	2b0b      	cmp	r3, #11
 8000a5e:	ddf1      	ble.n	8000a44 <main+0x3b0>
					}
					HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_SET); //CS for ADC, ADC collects at the moment this goes high
 8000a60:	2201      	movs	r2, #1
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	48af      	ldr	r0, [pc, #700]	; (8000d24 <main+0x690>)
 8000a66:	f005 fbd7 	bl	8006218 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_destroy_buf, 1, 100); //ADC needs this clock to convert analog value to Digital
 8000a6a:	2364      	movs	r3, #100	; 0x64
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	49ae      	ldr	r1, [pc, #696]	; (8000d28 <main+0x694>)
 8000a70:	48ae      	ldr	r0, [pc, #696]	; (8000d2c <main+0x698>)
 8000a72:	f009 fc7d 	bl	800a370 <HAL_SPI_Receive>
				    HAL_GPIO_WritePin(GPIOA,ADC_CS_Pin,GPIO_PIN_RESET); //Tells ADC we are done sampling
 8000a76:	2200      	movs	r2, #0
 8000a78:	2140      	movs	r1, #64	; 0x40
 8000a7a:	48aa      	ldr	r0, [pc, #680]	; (8000d24 <main+0x690>)
 8000a7c:	f005 fbcc 	bl	8006218 <HAL_GPIO_WritePin>
				    HAL_SPI_Receive(&hspi2, &spi_read_buf, 1, 100); // Read digital value from ADC
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	2201      	movs	r2, #1
 8000a84:	49aa      	ldr	r1, [pc, #680]	; (8000d30 <main+0x69c>)
 8000a86:	48a9      	ldr	r0, [pc, #676]	; (8000d2c <main+0x698>)
 8000a88:	f009 fc72 	bl	800a370 <HAL_SPI_Receive>
				    counterPrevious = counter; // So we only collect when the value of counter changes
 8000a8c:	4ba0      	ldr	r3, [pc, #640]	; (8000d10 <main+0x67c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4aa0      	ldr	r2, [pc, #640]	; (8000d14 <main+0x680>)
 8000a92:	6013      	str	r3, [r2, #0]
				    ADCData[collected] = spi_read_buf; // append to array
 8000a94:	4ba0      	ldr	r3, [pc, #640]	; (8000d18 <main+0x684>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4ba5      	ldr	r3, [pc, #660]	; (8000d30 <main+0x69c>)
 8000a9a:	8819      	ldrh	r1, [r3, #0]
 8000a9c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000aa0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				    collected++;
 8000aa4:	4b9c      	ldr	r3, [pc, #624]	; (8000d18 <main+0x684>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	4a9b      	ldr	r2, [pc, #620]	; (8000d18 <main+0x684>)
 8000aac:	6013      	str	r3, [r2, #0]
 8000aae:	e01c      	b.n	8000aea <main+0x456>

				}
				else if (collected == needed) // Stop collecting data, save data
 8000ab0:	4b99      	ldr	r3, [pc, #612]	; (8000d18 <main+0x684>)
 8000ab2:	681a      	ldr	r2, [r3, #0]
 8000ab4:	4b99      	ldr	r3, [pc, #612]	; (8000d1c <main+0x688>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	d106      	bne.n	8000aca <main+0x436>
					//uart_buf = "";
					//uart_buf_len = 0;
    				//uart_buf_len = sprintf(uart_buf,"\n");
//					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,uart_buf_len,100);
					//*****************************************************************************************************************************************************************************************
					collected = 0; // Resets Collected to 0 for next data collection cycle
 8000abc:	4b96      	ldr	r3, [pc, #600]	; (8000d18 <main+0x684>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
					optReady = false; // Prevents code from trying to collect from ADC until reset to true
 8000ac2:	4b92      	ldr	r3, [pc, #584]	; (8000d0c <main+0x678>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	701a      	strb	r2, [r3, #0]
 8000ac8:	e00f      	b.n	8000aea <main+0x456>
					//************this is where we save the data***********************************************************************************************************************************************;
				}
				else if (counter == 160) // reset after one data collection cycle
 8000aca:	4b91      	ldr	r3, [pc, #580]	; (8000d10 <main+0x67c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2ba0      	cmp	r3, #160	; 0xa0
 8000ad0:	d10b      	bne.n	8000aea <main+0x456>
				{
					counter = 0;
 8000ad2:	4b8f      	ldr	r3, [pc, #572]	; (8000d10 <main+0x67c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
					counterPrevious = 0;
 8000ad8:	4b8e      	ldr	r3, [pc, #568]	; (8000d14 <main+0x680>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
					state = wait;
 8000ade:	4b95      	ldr	r3, [pc, #596]	; (8000d34 <main+0x6a0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	701a      	strb	r2, [r3, #0]
					sendData = true;
 8000ae4:	4b94      	ldr	r3, [pc, #592]	; (8000d38 <main+0x6a4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
				}
	  		    if (counter == 20) //Sets VNA_TRIG_Pin low without interrupting timing of H-Chip collection
 8000aea:	4b89      	ldr	r3, [pc, #548]	; (8000d10 <main+0x67c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2b14      	cmp	r3, #20
 8000af0:	f040 8108 	bne.w	8000d04 <main+0x670>
	  		    {
	  		    	HAL_GPIO_WritePin(GPIOB,VNA_TRIG_Pin,GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4890      	ldr	r0, [pc, #576]	; (8000d3c <main+0x6a8>)
 8000afa:	f005 fb8d 	bl	8006218 <HAL_GPIO_WritePin>
	  		    }
				break;
 8000afe:	e101      	b.n	8000d04 <main+0x670>
	  	  case wait:
	  		  	// Just waits for 50Hz timer to switch state back to collect and checks LEDs once a second
	  		  	 if (sendData)
 8000b00:	4b8d      	ldr	r3, [pc, #564]	; (8000d38 <main+0x6a4>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f000 8083 	beq.w	8000c10 <main+0x57c>
				 {
					for (int i = 0; i < 130; i++) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8000b10:	e05a      	b.n	8000bc8 <main+0x534>
						char num[6]; // allocate space for a 5-digit number and a null terminator
						sprintf(num, "%hu", ADCData[i]); // convert uint16_t to string
 8000b12:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 8000b16:	f8d7 241c 	ldr.w	r2, [r7, #1052]	; 0x41c
 8000b1a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	463b      	mov	r3, r7
 8000b22:	4987      	ldr	r1, [pc, #540]	; (8000d40 <main+0x6ac>)
 8000b24:	4618      	mov	r0, r3
 8000b26:	f00c fb47 	bl	800d1b8 <siprintf>
						strcat(uart_buf, num); // concatenate string with current number
 8000b2a:	463a      	mov	r2, r7
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f00c fb60 	bl	800d1f8 <strcat>
						if (i < 129) { // add a comma after every element except the last one
 8000b38:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b3c:	2b80      	cmp	r3, #128	; 0x80
 8000b3e:	dc0e      	bgt.n	8000b5e <main+0x4ca>
							strcat(uart_buf, ",");
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fbcb 	bl	80002e0 <strlen>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	4413      	add	r3, r2
 8000b54:	497b      	ldr	r1, [pc, #492]	; (8000d44 <main+0x6b0>)
 8000b56:	461a      	mov	r2, r3
 8000b58:	460b      	mov	r3, r1
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	8013      	strh	r3, [r2, #0]
						}
						if (i == 129) { // add a comma after every element except the last one
 8000b5e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000b62:	2b81      	cmp	r3, #129	; 0x81
 8000b64:	d12b      	bne.n	8000bbe <main+0x52a>
							strcat(uart_buf, ",");
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff fbb8 	bl	80002e0 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	4413      	add	r3, r2
 8000b7a:	4972      	ldr	r1, [pc, #456]	; (8000d44 <main+0x6b0>)
 8000b7c:	461a      	mov	r2, r3
 8000b7e:	460b      	mov	r3, r1
 8000b80:	881b      	ldrh	r3, [r3, #0]
 8000b82:	8013      	strh	r3, [r2, #0]
							sprintf(num, "%hu", slowCounter);
 8000b84:	4b70      	ldr	r3, [pc, #448]	; (8000d48 <main+0x6b4>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	463b      	mov	r3, r7
 8000b8a:	496d      	ldr	r1, [pc, #436]	; (8000d40 <main+0x6ac>)
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00c fb13 	bl	800d1b8 <siprintf>
							strcat(uart_buf,num);
 8000b92:	463a      	mov	r2, r7
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4611      	mov	r1, r2
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f00c fb2c 	bl	800d1f8 <strcat>
							strcat(uart_buf, "\n");
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fb9b 	bl	80002e0 <strlen>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4413      	add	r3, r2
 8000bb4:	4965      	ldr	r1, [pc, #404]	; (8000d4c <main+0x6b8>)
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	460b      	mov	r3, r1
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	8013      	strh	r3, [r2, #0]
					for (int i = 0; i < 130; i++) {
 8000bbe:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8000bc8:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8000bcc:	2b81      	cmp	r3, #129	; 0x81
 8000bce:	dda0      	ble.n	8000b12 <main+0x47e>
						}
					}
					uart_buf_len = strlen(uart_buf);//sprintf(uart_buf, "%d", ADCData[127]);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fb83 	bl	80002e0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
					HAL_UART_Transmit(&huart3,(uint8_t *)uart_buf,strlen(uart_buf),10);
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4618      	mov	r0, r3
 8000be6:	f7ff fb7b 	bl	80002e0 <strlen>
 8000bea:	4603      	mov	r3, r0
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	230a      	movs	r3, #10
 8000bf4:	4856      	ldr	r0, [pc, #344]	; (8000d50 <main+0x6bc>)
 8000bf6:	f00b f999 	bl	800bf2c <HAL_UART_Transmit>
					memset(uart_buf,0,uart_buf_len);
 8000bfa:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	2100      	movs	r1, #0
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00c facf 	bl	800d1a8 <memset>
					sendData = false;
 8000c0a:	4b4b      	ldr	r3, [pc, #300]	; (8000d38 <main+0x6a4>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
				 }
	  		  	 if (slowCounter > 50)
 8000c10:	4b4d      	ldr	r3, [pc, #308]	; (8000d48 <main+0x6b4>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b32      	cmp	r3, #50	; 0x32
 8000c16:	dd77      	ble.n	8000d08 <main+0x674>
	  		  	{
	  		  		slowCounter = 0;
 8000c18:	4b4b      	ldr	r3, [pc, #300]	; (8000d48 <main+0x6b4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
	  		  		//state = checkLED;
	  		  		//seconds++;
	  		  	}
	  		  	break;
 8000c1e:	e073      	b.n	8000d08 <main+0x674>
//	  		    }
	  		  	break;

	  	  case test: //Never runs in normal code operation, just a handy place to test something out
	  		  //To use set state to test right above the while loop
		  HAL_TIM_Base_Stop_IT(&htim2);
 8000c20:	484c      	ldr	r0, [pc, #304]	; (8000d54 <main+0x6c0>)
 8000c22:	f009 feed 	bl	800aa00 <HAL_TIM_Base_Stop_IT>
		  HAL_TIM_Base_Stop_IT(&htim16);
 8000c26:	484c      	ldr	r0, [pc, #304]	; (8000d58 <main+0x6c4>)
 8000c28:	f009 feea 	bl	800aa00 <HAL_TIM_Base_Stop_IT>
//			HAL_Delay(50);
//	  		  HAL_TIM_Base_Stop_IT(&htim2);
//	  		  HAL_TIM_Base_Stop_IT(&htim16);
//
//
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2110      	movs	r1, #16
 8000c30:	4842      	ldr	r0, [pc, #264]	; (8000d3c <main+0x6a8>)
 8000c32:	f005 faf1 	bl	8006218 <HAL_GPIO_WritePin>
	  		  slowSPI = true;
 8000c36:	4b49      	ldr	r3, [pc, #292]	; (8000d5c <main+0x6c8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
	  		  MX_SPI2_Init();
 8000c3c:	f000 fa40 	bl	80010c0 <MX_SPI2_Init>
	  		  //hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf1,1,100);
 8000c40:	f207 31fe 	addw	r1, r7, #1022	; 0x3fe
 8000c44:	2364      	movs	r3, #100	; 0x64
 8000c46:	2201      	movs	r2, #1
 8000c48:	4838      	ldr	r0, [pc, #224]	; (8000d2c <main+0x698>)
 8000c4a:	f009 f995 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2110      	movs	r1, #16
 8000c52:	483a      	ldr	r0, [pc, #232]	; (8000d3c <main+0x6a8>)
 8000c54:	f005 fae0 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	4837      	ldr	r0, [pc, #220]	; (8000d3c <main+0x6a8>)
 8000c5e:	f005 fadb 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf2,1,100);
 8000c62:	f507 717f 	add.w	r1, r7, #1020	; 0x3fc
 8000c66:	2364      	movs	r3, #100	; 0x64
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4830      	ldr	r0, [pc, #192]	; (8000d2c <main+0x698>)
 8000c6c:	f009 f984 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	4831      	ldr	r0, [pc, #196]	; (8000d3c <main+0x6a8>)
 8000c76:	f005 facf 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2110      	movs	r1, #16
 8000c7e:	482f      	ldr	r0, [pc, #188]	; (8000d3c <main+0x6a8>)
 8000c80:	f005 faca 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf3,1,100);
 8000c84:	f207 31fa 	addw	r1, r7, #1018	; 0x3fa
 8000c88:	2364      	movs	r3, #100	; 0x64
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4827      	ldr	r0, [pc, #156]	; (8000d2c <main+0x698>)
 8000c8e:	f009 f973 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2110      	movs	r1, #16
 8000c96:	4829      	ldr	r0, [pc, #164]	; (8000d3c <main+0x6a8>)
 8000c98:	f005 fabe 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4826      	ldr	r0, [pc, #152]	; (8000d3c <main+0x6a8>)
 8000ca2:	f005 fab9 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf4,1,100);
 8000ca6:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 8000caa:	2364      	movs	r3, #100	; 0x64
 8000cac:	2201      	movs	r2, #1
 8000cae:	481f      	ldr	r0, [pc, #124]	; (8000d2c <main+0x698>)
 8000cb0:	f009 f962 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	4820      	ldr	r0, [pc, #128]	; (8000d3c <main+0x6a8>)
 8000cba:	f005 faad 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2110      	movs	r1, #16
 8000cc2:	481e      	ldr	r0, [pc, #120]	; (8000d3c <main+0x6a8>)
 8000cc4:	f005 faa8 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf5,1,100);
 8000cc8:	f207 31f6 	addw	r1, r7, #1014	; 0x3f6
 8000ccc:	2364      	movs	r3, #100	; 0x64
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4816      	ldr	r0, [pc, #88]	; (8000d2c <main+0x698>)
 8000cd2:	f009 f951 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2110      	movs	r1, #16
 8000cda:	4818      	ldr	r0, [pc, #96]	; (8000d3c <main+0x6a8>)
 8000cdc:	f005 fa9c 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2110      	movs	r1, #16
 8000ce4:	4815      	ldr	r0, [pc, #84]	; (8000d3c <main+0x6a8>)
 8000ce6:	f005 fa97 	bl	8006218 <HAL_GPIO_WritePin>
	  		  HAL_SPI_Transmit(&hspi2,(uint16_t *)&writeBuf6,1,100);
 8000cea:	f507 717d 	add.w	r1, r7, #1012	; 0x3f4
 8000cee:	2364      	movs	r3, #100	; 0x64
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <main+0x698>)
 8000cf4:	f009 f940 	bl	8009f78 <HAL_SPI_Transmit>
	  		  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2110      	movs	r1, #16
 8000cfc:	480f      	ldr	r0, [pc, #60]	; (8000d3c <main+0x6a8>)
 8000cfe:	f005 fa8b 	bl	8006218 <HAL_GPIO_WritePin>
//	  		  HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//	  		  HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//	  		  HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
//	  		  HAL_Delay(50);

	  		  break;
 8000d02:	e002      	b.n	8000d0a <main+0x676>
				break;
 8000d04:	bf00      	nop
 8000d06:	e638      	b.n	800097a <main+0x2e6>
	  		  	break;
 8000d08:	bf00      	nop
	  switch(state){
 8000d0a:	e636      	b.n	800097a <main+0x2e6>
 8000d0c:	24000420 	.word	0x24000420
 8000d10:	24000428 	.word	0x24000428
 8000d14:	24000434 	.word	0x24000434
 8000d18:	24000430 	.word	0x24000430
 8000d1c:	24000000 	.word	0x24000000
 8000d20:	58022000 	.word	0x58022000
 8000d24:	58020000 	.word	0x58020000
 8000d28:	24000426 	.word	0x24000426
 8000d2c:	240001d4 	.word	0x240001d4
 8000d30:	24000424 	.word	0x24000424
 8000d34:	24000438 	.word	0x24000438
 8000d38:	24000422 	.word	0x24000422
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	0800dac8 	.word	0x0800dac8
 8000d44:	0800dacc 	.word	0x0800dacc
 8000d48:	2400042c 	.word	0x2400042c
 8000d4c:	0800dad0 	.word	0x0800dad0
 8000d50:	2400038c 	.word	0x2400038c
 8000d54:	240002a8 	.word	0x240002a8
 8000d58:	24000340 	.word	0x24000340
 8000d5c:	24000421 	.word	0x24000421

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b09c      	sub	sp, #112	; 0x70
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6a:	224c      	movs	r2, #76	; 0x4c
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f00c fa1a 	bl	800d1a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	2220      	movs	r2, #32
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00c fa14 	bl	800d1a8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d80:	2004      	movs	r0, #4
 8000d82:	f005 fa97 	bl	80062b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d86:	2300      	movs	r3, #0
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	4b34      	ldr	r3, [pc, #208]	; (8000e5c <SystemClock_Config+0xfc>)
 8000d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8e:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <SystemClock_Config+0xfc>)
 8000d90:	f023 0301 	bic.w	r3, r3, #1
 8000d94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d96:	4b31      	ldr	r3, [pc, #196]	; (8000e5c <SystemClock_Config+0xfc>)
 8000d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	4b2f      	ldr	r3, [pc, #188]	; (8000e60 <SystemClock_Config+0x100>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a2e      	ldr	r2, [pc, #184]	; (8000e60 <SystemClock_Config+0x100>)
 8000da6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b2c      	ldr	r3, [pc, #176]	; (8000e60 <SystemClock_Config+0x100>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000db8:	bf00      	nop
 8000dba:	4b29      	ldr	r3, [pc, #164]	; (8000e60 <SystemClock_Config+0x100>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dc6:	d1f8      	bne.n	8000dba <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dc8:	4b26      	ldr	r3, [pc, #152]	; (8000e64 <SystemClock_Config+0x104>)
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f023 0303 	bic.w	r3, r3, #3
 8000dd0:	4a24      	ldr	r2, [pc, #144]	; (8000e64 <SystemClock_Config+0x104>)
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ddc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de2:	2302      	movs	r3, #2
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de6:	2302      	movs	r3, #2
 8000de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000dea:	2305      	movs	r3, #5
 8000dec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000dee:	23a0      	movs	r3, #160	; 0xa0
 8000df0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000df2:	2302      	movs	r3, #2
 8000df4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000df6:	2304      	movs	r3, #4
 8000df8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e06:	2300      	movs	r3, #0
 8000e08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f005 faaa 	bl	8006368 <HAL_RCC_OscConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000e1a:	f000 fd69 	bl	80018f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1e:	233f      	movs	r3, #63	; 0x3f
 8000e20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e22:	2303      	movs	r3, #3
 8000e24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e2e:	2340      	movs	r3, #64	; 0x40
 8000e30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e32:	2340      	movs	r3, #64	; 0x40
 8000e34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e3c:	2340      	movs	r3, #64	; 0x40
 8000e3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2102      	movs	r1, #2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f005 fee9 	bl	8006c1c <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e50:	f000 fd4e 	bl	80018f0 <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3770      	adds	r7, #112	; 0x70
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	58000400 	.word	0x58000400
 8000e60:	58024800 	.word	0x58024800
 8000e64:	58024400 	.word	0x58024400

08000e68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b0b0      	sub	sp, #192	; 0xc0
 8000e6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6e:	463b      	mov	r3, r7
 8000e70:	22c0      	movs	r2, #192	; 0xc0
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f00c f997 	bl	800d1a8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000e8a:	230c      	movs	r3, #12
 8000e8c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000e9a:	23c0      	movs	r3, #192	; 0xc0
 8000e9c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f006 fa40 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000eba:	f000 fd19 	bl	80018f0 <Error_Handler>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	37c0      	adds	r7, #192	; 0xc0
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
	...

08000ec8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ece:	f107 031c 	add.w	r3, r7, #28
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
 8000ee8:	615a      	str	r2, [r3, #20]
 8000eea:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000eec:	4b3f      	ldr	r3, [pc, #252]	; (8000fec <MX_ADC1_Init+0x124>)
 8000eee:	4a40      	ldr	r2, [pc, #256]	; (8000ff0 <MX_ADC1_Init+0x128>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000ef2:	4b3e      	ldr	r3, [pc, #248]	; (8000fec <MX_ADC1_Init+0x124>)
 8000ef4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000efa:	4b3c      	ldr	r3, [pc, #240]	; (8000fec <MX_ADC1_Init+0x124>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f00:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f06:	4b39      	ldr	r3, [pc, #228]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f08:	2204      	movs	r2, #4
 8000f0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f0c:	4b37      	ldr	r3, [pc, #220]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f12:	4b36      	ldr	r3, [pc, #216]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 3;
 8000f18:	4b34      	ldr	r3, [pc, #208]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f1e:	4b33      	ldr	r3, [pc, #204]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	771a      	strb	r2, [r3, #28]
  hadc1.Init.NbrOfDiscConversion = 3;
 8000f24:	4b31      	ldr	r3, [pc, #196]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f26:	2203      	movs	r2, #3
 8000f28:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f2a:	4b30      	ldr	r3, [pc, #192]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000f36:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000f42:	4b2a      	ldr	r3, [pc, #168]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f52:	f001 fc01 	bl	8002758 <HAL_ADC_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f5c:	f000 fcc8 	bl	80018f0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f64:	f107 031c 	add.w	r3, r7, #28
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4820      	ldr	r0, [pc, #128]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f6c:	f002 fc18 	bl	80037a0 <HAL_ADCEx_MultiModeConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000f76:	f000 fcbb 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f7e:	2306      	movs	r3, #6
 8000f80:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f8a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <MX_ADC1_Init+0x124>)
 8000f9e:	f001 fe5f 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fa8:	f000 fca2 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fac:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_ADC1_Init+0x12c>)
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000fb0:	230c      	movs	r3, #12
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_ADC1_Init+0x124>)
 8000fba:	f001 fe51 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000fc4:	f000 fc94 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fc8:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_ADC1_Init+0x130>)
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000fcc:	2312      	movs	r3, #18
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	; (8000fec <MX_ADC1_Init+0x124>)
 8000fd6:	f001 fe43 	bl	8002c60 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fe0:	f000 fc86 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24000094 	.word	0x24000094
 8000ff0:	40022000 	.word	0x40022000
 8000ff4:	04300002 	.word	0x04300002
 8000ff8:	2a000400 	.word	0x2a000400

08000ffc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001016:	4a28      	ldr	r2, [pc, #160]	; (80010b8 <MX_ADC3_Init+0xbc>)
 8001018:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001028:	2204      	movs	r2, #4
 800102a:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800102e:	2200      	movs	r2, #0
 8001030:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001034:	2200      	movs	r2, #0
 8001036:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800103a:	2201      	movs	r2, #1
 800103c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001040:	2200      	movs	r2, #0
 8001042:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001046:	2200      	movs	r2, #0
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800104c:	2200      	movs	r2, #0
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001052:	2200      	movs	r2, #0
 8001054:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001058:	2200      	movs	r2, #0
 800105a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800105e:	2200      	movs	r2, #0
 8001060:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001062:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC3_Init+0xb8>)
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800106c:	f001 fb74 	bl	8002758 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8001076:	f000 fc3b 	bl	80018f0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_ADC3_Init+0xc0>)
 800107c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800107e:	2306      	movs	r3, #6
 8001080:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001086:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800108a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108c:	2304      	movs	r3, #4
 800108e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	4619      	mov	r1, r3
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <MX_ADC3_Init+0xb8>)
 800109e:	f001 fddf 	bl	8002c60 <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80010a8:	f000 fc22 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	240000f8 	.word	0x240000f8
 80010b8:	58026000 	.word	0x58026000
 80010bc:	1d500080 	.word	0x1d500080

080010c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010c6:	4a29      	ldr	r2, [pc, #164]	; (800116c <MX_SPI2_Init+0xac>)
 80010c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80010d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80010d2:	4b25      	ldr	r3, [pc, #148]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010da:	220f      	movs	r2, #15
 80010dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010e4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80010ec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010f0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80010f4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <MX_SPI2_Init+0xa8>)
 80010f8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80010fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_SPI2_Init+0xa8>)
 800110c:	2200      	movs	r2, #0
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001112:	2200      	movs	r2, #0
 8001114:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001118:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001120:	2200      	movs	r2, #0
 8001122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001126:	2200      	movs	r2, #0
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_SPI2_Init+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001138:	2200      	movs	r2, #0
 800113a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_SPI2_Init+0xa8>)
 800113e:	2200      	movs	r2, #0
 8001140:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001142:	4b09      	ldr	r3, [pc, #36]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001144:	2200      	movs	r2, #0
 8001146:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <MX_SPI2_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800114e:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001154:	4804      	ldr	r0, [pc, #16]	; (8001168 <MX_SPI2_Init+0xa8>)
 8001156:	f008 fdeb 	bl	8009d30 <HAL_SPI_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_SPI2_Init+0xa4>
  {
    Error_Handler();
 8001160:	f000 fbc6 	bl	80018f0 <Error_Handler>
//  {
//	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
//  }
  /* USER CODE END SPI2_Init 2 */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	240001d4 	.word	0x240001d4
 800116c:	40003800 	.word	0x40003800

08001170 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09a      	sub	sp, #104	; 0x68
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001190:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
 80011a0:	615a      	str	r2, [r3, #20]
 80011a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	222c      	movs	r2, #44	; 0x2c
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f00b fffc 	bl	800d1a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <MX_TIM1_Init+0x154>)
 80011b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011b8:	22c8      	movs	r2, #200	; 0xc8
 80011ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b40      	ldr	r3, [pc, #256]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80011c2:	4b3f      	ldr	r3, [pc, #252]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011c4:	2232      	movs	r2, #50	; 0x32
 80011c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b3d      	ldr	r3, [pc, #244]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d4:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011d6:	2280      	movs	r2, #128	; 0x80
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011da:	4839      	ldr	r0, [pc, #228]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011dc:	f009 fb41 	bl	800a862 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80011e6:	f000 fb83 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011ee:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011f0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80011f4:	4619      	mov	r1, r3
 80011f6:	4832      	ldr	r0, [pc, #200]	; (80012c0 <MX_TIM1_Init+0x150>)
 80011f8:	f009 ffca 	bl	800b190 <HAL_TIM_ConfigClockSource>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001202:	f000 fb75 	bl	80018f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001206:	482e      	ldr	r0, [pc, #184]	; (80012c0 <MX_TIM1_Init+0x150>)
 8001208:	f009 fc29 	bl	800aa5e <HAL_TIM_PWM_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001212:	f000 fb6d 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800121a:	2300      	movs	r3, #0
 800121c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001222:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001226:	4619      	mov	r1, r3
 8001228:	4825      	ldr	r0, [pc, #148]	; (80012c0 <MX_TIM1_Init+0x150>)
 800122a:	f00a fd05 	bl	800bc38 <HAL_TIMEx_MasterConfigSynchronization>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001234:	f000 fb5c 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001238:	2360      	movs	r3, #96	; 0x60
 800123a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001240:	2300      	movs	r3, #0
 8001242:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001244:	2300      	movs	r3, #0
 8001246:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800124c:	2300      	movs	r3, #0
 800124e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001250:	2300      	movs	r3, #0
 8001252:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001254:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_TIM1_Init+0x150>)
 800125e:	f009 fe83 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001268:	f000 fb42 	bl	80018f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800128e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM1_Init+0x150>)
 80012a2:	f00a fd57 	bl	800bd54 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 80012ac:	f000 fb20 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b0:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM1_Init+0x150>)
 80012b2:	f000 fd6d 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 80012b6:	bf00      	nop
 80012b8:	3768      	adds	r7, #104	; 0x68
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2400025c 	.word	0x2400025c
 80012c4:	40010000 	.word	0x40010000

080012c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e6:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM2_Init+0x94>)
 80012e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	; (800135c <MX_TIM2_Init+0x94>)
 80012f0:	22c7      	movs	r2, #199	; 0xc7
 80012f2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM2_Init+0x94>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_TIM2_Init+0x94>)
 80012fc:	2209      	movs	r2, #9
 80012fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b16      	ldr	r3, [pc, #88]	; (800135c <MX_TIM2_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM2_Init+0x94>)
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130c:	4813      	ldr	r0, [pc, #76]	; (800135c <MX_TIM2_Init+0x94>)
 800130e:	f009 faa8 	bl	800a862 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001318:	f000 faea 	bl	80018f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0310 	add.w	r3, r7, #16
 8001326:	4619      	mov	r1, r3
 8001328:	480c      	ldr	r0, [pc, #48]	; (800135c <MX_TIM2_Init+0x94>)
 800132a:	f009 ff31 	bl	800b190 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 fadc 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_TIM2_Init+0x94>)
 8001346:	f00a fc77 	bl	800bc38 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001350:	f000 face 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3720      	adds	r7, #32
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	240002a8 	.word	0x240002a8

08001360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]
 8001380:	615a      	str	r2, [r3, #20]
 8001382:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <MX_TIM4_Init+0xac>)
 8001386:	4a22      	ldr	r2, [pc, #136]	; (8001410 <MX_TIM4_Init+0xb0>)
 8001388:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <MX_TIM4_Init+0xac>)
 800138c:	22c7      	movs	r2, #199	; 0xc7
 800138e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <MX_TIM4_Init+0xac>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10-1;
 8001396:	4b1d      	ldr	r3, [pc, #116]	; (800140c <MX_TIM4_Init+0xac>)
 8001398:	2209      	movs	r2, #9
 800139a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <MX_TIM4_Init+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <MX_TIM4_Init+0xac>)
 80013a4:	2280      	movs	r2, #128	; 0x80
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	; (800140c <MX_TIM4_Init+0xac>)
 80013aa:	f009 fb58 	bl	800aa5e <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 fa9c 	bl	80018f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	; (800140c <MX_TIM4_Init+0xac>)
 80013c8:	f00a fc36 	bl	800bc38 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80013d2:	f000 fa8d 	bl	80018f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80013de:	2302      	movs	r3, #2
 80013e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2200      	movs	r2, #0
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM4_Init+0xac>)
 80013ee:	f009 fdbb 	bl	800af68 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80013f8:	f000 fa7a 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM4_Init+0xac>)
 80013fe:	f000 fcc7 	bl	8001d90 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	; 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	240002f4 	.word	0x240002f4
 8001410:	40000800 	.word	0x40000800

08001414 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001418:	4b10      	ldr	r3, [pc, #64]	; (800145c <MX_TIM16_Init+0x48>)
 800141a:	4a11      	ldr	r2, [pc, #68]	; (8001460 <MX_TIM16_Init+0x4c>)
 800141c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2000-1;
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_TIM16_Init+0x48>)
 8001420:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001424:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <MX_TIM16_Init+0x48>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2000-1;
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <MX_TIM16_Init+0x48>)
 800142e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001432:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001434:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_TIM16_Init+0x48>)
 8001436:	2200      	movs	r2, #0
 8001438:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <MX_TIM16_Init+0x48>)
 800143c:	2200      	movs	r2, #0
 800143e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_TIM16_Init+0x48>)
 8001442:	2280      	movs	r2, #128	; 0x80
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001446:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_TIM16_Init+0x48>)
 8001448:	f009 fa0b 	bl	800a862 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001452:	f000 fa4d 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	24000340 	.word	0x24000340
 8001460:	40014400 	.word	0x40014400

08001464 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <MX_USART3_UART_Init+0x94>)
 800146c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 921600;
 800146e:	4b21      	ldr	r3, [pc, #132]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 8001470:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001474:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b1f      	ldr	r3, [pc, #124]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b16      	ldr	r3, [pc, #88]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a0:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a6:	4b13      	ldr	r3, [pc, #76]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014ac:	4811      	ldr	r0, [pc, #68]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014ae:	f00a fced 	bl	800be8c <HAL_UART_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014b8:	f000 fa1a 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	2100      	movs	r1, #0
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014c0:	f00b fd7d 	bl	800cfbe <HAL_UARTEx_SetTxFifoThreshold>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014ca:	f000 fa11 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ce:	2100      	movs	r1, #0
 80014d0:	4808      	ldr	r0, [pc, #32]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014d2:	f00b fdb2 	bl	800d03a <HAL_UARTEx_SetRxFifoThreshold>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014dc:	f000 fa08 	bl	80018f0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_USART3_UART_Init+0x90>)
 80014e2:	f00b fd33 	bl	800cf4c <HAL_UARTEx_DisableFifoMode>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014ec:	f000 fa00 	bl	80018f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	2400038c 	.word	0x2400038c
 80014f8:	40004800 	.word	0x40004800

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001502:	4b0d      	ldr	r3, [pc, #52]	; (8001538 <MX_DMA_Init+0x3c>)
 8001504:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <MX_DMA_Init+0x3c>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001512:	4b09      	ldr	r3, [pc, #36]	; (8001538 <MX_DMA_Init+0x3c>)
 8001514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001520:	2200      	movs	r2, #0
 8001522:	2100      	movs	r1, #0
 8001524:	200b      	movs	r0, #11
 8001526:	f002 faf4 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800152a:	200b      	movs	r0, #11
 800152c:	f002 fb0b 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 8001530:	bf00      	nop
 8001532:	3708      	adds	r7, #8
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58024400 	.word	0x58024400

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b090      	sub	sp, #64	; 0x40
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4bc0      	ldr	r3, [pc, #768]	; (8001854 <MX_GPIO_Init+0x318>)
 8001554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001558:	4abe      	ldr	r2, [pc, #760]	; (8001854 <MX_GPIO_Init+0x318>)
 800155a:	f043 0302 	orr.w	r3, r3, #2
 800155e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001562:	4bbc      	ldr	r3, [pc, #752]	; (8001854 <MX_GPIO_Init+0x318>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	62bb      	str	r3, [r7, #40]	; 0x28
 800156e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	4bb8      	ldr	r3, [pc, #736]	; (8001854 <MX_GPIO_Init+0x318>)
 8001572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001576:	4ab7      	ldr	r2, [pc, #732]	; (8001854 <MX_GPIO_Init+0x318>)
 8001578:	f043 0308 	orr.w	r3, r3, #8
 800157c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001580:	4bb4      	ldr	r3, [pc, #720]	; (8001854 <MX_GPIO_Init+0x318>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800158e:	4bb1      	ldr	r3, [pc, #708]	; (8001854 <MX_GPIO_Init+0x318>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001594:	4aaf      	ldr	r2, [pc, #700]	; (8001854 <MX_GPIO_Init+0x318>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159e:	4bad      	ldr	r3, [pc, #692]	; (8001854 <MX_GPIO_Init+0x318>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a8:	623b      	str	r3, [r7, #32]
 80015aa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ac:	4ba9      	ldr	r3, [pc, #676]	; (8001854 <MX_GPIO_Init+0x318>)
 80015ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b2:	4aa8      	ldr	r2, [pc, #672]	; (8001854 <MX_GPIO_Init+0x318>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015bc:	4ba5      	ldr	r3, [pc, #660]	; (8001854 <MX_GPIO_Init+0x318>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ca:	4ba2      	ldr	r3, [pc, #648]	; (8001854 <MX_GPIO_Init+0x318>)
 80015cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d0:	4aa0      	ldr	r2, [pc, #640]	; (8001854 <MX_GPIO_Init+0x318>)
 80015d2:	f043 0304 	orr.w	r3, r3, #4
 80015d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015da:	4b9e      	ldr	r3, [pc, #632]	; (8001854 <MX_GPIO_Init+0x318>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	f003 0304 	and.w	r3, r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	4b9a      	ldr	r3, [pc, #616]	; (8001854 <MX_GPIO_Init+0x318>)
 80015ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015ee:	4a99      	ldr	r2, [pc, #612]	; (8001854 <MX_GPIO_Init+0x318>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015f8:	4b96      	ldr	r3, [pc, #600]	; (8001854 <MX_GPIO_Init+0x318>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001606:	4b93      	ldr	r3, [pc, #588]	; (8001854 <MX_GPIO_Init+0x318>)
 8001608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160c:	4a91      	ldr	r2, [pc, #580]	; (8001854 <MX_GPIO_Init+0x318>)
 800160e:	f043 0310 	orr.w	r3, r3, #16
 8001612:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001616:	4b8f      	ldr	r3, [pc, #572]	; (8001854 <MX_GPIO_Init+0x318>)
 8001618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001624:	4b8b      	ldr	r3, [pc, #556]	; (8001854 <MX_GPIO_Init+0x318>)
 8001626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162a:	4a8a      	ldr	r2, [pc, #552]	; (8001854 <MX_GPIO_Init+0x318>)
 800162c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001634:	4b87      	ldr	r3, [pc, #540]	; (8001854 <MX_GPIO_Init+0x318>)
 8001636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001642:	4b84      	ldr	r3, [pc, #528]	; (8001854 <MX_GPIO_Init+0x318>)
 8001644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001648:	4a82      	ldr	r2, [pc, #520]	; (8001854 <MX_GPIO_Init+0x318>)
 800164a:	f043 0320 	orr.w	r3, r3, #32
 800164e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001652:	4b80      	ldr	r3, [pc, #512]	; (8001854 <MX_GPIO_Init+0x318>)
 8001654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	60bb      	str	r3, [r7, #8]
 800165e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001660:	4b7c      	ldr	r3, [pc, #496]	; (8001854 <MX_GPIO_Init+0x318>)
 8001662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001666:	4a7b      	ldr	r2, [pc, #492]	; (8001854 <MX_GPIO_Init+0x318>)
 8001668:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800166c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001670:	4b78      	ldr	r3, [pc, #480]	; (8001854 <MX_GPIO_Init+0x318>)
 8001672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800167a:	607b      	str	r3, [r7, #4]
 800167c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 800167e:	2200      	movs	r2, #0
 8001680:	f241 0190 	movw	r1, #4240	; 0x1090
 8001684:	4874      	ldr	r0, [pc, #464]	; (8001858 <MX_GPIO_Init+0x31c>)
 8001686:	f004 fdc7 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_15, GPIO_PIN_RESET);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001690:	4872      	ldr	r0, [pc, #456]	; (800185c <MX_GPIO_Init+0x320>)
 8001692:	f004 fdc1 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_13, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169c:	4870      	ldr	r0, [pc, #448]	; (8001860 <MX_GPIO_Init+0x324>)
 800169e:	f004 fdbb 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ADC_CS_GPIO_Port, ADC_CS_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	486f      	ldr	r0, [pc, #444]	; (8001864 <MX_GPIO_Init+0x328>)
 80016a8:	f004 fdb6 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPEC_RST_GPIO_Port, SPEC_RST_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b2:	486d      	ldr	r0, [pc, #436]	; (8001868 <MX_GPIO_Init+0x32c>)
 80016b4:	f004 fdb0 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80016b8:	2200      	movs	r2, #0
 80016ba:	2104      	movs	r1, #4
 80016bc:	486b      	ldr	r0, [pc, #428]	; (800186c <MX_GPIO_Init+0x330>)
 80016be:	f004 fdab 	bl	8006218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016c2:	2340      	movs	r3, #64	; 0x40
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d2:	4619      	mov	r1, r3
 80016d4:	4860      	ldr	r0, [pc, #384]	; (8001858 <MX_GPIO_Init+0x31c>)
 80016d6:	f004 fbef 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 VNA_TRIG_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|VNA_TRIG_Pin|LCD_RST_Pin;
 80016da:	f241 0390 	movw	r3, #4240	; 0x1090
 80016de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016f0:	4619      	mov	r1, r3
 80016f2:	4859      	ldr	r0, [pc, #356]	; (8001858 <MX_GPIO_Init+0x31c>)
 80016f4:	f004 fbe0 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800170a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800170e:	4619      	mov	r1, r3
 8001710:	4852      	ldr	r0, [pc, #328]	; (800185c <MX_GPIO_Init+0x320>)
 8001712:	f004 fbd1 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001716:	2380      	movs	r3, #128	; 0x80
 8001718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171a:	2300      	movs	r3, #0
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001726:	4619      	mov	r1, r3
 8001728:	484f      	ldr	r0, [pc, #316]	; (8001868 <MX_GPIO_Init+0x32c>)
 800172a:	f004 fbc5 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001734:	2300      	movs	r3, #0
 8001736:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001740:	4619      	mov	r1, r3
 8001742:	4848      	ldr	r0, [pc, #288]	; (8001864 <MX_GPIO_Init+0x328>)
 8001744:	f004 fbb8 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001748:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800174c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001756:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175a:	4619      	mov	r1, r3
 800175c:	4844      	ldr	r0, [pc, #272]	; (8001870 <MX_GPIO_Init+0x334>)
 800175e:	f004 fbab 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001768:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001772:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001776:	4619      	mov	r1, r3
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <MX_GPIO_Init+0x324>)
 800177a:	f004 fb9d 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800177e:	2340      	movs	r3, #64	; 0x40
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001782:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800178c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001790:	4619      	mov	r1, r3
 8001792:	4838      	ldr	r0, [pc, #224]	; (8001874 <MX_GPIO_Init+0x338>)
 8001794:	f004 fb90 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001798:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800179e:	2301      	movs	r3, #1
 80017a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	4619      	mov	r1, r3
 80017b0:	482b      	ldr	r0, [pc, #172]	; (8001860 <MX_GPIO_Init+0x324>)
 80017b2:	f004 fb81 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	482b      	ldr	r0, [pc, #172]	; (8001878 <MX_GPIO_Init+0x33c>)
 80017ca:	f004 fb75 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017ce:	2308      	movs	r3, #8
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017d2:	2303      	movs	r3, #3
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017de:	4619      	mov	r1, r3
 80017e0:	4823      	ldr	r0, [pc, #140]	; (8001870 <MX_GPIO_Init+0x334>)
 80017e2:	f004 fb69 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADC_CS_Pin */
  GPIO_InitStruct.Pin = ADC_CS_Pin;
 80017e6:	2340      	movs	r3, #64	; 0x40
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f2:	2300      	movs	r3, #0
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(ADC_CS_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017fa:	4619      	mov	r1, r3
 80017fc:	4819      	ldr	r0, [pc, #100]	; (8001864 <MX_GPIO_Init+0x328>)
 80017fe:	f004 fb5b 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPEC_RST_Pin */
  GPIO_InitStruct.Pin = SPEC_RST_Pin;
 8001802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001808:	2301      	movs	r3, #1
 800180a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800180c:	2302      	movs	r3, #2
 800180e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001810:	2300      	movs	r3, #0
 8001812:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(SPEC_RST_GPIO_Port, &GPIO_InitStruct);
 8001814:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001818:	4619      	mov	r1, r3
 800181a:	4813      	ldr	r0, [pc, #76]	; (8001868 <MX_GPIO_Init+0x32c>)
 800181c:	f004 fb4c 	bl	8005eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001820:	2304      	movs	r3, #4
 8001822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001834:	4619      	mov	r1, r3
 8001836:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_GPIO_Init+0x330>)
 8001838:	f004 fb3e 	bl	8005eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2017      	movs	r0, #23
 8001842:	f002 f966 	bl	8003b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001846:	2017      	movs	r0, #23
 8001848:	f002 f97d 	bl	8003b46 <HAL_NVIC_EnableIRQ>

}
 800184c:	bf00      	nop
 800184e:	3740      	adds	r7, #64	; 0x40
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	58024400 	.word	0x58024400
 8001858:	58020400 	.word	0x58020400
 800185c:	58021c00 	.word	0x58021c00
 8001860:	58022000 	.word	0x58022000
 8001864:	58020000 	.word	0x58020000
 8001868:	58020c00 	.word	0x58020c00
 800186c:	58022400 	.word	0x58022400
 8001870:	58020800 	.word	0x58020800
 8001874:	58021000 	.word	0x58021000
 8001878:	58022800 	.word	0x58022800

0800187c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	80fb      	strh	r3, [r7, #6]
	else if (GPIO_Pin == GPIO_PIN_8)
	{
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//optReady = true;
	}
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x48>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d105      	bne.n	80018b0 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
//		HAL_GPIO_TogglePin(GPIOA,ADC_CS_Pin);
//		HAL_SPI_Receive(&hspi2, (uint16_t *)spi_read_buf, 1, 100);
		//HAL_GPIO_TogglePin(GPIOI,GPIO_PIN_13);
		//counterPrevious = counter;
		counter++;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a0d      	ldr	r2, [pc, #52]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018ac:	6013      	str	r3, [r2, #0]
	{
		state = collect;
		counter = 0;
		slowCounter++;
	}
}
 80018ae:	e00e      	b.n	80018ce <HAL_TIM_PeriodElapsedCallback+0x3a>
	else if (htim == &htim16)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d10a      	bne.n	80018ce <HAL_TIM_PeriodElapsedCallback+0x3a>
		state = collect;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		counter = 0;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
		slowCounter++;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	3301      	adds	r3, #1
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80018cc:	6013      	str	r3, [r2, #0]
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	240002a8 	.word	0x240002a8
 80018e0:	24000428 	.word	0x24000428
 80018e4:	24000340 	.word	0x24000340
 80018e8:	24000438 	.word	0x24000438
 80018ec:	2400042c 	.word	0x2400042c

080018f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018f4:	b672      	cpsid	i
}
 80018f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f8:	e7fe      	b.n	80018f8 <Error_Handler+0x8>
	...

080018fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x30>)
 8001904:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_MspInit+0x30>)
 800190a:	f043 0302 	orr.w	r3, r3, #2
 800190e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <HAL_MspInit+0x30>)
 8001914:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	58024400 	.word	0x58024400

08001930 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b092      	sub	sp, #72	; 0x48
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(hadc->Instance==ADC1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6c      	ldr	r2, [pc, #432]	; (8001b00 <HAL_ADC_MspInit+0x1d0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	f040 808d 	bne.w	8001a6e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001954:	4b6b      	ldr	r3, [pc, #428]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800195a:	4a6a      	ldr	r2, [pc, #424]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 800195c:	f043 0320 	orr.w	r3, r3, #32
 8001960:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001964:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800196a:	f003 0320 	and.w	r3, r3, #32
 800196e:	623b      	str	r3, [r7, #32]
 8001970:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001972:	4b64      	ldr	r3, [pc, #400]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001978:	4a62      	ldr	r2, [pc, #392]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001982:	4b60      	ldr	r3, [pc, #384]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	f003 0304 	and.w	r3, r3, #4
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001990:	4b5c      	ldr	r3, [pc, #368]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001996:	4a5b      	ldr	r2, [pc, #364]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a0:	4b58      	ldr	r3, [pc, #352]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 80019a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	61bb      	str	r3, [r7, #24]
 80019ac:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ae:	2301      	movs	r3, #1
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019b2:	2303      	movs	r3, #3
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019be:	4619      	mov	r1, r3
 80019c0:	4851      	ldr	r0, [pc, #324]	; (8001b08 <HAL_ADC_MspInit+0x1d8>)
 80019c2:	f004 fa79 	bl	8005eb8 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80019c6:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80019ca:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80019ce:	f000 fcc5 	bl	800235c <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80019d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019d6:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80019da:	f000 fcbf 	bl	800235c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80019de:	4b4b      	ldr	r3, [pc, #300]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 80019e0:	4a4b      	ldr	r2, [pc, #300]	; (8001b10 <HAL_ADC_MspInit+0x1e0>)
 80019e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80019e4:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 80019e6:	2209      	movs	r2, #9
 80019e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019ea:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019f6:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 80019f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019fe:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a04:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a06:	4b41      	ldr	r3, [pc, #260]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a0e:	4b3f      	ldr	r3, [pc, #252]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a14:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a16:	4b3d      	ldr	r3, [pc, #244]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a1c:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a22:	483a      	ldr	r0, [pc, #232]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a24:	f002 f8aa 	bl	8003b7c <HAL_DMA_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8001a2e:	f7ff ff5f 	bl	80018f0 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8001a32:	2306      	movs	r3, #6
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62bb      	str	r3, [r7, #40]	; 0x28
    pSyncConfig.SyncEnable = DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    pSyncConfig.EventEnable = ENABLE;
 8001a40:	2301      	movs	r3, #1
 8001a42:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    pSyncConfig.RequestNumber = 1;
 8001a46:	2301      	movs	r3, #1
 8001a48:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_DMAEx_ConfigMuxSync(&hdma_adc1, &pSyncConfig) != HAL_OK)
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	482e      	ldr	r0, [pc, #184]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a52:	f004 f96b 	bl	8005d2c <HAL_DMAEx_ConfigMuxSync>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001a5c:	f7ff ff48 	bl	80018f0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a2a      	ldr	r2, [pc, #168]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a64:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a66:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <HAL_ADC_MspInit+0x1dc>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a6c:	e044      	b.n	8001af8 <HAL_ADC_MspInit+0x1c8>
  else if(hadc->Instance==ADC3)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a28      	ldr	r2, [pc, #160]	; (8001b14 <HAL_ADC_MspInit+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d13f      	bne.n	8001af8 <HAL_ADC_MspInit+0x1c8>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a78:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001a80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a92:	617b      	str	r3, [r7, #20]
 8001a94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a96:	4b1b      	ldr	r3, [pc, #108]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4a19      	ldr	r2, [pc, #100]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4b17      	ldr	r3, [pc, #92]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a12      	ldr	r2, [pc, #72]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_ADC_MspInit+0x1d4>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ad6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ae0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <HAL_ADC_MspInit+0x1e8>)
 8001ae8:	f004 f9e6 	bl	8005eb8 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8001aec:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001af0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001af4:	f000 fc32 	bl	800235c <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001af8:	bf00      	nop
 8001afa:	3748      	adds	r7, #72	; 0x48
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020800 	.word	0x58020800
 8001b0c:	2400015c 	.word	0x2400015c
 8001b10:	40020010 	.word	0x40020010
 8001b14:	58026000 	.word	0x58026000
 8001b18:	58021400 	.word	0x58021400

08001b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0bc      	sub	sp, #240	; 0xf0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	22c0      	movs	r2, #192	; 0xc0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00b fb33 	bl	800d1a8 <memset>
  if(hspi->Instance==SPI2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_SPI_MspInit+0x158>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	f040 808e 	bne.w	8001c6a <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001b4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b52:	f04f 0300 	mov.w	r3, #0
 8001b56:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4618      	mov	r0, r3
 8001b64:	f005 fbe6 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001b6e:	f7ff febf 	bl	80018f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b72:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001b74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b78:	4a3f      	ldr	r2, [pc, #252]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001b7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001b84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b90:	4b39      	ldr	r3, [pc, #228]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b96:	4a38      	ldr	r2, [pc, #224]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001bae:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb4:	4a30      	ldr	r2, [pc, #192]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bbe:	4b2e      	ldr	r3, [pc, #184]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bcc:	4b2a      	ldr	r3, [pc, #168]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd2:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bd4:	f043 0302 	orr.w	r3, r3, #2
 8001bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bdc:	4b26      	ldr	r3, [pc, #152]	; (8001c78 <HAL_SPI_MspInit+0x15c>)
 8001bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bea:	2308      	movs	r3, #8
 8001bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c02:	2305      	movs	r3, #5
 8001c04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	481b      	ldr	r0, [pc, #108]	; (8001c7c <HAL_SPI_MspInit+0x160>)
 8001c10:	f004 f952 	bl	8005eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c14:	2304      	movs	r3, #4
 8001c16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c2c:	2305      	movs	r3, #5
 8001c2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001c32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c36:	4619      	mov	r1, r3
 8001c38:	4811      	ldr	r0, [pc, #68]	; (8001c80 <HAL_SPI_MspInit+0x164>)
 8001c3a:	f004 f93d 	bl	8005eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c58:	2305      	movs	r3, #5
 8001c5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c62:	4619      	mov	r1, r3
 8001c64:	4807      	ldr	r0, [pc, #28]	; (8001c84 <HAL_SPI_MspInit+0x168>)
 8001c66:	f004 f927 	bl	8005eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c6a:	bf00      	nop
 8001c6c:	37f0      	adds	r7, #240	; 0xf0
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40003800 	.word	0x40003800
 8001c78:	58024400 	.word	0x58024400
 8001c7c:	58020c00 	.word	0x58020c00
 8001c80:	58022000 	.word	0x58022000
 8001c84:	58020400 	.word	0x58020400

08001c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_TIM_Base_MspInit+0xac>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10f      	bne.n	8001cba <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c9a:	4b27      	ldr	r3, [pc, #156]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ca0:	4a25      	ldr	r2, [pc, #148]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001caa:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb0:	f003 0301 	and.w	r3, r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cb8:	e038      	b.n	8001d2c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM2)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cc2:	d117      	bne.n	8001cf4 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	201c      	movs	r0, #28
 8001ce8:	f001 ff13 	bl	8003b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cec:	201c      	movs	r0, #28
 8001cee:	f001 ff2a 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8001cf2:	e01b      	b.n	8001d2c <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM16)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_TIM_Base_MspInit+0xb4>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d116      	bne.n	8001d2c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <HAL_TIM_Base_MspInit+0xb0>)
 8001d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2075      	movs	r0, #117	; 0x75
 8001d22:	f001 fef6 	bl	8003b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8001d26:	2075      	movs	r0, #117	; 0x75
 8001d28:	f001 ff0d 	bl	8003b46 <HAL_NVIC_EnableIRQ>
}
 8001d2c:	bf00      	nop
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40010000 	.word	0x40010000
 8001d38:	58024400 	.word	0x58024400
 8001d3c:	40014400 	.word	0x40014400

08001d40 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a0e      	ldr	r2, [pc, #56]	; (8001d88 <HAL_TIM_PWM_MspInit+0x48>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d116      	bne.n	8001d80 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d52:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_TIM_PWM_MspInit+0x4c>)
 8001d54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d58:	4a0c      	ldr	r2, [pc, #48]	; (8001d8c <HAL_TIM_PWM_MspInit+0x4c>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_TIM_PWM_MspInit+0x4c>)
 8001d64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	201e      	movs	r0, #30
 8001d76:	f001 fecc 	bl	8003b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f001 fee3 	bl	8003b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	58024400 	.word	0x58024400

08001d90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <HAL_TIM_MspPostInit+0xb8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d120      	bne.n	8001df4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001de2:	2301      	movs	r3, #1
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de6:	f107 0314 	add.w	r3, r7, #20
 8001dea:	4619      	mov	r1, r3
 8001dec:	4818      	ldr	r0, [pc, #96]	; (8001e50 <HAL_TIM_MspPostInit+0xc0>)
 8001dee:	f004 f863 	bl	8005eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001df2:	e024      	b.n	8001e3e <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM4)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a16      	ldr	r2, [pc, #88]	; (8001e54 <HAL_TIM_MspPostInit+0xc4>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d11f      	bne.n	8001e3e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e04:	4a11      	ldr	r2, [pc, #68]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <HAL_TIM_MspPostInit+0xbc>)
 8001e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e32:	f107 0314 	add.w	r3, r7, #20
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <HAL_TIM_MspPostInit+0xc8>)
 8001e3a:	f004 f83d 	bl	8005eb8 <HAL_GPIO_Init>
}
 8001e3e:	bf00      	nop
 8001e40:	3728      	adds	r7, #40	; 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58020000 	.word	0x58020000
 8001e54:	40000800 	.word	0x40000800
 8001e58:	58020c00 	.word	0x58020c00

08001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b0ba      	sub	sp, #232	; 0xe8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	22c0      	movs	r2, #192	; 0xc0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f00b f993 	bl	800d1a8 <memset>
  if(huart->Instance==USART3)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_UART_MspInit+0xc8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d146      	bne.n	8001f1a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e8c:	f04f 0202 	mov.w	r2, #2
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f005 fa46 	bl	8007334 <HAL_RCCEx_PeriphCLKConfig>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001eae:	f7ff fd1f 	bl	80018f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001eb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ec2:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001ec4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ec8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed0:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed6:	4a14      	ldr	r2, [pc, #80]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_UART_MspInit+0xcc>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	60bb      	str	r3, [r7, #8]
 8001eec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f12:	4619      	mov	r1, r3
 8001f14:	4805      	ldr	r0, [pc, #20]	; (8001f2c <HAL_UART_MspInit+0xd0>)
 8001f16:	f003 ffcf 	bl	8005eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f1a:	bf00      	nop
 8001f1c:	37e8      	adds	r7, #232	; 0xe8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40004800 	.word	0x40004800
 8001f28:	58024400 	.word	0x58024400
 8001f2c:	58020400 	.word	0x58020400

08001f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f34:	e7fe      	b.n	8001f34 <NMI_Handler+0x4>

08001f36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3a:	e7fe      	b.n	8001f3a <HardFault_Handler+0x4>

08001f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <MemManage_Handler+0x4>

08001f42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f42:	b480      	push	{r7}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <BusFault_Handler+0x4>

08001f48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <UsageFault_Handler+0x4>

08001f4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f7c:	f000 f99e 	bl	80022bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f88:	4802      	ldr	r0, [pc, #8]	; (8001f94 <DMA1_Stream0_IRQHandler+0x10>)
 8001f8a:	f002 fbbd 	bl	8004708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	2400015c 	.word	0x2400015c

08001f98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f9c:	2040      	movs	r0, #64	; 0x40
 8001f9e:	f004 f96e 	bl	800627e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001fa2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001fa6:	f004 f96a 	bl	800627e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
	...

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f008 feb7 	bl	800ad28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	240002a8 	.word	0x240002a8

08001fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <TIM4_IRQHandler+0x10>)
 8001fca:	f008 fead 	bl	800ad28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	240002f4 	.word	0x240002f4

08001fd8 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <TIM16_IRQHandler+0x10>)
 8001fde:	f008 fea3 	bl	800ad28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	24000340 	.word	0x24000340

08001fec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <_sbrk+0x5c>)
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <_sbrk+0x60>)
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <_sbrk+0x64>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d102      	bne.n	800200e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <_sbrk+0x64>)
 800200a:	4a12      	ldr	r2, [pc, #72]	; (8002054 <_sbrk+0x68>)
 800200c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <_sbrk+0x64>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	429a      	cmp	r2, r3
 800201a:	d207      	bcs.n	800202c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800201c:	f00b f89a 	bl	800d154 <__errno>
 8002020:	4603      	mov	r3, r0
 8002022:	220c      	movs	r2, #12
 8002024:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002026:	f04f 33ff 	mov.w	r3, #4294967295
 800202a:	e009      	b.n	8002040 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800202c:	4b08      	ldr	r3, [pc, #32]	; (8002050 <_sbrk+0x64>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002032:	4b07      	ldr	r3, [pc, #28]	; (8002050 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <_sbrk+0x64>)
 800203c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800203e:	68fb      	ldr	r3, [r7, #12]
}
 8002040:	4618      	mov	r0, r3
 8002042:	3718      	adds	r7, #24
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	24080000 	.word	0x24080000
 800204c:	00000400 	.word	0x00000400
 8002050:	24000448 	.word	0x24000448
 8002054:	24000460 	.word	0x24000460

08002058 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002058:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002090 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800205c:	f000 f826 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480c      	ldr	r0, [pc, #48]	; (8002094 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002062:	490d      	ldr	r1, [pc, #52]	; (8002098 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0a      	ldr	r2, [pc, #40]	; (80020a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002078:	4c0a      	ldr	r4, [pc, #40]	; (80020a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002086:	f00b f86b 	bl	800d160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208a:	f7fe fb03 	bl	8000694 <main>
  bx  lr
 800208e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002090:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002094:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002098:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 800209c:	0800db58 	.word	0x0800db58
  ldr r2, =_sbss
 80020a0:	24000078 	.word	0x24000078
  ldr r4, =_ebss
 80020a4:	24000460 	.word	0x24000460

080020a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a8:	e7fe      	b.n	80020a8 <ADC3_IRQHandler>
	...

080020ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020b0:	4b3d      	ldr	r3, [pc, #244]	; (80021a8 <SystemInit+0xfc>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a3c      	ldr	r2, [pc, #240]	; (80021a8 <SystemInit+0xfc>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80020c0:	4b39      	ldr	r3, [pc, #228]	; (80021a8 <SystemInit+0xfc>)
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	4a38      	ldr	r2, [pc, #224]	; (80021a8 <SystemInit+0xfc>)
 80020c6:	f043 0310 	orr.w	r3, r3, #16
 80020ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <SystemInit+0x100>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d807      	bhi.n	80020e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80020d8:	4b34      	ldr	r3, [pc, #208]	; (80021ac <SystemInit+0x100>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 030f 	bic.w	r3, r3, #15
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <SystemInit+0x100>)
 80020e2:	f043 0307 	orr.w	r3, r3, #7
 80020e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <SystemInit+0x104>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <SystemInit+0x104>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020f4:	4b2e      	ldr	r3, [pc, #184]	; (80021b0 <SystemInit+0x104>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80020fa:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <SystemInit+0x104>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	492c      	ldr	r1, [pc, #176]	; (80021b0 <SystemInit+0x104>)
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <SystemInit+0x108>)
 8002102:	4013      	ands	r3, r2
 8002104:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002106:	4b29      	ldr	r3, [pc, #164]	; (80021ac <SystemInit+0x100>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d007      	beq.n	8002122 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002112:	4b26      	ldr	r3, [pc, #152]	; (80021ac <SystemInit+0x100>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 030f 	bic.w	r3, r3, #15
 800211a:	4a24      	ldr	r2, [pc, #144]	; (80021ac <SystemInit+0x100>)
 800211c:	f043 0307 	orr.w	r3, r3, #7
 8002120:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002122:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <SystemInit+0x104>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <SystemInit+0x104>)
 800212a:	2200      	movs	r2, #0
 800212c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800212e:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <SystemInit+0x104>)
 8002130:	2200      	movs	r2, #0
 8002132:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002134:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <SystemInit+0x104>)
 8002136:	4a20      	ldr	r2, [pc, #128]	; (80021b8 <SystemInit+0x10c>)
 8002138:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <SystemInit+0x104>)
 800213c:	4a1f      	ldr	r2, [pc, #124]	; (80021bc <SystemInit+0x110>)
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <SystemInit+0x104>)
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <SystemInit+0x114>)
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <SystemInit+0x104>)
 8002148:	2200      	movs	r2, #0
 800214a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <SystemInit+0x104>)
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <SystemInit+0x114>)
 8002150:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <SystemInit+0x104>)
 8002154:	2200      	movs	r2, #0
 8002156:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <SystemInit+0x104>)
 800215a:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <SystemInit+0x114>)
 800215c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800215e:	4b14      	ldr	r3, [pc, #80]	; (80021b0 <SystemInit+0x104>)
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002164:	4b12      	ldr	r3, [pc, #72]	; (80021b0 <SystemInit+0x104>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <SystemInit+0x104>)
 800216a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <SystemInit+0x104>)
 8002172:	2200      	movs	r2, #0
 8002174:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8002176:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <SystemInit+0x118>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <SystemInit+0x118>)
 800217c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002180:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <SystemInit+0x11c>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <SystemInit+0x120>)
 8002188:	4013      	ands	r3, r2
 800218a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800218e:	d202      	bcs.n	8002196 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002190:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <SystemInit+0x124>)
 8002192:	2201      	movs	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002196:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <SystemInit+0x128>)
 8002198:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800219c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000ed00 	.word	0xe000ed00
 80021ac:	52002000 	.word	0x52002000
 80021b0:	58024400 	.word	0x58024400
 80021b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80021b8:	02020200 	.word	0x02020200
 80021bc:	01ff0000 	.word	0x01ff0000
 80021c0:	01010280 	.word	0x01010280
 80021c4:	580000c0 	.word	0x580000c0
 80021c8:	5c001000 	.word	0x5c001000
 80021cc:	ffff0000 	.word	0xffff0000
 80021d0:	51008108 	.word	0x51008108
 80021d4:	52004000 	.word	0x52004000

080021d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021de:	2003      	movs	r0, #3
 80021e0:	f001 fc8c 	bl	8003afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021e4:	f004 fed0 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_Init+0x68>)
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	0a1b      	lsrs	r3, r3, #8
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	4913      	ldr	r1, [pc, #76]	; (8002244 <HAL_Init+0x6c>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002200:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002202:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <HAL_Init+0x68>)
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <HAL_Init+0x6c>)
 800220c:	5cd3      	ldrb	r3, [r2, r3]
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	fa22 f303 	lsr.w	r3, r2, r3
 8002218:	4a0b      	ldr	r2, [pc, #44]	; (8002248 <HAL_Init+0x70>)
 800221a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800221c:	4a0b      	ldr	r2, [pc, #44]	; (800224c <HAL_Init+0x74>)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002222:	2000      	movs	r0, #0
 8002224:	f000 f814 	bl	8002250 <HAL_InitTick>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e002      	b.n	8002238 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002232:	f7ff fb63 	bl	80018fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	58024400 	.word	0x58024400
 8002244:	0800dad4 	.word	0x0800dad4
 8002248:	24000008 	.word	0x24000008
 800224c:	24000004 	.word	0x24000004

08002250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002258:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_InitTick+0x60>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e021      	b.n	80022a8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002264:	4b13      	ldr	r3, [pc, #76]	; (80022b4 <HAL_InitTick+0x64>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_InitTick+0x60>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4619      	mov	r1, r3
 800226e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002272:	fbb3 f3f1 	udiv	r3, r3, r1
 8002276:	fbb2 f3f3 	udiv	r3, r2, r3
 800227a:	4618      	mov	r0, r3
 800227c:	f001 fc71 	bl	8003b62 <HAL_SYSTICK_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e00e      	b.n	80022a8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b0f      	cmp	r3, #15
 800228e:	d80a      	bhi.n	80022a6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002290:	2200      	movs	r2, #0
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f001 fc3b 	bl	8003b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800229c:	4a06      	ldr	r2, [pc, #24]	; (80022b8 <HAL_InitTick+0x68>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	e000      	b.n	80022a8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	24000010 	.word	0x24000010
 80022b4:	24000004 	.word	0x24000004
 80022b8:	2400000c 	.word	0x2400000c

080022bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_IncTick+0x20>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_IncTick+0x24>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4413      	add	r3, r2
 80022cc:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <HAL_IncTick+0x24>)
 80022ce:	6013      	str	r3, [r2, #0]
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	24000010 	.word	0x24000010
 80022e0:	2400044c 	.word	0x2400044c

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2400044c 	.word	0x2400044c

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d005      	beq.n	8002322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b0a      	ldr	r3, [pc, #40]	; (8002340 <HAL_Delay+0x44>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	461a      	mov	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002322:	bf00      	nop
 8002324:	f7ff ffde 	bl	80022e4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	429a      	cmp	r2, r3
 8002332:	d8f7      	bhi.n	8002324 <HAL_Delay+0x28>
  {
  }
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	24000010 	.word	0x24000010

08002344 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_GetREVID+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	0c1b      	lsrs	r3, r3, #16
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	5c001000 	.word	0x5c001000

0800235c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	43db      	mvns	r3, r3
 800236e:	401a      	ands	r2, r3
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	604b      	str	r3, [r1, #4]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	58000400 	.word	0x58000400

08002388 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	431a      	orrs	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3360      	adds	r3, #96	; 0x60
 8002402:	461a      	mov	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	430b      	orrs	r3, r1
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002424:	bf00      	nop
 8002426:	371c      	adds	r7, #28
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 031f 	and.w	r3, r3, #31
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	fa01 f303 	lsl.w	r3, r1, r3
 8002450:	431a      	orrs	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	611a      	str	r2, [r3, #16]
}
 8002456:	bf00      	nop
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002462:	b480      	push	{r7}
 8002464:	b087      	sub	sp, #28
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3360      	adds	r3, #96	; 0x60
 8002472:	461a      	mov	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	431a      	orrs	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	601a      	str	r2, [r3, #0]
  }
}
 800248c:	bf00      	nop
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024be:	b480      	push	{r7}
 80024c0:	b087      	sub	sp, #28
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	3330      	adds	r3, #48	; 0x30
 80024ce:	461a      	mov	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 031f 	and.w	r3, r3, #31
 80024e8:	211f      	movs	r1, #31
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	401a      	ands	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	0e9b      	lsrs	r3, r3, #26
 80024f6:	f003 011f 	and.w	r1, r3, #31
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	431a      	orrs	r2, r3
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800250a:	bf00      	nop
 800250c:	371c      	adds	r7, #28
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f023 0203 	bic.w	r2, r3, #3
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	431a      	orrs	r2, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	60da      	str	r2, [r3, #12]
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3314      	adds	r3, #20
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	0d1b      	lsrs	r3, r3, #20
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2107      	movs	r1, #7
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	000fffff 	.word	0x000fffff

080025dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 031f 	and.w	r3, r3, #31
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689a      	ldr	r2, [r3, #8]
 8002604:	4b04      	ldr	r3, [pc, #16]	; (8002618 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002606:	4013      	ands	r3, r2
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6093      	str	r3, [r2, #8]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	5fffffc0 	.word	0x5fffffc0

0800261c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <LL_ADC_EnableInternalRegulator+0x24>)
 8002652:	4013      	ands	r3, r2
 8002654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	6fffffc0 	.word	0x6fffffc0

0800266c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <LL_ADC_Enable+0x24>)
 80026a2:	4013      	ands	r3, r2
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	7fffffc0 	.word	0x7fffffc0

080026bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <LL_ADC_IsEnabled+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_ADC_IsEnabled+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b05      	ldr	r3, [pc, #20]	; (8002708 <LL_ADC_REG_StartConversion+0x24>)
 80026f2:	4013      	ands	r3, r2
 80026f4:	f043 0204 	orr.w	r2, r3, #4
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	7fffffc0 	.word	0x7fffffc0

0800270c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d101      	bne.n	8002724 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002720:	2301      	movs	r3, #1
 8002722:	e000      	b.n	8002726 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0308 	and.w	r3, r3, #8
 8002742:	2b08      	cmp	r3, #8
 8002744:	d101      	bne.n	800274a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e18f      	b.n	8002a92 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff f8d5 	bl	8001930 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff3f 	bl	800261c <LL_ADC_IsDeepPowerDownEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff25 	bl	80025f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff5a 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d114      	bne.n	80027e8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff3e 	bl	8002644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c8:	4b87      	ldr	r3, [pc, #540]	; (80029e8 <HAL_ADC_Init+0x290>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	4a87      	ldr	r2, [pc, #540]	; (80029ec <HAL_ADC_Init+0x294>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	3301      	adds	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027da:	e002      	b.n	80027e2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f9      	bne.n	80027dc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff3d 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fc:	f043 0210 	orr.w	r2, r3, #16
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f043 0201 	orr.w	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff77 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 800281e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	f040 8129 	bne.w	8002a80 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8125 	bne.w	8002a80 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800283e:	f043 0202 	orr.w	r2, r3, #2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff36 	bl	80026bc <LL_ADC_IsEnabled>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d136      	bne.n	80028c4 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a65      	ldr	r2, [pc, #404]	; (80029f0 <HAL_ADC_Init+0x298>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d004      	beq.n	800286a <HAL_ADC_Init+0x112>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a63      	ldr	r2, [pc, #396]	; (80029f4 <HAL_ADC_Init+0x29c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d10e      	bne.n	8002888 <HAL_ADC_Init+0x130>
 800286a:	4861      	ldr	r0, [pc, #388]	; (80029f0 <HAL_ADC_Init+0x298>)
 800286c:	f7ff ff26 	bl	80026bc <LL_ADC_IsEnabled>
 8002870:	4604      	mov	r4, r0
 8002872:	4860      	ldr	r0, [pc, #384]	; (80029f4 <HAL_ADC_Init+0x29c>)
 8002874:	f7ff ff22 	bl	80026bc <LL_ADC_IsEnabled>
 8002878:	4603      	mov	r3, r0
 800287a:	4323      	orrs	r3, r4
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	e008      	b.n	800289a <HAL_ADC_Init+0x142>
 8002888:	485b      	ldr	r0, [pc, #364]	; (80029f8 <HAL_ADC_Init+0x2a0>)
 800288a:	f7ff ff17 	bl	80026bc <LL_ADC_IsEnabled>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf0c      	ite	eq
 8002894:	2301      	moveq	r3, #1
 8002896:	2300      	movne	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a53      	ldr	r2, [pc, #332]	; (80029f0 <HAL_ADC_Init+0x298>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_ADC_Init+0x15a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_ADC_Init+0x29c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_Init+0x15e>
 80028b2:	4a52      	ldr	r2, [pc, #328]	; (80029fc <HAL_ADC_Init+0x2a4>)
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_Init+0x160>
 80028b6:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_ADC_Init+0x2a8>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4619      	mov	r1, r3
 80028be:	4610      	mov	r0, r2
 80028c0:	f7ff fd62 	bl	8002388 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80028c4:	f7ff fd3e 	bl	8002344 <HAL_GetREVID>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d914      	bls.n	80028fc <HAL_ADC_Init+0x1a4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b10      	cmp	r3, #16
 80028d8:	d110      	bne.n	80028fc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	7d5b      	ldrb	r3, [r3, #21]
 80028de:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028e4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80028ea:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7f1b      	ldrb	r3, [r3, #28]
 80028f0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80028f2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028f4:	f043 030c 	orr.w	r3, r3, #12
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	e00d      	b.n	8002918 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	7d5b      	ldrb	r3, [r3, #21]
 8002900:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002906:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800290c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7f1b      	ldrb	r3, [r3, #28]
 8002912:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	7f1b      	ldrb	r3, [r3, #28]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d106      	bne.n	800292e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	3b01      	subs	r3, #1
 8002926:	045b      	lsls	r3, r3, #17
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4b2c      	ldr	r3, [pc, #176]	; (8002a04 <HAL_ADC_Init+0x2ac>)
 8002952:	4013      	ands	r3, r2
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6812      	ldr	r2, [r2, #0]
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	430b      	orrs	r3, r1
 800295c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fed2 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002968:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fedf 	bl	8002732 <LL_ADC_INJ_IsConversionOngoing>
 8002974:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d15f      	bne.n	8002a3c <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d15c      	bne.n	8002a3c <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	7d1b      	ldrb	r3, [r3, #20]
 8002986:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68da      	ldr	r2, [r3, #12]
 8002996:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <HAL_ADC_Init+0x2b0>)
 8002998:	4013      	ands	r3, r2
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	6812      	ldr	r2, [r2, #0]
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	430b      	orrs	r3, r1
 80029a2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d130      	bne.n	8002a10 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_ADC_Init+0x2b4>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80029c2:	3a01      	subs	r2, #1
 80029c4:	0411      	lsls	r1, r2, #16
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029ca:	4311      	orrs	r1, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d6:	430a      	orrs	r2, r1
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f042 0201 	orr.w	r2, r2, #1
 80029e2:	611a      	str	r2, [r3, #16]
 80029e4:	e01c      	b.n	8002a20 <HAL_ADC_Init+0x2c8>
 80029e6:	bf00      	nop
 80029e8:	24000004 	.word	0x24000004
 80029ec:	053e2d63 	.word	0x053e2d63
 80029f0:	40022000 	.word	0x40022000
 80029f4:	40022100 	.word	0x40022100
 80029f8:	58026000 	.word	0x58026000
 80029fc:	40022300 	.word	0x40022300
 8002a00:	58026300 	.word	0x58026300
 8002a04:	fff0c003 	.word	0xfff0c003
 8002a08:	ffffbffc 	.word	0xffffbffc
 8002a0c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f022 0201 	bic.w	r2, r2, #1
 8002a1e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	430a      	orrs	r2, r1
 8002a34:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 fd80 	bl	800353c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10c      	bne.n	8002a5e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f023 010f 	bic.w	r1, r3, #15
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	1e5a      	subs	r2, r3, #1
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5c:	e007      	b.n	8002a6e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 020f 	bic.w	r2, r2, #15
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a72:	f023 0303 	bic.w	r3, r3, #3
 8002a76:	f043 0201 	orr.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
 8002a7e:	e007      	b.n	8002a90 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd90      	pop	{r4, r7, pc}
 8002a9a:	bf00      	nop

08002a9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a55      	ldr	r2, [pc, #340]	; (8002c04 <HAL_ADC_Start_DMA+0x168>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d004      	beq.n	8002abc <HAL_ADC_Start_DMA+0x20>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a54      	ldr	r2, [pc, #336]	; (8002c08 <HAL_ADC_Start_DMA+0x16c>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_ADC_Start_DMA+0x24>
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_ADC_Start_DMA+0x170>)
 8002abe:	e000      	b.n	8002ac2 <HAL_ADC_Start_DMA+0x26>
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_ADC_Start_DMA+0x174>)
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fd8a 	bl	80025dc <LL_ADC_GetMultimode>
 8002ac8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fe1c 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f040 808c 	bne.w	8002bf4 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_Start_DMA+0x4e>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e087      	b.n	8002bfa <HAL_ADC_Start_DMA+0x15e>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d005      	beq.n	8002b04 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	2b05      	cmp	r3, #5
 8002afc:	d002      	beq.n	8002b04 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b09      	cmp	r3, #9
 8002b02:	d170      	bne.n	8002be6 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fbfb 	bl	8003300 <ADC_Enable>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d163      	bne.n	8002bdc <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b18:	4b3e      	ldr	r3, [pc, #248]	; (8002c14 <HAL_ADC_Start_DMA+0x178>)
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a37      	ldr	r2, [pc, #220]	; (8002c08 <HAL_ADC_Start_DMA+0x16c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d002      	beq.n	8002b34 <HAL_ADC_Start_DMA+0x98>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	e000      	b.n	8002b36 <HAL_ADC_Start_DMA+0x9a>
 8002b34:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_ADC_Start_DMA+0x168>)
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d002      	beq.n	8002b44 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d105      	bne.n	8002b50 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b48:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b60:	f023 0206 	bic.w	r2, r3, #6
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	659a      	str	r2, [r3, #88]	; 0x58
 8002b68:	e002      	b.n	8002b70 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <HAL_ADC_Start_DMA+0x17c>)
 8002b76:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7c:	4a27      	ldr	r2, [pc, #156]	; (8002c1c <HAL_ADC_Start_DMA+0x180>)
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	4a26      	ldr	r2, [pc, #152]	; (8002c20 <HAL_ADC_Start_DMA+0x184>)
 8002b86:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	221c      	movs	r2, #28
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0210 	orr.w	r2, r2, #16
 8002ba6:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fcaf 	bl	8002516 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3340      	adds	r3, #64	; 0x40
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f001 fb34 	bl	8004234 <HAL_DMA_Start_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fd85 	bl	80026e4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bda:	e00d      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002be4:	e008      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	58026300 	.word	0x58026300
 8002c14:	fffff0fe 	.word	0xfffff0fe
 8002c18:	08003415 	.word	0x08003415
 8002c1c:	080034ed 	.word	0x080034ed
 8002c20:	08003509 	.word	0x08003509

08002c24 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b0a1      	sub	sp, #132	; 0x84
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	4a9d      	ldr	r2, [pc, #628]	; (8002ef0 <HAL_ADC_ConfigChannel+0x290>)
 8002c7a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x2a>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e321      	b.n	80032ce <HAL_ADC_ConfigChannel+0x66e>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fd38 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f040 8306 	bne.w	80032b0 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d108      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x62>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	0e9b      	lsrs	r3, r3, #26
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	e016      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x90>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cd2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002cd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002cda:	2320      	movs	r3, #32
 8002cdc:	e003      	b.n	8002ce6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce0:	fab3 f383 	clz	r3, r3
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	f003 031f 	and.w	r3, r3, #31
 8002cea:	2201      	movs	r2, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	69d1      	ldr	r1, [r2, #28]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	f7ff fbd7 	bl	80024be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fcf9 	bl	800270c <LL_ADC_REG_IsConversionOngoing>
 8002d1a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fd06 	bl	8002732 <LL_ADC_INJ_IsConversionOngoing>
 8002d26:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f040 80b3 	bne.w	8002e96 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80af 	bne.w	8002e96 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6818      	ldr	r0, [r3, #0]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	461a      	mov	r2, r3
 8002d46:	f7ff fbf9 	bl	800253c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d4a:	4b6a      	ldr	r3, [pc, #424]	; (8002ef4 <HAL_ADC_ConfigChannel+0x294>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002d52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d56:	d10b      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x110>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	089b      	lsrs	r3, r3, #2
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	e01d      	b.n	8002dac <HAL_ADC_ConfigChannel+0x14c>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x136>
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695a      	ldr	r2, [r3, #20]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	e00a      	b.n	8002dac <HAL_ADC_ConfigChannel+0x14c>
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	089b      	lsrs	r3, r3, #2
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d027      	beq.n	8002e06 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	6919      	ldr	r1, [r3, #16]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc4:	f7ff fb14 	bl	80023f0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	6919      	ldr	r1, [r3, #16]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	7e5b      	ldrb	r3, [r3, #25]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d102      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x17e>
 8002dd8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ddc:	e000      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x180>
 8002dde:	2300      	movs	r3, #0
 8002de0:	461a      	mov	r2, r3
 8002de2:	f7ff fb3e 	bl	8002462 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6919      	ldr	r1, [r3, #16]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	7e1b      	ldrb	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d102      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x19c>
 8002df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002dfa:	e000      	b.n	8002dfe <HAL_ADC_ConfigChannel+0x19e>
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f7ff fb16 	bl	8002430 <LL_ADC_SetDataRightShift>
 8002e04:	e047      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	069b      	lsls	r3, r3, #26
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d107      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	069b      	lsls	r3, r3, #26
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d107      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e4c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e54:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	069b      	lsls	r3, r3, #26
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d107      	bne.n	8002e72 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e70:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e78:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	069b      	lsls	r3, r3, #26
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d107      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e94:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fc0e 	bl	80026bc <LL_ADC_IsEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f040 820d 	bne.w	80032c2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6818      	ldr	r0, [r3, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	6819      	ldr	r1, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f7ff fb6d 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a0c      	ldr	r2, [pc, #48]	; (8002ef0 <HAL_ADC_ConfigChannel+0x290>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 8133 	bne.w	800312c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d110      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x298>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 031f 	and.w	r3, r3, #31
 8002ee2:	2b09      	cmp	r3, #9
 8002ee4:	bf94      	ite	ls
 8002ee6:	2301      	movls	r3, #1
 8002ee8:	2300      	movhi	r3, #0
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	e01e      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x2cc>
 8002eee:	bf00      	nop
 8002ef0:	47ff0000 	.word	0x47ff0000
 8002ef4:	5c001000 	.word	0x5c001000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f00:	fa93 f3a3 	rbit	r3, r3
 8002f04:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8002f10:	2320      	movs	r3, #32
 8002f12:	e003      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002f14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2b09      	cmp	r3, #9
 8002f24:	bf94      	ite	ls
 8002f26:	2301      	movls	r3, #1
 8002f28:	2300      	movhi	r3, #0
 8002f2a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d079      	beq.n	8003024 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_ADC_ConfigChannel+0x2ec>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	069b      	lsls	r3, r3, #26
 8002f46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f4a:	e015      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x318>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f5c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	069b      	lsls	r3, r3, #26
 8002f74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d109      	bne.n	8002f98 <HAL_ADC_ConfigChannel+0x338>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	0e9b      	lsrs	r3, r3, #26
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f003 031f 	and.w	r3, r3, #31
 8002f90:	2101      	movs	r1, #1
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	e017      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x368>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	e003      	b.n	8002fbc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002fb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f003 031f 	and.w	r3, r3, #31
 8002fc2:	2101      	movs	r1, #1
 8002fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc8:	ea42 0103 	orr.w	r1, r2, r3
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x38e>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	0e9b      	lsrs	r3, r3, #26
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	051b      	lsls	r3, r3, #20
 8002fec:	e018      	b.n	8003020 <HAL_ADC_ConfigChannel+0x3c0>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ff6:	fa93 f3a3 	rbit	r3, r3
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8003006:	2320      	movs	r3, #32
 8003008:	e003      	b.n	8003012 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 800300a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800300c:	fab3 f383 	clz	r3, r3
 8003010:	b2db      	uxtb	r3, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003020:	430b      	orrs	r3, r1
 8003022:	e07e      	b.n	8003122 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800302c:	2b00      	cmp	r3, #0
 800302e:	d107      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x3e0>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	3301      	adds	r3, #1
 8003038:	069b      	lsls	r3, r3, #26
 800303a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800303e:	e015      	b.n	800306c <HAL_ADC_ConfigChannel+0x40c>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e003      	b.n	8003064 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	069b      	lsls	r3, r3, #26
 8003068:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003074:	2b00      	cmp	r3, #0
 8003076:	d109      	bne.n	800308c <HAL_ADC_ConfigChannel+0x42c>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	0e9b      	lsrs	r3, r3, #26
 800307e:	3301      	adds	r3, #1
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2101      	movs	r1, #1
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	e017      	b.n	80030bc <HAL_ADC_ConfigChannel+0x45c>
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	61bb      	str	r3, [r7, #24]
  return result;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800309e:	6a3b      	ldr	r3, [r7, #32]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 80030a4:	2320      	movs	r3, #32
 80030a6:	e003      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	fab3 f383 	clz	r3, r3
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	3301      	adds	r3, #1
 80030b2:	f003 031f 	and.w	r3, r3, #31
 80030b6:	2101      	movs	r1, #1
 80030b8:	fa01 f303 	lsl.w	r3, r1, r3
 80030bc:	ea42 0103 	orr.w	r1, r2, r3
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10d      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x488>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	0e9b      	lsrs	r3, r3, #26
 80030d2:	3301      	adds	r3, #1
 80030d4:	f003 021f 	and.w	r2, r3, #31
 80030d8:	4613      	mov	r3, r2
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	4413      	add	r3, r2
 80030de:	3b1e      	subs	r3, #30
 80030e0:	051b      	lsls	r3, r3, #20
 80030e2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030e6:	e01b      	b.n	8003120 <HAL_ADC_ConfigChannel+0x4c0>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	60fb      	str	r3, [r7, #12]
  return result;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f003 021f 	and.w	r2, r3, #31
 8003112:	4613      	mov	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	4413      	add	r3, r2
 8003118:	3b1e      	subs	r3, #30
 800311a:	051b      	lsls	r3, r3, #20
 800311c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003120:	430b      	orrs	r3, r1
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	6892      	ldr	r2, [r2, #8]
 8003126:	4619      	mov	r1, r3
 8003128:	f7ff fa08 	bl	800253c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f280 80c6 	bge.w	80032c2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a67      	ldr	r2, [pc, #412]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_ADC_ConfigChannel+0x4ea>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a65      	ldr	r2, [pc, #404]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_ADC_ConfigChannel+0x4ee>
 800314a:	4b65      	ldr	r3, [pc, #404]	; (80032e0 <HAL_ADC_ConfigChannel+0x680>)
 800314c:	e000      	b.n	8003150 <HAL_ADC_ConfigChannel+0x4f0>
 800314e:	4b65      	ldr	r3, [pc, #404]	; (80032e4 <HAL_ADC_ConfigChannel+0x684>)
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff f93f 	bl	80023d4 <LL_ADC_GetCommonPathInternalCh>
 8003156:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5e      	ldr	r2, [pc, #376]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_ADC_ConfigChannel+0x50c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5d      	ldr	r2, [pc, #372]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d10e      	bne.n	800318a <HAL_ADC_ConfigChannel+0x52a>
 800316c:	485a      	ldr	r0, [pc, #360]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 800316e:	f7ff faa5 	bl	80026bc <LL_ADC_IsEnabled>
 8003172:	4604      	mov	r4, r0
 8003174:	4859      	ldr	r0, [pc, #356]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 8003176:	f7ff faa1 	bl	80026bc <LL_ADC_IsEnabled>
 800317a:	4603      	mov	r3, r0
 800317c:	4323      	orrs	r3, r4
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	e008      	b.n	800319c <HAL_ADC_ConfigChannel+0x53c>
 800318a:	4857      	ldr	r0, [pc, #348]	; (80032e8 <HAL_ADC_ConfigChannel+0x688>)
 800318c:	f7ff fa96 	bl	80026bc <LL_ADC_IsEnabled>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	bf0c      	ite	eq
 8003196:	2301      	moveq	r3, #1
 8003198:	2300      	movne	r3, #0
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b00      	cmp	r3, #0
 800319e:	d07d      	beq.n	800329c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a51      	ldr	r2, [pc, #324]	; (80032ec <HAL_ADC_ConfigChannel+0x68c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d130      	bne.n	800320c <HAL_ADC_ConfigChannel+0x5ac>
 80031aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d12b      	bne.n	800320c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a4b      	ldr	r2, [pc, #300]	; (80032e8 <HAL_ADC_ConfigChannel+0x688>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f040 8081 	bne.w	80032c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a44      	ldr	r2, [pc, #272]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_ADC_ConfigChannel+0x574>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a43      	ldr	r2, [pc, #268]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x578>
 80031d4:	4a42      	ldr	r2, [pc, #264]	; (80032e0 <HAL_ADC_ConfigChannel+0x680>)
 80031d6:	e000      	b.n	80031da <HAL_ADC_ConfigChannel+0x57a>
 80031d8:	4a42      	ldr	r2, [pc, #264]	; (80032e4 <HAL_ADC_ConfigChannel+0x684>)
 80031da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031e0:	4619      	mov	r1, r3
 80031e2:	4610      	mov	r0, r2
 80031e4:	f7ff f8e3 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_ADC_ConfigChannel+0x690>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	099b      	lsrs	r3, r3, #6
 80031ee:	4a41      	ldr	r2, [pc, #260]	; (80032f4 <HAL_ADC_ConfigChannel+0x694>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031fc:	e002      	b.n	8003204 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3b01      	subs	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f9      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800320a:	e05a      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a39      	ldr	r2, [pc, #228]	; (80032f8 <HAL_ADC_ConfigChannel+0x698>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d11e      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x5f4>
 8003216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d119      	bne.n	8003254 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a30      	ldr	r2, [pc, #192]	; (80032e8 <HAL_ADC_ConfigChannel+0x688>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d14b      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a2a      	ldr	r2, [pc, #168]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_ADC_ConfigChannel+0x5de>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a28      	ldr	r2, [pc, #160]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x5e2>
 800323e:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_ADC_ConfigChannel+0x680>)
 8003240:	e000      	b.n	8003244 <HAL_ADC_ConfigChannel+0x5e4>
 8003242:	4a28      	ldr	r2, [pc, #160]	; (80032e4 <HAL_ADC_ConfigChannel+0x684>)
 8003244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800324a:	4619      	mov	r1, r3
 800324c:	4610      	mov	r0, r2
 800324e:	f7ff f8ae 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003252:	e036      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a28      	ldr	r2, [pc, #160]	; (80032fc <HAL_ADC_ConfigChannel+0x69c>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d131      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
 800325e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d12c      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_ADC_ConfigChannel+0x688>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d127      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a18      	ldr	r2, [pc, #96]	; (80032d8 <HAL_ADC_ConfigChannel+0x678>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d004      	beq.n	8003286 <HAL_ADC_ConfigChannel+0x626>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a16      	ldr	r2, [pc, #88]	; (80032dc <HAL_ADC_ConfigChannel+0x67c>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d101      	bne.n	800328a <HAL_ADC_ConfigChannel+0x62a>
 8003286:	4a16      	ldr	r2, [pc, #88]	; (80032e0 <HAL_ADC_ConfigChannel+0x680>)
 8003288:	e000      	b.n	800328c <HAL_ADC_ConfigChannel+0x62c>
 800328a:	4a16      	ldr	r2, [pc, #88]	; (80032e4 <HAL_ADC_ConfigChannel+0x684>)
 800328c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800328e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f7ff f88a 	bl	80023ae <LL_ADC_SetCommonPathInternalCh>
 800329a:	e012      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0220 	orr.w	r2, r3, #32
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80032ae:	e008      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032ca:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3784      	adds	r7, #132	; 0x84
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd90      	pop	{r4, r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40022000 	.word	0x40022000
 80032dc:	40022100 	.word	0x40022100
 80032e0:	40022300 	.word	0x40022300
 80032e4:	58026300 	.word	0x58026300
 80032e8:	58026000 	.word	0x58026000
 80032ec:	cb840000 	.word	0xcb840000
 80032f0:	24000004 	.word	0x24000004
 80032f4:	053e2d63 	.word	0x053e2d63
 80032f8:	c7520000 	.word	0xc7520000
 80032fc:	cfb80000 	.word	0xcfb80000

08003300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f9d5 	bl	80026bc <LL_ADC_IsEnabled>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d16e      	bne.n	80033f6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <ADC_Enable+0x100>)
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00d      	beq.n	8003342 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800332a:	f043 0210 	orr.w	r2, r3, #16
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e05a      	b.n	80033f8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f9a4 	bl	8002694 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800334c:	f7fe ffca 	bl	80022e4 <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <ADC_Enable+0x104>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d004      	beq.n	8003366 <ADC_Enable+0x66>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a29      	ldr	r2, [pc, #164]	; (8003408 <ADC_Enable+0x108>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d101      	bne.n	800336a <ADC_Enable+0x6a>
 8003366:	4b29      	ldr	r3, [pc, #164]	; (800340c <ADC_Enable+0x10c>)
 8003368:	e000      	b.n	800336c <ADC_Enable+0x6c>
 800336a:	4b29      	ldr	r3, [pc, #164]	; (8003410 <ADC_Enable+0x110>)
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff f935 	bl	80025dc <LL_ADC_GetMultimode>
 8003372:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a23      	ldr	r2, [pc, #140]	; (8003408 <ADC_Enable+0x108>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d002      	beq.n	8003384 <ADC_Enable+0x84>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	e000      	b.n	8003386 <ADC_Enable+0x86>
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <ADC_Enable+0x104>)
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6812      	ldr	r2, [r2, #0]
 800338a:	4293      	cmp	r3, r2
 800338c:	d02c      	beq.n	80033e8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d130      	bne.n	80033f6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003394:	e028      	b.n	80033e8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff f98e 	bl	80026bc <LL_ADC_IsEnabled>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff f972 	bl	8002694 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033b0:	f7fe ff98 	bl	80022e4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d914      	bls.n	80033e8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0301 	and.w	r3, r3, #1
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d00d      	beq.n	80033e8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d0:	f043 0210 	orr.w	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f043 0201 	orr.w	r2, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e007      	b.n	80033f8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d1cf      	bne.n	8003396 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	8000003f 	.word	0x8000003f
 8003404:	40022000 	.word	0x40022000
 8003408:	40022100 	.word	0x40022100
 800340c:	40022300 	.word	0x40022300
 8003410:	58026300 	.word	0x58026300

08003414 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003420:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003426:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800342a:	2b00      	cmp	r3, #0
 800342c:	d14b      	bne.n	80034c6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d021      	beq.n	800348c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff f823 	bl	8002498 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d032      	beq.n	80034be <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d12b      	bne.n	80034be <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d11f      	bne.n	80034be <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003482:	f043 0201 	orr.w	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	655a      	str	r2, [r3, #84]	; 0x54
 800348a:	e018      	b.n	80034be <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d111      	bne.n	80034be <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b6:	f043 0201 	orr.w	r2, r3, #1
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f7ff fbb0 	bl	8002c24 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80034c4:	e00e      	b.n	80034e4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ca:	f003 0310 	and.w	r3, r3, #16
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f7ff fbba 	bl	8002c4c <HAL_ADC_ErrorCallback>
}
 80034d8:	e004      	b.n	80034e4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff fb9c 	bl	8002c38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003500:	bf00      	nop
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f043 0204 	orr.w	r2, r3, #4
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff fb8c 	bl	8002c4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7a      	ldr	r2, [pc, #488]	; (8003734 <ADC_ConfigureBoostMode+0x1f8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d004      	beq.n	8003558 <ADC_ConfigureBoostMode+0x1c>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a79      	ldr	r2, [pc, #484]	; (8003738 <ADC_ConfigureBoostMode+0x1fc>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d109      	bne.n	800356c <ADC_ConfigureBoostMode+0x30>
 8003558:	4b78      	ldr	r3, [pc, #480]	; (800373c <ADC_ConfigureBoostMode+0x200>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003560:	2b00      	cmp	r3, #0
 8003562:	bf14      	ite	ne
 8003564:	2301      	movne	r3, #1
 8003566:	2300      	moveq	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	e008      	b.n	800357e <ADC_ConfigureBoostMode+0x42>
 800356c:	4b74      	ldr	r3, [pc, #464]	; (8003740 <ADC_ConfigureBoostMode+0x204>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d01c      	beq.n	80035bc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003582:	f003 fe7b 	bl	800727c <HAL_RCC_GetHCLKFreq>
 8003586:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003590:	d010      	beq.n	80035b4 <ADC_ConfigureBoostMode+0x78>
 8003592:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003596:	d873      	bhi.n	8003680 <ADC_ConfigureBoostMode+0x144>
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d002      	beq.n	80035a4 <ADC_ConfigureBoostMode+0x68>
 800359e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a2:	d16d      	bne.n	8003680 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b0:	60fb      	str	r3, [r7, #12]
        break;
 80035b2:	e068      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	60fb      	str	r3, [r7, #12]
        break;
 80035ba:	e064      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80035bc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80035c0:	f04f 0100 	mov.w	r1, #0
 80035c4:	f005 f8c0 	bl	8008748 <HAL_RCCEx_GetPeriphCLKFreq>
 80035c8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035d2:	d051      	beq.n	8003678 <ADC_ConfigureBoostMode+0x13c>
 80035d4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035d8:	d854      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 80035da:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035de:	d047      	beq.n	8003670 <ADC_ConfigureBoostMode+0x134>
 80035e0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035e4:	d84e      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 80035e6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035ea:	d03d      	beq.n	8003668 <ADC_ConfigureBoostMode+0x12c>
 80035ec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035f0:	d848      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 80035f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f6:	d033      	beq.n	8003660 <ADC_ConfigureBoostMode+0x124>
 80035f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035fc:	d842      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 80035fe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003602:	d029      	beq.n	8003658 <ADC_ConfigureBoostMode+0x11c>
 8003604:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003608:	d83c      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 800360a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800360e:	d01a      	beq.n	8003646 <ADC_ConfigureBoostMode+0x10a>
 8003610:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003614:	d836      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 8003616:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800361a:	d014      	beq.n	8003646 <ADC_ConfigureBoostMode+0x10a>
 800361c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003620:	d830      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 8003622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003626:	d00e      	beq.n	8003646 <ADC_ConfigureBoostMode+0x10a>
 8003628:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800362c:	d82a      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 800362e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003632:	d008      	beq.n	8003646 <ADC_ConfigureBoostMode+0x10a>
 8003634:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003638:	d824      	bhi.n	8003684 <ADC_ConfigureBoostMode+0x148>
 800363a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800363e:	d002      	beq.n	8003646 <ADC_ConfigureBoostMode+0x10a>
 8003640:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003644:	d11e      	bne.n	8003684 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	0c9b      	lsrs	r3, r3, #18
 800364c:	005b      	lsls	r3, r3, #1
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	60fb      	str	r3, [r7, #12]
        break;
 8003656:	e016      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
        break;
 800365e:	e012      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	60fb      	str	r3, [r7, #12]
        break;
 8003666:	e00e      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	60fb      	str	r3, [r7, #12]
        break;
 800366e:	e00a      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	09db      	lsrs	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
        break;
 8003676:	e006      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	0a1b      	lsrs	r3, r3, #8
 800367c:	60fb      	str	r3, [r7, #12]
        break;
 800367e:	e002      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003680:	bf00      	nop
 8003682:	e000      	b.n	8003686 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003684:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003686:	f7fe fe5d 	bl	8002344 <HAL_GetREVID>
 800368a:	4603      	mov	r3, r0
 800368c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003690:	4293      	cmp	r3, r2
 8003692:	d815      	bhi.n	80036c0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a2b      	ldr	r2, [pc, #172]	; (8003744 <ADC_ConfigureBoostMode+0x208>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d908      	bls.n	80036ae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80036ac:	e03e      	b.n	800372c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	e035      	b.n	800372c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	; (8003748 <ADC_ConfigureBoostMode+0x20c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d808      	bhi.n	80036e0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80036dc:	609a      	str	r2, [r3, #8]
}
 80036de:	e025      	b.n	800372c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a1a      	ldr	r2, [pc, #104]	; (800374c <ADC_ConfigureBoostMode+0x210>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d80a      	bhi.n	80036fe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fa:	609a      	str	r2, [r3, #8]
}
 80036fc:	e016      	b.n	800372c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a13      	ldr	r2, [pc, #76]	; (8003750 <ADC_ConfigureBoostMode+0x214>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d80a      	bhi.n	800371c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003718:	609a      	str	r2, [r3, #8]
}
 800371a:	e007      	b.n	800372c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800372a:	609a      	str	r2, [r3, #8]
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40022000 	.word	0x40022000
 8003738:	40022100 	.word	0x40022100
 800373c:	40022300 	.word	0x40022300
 8003740:	58026300 	.word	0x58026300
 8003744:	01312d00 	.word	0x01312d00
 8003748:	005f5e10 	.word	0x005f5e10
 800374c:	00bebc20 	.word	0x00bebc20
 8003750:	017d7840 	.word	0x017d7840

08003754 <LL_ADC_IsEnabled>:
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	d101      	bne.n	800376c <LL_ADC_IsEnabled+0x18>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <LL_ADC_IsEnabled+0x1a>
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <LL_ADC_REG_IsConversionOngoing>:
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 0304 	and.w	r3, r3, #4
 800378a:	2b04      	cmp	r3, #4
 800378c:	d101      	bne.n	8003792 <LL_ADC_REG_IsConversionOngoing+0x18>
 800378e:	2301      	movs	r3, #1
 8003790:	e000      	b.n	8003794 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037a0:	b590      	push	{r4, r7, lr}
 80037a2:	b09f      	sub	sp, #124	; 0x7c
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037aa:	2300      	movs	r3, #0
 80037ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e0be      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80037ca:	2300      	movs	r3, #0
 80037cc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5c      	ldr	r2, [pc, #368]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d102      	bne.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037d8:	4b5b      	ldr	r3, [pc, #364]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80037da:	60bb      	str	r3, [r7, #8]
 80037dc:	e001      	b.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10b      	bne.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	f043 0220 	orr.w	r2, r3, #32
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e09d      	b.n	800393c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ffb9 	bl	800377a <LL_ADC_REG_IsConversionOngoing>
 8003808:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7ff ffb3 	bl	800377a <LL_ADC_REG_IsConversionOngoing>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d17f      	bne.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800381a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800381c:	2b00      	cmp	r3, #0
 800381e:	d17c      	bne.n	800391a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a47      	ldr	r2, [pc, #284]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d004      	beq.n	8003834 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a46      	ldr	r2, [pc, #280]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d101      	bne.n	8003838 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003834:	4b45      	ldr	r3, [pc, #276]	; (800394c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003836:	e000      	b.n	800383a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003838:	4b45      	ldr	r3, [pc, #276]	; (8003950 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800383a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d039      	beq.n	80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	431a      	orrs	r2, r3
 8003852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003854:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3a      	ldr	r2, [pc, #232]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a38      	ldr	r2, [pc, #224]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d10e      	bne.n	8003888 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800386a:	4836      	ldr	r0, [pc, #216]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800386c:	f7ff ff72 	bl	8003754 <LL_ADC_IsEnabled>
 8003870:	4604      	mov	r4, r0
 8003872:	4835      	ldr	r0, [pc, #212]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003874:	f7ff ff6e 	bl	8003754 <LL_ADC_IsEnabled>
 8003878:	4603      	mov	r3, r0
 800387a:	4323      	orrs	r3, r4
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e008      	b.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003888:	4832      	ldr	r0, [pc, #200]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800388a:	f7ff ff63 	bl	8003754 <LL_ADC_IsEnabled>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d047      	beq.n	800392e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800389e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	6811      	ldr	r1, [r2, #0]
 80038aa:	683a      	ldr	r2, [r7, #0]
 80038ac:	6892      	ldr	r2, [r2, #8]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	431a      	orrs	r2, r3
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038b6:	e03a      	b.n	800392e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80038b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10e      	bne.n	80038f6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80038d8:	481a      	ldr	r0, [pc, #104]	; (8003944 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80038da:	f7ff ff3b 	bl	8003754 <LL_ADC_IsEnabled>
 80038de:	4604      	mov	r4, r0
 80038e0:	4819      	ldr	r0, [pc, #100]	; (8003948 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80038e2:	f7ff ff37 	bl	8003754 <LL_ADC_IsEnabled>
 80038e6:	4603      	mov	r3, r0
 80038e8:	4323      	orrs	r3, r4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	e008      	b.n	8003908 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80038f6:	4817      	ldr	r0, [pc, #92]	; (8003954 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80038f8:	f7ff ff2c 	bl	8003754 <LL_ADC_IsEnabled>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	689a      	ldr	r2, [r3, #8]
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003912:	4013      	ands	r3, r2
 8003914:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003916:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003918:	e009      	b.n	800392e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800392c:	e000      	b.n	8003930 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800392e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003938:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800393c:	4618      	mov	r0, r3
 800393e:	377c      	adds	r7, #124	; 0x7c
 8003940:	46bd      	mov	sp, r7
 8003942:	bd90      	pop	{r4, r7, pc}
 8003944:	40022000 	.word	0x40022000
 8003948:	40022100 	.word	0x40022100
 800394c:	40022300 	.word	0x40022300
 8003950:	58026300 	.word	0x58026300
 8003954:	58026000 	.word	0x58026000
 8003958:	fffff0e0 	.word	0xfffff0e0

0800395c <__NVIC_SetPriorityGrouping>:
{
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <__NVIC_SetPriorityGrouping+0x40>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003972:	68ba      	ldr	r2, [r7, #8]
 8003974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003978:	4013      	ands	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	4313      	orrs	r3, r2
 8003988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800398a:	4a04      	ldr	r2, [pc, #16]	; (800399c <__NVIC_SetPriorityGrouping+0x40>)
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	60d3      	str	r3, [r2, #12]
}
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00
 80039a0:	05fa0000 	.word	0x05fa0000

080039a4 <__NVIC_GetPriorityGrouping>:
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039a8:	4b04      	ldr	r3, [pc, #16]	; (80039bc <__NVIC_GetPriorityGrouping+0x18>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	0a1b      	lsrs	r3, r3, #8
 80039ae:	f003 0307 	and.w	r3, r3, #7
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00

080039c0 <__NVIC_EnableIRQ>:
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80039ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	db0b      	blt.n	80039ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	4907      	ldr	r1, [pc, #28]	; (80039f8 <__NVIC_EnableIRQ+0x38>)
 80039da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2001      	movs	r0, #1
 80039e2:	fa00 f202 	lsl.w	r2, r0, r2
 80039e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	e000e100 	.word	0xe000e100

080039fc <__NVIC_SetPriority>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	6039      	str	r1, [r7, #0]
 8003a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	db0a      	blt.n	8003a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	490c      	ldr	r1, [pc, #48]	; (8003a48 <__NVIC_SetPriority+0x4c>)
 8003a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a1a:	0112      	lsls	r2, r2, #4
 8003a1c:	b2d2      	uxtb	r2, r2
 8003a1e:	440b      	add	r3, r1
 8003a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a24:	e00a      	b.n	8003a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	4908      	ldr	r1, [pc, #32]	; (8003a4c <__NVIC_SetPriority+0x50>)
 8003a2c:	88fb      	ldrh	r3, [r7, #6]
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	3b04      	subs	r3, #4
 8003a34:	0112      	lsls	r2, r2, #4
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	440b      	add	r3, r1
 8003a3a:	761a      	strb	r2, [r3, #24]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000e100 	.word	0xe000e100
 8003a4c:	e000ed00 	.word	0xe000ed00

08003a50 <NVIC_EncodePriority>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b089      	sub	sp, #36	; 0x24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f1c3 0307 	rsb	r3, r3, #7
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	bf28      	it	cs
 8003a6e:	2304      	movcs	r3, #4
 8003a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3304      	adds	r3, #4
 8003a76:	2b06      	cmp	r3, #6
 8003a78:	d902      	bls.n	8003a80 <NVIC_EncodePriority+0x30>
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	3b03      	subs	r3, #3
 8003a7e:	e000      	b.n	8003a82 <NVIC_EncodePriority+0x32>
 8003a80:	2300      	movs	r3, #0
 8003a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	401a      	ands	r2, r3
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a98:	f04f 31ff 	mov.w	r1, #4294967295
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa2:	43d9      	mvns	r1, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003aa8:	4313      	orrs	r3, r2
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3724      	adds	r7, #36	; 0x24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ac8:	d301      	bcc.n	8003ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aca:	2301      	movs	r3, #1
 8003acc:	e00f      	b.n	8003aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <SysTick_Config+0x40>)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ad6:	210f      	movs	r1, #15
 8003ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8003adc:	f7ff ff8e 	bl	80039fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ae0:	4b05      	ldr	r3, [pc, #20]	; (8003af8 <SysTick_Config+0x40>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ae6:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <SysTick_Config+0x40>)
 8003ae8:	2207      	movs	r2, #7
 8003aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	e000e010 	.word	0xe000e010

08003afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7ff ff29 	bl	800395c <__NVIC_SetPriorityGrouping>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b086      	sub	sp, #24
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	4603      	mov	r3, r0
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
 8003b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003b20:	f7ff ff40 	bl	80039a4 <__NVIC_GetPriorityGrouping>
 8003b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	6978      	ldr	r0, [r7, #20]
 8003b2c:	f7ff ff90 	bl	8003a50 <NVIC_EncodePriority>
 8003b30:	4602      	mov	r2, r0
 8003b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b36:	4611      	mov	r1, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff ff5f 	bl	80039fc <__NVIC_SetPriority>
}
 8003b3e:	bf00      	nop
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b082      	sub	sp, #8
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff ff33 	bl	80039c0 <__NVIC_EnableIRQ>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b082      	sub	sp, #8
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f7ff ffa4 	bl	8003ab8 <SysTick_Config>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003b84:	f7fe fbae 	bl	80022e4 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e316      	b.n	80041c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a66      	ldr	r2, [pc, #408]	; (8003d34 <HAL_DMA_Init+0x1b8>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d04a      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_DMA_Init+0x1bc>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d045      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a63      	ldr	r2, [pc, #396]	; (8003d3c <HAL_DMA_Init+0x1c0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d040      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a62      	ldr	r2, [pc, #392]	; (8003d40 <HAL_DMA_Init+0x1c4>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d03b      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a60      	ldr	r2, [pc, #384]	; (8003d44 <HAL_DMA_Init+0x1c8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d036      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <HAL_DMA_Init+0x1cc>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a5d      	ldr	r2, [pc, #372]	; (8003d4c <HAL_DMA_Init+0x1d0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d02c      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a5c      	ldr	r2, [pc, #368]	; (8003d50 <HAL_DMA_Init+0x1d4>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d027      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a5a      	ldr	r2, [pc, #360]	; (8003d54 <HAL_DMA_Init+0x1d8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d022      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a59      	ldr	r2, [pc, #356]	; (8003d58 <HAL_DMA_Init+0x1dc>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d01d      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_DMA_Init+0x1e0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d018      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a56      	ldr	r2, [pc, #344]	; (8003d60 <HAL_DMA_Init+0x1e4>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d013      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a54      	ldr	r2, [pc, #336]	; (8003d64 <HAL_DMA_Init+0x1e8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d00e      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a53      	ldr	r2, [pc, #332]	; (8003d68 <HAL_DMA_Init+0x1ec>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d009      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a51      	ldr	r2, [pc, #324]	; (8003d6c <HAL_DMA_Init+0x1f0>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d004      	beq.n	8003c34 <HAL_DMA_Init+0xb8>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a50      	ldr	r2, [pc, #320]	; (8003d70 <HAL_DMA_Init+0x1f4>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d101      	bne.n	8003c38 <HAL_DMA_Init+0xbc>
 8003c34:	2301      	movs	r3, #1
 8003c36:	e000      	b.n	8003c3a <HAL_DMA_Init+0xbe>
 8003c38:	2300      	movs	r3, #0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 813b 	beq.w	8003eb6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a37      	ldr	r2, [pc, #220]	; (8003d34 <HAL_DMA_Init+0x1b8>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d04a      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a36      	ldr	r2, [pc, #216]	; (8003d38 <HAL_DMA_Init+0x1bc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d045      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a34      	ldr	r2, [pc, #208]	; (8003d3c <HAL_DMA_Init+0x1c0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d040      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a33      	ldr	r2, [pc, #204]	; (8003d40 <HAL_DMA_Init+0x1c4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d03b      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a31      	ldr	r2, [pc, #196]	; (8003d44 <HAL_DMA_Init+0x1c8>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d036      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a30      	ldr	r2, [pc, #192]	; (8003d48 <HAL_DMA_Init+0x1cc>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d031      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a2e      	ldr	r2, [pc, #184]	; (8003d4c <HAL_DMA_Init+0x1d0>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d02c      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <HAL_DMA_Init+0x1d4>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d027      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <HAL_DMA_Init+0x1d8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d022      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <HAL_DMA_Init+0x1dc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d01d      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a28      	ldr	r2, [pc, #160]	; (8003d5c <HAL_DMA_Init+0x1e0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d018      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a27      	ldr	r2, [pc, #156]	; (8003d60 <HAL_DMA_Init+0x1e4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <HAL_DMA_Init+0x1e8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00e      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a24      	ldr	r2, [pc, #144]	; (8003d68 <HAL_DMA_Init+0x1ec>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d009      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a22      	ldr	r2, [pc, #136]	; (8003d6c <HAL_DMA_Init+0x1f0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d004      	beq.n	8003cf0 <HAL_DMA_Init+0x174>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a21      	ldr	r2, [pc, #132]	; (8003d70 <HAL_DMA_Init+0x1f4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <HAL_DMA_Init+0x186>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f022 0201 	bic.w	r2, r2, #1
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e007      	b.n	8003d12 <HAL_DMA_Init+0x196>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 0201 	bic.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d12:	e02f      	b.n	8003d74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d14:	f7fe fae6 	bl	80022e4 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	2b05      	cmp	r3, #5
 8003d20:	d928      	bls.n	8003d74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2203      	movs	r2, #3
 8003d2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e246      	b.n	80041c2 <HAL_DMA_Init+0x646>
 8003d34:	40020010 	.word	0x40020010
 8003d38:	40020028 	.word	0x40020028
 8003d3c:	40020040 	.word	0x40020040
 8003d40:	40020058 	.word	0x40020058
 8003d44:	40020070 	.word	0x40020070
 8003d48:	40020088 	.word	0x40020088
 8003d4c:	400200a0 	.word	0x400200a0
 8003d50:	400200b8 	.word	0x400200b8
 8003d54:	40020410 	.word	0x40020410
 8003d58:	40020428 	.word	0x40020428
 8003d5c:	40020440 	.word	0x40020440
 8003d60:	40020458 	.word	0x40020458
 8003d64:	40020470 	.word	0x40020470
 8003d68:	40020488 	.word	0x40020488
 8003d6c:	400204a0 	.word	0x400204a0
 8003d70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1c8      	bne.n	8003d14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	4b83      	ldr	r3, [pc, #524]	; (8003f9c <HAL_DMA_Init+0x420>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003d9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003db2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d107      	bne.n	8003dd8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003dd8:	4b71      	ldr	r3, [pc, #452]	; (8003fa0 <HAL_DMA_Init+0x424>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b71      	ldr	r3, [pc, #452]	; (8003fa4 <HAL_DMA_Init+0x428>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de4:	d328      	bcc.n	8003e38 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b28      	cmp	r3, #40	; 0x28
 8003dec:	d903      	bls.n	8003df6 <HAL_DMA_Init+0x27a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b2e      	cmp	r3, #46	; 0x2e
 8003df4:	d917      	bls.n	8003e26 <HAL_DMA_Init+0x2aa>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8003dfc:	d903      	bls.n	8003e06 <HAL_DMA_Init+0x28a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	2b42      	cmp	r3, #66	; 0x42
 8003e04:	d90f      	bls.n	8003e26 <HAL_DMA_Init+0x2aa>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b46      	cmp	r3, #70	; 0x46
 8003e0c:	d903      	bls.n	8003e16 <HAL_DMA_Init+0x29a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b48      	cmp	r3, #72	; 0x48
 8003e14:	d907      	bls.n	8003e26 <HAL_DMA_Init+0x2aa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	2b4e      	cmp	r3, #78	; 0x4e
 8003e1c:	d905      	bls.n	8003e2a <HAL_DMA_Init+0x2ae>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b52      	cmp	r3, #82	; 0x52
 8003e24:	d801      	bhi.n	8003e2a <HAL_DMA_Init+0x2ae>
 8003e26:	2301      	movs	r3, #1
 8003e28:	e000      	b.n	8003e2c <HAL_DMA_Init+0x2b0>
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e36:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f023 0307 	bic.w	r3, r3, #7
 8003e4e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d117      	bne.n	8003e92 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f001 fdcf 	bl	8005a18 <DMA_CheckFifoParam>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d008      	beq.n	8003e92 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2240      	movs	r2, #64	; 0x40
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e197      	b.n	80041c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f001 fd0a 	bl	80058b4 <DMA_CalcBaseAndBitshift>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	223f      	movs	r2, #63	; 0x3f
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	e0cd      	b.n	8004052 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a3b      	ldr	r2, [pc, #236]	; (8003fa8 <HAL_DMA_Init+0x42c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d022      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a39      	ldr	r2, [pc, #228]	; (8003fac <HAL_DMA_Init+0x430>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01d      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a38      	ldr	r2, [pc, #224]	; (8003fb0 <HAL_DMA_Init+0x434>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d018      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a36      	ldr	r2, [pc, #216]	; (8003fb4 <HAL_DMA_Init+0x438>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d013      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a35      	ldr	r2, [pc, #212]	; (8003fb8 <HAL_DMA_Init+0x43c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00e      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a33      	ldr	r2, [pc, #204]	; (8003fbc <HAL_DMA_Init+0x440>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d009      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a32      	ldr	r2, [pc, #200]	; (8003fc0 <HAL_DMA_Init+0x444>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d004      	beq.n	8003f06 <HAL_DMA_Init+0x38a>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a30      	ldr	r2, [pc, #192]	; (8003fc4 <HAL_DMA_Init+0x448>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d101      	bne.n	8003f0a <HAL_DMA_Init+0x38e>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <HAL_DMA_Init+0x390>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f000 8097 	beq.w	8004040 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a24      	ldr	r2, [pc, #144]	; (8003fa8 <HAL_DMA_Init+0x42c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d021      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a22      	ldr	r2, [pc, #136]	; (8003fac <HAL_DMA_Init+0x430>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d01c      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <HAL_DMA_Init+0x434>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d017      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <HAL_DMA_Init+0x438>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d012      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <HAL_DMA_Init+0x43c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00d      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <HAL_DMA_Init+0x440>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d008      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_DMA_Init+0x444>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d003      	beq.n	8003f60 <HAL_DMA_Init+0x3e4>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a19      	ldr	r2, [pc, #100]	; (8003fc4 <HAL_DMA_Init+0x448>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <HAL_DMA_Init+0x44c>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	d020      	beq.n	8003fcc <HAL_DMA_Init+0x450>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d102      	bne.n	8003f98 <HAL_DMA_Init+0x41c>
 8003f92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f96:	e01a      	b.n	8003fce <HAL_DMA_Init+0x452>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e018      	b.n	8003fce <HAL_DMA_Init+0x452>
 8003f9c:	fe10803f 	.word	0xfe10803f
 8003fa0:	5c001000 	.word	0x5c001000
 8003fa4:	ffff0000 	.word	0xffff0000
 8003fa8:	58025408 	.word	0x58025408
 8003fac:	5802541c 	.word	0x5802541c
 8003fb0:	58025430 	.word	0x58025430
 8003fb4:	58025444 	.word	0x58025444
 8003fb8:	58025458 	.word	0x58025458
 8003fbc:	5802546c 	.word	0x5802546c
 8003fc0:	58025480 	.word	0x58025480
 8003fc4:	58025494 	.word	0x58025494
 8003fc8:	fffe000f 	.word	0xfffe000f
 8003fcc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68d2      	ldr	r2, [r2, #12]
 8003fd2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003fd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003fdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003fe4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003fec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	69db      	ldr	r3, [r3, #28]
 8003ff2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ff4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ffc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b6e      	ldr	r3, [pc, #440]	; (80041cc <HAL_DMA_Init+0x650>)
 8004014:	4413      	add	r3, r2
 8004016:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <HAL_DMA_Init+0x654>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	009a      	lsls	r2, r3, #2
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f001 fc45 	bl	80058b4 <DMA_CalcBaseAndBitshift>
 800402a:	4603      	mov	r3, r0
 800402c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004032:	f003 031f 	and.w	r3, r3, #31
 8004036:	2201      	movs	r2, #1
 8004038:	409a      	lsls	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	e008      	b.n	8004052 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2240      	movs	r2, #64	; 0x40
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e0b7      	b.n	80041c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a5f      	ldr	r2, [pc, #380]	; (80041d4 <HAL_DMA_Init+0x658>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d072      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a5d      	ldr	r2, [pc, #372]	; (80041d8 <HAL_DMA_Init+0x65c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d06d      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a5c      	ldr	r2, [pc, #368]	; (80041dc <HAL_DMA_Init+0x660>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d068      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a5a      	ldr	r2, [pc, #360]	; (80041e0 <HAL_DMA_Init+0x664>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d063      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a59      	ldr	r2, [pc, #356]	; (80041e4 <HAL_DMA_Init+0x668>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d05e      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a57      	ldr	r2, [pc, #348]	; (80041e8 <HAL_DMA_Init+0x66c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d059      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a56      	ldr	r2, [pc, #344]	; (80041ec <HAL_DMA_Init+0x670>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d054      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a54      	ldr	r2, [pc, #336]	; (80041f0 <HAL_DMA_Init+0x674>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d04f      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a53      	ldr	r2, [pc, #332]	; (80041f4 <HAL_DMA_Init+0x678>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d04a      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a51      	ldr	r2, [pc, #324]	; (80041f8 <HAL_DMA_Init+0x67c>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d045      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a50      	ldr	r2, [pc, #320]	; (80041fc <HAL_DMA_Init+0x680>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d040      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a4e      	ldr	r2, [pc, #312]	; (8004200 <HAL_DMA_Init+0x684>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d03b      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a4d      	ldr	r2, [pc, #308]	; (8004204 <HAL_DMA_Init+0x688>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d036      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a4b      	ldr	r2, [pc, #300]	; (8004208 <HAL_DMA_Init+0x68c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d031      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a4a      	ldr	r2, [pc, #296]	; (800420c <HAL_DMA_Init+0x690>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d02c      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a48      	ldr	r2, [pc, #288]	; (8004210 <HAL_DMA_Init+0x694>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d027      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a47      	ldr	r2, [pc, #284]	; (8004214 <HAL_DMA_Init+0x698>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d022      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a45      	ldr	r2, [pc, #276]	; (8004218 <HAL_DMA_Init+0x69c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a44      	ldr	r2, [pc, #272]	; (800421c <HAL_DMA_Init+0x6a0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d018      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a42      	ldr	r2, [pc, #264]	; (8004220 <HAL_DMA_Init+0x6a4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a41      	ldr	r2, [pc, #260]	; (8004224 <HAL_DMA_Init+0x6a8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <HAL_DMA_Init+0x6ac>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a3e      	ldr	r2, [pc, #248]	; (800422c <HAL_DMA_Init+0x6b0>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_DMA_Init+0x5c6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a3c      	ldr	r2, [pc, #240]	; (8004230 <HAL_DMA_Init+0x6b4>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d101      	bne.n	8004146 <HAL_DMA_Init+0x5ca>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_DMA_Init+0x5cc>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d032      	beq.n	80041b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f001 fcdf 	bl	8005b10 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b80      	cmp	r3, #128	; 0x80
 8004158:	d102      	bne.n	8004160 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004174:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d010      	beq.n	80041a0 <HAL_DMA_Init+0x624>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b08      	cmp	r3, #8
 8004184:	d80c      	bhi.n	80041a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f001 fd5c 	bl	8005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	e008      	b.n	80041b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	a7fdabf8 	.word	0xa7fdabf8
 80041d0:	cccccccd 	.word	0xcccccccd
 80041d4:	40020010 	.word	0x40020010
 80041d8:	40020028 	.word	0x40020028
 80041dc:	40020040 	.word	0x40020040
 80041e0:	40020058 	.word	0x40020058
 80041e4:	40020070 	.word	0x40020070
 80041e8:	40020088 	.word	0x40020088
 80041ec:	400200a0 	.word	0x400200a0
 80041f0:	400200b8 	.word	0x400200b8
 80041f4:	40020410 	.word	0x40020410
 80041f8:	40020428 	.word	0x40020428
 80041fc:	40020440 	.word	0x40020440
 8004200:	40020458 	.word	0x40020458
 8004204:	40020470 	.word	0x40020470
 8004208:	40020488 	.word	0x40020488
 800420c:	400204a0 	.word	0x400204a0
 8004210:	400204b8 	.word	0x400204b8
 8004214:	58025408 	.word	0x58025408
 8004218:	5802541c 	.word	0x5802541c
 800421c:	58025430 	.word	0x58025430
 8004220:	58025444 	.word	0x58025444
 8004224:	58025458 	.word	0x58025458
 8004228:	5802546c 	.word	0x5802546c
 800422c:	58025480 	.word	0x58025480
 8004230:	58025494 	.word	0x58025494

08004234 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e226      	b.n	800469e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_DMA_Start_IT+0x2a>
 800425a:	2302      	movs	r3, #2
 800425c:	e21f      	b.n	800469e <HAL_DMA_Start_IT+0x46a>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	f040 820a 	bne.w	8004688 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a68      	ldr	r2, [pc, #416]	; (8004428 <HAL_DMA_Start_IT+0x1f4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d04a      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a66      	ldr	r2, [pc, #408]	; (800442c <HAL_DMA_Start_IT+0x1f8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d045      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a65      	ldr	r2, [pc, #404]	; (8004430 <HAL_DMA_Start_IT+0x1fc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d040      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a63      	ldr	r2, [pc, #396]	; (8004434 <HAL_DMA_Start_IT+0x200>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d03b      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a62      	ldr	r2, [pc, #392]	; (8004438 <HAL_DMA_Start_IT+0x204>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d036      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a60      	ldr	r2, [pc, #384]	; (800443c <HAL_DMA_Start_IT+0x208>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d031      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5f      	ldr	r2, [pc, #380]	; (8004440 <HAL_DMA_Start_IT+0x20c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d02c      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	; (8004444 <HAL_DMA_Start_IT+0x210>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d027      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a5c      	ldr	r2, [pc, #368]	; (8004448 <HAL_DMA_Start_IT+0x214>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d022      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5a      	ldr	r2, [pc, #360]	; (800444c <HAL_DMA_Start_IT+0x218>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a59      	ldr	r2, [pc, #356]	; (8004450 <HAL_DMA_Start_IT+0x21c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d018      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a57      	ldr	r2, [pc, #348]	; (8004454 <HAL_DMA_Start_IT+0x220>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a56      	ldr	r2, [pc, #344]	; (8004458 <HAL_DMA_Start_IT+0x224>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a54      	ldr	r2, [pc, #336]	; (800445c <HAL_DMA_Start_IT+0x228>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a53      	ldr	r2, [pc, #332]	; (8004460 <HAL_DMA_Start_IT+0x22c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_DMA_Start_IT+0xee>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a51      	ldr	r2, [pc, #324]	; (8004464 <HAL_DMA_Start_IT+0x230>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d108      	bne.n	8004334 <HAL_DMA_Start_IT+0x100>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	e007      	b.n	8004344 <HAL_DMA_Start_IT+0x110>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f022 0201 	bic.w	r2, r2, #1
 8004342:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	68f8      	ldr	r0, [r7, #12]
 800434c:	f001 f906 	bl	800555c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a34      	ldr	r2, [pc, #208]	; (8004428 <HAL_DMA_Start_IT+0x1f4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d04a      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a33      	ldr	r2, [pc, #204]	; (800442c <HAL_DMA_Start_IT+0x1f8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d045      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a31      	ldr	r2, [pc, #196]	; (8004430 <HAL_DMA_Start_IT+0x1fc>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d040      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a30      	ldr	r2, [pc, #192]	; (8004434 <HAL_DMA_Start_IT+0x200>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d03b      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2e      	ldr	r2, [pc, #184]	; (8004438 <HAL_DMA_Start_IT+0x204>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d036      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a2d      	ldr	r2, [pc, #180]	; (800443c <HAL_DMA_Start_IT+0x208>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d031      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a2b      	ldr	r2, [pc, #172]	; (8004440 <HAL_DMA_Start_IT+0x20c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d02c      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2a      	ldr	r2, [pc, #168]	; (8004444 <HAL_DMA_Start_IT+0x210>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d027      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a28      	ldr	r2, [pc, #160]	; (8004448 <HAL_DMA_Start_IT+0x214>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d022      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a27      	ldr	r2, [pc, #156]	; (800444c <HAL_DMA_Start_IT+0x218>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d01d      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a25      	ldr	r2, [pc, #148]	; (8004450 <HAL_DMA_Start_IT+0x21c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d018      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <HAL_DMA_Start_IT+0x220>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d013      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a22      	ldr	r2, [pc, #136]	; (8004458 <HAL_DMA_Start_IT+0x224>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00e      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a21      	ldr	r2, [pc, #132]	; (800445c <HAL_DMA_Start_IT+0x228>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d009      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a1f      	ldr	r2, [pc, #124]	; (8004460 <HAL_DMA_Start_IT+0x22c>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d004      	beq.n	80043f0 <HAL_DMA_Start_IT+0x1bc>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a1e      	ldr	r2, [pc, #120]	; (8004464 <HAL_DMA_Start_IT+0x230>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_DMA_Start_IT+0x1c0>
 80043f0:	2301      	movs	r3, #1
 80043f2:	e000      	b.n	80043f6 <HAL_DMA_Start_IT+0x1c2>
 80043f4:	2300      	movs	r3, #0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d036      	beq.n	8004468 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f023 021e 	bic.w	r2, r3, #30
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0216 	orr.w	r2, r2, #22
 800440c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004412:	2b00      	cmp	r3, #0
 8004414:	d03e      	beq.n	8004494 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0208 	orr.w	r2, r2, #8
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	e035      	b.n	8004494 <HAL_DMA_Start_IT+0x260>
 8004428:	40020010 	.word	0x40020010
 800442c:	40020028 	.word	0x40020028
 8004430:	40020040 	.word	0x40020040
 8004434:	40020058 	.word	0x40020058
 8004438:	40020070 	.word	0x40020070
 800443c:	40020088 	.word	0x40020088
 8004440:	400200a0 	.word	0x400200a0
 8004444:	400200b8 	.word	0x400200b8
 8004448:	40020410 	.word	0x40020410
 800444c:	40020428 	.word	0x40020428
 8004450:	40020440 	.word	0x40020440
 8004454:	40020458 	.word	0x40020458
 8004458:	40020470 	.word	0x40020470
 800445c:	40020488 	.word	0x40020488
 8004460:	400204a0 	.word	0x400204a0
 8004464:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 020e 	bic.w	r2, r3, #14
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 020a 	orr.w	r2, r2, #10
 800447a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d007      	beq.n	8004494 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0204 	orr.w	r2, r2, #4
 8004492:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a83      	ldr	r2, [pc, #524]	; (80046a8 <HAL_DMA_Start_IT+0x474>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d072      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a82      	ldr	r2, [pc, #520]	; (80046ac <HAL_DMA_Start_IT+0x478>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d06d      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a80      	ldr	r2, [pc, #512]	; (80046b0 <HAL_DMA_Start_IT+0x47c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d068      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a7f      	ldr	r2, [pc, #508]	; (80046b4 <HAL_DMA_Start_IT+0x480>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d063      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a7d      	ldr	r2, [pc, #500]	; (80046b8 <HAL_DMA_Start_IT+0x484>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d05e      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a7c      	ldr	r2, [pc, #496]	; (80046bc <HAL_DMA_Start_IT+0x488>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d059      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a7a      	ldr	r2, [pc, #488]	; (80046c0 <HAL_DMA_Start_IT+0x48c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d054      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a79      	ldr	r2, [pc, #484]	; (80046c4 <HAL_DMA_Start_IT+0x490>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d04f      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a77      	ldr	r2, [pc, #476]	; (80046c8 <HAL_DMA_Start_IT+0x494>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d04a      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a76      	ldr	r2, [pc, #472]	; (80046cc <HAL_DMA_Start_IT+0x498>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d045      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a74      	ldr	r2, [pc, #464]	; (80046d0 <HAL_DMA_Start_IT+0x49c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d040      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a73      	ldr	r2, [pc, #460]	; (80046d4 <HAL_DMA_Start_IT+0x4a0>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d03b      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a71      	ldr	r2, [pc, #452]	; (80046d8 <HAL_DMA_Start_IT+0x4a4>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d036      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a70      	ldr	r2, [pc, #448]	; (80046dc <HAL_DMA_Start_IT+0x4a8>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d031      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a6e      	ldr	r2, [pc, #440]	; (80046e0 <HAL_DMA_Start_IT+0x4ac>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d02c      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a6d      	ldr	r2, [pc, #436]	; (80046e4 <HAL_DMA_Start_IT+0x4b0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d027      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a6b      	ldr	r2, [pc, #428]	; (80046e8 <HAL_DMA_Start_IT+0x4b4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d022      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6a      	ldr	r2, [pc, #424]	; (80046ec <HAL_DMA_Start_IT+0x4b8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d01d      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a68      	ldr	r2, [pc, #416]	; (80046f0 <HAL_DMA_Start_IT+0x4bc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d018      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a67      	ldr	r2, [pc, #412]	; (80046f4 <HAL_DMA_Start_IT+0x4c0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d013      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a65      	ldr	r2, [pc, #404]	; (80046f8 <HAL_DMA_Start_IT+0x4c4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d00e      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a64      	ldr	r2, [pc, #400]	; (80046fc <HAL_DMA_Start_IT+0x4c8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d009      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a62      	ldr	r2, [pc, #392]	; (8004700 <HAL_DMA_Start_IT+0x4cc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <HAL_DMA_Start_IT+0x350>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a61      	ldr	r2, [pc, #388]	; (8004704 <HAL_DMA_Start_IT+0x4d0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d101      	bne.n	8004588 <HAL_DMA_Start_IT+0x354>
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_DMA_Start_IT+0x356>
 8004588:	2300      	movs	r3, #0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01a      	beq.n	80045c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d007      	beq.n	80045ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d007      	beq.n	80045c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a37      	ldr	r2, [pc, #220]	; (80046a8 <HAL_DMA_Start_IT+0x474>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d04a      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a36      	ldr	r2, [pc, #216]	; (80046ac <HAL_DMA_Start_IT+0x478>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d045      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <HAL_DMA_Start_IT+0x47c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d040      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a33      	ldr	r2, [pc, #204]	; (80046b4 <HAL_DMA_Start_IT+0x480>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d03b      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a31      	ldr	r2, [pc, #196]	; (80046b8 <HAL_DMA_Start_IT+0x484>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d036      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a30      	ldr	r2, [pc, #192]	; (80046bc <HAL_DMA_Start_IT+0x488>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d031      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a2e      	ldr	r2, [pc, #184]	; (80046c0 <HAL_DMA_Start_IT+0x48c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d02c      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <HAL_DMA_Start_IT+0x490>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d027      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a2b      	ldr	r2, [pc, #172]	; (80046c8 <HAL_DMA_Start_IT+0x494>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d022      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a2a      	ldr	r2, [pc, #168]	; (80046cc <HAL_DMA_Start_IT+0x498>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d01d      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a28      	ldr	r2, [pc, #160]	; (80046d0 <HAL_DMA_Start_IT+0x49c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d018      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a27      	ldr	r2, [pc, #156]	; (80046d4 <HAL_DMA_Start_IT+0x4a0>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d013      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a25      	ldr	r2, [pc, #148]	; (80046d8 <HAL_DMA_Start_IT+0x4a4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d00e      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a24      	ldr	r2, [pc, #144]	; (80046dc <HAL_DMA_Start_IT+0x4a8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d009      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <HAL_DMA_Start_IT+0x4ac>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d004      	beq.n	8004664 <HAL_DMA_Start_IT+0x430>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <HAL_DMA_Start_IT+0x4b0>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d108      	bne.n	8004676 <HAL_DMA_Start_IT+0x442>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	e012      	b.n	800469c <HAL_DMA_Start_IT+0x468>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	e009      	b.n	800469c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800468e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800469c:	7dfb      	ldrb	r3, [r7, #23]
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40020010 	.word	0x40020010
 80046ac:	40020028 	.word	0x40020028
 80046b0:	40020040 	.word	0x40020040
 80046b4:	40020058 	.word	0x40020058
 80046b8:	40020070 	.word	0x40020070
 80046bc:	40020088 	.word	0x40020088
 80046c0:	400200a0 	.word	0x400200a0
 80046c4:	400200b8 	.word	0x400200b8
 80046c8:	40020410 	.word	0x40020410
 80046cc:	40020428 	.word	0x40020428
 80046d0:	40020440 	.word	0x40020440
 80046d4:	40020458 	.word	0x40020458
 80046d8:	40020470 	.word	0x40020470
 80046dc:	40020488 	.word	0x40020488
 80046e0:	400204a0 	.word	0x400204a0
 80046e4:	400204b8 	.word	0x400204b8
 80046e8:	58025408 	.word	0x58025408
 80046ec:	5802541c 	.word	0x5802541c
 80046f0:	58025430 	.word	0x58025430
 80046f4:	58025444 	.word	0x58025444
 80046f8:	58025458 	.word	0x58025458
 80046fc:	5802546c 	.word	0x5802546c
 8004700:	58025480 	.word	0x58025480
 8004704:	58025494 	.word	0x58025494

08004708 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004714:	4b67      	ldr	r3, [pc, #412]	; (80048b4 <HAL_DMA_IRQHandler+0x1ac>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a67      	ldr	r2, [pc, #412]	; (80048b8 <HAL_DMA_IRQHandler+0x1b0>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0a9b      	lsrs	r3, r3, #10
 8004720:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004726:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a5f      	ldr	r2, [pc, #380]	; (80048bc <HAL_DMA_IRQHandler+0x1b4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d04a      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a5d      	ldr	r2, [pc, #372]	; (80048c0 <HAL_DMA_IRQHandler+0x1b8>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d045      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a5c      	ldr	r2, [pc, #368]	; (80048c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d040      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a5a      	ldr	r2, [pc, #360]	; (80048c8 <HAL_DMA_IRQHandler+0x1c0>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d03b      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_DMA_IRQHandler+0x1c4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d036      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a57      	ldr	r2, [pc, #348]	; (80048d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d031      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <HAL_DMA_IRQHandler+0x1cc>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d02c      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a54      	ldr	r2, [pc, #336]	; (80048d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d027      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a53      	ldr	r2, [pc, #332]	; (80048dc <HAL_DMA_IRQHandler+0x1d4>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a51      	ldr	r2, [pc, #324]	; (80048e0 <HAL_DMA_IRQHandler+0x1d8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01d      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a50      	ldr	r2, [pc, #320]	; (80048e4 <HAL_DMA_IRQHandler+0x1dc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a4e      	ldr	r2, [pc, #312]	; (80048e8 <HAL_DMA_IRQHandler+0x1e0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a4d      	ldr	r2, [pc, #308]	; (80048ec <HAL_DMA_IRQHandler+0x1e4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a4b      	ldr	r2, [pc, #300]	; (80048f0 <HAL_DMA_IRQHandler+0x1e8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a4a      	ldr	r2, [pc, #296]	; (80048f4 <HAL_DMA_IRQHandler+0x1ec>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_DMA_IRQHandler+0xd2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a48      	ldr	r2, [pc, #288]	; (80048f8 <HAL_DMA_IRQHandler+0x1f0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d101      	bne.n	80047de <HAL_DMA_IRQHandler+0xd6>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <HAL_DMA_IRQHandler+0xd8>
 80047de:	2300      	movs	r3, #0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 842b 	beq.w	800503c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ea:	f003 031f 	and.w	r3, r3, #31
 80047ee:	2208      	movs	r2, #8
 80047f0:	409a      	lsls	r2, r3
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	f000 80a2 	beq.w	8004940 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a2e      	ldr	r2, [pc, #184]	; (80048bc <HAL_DMA_IRQHandler+0x1b4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d04a      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a2d      	ldr	r2, [pc, #180]	; (80048c0 <HAL_DMA_IRQHandler+0x1b8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d045      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a2b      	ldr	r2, [pc, #172]	; (80048c4 <HAL_DMA_IRQHandler+0x1bc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d040      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <HAL_DMA_IRQHandler+0x1c0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d03b      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a28      	ldr	r2, [pc, #160]	; (80048cc <HAL_DMA_IRQHandler+0x1c4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d036      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a27      	ldr	r2, [pc, #156]	; (80048d0 <HAL_DMA_IRQHandler+0x1c8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d031      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <HAL_DMA_IRQHandler+0x1cc>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d02c      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a24      	ldr	r2, [pc, #144]	; (80048d8 <HAL_DMA_IRQHandler+0x1d0>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d027      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a22      	ldr	r2, [pc, #136]	; (80048dc <HAL_DMA_IRQHandler+0x1d4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a21      	ldr	r2, [pc, #132]	; (80048e0 <HAL_DMA_IRQHandler+0x1d8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d01d      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_DMA_IRQHandler+0x1dc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_DMA_IRQHandler+0x1e0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_DMA_IRQHandler+0x1e4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_DMA_IRQHandler+0x1e8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_DMA_IRQHandler+0x1ec>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_DMA_IRQHandler+0x194>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_DMA_IRQHandler+0x1f0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d12f      	bne.n	80048fc <HAL_DMA_IRQHandler+0x1f4>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e02e      	b.n	8004910 <HAL_DMA_IRQHandler+0x208>
 80048b2:	bf00      	nop
 80048b4:	24000004 	.word	0x24000004
 80048b8:	1b4e81b5 	.word	0x1b4e81b5
 80048bc:	40020010 	.word	0x40020010
 80048c0:	40020028 	.word	0x40020028
 80048c4:	40020040 	.word	0x40020040
 80048c8:	40020058 	.word	0x40020058
 80048cc:	40020070 	.word	0x40020070
 80048d0:	40020088 	.word	0x40020088
 80048d4:	400200a0 	.word	0x400200a0
 80048d8:	400200b8 	.word	0x400200b8
 80048dc:	40020410 	.word	0x40020410
 80048e0:	40020428 	.word	0x40020428
 80048e4:	40020440 	.word	0x40020440
 80048e8:	40020458 	.word	0x40020458
 80048ec:	40020470 	.word	0x40020470
 80048f0:	40020488 	.word	0x40020488
 80048f4:	400204a0 	.word	0x400204a0
 80048f8:	400204b8 	.word	0x400204b8
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b00      	cmp	r3, #0
 8004908:	bf14      	ite	ne
 800490a:	2301      	movne	r3, #1
 800490c:	2300      	moveq	r3, #0
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0204 	bic.w	r2, r2, #4
 8004922:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	2208      	movs	r2, #8
 800492e:	409a      	lsls	r2, r3
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	fa22 f303 	lsr.w	r3, r2, r3
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d06e      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a69      	ldr	r2, [pc, #420]	; (8004b00 <HAL_DMA_IRQHandler+0x3f8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d04a      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a67      	ldr	r2, [pc, #412]	; (8004b04 <HAL_DMA_IRQHandler+0x3fc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d045      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a66      	ldr	r2, [pc, #408]	; (8004b08 <HAL_DMA_IRQHandler+0x400>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d040      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a64      	ldr	r2, [pc, #400]	; (8004b0c <HAL_DMA_IRQHandler+0x404>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d03b      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a63      	ldr	r2, [pc, #396]	; (8004b10 <HAL_DMA_IRQHandler+0x408>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d036      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a61      	ldr	r2, [pc, #388]	; (8004b14 <HAL_DMA_IRQHandler+0x40c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a60      	ldr	r2, [pc, #384]	; (8004b18 <HAL_DMA_IRQHandler+0x410>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d02c      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a5e      	ldr	r2, [pc, #376]	; (8004b1c <HAL_DMA_IRQHandler+0x414>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d027      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5d      	ldr	r2, [pc, #372]	; (8004b20 <HAL_DMA_IRQHandler+0x418>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d022      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a5b      	ldr	r2, [pc, #364]	; (8004b24 <HAL_DMA_IRQHandler+0x41c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01d      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a5a      	ldr	r2, [pc, #360]	; (8004b28 <HAL_DMA_IRQHandler+0x420>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d018      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a58      	ldr	r2, [pc, #352]	; (8004b2c <HAL_DMA_IRQHandler+0x424>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a57      	ldr	r2, [pc, #348]	; (8004b30 <HAL_DMA_IRQHandler+0x428>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a55      	ldr	r2, [pc, #340]	; (8004b34 <HAL_DMA_IRQHandler+0x42c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a54      	ldr	r2, [pc, #336]	; (8004b38 <HAL_DMA_IRQHandler+0x430>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_DMA_IRQHandler+0x2ee>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a52      	ldr	r2, [pc, #328]	; (8004b3c <HAL_DMA_IRQHandler+0x434>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10a      	bne.n	8004a0c <HAL_DMA_IRQHandler+0x304>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	bf14      	ite	ne
 8004a04:	2301      	movne	r3, #1
 8004a06:	2300      	moveq	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	e003      	b.n	8004a14 <HAL_DMA_IRQHandler+0x30c>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2300      	movs	r3, #0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00d      	beq.n	8004a34 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2201      	movs	r2, #1
 8004a22:	409a      	lsls	r2, r3
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2c:	f043 0202 	orr.w	r2, r3, #2
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 808f 	beq.w	8004b68 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a2c      	ldr	r2, [pc, #176]	; (8004b00 <HAL_DMA_IRQHandler+0x3f8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2a      	ldr	r2, [pc, #168]	; (8004b04 <HAL_DMA_IRQHandler+0x3fc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a29      	ldr	r2, [pc, #164]	; (8004b08 <HAL_DMA_IRQHandler+0x400>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a27      	ldr	r2, [pc, #156]	; (8004b0c <HAL_DMA_IRQHandler+0x404>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a26      	ldr	r2, [pc, #152]	; (8004b10 <HAL_DMA_IRQHandler+0x408>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a24      	ldr	r2, [pc, #144]	; (8004b14 <HAL_DMA_IRQHandler+0x40c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_DMA_IRQHandler+0x410>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <HAL_DMA_IRQHandler+0x414>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a20      	ldr	r2, [pc, #128]	; (8004b20 <HAL_DMA_IRQHandler+0x418>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1e      	ldr	r2, [pc, #120]	; (8004b24 <HAL_DMA_IRQHandler+0x41c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1d      	ldr	r2, [pc, #116]	; (8004b28 <HAL_DMA_IRQHandler+0x420>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1b      	ldr	r2, [pc, #108]	; (8004b2c <HAL_DMA_IRQHandler+0x424>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1a      	ldr	r2, [pc, #104]	; (8004b30 <HAL_DMA_IRQHandler+0x428>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_DMA_IRQHandler+0x42c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <HAL_DMA_IRQHandler+0x430>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_IRQHandler+0x3e2>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a15      	ldr	r2, [pc, #84]	; (8004b3c <HAL_DMA_IRQHandler+0x434>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d12a      	bne.n	8004b40 <HAL_DMA_IRQHandler+0x438>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e023      	b.n	8004b48 <HAL_DMA_IRQHandler+0x440>
 8004b00:	40020010 	.word	0x40020010
 8004b04:	40020028 	.word	0x40020028
 8004b08:	40020040 	.word	0x40020040
 8004b0c:	40020058 	.word	0x40020058
 8004b10:	40020070 	.word	0x40020070
 8004b14:	40020088 	.word	0x40020088
 8004b18:	400200a0 	.word	0x400200a0
 8004b1c:	400200b8 	.word	0x400200b8
 8004b20:	40020410 	.word	0x40020410
 8004b24:	40020428 	.word	0x40020428
 8004b28:	40020440 	.word	0x40020440
 8004b2c:	40020458 	.word	0x40020458
 8004b30:	40020470 	.word	0x40020470
 8004b34:	40020488 	.word	0x40020488
 8004b38:	400204a0 	.word	0x400204a0
 8004b3c:	400204b8 	.word	0x400204b8
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b50:	f003 031f 	and.w	r3, r3, #31
 8004b54:	2204      	movs	r2, #4
 8004b56:	409a      	lsls	r2, r3
 8004b58:	6a3b      	ldr	r3, [r7, #32]
 8004b5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	f003 031f 	and.w	r3, r3, #31
 8004b70:	2210      	movs	r2, #16
 8004b72:	409a      	lsls	r2, r3
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80a6 	beq.w	8004cca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <HAL_DMA_IRQHandler+0x690>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d04a      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a83      	ldr	r2, [pc, #524]	; (8004d9c <HAL_DMA_IRQHandler+0x694>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d045      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a82      	ldr	r2, [pc, #520]	; (8004da0 <HAL_DMA_IRQHandler+0x698>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d040      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a80      	ldr	r2, [pc, #512]	; (8004da4 <HAL_DMA_IRQHandler+0x69c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d03b      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7f      	ldr	r2, [pc, #508]	; (8004da8 <HAL_DMA_IRQHandler+0x6a0>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d036      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	; (8004dac <HAL_DMA_IRQHandler+0x6a4>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a7c      	ldr	r2, [pc, #496]	; (8004db0 <HAL_DMA_IRQHandler+0x6a8>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d02c      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a7a      	ldr	r2, [pc, #488]	; (8004db4 <HAL_DMA_IRQHandler+0x6ac>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d027      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a79      	ldr	r2, [pc, #484]	; (8004db8 <HAL_DMA_IRQHandler+0x6b0>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d022      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a77      	ldr	r2, [pc, #476]	; (8004dbc <HAL_DMA_IRQHandler+0x6b4>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d01d      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a76      	ldr	r2, [pc, #472]	; (8004dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d018      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a74      	ldr	r2, [pc, #464]	; (8004dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a73      	ldr	r2, [pc, #460]	; (8004dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00e      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a71      	ldr	r2, [pc, #452]	; (8004dcc <HAL_DMA_IRQHandler+0x6c4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d009      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a70      	ldr	r2, [pc, #448]	; (8004dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_DMA_IRQHandler+0x516>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a6e      	ldr	r2, [pc, #440]	; (8004dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d10a      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x52c>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0308 	and.w	r3, r3, #8
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bf14      	ite	ne
 8004c2c:	2301      	movne	r3, #1
 8004c2e:	2300      	moveq	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	e009      	b.n	8004c48 <HAL_DMA_IRQHandler+0x540>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0304 	and.w	r3, r3, #4
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d03e      	beq.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c50:	f003 031f 	and.w	r3, r3, #31
 8004c54:	2210      	movs	r2, #16
 8004c56:	409a      	lsls	r2, r3
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d108      	bne.n	8004c8a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d024      	beq.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	4798      	blx	r3
 8004c88:	e01f      	b.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d01b      	beq.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	4798      	blx	r3
 8004c9a:	e016      	b.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d107      	bne.n	8004cba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0208 	bic.w	r2, r2, #8
 8004cb8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d003      	beq.n	8004cca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cce:	f003 031f 	and.w	r3, r3, #31
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	409a      	lsls	r2, r3
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8110 	beq.w	8004f00 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <HAL_DMA_IRQHandler+0x690>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d04a      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a2b      	ldr	r2, [pc, #172]	; (8004d9c <HAL_DMA_IRQHandler+0x694>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d045      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a29      	ldr	r2, [pc, #164]	; (8004da0 <HAL_DMA_IRQHandler+0x698>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d040      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a28      	ldr	r2, [pc, #160]	; (8004da4 <HAL_DMA_IRQHandler+0x69c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d03b      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <HAL_DMA_IRQHandler+0x6a0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d036      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a25      	ldr	r2, [pc, #148]	; (8004dac <HAL_DMA_IRQHandler+0x6a4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d031      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <HAL_DMA_IRQHandler+0x6a8>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d02c      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a22      	ldr	r2, [pc, #136]	; (8004db4 <HAL_DMA_IRQHandler+0x6ac>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d027      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a20      	ldr	r2, [pc, #128]	; (8004db8 <HAL_DMA_IRQHandler+0x6b0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d022      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_DMA_IRQHandler+0x6b4>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d01d      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a1d      	ldr	r2, [pc, #116]	; (8004dc0 <HAL_DMA_IRQHandler+0x6b8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d018      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a1c      	ldr	r2, [pc, #112]	; (8004dc4 <HAL_DMA_IRQHandler+0x6bc>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1a      	ldr	r2, [pc, #104]	; (8004dc8 <HAL_DMA_IRQHandler+0x6c0>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a19      	ldr	r2, [pc, #100]	; (8004dcc <HAL_DMA_IRQHandler+0x6c4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d009      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <HAL_DMA_IRQHandler+0x6c8>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d004      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x678>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a16      	ldr	r2, [pc, #88]	; (8004dd4 <HAL_DMA_IRQHandler+0x6cc>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d12b      	bne.n	8004dd8 <HAL_DMA_IRQHandler+0x6d0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0310 	and.w	r3, r3, #16
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	e02a      	b.n	8004dec <HAL_DMA_IRQHandler+0x6e4>
 8004d96:	bf00      	nop
 8004d98:	40020010 	.word	0x40020010
 8004d9c:	40020028 	.word	0x40020028
 8004da0:	40020040 	.word	0x40020040
 8004da4:	40020058 	.word	0x40020058
 8004da8:	40020070 	.word	0x40020070
 8004dac:	40020088 	.word	0x40020088
 8004db0:	400200a0 	.word	0x400200a0
 8004db4:	400200b8 	.word	0x400200b8
 8004db8:	40020410 	.word	0x40020410
 8004dbc:	40020428 	.word	0x40020428
 8004dc0:	40020440 	.word	0x40020440
 8004dc4:	40020458 	.word	0x40020458
 8004dc8:	40020470 	.word	0x40020470
 8004dcc:	40020488 	.word	0x40020488
 8004dd0:	400204a0 	.word	0x400204a0
 8004dd4:	400204b8 	.word	0x400204b8
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf14      	ite	ne
 8004de6:	2301      	movne	r3, #1
 8004de8:	2300      	moveq	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8087 	beq.w	8004f00 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	d139      	bne.n	8004e82 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f022 0216 	bic.w	r2, r2, #22
 8004e1c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e2c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d103      	bne.n	8004e3e <HAL_DMA_IRQHandler+0x736>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d007      	beq.n	8004e4e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0208 	bic.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	223f      	movs	r2, #63	; 0x3f
 8004e58:	409a      	lsls	r2, r3
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 834a 	beq.w	800550c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4798      	blx	r3
          }
          return;
 8004e80:	e344      	b.n	800550c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d018      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02c      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	4798      	blx	r3
 8004eae:	e027      	b.n	8004f00 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d023      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
 8004ec0:	e01e      	b.n	8004f00 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10f      	bne.n	8004ef0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f022 0210 	bic.w	r2, r2, #16
 8004ede:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	f000 8306 	beq.w	8005516 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 8088 	beq.w	8005028 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2204      	movs	r2, #4
 8004f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a7a      	ldr	r2, [pc, #488]	; (8005110 <HAL_DMA_IRQHandler+0xa08>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d04a      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a79      	ldr	r2, [pc, #484]	; (8005114 <HAL_DMA_IRQHandler+0xa0c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d045      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a77      	ldr	r2, [pc, #476]	; (8005118 <HAL_DMA_IRQHandler+0xa10>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d040      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a76      	ldr	r2, [pc, #472]	; (800511c <HAL_DMA_IRQHandler+0xa14>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d03b      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a74      	ldr	r2, [pc, #464]	; (8005120 <HAL_DMA_IRQHandler+0xa18>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d036      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a73      	ldr	r2, [pc, #460]	; (8005124 <HAL_DMA_IRQHandler+0xa1c>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d031      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a71      	ldr	r2, [pc, #452]	; (8005128 <HAL_DMA_IRQHandler+0xa20>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d02c      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a70      	ldr	r2, [pc, #448]	; (800512c <HAL_DMA_IRQHandler+0xa24>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d027      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a6e      	ldr	r2, [pc, #440]	; (8005130 <HAL_DMA_IRQHandler+0xa28>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d022      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6d      	ldr	r2, [pc, #436]	; (8005134 <HAL_DMA_IRQHandler+0xa2c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01d      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a6b      	ldr	r2, [pc, #428]	; (8005138 <HAL_DMA_IRQHandler+0xa30>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d018      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6a      	ldr	r2, [pc, #424]	; (800513c <HAL_DMA_IRQHandler+0xa34>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a68      	ldr	r2, [pc, #416]	; (8005140 <HAL_DMA_IRQHandler+0xa38>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d00e      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a67      	ldr	r2, [pc, #412]	; (8005144 <HAL_DMA_IRQHandler+0xa3c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d009      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a65      	ldr	r2, [pc, #404]	; (8005148 <HAL_DMA_IRQHandler+0xa40>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d004      	beq.n	8004fc0 <HAL_DMA_IRQHandler+0x8b8>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a64      	ldr	r2, [pc, #400]	; (800514c <HAL_DMA_IRQHandler+0xa44>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <HAL_DMA_IRQHandler+0x8ca>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f022 0201 	bic.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e007      	b.n	8004fe2 <HAL_DMA_IRQHandler+0x8da>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0201 	bic.w	r2, r2, #1
 8004fe0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d307      	bcc.n	8004ffe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1f2      	bne.n	8004fe2 <HAL_DMA_IRQHandler+0x8da>
 8004ffc:	e000      	b.n	8005000 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ffe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	d004      	beq.n	8005018 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2203      	movs	r2, #3
 8005012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005016:	e003      	b.n	8005020 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800502c:	2b00      	cmp	r3, #0
 800502e:	f000 8272 	beq.w	8005516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	4798      	blx	r3
 800503a:	e26c      	b.n	8005516 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a43      	ldr	r2, [pc, #268]	; (8005150 <HAL_DMA_IRQHandler+0xa48>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d022      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a42      	ldr	r2, [pc, #264]	; (8005154 <HAL_DMA_IRQHandler+0xa4c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d01d      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a40      	ldr	r2, [pc, #256]	; (8005158 <HAL_DMA_IRQHandler+0xa50>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d018      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a3f      	ldr	r2, [pc, #252]	; (800515c <HAL_DMA_IRQHandler+0xa54>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d013      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a3d      	ldr	r2, [pc, #244]	; (8005160 <HAL_DMA_IRQHandler+0xa58>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d00e      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a3c      	ldr	r2, [pc, #240]	; (8005164 <HAL_DMA_IRQHandler+0xa5c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d009      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a3a      	ldr	r2, [pc, #232]	; (8005168 <HAL_DMA_IRQHandler+0xa60>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_DMA_IRQHandler+0x984>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a39      	ldr	r2, [pc, #228]	; (800516c <HAL_DMA_IRQHandler+0xa64>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d101      	bne.n	8005090 <HAL_DMA_IRQHandler+0x988>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <HAL_DMA_IRQHandler+0x98a>
 8005090:	2300      	movs	r3, #0
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 823f 	beq.w	8005516 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a4:	f003 031f 	and.w	r3, r3, #31
 80050a8:	2204      	movs	r2, #4
 80050aa:	409a      	lsls	r2, r3
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	4013      	ands	r3, r2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 80cd 	beq.w	8005250 <HAL_DMA_IRQHandler+0xb48>
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80c7 	beq.w	8005250 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2204      	movs	r2, #4
 80050cc:	409a      	lsls	r2, r3
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d049      	beq.n	8005170 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 8210 	beq.w	8005510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050f8:	e20a      	b.n	8005510 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8206 	beq.w	8005510 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800510c:	e200      	b.n	8005510 <HAL_DMA_IRQHandler+0xe08>
 800510e:	bf00      	nop
 8005110:	40020010 	.word	0x40020010
 8005114:	40020028 	.word	0x40020028
 8005118:	40020040 	.word	0x40020040
 800511c:	40020058 	.word	0x40020058
 8005120:	40020070 	.word	0x40020070
 8005124:	40020088 	.word	0x40020088
 8005128:	400200a0 	.word	0x400200a0
 800512c:	400200b8 	.word	0x400200b8
 8005130:	40020410 	.word	0x40020410
 8005134:	40020428 	.word	0x40020428
 8005138:	40020440 	.word	0x40020440
 800513c:	40020458 	.word	0x40020458
 8005140:	40020470 	.word	0x40020470
 8005144:	40020488 	.word	0x40020488
 8005148:	400204a0 	.word	0x400204a0
 800514c:	400204b8 	.word	0x400204b8
 8005150:	58025408 	.word	0x58025408
 8005154:	5802541c 	.word	0x5802541c
 8005158:	58025430 	.word	0x58025430
 800515c:	58025444 	.word	0x58025444
 8005160:	58025458 	.word	0x58025458
 8005164:	5802546c 	.word	0x5802546c
 8005168:	58025480 	.word	0x58025480
 800516c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0320 	and.w	r3, r3, #32
 8005176:	2b00      	cmp	r3, #0
 8005178:	d160      	bne.n	800523c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a7f      	ldr	r2, [pc, #508]	; (800537c <HAL_DMA_IRQHandler+0xc74>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d04a      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a7d      	ldr	r2, [pc, #500]	; (8005380 <HAL_DMA_IRQHandler+0xc78>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d045      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a7c      	ldr	r2, [pc, #496]	; (8005384 <HAL_DMA_IRQHandler+0xc7c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d040      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a7a      	ldr	r2, [pc, #488]	; (8005388 <HAL_DMA_IRQHandler+0xc80>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d03b      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a79      	ldr	r2, [pc, #484]	; (800538c <HAL_DMA_IRQHandler+0xc84>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d036      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a77      	ldr	r2, [pc, #476]	; (8005390 <HAL_DMA_IRQHandler+0xc88>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d031      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a76      	ldr	r2, [pc, #472]	; (8005394 <HAL_DMA_IRQHandler+0xc8c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d02c      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a74      	ldr	r2, [pc, #464]	; (8005398 <HAL_DMA_IRQHandler+0xc90>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d027      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a73      	ldr	r2, [pc, #460]	; (800539c <HAL_DMA_IRQHandler+0xc94>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d022      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a71      	ldr	r2, [pc, #452]	; (80053a0 <HAL_DMA_IRQHandler+0xc98>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01d      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a70      	ldr	r2, [pc, #448]	; (80053a4 <HAL_DMA_IRQHandler+0xc9c>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d018      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a6e      	ldr	r2, [pc, #440]	; (80053a8 <HAL_DMA_IRQHandler+0xca0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d013      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a6d      	ldr	r2, [pc, #436]	; (80053ac <HAL_DMA_IRQHandler+0xca4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00e      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a6b      	ldr	r2, [pc, #428]	; (80053b0 <HAL_DMA_IRQHandler+0xca8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a6a      	ldr	r2, [pc, #424]	; (80053b4 <HAL_DMA_IRQHandler+0xcac>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_DMA_IRQHandler+0xb12>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a68      	ldr	r2, [pc, #416]	; (80053b8 <HAL_DMA_IRQHandler+0xcb0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d108      	bne.n	800522c <HAL_DMA_IRQHandler+0xb24>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f022 0208 	bic.w	r2, r2, #8
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	e007      	b.n	800523c <HAL_DMA_IRQHandler+0xb34>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0204 	bic.w	r2, r2, #4
 800523a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8165 	beq.w	8005510 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800524e:	e15f      	b.n	8005510 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	f003 031f 	and.w	r3, r3, #31
 8005258:	2202      	movs	r2, #2
 800525a:	409a      	lsls	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	4013      	ands	r3, r2
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 80c5 	beq.w	80053f0 <HAL_DMA_IRQHandler+0xce8>
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80bf 	beq.w	80053f0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	2202      	movs	r2, #2
 800527c:	409a      	lsls	r2, r3
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d018      	beq.n	80052be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	2b00      	cmp	r3, #0
 800529c:	f000 813a 	beq.w	8005514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052a8:	e134      	b.n	8005514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 8130 	beq.w	8005514 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052bc:	e12a      	b.n	8005514 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f040 8089 	bne.w	80053dc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2b      	ldr	r2, [pc, #172]	; (800537c <HAL_DMA_IRQHandler+0xc74>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d04a      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a29      	ldr	r2, [pc, #164]	; (8005380 <HAL_DMA_IRQHandler+0xc78>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d045      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a28      	ldr	r2, [pc, #160]	; (8005384 <HAL_DMA_IRQHandler+0xc7c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d040      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a26      	ldr	r2, [pc, #152]	; (8005388 <HAL_DMA_IRQHandler+0xc80>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d03b      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a25      	ldr	r2, [pc, #148]	; (800538c <HAL_DMA_IRQHandler+0xc84>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d036      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a23      	ldr	r2, [pc, #140]	; (8005390 <HAL_DMA_IRQHandler+0xc88>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d031      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a22      	ldr	r2, [pc, #136]	; (8005394 <HAL_DMA_IRQHandler+0xc8c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d02c      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a20      	ldr	r2, [pc, #128]	; (8005398 <HAL_DMA_IRQHandler+0xc90>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d027      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1f      	ldr	r2, [pc, #124]	; (800539c <HAL_DMA_IRQHandler+0xc94>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d022      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a1d      	ldr	r2, [pc, #116]	; (80053a0 <HAL_DMA_IRQHandler+0xc98>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d01d      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <HAL_DMA_IRQHandler+0xc9c>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d018      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <HAL_DMA_IRQHandler+0xca0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d013      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a19      	ldr	r2, [pc, #100]	; (80053ac <HAL_DMA_IRQHandler+0xca4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d00e      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a17      	ldr	r2, [pc, #92]	; (80053b0 <HAL_DMA_IRQHandler+0xca8>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a16      	ldr	r2, [pc, #88]	; (80053b4 <HAL_DMA_IRQHandler+0xcac>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d004      	beq.n	800536a <HAL_DMA_IRQHandler+0xc62>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <HAL_DMA_IRQHandler+0xcb0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d128      	bne.n	80053bc <HAL_DMA_IRQHandler+0xcb4>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0214 	bic.w	r2, r2, #20
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	e027      	b.n	80053cc <HAL_DMA_IRQHandler+0xcc4>
 800537c:	40020010 	.word	0x40020010
 8005380:	40020028 	.word	0x40020028
 8005384:	40020040 	.word	0x40020040
 8005388:	40020058 	.word	0x40020058
 800538c:	40020070 	.word	0x40020070
 8005390:	40020088 	.word	0x40020088
 8005394:	400200a0 	.word	0x400200a0
 8005398:	400200b8 	.word	0x400200b8
 800539c:	40020410 	.word	0x40020410
 80053a0:	40020428 	.word	0x40020428
 80053a4:	40020440 	.word	0x40020440
 80053a8:	40020458 	.word	0x40020458
 80053ac:	40020470 	.word	0x40020470
 80053b0:	40020488 	.word	0x40020488
 80053b4:	400204a0 	.word	0x400204a0
 80053b8:	400204b8 	.word	0x400204b8
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020a 	bic.w	r2, r2, #10
 80053ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 8097 	beq.w	8005514 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053ee:	e091      	b.n	8005514 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2208      	movs	r2, #8
 80053fa:	409a      	lsls	r2, r3
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8088 	beq.w	8005516 <HAL_DMA_IRQHandler+0xe0e>
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	f000 8082 	beq.w	8005516 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a41      	ldr	r2, [pc, #260]	; (800551c <HAL_DMA_IRQHandler+0xe14>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d04a      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <HAL_DMA_IRQHandler+0xe18>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d045      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a3e      	ldr	r2, [pc, #248]	; (8005524 <HAL_DMA_IRQHandler+0xe1c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d040      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a3c      	ldr	r2, [pc, #240]	; (8005528 <HAL_DMA_IRQHandler+0xe20>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d03b      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a3b      	ldr	r2, [pc, #236]	; (800552c <HAL_DMA_IRQHandler+0xe24>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d036      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a39      	ldr	r2, [pc, #228]	; (8005530 <HAL_DMA_IRQHandler+0xe28>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d031      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a38      	ldr	r2, [pc, #224]	; (8005534 <HAL_DMA_IRQHandler+0xe2c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d02c      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a36      	ldr	r2, [pc, #216]	; (8005538 <HAL_DMA_IRQHandler+0xe30>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d027      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a35      	ldr	r2, [pc, #212]	; (800553c <HAL_DMA_IRQHandler+0xe34>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d022      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a33      	ldr	r2, [pc, #204]	; (8005540 <HAL_DMA_IRQHandler+0xe38>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01d      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a32      	ldr	r2, [pc, #200]	; (8005544 <HAL_DMA_IRQHandler+0xe3c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d018      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a30      	ldr	r2, [pc, #192]	; (8005548 <HAL_DMA_IRQHandler+0xe40>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a2f      	ldr	r2, [pc, #188]	; (800554c <HAL_DMA_IRQHandler+0xe44>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a2d      	ldr	r2, [pc, #180]	; (8005550 <HAL_DMA_IRQHandler+0xe48>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <HAL_DMA_IRQHandler+0xe4c>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xdaa>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <HAL_DMA_IRQHandler+0xe50>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d108      	bne.n	80054c4 <HAL_DMA_IRQHandler+0xdbc>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f022 021c 	bic.w	r2, r2, #28
 80054c0:	601a      	str	r2, [r3, #0]
 80054c2:	e007      	b.n	80054d4 <HAL_DMA_IRQHandler+0xdcc>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 020e 	bic.w	r2, r2, #14
 80054d2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2201      	movs	r2, #1
 80054de:	409a      	lsls	r2, r3
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d009      	beq.n	8005516 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	4798      	blx	r3
 800550a:	e004      	b.n	8005516 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800550c:	bf00      	nop
 800550e:	e002      	b.n	8005516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005510:	bf00      	nop
 8005512:	e000      	b.n	8005516 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005514:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005516:	3728      	adds	r7, #40	; 0x28
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	40020010 	.word	0x40020010
 8005520:	40020028 	.word	0x40020028
 8005524:	40020040 	.word	0x40020040
 8005528:	40020058 	.word	0x40020058
 800552c:	40020070 	.word	0x40020070
 8005530:	40020088 	.word	0x40020088
 8005534:	400200a0 	.word	0x400200a0
 8005538:	400200b8 	.word	0x400200b8
 800553c:	40020410 	.word	0x40020410
 8005540:	40020428 	.word	0x40020428
 8005544:	40020440 	.word	0x40020440
 8005548:	40020458 	.word	0x40020458
 800554c:	40020470 	.word	0x40020470
 8005550:	40020488 	.word	0x40020488
 8005554:	400204a0 	.word	0x400204a0
 8005558:	400204b8 	.word	0x400204b8

0800555c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
 8005568:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005574:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a7f      	ldr	r2, [pc, #508]	; (8005778 <DMA_SetConfig+0x21c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d072      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a7d      	ldr	r2, [pc, #500]	; (800577c <DMA_SetConfig+0x220>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d06d      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a7c      	ldr	r2, [pc, #496]	; (8005780 <DMA_SetConfig+0x224>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d068      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a7a      	ldr	r2, [pc, #488]	; (8005784 <DMA_SetConfig+0x228>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d063      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a79      	ldr	r2, [pc, #484]	; (8005788 <DMA_SetConfig+0x22c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d05e      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a77      	ldr	r2, [pc, #476]	; (800578c <DMA_SetConfig+0x230>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d059      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a76      	ldr	r2, [pc, #472]	; (8005790 <DMA_SetConfig+0x234>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d054      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a74      	ldr	r2, [pc, #464]	; (8005794 <DMA_SetConfig+0x238>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d04f      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a73      	ldr	r2, [pc, #460]	; (8005798 <DMA_SetConfig+0x23c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a71      	ldr	r2, [pc, #452]	; (800579c <DMA_SetConfig+0x240>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a70      	ldr	r2, [pc, #448]	; (80057a0 <DMA_SetConfig+0x244>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a6e      	ldr	r2, [pc, #440]	; (80057a4 <DMA_SetConfig+0x248>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a6d      	ldr	r2, [pc, #436]	; (80057a8 <DMA_SetConfig+0x24c>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <DMA_SetConfig+0x10a>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a6b      	ldr	r2, [pc, #428]	; (80057ac <DMA_SetConfig+0x250>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a6a      	ldr	r2, [pc, #424]	; (80057b0 <DMA_SetConfig+0x254>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a68      	ldr	r2, [pc, #416]	; (80057b4 <DMA_SetConfig+0x258>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a67      	ldr	r2, [pc, #412]	; (80057b8 <DMA_SetConfig+0x25c>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a65      	ldr	r2, [pc, #404]	; (80057bc <DMA_SetConfig+0x260>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a64      	ldr	r2, [pc, #400]	; (80057c0 <DMA_SetConfig+0x264>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a62      	ldr	r2, [pc, #392]	; (80057c4 <DMA_SetConfig+0x268>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a61      	ldr	r2, [pc, #388]	; (80057c8 <DMA_SetConfig+0x26c>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a5f      	ldr	r2, [pc, #380]	; (80057cc <DMA_SetConfig+0x270>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <DMA_SetConfig+0x10a>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a5e      	ldr	r2, [pc, #376]	; (80057d0 <DMA_SetConfig+0x274>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <DMA_SetConfig+0x10a>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a5c      	ldr	r2, [pc, #368]	; (80057d4 <DMA_SetConfig+0x278>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <DMA_SetConfig+0x10e>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <DMA_SetConfig+0x110>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005678:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d004      	beq.n	800568c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800568a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a39      	ldr	r2, [pc, #228]	; (8005778 <DMA_SetConfig+0x21c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d04a      	beq.n	800572c <DMA_SetConfig+0x1d0>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a38      	ldr	r2, [pc, #224]	; (800577c <DMA_SetConfig+0x220>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d045      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a36      	ldr	r2, [pc, #216]	; (8005780 <DMA_SetConfig+0x224>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d040      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a35      	ldr	r2, [pc, #212]	; (8005784 <DMA_SetConfig+0x228>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d03b      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a33      	ldr	r2, [pc, #204]	; (8005788 <DMA_SetConfig+0x22c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d036      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a32      	ldr	r2, [pc, #200]	; (800578c <DMA_SetConfig+0x230>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d031      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a30      	ldr	r2, [pc, #192]	; (8005790 <DMA_SetConfig+0x234>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d02c      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <DMA_SetConfig+0x238>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d027      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a2d      	ldr	r2, [pc, #180]	; (8005798 <DMA_SetConfig+0x23c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d022      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2c      	ldr	r2, [pc, #176]	; (800579c <DMA_SetConfig+0x240>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d01d      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <DMA_SetConfig+0x244>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d018      	beq.n	800572c <DMA_SetConfig+0x1d0>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a29      	ldr	r2, [pc, #164]	; (80057a4 <DMA_SetConfig+0x248>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <DMA_SetConfig+0x1d0>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a27      	ldr	r2, [pc, #156]	; (80057a8 <DMA_SetConfig+0x24c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00e      	beq.n	800572c <DMA_SetConfig+0x1d0>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a26      	ldr	r2, [pc, #152]	; (80057ac <DMA_SetConfig+0x250>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d009      	beq.n	800572c <DMA_SetConfig+0x1d0>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <DMA_SetConfig+0x254>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d004      	beq.n	800572c <DMA_SetConfig+0x1d0>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a23      	ldr	r2, [pc, #140]	; (80057b4 <DMA_SetConfig+0x258>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <DMA_SetConfig+0x1d4>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <DMA_SetConfig+0x1d6>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d059      	beq.n	80057ea <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800573a:	f003 031f 	and.w	r3, r3, #31
 800573e:	223f      	movs	r2, #63	; 0x3f
 8005740:	409a      	lsls	r2, r3
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005754:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	683a      	ldr	r2, [r7, #0]
 800575c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	2b40      	cmp	r3, #64	; 0x40
 8005764:	d138      	bne.n	80057d8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005776:	e086      	b.n	8005886 <DMA_SetConfig+0x32a>
 8005778:	40020010 	.word	0x40020010
 800577c:	40020028 	.word	0x40020028
 8005780:	40020040 	.word	0x40020040
 8005784:	40020058 	.word	0x40020058
 8005788:	40020070 	.word	0x40020070
 800578c:	40020088 	.word	0x40020088
 8005790:	400200a0 	.word	0x400200a0
 8005794:	400200b8 	.word	0x400200b8
 8005798:	40020410 	.word	0x40020410
 800579c:	40020428 	.word	0x40020428
 80057a0:	40020440 	.word	0x40020440
 80057a4:	40020458 	.word	0x40020458
 80057a8:	40020470 	.word	0x40020470
 80057ac:	40020488 	.word	0x40020488
 80057b0:	400204a0 	.word	0x400204a0
 80057b4:	400204b8 	.word	0x400204b8
 80057b8:	58025408 	.word	0x58025408
 80057bc:	5802541c 	.word	0x5802541c
 80057c0:	58025430 	.word	0x58025430
 80057c4:	58025444 	.word	0x58025444
 80057c8:	58025458 	.word	0x58025458
 80057cc:	5802546c 	.word	0x5802546c
 80057d0:	58025480 	.word	0x58025480
 80057d4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]
}
 80057e8:	e04d      	b.n	8005886 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a29      	ldr	r2, [pc, #164]	; (8005894 <DMA_SetConfig+0x338>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d022      	beq.n	800583a <DMA_SetConfig+0x2de>
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <DMA_SetConfig+0x33c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d01d      	beq.n	800583a <DMA_SetConfig+0x2de>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a26      	ldr	r2, [pc, #152]	; (800589c <DMA_SetConfig+0x340>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d018      	beq.n	800583a <DMA_SetConfig+0x2de>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <DMA_SetConfig+0x344>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d013      	beq.n	800583a <DMA_SetConfig+0x2de>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a23      	ldr	r2, [pc, #140]	; (80058a4 <DMA_SetConfig+0x348>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00e      	beq.n	800583a <DMA_SetConfig+0x2de>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <DMA_SetConfig+0x34c>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d009      	beq.n	800583a <DMA_SetConfig+0x2de>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a20      	ldr	r2, [pc, #128]	; (80058ac <DMA_SetConfig+0x350>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d004      	beq.n	800583a <DMA_SetConfig+0x2de>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <DMA_SetConfig+0x354>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d101      	bne.n	800583e <DMA_SetConfig+0x2e2>
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <DMA_SetConfig+0x2e4>
 800583e:	2300      	movs	r3, #0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d020      	beq.n	8005886 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	f003 031f 	and.w	r3, r3, #31
 800584c:	2201      	movs	r2, #1
 800584e:	409a      	lsls	r2, r3
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	683a      	ldr	r2, [r7, #0]
 800585a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b40      	cmp	r3, #64	; 0x40
 8005862:	d108      	bne.n	8005876 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	60da      	str	r2, [r3, #12]
}
 8005874:	e007      	b.n	8005886 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	60da      	str	r2, [r3, #12]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	58025408 	.word	0x58025408
 8005898:	5802541c 	.word	0x5802541c
 800589c:	58025430 	.word	0x58025430
 80058a0:	58025444 	.word	0x58025444
 80058a4:	58025458 	.word	0x58025458
 80058a8:	5802546c 	.word	0x5802546c
 80058ac:	58025480 	.word	0x58025480
 80058b0:	58025494 	.word	0x58025494

080058b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a42      	ldr	r2, [pc, #264]	; (80059cc <DMA_CalcBaseAndBitshift+0x118>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d04a      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a41      	ldr	r2, [pc, #260]	; (80059d0 <DMA_CalcBaseAndBitshift+0x11c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d045      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a3f      	ldr	r2, [pc, #252]	; (80059d4 <DMA_CalcBaseAndBitshift+0x120>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d040      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a3e      	ldr	r2, [pc, #248]	; (80059d8 <DMA_CalcBaseAndBitshift+0x124>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d03b      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a3c      	ldr	r2, [pc, #240]	; (80059dc <DMA_CalcBaseAndBitshift+0x128>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d036      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a3b      	ldr	r2, [pc, #236]	; (80059e0 <DMA_CalcBaseAndBitshift+0x12c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d031      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a39      	ldr	r2, [pc, #228]	; (80059e4 <DMA_CalcBaseAndBitshift+0x130>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d02c      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a38      	ldr	r2, [pc, #224]	; (80059e8 <DMA_CalcBaseAndBitshift+0x134>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d027      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a36      	ldr	r2, [pc, #216]	; (80059ec <DMA_CalcBaseAndBitshift+0x138>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d022      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a35      	ldr	r2, [pc, #212]	; (80059f0 <DMA_CalcBaseAndBitshift+0x13c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d01d      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <DMA_CalcBaseAndBitshift+0x140>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d018      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a32      	ldr	r2, [pc, #200]	; (80059f8 <DMA_CalcBaseAndBitshift+0x144>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d013      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a30      	ldr	r2, [pc, #192]	; (80059fc <DMA_CalcBaseAndBitshift+0x148>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d00e      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a2f      	ldr	r2, [pc, #188]	; (8005a00 <DMA_CalcBaseAndBitshift+0x14c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d009      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a2d      	ldr	r2, [pc, #180]	; (8005a04 <DMA_CalcBaseAndBitshift+0x150>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d004      	beq.n	800595c <DMA_CalcBaseAndBitshift+0xa8>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <DMA_CalcBaseAndBitshift+0x154>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d101      	bne.n	8005960 <DMA_CalcBaseAndBitshift+0xac>
 800595c:	2301      	movs	r3, #1
 800595e:	e000      	b.n	8005962 <DMA_CalcBaseAndBitshift+0xae>
 8005960:	2300      	movs	r3, #0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d024      	beq.n	80059b0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	3b10      	subs	r3, #16
 800596e:	4a27      	ldr	r2, [pc, #156]	; (8005a0c <DMA_CalcBaseAndBitshift+0x158>)
 8005970:	fba2 2303 	umull	r2, r3, r2, r3
 8005974:	091b      	lsrs	r3, r3, #4
 8005976:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	4a24      	ldr	r2, [pc, #144]	; (8005a10 <DMA_CalcBaseAndBitshift+0x15c>)
 8005980:	5cd3      	ldrb	r3, [r2, r3]
 8005982:	461a      	mov	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d908      	bls.n	80059a0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	461a      	mov	r2, r3
 8005994:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <DMA_CalcBaseAndBitshift+0x160>)
 8005996:	4013      	ands	r3, r2
 8005998:	1d1a      	adds	r2, r3, #4
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	659a      	str	r2, [r3, #88]	; 0x58
 800599e:	e00d      	b.n	80059bc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <DMA_CalcBaseAndBitshift+0x160>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6593      	str	r3, [r2, #88]	; 0x58
 80059ae:	e005      	b.n	80059bc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	40020010 	.word	0x40020010
 80059d0:	40020028 	.word	0x40020028
 80059d4:	40020040 	.word	0x40020040
 80059d8:	40020058 	.word	0x40020058
 80059dc:	40020070 	.word	0x40020070
 80059e0:	40020088 	.word	0x40020088
 80059e4:	400200a0 	.word	0x400200a0
 80059e8:	400200b8 	.word	0x400200b8
 80059ec:	40020410 	.word	0x40020410
 80059f0:	40020428 	.word	0x40020428
 80059f4:	40020440 	.word	0x40020440
 80059f8:	40020458 	.word	0x40020458
 80059fc:	40020470 	.word	0x40020470
 8005a00:	40020488 	.word	0x40020488
 8005a04:	400204a0 	.word	0x400204a0
 8005a08:	400204b8 	.word	0x400204b8
 8005a0c:	aaaaaaab 	.word	0xaaaaaaab
 8005a10:	0800dae4 	.word	0x0800dae4
 8005a14:	fffffc00 	.word	0xfffffc00

08005a18 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d120      	bne.n	8005a6e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	2b03      	cmp	r3, #3
 8005a32:	d858      	bhi.n	8005ae6 <DMA_CheckFifoParam+0xce>
 8005a34:	a201      	add	r2, pc, #4	; (adr r2, 8005a3c <DMA_CheckFifoParam+0x24>)
 8005a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a3a:	bf00      	nop
 8005a3c:	08005a4d 	.word	0x08005a4d
 8005a40:	08005a5f 	.word	0x08005a5f
 8005a44:	08005a4d 	.word	0x08005a4d
 8005a48:	08005ae7 	.word	0x08005ae7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d048      	beq.n	8005aea <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a5c:	e045      	b.n	8005aea <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a66:	d142      	bne.n	8005aee <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005a6c:	e03f      	b.n	8005aee <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a76:	d123      	bne.n	8005ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7c:	2b03      	cmp	r3, #3
 8005a7e:	d838      	bhi.n	8005af2 <DMA_CheckFifoParam+0xda>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <DMA_CheckFifoParam+0x70>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005a99 	.word	0x08005a99
 8005a8c:	08005a9f 	.word	0x08005a9f
 8005a90:	08005a99 	.word	0x08005a99
 8005a94:	08005ab1 	.word	0x08005ab1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	73fb      	strb	r3, [r7, #15]
        break;
 8005a9c:	e030      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d025      	beq.n	8005af6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005aae:	e022      	b.n	8005af6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ab8:	d11f      	bne.n	8005afa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005abe:	e01c      	b.n	8005afa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d902      	bls.n	8005ace <DMA_CheckFifoParam+0xb6>
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d003      	beq.n	8005ad4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005acc:	e018      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ad2:	e015      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8005ae4:	e00b      	b.n	8005afe <DMA_CheckFifoParam+0xe6>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e00a      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        break;
 8005aea:	bf00      	nop
 8005aec:	e008      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        break;
 8005aee:	bf00      	nop
 8005af0:	e006      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        break;
 8005af2:	bf00      	nop
 8005af4:	e004      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        break;
 8005af6:	bf00      	nop
 8005af8:	e002      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
        break;
 8005afa:	bf00      	nop
 8005afc:	e000      	b.n	8005b00 <DMA_CheckFifoParam+0xe8>
    break;
 8005afe:	bf00      	nop
    }
  }

  return status;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3714      	adds	r7, #20
 8005b06:	46bd      	mov	sp, r7
 8005b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0c:	4770      	bx	lr
 8005b0e:	bf00      	nop

08005b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a38      	ldr	r2, [pc, #224]	; (8005c04 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d022      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a36      	ldr	r2, [pc, #216]	; (8005c08 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d01d      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d018      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a33      	ldr	r2, [pc, #204]	; (8005c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a32      	ldr	r2, [pc, #200]	; (8005c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00e      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d009      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d004      	beq.n	8005b6e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d101      	bne.n	8005b72 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	3b08      	subs	r3, #8
 8005b80:	4a28      	ldr	r2, [pc, #160]	; (8005c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	091b      	lsrs	r3, r3, #4
 8005b88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f003 031f 	and.w	r3, r3, #31
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005bac:	e024      	b.n	8005bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	3b10      	subs	r3, #16
 8005bb6:	4a1e      	ldr	r2, [pc, #120]	; (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d806      	bhi.n	8005bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d902      	bls.n	8005bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	3308      	adds	r3, #8
 8005bd4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4b18      	ldr	r3, [pc, #96]	; (8005c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	461a      	mov	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	4a16      	ldr	r2, [pc, #88]	; (8005c40 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005be8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 031f 	and.w	r3, r3, #31
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	58025408 	.word	0x58025408
 8005c08:	5802541c 	.word	0x5802541c
 8005c0c:	58025430 	.word	0x58025430
 8005c10:	58025444 	.word	0x58025444
 8005c14:	58025458 	.word	0x58025458
 8005c18:	5802546c 	.word	0x5802546c
 8005c1c:	58025480 	.word	0x58025480
 8005c20:	58025494 	.word	0x58025494
 8005c24:	cccccccd 	.word	0xcccccccd
 8005c28:	16009600 	.word	0x16009600
 8005c2c:	58025880 	.word	0x58025880
 8005c30:	aaaaaaab 	.word	0xaaaaaaab
 8005c34:	400204b8 	.word	0x400204b8
 8005c38:	4002040f 	.word	0x4002040f
 8005c3c:	10008200 	.word	0x10008200
 8005c40:	40020880 	.word	0x40020880

08005c44 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d04a      	beq.n	8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d847      	bhi.n	8005cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a25      	ldr	r2, [pc, #148]	; (8005cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d022      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d01d      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d018      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a1f      	ldr	r2, [pc, #124]	; (8005d0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d00e      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d009      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d004      	beq.n	8005cb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d101      	bne.n	8005cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	e000      	b.n	8005cb6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4b17      	ldr	r3, [pc, #92]	; (8005d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ccc:	671a      	str	r2, [r3, #112]	; 0x70
 8005cce:	e009      	b.n	8005ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4b14      	ldr	r3, [pc, #80]	; (8005d24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a11      	ldr	r2, [pc, #68]	; (8005d28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ce2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	2201      	movs	r2, #1
 8005cea:	409a      	lsls	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005cf0:	bf00      	nop
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	58025408 	.word	0x58025408
 8005d00:	5802541c 	.word	0x5802541c
 8005d04:	58025430 	.word	0x58025430
 8005d08:	58025444 	.word	0x58025444
 8005d0c:	58025458 	.word	0x58025458
 8005d10:	5802546c 	.word	0x5802546c
 8005d14:	58025480 	.word	0x58025480
 8005d18:	58025494 	.word	0x58025494
 8005d1c:	1600963f 	.word	0x1600963f
 8005d20:	58025940 	.word	0x58025940
 8005d24:	1000823f 	.word	0x1000823f
 8005d28:	40020940 	.word	0x40020940

08005d2c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	7a1b      	ldrb	r3, [r3, #8]
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d155      	bne.n	8005df2 <HAL_DMAEx_ConfigMuxSync+0xc6>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a4b      	ldr	r2, [pc, #300]	; (8005e78 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d049      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a49      	ldr	r2, [pc, #292]	; (8005e7c <HAL_DMAEx_ConfigMuxSync+0x150>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d044      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a48      	ldr	r2, [pc, #288]	; (8005e80 <HAL_DMAEx_ConfigMuxSync+0x154>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d03f      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a46      	ldr	r2, [pc, #280]	; (8005e84 <HAL_DMAEx_ConfigMuxSync+0x158>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d03a      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a45      	ldr	r2, [pc, #276]	; (8005e88 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d035      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a43      	ldr	r2, [pc, #268]	; (8005e8c <HAL_DMAEx_ConfigMuxSync+0x160>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d030      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a42      	ldr	r2, [pc, #264]	; (8005e90 <HAL_DMAEx_ConfigMuxSync+0x164>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d02b      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a40      	ldr	r2, [pc, #256]	; (8005e94 <HAL_DMAEx_ConfigMuxSync+0x168>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d026      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a3f      	ldr	r2, [pc, #252]	; (8005e98 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d021      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a3d      	ldr	r2, [pc, #244]	; (8005e9c <HAL_DMAEx_ConfigMuxSync+0x170>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d01c      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a3c      	ldr	r2, [pc, #240]	; (8005ea0 <HAL_DMAEx_ConfigMuxSync+0x174>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d017      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a3a      	ldr	r2, [pc, #232]	; (8005ea4 <HAL_DMAEx_ConfigMuxSync+0x178>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d012      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a39      	ldr	r2, [pc, #228]	; (8005ea8 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d00d      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a37      	ldr	r2, [pc, #220]	; (8005eac <HAL_DMAEx_ConfigMuxSync+0x180>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d008      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a36      	ldr	r2, [pc, #216]	; (8005eb0 <HAL_DMAEx_ConfigMuxSync+0x184>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <HAL_DMAEx_ConfigMuxSync+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a34      	ldr	r2, [pc, #208]	; (8005eb4 <HAL_DMAEx_ConfigMuxSync+0x188>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bf00      	nop
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d131      	bne.n	8005e62 <HAL_DMAEx_ConfigMuxSync+0x136>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d101      	bne.n	8005e0c <HAL_DMAEx_ConfigMuxSync+0xe0>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e02f      	b.n	8005e6c <HAL_DMAEx_ConfigMuxSync+0x140>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1e:	f422 3281 	bic.w	r2, r2, #66048	; 0x10200
 8005e22:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	b2d9      	uxtb	r1, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	061a      	lsls	r2, r3, #24
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	04db      	lsls	r3, r3, #19
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	431a      	orrs	r2, r3
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	7a1b      	ldrb	r3, [r3, #8]
 8005e42:	041b      	lsls	r3, r3, #16
 8005e44:	431a      	orrs	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	7a5b      	ldrb	r3, [r3, #9]
 8005e4a:	025b      	lsls	r3, r3, #9
 8005e4c:	431a      	orrs	r2, r3
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e52:	430a      	orrs	r2, r1
 8005e54:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e004      	b.n	8005e6c <HAL_DMAEx_ConfigMuxSync+0x140>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
  }
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8

08005eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ec6:	4b89      	ldr	r3, [pc, #548]	; (80060ec <HAL_GPIO_Init+0x234>)
 8005ec8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005eca:	e194      	b.n	80061f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2101      	movs	r1, #1
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed8:	4013      	ands	r3, r2
 8005eda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	f000 8186 	beq.w	80061f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d005      	beq.n	8005efc <HAL_GPIO_Init+0x44>
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0303 	and.w	r3, r3, #3
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d130      	bne.n	8005f5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	005b      	lsls	r3, r3, #1
 8005f06:	2203      	movs	r2, #3
 8005f08:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68da      	ldr	r2, [r3, #12]
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	005b      	lsls	r3, r3, #1
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f32:	2201      	movs	r2, #1
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3a:	43db      	mvns	r3, r3
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	091b      	lsrs	r3, r3, #4
 8005f48:	f003 0201 	and.w	r2, r3, #1
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	2b03      	cmp	r3, #3
 8005f68:	d017      	beq.n	8005f9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68db      	ldr	r3, [r3, #12]
 8005f6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	2203      	movs	r2, #3
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	43db      	mvns	r3, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4013      	ands	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	689a      	ldr	r2, [r3, #8]
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	69ba      	ldr	r2, [r7, #24]
 8005f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d123      	bne.n	8005fee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	08da      	lsrs	r2, r3, #3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3208      	adds	r2, #8
 8005fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	220f      	movs	r2, #15
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	69ba      	ldr	r2, [r7, #24]
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	f003 0307 	and.w	r3, r3, #7
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	08da      	lsrs	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3208      	adds	r2, #8
 8005fe8:	69b9      	ldr	r1, [r7, #24]
 8005fea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	2203      	movs	r2, #3
 8005ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f003 0203 	and.w	r2, r3, #3
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	fa02 f303 	lsl.w	r3, r2, r3
 8006016:	69ba      	ldr	r2, [r7, #24]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 80e0 	beq.w	80061f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006030:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <HAL_GPIO_Init+0x238>)
 8006032:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006036:	4a2e      	ldr	r2, [pc, #184]	; (80060f0 <HAL_GPIO_Init+0x238>)
 8006038:	f043 0302 	orr.w	r3, r3, #2
 800603c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006040:	4b2b      	ldr	r3, [pc, #172]	; (80060f0 <HAL_GPIO_Init+0x238>)
 8006042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006046:	f003 0302 	and.w	r3, r3, #2
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800604e:	4a29      	ldr	r2, [pc, #164]	; (80060f4 <HAL_GPIO_Init+0x23c>)
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	089b      	lsrs	r3, r3, #2
 8006054:	3302      	adds	r3, #2
 8006056:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	220f      	movs	r2, #15
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	43db      	mvns	r3, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4013      	ands	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <HAL_GPIO_Init+0x240>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d052      	beq.n	8006120 <HAL_GPIO_Init+0x268>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1f      	ldr	r2, [pc, #124]	; (80060fc <HAL_GPIO_Init+0x244>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d031      	beq.n	80060e6 <HAL_GPIO_Init+0x22e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1e      	ldr	r2, [pc, #120]	; (8006100 <HAL_GPIO_Init+0x248>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d02b      	beq.n	80060e2 <HAL_GPIO_Init+0x22a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1d      	ldr	r2, [pc, #116]	; (8006104 <HAL_GPIO_Init+0x24c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d025      	beq.n	80060de <HAL_GPIO_Init+0x226>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1c      	ldr	r2, [pc, #112]	; (8006108 <HAL_GPIO_Init+0x250>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01f      	beq.n	80060da <HAL_GPIO_Init+0x222>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <HAL_GPIO_Init+0x254>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d019      	beq.n	80060d6 <HAL_GPIO_Init+0x21e>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <HAL_GPIO_Init+0x258>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_GPIO_Init+0x21a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a19      	ldr	r2, [pc, #100]	; (8006114 <HAL_GPIO_Init+0x25c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00d      	beq.n	80060ce <HAL_GPIO_Init+0x216>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_GPIO_Init+0x260>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d007      	beq.n	80060ca <HAL_GPIO_Init+0x212>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a17      	ldr	r2, [pc, #92]	; (800611c <HAL_GPIO_Init+0x264>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d101      	bne.n	80060c6 <HAL_GPIO_Init+0x20e>
 80060c2:	2309      	movs	r3, #9
 80060c4:	e02d      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060c6:	230a      	movs	r3, #10
 80060c8:	e02b      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060ca:	2308      	movs	r3, #8
 80060cc:	e029      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060ce:	2307      	movs	r3, #7
 80060d0:	e027      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060d2:	2306      	movs	r3, #6
 80060d4:	e025      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060d6:	2305      	movs	r3, #5
 80060d8:	e023      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060da:	2304      	movs	r3, #4
 80060dc:	e021      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060de:	2303      	movs	r3, #3
 80060e0:	e01f      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060e2:	2302      	movs	r3, #2
 80060e4:	e01d      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e01b      	b.n	8006122 <HAL_GPIO_Init+0x26a>
 80060ea:	bf00      	nop
 80060ec:	58000080 	.word	0x58000080
 80060f0:	58024400 	.word	0x58024400
 80060f4:	58000400 	.word	0x58000400
 80060f8:	58020000 	.word	0x58020000
 80060fc:	58020400 	.word	0x58020400
 8006100:	58020800 	.word	0x58020800
 8006104:	58020c00 	.word	0x58020c00
 8006108:	58021000 	.word	0x58021000
 800610c:	58021400 	.word	0x58021400
 8006110:	58021800 	.word	0x58021800
 8006114:	58021c00 	.word	0x58021c00
 8006118:	58022000 	.word	0x58022000
 800611c:	58022400 	.word	0x58022400
 8006120:	2300      	movs	r3, #0
 8006122:	69fa      	ldr	r2, [r7, #28]
 8006124:	f002 0203 	and.w	r2, r2, #3
 8006128:	0092      	lsls	r2, r2, #2
 800612a:	4093      	lsls	r3, r2
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006132:	4938      	ldr	r1, [pc, #224]	; (8006214 <HAL_GPIO_Init+0x35c>)
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	089b      	lsrs	r3, r3, #2
 8006138:	3302      	adds	r3, #2
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006166:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800616e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	43db      	mvns	r3, r3
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4013      	ands	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006194:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d003      	beq.n	80061c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	4313      	orrs	r3, r2
 80061be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	43db      	mvns	r3, r3
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	4013      	ands	r3, r2
 80061d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d003      	beq.n	80061ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80061e2:	69ba      	ldr	r2, [r7, #24]
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	f47f ae63 	bne.w	8005ecc <HAL_GPIO_Init+0x14>
  }
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	3724      	adds	r7, #36	; 0x24
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	58000400 	.word	0x58000400

08006218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	807b      	strh	r3, [r7, #2]
 8006224:	4613      	mov	r3, r2
 8006226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006228:	787b      	ldrb	r3, [r7, #1]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800622e:	887a      	ldrh	r2, [r7, #2]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006234:	e003      	b.n	800623e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006236:	887b      	ldrh	r3, [r7, #2]
 8006238:	041a      	lsls	r2, r3, #16
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	619a      	str	r2, [r3, #24]
}
 800623e:	bf00      	nop
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800624a:	b480      	push	{r7}
 800624c:	b085      	sub	sp, #20
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	460b      	mov	r3, r1
 8006254:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4013      	ands	r3, r2
 8006262:	041a      	lsls	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	43d9      	mvns	r1, r3
 8006268:	887b      	ldrh	r3, [r7, #2]
 800626a:	400b      	ands	r3, r1
 800626c:	431a      	orrs	r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	619a      	str	r2, [r3, #24]
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	4603      	mov	r3, r0
 8006286:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800628c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006290:	88fb      	ldrh	r3, [r7, #6]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fb fae9 	bl	800187c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80062aa:	bf00      	nop
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062bc:	4b29      	ldr	r3, [pc, #164]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	f003 0307 	and.w	r3, r3, #7
 80062c4:	2b06      	cmp	r3, #6
 80062c6:	d00a      	beq.n	80062de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062c8:	4b26      	ldr	r3, [pc, #152]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d001      	beq.n	80062da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e040      	b.n	800635c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e03e      	b.n	800635c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062de:	4b21      	ldr	r3, [pc, #132]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80062e6:	491f      	ldr	r1, [pc, #124]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062ee:	f7fb fff9 	bl	80022e4 <HAL_GetTick>
 80062f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062f4:	e009      	b.n	800630a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062f6:	f7fb fff5 	bl	80022e4 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006304:	d901      	bls.n	800630a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e028      	b.n	800635c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800630a:	4b16      	ldr	r3, [pc, #88]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006316:	d1ee      	bne.n	80062f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2b1e      	cmp	r3, #30
 800631c:	d008      	beq.n	8006330 <HAL_PWREx_ConfigSupply+0x7c>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b2e      	cmp	r3, #46	; 0x2e
 8006322:	d005      	beq.n	8006330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b1d      	cmp	r3, #29
 8006328:	d002      	beq.n	8006330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2b2d      	cmp	r3, #45	; 0x2d
 800632e:	d114      	bne.n	800635a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006330:	f7fb ffd8 	bl	80022e4 <HAL_GetTick>
 8006334:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006336:	e009      	b.n	800634c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006338:	f7fb ffd4 	bl	80022e4 <HAL_GetTick>
 800633c:	4602      	mov	r2, r0
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	1ad3      	subs	r3, r2, r3
 8006342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006346:	d901      	bls.n	800634c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e007      	b.n	800635c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_PWREx_ConfigSupply+0xb0>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006358:	d1ee      	bne.n	8006338 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	58024800 	.word	0x58024800

08006368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08c      	sub	sp, #48	; 0x30
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f000 bc48 	b.w	8006c0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8088 	beq.w	800649a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800638a:	4b99      	ldr	r3, [pc, #612]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006394:	4b96      	ldr	r3, [pc, #600]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b10      	cmp	r3, #16
 800639e:	d007      	beq.n	80063b0 <HAL_RCC_OscConfig+0x48>
 80063a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a2:	2b18      	cmp	r3, #24
 80063a4:	d111      	bne.n	80063ca <HAL_RCC_OscConfig+0x62>
 80063a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a8:	f003 0303 	and.w	r3, r3, #3
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d10c      	bne.n	80063ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b0:	4b8f      	ldr	r3, [pc, #572]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d06d      	beq.n	8006498 <HAL_RCC_OscConfig+0x130>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d169      	bne.n	8006498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	f000 bc21 	b.w	8006c0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d2:	d106      	bne.n	80063e2 <HAL_RCC_OscConfig+0x7a>
 80063d4:	4b86      	ldr	r3, [pc, #536]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a85      	ldr	r2, [pc, #532]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	e02e      	b.n	8006440 <HAL_RCC_OscConfig+0xd8>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10c      	bne.n	8006404 <HAL_RCC_OscConfig+0x9c>
 80063ea:	4b81      	ldr	r3, [pc, #516]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a80      	ldr	r2, [pc, #512]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063f4:	6013      	str	r3, [r2, #0]
 80063f6:	4b7e      	ldr	r3, [pc, #504]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a7d      	ldr	r2, [pc, #500]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80063fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006400:	6013      	str	r3, [r2, #0]
 8006402:	e01d      	b.n	8006440 <HAL_RCC_OscConfig+0xd8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800640c:	d10c      	bne.n	8006428 <HAL_RCC_OscConfig+0xc0>
 800640e:	4b78      	ldr	r3, [pc, #480]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a77      	ldr	r2, [pc, #476]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4b75      	ldr	r3, [pc, #468]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a74      	ldr	r2, [pc, #464]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006424:	6013      	str	r3, [r2, #0]
 8006426:	e00b      	b.n	8006440 <HAL_RCC_OscConfig+0xd8>
 8006428:	4b71      	ldr	r3, [pc, #452]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a70      	ldr	r2, [pc, #448]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800642e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006432:	6013      	str	r3, [r2, #0]
 8006434:	4b6e      	ldr	r3, [pc, #440]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a6d      	ldr	r2, [pc, #436]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800643a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800643e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d013      	beq.n	8006470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006448:	f7fb ff4c 	bl	80022e4 <HAL_GetTick>
 800644c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800644e:	e008      	b.n	8006462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006450:	f7fb ff48 	bl	80022e4 <HAL_GetTick>
 8006454:	4602      	mov	r2, r0
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	1ad3      	subs	r3, r2, r3
 800645a:	2b64      	cmp	r3, #100	; 0x64
 800645c:	d901      	bls.n	8006462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e3d4      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006462:	4b63      	ldr	r3, [pc, #396]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f0      	beq.n	8006450 <HAL_RCC_OscConfig+0xe8>
 800646e:	e014      	b.n	800649a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006470:	f7fb ff38 	bl	80022e4 <HAL_GetTick>
 8006474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006476:	e008      	b.n	800648a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006478:	f7fb ff34 	bl	80022e4 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	2b64      	cmp	r3, #100	; 0x64
 8006484:	d901      	bls.n	800648a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006486:	2303      	movs	r3, #3
 8006488:	e3c0      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800648a:	4b59      	ldr	r3, [pc, #356]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1f0      	bne.n	8006478 <HAL_RCC_OscConfig+0x110>
 8006496:	e000      	b.n	800649a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 80ca 	beq.w	800663c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064a8:	4b51      	ldr	r3, [pc, #324]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064b2:	4b4f      	ldr	r3, [pc, #316]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_RCC_OscConfig+0x166>
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2b18      	cmp	r3, #24
 80064c2:	d156      	bne.n	8006572 <HAL_RCC_OscConfig+0x20a>
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d151      	bne.n	8006572 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064ce:	4b48      	ldr	r3, [pc, #288]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0304 	and.w	r3, r3, #4
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d005      	beq.n	80064e6 <HAL_RCC_OscConfig+0x17e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	68db      	ldr	r3, [r3, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e392      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064e6:	4b42      	ldr	r3, [pc, #264]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 0219 	bic.w	r2, r3, #25
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	493f      	ldr	r1, [pc, #252]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80064f4:	4313      	orrs	r3, r2
 80064f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f8:	f7fb fef4 	bl	80022e4 <HAL_GetTick>
 80064fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80064fe:	e008      	b.n	8006512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006500:	f7fb fef0 	bl	80022e4 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e37c      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006512:	4b37      	ldr	r3, [pc, #220]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0304 	and.w	r3, r3, #4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d0f0      	beq.n	8006500 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800651e:	f7fb ff11 	bl	8002344 <HAL_GetREVID>
 8006522:	4603      	mov	r3, r0
 8006524:	f241 0203 	movw	r2, #4099	; 0x1003
 8006528:	4293      	cmp	r3, r2
 800652a:	d817      	bhi.n	800655c <HAL_RCC_OscConfig+0x1f4>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d108      	bne.n	8006546 <HAL_RCC_OscConfig+0x1de>
 8006534:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800653c:	4a2c      	ldr	r2, [pc, #176]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800653e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006542:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006544:	e07a      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006546:	4b2a      	ldr	r3, [pc, #168]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	031b      	lsls	r3, r3, #12
 8006554:	4926      	ldr	r1, [pc, #152]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006556:	4313      	orrs	r3, r2
 8006558:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800655a:	e06f      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800655c:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	061b      	lsls	r3, r3, #24
 800656a:	4921      	ldr	r1, [pc, #132]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800656c:	4313      	orrs	r3, r2
 800656e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006570:	e064      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d047      	beq.n	800660a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800657a:	4b1d      	ldr	r3, [pc, #116]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f023 0219 	bic.w	r2, r3, #25
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	491a      	ldr	r1, [pc, #104]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 8006588:	4313      	orrs	r3, r2
 800658a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fb feaa 	bl	80022e4 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006594:	f7fb fea6 	bl	80022e4 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e332      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065a6:	4b12      	ldr	r3, [pc, #72]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f003 0304 	and.w	r3, r3, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b2:	f7fb fec7 	bl	8002344 <HAL_GetREVID>
 80065b6:	4603      	mov	r3, r0
 80065b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80065bc:	4293      	cmp	r3, r2
 80065be:	d819      	bhi.n	80065f4 <HAL_RCC_OscConfig+0x28c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	2b40      	cmp	r3, #64	; 0x40
 80065c6:	d108      	bne.n	80065da <HAL_RCC_OscConfig+0x272>
 80065c8:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065d0:	4a07      	ldr	r2, [pc, #28]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80065d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065d6:	6053      	str	r3, [r2, #4]
 80065d8:	e030      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	031b      	lsls	r3, r3, #12
 80065e8:	4901      	ldr	r1, [pc, #4]	; (80065f0 <HAL_RCC_OscConfig+0x288>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	604b      	str	r3, [r1, #4]
 80065ee:	e025      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
 80065f0:	58024400 	.word	0x58024400
 80065f4:	4b9a      	ldr	r3, [pc, #616]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	4997      	ldr	r1, [pc, #604]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
 8006608:	e018      	b.n	800663c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660a:	4b95      	ldr	r3, [pc, #596]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a94      	ldr	r2, [pc, #592]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006616:	f7fb fe65 	bl	80022e4 <HAL_GetTick>
 800661a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800661c:	e008      	b.n	8006630 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800661e:	f7fb fe61 	bl	80022e4 <HAL_GetTick>
 8006622:	4602      	mov	r2, r0
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	1ad3      	subs	r3, r2, r3
 8006628:	2b02      	cmp	r3, #2
 800662a:	d901      	bls.n	8006630 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	e2ed      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006630:	4b8b      	ldr	r3, [pc, #556]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1f0      	bne.n	800661e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a9 	beq.w	800679c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800664a:	4b85      	ldr	r3, [pc, #532]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006652:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006654:	4b82      	ldr	r3, [pc, #520]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	2b08      	cmp	r3, #8
 800665e:	d007      	beq.n	8006670 <HAL_RCC_OscConfig+0x308>
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2b18      	cmp	r3, #24
 8006664:	d13a      	bne.n	80066dc <HAL_RCC_OscConfig+0x374>
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b01      	cmp	r3, #1
 800666e:	d135      	bne.n	80066dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006670:	4b7b      	ldr	r3, [pc, #492]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d005      	beq.n	8006688 <HAL_RCC_OscConfig+0x320>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	69db      	ldr	r3, [r3, #28]
 8006680:	2b80      	cmp	r3, #128	; 0x80
 8006682:	d001      	beq.n	8006688 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006684:	2301      	movs	r3, #1
 8006686:	e2c1      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006688:	f7fb fe5c 	bl	8002344 <HAL_GetREVID>
 800668c:	4603      	mov	r3, r0
 800668e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006692:	4293      	cmp	r3, r2
 8006694:	d817      	bhi.n	80066c6 <HAL_RCC_OscConfig+0x35e>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	2b20      	cmp	r3, #32
 800669c:	d108      	bne.n	80066b0 <HAL_RCC_OscConfig+0x348>
 800669e:	4b70      	ldr	r3, [pc, #448]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066a6:	4a6e      	ldr	r2, [pc, #440]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066ae:	e075      	b.n	800679c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b0:	4b6b      	ldr	r3, [pc, #428]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a1b      	ldr	r3, [r3, #32]
 80066bc:	069b      	lsls	r3, r3, #26
 80066be:	4968      	ldr	r1, [pc, #416]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066c4:	e06a      	b.n	800679c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066c6:	4b66      	ldr	r3, [pc, #408]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a1b      	ldr	r3, [r3, #32]
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	4962      	ldr	r1, [pc, #392]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066da:	e05f      	b.n	800679c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d042      	beq.n	800676a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066e4:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a5d      	ldr	r2, [pc, #372]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80066ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fb fdf8 	bl	80022e4 <HAL_GetTick>
 80066f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80066f8:	f7fb fdf4 	bl	80022e4 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e280      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800670a:	4b55      	ldr	r3, [pc, #340]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	2b00      	cmp	r3, #0
 8006714:	d0f0      	beq.n	80066f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006716:	f7fb fe15 	bl	8002344 <HAL_GetREVID>
 800671a:	4603      	mov	r3, r0
 800671c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006720:	4293      	cmp	r3, r2
 8006722:	d817      	bhi.n	8006754 <HAL_RCC_OscConfig+0x3ec>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a1b      	ldr	r3, [r3, #32]
 8006728:	2b20      	cmp	r3, #32
 800672a:	d108      	bne.n	800673e <HAL_RCC_OscConfig+0x3d6>
 800672c:	4b4c      	ldr	r3, [pc, #304]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006734:	4a4a      	ldr	r2, [pc, #296]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800673a:	6053      	str	r3, [r2, #4]
 800673c:	e02e      	b.n	800679c <HAL_RCC_OscConfig+0x434>
 800673e:	4b48      	ldr	r3, [pc, #288]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	069b      	lsls	r3, r3, #26
 800674c:	4944      	ldr	r1, [pc, #272]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800674e:	4313      	orrs	r3, r2
 8006750:	604b      	str	r3, [r1, #4]
 8006752:	e023      	b.n	800679c <HAL_RCC_OscConfig+0x434>
 8006754:	4b42      	ldr	r3, [pc, #264]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	061b      	lsls	r3, r3, #24
 8006762:	493f      	ldr	r1, [pc, #252]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006764:	4313      	orrs	r3, r2
 8006766:	60cb      	str	r3, [r1, #12]
 8006768:	e018      	b.n	800679c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800676a:	4b3d      	ldr	r3, [pc, #244]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a3c      	ldr	r2, [pc, #240]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006776:	f7fb fdb5 	bl	80022e4 <HAL_GetTick>
 800677a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800677e:	f7fb fdb1 	bl	80022e4 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e23d      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006790:	4b33      	ldr	r3, [pc, #204]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f0      	bne.n	800677e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0308 	and.w	r3, r3, #8
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d036      	beq.n	8006816 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d019      	beq.n	80067e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b0:	4b2b      	ldr	r3, [pc, #172]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80067b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067b4:	4a2a      	ldr	r2, [pc, #168]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067bc:	f7fb fd92 	bl	80022e4 <HAL_GetTick>
 80067c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067c4:	f7fb fd8e 	bl	80022e4 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e21a      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067d6:	4b22      	ldr	r3, [pc, #136]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80067d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d0f0      	beq.n	80067c4 <HAL_RCC_OscConfig+0x45c>
 80067e2:	e018      	b.n	8006816 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067e4:	4b1e      	ldr	r3, [pc, #120]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80067e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e8:	4a1d      	ldr	r2, [pc, #116]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 80067ea:	f023 0301 	bic.w	r3, r3, #1
 80067ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f0:	f7fb fd78 	bl	80022e4 <HAL_GetTick>
 80067f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067f6:	e008      	b.n	800680a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067f8:	f7fb fd74 	bl	80022e4 <HAL_GetTick>
 80067fc:	4602      	mov	r2, r0
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	2b02      	cmp	r3, #2
 8006804:	d901      	bls.n	800680a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e200      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800680c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1f0      	bne.n	80067f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d039      	beq.n	8006896 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d01c      	beq.n	8006864 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800682a:	4b0d      	ldr	r3, [pc, #52]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a0c      	ldr	r2, [pc, #48]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006836:	f7fb fd55 	bl	80022e4 <HAL_GetTick>
 800683a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800683c:	e008      	b.n	8006850 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800683e:	f7fb fd51 	bl	80022e4 <HAL_GetTick>
 8006842:	4602      	mov	r2, r0
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	1ad3      	subs	r3, r2, r3
 8006848:	2b02      	cmp	r3, #2
 800684a:	d901      	bls.n	8006850 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e1dd      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006850:	4b03      	ldr	r3, [pc, #12]	; (8006860 <HAL_RCC_OscConfig+0x4f8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d0f0      	beq.n	800683e <HAL_RCC_OscConfig+0x4d6>
 800685c:	e01b      	b.n	8006896 <HAL_RCC_OscConfig+0x52e>
 800685e:	bf00      	nop
 8006860:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006864:	4b9b      	ldr	r3, [pc, #620]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a9a      	ldr	r2, [pc, #616]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 800686a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006870:	f7fb fd38 	bl	80022e4 <HAL_GetTick>
 8006874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006876:	e008      	b.n	800688a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006878:	f7fb fd34 	bl	80022e4 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	2b02      	cmp	r3, #2
 8006884:	d901      	bls.n	800688a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e1c0      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800688a:	4b92      	ldr	r3, [pc, #584]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1f0      	bne.n	8006878 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 8081 	beq.w	80069a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068a4:	4b8c      	ldr	r3, [pc, #560]	; (8006ad8 <HAL_RCC_OscConfig+0x770>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a8b      	ldr	r2, [pc, #556]	; (8006ad8 <HAL_RCC_OscConfig+0x770>)
 80068aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068b0:	f7fb fd18 	bl	80022e4 <HAL_GetTick>
 80068b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068b6:	e008      	b.n	80068ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068b8:	f7fb fd14 	bl	80022e4 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	2b64      	cmp	r3, #100	; 0x64
 80068c4:	d901      	bls.n	80068ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e1a0      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ca:	4b83      	ldr	r3, [pc, #524]	; (8006ad8 <HAL_RCC_OscConfig+0x770>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d0f0      	beq.n	80068b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d106      	bne.n	80068ec <HAL_RCC_OscConfig+0x584>
 80068de:	4b7d      	ldr	r3, [pc, #500]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80068e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068e2:	4a7c      	ldr	r2, [pc, #496]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80068e4:	f043 0301 	orr.w	r3, r3, #1
 80068e8:	6713      	str	r3, [r2, #112]	; 0x70
 80068ea:	e02d      	b.n	8006948 <HAL_RCC_OscConfig+0x5e0>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10c      	bne.n	800690e <HAL_RCC_OscConfig+0x5a6>
 80068f4:	4b77      	ldr	r3, [pc, #476]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	4a76      	ldr	r2, [pc, #472]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80068fa:	f023 0301 	bic.w	r3, r3, #1
 80068fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006900:	4b74      	ldr	r3, [pc, #464]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006904:	4a73      	ldr	r2, [pc, #460]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006906:	f023 0304 	bic.w	r3, r3, #4
 800690a:	6713      	str	r3, [r2, #112]	; 0x70
 800690c:	e01c      	b.n	8006948 <HAL_RCC_OscConfig+0x5e0>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b05      	cmp	r3, #5
 8006914:	d10c      	bne.n	8006930 <HAL_RCC_OscConfig+0x5c8>
 8006916:	4b6f      	ldr	r3, [pc, #444]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a6e      	ldr	r2, [pc, #440]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 800691c:	f043 0304 	orr.w	r3, r3, #4
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
 8006922:	4b6c      	ldr	r3, [pc, #432]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	4a6b      	ldr	r2, [pc, #428]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006928:	f043 0301 	orr.w	r3, r3, #1
 800692c:	6713      	str	r3, [r2, #112]	; 0x70
 800692e:	e00b      	b.n	8006948 <HAL_RCC_OscConfig+0x5e0>
 8006930:	4b68      	ldr	r3, [pc, #416]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a67      	ldr	r2, [pc, #412]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006936:	f023 0301 	bic.w	r3, r3, #1
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
 800693c:	4b65      	ldr	r3, [pc, #404]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	4a64      	ldr	r2, [pc, #400]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006942:	f023 0304 	bic.w	r3, r3, #4
 8006946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006950:	f7fb fcc8 	bl	80022e4 <HAL_GetTick>
 8006954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006956:	e00a      	b.n	800696e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006958:	f7fb fcc4 	bl	80022e4 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e14e      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800696e:	4b59      	ldr	r3, [pc, #356]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006972:	f003 0302 	and.w	r3, r3, #2
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0ee      	beq.n	8006958 <HAL_RCC_OscConfig+0x5f0>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800697c:	f7fb fcb2 	bl	80022e4 <HAL_GetTick>
 8006980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006982:	e00a      	b.n	800699a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006984:	f7fb fcae 	bl	80022e4 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006992:	4293      	cmp	r3, r2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e138      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800699a:	4b4e      	ldr	r3, [pc, #312]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1ee      	bne.n	8006984 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	f000 812d 	beq.w	8006c0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069b0:	4b48      	ldr	r3, [pc, #288]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069b8:	2b18      	cmp	r3, #24
 80069ba:	f000 80bd 	beq.w	8006b38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	f040 809e 	bne.w	8006b04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c8:	4b42      	ldr	r3, [pc, #264]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a41      	ldr	r2, [pc, #260]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80069ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d4:	f7fb fc86 	bl	80022e4 <HAL_GetTick>
 80069d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069da:	e008      	b.n	80069ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069dc:	f7fb fc82 	bl	80022e4 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d901      	bls.n	80069ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e10e      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069ee:	4b39      	ldr	r3, [pc, #228]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069fa:	4b36      	ldr	r3, [pc, #216]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 80069fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069fe:	4b37      	ldr	r3, [pc, #220]	; (8006adc <HAL_RCC_OscConfig+0x774>)
 8006a00:	4013      	ands	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a0a:	0112      	lsls	r2, r2, #4
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	4931      	ldr	r1, [pc, #196]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	628b      	str	r3, [r1, #40]	; 0x28
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a22:	3b01      	subs	r3, #1
 8006a24:	025b      	lsls	r3, r3, #9
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	431a      	orrs	r2, r3
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	041b      	lsls	r3, r3, #16
 8006a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	061b      	lsls	r3, r3, #24
 8006a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a44:	4923      	ldr	r1, [pc, #140]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006a4a:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	4a21      	ldr	r2, [pc, #132]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a50:	f023 0301 	bic.w	r3, r3, #1
 8006a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a56:	4b1f      	ldr	r3, [pc, #124]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5a:	4b21      	ldr	r3, [pc, #132]	; (8006ae0 <HAL_RCC_OscConfig+0x778>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a62:	00d2      	lsls	r2, r2, #3
 8006a64:	491b      	ldr	r1, [pc, #108]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a6a:	4b1a      	ldr	r3, [pc, #104]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6e:	f023 020c 	bic.w	r2, r3, #12
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	4917      	ldr	r1, [pc, #92]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a7c:	4b15      	ldr	r3, [pc, #84]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a80:	f023 0202 	bic.w	r2, r3, #2
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a88:	4912      	ldr	r1, [pc, #72]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a8e:	4b11      	ldr	r3, [pc, #68]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a92:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a9a:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9e:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006aa6:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aaa:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006ab2:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab6:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006ab8:	f043 0301 	orr.w	r3, r3, #1
 8006abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <HAL_RCC_OscConfig+0x76c>)
 8006ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aca:	f7fb fc0b 	bl	80022e4 <HAL_GetTick>
 8006ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad0:	e011      	b.n	8006af6 <HAL_RCC_OscConfig+0x78e>
 8006ad2:	bf00      	nop
 8006ad4:	58024400 	.word	0x58024400
 8006ad8:	58024800 	.word	0x58024800
 8006adc:	fffffc0c 	.word	0xfffffc0c
 8006ae0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae4:	f7fb fbfe 	bl	80022e4 <HAL_GetTick>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	1ad3      	subs	r3, r2, r3
 8006aee:	2b02      	cmp	r3, #2
 8006af0:	d901      	bls.n	8006af6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e08a      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006af6:	4b47      	ldr	r3, [pc, #284]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d0f0      	beq.n	8006ae4 <HAL_RCC_OscConfig+0x77c>
 8006b02:	e082      	b.n	8006c0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b04:	4b43      	ldr	r3, [pc, #268]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a42      	ldr	r2, [pc, #264]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b10:	f7fb fbe8 	bl	80022e4 <HAL_GetTick>
 8006b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b16:	e008      	b.n	8006b2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b18:	f7fb fbe4 	bl	80022e4 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d901      	bls.n	8006b2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e070      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b2a:	4b3a      	ldr	r3, [pc, #232]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x7b0>
 8006b36:	e068      	b.n	8006c0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b38:	4b36      	ldr	r3, [pc, #216]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b3e:	4b35      	ldr	r3, [pc, #212]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d031      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f003 0203 	and.w	r2, r3, #3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d12a      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	091b      	lsrs	r3, r3, #4
 8006b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d122      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d11a      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	0a5b      	lsrs	r3, r3, #9
 8006b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d111      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	0c1b      	lsrs	r3, r3, #16
 8006b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d108      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	0e1b      	lsrs	r3, r3, #24
 8006ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e02b      	b.n	8006c0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006bb4:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d01f      	beq.n	8006c0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006bd0:	f023 0301 	bic.w	r3, r3, #1
 8006bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006bd6:	f7fb fb85 	bl	80022e4 <HAL_GetTick>
 8006bda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006bdc:	bf00      	nop
 8006bde:	f7fb fb81 	bl	80022e4 <HAL_GetTick>
 8006be2:	4602      	mov	r2, r0
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d0f9      	beq.n	8006bde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006bea:	4b0a      	ldr	r3, [pc, #40]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bee:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <HAL_RCC_OscConfig+0x8b0>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006bf6:	00d2      	lsls	r2, r2, #3
 8006bf8:	4906      	ldr	r1, [pc, #24]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006bfe:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c02:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <HAL_RCC_OscConfig+0x8ac>)
 8006c04:	f043 0301 	orr.w	r3, r3, #1
 8006c08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3730      	adds	r7, #48	; 0x30
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	58024400 	.word	0x58024400
 8006c18:	ffff0007 	.word	0xffff0007

08006c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d101      	bne.n	8006c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e19c      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006c30:	4b8a      	ldr	r3, [pc, #552]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d910      	bls.n	8006c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3e:	4b87      	ldr	r3, [pc, #540]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f023 020f 	bic.w	r2, r3, #15
 8006c46:	4985      	ldr	r1, [pc, #532]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c4e:	4b83      	ldr	r3, [pc, #524]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 030f 	and.w	r3, r3, #15
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d001      	beq.n	8006c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e184      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d010      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	691a      	ldr	r2, [r3, #16]
 8006c70:	4b7b      	ldr	r3, [pc, #492]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d908      	bls.n	8006c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c7c:	4b78      	ldr	r3, [pc, #480]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	4975      	ldr	r1, [pc, #468]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0308 	and.w	r3, r3, #8
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d010      	beq.n	8006cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	695a      	ldr	r2, [r3, #20]
 8006c9e:	4b70      	ldr	r3, [pc, #448]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d908      	bls.n	8006cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006caa:	4b6d      	ldr	r3, [pc, #436]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	496a      	ldr	r1, [pc, #424]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0310 	and.w	r3, r3, #16
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d010      	beq.n	8006cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	4b64      	ldr	r3, [pc, #400]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d908      	bls.n	8006cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cd8:	4b61      	ldr	r3, [pc, #388]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	69db      	ldr	r3, [r3, #28]
 8006cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	495e      	ldr	r1, [pc, #376]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d010      	beq.n	8006d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69da      	ldr	r2, [r3, #28]
 8006cfa:	4b59      	ldr	r3, [pc, #356]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d908      	bls.n	8006d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d06:	4b56      	ldr	r3, [pc, #344]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	4953      	ldr	r1, [pc, #332]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d14:	4313      	orrs	r3, r2
 8006d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d010      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68da      	ldr	r2, [r3, #12]
 8006d28:	4b4d      	ldr	r3, [pc, #308]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f003 030f 	and.w	r3, r3, #15
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d908      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d34:	4b4a      	ldr	r3, [pc, #296]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	699b      	ldr	r3, [r3, #24]
 8006d38:	f023 020f 	bic.w	r2, r3, #15
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4947      	ldr	r1, [pc, #284]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0301 	and.w	r3, r3, #1
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d055      	beq.n	8006dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d52:	4b43      	ldr	r3, [pc, #268]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	4940      	ldr	r1, [pc, #256]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d107      	bne.n	8006d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d6c:	4b3c      	ldr	r3, [pc, #240]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d121      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e0f6      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d107      	bne.n	8006d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d84:	4b36      	ldr	r3, [pc, #216]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d115      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	e0ea      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d9c:	4b30      	ldr	r3, [pc, #192]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d109      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e0de      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006dac:	4b2c      	ldr	r3, [pc, #176]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f003 0304 	and.w	r3, r3, #4
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e0d6      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006dbc:	4b28      	ldr	r3, [pc, #160]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f023 0207 	bic.w	r2, r3, #7
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	4925      	ldr	r1, [pc, #148]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006dce:	f7fb fa89 	bl	80022e4 <HAL_GetTick>
 8006dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd4:	e00a      	b.n	8006dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dd6:	f7fb fa85 	bl	80022e4 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d901      	bls.n	8006dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e0be      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dec:	4b1c      	ldr	r3, [pc, #112]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d1eb      	bne.n	8006dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d010      	beq.n	8006e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f003 030f 	and.w	r3, r3, #15
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d208      	bcs.n	8006e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f023 020f 	bic.w	r2, r3, #15
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	490e      	ldr	r1, [pc, #56]	; (8006e60 <HAL_RCC_ClockConfig+0x244>)
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e2c:	4b0b      	ldr	r3, [pc, #44]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 030f 	and.w	r3, r3, #15
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d214      	bcs.n	8006e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e3a:	4b08      	ldr	r3, [pc, #32]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f023 020f 	bic.w	r2, r3, #15
 8006e42:	4906      	ldr	r1, [pc, #24]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4a:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <HAL_RCC_ClockConfig+0x240>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 030f 	and.w	r3, r3, #15
 8006e52:	683a      	ldr	r2, [r7, #0]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d005      	beq.n	8006e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	e086      	b.n	8006f6a <HAL_RCC_ClockConfig+0x34e>
 8006e5c:	52002000 	.word	0x52002000
 8006e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d010      	beq.n	8006e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691a      	ldr	r2, [r3, #16]
 8006e74:	4b3f      	ldr	r3, [pc, #252]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d208      	bcs.n	8006e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e80:	4b3c      	ldr	r3, [pc, #240]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	699b      	ldr	r3, [r3, #24]
 8006e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	4939      	ldr	r1, [pc, #228]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 0308 	and.w	r3, r3, #8
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d010      	beq.n	8006ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	695a      	ldr	r2, [r3, #20]
 8006ea2:	4b34      	ldr	r3, [pc, #208]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d208      	bcs.n	8006ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006eae:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	492e      	ldr	r1, [pc, #184]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0310 	and.w	r3, r3, #16
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d010      	beq.n	8006eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d208      	bcs.n	8006eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	69db      	ldr	r3, [r3, #28]
 8006ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	4922      	ldr	r1, [pc, #136]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 0320 	and.w	r3, r3, #32
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d010      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69da      	ldr	r2, [r3, #28]
 8006efe:	4b1d      	ldr	r3, [pc, #116]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d208      	bcs.n	8006f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006f0a:	4b1a      	ldr	r3, [pc, #104]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	6a1b      	ldr	r3, [r3, #32]
 8006f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	4917      	ldr	r1, [pc, #92]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f1c:	f000 f834 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8006f20:	4602      	mov	r2, r0
 8006f22:	4b14      	ldr	r3, [pc, #80]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	0a1b      	lsrs	r3, r3, #8
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	4912      	ldr	r1, [pc, #72]	; (8006f78 <HAL_RCC_ClockConfig+0x35c>)
 8006f2e:	5ccb      	ldrb	r3, [r1, r3]
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	fa22 f303 	lsr.w	r3, r2, r3
 8006f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f3a:	4b0e      	ldr	r3, [pc, #56]	; (8006f74 <HAL_RCC_ClockConfig+0x358>)
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	f003 030f 	and.w	r3, r3, #15
 8006f42:	4a0d      	ldr	r2, [pc, #52]	; (8006f78 <HAL_RCC_ClockConfig+0x35c>)
 8006f44:	5cd3      	ldrb	r3, [r2, r3]
 8006f46:	f003 031f 	and.w	r3, r3, #31
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <HAL_RCC_ClockConfig+0x360>)
 8006f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f54:	4a0a      	ldr	r2, [pc, #40]	; (8006f80 <HAL_RCC_ClockConfig+0x364>)
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006f5a:	4b0a      	ldr	r3, [pc, #40]	; (8006f84 <HAL_RCC_ClockConfig+0x368>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f7fb f976 	bl	8002250 <HAL_InitTick>
 8006f64:	4603      	mov	r3, r0
 8006f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	58024400 	.word	0x58024400
 8006f78:	0800dad4 	.word	0x0800dad4
 8006f7c:	24000008 	.word	0x24000008
 8006f80:	24000004 	.word	0x24000004
 8006f84:	2400000c 	.word	0x2400000c

08006f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b089      	sub	sp, #36	; 0x24
 8006f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f8e:	4bb3      	ldr	r3, [pc, #716]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f96:	2b18      	cmp	r3, #24
 8006f98:	f200 8155 	bhi.w	8007246 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08007009 	.word	0x08007009
 8006fa8:	08007247 	.word	0x08007247
 8006fac:	08007247 	.word	0x08007247
 8006fb0:	08007247 	.word	0x08007247
 8006fb4:	08007247 	.word	0x08007247
 8006fb8:	08007247 	.word	0x08007247
 8006fbc:	08007247 	.word	0x08007247
 8006fc0:	08007247 	.word	0x08007247
 8006fc4:	0800702f 	.word	0x0800702f
 8006fc8:	08007247 	.word	0x08007247
 8006fcc:	08007247 	.word	0x08007247
 8006fd0:	08007247 	.word	0x08007247
 8006fd4:	08007247 	.word	0x08007247
 8006fd8:	08007247 	.word	0x08007247
 8006fdc:	08007247 	.word	0x08007247
 8006fe0:	08007247 	.word	0x08007247
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007247 	.word	0x08007247
 8006fec:	08007247 	.word	0x08007247
 8006ff0:	08007247 	.word	0x08007247
 8006ff4:	08007247 	.word	0x08007247
 8006ff8:	08007247 	.word	0x08007247
 8006ffc:	08007247 	.word	0x08007247
 8007000:	08007247 	.word	0x08007247
 8007004:	0800703b 	.word	0x0800703b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007008:	4b94      	ldr	r3, [pc, #592]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0320 	and.w	r3, r3, #32
 8007010:	2b00      	cmp	r3, #0
 8007012:	d009      	beq.n	8007028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007014:	4b91      	ldr	r3, [pc, #580]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	08db      	lsrs	r3, r3, #3
 800701a:	f003 0303 	and.w	r3, r3, #3
 800701e:	4a90      	ldr	r2, [pc, #576]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007020:	fa22 f303 	lsr.w	r3, r2, r3
 8007024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007026:	e111      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007028:	4b8d      	ldr	r3, [pc, #564]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800702a:	61bb      	str	r3, [r7, #24]
      break;
 800702c:	e10e      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800702e:	4b8d      	ldr	r3, [pc, #564]	; (8007264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007030:	61bb      	str	r3, [r7, #24]
      break;
 8007032:	e10b      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007034:	4b8c      	ldr	r3, [pc, #560]	; (8007268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007036:	61bb      	str	r3, [r7, #24]
      break;
 8007038:	e108      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800703a:	4b88      	ldr	r3, [pc, #544]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703e:	f003 0303 	and.w	r3, r3, #3
 8007042:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007044:	4b85      	ldr	r3, [pc, #532]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	091b      	lsrs	r3, r3, #4
 800704a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800704e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007050:	4b82      	ldr	r3, [pc, #520]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007054:	f003 0301 	and.w	r3, r3, #1
 8007058:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800705a:	4b80      	ldr	r3, [pc, #512]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705e:	08db      	lsrs	r3, r3, #3
 8007060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007064:	68fa      	ldr	r2, [r7, #12]
 8007066:	fb02 f303 	mul.w	r3, r2, r3
 800706a:	ee07 3a90 	vmov	s15, r3
 800706e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007072:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	f000 80e1 	beq.w	8007240 <HAL_RCC_GetSysClockFreq+0x2b8>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f000 8083 	beq.w	800718c <HAL_RCC_GetSysClockFreq+0x204>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b02      	cmp	r3, #2
 800708a:	f200 80a1 	bhi.w	80071d0 <HAL_RCC_GetSysClockFreq+0x248>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d003      	beq.n	800709c <HAL_RCC_GetSysClockFreq+0x114>
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d056      	beq.n	8007148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800709a:	e099      	b.n	80071d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800709c:	4b6f      	ldr	r3, [pc, #444]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02d      	beq.n	8007104 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80070a8:	4b6c      	ldr	r3, [pc, #432]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	08db      	lsrs	r3, r3, #3
 80070ae:	f003 0303 	and.w	r3, r3, #3
 80070b2:	4a6b      	ldr	r2, [pc, #428]	; (8007260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070d2:	4b62      	ldr	r3, [pc, #392]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070da:	ee07 3a90 	vmov	s15, r3
 80070de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070e6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007102:	e087      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800710e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007270 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007116:	4b51      	ldr	r3, [pc, #324]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800711e:	ee07 3a90 	vmov	s15, r3
 8007122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007126:	ed97 6a02 	vldr	s12, [r7, #8]
 800712a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 800712e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007136:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800713a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800713e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007146:	e065      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	ee07 3a90 	vmov	s15, r3
 800714e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007152:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007274 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800715a:	4b40      	ldr	r3, [pc, #256]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800715c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007162:	ee07 3a90 	vmov	s15, r3
 8007166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716a:	ed97 6a02 	vldr	s12, [r7, #8]
 800716e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800717a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800718a:	e043      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007196:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800719a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800719e:	4b2f      	ldr	r3, [pc, #188]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071a6:	ee07 3a90 	vmov	s15, r3
 80071aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80071b2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80071ce:	e021      	b.n	8007214 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007274 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071e2:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ea:	ee07 3a90 	vmov	s15, r3
 80071ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071f6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800726c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007202:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800720a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800720e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007212:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	0a5b      	lsrs	r3, r3, #9
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	3301      	adds	r3, #1
 8007220:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800722c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007238:	ee17 3a90 	vmov	r3, s15
 800723c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800723e:	e005      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007240:	2300      	movs	r3, #0
 8007242:	61bb      	str	r3, [r7, #24]
      break;
 8007244:	e002      	b.n	800724c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007246:	4b07      	ldr	r3, [pc, #28]	; (8007264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007248:	61bb      	str	r3, [r7, #24]
      break;
 800724a:	bf00      	nop
  }

  return sysclockfreq;
 800724c:	69bb      	ldr	r3, [r7, #24]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3724      	adds	r7, #36	; 0x24
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	58024400 	.word	0x58024400
 8007260:	03d09000 	.word	0x03d09000
 8007264:	003d0900 	.word	0x003d0900
 8007268:	017d7840 	.word	0x017d7840
 800726c:	46000000 	.word	0x46000000
 8007270:	4c742400 	.word	0x4c742400
 8007274:	4a742400 	.word	0x4a742400
 8007278:	4bbebc20 	.word	0x4bbebc20

0800727c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007282:	f7ff fe81 	bl	8006f88 <HAL_RCC_GetSysClockFreq>
 8007286:	4602      	mov	r2, r0
 8007288:	4b10      	ldr	r3, [pc, #64]	; (80072cc <HAL_RCC_GetHCLKFreq+0x50>)
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	0a1b      	lsrs	r3, r3, #8
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	490f      	ldr	r1, [pc, #60]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8007294:	5ccb      	ldrb	r3, [r1, r3]
 8007296:	f003 031f 	and.w	r3, r3, #31
 800729a:	fa22 f303 	lsr.w	r3, r2, r3
 800729e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80072a0:	4b0a      	ldr	r3, [pc, #40]	; (80072cc <HAL_RCC_GetHCLKFreq+0x50>)
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f003 030f 	and.w	r3, r3, #15
 80072a8:	4a09      	ldr	r2, [pc, #36]	; (80072d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80072aa:	5cd3      	ldrb	r3, [r2, r3]
 80072ac:	f003 031f 	and.w	r3, r3, #31
 80072b0:	687a      	ldr	r2, [r7, #4]
 80072b2:	fa22 f303 	lsr.w	r3, r2, r3
 80072b6:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ba:	4a07      	ldr	r2, [pc, #28]	; (80072d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072c0:	4b04      	ldr	r3, [pc, #16]	; (80072d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80072c2:	681b      	ldr	r3, [r3, #0]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	58024400 	.word	0x58024400
 80072d0:	0800dad4 	.word	0x0800dad4
 80072d4:	24000008 	.word	0x24000008
 80072d8:	24000004 	.word	0x24000004

080072dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072e0:	f7ff ffcc 	bl	800727c <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b06      	ldr	r3, [pc, #24]	; (8007300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4904      	ldr	r1, [pc, #16]	; (8007304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	f003 031f 	and.w	r3, r3, #31
 80072f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	58024400 	.word	0x58024400
 8007304:	0800dad4 	.word	0x0800dad4

08007308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800730c:	f7ff ffb6 	bl	800727c <HAL_RCC_GetHCLKFreq>
 8007310:	4602      	mov	r2, r0
 8007312:	4b06      	ldr	r3, [pc, #24]	; (800732c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	f003 0307 	and.w	r3, r3, #7
 800731c:	4904      	ldr	r1, [pc, #16]	; (8007330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800731e:	5ccb      	ldrb	r3, [r1, r3]
 8007320:	f003 031f 	and.w	r3, r3, #31
 8007324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007328:	4618      	mov	r0, r3
 800732a:	bd80      	pop	{r7, pc}
 800732c:	58024400 	.word	0x58024400
 8007330:	0800dad4 	.word	0x0800dad4

08007334 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007338:	b0ca      	sub	sp, #296	; 0x128
 800733a:	af00      	add	r7, sp, #0
 800733c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007340:	2300      	movs	r3, #0
 8007342:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007346:	2300      	movs	r3, #0
 8007348:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007358:	2500      	movs	r5, #0
 800735a:	ea54 0305 	orrs.w	r3, r4, r5
 800735e:	d049      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007364:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800736a:	d02f      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800736c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007370:	d828      	bhi.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007376:	d01a      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007378:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800737c:	d822      	bhi.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007382:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007386:	d007      	beq.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007388:	e01c      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800738a:	4bb8      	ldr	r3, [pc, #736]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800738c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738e:	4ab7      	ldr	r2, [pc, #732]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007394:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007396:	e01a      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800739c:	3308      	adds	r3, #8
 800739e:	2102      	movs	r1, #2
 80073a0:	4618      	mov	r0, r3
 80073a2:	f002 fb61 	bl	8009a68 <RCCEx_PLL2_Config>
 80073a6:	4603      	mov	r3, r0
 80073a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073ac:	e00f      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073b2:	3328      	adds	r3, #40	; 0x28
 80073b4:	2102      	movs	r1, #2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f002 fc08 	bl	8009bcc <RCCEx_PLL3_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80073cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073d6:	4ba5      	ldr	r3, [pc, #660]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073e4:	4aa1      	ldr	r2, [pc, #644]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6513      	str	r3, [r2, #80]	; 0x50
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80073f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8007400:	f04f 0900 	mov.w	r9, #0
 8007404:	ea58 0309 	orrs.w	r3, r8, r9
 8007408:	d047      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800740a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800740e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007410:	2b04      	cmp	r3, #4
 8007412:	d82a      	bhi.n	800746a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007431 	.word	0x08007431
 8007420:	0800743f 	.word	0x0800743f
 8007424:	08007455 	.word	0x08007455
 8007428:	08007473 	.word	0x08007473
 800742c:	08007473 	.word	0x08007473
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007430:	4b8e      	ldr	r3, [pc, #568]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	4a8d      	ldr	r2, [pc, #564]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007436:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800743a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800743c:	e01a      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800743e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007442:	3308      	adds	r3, #8
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f002 fb0e 	bl	8009a68 <RCCEx_PLL2_Config>
 800744c:	4603      	mov	r3, r0
 800744e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007452:	e00f      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007458:	3328      	adds	r3, #40	; 0x28
 800745a:	2100      	movs	r1, #0
 800745c:	4618      	mov	r0, r3
 800745e:	f002 fbb5 	bl	8009bcc <RCCEx_PLL3_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007468:	e004      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800746a:	2301      	movs	r3, #1
 800746c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007470:	e000      	b.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800747c:	4b7b      	ldr	r3, [pc, #492]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	f023 0107 	bic.w	r1, r3, #7
 8007484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748a:	4a78      	ldr	r2, [pc, #480]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800748c:	430b      	orrs	r3, r1
 800748e:	6513      	str	r3, [r2, #80]	; 0x50
 8007490:	e003      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80074a6:	f04f 0b00 	mov.w	fp, #0
 80074aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80074ae:	d04c      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ba:	d030      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80074bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074c0:	d829      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074c2:	2bc0      	cmp	r3, #192	; 0xc0
 80074c4:	d02d      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80074c6:	2bc0      	cmp	r3, #192	; 0xc0
 80074c8:	d825      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074ca:	2b80      	cmp	r3, #128	; 0x80
 80074cc:	d018      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80074ce:	2b80      	cmp	r3, #128	; 0x80
 80074d0:	d821      	bhi.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d002      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80074d6:	2b40      	cmp	r3, #64	; 0x40
 80074d8:	d007      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80074da:	e01c      	b.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b63      	ldr	r3, [pc, #396]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a62      	ldr	r2, [pc, #392]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074e8:	e01c      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80074ee:	3308      	adds	r3, #8
 80074f0:	2100      	movs	r1, #0
 80074f2:	4618      	mov	r0, r3
 80074f4:	f002 fab8 	bl	8009a68 <RCCEx_PLL2_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074fe:	e011      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007504:	3328      	adds	r3, #40	; 0x28
 8007506:	2100      	movs	r1, #0
 8007508:	4618      	mov	r0, r3
 800750a:	f002 fb5f 	bl	8009bcc <RCCEx_PLL3_Config>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007514:	e006      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800751c:	e002      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800751e:	bf00      	nop
 8007520:	e000      	b.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007524:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10a      	bne.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800752c:	4b4f      	ldr	r3, [pc, #316]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8007534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800753a:	4a4c      	ldr	r2, [pc, #304]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800753c:	430b      	orrs	r3, r1
 800753e:	6513      	str	r3, [r2, #80]	; 0x50
 8007540:	e003      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800754a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800754e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007552:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007556:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800755a:	2300      	movs	r3, #0
 800755c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007560:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8007564:	460b      	mov	r3, r1
 8007566:	4313      	orrs	r3, r2
 8007568:	d053      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800756a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800756e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007572:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007576:	d035      	beq.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007578:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800757c:	d82e      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800757e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007582:	d031      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007584:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007588:	d828      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800758a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758e:	d01a      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007590:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007594:	d822      	bhi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800759a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800759e:	d007      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80075a0:	e01c      	b.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075a2:	4b32      	ldr	r3, [pc, #200]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a6:	4a31      	ldr	r2, [pc, #196]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075ae:	e01c      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075b4:	3308      	adds	r3, #8
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f002 fa55 	bl	8009a68 <RCCEx_PLL2_Config>
 80075be:	4603      	mov	r3, r0
 80075c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80075c4:	e011      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075ca:	3328      	adds	r3, #40	; 0x28
 80075cc:	2100      	movs	r1, #0
 80075ce:	4618      	mov	r0, r3
 80075d0:	f002 fafc 	bl	8009bcc <RCCEx_PLL3_Config>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80075da:	e006      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80075e2:	e002      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075e4:	bf00      	nop
 80075e6:	e000      	b.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80075e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d10b      	bne.n	800760a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80075f2:	4b1e      	ldr	r3, [pc, #120]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80075fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80075fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007602:	4a1a      	ldr	r2, [pc, #104]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007604:	430b      	orrs	r3, r1
 8007606:	6593      	str	r3, [r2, #88]	; 0x58
 8007608:	e003      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800760a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800760e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800761e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007622:	2300      	movs	r3, #0
 8007624:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007628:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800762c:	460b      	mov	r3, r1
 800762e:	4313      	orrs	r3, r2
 8007630:	d056      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800763a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800763e:	d038      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007640:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007644:	d831      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007646:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800764a:	d034      	beq.n	80076b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800764c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007650:	d82b      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007652:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007656:	d01d      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800765c:	d825      	bhi.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d006      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007662:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007666:	d00a      	beq.n	800767e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007668:	e01f      	b.n	80076aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800766a:	bf00      	nop
 800766c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007670:	4ba2      	ldr	r3, [pc, #648]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007674:	4aa1      	ldr	r2, [pc, #644]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800767a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800767c:	e01c      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800767e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007682:	3308      	adds	r3, #8
 8007684:	2100      	movs	r1, #0
 8007686:	4618      	mov	r0, r3
 8007688:	f002 f9ee 	bl	8009a68 <RCCEx_PLL2_Config>
 800768c:	4603      	mov	r3, r0
 800768e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007692:	e011      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007698:	3328      	adds	r3, #40	; 0x28
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f002 fa95 	bl	8009bcc <RCCEx_PLL3_Config>
 80076a2:	4603      	mov	r3, r0
 80076a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80076b0:	e002      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076b2:	bf00      	nop
 80076b4:	e000      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80076b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80076c0:	4b8e      	ldr	r3, [pc, #568]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80076c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076d0:	4a8a      	ldr	r2, [pc, #552]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076d2:	430b      	orrs	r3, r1
 80076d4:	6593      	str	r3, [r2, #88]	; 0x58
 80076d6:	e003      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80076dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80076e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80076ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80076f0:	2300      	movs	r3, #0
 80076f2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80076f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80076fa:	460b      	mov	r3, r1
 80076fc:	4313      	orrs	r3, r2
 80076fe:	d03a      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007706:	2b30      	cmp	r3, #48	; 0x30
 8007708:	d01f      	beq.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800770a:	2b30      	cmp	r3, #48	; 0x30
 800770c:	d819      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800770e:	2b20      	cmp	r3, #32
 8007710:	d00c      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007712:	2b20      	cmp	r3, #32
 8007714:	d815      	bhi.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d019      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800771a:	2b10      	cmp	r3, #16
 800771c:	d111      	bne.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800771e:	4b77      	ldr	r3, [pc, #476]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	4a76      	ldr	r2, [pc, #472]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007728:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800772a:	e011      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800772c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007730:	3308      	adds	r3, #8
 8007732:	2102      	movs	r1, #2
 8007734:	4618      	mov	r0, r3
 8007736:	f002 f997 	bl	8009a68 <RCCEx_PLL2_Config>
 800773a:	4603      	mov	r3, r0
 800773c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007740:	e006      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007748:	e002      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800774a:	bf00      	nop
 800774c:	e000      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800774e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10a      	bne.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007758:	4b68      	ldr	r3, [pc, #416]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800775a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800775c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007766:	4a65      	ldr	r2, [pc, #404]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007768:	430b      	orrs	r3, r1
 800776a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800776c:	e003      	b.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007772:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800777a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007786:	2300      	movs	r3, #0
 8007788:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800778c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007790:	460b      	mov	r3, r1
 8007792:	4313      	orrs	r3, r2
 8007794:	d051      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007796:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800779a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a0:	d035      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80077a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a6:	d82e      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077ac:	d031      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80077ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80077b2:	d828      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d01a      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80077ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077be:	d822      	bhi.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80077c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c8:	d007      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80077ca:	e01c      	b.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4b4b      	ldr	r3, [pc, #300]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a4a      	ldr	r2, [pc, #296]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077d8:	e01c      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077de:	3308      	adds	r3, #8
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f002 f940 	bl	8009a68 <RCCEx_PLL2_Config>
 80077e8:	4603      	mov	r3, r0
 80077ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077ee:	e011      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80077f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f4:	3328      	adds	r3, #40	; 0x28
 80077f6:	2100      	movs	r1, #0
 80077f8:	4618      	mov	r0, r3
 80077fa:	f002 f9e7 	bl	8009bcc <RCCEx_PLL3_Config>
 80077fe:	4603      	mov	r3, r0
 8007800:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007804:	e006      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007806:	2301      	movs	r3, #1
 8007808:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800780c:	e002      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800780e:	bf00      	nop
 8007810:	e000      	b.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007814:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800781c:	4b37      	ldr	r3, [pc, #220]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800781e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007820:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800782a:	4a34      	ldr	r2, [pc, #208]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800782c:	430b      	orrs	r3, r1
 800782e:	6513      	str	r3, [r2, #80]	; 0x50
 8007830:	e003      	b.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800784a:	2300      	movs	r3, #0
 800784c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007850:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007854:	460b      	mov	r3, r1
 8007856:	4313      	orrs	r3, r2
 8007858:	d056      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800785a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800785e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007864:	d033      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007866:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800786a:	d82c      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800786c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007870:	d02f      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007872:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007876:	d826      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800787c:	d02b      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800787e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007882:	d820      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007888:	d012      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800788a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788e:	d81a      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007890:	2b00      	cmp	r3, #0
 8007892:	d022      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007898:	d115      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800789e:	3308      	adds	r3, #8
 80078a0:	2101      	movs	r1, #1
 80078a2:	4618      	mov	r0, r3
 80078a4:	f002 f8e0 	bl	8009a68 <RCCEx_PLL2_Config>
 80078a8:	4603      	mov	r3, r0
 80078aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078ae:	e015      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80078b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078b4:	3328      	adds	r3, #40	; 0x28
 80078b6:	2101      	movs	r1, #1
 80078b8:	4618      	mov	r0, r3
 80078ba:	f002 f987 	bl	8009bcc <RCCEx_PLL3_Config>
 80078be:	4603      	mov	r3, r0
 80078c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80078c4:	e00a      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80078cc:	e006      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078ce:	bf00      	nop
 80078d0:	e004      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078d2:	bf00      	nop
 80078d4:	e002      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078d6:	bf00      	nop
 80078d8:	e000      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80078da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80078dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10d      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80078ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f2:	4a02      	ldr	r2, [pc, #8]	; (80078fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80078f4:	430b      	orrs	r3, r1
 80078f6:	6513      	str	r3, [r2, #80]	; 0x50
 80078f8:	e006      	b.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800790c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007910:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007918:	2300      	movs	r3, #0
 800791a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800791e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007922:	460b      	mov	r3, r1
 8007924:	4313      	orrs	r3, r2
 8007926:	d055      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800792c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007930:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007934:	d033      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800793a:	d82c      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800793c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007940:	d02f      	beq.n	80079a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007946:	d826      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007948:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800794c:	d02b      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800794e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007952:	d820      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007954:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007958:	d012      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800795a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800795e:	d81a      	bhi.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007960:	2b00      	cmp	r3, #0
 8007962:	d022      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007968:	d115      	bne.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800796a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800796e:	3308      	adds	r3, #8
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f002 f878 	bl	8009a68 <RCCEx_PLL2_Config>
 8007978:	4603      	mov	r3, r0
 800797a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800797e:	e015      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007984:	3328      	adds	r3, #40	; 0x28
 8007986:	2101      	movs	r1, #1
 8007988:	4618      	mov	r0, r3
 800798a:	f002 f91f 	bl	8009bcc <RCCEx_PLL3_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007994:	e00a      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800799c:	e006      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800799e:	bf00      	nop
 80079a0:	e004      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079a2:	bf00      	nop
 80079a4:	e002      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079a6:	bf00      	nop
 80079a8:	e000      	b.n	80079ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80079aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10b      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079b4:	4ba3      	ldr	r3, [pc, #652]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80079bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079c4:	4a9f      	ldr	r2, [pc, #636]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079c6:	430b      	orrs	r3, r1
 80079c8:	6593      	str	r3, [r2, #88]	; 0x58
 80079ca:	e003      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079dc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80079e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079e4:	2300      	movs	r3, #0
 80079e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80079ee:	460b      	mov	r3, r1
 80079f0:	4313      	orrs	r3, r2
 80079f2:	d037      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80079f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079fe:	d00e      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007a00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a04:	d816      	bhi.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d018      	beq.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a0e:	d111      	bne.n	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a10:	4b8c      	ldr	r3, [pc, #560]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a14:	4a8b      	ldr	r2, [pc, #556]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a1c:	e00f      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a22:	3308      	adds	r3, #8
 8007a24:	2101      	movs	r1, #1
 8007a26:	4618      	mov	r0, r3
 8007a28:	f002 f81e 	bl	8009a68 <RCCEx_PLL2_Config>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007a32:	e004      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007a3a:	e000      	b.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a46:	4b7f      	ldr	r3, [pc, #508]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a4a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a54:	4a7b      	ldr	r2, [pc, #492]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a56:	430b      	orrs	r3, r1
 8007a58:	6513      	str	r3, [r2, #80]	; 0x50
 8007a5a:	e003      	b.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4313      	orrs	r3, r2
 8007a82:	d039      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d81c      	bhi.n	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a8e:	a201      	add	r2, pc, #4	; (adr r2, 8007a94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a94:	08007ad1 	.word	0x08007ad1
 8007a98:	08007aa5 	.word	0x08007aa5
 8007a9c:	08007ab3 	.word	0x08007ab3
 8007aa0:	08007ad1 	.word	0x08007ad1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007aa4:	4b67      	ldr	r3, [pc, #412]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	4a66      	ldr	r2, [pc, #408]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ab0:	e00f      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	2102      	movs	r1, #2
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 ffd4 	bl	8009a68 <RCCEx_PLL2_Config>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ac6:	e004      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ace:	e000      	b.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10a      	bne.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ada:	4b5a      	ldr	r3, [pc, #360]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ade:	f023 0103 	bic.w	r1, r3, #3
 8007ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae8:	4a56      	ldr	r2, [pc, #344]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007aea:	430b      	orrs	r3, r1
 8007aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007aee:	e003      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007af0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007af4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007b04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007b12:	460b      	mov	r3, r1
 8007b14:	4313      	orrs	r3, r2
 8007b16:	f000 809f 	beq.w	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b1a:	4b4b      	ldr	r3, [pc, #300]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a4a      	ldr	r2, [pc, #296]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007b26:	f7fa fbdd 	bl	80022e4 <HAL_GetTick>
 8007b2a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b2e:	e00b      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b30:	f7fa fbd8 	bl	80022e4 <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b64      	cmp	r3, #100	; 0x64
 8007b3e:	d903      	bls.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b46:	e005      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b48:	4b3f      	ldr	r3, [pc, #252]	; (8007c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0ed      	beq.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007b54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d179      	bne.n	8007c50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b5c:	4b39      	ldr	r3, [pc, #228]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007b68:	4053      	eors	r3, r2
 8007b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d015      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b72:	4b34      	ldr	r3, [pc, #208]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b7e:	4b31      	ldr	r3, [pc, #196]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b82:	4a30      	ldr	r2, [pc, #192]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b88:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b8a:	4b2e      	ldr	r3, [pc, #184]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	4a2d      	ldr	r2, [pc, #180]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b94:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b96:	4a2b      	ldr	r2, [pc, #172]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007b9c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007baa:	d118      	bne.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bac:	f7fa fb9a 	bl	80022e4 <HAL_GetTick>
 8007bb0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bb4:	e00d      	b.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bb6:	f7fa fb95 	bl	80022e4 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007bc0:	1ad2      	subs	r2, r2, r3
 8007bc2:	f241 3388 	movw	r3, #5000	; 0x1388
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d903      	bls.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007bd0:	e005      	b.n	8007bde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007bd2:	4b1c      	ldr	r3, [pc, #112]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0eb      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007bde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d129      	bne.n	8007c3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf6:	d10e      	bne.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007bf8:	4b12      	ldr	r3, [pc, #72]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bfa:	691b      	ldr	r3, [r3, #16]
 8007bfc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c08:	091a      	lsrs	r2, r3, #4
 8007c0a:	4b10      	ldr	r3, [pc, #64]	; (8007c4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	4a0d      	ldr	r2, [pc, #52]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c10:	430b      	orrs	r3, r1
 8007c12:	6113      	str	r3, [r2, #16]
 8007c14:	e005      	b.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007c16:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	4a0a      	ldr	r2, [pc, #40]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c20:	6113      	str	r3, [r2, #16]
 8007c22:	4b08      	ldr	r3, [pc, #32]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c24:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8007c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c32:	4a04      	ldr	r2, [pc, #16]	; (8007c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007c34:	430b      	orrs	r3, r1
 8007c36:	6713      	str	r3, [r2, #112]	; 0x70
 8007c38:	e00e      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8007c42:	e009      	b.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007c44:	58024400 	.word	0x58024400
 8007c48:	58024800 	.word	0x58024800
 8007c4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c50:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c54:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	f002 0301 	and.w	r3, r2, #1
 8007c64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c72:	460b      	mov	r3, r1
 8007c74:	4313      	orrs	r3, r2
 8007c76:	f000 8089 	beq.w	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c80:	2b28      	cmp	r3, #40	; 0x28
 8007c82:	d86b      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c84:	a201      	add	r2, pc, #4	; (adr r2, 8007c8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8a:	bf00      	nop
 8007c8c:	08007d65 	.word	0x08007d65
 8007c90:	08007d5d 	.word	0x08007d5d
 8007c94:	08007d5d 	.word	0x08007d5d
 8007c98:	08007d5d 	.word	0x08007d5d
 8007c9c:	08007d5d 	.word	0x08007d5d
 8007ca0:	08007d5d 	.word	0x08007d5d
 8007ca4:	08007d5d 	.word	0x08007d5d
 8007ca8:	08007d5d 	.word	0x08007d5d
 8007cac:	08007d31 	.word	0x08007d31
 8007cb0:	08007d5d 	.word	0x08007d5d
 8007cb4:	08007d5d 	.word	0x08007d5d
 8007cb8:	08007d5d 	.word	0x08007d5d
 8007cbc:	08007d5d 	.word	0x08007d5d
 8007cc0:	08007d5d 	.word	0x08007d5d
 8007cc4:	08007d5d 	.word	0x08007d5d
 8007cc8:	08007d5d 	.word	0x08007d5d
 8007ccc:	08007d47 	.word	0x08007d47
 8007cd0:	08007d5d 	.word	0x08007d5d
 8007cd4:	08007d5d 	.word	0x08007d5d
 8007cd8:	08007d5d 	.word	0x08007d5d
 8007cdc:	08007d5d 	.word	0x08007d5d
 8007ce0:	08007d5d 	.word	0x08007d5d
 8007ce4:	08007d5d 	.word	0x08007d5d
 8007ce8:	08007d5d 	.word	0x08007d5d
 8007cec:	08007d65 	.word	0x08007d65
 8007cf0:	08007d5d 	.word	0x08007d5d
 8007cf4:	08007d5d 	.word	0x08007d5d
 8007cf8:	08007d5d 	.word	0x08007d5d
 8007cfc:	08007d5d 	.word	0x08007d5d
 8007d00:	08007d5d 	.word	0x08007d5d
 8007d04:	08007d5d 	.word	0x08007d5d
 8007d08:	08007d5d 	.word	0x08007d5d
 8007d0c:	08007d65 	.word	0x08007d65
 8007d10:	08007d5d 	.word	0x08007d5d
 8007d14:	08007d5d 	.word	0x08007d5d
 8007d18:	08007d5d 	.word	0x08007d5d
 8007d1c:	08007d5d 	.word	0x08007d5d
 8007d20:	08007d5d 	.word	0x08007d5d
 8007d24:	08007d5d 	.word	0x08007d5d
 8007d28:	08007d5d 	.word	0x08007d5d
 8007d2c:	08007d65 	.word	0x08007d65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d34:	3308      	adds	r3, #8
 8007d36:	2101      	movs	r1, #1
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f001 fe95 	bl	8009a68 <RCCEx_PLL2_Config>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d44:	e00f      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d4a:	3328      	adds	r3, #40	; 0x28
 8007d4c:	2101      	movs	r1, #1
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 ff3c 	bl	8009bcc <RCCEx_PLL3_Config>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007d5a:	e004      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d62:	e000      	b.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10a      	bne.n	8007d84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d6e:	4bbf      	ldr	r3, [pc, #764]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d72:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8007d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d7c:	4abb      	ldr	r2, [pc, #748]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d7e:	430b      	orrs	r3, r1
 8007d80:	6553      	str	r3, [r2, #84]	; 0x54
 8007d82:	e003      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007d88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f002 0302 	and.w	r3, r2, #2
 8007d98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007da2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007da6:	460b      	mov	r3, r1
 8007da8:	4313      	orrs	r3, r2
 8007daa:	d041      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d824      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007db6:	a201      	add	r2, pc, #4	; (adr r2, 8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dbc:	08007e09 	.word	0x08007e09
 8007dc0:	08007dd5 	.word	0x08007dd5
 8007dc4:	08007deb 	.word	0x08007deb
 8007dc8:	08007e09 	.word	0x08007e09
 8007dcc:	08007e09 	.word	0x08007e09
 8007dd0:	08007e09 	.word	0x08007e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd8:	3308      	adds	r3, #8
 8007dda:	2101      	movs	r1, #1
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f001 fe43 	bl	8009a68 <RCCEx_PLL2_Config>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007de8:	e00f      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dee:	3328      	adds	r3, #40	; 0x28
 8007df0:	2101      	movs	r1, #1
 8007df2:	4618      	mov	r0, r3
 8007df4:	f001 feea 	bl	8009bcc <RCCEx_PLL3_Config>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007dfe:	e004      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e06:	e000      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d10a      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007e12:	4b96      	ldr	r3, [pc, #600]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e16:	f023 0107 	bic.w	r1, r3, #7
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e20:	4a92      	ldr	r2, [pc, #584]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e22:	430b      	orrs	r3, r1
 8007e24:	6553      	str	r3, [r2, #84]	; 0x54
 8007e26:	e003      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f002 0304 	and.w	r3, r2, #4
 8007e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e40:	2300      	movs	r3, #0
 8007e42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	d044      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e58:	2b05      	cmp	r3, #5
 8007e5a:	d825      	bhi.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007e5c:	a201      	add	r2, pc, #4	; (adr r2, 8007e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e62:	bf00      	nop
 8007e64:	08007eb1 	.word	0x08007eb1
 8007e68:	08007e7d 	.word	0x08007e7d
 8007e6c:	08007e93 	.word	0x08007e93
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007eb1 	.word	0x08007eb1
 8007e78:	08007eb1 	.word	0x08007eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e80:	3308      	adds	r3, #8
 8007e82:	2101      	movs	r1, #1
 8007e84:	4618      	mov	r0, r3
 8007e86:	f001 fdef 	bl	8009a68 <RCCEx_PLL2_Config>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e90:	e00f      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e96:	3328      	adds	r3, #40	; 0x28
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f001 fe96 	bl	8009bcc <RCCEx_PLL3_Config>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007ea6:	e004      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007eae:	e000      	b.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d10b      	bne.n	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007eba:	4b6c      	ldr	r3, [pc, #432]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ebe:	f023 0107 	bic.w	r1, r3, #7
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eca:	4a68      	ldr	r2, [pc, #416]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ecc:	430b      	orrs	r3, r1
 8007ece:	6593      	str	r3, [r2, #88]	; 0x58
 8007ed0:	e003      	b.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f002 0320 	and.w	r3, r2, #32
 8007ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007eea:	2300      	movs	r3, #0
 8007eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	d055      	beq.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f06:	d033      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f0c:	d82c      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f12:	d02f      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f18:	d826      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f1e:	d02b      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007f20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007f24:	d820      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f2a:	d012      	beq.n	8007f52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f30:	d81a      	bhi.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d022      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007f36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f3a:	d115      	bne.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f40:	3308      	adds	r3, #8
 8007f42:	2100      	movs	r1, #0
 8007f44:	4618      	mov	r0, r3
 8007f46:	f001 fd8f 	bl	8009a68 <RCCEx_PLL2_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f50:	e015      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f56:	3328      	adds	r3, #40	; 0x28
 8007f58:	2102      	movs	r1, #2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fe36 	bl	8009bcc <RCCEx_PLL3_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f66:	e00a      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f6e:	e006      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f70:	bf00      	nop
 8007f72:	e004      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f74:	bf00      	nop
 8007f76:	e002      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f78:	bf00      	nop
 8007f7a:	e000      	b.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d10b      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f86:	4b39      	ldr	r3, [pc, #228]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f96:	4a35      	ldr	r2, [pc, #212]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f98:	430b      	orrs	r3, r1
 8007f9a:	6553      	str	r3, [r2, #84]	; 0x54
 8007f9c:	e003      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fa2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fae:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	d058      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007fce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fd2:	d033      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007fd4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007fd8:	d82c      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fde:	d02f      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe4:	d826      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007fe6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fea:	d02b      	beq.n	8008044 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007fec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff0:	d820      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ff2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff6:	d012      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007ff8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffc:	d81a      	bhi.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d022      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008006:	d115      	bne.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800800c:	3308      	adds	r3, #8
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f001 fd29 	bl	8009a68 <RCCEx_PLL2_Config>
 8008016:	4603      	mov	r3, r0
 8008018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800801c:	e015      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008022:	3328      	adds	r3, #40	; 0x28
 8008024:	2102      	movs	r1, #2
 8008026:	4618      	mov	r0, r3
 8008028:	f001 fdd0 	bl	8009bcc <RCCEx_PLL3_Config>
 800802c:	4603      	mov	r3, r0
 800802e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008032:	e00a      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800803a:	e006      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800803c:	bf00      	nop
 800803e:	e004      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008040:	bf00      	nop
 8008042:	e002      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008044:	bf00      	nop
 8008046:	e000      	b.n	800804a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800804a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10e      	bne.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008052:	4b06      	ldr	r3, [pc, #24]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800805a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800805e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008062:	4a02      	ldr	r2, [pc, #8]	; (800806c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008064:	430b      	orrs	r3, r1
 8008066:	6593      	str	r3, [r2, #88]	; 0x58
 8008068:	e006      	b.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800806a:	bf00      	nop
 800806c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8008084:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008088:	2300      	movs	r3, #0
 800808a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800808e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8008092:	460b      	mov	r3, r1
 8008094:	4313      	orrs	r3, r2
 8008096:	d055      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800809c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080a0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080a4:	d033      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80080a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080aa:	d82c      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b0:	d02f      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80080b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080b6:	d826      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080b8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080bc:	d02b      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80080be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080c2:	d820      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080c8:	d012      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80080ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ce:	d81a      	bhi.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d022      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80080d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080d8:	d115      	bne.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080de:	3308      	adds	r3, #8
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fcc0 	bl	8009a68 <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080ee:	e015      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80080f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80080f4:	3328      	adds	r3, #40	; 0x28
 80080f6:	2102      	movs	r1, #2
 80080f8:	4618      	mov	r0, r3
 80080fa:	f001 fd67 	bl	8009bcc <RCCEx_PLL3_Config>
 80080fe:	4603      	mov	r3, r0
 8008100:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008104:	e00a      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800810c:	e006      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800810e:	bf00      	nop
 8008110:	e004      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008112:	bf00      	nop
 8008114:	e002      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008116:	bf00      	nop
 8008118:	e000      	b.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800811a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800811c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008120:	2b00      	cmp	r3, #0
 8008122:	d10b      	bne.n	800813c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008124:	4ba1      	ldr	r3, [pc, #644]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008128:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800812c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008134:	4a9d      	ldr	r2, [pc, #628]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008136:	430b      	orrs	r3, r1
 8008138:	6593      	str	r3, [r2, #88]	; 0x58
 800813a:	e003      	b.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800813c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008140:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814c:	f002 0308 	and.w	r3, r2, #8
 8008150:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008154:	2300      	movs	r3, #0
 8008156:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800815a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800815e:	460b      	mov	r3, r1
 8008160:	4313      	orrs	r3, r2
 8008162:	d01e      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008164:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008170:	d10c      	bne.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008176:	3328      	adds	r3, #40	; 0x28
 8008178:	2102      	movs	r1, #2
 800817a:	4618      	mov	r0, r3
 800817c:	f001 fd26 	bl	8009bcc <RCCEx_PLL3_Config>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800818c:	4b87      	ldr	r3, [pc, #540]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008190:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	4a83      	ldr	r2, [pc, #524]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819e:	430b      	orrs	r3, r1
 80081a0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	f002 0310 	and.w	r3, r2, #16
 80081ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80081b2:	2300      	movs	r3, #0
 80081b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80081b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80081bc:	460b      	mov	r3, r1
 80081be:	4313      	orrs	r3, r2
 80081c0:	d01e      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80081c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ce:	d10c      	bne.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80081d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d4:	3328      	adds	r3, #40	; 0x28
 80081d6:	2102      	movs	r1, #2
 80081d8:	4618      	mov	r0, r3
 80081da:	f001 fcf7 	bl	8009bcc <RCCEx_PLL3_Config>
 80081de:	4603      	mov	r3, r0
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081ea:	4b70      	ldr	r3, [pc, #448]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80081f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081fa:	4a6c      	ldr	r2, [pc, #432]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80081fc:	430b      	orrs	r3, r1
 80081fe:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008208:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800820c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008210:	2300      	movs	r3, #0
 8008212:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008216:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800821a:	460b      	mov	r3, r1
 800821c:	4313      	orrs	r3, r2
 800821e:	d03e      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800822c:	d022      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800822e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008232:	d81b      	bhi.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800823c:	d00b      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800823e:	e015      	b.n	800826c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008244:	3308      	adds	r3, #8
 8008246:	2100      	movs	r1, #0
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fc0d 	bl	8009a68 <RCCEx_PLL2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008254:	e00f      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008256:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800825a:	3328      	adds	r3, #40	; 0x28
 800825c:	2102      	movs	r1, #2
 800825e:	4618      	mov	r0, r3
 8008260:	f001 fcb4 	bl	8009bcc <RCCEx_PLL3_Config>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800826a:	e004      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008272:	e000      	b.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008276:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800827e:	4b4b      	ldr	r3, [pc, #300]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008282:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8008286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800828e:	4a47      	ldr	r2, [pc, #284]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008290:	430b      	orrs	r3, r1
 8008292:	6593      	str	r3, [r2, #88]	; 0x58
 8008294:	e003      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008296:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800829a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800829e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80082aa:	67bb      	str	r3, [r7, #120]	; 0x78
 80082ac:	2300      	movs	r3, #0
 80082ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80082b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80082b4:	460b      	mov	r3, r1
 80082b6:	4313      	orrs	r3, r2
 80082b8:	d03b      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082c6:	d01f      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80082c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80082cc:	d818      	bhi.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80082ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082d2:	d003      	beq.n	80082dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80082d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082d8:	d007      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80082da:	e011      	b.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082dc:	4b33      	ldr	r3, [pc, #204]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e0:	4a32      	ldr	r2, [pc, #200]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80082e8:	e00f      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082ee:	3328      	adds	r3, #40	; 0x28
 80082f0:	2101      	movs	r1, #1
 80082f2:	4618      	mov	r0, r3
 80082f4:	f001 fc6a 	bl	8009bcc <RCCEx_PLL3_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80082fe:	e004      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008306:	e000      	b.n	800830a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800830a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800830e:	2b00      	cmp	r3, #0
 8008310:	d10b      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008312:	4b26      	ldr	r3, [pc, #152]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008316:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800831a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800831e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008322:	4a22      	ldr	r2, [pc, #136]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008324:	430b      	orrs	r3, r1
 8008326:	6553      	str	r3, [r2, #84]	; 0x54
 8008328:	e003      	b.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800832a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800832e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008332:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800833a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800833e:	673b      	str	r3, [r7, #112]	; 0x70
 8008340:	2300      	movs	r3, #0
 8008342:	677b      	str	r3, [r7, #116]	; 0x74
 8008344:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008348:	460b      	mov	r3, r1
 800834a:	4313      	orrs	r3, r2
 800834c:	d034      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008354:	2b00      	cmp	r3, #0
 8008356:	d003      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800835c:	d007      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800835e:	e011      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008360:	4b12      	ldr	r3, [pc, #72]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a11      	ldr	r2, [pc, #68]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008366:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800836c:	e00e      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008372:	3308      	adds	r3, #8
 8008374:	2102      	movs	r1, #2
 8008376:	4618      	mov	r0, r3
 8008378:	f001 fb76 	bl	8009a68 <RCCEx_PLL2_Config>
 800837c:	4603      	mov	r3, r0
 800837e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008382:	e003      	b.n	800838c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800838a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800838c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10d      	bne.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008394:	4b05      	ldr	r3, [pc, #20]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008398:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800839c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083a2:	4a02      	ldr	r2, [pc, #8]	; (80083ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80083a4:	430b      	orrs	r3, r1
 80083a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083a8:	e006      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80083aa:	bf00      	nop
 80083ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80083b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80083c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80083c6:	2300      	movs	r3, #0
 80083c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80083ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80083ce:	460b      	mov	r3, r1
 80083d0:	4313      	orrs	r3, r2
 80083d2:	d00c      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80083d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083d8:	3328      	adds	r3, #40	; 0x28
 80083da:	2102      	movs	r1, #2
 80083dc:	4618      	mov	r0, r3
 80083de:	f001 fbf5 	bl	8009bcc <RCCEx_PLL3_Config>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80083ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80083fa:	663b      	str	r3, [r7, #96]	; 0x60
 80083fc:	2300      	movs	r3, #0
 80083fe:	667b      	str	r3, [r7, #100]	; 0x64
 8008400:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8008404:	460b      	mov	r3, r1
 8008406:	4313      	orrs	r3, r2
 8008408:	d038      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800840a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800840e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008416:	d018      	beq.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800841c:	d811      	bhi.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800841e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008422:	d014      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008428:	d80b      	bhi.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800842a:	2b00      	cmp	r3, #0
 800842c:	d011      	beq.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800842e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008432:	d106      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008434:	4bc3      	ldr	r3, [pc, #780]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4ac2      	ldr	r2, [pc, #776]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008440:	e008      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008448:	e004      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800844a:	bf00      	nop
 800844c:	e002      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800844e:	bf00      	nop
 8008450:	e000      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008454:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008458:	2b00      	cmp	r3, #0
 800845a:	d10b      	bne.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800845c:	4bb9      	ldr	r3, [pc, #740]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800845e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008460:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800846c:	4ab5      	ldr	r2, [pc, #724]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800846e:	430b      	orrs	r3, r1
 8008470:	6553      	str	r3, [r2, #84]	; 0x54
 8008472:	e003      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008478:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800847c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008484:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008488:	65bb      	str	r3, [r7, #88]	; 0x58
 800848a:	2300      	movs	r3, #0
 800848c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800848e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8008492:	460b      	mov	r3, r1
 8008494:	4313      	orrs	r3, r2
 8008496:	d009      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008498:	4baa      	ldr	r3, [pc, #680]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800849a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800849c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80084a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a6:	4aa7      	ldr	r2, [pc, #668]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084a8:	430b      	orrs	r3, r1
 80084aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80084ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80084b8:	653b      	str	r3, [r7, #80]	; 0x50
 80084ba:	2300      	movs	r3, #0
 80084bc:	657b      	str	r3, [r7, #84]	; 0x54
 80084be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80084c2:	460b      	mov	r3, r1
 80084c4:	4313      	orrs	r3, r2
 80084c6:	d00a      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80084c8:	4b9e      	ldr	r3, [pc, #632]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084ca:	691b      	ldr	r3, [r3, #16]
 80084cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80084d8:	4a9a      	ldr	r2, [pc, #616]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084da:	430b      	orrs	r3, r1
 80084dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80084de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80084ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80084ec:	2300      	movs	r3, #0
 80084ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80084f4:	460b      	mov	r3, r1
 80084f6:	4313      	orrs	r3, r2
 80084f8:	d009      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80084fa:	4b92      	ldr	r3, [pc, #584]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008508:	4a8e      	ldr	r2, [pc, #568]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800850a:	430b      	orrs	r3, r1
 800850c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800850e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008516:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800851a:	643b      	str	r3, [r7, #64]	; 0x40
 800851c:	2300      	movs	r3, #0
 800851e:	647b      	str	r3, [r7, #68]	; 0x44
 8008520:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008524:	460b      	mov	r3, r1
 8008526:	4313      	orrs	r3, r2
 8008528:	d00e      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800852a:	4b86      	ldr	r3, [pc, #536]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	4a85      	ldr	r2, [pc, #532]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008530:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008534:	6113      	str	r3, [r2, #16]
 8008536:	4b83      	ldr	r3, [pc, #524]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008538:	6919      	ldr	r1, [r3, #16]
 800853a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800853e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008542:	4a80      	ldr	r2, [pc, #512]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008544:	430b      	orrs	r3, r1
 8008546:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800854c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008550:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8008554:	63bb      	str	r3, [r7, #56]	; 0x38
 8008556:	2300      	movs	r3, #0
 8008558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800855a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800855e:	460b      	mov	r3, r1
 8008560:	4313      	orrs	r3, r2
 8008562:	d009      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008564:	4b77      	ldr	r3, [pc, #476]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008568:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800856c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	4a74      	ldr	r2, [pc, #464]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008574:	430b      	orrs	r3, r1
 8008576:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008584:	633b      	str	r3, [r7, #48]	; 0x30
 8008586:	2300      	movs	r3, #0
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
 800858a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800858e:	460b      	mov	r3, r1
 8008590:	4313      	orrs	r3, r2
 8008592:	d00a      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008594:	4b6b      	ldr	r3, [pc, #428]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008598:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800859c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a4:	4a67      	ldr	r2, [pc, #412]	; (8008744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80085a6:	430b      	orrs	r3, r1
 80085a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80085aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085b2:	2100      	movs	r1, #0
 80085b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80085c0:	460b      	mov	r3, r1
 80085c2:	4313      	orrs	r3, r2
 80085c4:	d011      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ca:	3308      	adds	r3, #8
 80085cc:	2100      	movs	r1, #0
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 fa4a 	bl	8009a68 <RCCEx_PLL2_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80085da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d003      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80085e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f2:	2100      	movs	r1, #0
 80085f4:	6239      	str	r1, [r7, #32]
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
 80085fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008600:	460b      	mov	r3, r1
 8008602:	4313      	orrs	r3, r2
 8008604:	d011      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800860a:	3308      	adds	r3, #8
 800860c:	2101      	movs	r1, #1
 800860e:	4618      	mov	r0, r3
 8008610:	f001 fa2a 	bl	8009a68 <RCCEx_PLL2_Config>
 8008614:	4603      	mov	r3, r0
 8008616:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800861a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800862a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800862e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008632:	2100      	movs	r1, #0
 8008634:	61b9      	str	r1, [r7, #24]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	61fb      	str	r3, [r7, #28]
 800863c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008640:	460b      	mov	r3, r1
 8008642:	4313      	orrs	r3, r2
 8008644:	d011      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800864a:	3308      	adds	r3, #8
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f001 fa0a 	bl	8009a68 <RCCEx_PLL2_Config>
 8008654:	4603      	mov	r3, r0
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800865a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800865e:	2b00      	cmp	r3, #0
 8008660:	d003      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008666:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800866a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800866e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008672:	2100      	movs	r1, #0
 8008674:	6139      	str	r1, [r7, #16]
 8008676:	f003 0308 	and.w	r3, r3, #8
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008680:	460b      	mov	r3, r1
 8008682:	4313      	orrs	r3, r2
 8008684:	d011      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008686:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800868a:	3328      	adds	r3, #40	; 0x28
 800868c:	2100      	movs	r1, #0
 800868e:	4618      	mov	r0, r3
 8008690:	f001 fa9c 	bl	8009bcc <RCCEx_PLL3_Config>
 8008694:	4603      	mov	r3, r0
 8008696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800869a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d003      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b2:	2100      	movs	r1, #0
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086c0:	460b      	mov	r3, r1
 80086c2:	4313      	orrs	r3, r2
 80086c4:	d011      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ca:	3328      	adds	r3, #40	; 0x28
 80086cc:	2101      	movs	r1, #1
 80086ce:	4618      	mov	r0, r3
 80086d0:	f001 fa7c 	bl	8009bcc <RCCEx_PLL3_Config>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80086da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80086e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f2:	2100      	movs	r1, #0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	f003 0320 	and.w	r3, r3, #32
 80086fa:	607b      	str	r3, [r7, #4]
 80086fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008700:	460b      	mov	r3, r1
 8008702:	4313      	orrs	r3, r2
 8008704:	d011      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800870a:	3328      	adds	r3, #40	; 0x28
 800870c:	2102      	movs	r1, #2
 800870e:	4618      	mov	r0, r3
 8008710:	f001 fa5c 	bl	8009bcc <RCCEx_PLL3_Config>
 8008714:	4603      	mov	r3, r0
 8008716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800871a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800871e:	2b00      	cmp	r3, #0
 8008720:	d003      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800872a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008732:	2300      	movs	r3, #0
 8008734:	e000      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
}
 8008738:	4618      	mov	r0, r3
 800873a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800873e:	46bd      	mov	sp, r7
 8008740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008744:	58024400 	.word	0x58024400

08008748 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b090      	sub	sp, #64	; 0x40
 800874c:	af00      	add	r7, sp, #0
 800874e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008752:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008756:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800875a:	430b      	orrs	r3, r1
 800875c:	f040 8094 	bne.w	8008888 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008760:	4b9e      	ldr	r3, [pc, #632]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800876a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876c:	2b04      	cmp	r3, #4
 800876e:	f200 8087 	bhi.w	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008772:	a201      	add	r2, pc, #4	; (adr r2, 8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	0800878d 	.word	0x0800878d
 800877c:	080087b5 	.word	0x080087b5
 8008780:	080087dd 	.word	0x080087dd
 8008784:	08008879 	.word	0x08008879
 8008788:	08008805 	.word	0x08008805
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800878c:	4b93      	ldr	r3, [pc, #588]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008794:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008798:	d108      	bne.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800879a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800879e:	4618      	mov	r0, r3
 80087a0:	f001 f810 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087a8:	f000 bd45 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087ac:	2300      	movs	r3, #0
 80087ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087b0:	f000 bd41 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80087b4:	4b89      	ldr	r3, [pc, #548]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c0:	d108      	bne.n	80087d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087c2:	f107 0318 	add.w	r3, r7, #24
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fd54 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087d0:	f000 bd31 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80087d8:	f000 bd2d 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80087dc:	4b7f      	ldr	r3, [pc, #508]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087e8:	d108      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ea:	f107 030c 	add.w	r3, r7, #12
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 fe94 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80087f8:	f000 bd1d 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80087fc:	2300      	movs	r3, #0
 80087fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008800:	f000 bd19 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008804:	4b75      	ldr	r3, [pc, #468]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008808:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800880c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800880e:	4b73      	ldr	r3, [pc, #460]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f003 0304 	and.w	r3, r3, #4
 8008816:	2b04      	cmp	r3, #4
 8008818:	d10c      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800881a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881c:	2b00      	cmp	r3, #0
 800881e:	d109      	bne.n	8008834 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008820:	4b6e      	ldr	r3, [pc, #440]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	08db      	lsrs	r3, r3, #3
 8008826:	f003 0303 	and.w	r3, r3, #3
 800882a:	4a6d      	ldr	r2, [pc, #436]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800882c:	fa22 f303 	lsr.w	r3, r2, r3
 8008830:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008832:	e01f      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008834:	4b69      	ldr	r3, [pc, #420]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800883c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008840:	d106      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008848:	d102      	bne.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800884a:	4b66      	ldr	r3, [pc, #408]	; (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800884c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800884e:	e011      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008850:	4b62      	ldr	r3, [pc, #392]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008858:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800885c:	d106      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008864:	d102      	bne.n	800886c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008866:	4b60      	ldr	r3, [pc, #384]	; (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800886c:	2300      	movs	r3, #0
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008870:	f000 bce1 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008874:	f000 bcdf 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008878:	4b5c      	ldr	r3, [pc, #368]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800887a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800887c:	f000 bcdb 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008880:	2300      	movs	r3, #0
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008884:	f000 bcd7 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800888c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008890:	430b      	orrs	r3, r1
 8008892:	f040 80ad 	bne.w	80089f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008896:	4b51      	ldr	r3, [pc, #324]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800889e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088a6:	d056      	beq.n	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088ae:	f200 8090 	bhi.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b4:	2bc0      	cmp	r3, #192	; 0xc0
 80088b6:	f000 8088 	beq.w	80089ca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80088ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088bc:	2bc0      	cmp	r3, #192	; 0xc0
 80088be:	f200 8088 	bhi.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	2b80      	cmp	r3, #128	; 0x80
 80088c6:	d032      	beq.n	800892e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80088c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ca:	2b80      	cmp	r3, #128	; 0x80
 80088cc:	f200 8081 	bhi.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d014      	beq.n	8008906 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80088dc:	e079      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80088de:	4b3f      	ldr	r3, [pc, #252]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088ea:	d108      	bne.n	80088fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 ff67 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80088fa:	f000 bc9c 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008902:	f000 bc98 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008906:	4b35      	ldr	r3, [pc, #212]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800890e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008912:	d108      	bne.n	8008926 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008914:	f107 0318 	add.w	r3, r7, #24
 8008918:	4618      	mov	r0, r3
 800891a:	f000 fcab 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008922:	f000 bc88 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008926:	2300      	movs	r3, #0
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800892a:	f000 bc84 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800892e:	4b2b      	ldr	r3, [pc, #172]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800893a:	d108      	bne.n	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800893c:	f107 030c 	add.w	r3, r7, #12
 8008940:	4618      	mov	r0, r3
 8008942:	f000 fdeb 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800894a:	f000 bc74 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008952:	f000 bc70 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008956:	4b21      	ldr	r3, [pc, #132]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800895a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800895e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008960:	4b1e      	ldr	r3, [pc, #120]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b04      	cmp	r3, #4
 800896a:	d10c      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	2b00      	cmp	r3, #0
 8008970:	d109      	bne.n	8008986 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008972:	4b1a      	ldr	r3, [pc, #104]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	08db      	lsrs	r3, r3, #3
 8008978:	f003 0303 	and.w	r3, r3, #3
 800897c:	4a18      	ldr	r2, [pc, #96]	; (80089e0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800897e:	fa22 f303 	lsr.w	r3, r2, r3
 8008982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008984:	e01f      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008986:	4b15      	ldr	r3, [pc, #84]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800898e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008992:	d106      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800899a:	d102      	bne.n	80089a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800899c:	4b11      	ldr	r3, [pc, #68]	; (80089e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800899e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089a0:	e011      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80089a2:	4b0e      	ldr	r3, [pc, #56]	; (80089dc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089ae:	d106      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80089b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089b6:	d102      	bne.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80089ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089bc:	e003      	b.n	80089c6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80089c2:	f000 bc38 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089c6:	f000 bc36 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80089ca:	4b08      	ldr	r3, [pc, #32]	; (80089ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ce:	f000 bc32 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089d6:	f000 bc2e 	b.w	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80089da:	bf00      	nop
 80089dc:	58024400 	.word	0x58024400
 80089e0:	03d09000 	.word	0x03d09000
 80089e4:	003d0900 	.word	0x003d0900
 80089e8:	017d7840 	.word	0x017d7840
 80089ec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80089f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80089f8:	430b      	orrs	r3, r1
 80089fa:	f040 809c 	bne.w	8008b36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80089fe:	4b9e      	ldr	r3, [pc, #632]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008a06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a0e:	d054      	beq.n	8008aba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a16:	f200 808b 	bhi.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a20:	f000 8083 	beq.w	8008b2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2a:	f200 8081 	bhi.w	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a34:	d02f      	beq.n	8008a96 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3c:	d878      	bhi.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a4a:	d012      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008a4c:	e070      	b.n	8008b30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008a4e:	4b8a      	ldr	r3, [pc, #552]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a5a:	d107      	bne.n	8008a6c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 feaf 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a6a:	e3e4      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a70:	e3e1      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008a72:	4b81      	ldr	r3, [pc, #516]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7e:	d107      	bne.n	8008a90 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a80:	f107 0318 	add.w	r3, r7, #24
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 fbf5 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008a8a:	69bb      	ldr	r3, [r7, #24]
 8008a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008a8e:	e3d2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008a90:	2300      	movs	r3, #0
 8008a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a94:	e3cf      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008a96:	4b78      	ldr	r3, [pc, #480]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aa2:	d107      	bne.n	8008ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008aa4:	f107 030c 	add.w	r3, r7, #12
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fd37 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ab2:	e3c0      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ab8:	e3bd      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008aba:	4b6f      	ldr	r3, [pc, #444]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac4:	4b6c      	ldr	r3, [pc, #432]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f003 0304 	and.w	r3, r3, #4
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d10c      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d109      	bne.n	8008aea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ad6:	4b68      	ldr	r3, [pc, #416]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	08db      	lsrs	r3, r3, #3
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	4a66      	ldr	r2, [pc, #408]	; (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ae8:	e01e      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008aea:	4b63      	ldr	r3, [pc, #396]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af6:	d106      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008afe:	d102      	bne.n	8008b06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008b00:	4b5f      	ldr	r3, [pc, #380]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b04:	e010      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008b06:	4b5c      	ldr	r3, [pc, #368]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b12:	d106      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b1a:	d102      	bne.n	8008b22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008b1c:	4b59      	ldr	r3, [pc, #356]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008b20:	e002      	b.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008b22:	2300      	movs	r3, #0
 8008b24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008b26:	e386      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008b28:	e385      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008b2a:	4b57      	ldr	r3, [pc, #348]	; (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b2e:	e382      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008b30:	2300      	movs	r3, #0
 8008b32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008b34:	e37f      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008b36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b3a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008b3e:	430b      	orrs	r3, r1
 8008b40:	f040 80a7 	bne.w	8008c92 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008b44:	4b4c      	ldr	r3, [pc, #304]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008b4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b54:	d055      	beq.n	8008c02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b5c:	f200 8096 	bhi.w	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b66:	f000 8084 	beq.w	8008c72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b70:	f200 808c 	bhi.w	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b7a:	d030      	beq.n	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b82:	f200 8083 	bhi.w	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b92:	d012      	beq.n	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008b94:	e07a      	b.n	8008c8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b96:	4b38      	ldr	r3, [pc, #224]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ba2:	d107      	bne.n	8008bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fe0b 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bb2:	e340      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bb8:	e33d      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bba:	4b2f      	ldr	r3, [pc, #188]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bc6:	d107      	bne.n	8008bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bc8:	f107 0318 	add.w	r3, r7, #24
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f000 fb51 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bd2:	69bb      	ldr	r3, [r7, #24]
 8008bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bd6:	e32e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bdc:	e32b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bde:	4b26      	ldr	r3, [pc, #152]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008be6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bea:	d107      	bne.n	8008bfc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bec:	f107 030c 	add.w	r3, r7, #12
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fc93 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bfa:	e31c      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c00:	e319      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c0c:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0304 	and.w	r3, r3, #4
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d10c      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d109      	bne.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c1e:	4b16      	ldr	r3, [pc, #88]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	08db      	lsrs	r3, r3, #3
 8008c24:	f003 0303 	and.w	r3, r3, #3
 8008c28:	4a14      	ldr	r2, [pc, #80]	; (8008c7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c30:	e01e      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c32:	4b11      	ldr	r3, [pc, #68]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c3e:	d106      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8008c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c46:	d102      	bne.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c48:	4b0d      	ldr	r3, [pc, #52]	; (8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c4c:	e010      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c5a:	d106      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c62:	d102      	bne.n	8008c6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c64:	4b07      	ldr	r3, [pc, #28]	; (8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c68:	e002      	b.n	8008c70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c6e:	e2e2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c70:	e2e1      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c76:	e2de      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	03d09000 	.word	0x03d09000
 8008c80:	003d0900 	.word	0x003d0900
 8008c84:	017d7840 	.word	0x017d7840
 8008c88:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c90:	e2d1      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c96:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8008c9a:	430b      	orrs	r3, r1
 8008c9c:	f040 809c 	bne.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8008ca0:	4b93      	ldr	r3, [pc, #588]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008ca8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb0:	d054      	beq.n	8008d5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8008cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cb8:	f200 808b 	bhi.w	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008cc2:	f000 8083 	beq.w	8008dcc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8008cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ccc:	f200 8081 	bhi.w	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cd6:	d02f      	beq.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cde:	d878      	bhi.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8008ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d004      	beq.n	8008cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8008ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cec:	d012      	beq.n	8008d14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8008cee:	e070      	b.n	8008dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cf0:	4b7f      	ldr	r3, [pc, #508]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cf8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cfc:	d107      	bne.n	8008d0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fd5e 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d0c:	e293      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d12:	e290      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008d14:	4b76      	ldr	r3, [pc, #472]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d20:	d107      	bne.n	8008d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d22:	f107 0318 	add.w	r3, r7, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f000 faa4 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d2c:	69bb      	ldr	r3, [r7, #24]
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d30:	e281      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d32:	2300      	movs	r3, #0
 8008d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d36:	e27e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d38:	4b6d      	ldr	r3, [pc, #436]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d44:	d107      	bne.n	8008d56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d46:	f107 030c 	add.w	r3, r7, #12
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f000 fbe6 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d54:	e26f      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d5a:	e26c      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d5c:	4b64      	ldr	r3, [pc, #400]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d66:	4b62      	ldr	r3, [pc, #392]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0304 	and.w	r3, r3, #4
 8008d6e:	2b04      	cmp	r3, #4
 8008d70:	d10c      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8008d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d109      	bne.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d78:	4b5d      	ldr	r3, [pc, #372]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	08db      	lsrs	r3, r3, #3
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	4a5c      	ldr	r2, [pc, #368]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008d84:	fa22 f303 	lsr.w	r3, r2, r3
 8008d88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d8a:	e01e      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d8c:	4b58      	ldr	r3, [pc, #352]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d98:	d106      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008da0:	d102      	bne.n	8008da8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008da2:	4b55      	ldr	r3, [pc, #340]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008da4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da6:	e010      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008da8:	4b51      	ldr	r3, [pc, #324]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008db0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008db4:	d106      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dbc:	d102      	bne.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008dbe:	4b4f      	ldr	r3, [pc, #316]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dc2:	e002      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008dc8:	e235      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dca:	e234      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dcc:	4b4c      	ldr	r3, [pc, #304]	; (8008f00 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8008dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd0:	e231      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dd6:	e22e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008dd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ddc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8008de0:	430b      	orrs	r3, r1
 8008de2:	f040 808f 	bne.w	8008f04 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8008de6:	4b42      	ldr	r3, [pc, #264]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008dee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8008df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008df6:	d06b      	beq.n	8008ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8008df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dfe:	d874      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e06:	d056      	beq.n	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8008e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e0e:	d86c      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e16:	d03b      	beq.n	8008e90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8008e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008e1e:	d864      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e26:	d021      	beq.n	8008e6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008e2e:	d85c      	bhi.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8008e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d004      	beq.n	8008e40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8008e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e3c:	d004      	beq.n	8008e48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8008e3e:	e054      	b.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8008e40:	f7fe fa4c 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 8008e44:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e46:	e1f6      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e48:	4b29      	ldr	r3, [pc, #164]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e54:	d107      	bne.n	8008e66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e56:	f107 0318 	add.w	r3, r7, #24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f000 fa0a 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e64:	e1e7      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e66:	2300      	movs	r3, #0
 8008e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6a:	e1e4      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e6c:	4b20      	ldr	r3, [pc, #128]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e78:	d107      	bne.n	8008e8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e7a:	f107 030c 	add.w	r3, r7, #12
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f000 fb4c 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e88:	e1d5      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8e:	e1d2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008e90:	4b17      	ldr	r3, [pc, #92]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b04      	cmp	r3, #4
 8008e9a:	d109      	bne.n	8008eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008e9c:	4b14      	ldr	r3, [pc, #80]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	08db      	lsrs	r3, r3, #3
 8008ea2:	f003 0303 	and.w	r3, r3, #3
 8008ea6:	4a13      	ldr	r2, [pc, #76]	; (8008ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8008ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8008eac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eae:	e1c2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb4:	e1bf      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8008eb6:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ec2:	d102      	bne.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8008ec4:	4b0c      	ldr	r3, [pc, #48]	; (8008ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ec8:	e1b5      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ece:	e1b2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008ed0:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ed8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008edc:	d102      	bne.n	8008ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8008ede:	4b07      	ldr	r3, [pc, #28]	; (8008efc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8008ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ee2:	e1a8      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ee8:	e1a5      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008eea:	2300      	movs	r3, #0
 8008eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eee:	e1a2      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ef0:	58024400 	.word	0x58024400
 8008ef4:	03d09000 	.word	0x03d09000
 8008ef8:	003d0900 	.word	0x003d0900
 8008efc:	017d7840 	.word	0x017d7840
 8008f00:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f08:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	d173      	bne.n	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8008f10:	4b9c      	ldr	r3, [pc, #624]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008f18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8008f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f20:	d02f      	beq.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f28:	d863      	bhi.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d004      	beq.n	8008f3a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8008f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f36:	d012      	beq.n	8008f5e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8008f38:	e05b      	b.n	8008ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f3a:	4b92      	ldr	r3, [pc, #584]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f46:	d107      	bne.n	8008f58 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f48:	f107 0318 	add.w	r3, r7, #24
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f000 f991 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f56:	e16e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5c:	e16b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f5e:	4b89      	ldr	r3, [pc, #548]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f6a:	d107      	bne.n	8008f7c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f6c:	f107 030c 	add.w	r3, r7, #12
 8008f70:	4618      	mov	r0, r3
 8008f72:	f000 fad3 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008f7a:	e15c      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f80:	e159      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f82:	4b80      	ldr	r3, [pc, #512]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008f8a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f8c:	4b7d      	ldr	r3, [pc, #500]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0304 	and.w	r3, r3, #4
 8008f94:	2b04      	cmp	r3, #4
 8008f96:	d10c      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8008f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d109      	bne.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008f9e:	4b79      	ldr	r3, [pc, #484]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	08db      	lsrs	r3, r3, #3
 8008fa4:	f003 0303 	and.w	r3, r3, #3
 8008fa8:	4a77      	ldr	r2, [pc, #476]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8008faa:	fa22 f303 	lsr.w	r3, r2, r3
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fb0:	e01e      	b.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fb2:	4b74      	ldr	r3, [pc, #464]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fbe:	d106      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8008fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc6:	d102      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008fc8:	4b70      	ldr	r3, [pc, #448]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fcc:	e010      	b.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fce:	4b6d      	ldr	r3, [pc, #436]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fda:	d106      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe2:	d102      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008fe4:	4b6a      	ldr	r3, [pc, #424]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe8:	e002      	b.n	8008ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008fea:	2300      	movs	r3, #0
 8008fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008fee:	e122      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008ff0:	e121      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff6:	e11e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ffc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009000:	430b      	orrs	r3, r1
 8009002:	d133      	bne.n	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009004:	4b5f      	ldr	r3, [pc, #380]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800900c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800900e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009010:	2b00      	cmp	r3, #0
 8009012:	d004      	beq.n	800901e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800901a:	d012      	beq.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800901c:	e023      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800901e:	4b59      	ldr	r3, [pc, #356]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800902a:	d107      	bne.n	800903c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800902c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009030:	4618      	mov	r0, r3
 8009032:	f000 fbc7 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800903a:	e0fc      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009040:	e0f9      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009042:	4b50      	ldr	r3, [pc, #320]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800904a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800904e:	d107      	bne.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009050:	f107 0318 	add.w	r3, r7, #24
 8009054:	4618      	mov	r0, r3
 8009056:	f000 f90d 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800905e:	e0ea      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009064:	e0e7      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009066:	2300      	movs	r3, #0
 8009068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906a:	e0e4      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800906c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009070:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009074:	430b      	orrs	r3, r1
 8009076:	f040 808d 	bne.w	8009194 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800907a:	4b42      	ldr	r3, [pc, #264]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800907c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009082:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800908a:	d06b      	beq.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800908c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009092:	d874      	bhi.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909a:	d056      	beq.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800909c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800909e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a2:	d86c      	bhi.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090aa:	d03b      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b2:	d864      	bhi.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090ba:	d021      	beq.n	8009100 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80090bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090c2:	d85c      	bhi.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80090c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d004      	beq.n	80090d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80090ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090d0:	d004      	beq.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80090d2:	e054      	b.n	800917e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80090d4:	f000 f8b8 	bl	8009248 <HAL_RCCEx_GetD3PCLK1Freq>
 80090d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090da:	e0ac      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090dc:	4b29      	ldr	r3, [pc, #164]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090e8:	d107      	bne.n	80090fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090ea:	f107 0318 	add.w	r3, r7, #24
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f8c0 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80090f8:	e09d      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80090fa:	2300      	movs	r3, #0
 80090fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80090fe:	e09a      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009100:	4b20      	ldr	r3, [pc, #128]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009108:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800910c:	d107      	bne.n	800911e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800910e:	f107 030c 	add.w	r3, r7, #12
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fa02 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800911c:	e08b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009122:	e088      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009124:	4b17      	ldr	r3, [pc, #92]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b04      	cmp	r3, #4
 800912e:	d109      	bne.n	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009130:	4b14      	ldr	r3, [pc, #80]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	08db      	lsrs	r3, r3, #3
 8009136:	f003 0303 	and.w	r3, r3, #3
 800913a:	4a13      	ldr	r2, [pc, #76]	; (8009188 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009142:	e078      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009144:	2300      	movs	r3, #0
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009148:	e075      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800914a:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009156:	d102      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800915c:	e06b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009162:	e068      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009164:	4b07      	ldr	r3, [pc, #28]	; (8009184 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800916c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009170:	d102      	bne.n	8009178 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009174:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009176:	e05e      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009178:	2300      	movs	r3, #0
 800917a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800917c:	e05b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800917e:	2300      	movs	r3, #0
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009182:	e058      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009184:	58024400 	.word	0x58024400
 8009188:	03d09000 	.word	0x03d09000
 800918c:	003d0900 	.word	0x003d0900
 8009190:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009198:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800919c:	430b      	orrs	r3, r1
 800919e:	d148      	bne.n	8009232 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80091a0:	4b27      	ldr	r3, [pc, #156]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b0:	d02a      	beq.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80091b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b8:	d838      	bhi.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091c6:	d00d      	beq.n	80091e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80091c8:	e030      	b.n	800922c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091ca:	4b1d      	ldr	r3, [pc, #116]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d6:	d102      	bne.n	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80091d8:	4b1a      	ldr	r3, [pc, #104]	; (8009244 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80091da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091dc:	e02b      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e2:	e028      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091e4:	4b16      	ldr	r3, [pc, #88]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091f0:	d107      	bne.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091f6:	4618      	mov	r0, r3
 80091f8:	f000 fae4 	bl	80097c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009200:	e019      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009206:	e016      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009208:	4b0d      	ldr	r3, [pc, #52]	; (8009240 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009214:	d107      	bne.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0318 	add.w	r3, r7, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f000 f82a 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009224:	e007      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009226:	2300      	movs	r3, #0
 8009228:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800922a:	e004      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009230:	e001      	b.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009238:	4618      	mov	r0, r3
 800923a:	3740      	adds	r7, #64	; 0x40
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	58024400 	.word	0x58024400
 8009244:	017d7840 	.word	0x017d7840

08009248 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800924c:	f7fe f816 	bl	800727c <HAL_RCC_GetHCLKFreq>
 8009250:	4602      	mov	r2, r0
 8009252:	4b06      	ldr	r3, [pc, #24]	; (800926c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	091b      	lsrs	r3, r3, #4
 8009258:	f003 0307 	and.w	r3, r3, #7
 800925c:	4904      	ldr	r1, [pc, #16]	; (8009270 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800925e:	5ccb      	ldrb	r3, [r1, r3]
 8009260:	f003 031f 	and.w	r3, r3, #31
 8009264:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	58024400 	.word	0x58024400
 8009270:	0800dad4 	.word	0x0800dad4

08009274 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009274:	b480      	push	{r7}
 8009276:	b089      	sub	sp, #36	; 0x24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800927c:	4ba1      	ldr	r3, [pc, #644]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800927e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009280:	f003 0303 	and.w	r3, r3, #3
 8009284:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009286:	4b9f      	ldr	r3, [pc, #636]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800928a:	0b1b      	lsrs	r3, r3, #12
 800928c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009290:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009292:	4b9c      	ldr	r3, [pc, #624]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009296:	091b      	lsrs	r3, r3, #4
 8009298:	f003 0301 	and.w	r3, r3, #1
 800929c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800929e:	4b99      	ldr	r3, [pc, #612]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a2:	08db      	lsrs	r3, r3, #3
 80092a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	fb02 f303 	mul.w	r3, r2, r3
 80092ae:	ee07 3a90 	vmov	s15, r3
 80092b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 8111 	beq.w	80094e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	f000 8083 	beq.w	80093d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092ca:	69bb      	ldr	r3, [r7, #24]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	f200 80a1 	bhi.w	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092d2:	69bb      	ldr	r3, [r7, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d056      	beq.n	800938c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092de:	e099      	b.n	8009414 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e0:	4b88      	ldr	r3, [pc, #544]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0320 	and.w	r3, r3, #32
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d02d      	beq.n	8009348 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092ec:	4b85      	ldr	r3, [pc, #532]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	08db      	lsrs	r3, r3, #3
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	4a84      	ldr	r2, [pc, #528]	; (8009508 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80092f8:	fa22 f303 	lsr.w	r3, r2, r3
 80092fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	ee07 3a90 	vmov	s15, r3
 8009304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	ee07 3a90 	vmov	s15, r3
 800930e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009316:	4b7b      	ldr	r3, [pc, #492]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009326:	ed97 6a03 	vldr	s12, [r7, #12]
 800932a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800932e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800933a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800933e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009342:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009346:	e087      	b.n	8009458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	ee07 3a90 	vmov	s15, r3
 800934e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009352:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009510 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800935a:	4b6a      	ldr	r3, [pc, #424]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009362:	ee07 3a90 	vmov	s15, r3
 8009366:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800936a:	ed97 6a03 	vldr	s12, [r7, #12]
 800936e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009372:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009376:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800937a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800937e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800938a:	e065      	b.n	8009458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	ee07 3a90 	vmov	s15, r3
 8009392:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009396:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800939a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800939e:	4b59      	ldr	r3, [pc, #356]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80093b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80093c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093ce:	e043      	b.n	8009458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	ee07 3a90 	vmov	s15, r3
 80093d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093e2:	4b48      	ldr	r3, [pc, #288]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ea:	ee07 3a90 	vmov	s15, r3
 80093ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800940a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800940e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009412:	e021      	b.n	8009458 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	ee07 3a90 	vmov	s15, r3
 800941a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800941e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009514 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009426:	4b37      	ldr	r3, [pc, #220]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009436:	ed97 6a03 	vldr	s12, [r7, #12]
 800943a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800950c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800943e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800944a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800944e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009452:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009456:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009458:	4b2a      	ldr	r3, [pc, #168]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800945a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800945c:	0a5b      	lsrs	r3, r3, #9
 800945e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009462:	ee07 3a90 	vmov	s15, r3
 8009466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800946a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800946e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009472:	edd7 6a07 	vldr	s13, [r7, #28]
 8009476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800947a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800947e:	ee17 2a90 	vmov	r2, s15
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009486:	4b1f      	ldr	r3, [pc, #124]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948a:	0c1b      	lsrs	r3, r3, #16
 800948c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009490:	ee07 3a90 	vmov	s15, r3
 8009494:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800949c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80094a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ac:	ee17 2a90 	vmov	r2, s15
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094b4:	4b13      	ldr	r3, [pc, #76]	; (8009504 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b8:	0e1b      	lsrs	r3, r3, #24
 80094ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094be:	ee07 3a90 	vmov	s15, r3
 80094c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80094d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094da:	ee17 2a90 	vmov	r2, s15
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094e2:	e008      	b.n	80094f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	609a      	str	r2, [r3, #8]
}
 80094f6:	bf00      	nop
 80094f8:	3724      	adds	r7, #36	; 0x24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	58024400 	.word	0x58024400
 8009508:	03d09000 	.word	0x03d09000
 800950c:	46000000 	.word	0x46000000
 8009510:	4c742400 	.word	0x4c742400
 8009514:	4a742400 	.word	0x4a742400
 8009518:	4bbebc20 	.word	0x4bbebc20

0800951c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800951c:	b480      	push	{r7}
 800951e:	b089      	sub	sp, #36	; 0x24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009524:	4ba1      	ldr	r3, [pc, #644]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009528:	f003 0303 	and.w	r3, r3, #3
 800952c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800952e:	4b9f      	ldr	r3, [pc, #636]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009532:	0d1b      	lsrs	r3, r3, #20
 8009534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009538:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800953a:	4b9c      	ldr	r3, [pc, #624]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953e:	0a1b      	lsrs	r3, r3, #8
 8009540:	f003 0301 	and.w	r3, r3, #1
 8009544:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009546:	4b99      	ldr	r3, [pc, #612]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800954a:	08db      	lsrs	r3, r3, #3
 800954c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	fb02 f303 	mul.w	r3, r2, r3
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800955e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f000 8111 	beq.w	800978c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	2b02      	cmp	r3, #2
 800956e:	f000 8083 	beq.w	8009678 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	2b02      	cmp	r3, #2
 8009576:	f200 80a1 	bhi.w	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d003      	beq.n	8009588 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d056      	beq.n	8009634 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009586:	e099      	b.n	80096bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009588:	4b88      	ldr	r3, [pc, #544]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d02d      	beq.n	80095f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009594:	4b85      	ldr	r3, [pc, #532]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	08db      	lsrs	r3, r3, #3
 800959a:	f003 0303 	and.w	r3, r3, #3
 800959e:	4a84      	ldr	r2, [pc, #528]	; (80097b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095a0:	fa22 f303 	lsr.w	r3, r2, r3
 80095a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	ee07 3a90 	vmov	s15, r3
 80095ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	ee07 3a90 	vmov	s15, r3
 80095b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095be:	4b7b      	ldr	r3, [pc, #492]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80095d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80095ee:	e087      	b.n	8009700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	ee07 3a90 	vmov	s15, r3
 80095f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80097b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80095fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009602:	4b6a      	ldr	r3, [pc, #424]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800960a:	ee07 3a90 	vmov	s15, r3
 800960e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009612:	ed97 6a03 	vldr	s12, [r7, #12]
 8009616:	eddf 5a67 	vldr	s11, [pc, #412]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800961a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800961e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800962a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800962e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009632:	e065      	b.n	8009700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	ee07 3a90 	vmov	s15, r3
 800963a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800963e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80097bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009646:	4b59      	ldr	r3, [pc, #356]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800964e:	ee07 3a90 	vmov	s15, r3
 8009652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009656:	ed97 6a03 	vldr	s12, [r7, #12]
 800965a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800965e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800966a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800966e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009672:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009676:	e043      	b.n	8009700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	ee07 3a90 	vmov	s15, r3
 800967e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009682:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800968a:	4b48      	ldr	r3, [pc, #288]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800968c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009692:	ee07 3a90 	vmov	s15, r3
 8009696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800969a:	ed97 6a03 	vldr	s12, [r7, #12]
 800969e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ba:	e021      	b.n	8009700 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	ee07 3a90 	vmov	s15, r3
 80096c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80097bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ce:	4b37      	ldr	r3, [pc, #220]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096de:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009704:	0a5b      	lsrs	r3, r3, #9
 8009706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800970a:	ee07 3a90 	vmov	s15, r3
 800970e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009712:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009716:	ee37 7a87 	vadd.f32	s14, s15, s14
 800971a:	edd7 6a07 	vldr	s13, [r7, #28]
 800971e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009722:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009726:	ee17 2a90 	vmov	r2, s15
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800972e:	4b1f      	ldr	r3, [pc, #124]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	0c1b      	lsrs	r3, r3, #16
 8009734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009738:	ee07 3a90 	vmov	s15, r3
 800973c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009740:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009744:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009748:	edd7 6a07 	vldr	s13, [r7, #28]
 800974c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009750:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009754:	ee17 2a90 	vmov	r2, s15
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800975c:	4b13      	ldr	r3, [pc, #76]	; (80097ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	0e1b      	lsrs	r3, r3, #24
 8009762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009772:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009776:	edd7 6a07 	vldr	s13, [r7, #28]
 800977a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800977e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009782:	ee17 2a90 	vmov	r2, s15
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800978a:	e008      	b.n	800979e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	609a      	str	r2, [r3, #8]
}
 800979e:	bf00      	nop
 80097a0:	3724      	adds	r7, #36	; 0x24
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	58024400 	.word	0x58024400
 80097b0:	03d09000 	.word	0x03d09000
 80097b4:	46000000 	.word	0x46000000
 80097b8:	4c742400 	.word	0x4c742400
 80097bc:	4a742400 	.word	0x4a742400
 80097c0:	4bbebc20 	.word	0x4bbebc20

080097c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b089      	sub	sp, #36	; 0x24
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80097cc:	4ba0      	ldr	r3, [pc, #640]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d0:	f003 0303 	and.w	r3, r3, #3
 80097d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80097d6:	4b9e      	ldr	r3, [pc, #632]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097da:	091b      	lsrs	r3, r3, #4
 80097dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80097e2:	4b9b      	ldr	r3, [pc, #620]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80097ec:	4b98      	ldr	r3, [pc, #608]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80097ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f0:	08db      	lsrs	r3, r3, #3
 80097f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80097f6:	693a      	ldr	r2, [r7, #16]
 80097f8:	fb02 f303 	mul.w	r3, r2, r3
 80097fc:	ee07 3a90 	vmov	s15, r3
 8009800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009804:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2b00      	cmp	r3, #0
 800980c:	f000 8111 	beq.w	8009a32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	2b02      	cmp	r3, #2
 8009814:	f000 8083 	beq.w	800991e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	2b02      	cmp	r3, #2
 800981c:	f200 80a1 	bhi.w	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009820:	69bb      	ldr	r3, [r7, #24]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d003      	beq.n	800982e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d056      	beq.n	80098da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800982c:	e099      	b.n	8009962 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800982e:	4b88      	ldr	r3, [pc, #544]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f003 0320 	and.w	r3, r3, #32
 8009836:	2b00      	cmp	r3, #0
 8009838:	d02d      	beq.n	8009896 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800983a:	4b85      	ldr	r3, [pc, #532]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	08db      	lsrs	r3, r3, #3
 8009840:	f003 0303 	and.w	r3, r3, #3
 8009844:	4a83      	ldr	r2, [pc, #524]	; (8009a54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009846:	fa22 f303 	lsr.w	r3, r2, r3
 800984a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	ee07 3a90 	vmov	s15, r3
 8009852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	ee07 3a90 	vmov	s15, r3
 800985c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009864:	4b7a      	ldr	r3, [pc, #488]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800986c:	ee07 3a90 	vmov	s15, r3
 8009870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009874:	ed97 6a03 	vldr	s12, [r7, #12]
 8009878:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800987c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009884:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009888:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800988c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009890:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009894:	e087      	b.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	ee07 3a90 	vmov	s15, r3
 800989c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80098a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098a8:	4b69      	ldr	r3, [pc, #420]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b0:	ee07 3a90 	vmov	s15, r3
 80098b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80098bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80098c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80098d8:	e065      	b.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	ee07 3a90 	vmov	s15, r3
 80098e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009a60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80098e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098ec:	4b58      	ldr	r3, [pc, #352]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098f4:	ee07 3a90 	vmov	s15, r3
 80098f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8009900:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009904:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009908:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800990c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009910:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009914:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009918:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800991c:	e043      	b.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	ee07 3a90 	vmov	s15, r3
 8009924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009928:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009a64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800992c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009930:	4b47      	ldr	r3, [pc, #284]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009938:	ee07 3a90 	vmov	s15, r3
 800993c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009940:	ed97 6a03 	vldr	s12, [r7, #12]
 8009944:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009948:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800994c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009950:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800995c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009960:	e021      	b.n	80099a6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009a5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009970:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009974:	4b36      	ldr	r3, [pc, #216]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997c:	ee07 3a90 	vmov	s15, r3
 8009980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009984:	ed97 6a03 	vldr	s12, [r7, #12]
 8009988:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009a58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800998c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009990:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009994:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009998:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80099a4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80099a6:	4b2a      	ldr	r3, [pc, #168]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	0a5b      	lsrs	r3, r3, #9
 80099ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b0:	ee07 3a90 	vmov	s15, r3
 80099b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80099c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099cc:	ee17 2a90 	vmov	r2, s15
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80099d4:	4b1e      	ldr	r3, [pc, #120]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	0c1b      	lsrs	r3, r3, #16
 80099da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099de:	ee07 3a90 	vmov	s15, r3
 80099e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80099ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80099f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099fa:	ee17 2a90 	vmov	r2, s15
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009a02:	4b13      	ldr	r3, [pc, #76]	; (8009a50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a06:	0e1b      	lsrs	r3, r3, #24
 8009a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a0c:	ee07 3a90 	vmov	s15, r3
 8009a10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a28:	ee17 2a90 	vmov	r2, s15
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009a30:	e008      	b.n	8009a44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	609a      	str	r2, [r3, #8]
}
 8009a44:	bf00      	nop
 8009a46:	3724      	adds	r7, #36	; 0x24
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	58024400 	.word	0x58024400
 8009a54:	03d09000 	.word	0x03d09000
 8009a58:	46000000 	.word	0x46000000
 8009a5c:	4c742400 	.word	0x4c742400
 8009a60:	4a742400 	.word	0x4a742400
 8009a64:	4bbebc20 	.word	0x4bbebc20

08009a68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a76:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	f003 0303 	and.w	r3, r3, #3
 8009a7e:	2b03      	cmp	r3, #3
 8009a80:	d101      	bne.n	8009a86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a82:	2301      	movs	r3, #1
 8009a84:	e099      	b.n	8009bba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a86:	4b4f      	ldr	r3, [pc, #316]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	4a4e      	ldr	r2, [pc, #312]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a92:	f7f8 fc27 	bl	80022e4 <HAL_GetTick>
 8009a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a98:	e008      	b.n	8009aac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a9a:	f7f8 fc23 	bl	80022e4 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	2b02      	cmp	r3, #2
 8009aa6:	d901      	bls.n	8009aac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	e086      	b.n	8009bba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009aac:	4b45      	ldr	r3, [pc, #276]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d1f0      	bne.n	8009a9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009ab8:	4b42      	ldr	r3, [pc, #264]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009abc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	031b      	lsls	r3, r3, #12
 8009ac6:	493f      	ldr	r1, [pc, #252]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	628b      	str	r3, [r1, #40]	; 0x28
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	3b01      	subs	r3, #1
 8009adc:	025b      	lsls	r3, r3, #9
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	68db      	ldr	r3, [r3, #12]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	041b      	lsls	r3, r3, #16
 8009aea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	061b      	lsls	r3, r3, #24
 8009af8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009afc:	4931      	ldr	r1, [pc, #196]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009afe:	4313      	orrs	r3, r2
 8009b00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009b02:	4b30      	ldr	r3, [pc, #192]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	492d      	ldr	r1, [pc, #180]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b10:	4313      	orrs	r3, r2
 8009b12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009b14:	4b2b      	ldr	r3, [pc, #172]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b18:	f023 0220 	bic.w	r2, r3, #32
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	4928      	ldr	r1, [pc, #160]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b2a:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b2c:	f023 0310 	bic.w	r3, r3, #16
 8009b30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b36:	4b24      	ldr	r3, [pc, #144]	; (8009bc8 <RCCEx_PLL2_Config+0x160>)
 8009b38:	4013      	ands	r3, r2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	69d2      	ldr	r2, [r2, #28]
 8009b3e:	00d2      	lsls	r2, r2, #3
 8009b40:	4920      	ldr	r1, [pc, #128]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009b46:	4b1f      	ldr	r3, [pc, #124]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4a:	4a1e      	ldr	r2, [pc, #120]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b4c:	f043 0310 	orr.w	r3, r3, #16
 8009b50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d106      	bne.n	8009b66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009b58:	4b1a      	ldr	r3, [pc, #104]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5c:	4a19      	ldr	r2, [pc, #100]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b64:	e00f      	b.n	8009b86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d106      	bne.n	8009b7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009b6c:	4b15      	ldr	r3, [pc, #84]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4a14      	ldr	r2, [pc, #80]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b78:	e005      	b.n	8009b86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b7e:	4a11      	ldr	r2, [pc, #68]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b86:	4b0f      	ldr	r3, [pc, #60]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a0e      	ldr	r2, [pc, #56]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009b8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b92:	f7f8 fba7 	bl	80022e4 <HAL_GetTick>
 8009b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b98:	e008      	b.n	8009bac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009b9a:	f7f8 fba3 	bl	80022e4 <HAL_GetTick>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	1ad3      	subs	r3, r2, r3
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	d901      	bls.n	8009bac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e006      	b.n	8009bba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009bac:	4b05      	ldr	r3, [pc, #20]	; (8009bc4 <RCCEx_PLL2_Config+0x15c>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d0f0      	beq.n	8009b9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	58024400 	.word	0x58024400
 8009bc8:	ffff0007 	.word	0xffff0007

08009bcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009bda:	4b53      	ldr	r3, [pc, #332]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d101      	bne.n	8009bea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e099      	b.n	8009d1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009bea:	4b4f      	ldr	r3, [pc, #316]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a4e      	ldr	r2, [pc, #312]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bf6:	f7f8 fb75 	bl	80022e4 <HAL_GetTick>
 8009bfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009bfc:	e008      	b.n	8009c10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bfe:	f7f8 fb71 	bl	80022e4 <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	1ad3      	subs	r3, r2, r3
 8009c08:	2b02      	cmp	r3, #2
 8009c0a:	d901      	bls.n	8009c10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009c0c:	2303      	movs	r3, #3
 8009c0e:	e086      	b.n	8009d1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009c10:	4b45      	ldr	r3, [pc, #276]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1f0      	bne.n	8009bfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009c1c:	4b42      	ldr	r3, [pc, #264]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	051b      	lsls	r3, r3, #20
 8009c2a:	493f      	ldr	r1, [pc, #252]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	628b      	str	r3, [r1, #40]	; 0x28
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	3b01      	subs	r3, #1
 8009c40:	025b      	lsls	r3, r3, #9
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	041b      	lsls	r3, r3, #16
 8009c4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	691b      	ldr	r3, [r3, #16]
 8009c58:	3b01      	subs	r3, #1
 8009c5a:	061b      	lsls	r3, r3, #24
 8009c5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009c60:	4931      	ldr	r1, [pc, #196]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c62:	4313      	orrs	r3, r2
 8009c64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009c66:	4b30      	ldr	r3, [pc, #192]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	492d      	ldr	r1, [pc, #180]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	4313      	orrs	r3, r2
 8009c76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c78:	4b2b      	ldr	r3, [pc, #172]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	4928      	ldr	r1, [pc, #160]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c8a:	4b27      	ldr	r3, [pc, #156]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c8e:	4a26      	ldr	r2, [pc, #152]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c96:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c9a:	4b24      	ldr	r3, [pc, #144]	; (8009d2c <RCCEx_PLL3_Config+0x160>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	69d2      	ldr	r2, [r2, #28]
 8009ca2:	00d2      	lsls	r2, r2, #3
 8009ca4:	4920      	ldr	r1, [pc, #128]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009caa:	4b1f      	ldr	r3, [pc, #124]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	4a1e      	ldr	r2, [pc, #120]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d106      	bne.n	8009cca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009cbc:	4b1a      	ldr	r3, [pc, #104]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a19      	ldr	r2, [pc, #100]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cc8:	e00f      	b.n	8009cea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d106      	bne.n	8009cde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009cd0:	4b15      	ldr	r3, [pc, #84]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd4:	4a14      	ldr	r2, [pc, #80]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009cdc:	e005      	b.n	8009cea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009cde:	4b12      	ldr	r3, [pc, #72]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	4a11      	ldr	r2, [pc, #68]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ce8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009cea:	4b0f      	ldr	r3, [pc, #60]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a0e      	ldr	r2, [pc, #56]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cf6:	f7f8 faf5 	bl	80022e4 <HAL_GetTick>
 8009cfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009cfc:	e008      	b.n	8009d10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009cfe:	f7f8 faf1 	bl	80022e4 <HAL_GetTick>
 8009d02:	4602      	mov	r2, r0
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	1ad3      	subs	r3, r2, r3
 8009d08:	2b02      	cmp	r3, #2
 8009d0a:	d901      	bls.n	8009d10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e006      	b.n	8009d1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009d10:	4b05      	ldr	r3, [pc, #20]	; (8009d28 <RCCEx_PLL3_Config+0x15c>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0f0      	beq.n	8009cfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	58024400 	.word	0x58024400
 8009d2c:	ffff0007 	.word	0xffff0007

08009d30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d101      	bne.n	8009d42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e10f      	b.n	8009f62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2200      	movs	r2, #0
 8009d46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a87      	ldr	r2, [pc, #540]	; (8009f6c <HAL_SPI_Init+0x23c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d00f      	beq.n	8009d72 <HAL_SPI_Init+0x42>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4a86      	ldr	r2, [pc, #536]	; (8009f70 <HAL_SPI_Init+0x240>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d00a      	beq.n	8009d72 <HAL_SPI_Init+0x42>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a84      	ldr	r2, [pc, #528]	; (8009f74 <HAL_SPI_Init+0x244>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d005      	beq.n	8009d72 <HAL_SPI_Init+0x42>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	68db      	ldr	r3, [r3, #12]
 8009d6a:	2b0f      	cmp	r3, #15
 8009d6c:	d901      	bls.n	8009d72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e0f7      	b.n	8009f62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fd5a 	bl	800a82c <SPI_GetPacketSize>
 8009d78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a7b      	ldr	r2, [pc, #492]	; (8009f6c <HAL_SPI_Init+0x23c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d00c      	beq.n	8009d9e <HAL_SPI_Init+0x6e>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a79      	ldr	r2, [pc, #484]	; (8009f70 <HAL_SPI_Init+0x240>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d007      	beq.n	8009d9e <HAL_SPI_Init+0x6e>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a78      	ldr	r2, [pc, #480]	; (8009f74 <HAL_SPI_Init+0x244>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d002      	beq.n	8009d9e <HAL_SPI_Init+0x6e>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b08      	cmp	r3, #8
 8009d9c:	d811      	bhi.n	8009dc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009da2:	4a72      	ldr	r2, [pc, #456]	; (8009f6c <HAL_SPI_Init+0x23c>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d009      	beq.n	8009dbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a70      	ldr	r2, [pc, #448]	; (8009f70 <HAL_SPI_Init+0x240>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d004      	beq.n	8009dbc <HAL_SPI_Init+0x8c>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a6f      	ldr	r2, [pc, #444]	; (8009f74 <HAL_SPI_Init+0x244>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d104      	bne.n	8009dc6 <HAL_SPI_Init+0x96>
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	2b10      	cmp	r3, #16
 8009dc0:	d901      	bls.n	8009dc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e0cd      	b.n	8009f62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009dcc:	b2db      	uxtb	r3, r3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d106      	bne.n	8009de0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7f7 fe9e 	bl	8001b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0201 	bic.w	r2, r2, #1
 8009df6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	689b      	ldr	r3, [r3, #8]
 8009dfe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009e02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	699b      	ldr	r3, [r3, #24]
 8009e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009e0c:	d119      	bne.n	8009e42 <HAL_SPI_Init+0x112>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e16:	d103      	bne.n	8009e20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d008      	beq.n	8009e32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10c      	bne.n	8009e42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009e2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e30:	d107      	bne.n	8009e42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009e40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d00f      	beq.n	8009e6e <HAL_SPI_Init+0x13e>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	2b06      	cmp	r3, #6
 8009e54:	d90b      	bls.n	8009e6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	430a      	orrs	r2, r1
 8009e6a:	601a      	str	r2, [r3, #0]
 8009e6c:	e007      	b.n	8009e7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	69da      	ldr	r2, [r3, #28]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e86:	431a      	orrs	r2, r3
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	431a      	orrs	r2, r3
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e90:	ea42 0103 	orr.w	r1, r2, r3
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68da      	ldr	r2, [r3, #12]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	431a      	orrs	r2, r3
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eae:	431a      	orrs	r2, r3
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	431a      	orrs	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	431a      	orrs	r2, r3
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6a1b      	ldr	r3, [r3, #32]
 8009ec6:	431a      	orrs	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	685b      	ldr	r3, [r3, #4]
 8009ecc:	431a      	orrs	r2, r3
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ed2:	431a      	orrs	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ede:	ea42 0103 	orr.w	r1, r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d113      	bne.n	8009f1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	689b      	ldr	r3, [r3, #8]
 8009efc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f022 0201 	bic.w	r2, r2, #1
 8009f2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68db      	ldr	r3, [r3, #12]
 8009f40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	40013000 	.word	0x40013000
 8009f70:	40003800 	.word	0x40003800
 8009f74:	40003c00 	.word	0x40003c00

08009f78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08a      	sub	sp, #40	; 0x28
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	603b      	str	r3, [r7, #0]
 8009f84:	4613      	mov	r3, r2
 8009f86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	3320      	adds	r3, #32
 8009f8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d101      	bne.n	8009fa2 <HAL_SPI_Transmit+0x2a>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e1e1      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009faa:	f7f8 f99b 	bl	80022e4 <HAL_GetTick>
 8009fae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d007      	beq.n	8009fcc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009fbc:	2302      	movs	r3, #2
 8009fbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009fc8:	7efb      	ldrb	r3, [r7, #27]
 8009fca:	e1cc      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <HAL_SPI_Transmit+0x60>
 8009fd2:	88fb      	ldrh	r3, [r7, #6]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d107      	bne.n	8009fe8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009fe4:	7efb      	ldrb	r3, [r7, #27]
 8009fe6:	e1be      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2203      	movs	r2, #3
 8009fec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	88fa      	ldrh	r2, [r7, #6]
 800a002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	88fa      	ldrh	r2, [r7, #6]
 800a00a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2200      	movs	r2, #0
 800a018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	2200      	movs	r2, #0
 800a020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2200      	movs	r2, #0
 800a028:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	2200      	movs	r2, #0
 800a02e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a038:	d108      	bne.n	800a04c <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a048:	601a      	str	r2, [r3, #0]
 800a04a:	e009      	b.n	800a060 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	68db      	ldr	r3, [r3, #12]
 800a052:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a05e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	4b96      	ldr	r3, [pc, #600]	; (800a2c0 <HAL_SPI_Transmit+0x348>)
 800a068:	4013      	ands	r3, r2
 800a06a:	88f9      	ldrh	r1, [r7, #6]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	6812      	ldr	r2, [r2, #0]
 800a070:	430b      	orrs	r3, r1
 800a072:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f042 0201 	orr.w	r2, r2, #1
 800a082:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a08c:	d107      	bne.n	800a09e <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a09c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	d947      	bls.n	800a136 <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a0a6:	e03f      	b.n	800a128 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d114      	bne.n	800a0e0 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6812      	ldr	r2, [r2, #0]
 800a0c0:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c6:	1d1a      	adds	r2, r3, #4
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	3b01      	subs	r3, #1
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0de:	e023      	b.n	800a128 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0e0:	f7f8 f900 	bl	80022e4 <HAL_GetTick>
 800a0e4:	4602      	mov	r2, r0
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	1ad3      	subs	r3, r2, r3
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d803      	bhi.n	800a0f8 <HAL_SPI_Transmit+0x180>
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	d102      	bne.n	800a0fe <HAL_SPI_Transmit+0x186>
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d114      	bne.n	800a128 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 fac6 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a112:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a124:	2303      	movs	r3, #3
 800a126:	e11e      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a12e:	b29b      	uxth	r3, r3
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1b9      	bne.n	800a0a8 <HAL_SPI_Transmit+0x130>
 800a134:	e0f1      	b.n	800a31a <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b07      	cmp	r3, #7
 800a13c:	f240 80e6 	bls.w	800a30c <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a140:	e05d      	b.n	800a1fe <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d132      	bne.n	800a1b6 <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a156:	b29b      	uxth	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d918      	bls.n	800a18e <HAL_SPI_Transmit+0x216>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a160:	2b00      	cmp	r3, #0
 800a162:	d014      	beq.n	800a18e <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a180:	b29b      	uxth	r3, r3
 800a182:	3b02      	subs	r3, #2
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a18c:	e037      	b.n	800a1fe <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a192:	881a      	ldrh	r2, [r3, #0]
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a19c:	1c9a      	adds	r2, r3, #2
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	3b01      	subs	r3, #1
 800a1ac:	b29a      	uxth	r2, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1b4:	e023      	b.n	800a1fe <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1b6:	f7f8 f895 	bl	80022e4 <HAL_GetTick>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	683a      	ldr	r2, [r7, #0]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d803      	bhi.n	800a1ce <HAL_SPI_Transmit+0x256>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1cc:	d102      	bne.n	800a1d4 <HAL_SPI_Transmit+0x25c>
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d114      	bne.n	800a1fe <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a1d4:	68f8      	ldr	r0, [r7, #12]
 800a1d6:	f000 fa5b 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e0b3      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a204:	b29b      	uxth	r3, r3
 800a206:	2b00      	cmp	r3, #0
 800a208:	d19b      	bne.n	800a142 <HAL_SPI_Transmit+0x1ca>
 800a20a:	e086      	b.n	800a31a <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	695b      	ldr	r3, [r3, #20]
 800a212:	f003 0302 	and.w	r3, r3, #2
 800a216:	2b02      	cmp	r3, #2
 800a218:	d154      	bne.n	800a2c4 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a220:	b29b      	uxth	r3, r3
 800a222:	2b03      	cmp	r3, #3
 800a224:	d918      	bls.n	800a258 <HAL_SPI_Transmit+0x2e0>
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a22a:	2b40      	cmp	r3, #64	; 0x40
 800a22c:	d914      	bls.n	800a258 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	6812      	ldr	r2, [r2, #0]
 800a238:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23e:	1d1a      	adds	r2, r3, #4
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	3b04      	subs	r3, #4
 800a24e:	b29a      	uxth	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a256:	e059      	b.n	800a30c <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a25e:	b29b      	uxth	r3, r3
 800a260:	2b01      	cmp	r3, #1
 800a262:	d917      	bls.n	800a294 <HAL_SPI_Transmit+0x31c>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d013      	beq.n	800a294 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a270:	881a      	ldrh	r2, [r3, #0]
 800a272:	69fb      	ldr	r3, [r7, #28]
 800a274:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a27a:	1c9a      	adds	r2, r3, #2
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a286:	b29b      	uxth	r3, r3
 800a288:	3b02      	subs	r3, #2
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a292:	e03b      	b.n	800a30c <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	3320      	adds	r3, #32
 800a29e:	7812      	ldrb	r2, [r2, #0]
 800a2a0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a6:	1c5a      	adds	r2, r3, #1
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2be:	e025      	b.n	800a30c <HAL_SPI_Transmit+0x394>
 800a2c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2c4:	f7f8 f80e 	bl	80022e4 <HAL_GetTick>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	1ad3      	subs	r3, r2, r3
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d803      	bhi.n	800a2dc <HAL_SPI_Transmit+0x364>
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2da:	d102      	bne.n	800a2e2 <HAL_SPI_Transmit+0x36a>
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d114      	bne.n	800a30c <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 f9d4 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a308:	2303      	movs	r3, #3
 800a30a:	e02c      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a312:	b29b      	uxth	r3, r3
 800a314:	2b00      	cmp	r3, #0
 800a316:	f47f af79 	bne.w	800a20c <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	9300      	str	r3, [sp, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	2200      	movs	r2, #0
 800a322:	2108      	movs	r1, #8
 800a324:	68f8      	ldr	r0, [r7, #12]
 800a326:	f000 fa53 	bl	800a7d0 <SPI_WaitOnFlagUntilTimeout>
 800a32a:	4603      	mov	r3, r0
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a336:	f043 0220 	orr.w	r2, r3, #32
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f000 f9a5 	bl	800a690 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d001      	beq.n	800a364 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a364:	7efb      	ldrb	r3, [r7, #27]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop

0800a370 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	603b      	str	r3, [r7, #0]
 800a37c:	4613      	mov	r3, r2
 800a37e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a380:	2300      	movs	r3, #0
 800a382:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	3330      	adds	r3, #48	; 0x30
 800a38a:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a392:	2b01      	cmp	r3, #1
 800a394:	d101      	bne.n	800a39a <HAL_SPI_Receive+0x2a>
 800a396:	2302      	movs	r3, #2
 800a398:	e173      	b.n	800a682 <HAL_SPI_Receive+0x312>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2201      	movs	r2, #1
 800a39e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3a2:	f7f7 ff9f 	bl	80022e4 <HAL_GetTick>
 800a3a6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a3ae:	b2db      	uxtb	r3, r3
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d007      	beq.n	800a3c4 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a3c0:	7ffb      	ldrb	r3, [r7, #31]
 800a3c2:	e15e      	b.n	800a682 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <HAL_SPI_Receive+0x60>
 800a3ca:	88fb      	ldrh	r3, [r7, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d107      	bne.n	800a3e0 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a3dc:	7ffb      	ldrb	r3, [r7, #31]
 800a3de:	e150      	b.n	800a682 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	88fa      	ldrh	r2, [r7, #6]
 800a3fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	88fa      	ldrh	r2, [r7, #6]
 800a402:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2200      	movs	r2, #0
 800a40a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2200      	movs	r2, #0
 800a410:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a430:	d108      	bne.n	800a444 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	e009      	b.n	800a458 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800a456:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	685a      	ldr	r2, [r3, #4]
 800a45e:	4b8b      	ldr	r3, [pc, #556]	; (800a68c <HAL_SPI_Receive+0x31c>)
 800a460:	4013      	ands	r3, r2
 800a462:	88f9      	ldrh	r1, [r7, #6]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	6812      	ldr	r2, [r2, #0]
 800a468:	430b      	orrs	r3, r1
 800a46a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f042 0201 	orr.w	r2, r2, #1
 800a47a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a484:	d107      	bne.n	800a496 <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a494:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	2b0f      	cmp	r3, #15
 800a49c:	d948      	bls.n	800a530 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a49e:	e040      	b.n	800a522 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	695a      	ldr	r2, [r3, #20]
 800a4a6:	f248 0308 	movw	r3, #32776	; 0x8008
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d014      	beq.n	800a4da <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681a      	ldr	r2, [r3, #0]
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a4ba:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a4c0:	1d1a      	adds	r2, r3, #4
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a4d8:	e023      	b.n	800a522 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4da:	f7f7 ff03 	bl	80022e4 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d803      	bhi.n	800a4f2 <HAL_SPI_Receive+0x182>
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f0:	d102      	bne.n	800a4f8 <HAL_SPI_Receive+0x188>
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d114      	bne.n	800a522 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f000 f8c9 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2200      	movs	r2, #0
 800a502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a50c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e0af      	b.n	800a682 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a528:	b29b      	uxth	r3, r3
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1b8      	bne.n	800a4a0 <HAL_SPI_Receive+0x130>
 800a52e:	e095      	b.n	800a65c <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	2b07      	cmp	r3, #7
 800a536:	f240 808b 	bls.w	800a650 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800a53a:	e03f      	b.n	800a5bc <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	f003 0301 	and.w	r3, r3, #1
 800a546:	2b01      	cmp	r3, #1
 800a548:	d114      	bne.n	800a574 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a54e:	69ba      	ldr	r2, [r7, #24]
 800a550:	8812      	ldrh	r2, [r2, #0]
 800a552:	b292      	uxth	r2, r2
 800a554:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a55a:	1c9a      	adds	r2, r3, #2
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a566:	b29b      	uxth	r3, r3
 800a568:	3b01      	subs	r3, #1
 800a56a:	b29a      	uxth	r2, r3
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a572:	e023      	b.n	800a5bc <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a574:	f7f7 feb6 	bl	80022e4 <HAL_GetTick>
 800a578:	4602      	mov	r2, r0
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d803      	bhi.n	800a58c <HAL_SPI_Receive+0x21c>
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a58a:	d102      	bne.n	800a592 <HAL_SPI_Receive+0x222>
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d114      	bne.n	800a5bc <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f000 f87c 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a5b8:	2303      	movs	r3, #3
 800a5ba:	e062      	b.n	800a682 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1b9      	bne.n	800a53c <HAL_SPI_Receive+0x1cc>
 800a5c8:	e048      	b.n	800a65c <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d117      	bne.n	800a608 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5e4:	7812      	ldrb	r2, [r2, #0]
 800a5e6:	b2d2      	uxtb	r2, r2
 800a5e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a5ee:	1c5a      	adds	r2, r3, #1
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	b29a      	uxth	r2, r3
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800a606:	e023      	b.n	800a650 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a608:	f7f7 fe6c 	bl	80022e4 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	429a      	cmp	r2, r3
 800a616:	d803      	bhi.n	800a620 <HAL_SPI_Receive+0x2b0>
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61e:	d102      	bne.n	800a626 <HAL_SPI_Receive+0x2b6>
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d114      	bne.n	800a650 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a626:	68f8      	ldr	r0, [r7, #12]
 800a628:	f000 f832 	bl	800a690 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a63a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a64c:	2303      	movs	r3, #3
 800a64e:	e018      	b.n	800a682 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a656:	b29b      	uxth	r3, r3
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1b6      	bne.n	800a5ca <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 f817 	bl	800a690 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	2200      	movs	r2, #0
 800a666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d001      	beq.n	800a680 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e000      	b.n	800a682 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800a680:	7ffb      	ldrb	r3, [r7, #31]
}
 800a682:	4618      	mov	r0, r3
 800a684:	3720      	adds	r7, #32
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	ffff0000 	.word	0xffff0000

0800a690 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	695b      	ldr	r3, [r3, #20]
 800a69e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f042 0208 	orr.w	r2, r2, #8
 800a6ae:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699a      	ldr	r2, [r3, #24]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f042 0210 	orr.w	r2, r2, #16
 800a6be:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 0201 	bic.w	r2, r2, #1
 800a6ce:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6919      	ldr	r1, [r3, #16]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	4b3c      	ldr	r3, [pc, #240]	; (800a7cc <SPI_CloseTransfer+0x13c>)
 800a6dc:	400b      	ands	r3, r1
 800a6de:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	689a      	ldr	r2, [r3, #8]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a6ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b04      	cmp	r3, #4
 800a6fa:	d014      	beq.n	800a726 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f003 0320 	and.w	r3, r3, #32
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00f      	beq.n	800a726 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a70c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	699a      	ldr	r2, [r3, #24]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f042 0220 	orr.w	r2, r2, #32
 800a724:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b03      	cmp	r3, #3
 800a730:	d014      	beq.n	800a75c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00f      	beq.n	800a75c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a742:	f043 0204 	orr.w	r2, r3, #4
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	699a      	ldr	r2, [r3, #24]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a75a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a76c:	f043 0201 	orr.w	r2, r3, #1
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	699a      	ldr	r2, [r3, #24]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a784:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d00f      	beq.n	800a7b0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a796:	f043 0208 	orr.w	r2, r3, #8
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699a      	ldr	r2, [r3, #24]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7ae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a7c0:	bf00      	nop
 800a7c2:	3714      	adds	r7, #20
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr
 800a7cc:	fffffc90 	.word	0xfffffc90

0800a7d0 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b084      	sub	sp, #16
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a7e0:	e010      	b.n	800a804 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a7e2:	f7f7 fd7f 	bl	80022e4 <HAL_GetTick>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	1ad3      	subs	r3, r2, r3
 800a7ec:	683a      	ldr	r2, [r7, #0]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d803      	bhi.n	800a7fa <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f8:	d102      	bne.n	800a800 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e00f      	b.n	800a824 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	4013      	ands	r3, r2
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	429a      	cmp	r2, r3
 800a812:	bf0c      	ite	eq
 800a814:	2301      	moveq	r3, #1
 800a816:	2300      	movne	r3, #0
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	461a      	mov	r2, r3
 800a81c:	79fb      	ldrb	r3, [r7, #7]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d0df      	beq.n	800a7e2 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a822:	2300      	movs	r3, #0
}
 800a824:	4618      	mov	r0, r3
 800a826:	3710      	adds	r7, #16
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a838:	095b      	lsrs	r3, r3, #5
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	3301      	adds	r3, #1
 800a844:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	3307      	adds	r3, #7
 800a84a:	08db      	lsrs	r3, r3, #3
 800a84c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	fb02 f303 	mul.w	r3, r2, r3
}
 800a856:	4618      	mov	r0, r3
 800a858:	3714      	adds	r7, #20
 800a85a:	46bd      	mov	sp, r7
 800a85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a860:	4770      	bx	lr

0800a862 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d101      	bne.n	800a874 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	e049      	b.n	800a908 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a87a:	b2db      	uxtb	r3, r3
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d106      	bne.n	800a88e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f7f7 f9fd 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2202      	movs	r2, #2
 800a892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681a      	ldr	r2, [r3, #0]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	3304      	adds	r3, #4
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	f000 fd95 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2201      	movs	r2, #1
 800a8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2201      	movs	r2, #1
 800a902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3708      	adds	r7, #8
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b01      	cmp	r3, #1
 800a922:	d001      	beq.n	800a928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e054      	b.n	800a9d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2202      	movs	r2, #2
 800a92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68da      	ldr	r2, [r3, #12]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f042 0201 	orr.w	r2, r2, #1
 800a93e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a26      	ldr	r2, [pc, #152]	; (800a9e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d022      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a952:	d01d      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a22      	ldr	r2, [pc, #136]	; (800a9e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d018      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a21      	ldr	r2, [pc, #132]	; (800a9e8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d013      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a1f      	ldr	r2, [pc, #124]	; (800a9ec <HAL_TIM_Base_Start_IT+0xdc>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d00e      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	4a1e      	ldr	r2, [pc, #120]	; (800a9f0 <HAL_TIM_Base_Start_IT+0xe0>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d009      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a1c      	ldr	r2, [pc, #112]	; (800a9f4 <HAL_TIM_Base_Start_IT+0xe4>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d004      	beq.n	800a990 <HAL_TIM_Base_Start_IT+0x80>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a1b      	ldr	r2, [pc, #108]	; (800a9f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d115      	bne.n	800a9bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689a      	ldr	r2, [r3, #8]
 800a996:	4b19      	ldr	r3, [pc, #100]	; (800a9fc <HAL_TIM_Base_Start_IT+0xec>)
 800a998:	4013      	ands	r3, r2
 800a99a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2b06      	cmp	r3, #6
 800a9a0:	d015      	beq.n	800a9ce <HAL_TIM_Base_Start_IT+0xbe>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9a8:	d011      	beq.n	800a9ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f042 0201 	orr.w	r2, r2, #1
 800a9b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9ba:	e008      	b.n	800a9ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681a      	ldr	r2, [r3, #0]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f042 0201 	orr.w	r2, r2, #1
 800a9ca:	601a      	str	r2, [r3, #0]
 800a9cc:	e000      	b.n	800a9d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr
 800a9de:	bf00      	nop
 800a9e0:	40010000 	.word	0x40010000
 800a9e4:	40000400 	.word	0x40000400
 800a9e8:	40000800 	.word	0x40000800
 800a9ec:	40000c00 	.word	0x40000c00
 800a9f0:	40010400 	.word	0x40010400
 800a9f4:	40001800 	.word	0x40001800
 800a9f8:	40014000 	.word	0x40014000
 800a9fc:	00010007 	.word	0x00010007

0800aa00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f022 0201 	bic.w	r2, r2, #1
 800aa16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	6a1a      	ldr	r2, [r3, #32]
 800aa1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800aa22:	4013      	ands	r3, r2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10f      	bne.n	800aa48 <HAL_TIM_Base_Stop_IT+0x48>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	6a1a      	ldr	r2, [r3, #32]
 800aa2e:	f240 4344 	movw	r3, #1092	; 0x444
 800aa32:	4013      	ands	r3, r2
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d107      	bne.n	800aa48 <HAL_TIM_Base_Stop_IT+0x48>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f022 0201 	bic.w	r2, r2, #1
 800aa46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa5e:	b580      	push	{r7, lr}
 800aa60:	b082      	sub	sp, #8
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e049      	b.n	800ab04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d106      	bne.n	800aa8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f7f7 f95b 	bl	8001d40 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2202      	movs	r2, #2
 800aa8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f000 fc97 	bl	800b3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2201      	movs	r2, #1
 800aaae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2201      	movs	r2, #1
 800aabe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2201      	movs	r2, #1
 800aace:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2201      	movs	r2, #1
 800aad6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2201      	movs	r2, #1
 800aade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2201      	movs	r2, #1
 800aae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3708      	adds	r7, #8
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <HAL_TIM_PWM_Start+0x24>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	bf14      	ite	ne
 800ab28:	2301      	movne	r3, #1
 800ab2a:	2300      	moveq	r3, #0
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	e03c      	b.n	800abaa <HAL_TIM_PWM_Start+0x9e>
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	2b04      	cmp	r3, #4
 800ab34:	d109      	bne.n	800ab4a <HAL_TIM_PWM_Start+0x3e>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	bf14      	ite	ne
 800ab42:	2301      	movne	r3, #1
 800ab44:	2300      	moveq	r3, #0
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	e02f      	b.n	800abaa <HAL_TIM_PWM_Start+0x9e>
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	2b08      	cmp	r3, #8
 800ab4e:	d109      	bne.n	800ab64 <HAL_TIM_PWM_Start+0x58>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	bf14      	ite	ne
 800ab5c:	2301      	movne	r3, #1
 800ab5e:	2300      	moveq	r3, #0
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	e022      	b.n	800abaa <HAL_TIM_PWM_Start+0x9e>
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	2b0c      	cmp	r3, #12
 800ab68:	d109      	bne.n	800ab7e <HAL_TIM_PWM_Start+0x72>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	bf14      	ite	ne
 800ab76:	2301      	movne	r3, #1
 800ab78:	2300      	moveq	r3, #0
 800ab7a:	b2db      	uxtb	r3, r3
 800ab7c:	e015      	b.n	800abaa <HAL_TIM_PWM_Start+0x9e>
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	2b10      	cmp	r3, #16
 800ab82:	d109      	bne.n	800ab98 <HAL_TIM_PWM_Start+0x8c>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	bf14      	ite	ne
 800ab90:	2301      	movne	r3, #1
 800ab92:	2300      	moveq	r3, #0
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	e008      	b.n	800abaa <HAL_TIM_PWM_Start+0x9e>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	bf14      	ite	ne
 800aba4:	2301      	movne	r3, #1
 800aba6:	2300      	moveq	r3, #0
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e0a1      	b.n	800acf6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d104      	bne.n	800abc2 <HAL_TIM_PWM_Start+0xb6>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2202      	movs	r2, #2
 800abbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800abc0:	e023      	b.n	800ac0a <HAL_TIM_PWM_Start+0xfe>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d104      	bne.n	800abd2 <HAL_TIM_PWM_Start+0xc6>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2202      	movs	r2, #2
 800abcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800abd0:	e01b      	b.n	800ac0a <HAL_TIM_PWM_Start+0xfe>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b08      	cmp	r3, #8
 800abd6:	d104      	bne.n	800abe2 <HAL_TIM_PWM_Start+0xd6>
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800abe0:	e013      	b.n	800ac0a <HAL_TIM_PWM_Start+0xfe>
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	2b0c      	cmp	r3, #12
 800abe6:	d104      	bne.n	800abf2 <HAL_TIM_PWM_Start+0xe6>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2202      	movs	r2, #2
 800abec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800abf0:	e00b      	b.n	800ac0a <HAL_TIM_PWM_Start+0xfe>
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	2b10      	cmp	r3, #16
 800abf6:	d104      	bne.n	800ac02 <HAL_TIM_PWM_Start+0xf6>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2202      	movs	r2, #2
 800abfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ac00:	e003      	b.n	800ac0a <HAL_TIM_PWM_Start+0xfe>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2202      	movs	r2, #2
 800ac06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	6839      	ldr	r1, [r7, #0]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f000 ffea 	bl	800bbec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	4a38      	ldr	r2, [pc, #224]	; (800ad00 <HAL_TIM_PWM_Start+0x1f4>)
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	d013      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x13e>
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	4a37      	ldr	r2, [pc, #220]	; (800ad04 <HAL_TIM_PWM_Start+0x1f8>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00e      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x13e>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4a35      	ldr	r2, [pc, #212]	; (800ad08 <HAL_TIM_PWM_Start+0x1fc>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d009      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x13e>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a34      	ldr	r2, [pc, #208]	; (800ad0c <HAL_TIM_PWM_Start+0x200>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d004      	beq.n	800ac4a <HAL_TIM_PWM_Start+0x13e>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a32      	ldr	r2, [pc, #200]	; (800ad10 <HAL_TIM_PWM_Start+0x204>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d101      	bne.n	800ac4e <HAL_TIM_PWM_Start+0x142>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	e000      	b.n	800ac50 <HAL_TIM_PWM_Start+0x144>
 800ac4e:	2300      	movs	r3, #0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d007      	beq.n	800ac64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4a25      	ldr	r2, [pc, #148]	; (800ad00 <HAL_TIM_PWM_Start+0x1f4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d022      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac76:	d01d      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a25      	ldr	r2, [pc, #148]	; (800ad14 <HAL_TIM_PWM_Start+0x208>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d018      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	4a24      	ldr	r2, [pc, #144]	; (800ad18 <HAL_TIM_PWM_Start+0x20c>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d013      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	4a22      	ldr	r2, [pc, #136]	; (800ad1c <HAL_TIM_PWM_Start+0x210>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d00e      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a1a      	ldr	r2, [pc, #104]	; (800ad04 <HAL_TIM_PWM_Start+0x1f8>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d009      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <HAL_TIM_PWM_Start+0x214>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d004      	beq.n	800acb4 <HAL_TIM_PWM_Start+0x1a8>
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	4a16      	ldr	r2, [pc, #88]	; (800ad08 <HAL_TIM_PWM_Start+0x1fc>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d115      	bne.n	800ace0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	689a      	ldr	r2, [r3, #8]
 800acba:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <HAL_TIM_PWM_Start+0x218>)
 800acbc:	4013      	ands	r3, r2
 800acbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2b06      	cmp	r3, #6
 800acc4:	d015      	beq.n	800acf2 <HAL_TIM_PWM_Start+0x1e6>
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800accc:	d011      	beq.n	800acf2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	681a      	ldr	r2, [r3, #0]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f042 0201 	orr.w	r2, r2, #1
 800acdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acde:	e008      	b.n	800acf2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f042 0201 	orr.w	r2, r2, #1
 800acee:	601a      	str	r2, [r3, #0]
 800acf0:	e000      	b.n	800acf4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800acf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800acf4:	2300      	movs	r3, #0
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40010000 	.word	0x40010000
 800ad04:	40010400 	.word	0x40010400
 800ad08:	40014000 	.word	0x40014000
 800ad0c:	40014400 	.word	0x40014400
 800ad10:	40014800 	.word	0x40014800
 800ad14:	40000400 	.word	0x40000400
 800ad18:	40000800 	.word	0x40000800
 800ad1c:	40000c00 	.word	0x40000c00
 800ad20:	40001800 	.word	0x40001800
 800ad24:	00010007 	.word	0x00010007

0800ad28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0302 	and.w	r3, r3, #2
 800ad3a:	2b02      	cmp	r3, #2
 800ad3c:	d122      	bne.n	800ad84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	68db      	ldr	r3, [r3, #12]
 800ad44:	f003 0302 	and.w	r3, r3, #2
 800ad48:	2b02      	cmp	r3, #2
 800ad4a:	d11b      	bne.n	800ad84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f06f 0202 	mvn.w	r2, #2
 800ad54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2201      	movs	r2, #1
 800ad5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	f003 0303 	and.w	r3, r3, #3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 fb12 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ad70:	e005      	b.n	800ad7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 fb04 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 fb15 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2200      	movs	r2, #0
 800ad82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	f003 0304 	and.w	r3, r3, #4
 800ad8e:	2b04      	cmp	r3, #4
 800ad90:	d122      	bne.n	800add8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d11b      	bne.n	800add8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f06f 0204 	mvn.w	r2, #4
 800ada8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	699b      	ldr	r3, [r3, #24]
 800adb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d003      	beq.n	800adc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fae8 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800adc4:	e005      	b.n	800add2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adc6:	6878      	ldr	r0, [r7, #4]
 800adc8:	f000 fada 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 faeb 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2200      	movs	r2, #0
 800add6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	691b      	ldr	r3, [r3, #16]
 800adde:	f003 0308 	and.w	r3, r3, #8
 800ade2:	2b08      	cmp	r3, #8
 800ade4:	d122      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	f003 0308 	and.w	r3, r3, #8
 800adf0:	2b08      	cmp	r3, #8
 800adf2:	d11b      	bne.n	800ae2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f06f 0208 	mvn.w	r2, #8
 800adfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2204      	movs	r2, #4
 800ae02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	69db      	ldr	r3, [r3, #28]
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d003      	beq.n	800ae1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fabe 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ae18:	e005      	b.n	800ae26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fab0 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 fac1 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	f003 0310 	and.w	r3, r3, #16
 800ae36:	2b10      	cmp	r3, #16
 800ae38:	d122      	bne.n	800ae80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	f003 0310 	and.w	r3, r3, #16
 800ae44:	2b10      	cmp	r3, #16
 800ae46:	d11b      	bne.n	800ae80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f06f 0210 	mvn.w	r2, #16
 800ae50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2208      	movs	r2, #8
 800ae56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	69db      	ldr	r3, [r3, #28]
 800ae5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d003      	beq.n	800ae6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa94 	bl	800b394 <HAL_TIM_IC_CaptureCallback>
 800ae6c:	e005      	b.n	800ae7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fa86 	bl	800b380 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 fa97 	bl	800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	f003 0301 	and.w	r3, r3, #1
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d10e      	bne.n	800aeac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d107      	bne.n	800aeac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f06f 0201 	mvn.w	r2, #1
 800aea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aea6:	6878      	ldr	r0, [r7, #4]
 800aea8:	f7f6 fcf4 	bl	8001894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeb6:	2b80      	cmp	r3, #128	; 0x80
 800aeb8:	d10e      	bne.n	800aed8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aec4:	2b80      	cmp	r3, #128	; 0x80
 800aec6:	d107      	bne.n	800aed8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 ffc6 	bl	800be64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	691b      	ldr	r3, [r3, #16]
 800aede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aee6:	d10e      	bne.n	800af06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68db      	ldr	r3, [r3, #12]
 800aeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aef2:	2b80      	cmp	r3, #128	; 0x80
 800aef4:	d107      	bne.n	800af06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800aefe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 ffb9 	bl	800be78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	691b      	ldr	r3, [r3, #16]
 800af0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af10:	2b40      	cmp	r3, #64	; 0x40
 800af12:	d10e      	bne.n	800af32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af1e:	2b40      	cmp	r3, #64	; 0x40
 800af20:	d107      	bne.n	800af32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800af2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 fa45 	bl	800b3bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	f003 0320 	and.w	r3, r3, #32
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d10e      	bne.n	800af5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f003 0320 	and.w	r3, r3, #32
 800af4a:	2b20      	cmp	r3, #32
 800af4c:	d107      	bne.n	800af5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f06f 0220 	mvn.w	r2, #32
 800af56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 ff79 	bl	800be50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800af5e:	bf00      	nop
 800af60:	3708      	adds	r7, #8
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
	...

0800af68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800af74:	2300      	movs	r3, #0
 800af76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800af82:	2302      	movs	r3, #2
 800af84:	e0ff      	b.n	800b186 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	2b14      	cmp	r3, #20
 800af92:	f200 80f0 	bhi.w	800b176 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800aff1 	.word	0x0800aff1
 800afa0:	0800b177 	.word	0x0800b177
 800afa4:	0800b177 	.word	0x0800b177
 800afa8:	0800b177 	.word	0x0800b177
 800afac:	0800b031 	.word	0x0800b031
 800afb0:	0800b177 	.word	0x0800b177
 800afb4:	0800b177 	.word	0x0800b177
 800afb8:	0800b177 	.word	0x0800b177
 800afbc:	0800b073 	.word	0x0800b073
 800afc0:	0800b177 	.word	0x0800b177
 800afc4:	0800b177 	.word	0x0800b177
 800afc8:	0800b177 	.word	0x0800b177
 800afcc:	0800b0b3 	.word	0x0800b0b3
 800afd0:	0800b177 	.word	0x0800b177
 800afd4:	0800b177 	.word	0x0800b177
 800afd8:	0800b177 	.word	0x0800b177
 800afdc:	0800b0f5 	.word	0x0800b0f5
 800afe0:	0800b177 	.word	0x0800b177
 800afe4:	0800b177 	.word	0x0800b177
 800afe8:	0800b177 	.word	0x0800b177
 800afec:	0800b135 	.word	0x0800b135
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	68b9      	ldr	r1, [r7, #8]
 800aff6:	4618      	mov	r0, r3
 800aff8:	f000 fa84 	bl	800b504 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	699a      	ldr	r2, [r3, #24]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f042 0208 	orr.w	r2, r2, #8
 800b00a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	699a      	ldr	r2, [r3, #24]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f022 0204 	bic.w	r2, r2, #4
 800b01a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6999      	ldr	r1, [r3, #24]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691a      	ldr	r2, [r3, #16]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	430a      	orrs	r2, r1
 800b02c:	619a      	str	r2, [r3, #24]
      break;
 800b02e:	e0a5      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	68b9      	ldr	r1, [r7, #8]
 800b036:	4618      	mov	r0, r3
 800b038:	f000 faf4 	bl	800b624 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	699a      	ldr	r2, [r3, #24]
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b04a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	699a      	ldr	r2, [r3, #24]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b05a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6999      	ldr	r1, [r3, #24]
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	691b      	ldr	r3, [r3, #16]
 800b066:	021a      	lsls	r2, r3, #8
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	430a      	orrs	r2, r1
 800b06e:	619a      	str	r2, [r3, #24]
      break;
 800b070:	e084      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	68b9      	ldr	r1, [r7, #8]
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fb5d 	bl	800b738 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69da      	ldr	r2, [r3, #28]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f042 0208 	orr.w	r2, r2, #8
 800b08c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	69da      	ldr	r2, [r3, #28]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	f022 0204 	bic.w	r2, r2, #4
 800b09c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69d9      	ldr	r1, [r3, #28]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	691a      	ldr	r2, [r3, #16]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	430a      	orrs	r2, r1
 800b0ae:	61da      	str	r2, [r3, #28]
      break;
 800b0b0:	e064      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	68b9      	ldr	r1, [r7, #8]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 fbc5 	bl	800b848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	69da      	ldr	r2, [r3, #28]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	69d9      	ldr	r1, [r3, #28]
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	021a      	lsls	r2, r3, #8
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	430a      	orrs	r2, r1
 800b0f0:	61da      	str	r2, [r3, #28]
      break;
 800b0f2:	e043      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	68b9      	ldr	r1, [r7, #8]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fc0e 	bl	800b91c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f042 0208 	orr.w	r2, r2, #8
 800b10e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 0204 	bic.w	r2, r2, #4
 800b11e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	691a      	ldr	r2, [r3, #16]
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b132:	e023      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	68b9      	ldr	r1, [r7, #8]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 fc52 	bl	800b9e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b14e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b15e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	021a      	lsls	r2, r3, #8
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800b174:	e002      	b.n	800b17c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
      break;
 800b17a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b184:	7dfb      	ldrb	r3, [r7, #23]
}
 800b186:	4618      	mov	r0, r3
 800b188:	3718      	adds	r7, #24
 800b18a:	46bd      	mov	sp, r7
 800b18c:	bd80      	pop	{r7, pc}
 800b18e:	bf00      	nop

0800b190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
 800b198:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b19a:	2300      	movs	r3, #0
 800b19c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIM_ConfigClockSource+0x1c>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e0dc      	b.n	800b366 <HAL_TIM_ConfigClockSource+0x1d6>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1c4:	68ba      	ldr	r2, [r7, #8]
 800b1c6:	4b6a      	ldr	r3, [pc, #424]	; (800b370 <HAL_TIM_ConfigClockSource+0x1e0>)
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a64      	ldr	r2, [pc, #400]	; (800b374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	f000 80a9 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b1e8:	4a62      	ldr	r2, [pc, #392]	; (800b374 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	f200 80ae 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b1f0:	4a61      	ldr	r2, [pc, #388]	; (800b378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	f000 80a1 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b1f8:	4a5f      	ldr	r2, [pc, #380]	; (800b378 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	f200 80a6 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b200:	4a5e      	ldr	r2, [pc, #376]	; (800b37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b202:	4293      	cmp	r3, r2
 800b204:	f000 8099 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b208:	4a5c      	ldr	r2, [pc, #368]	; (800b37c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	f200 809e 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b210:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b214:	f000 8091 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b218:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b21c:	f200 8096 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b224:	f000 8089 	beq.w	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b228:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b22c:	f200 808e 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b234:	d03e      	beq.n	800b2b4 <HAL_TIM_ConfigClockSource+0x124>
 800b236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b23a:	f200 8087 	bhi.w	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b23e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b242:	f000 8086 	beq.w	800b352 <HAL_TIM_ConfigClockSource+0x1c2>
 800b246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b24a:	d87f      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b24c:	2b70      	cmp	r3, #112	; 0x70
 800b24e:	d01a      	beq.n	800b286 <HAL_TIM_ConfigClockSource+0xf6>
 800b250:	2b70      	cmp	r3, #112	; 0x70
 800b252:	d87b      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b254:	2b60      	cmp	r3, #96	; 0x60
 800b256:	d050      	beq.n	800b2fa <HAL_TIM_ConfigClockSource+0x16a>
 800b258:	2b60      	cmp	r3, #96	; 0x60
 800b25a:	d877      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b25c:	2b50      	cmp	r3, #80	; 0x50
 800b25e:	d03c      	beq.n	800b2da <HAL_TIM_ConfigClockSource+0x14a>
 800b260:	2b50      	cmp	r3, #80	; 0x50
 800b262:	d873      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b264:	2b40      	cmp	r3, #64	; 0x40
 800b266:	d058      	beq.n	800b31a <HAL_TIM_ConfigClockSource+0x18a>
 800b268:	2b40      	cmp	r3, #64	; 0x40
 800b26a:	d86f      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b26c:	2b30      	cmp	r3, #48	; 0x30
 800b26e:	d064      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b270:	2b30      	cmp	r3, #48	; 0x30
 800b272:	d86b      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b274:	2b20      	cmp	r3, #32
 800b276:	d060      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b278:	2b20      	cmp	r3, #32
 800b27a:	d867      	bhi.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d05c      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b280:	2b10      	cmp	r3, #16
 800b282:	d05a      	beq.n	800b33a <HAL_TIM_ConfigClockSource+0x1aa>
 800b284:	e062      	b.n	800b34c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6818      	ldr	r0, [r3, #0]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	6899      	ldr	r1, [r3, #8]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	68db      	ldr	r3, [r3, #12]
 800b296:	f000 fc89 	bl	800bbac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b2a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	609a      	str	r2, [r3, #8]
      break;
 800b2b2:	e04f      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6818      	ldr	r0, [r3, #0]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	6899      	ldr	r1, [r3, #8]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f000 fc72 	bl	800bbac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	689a      	ldr	r2, [r3, #8]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2d6:	609a      	str	r2, [r3, #8]
      break;
 800b2d8:	e03c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6818      	ldr	r0, [r3, #0]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	6859      	ldr	r1, [r3, #4]
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	68db      	ldr	r3, [r3, #12]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	f000 fbe2 	bl	800bab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2150      	movs	r1, #80	; 0x50
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 fc3c 	bl	800bb70 <TIM_ITRx_SetConfig>
      break;
 800b2f8:	e02c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6818      	ldr	r0, [r3, #0]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	6859      	ldr	r1, [r3, #4]
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	461a      	mov	r2, r3
 800b308:	f000 fc01 	bl	800bb0e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2160      	movs	r1, #96	; 0x60
 800b312:	4618      	mov	r0, r3
 800b314:	f000 fc2c 	bl	800bb70 <TIM_ITRx_SetConfig>
      break;
 800b318:	e01c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6818      	ldr	r0, [r3, #0]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	6859      	ldr	r1, [r3, #4]
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	68db      	ldr	r3, [r3, #12]
 800b326:	461a      	mov	r2, r3
 800b328:	f000 fbc2 	bl	800bab0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2140      	movs	r1, #64	; 0x40
 800b332:	4618      	mov	r0, r3
 800b334:	f000 fc1c 	bl	800bb70 <TIM_ITRx_SetConfig>
      break;
 800b338:	e00c      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681a      	ldr	r2, [r3, #0]
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	4619      	mov	r1, r3
 800b344:	4610      	mov	r0, r2
 800b346:	f000 fc13 	bl	800bb70 <TIM_ITRx_SetConfig>
      break;
 800b34a:	e003      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	73fb      	strb	r3, [r7, #15]
      break;
 800b350:	e000      	b.n	800b354 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b364:	7bfb      	ldrb	r3, [r7, #15]
}
 800b366:	4618      	mov	r0, r3
 800b368:	3710      	adds	r7, #16
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	ffceff88 	.word	0xffceff88
 800b374:	00100040 	.word	0x00100040
 800b378:	00100030 	.word	0x00100030
 800b37c:	00100020 	.word	0x00100020

0800b380 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b3a8:	b480      	push	{r7}
 800b3aa:	b083      	sub	sp, #12
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b3b0:	bf00      	nop
 800b3b2:	370c      	adds	r7, #12
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b3c4:	bf00      	nop
 800b3c6:	370c      	adds	r7, #12
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
 800b3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a40      	ldr	r2, [pc, #256]	; (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d013      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3ee:	d00f      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	4a3d      	ldr	r2, [pc, #244]	; (800b4e8 <TIM_Base_SetConfig+0x118>)
 800b3f4:	4293      	cmp	r3, r2
 800b3f6:	d00b      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a3c      	ldr	r2, [pc, #240]	; (800b4ec <TIM_Base_SetConfig+0x11c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d007      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a3b      	ldr	r2, [pc, #236]	; (800b4f0 <TIM_Base_SetConfig+0x120>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d003      	beq.n	800b410 <TIM_Base_SetConfig+0x40>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a3a      	ldr	r2, [pc, #232]	; (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d108      	bne.n	800b422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a2f      	ldr	r2, [pc, #188]	; (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d01f      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b430:	d01b      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a2c      	ldr	r2, [pc, #176]	; (800b4e8 <TIM_Base_SetConfig+0x118>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d017      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a2b      	ldr	r2, [pc, #172]	; (800b4ec <TIM_Base_SetConfig+0x11c>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d013      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4a2a      	ldr	r2, [pc, #168]	; (800b4f0 <TIM_Base_SetConfig+0x120>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d00f      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4a29      	ldr	r2, [pc, #164]	; (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d00b      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	4a28      	ldr	r2, [pc, #160]	; (800b4f8 <TIM_Base_SetConfig+0x128>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d007      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	4a27      	ldr	r2, [pc, #156]	; (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d003      	beq.n	800b46a <TIM_Base_SetConfig+0x9a>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a26      	ldr	r2, [pc, #152]	; (800b500 <TIM_Base_SetConfig+0x130>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d108      	bne.n	800b47c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	68db      	ldr	r3, [r3, #12]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	4313      	orrs	r3, r2
 800b47a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	695b      	ldr	r3, [r3, #20]
 800b486:	4313      	orrs	r3, r2
 800b488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	68fa      	ldr	r2, [r7, #12]
 800b48e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	689a      	ldr	r2, [r3, #8]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	4a10      	ldr	r2, [pc, #64]	; (800b4e4 <TIM_Base_SetConfig+0x114>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d00f      	beq.n	800b4c8 <TIM_Base_SetConfig+0xf8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a12      	ldr	r2, [pc, #72]	; (800b4f4 <TIM_Base_SetConfig+0x124>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00b      	beq.n	800b4c8 <TIM_Base_SetConfig+0xf8>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a11      	ldr	r2, [pc, #68]	; (800b4f8 <TIM_Base_SetConfig+0x128>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d007      	beq.n	800b4c8 <TIM_Base_SetConfig+0xf8>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a10      	ldr	r2, [pc, #64]	; (800b4fc <TIM_Base_SetConfig+0x12c>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d003      	beq.n	800b4c8 <TIM_Base_SetConfig+0xf8>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a0f      	ldr	r2, [pc, #60]	; (800b500 <TIM_Base_SetConfig+0x130>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d103      	bne.n	800b4d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	691a      	ldr	r2, [r3, #16]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	615a      	str	r2, [r3, #20]
}
 800b4d6:	bf00      	nop
 800b4d8:	3714      	adds	r7, #20
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr
 800b4e2:	bf00      	nop
 800b4e4:	40010000 	.word	0x40010000
 800b4e8:	40000400 	.word	0x40000400
 800b4ec:	40000800 	.word	0x40000800
 800b4f0:	40000c00 	.word	0x40000c00
 800b4f4:	40010400 	.word	0x40010400
 800b4f8:	40014000 	.word	0x40014000
 800b4fc:	40014400 	.word	0x40014400
 800b500:	40014800 	.word	0x40014800

0800b504 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	6a1b      	ldr	r3, [r3, #32]
 800b512:	f023 0201 	bic.w	r2, r3, #1
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	6a1b      	ldr	r3, [r3, #32]
 800b51e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	699b      	ldr	r3, [r3, #24]
 800b52a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b52c:	68fa      	ldr	r2, [r7, #12]
 800b52e:	4b37      	ldr	r3, [pc, #220]	; (800b60c <TIM_OC1_SetConfig+0x108>)
 800b530:	4013      	ands	r3, r2
 800b532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f023 0303 	bic.w	r3, r3, #3
 800b53a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b546:	697b      	ldr	r3, [r7, #20]
 800b548:	f023 0302 	bic.w	r3, r3, #2
 800b54c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	4313      	orrs	r3, r2
 800b556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a2d      	ldr	r2, [pc, #180]	; (800b610 <TIM_OC1_SetConfig+0x10c>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d00f      	beq.n	800b580 <TIM_OC1_SetConfig+0x7c>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a2c      	ldr	r2, [pc, #176]	; (800b614 <TIM_OC1_SetConfig+0x110>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d00b      	beq.n	800b580 <TIM_OC1_SetConfig+0x7c>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a2b      	ldr	r2, [pc, #172]	; (800b618 <TIM_OC1_SetConfig+0x114>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d007      	beq.n	800b580 <TIM_OC1_SetConfig+0x7c>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a2a      	ldr	r2, [pc, #168]	; (800b61c <TIM_OC1_SetConfig+0x118>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <TIM_OC1_SetConfig+0x7c>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a29      	ldr	r2, [pc, #164]	; (800b620 <TIM_OC1_SetConfig+0x11c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d10c      	bne.n	800b59a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	f023 0308 	bic.w	r3, r3, #8
 800b586:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	697a      	ldr	r2, [r7, #20]
 800b58e:	4313      	orrs	r3, r2
 800b590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f023 0304 	bic.w	r3, r3, #4
 800b598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	4a1c      	ldr	r2, [pc, #112]	; (800b610 <TIM_OC1_SetConfig+0x10c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d00f      	beq.n	800b5c2 <TIM_OC1_SetConfig+0xbe>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	4a1b      	ldr	r2, [pc, #108]	; (800b614 <TIM_OC1_SetConfig+0x110>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00b      	beq.n	800b5c2 <TIM_OC1_SetConfig+0xbe>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4a1a      	ldr	r2, [pc, #104]	; (800b618 <TIM_OC1_SetConfig+0x114>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d007      	beq.n	800b5c2 <TIM_OC1_SetConfig+0xbe>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	4a19      	ldr	r2, [pc, #100]	; (800b61c <TIM_OC1_SetConfig+0x118>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d003      	beq.n	800b5c2 <TIM_OC1_SetConfig+0xbe>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	4a18      	ldr	r2, [pc, #96]	; (800b620 <TIM_OC1_SetConfig+0x11c>)
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d111      	bne.n	800b5e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b5c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b5d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	695b      	ldr	r3, [r3, #20]
 800b5d6:	693a      	ldr	r2, [r7, #16]
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	699b      	ldr	r3, [r3, #24]
 800b5e0:	693a      	ldr	r2, [r7, #16]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	685a      	ldr	r2, [r3, #4]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	697a      	ldr	r2, [r7, #20]
 800b5fe:	621a      	str	r2, [r3, #32]
}
 800b600:	bf00      	nop
 800b602:	371c      	adds	r7, #28
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	fffeff8f 	.word	0xfffeff8f
 800b610:	40010000 	.word	0x40010000
 800b614:	40010400 	.word	0x40010400
 800b618:	40014000 	.word	0x40014000
 800b61c:	40014400 	.word	0x40014400
 800b620:	40014800 	.word	0x40014800

0800b624 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b624:	b480      	push	{r7}
 800b626:	b087      	sub	sp, #28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a1b      	ldr	r3, [r3, #32]
 800b632:	f023 0210 	bic.w	r2, r3, #16
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6a1b      	ldr	r3, [r3, #32]
 800b63e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	685b      	ldr	r3, [r3, #4]
 800b644:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4b34      	ldr	r3, [pc, #208]	; (800b720 <TIM_OC2_SetConfig+0xfc>)
 800b650:	4013      	ands	r3, r2
 800b652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b65a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	021b      	lsls	r3, r3, #8
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	4313      	orrs	r3, r2
 800b666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	f023 0320 	bic.w	r3, r3, #32
 800b66e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	689b      	ldr	r3, [r3, #8]
 800b674:	011b      	lsls	r3, r3, #4
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	4a29      	ldr	r2, [pc, #164]	; (800b724 <TIM_OC2_SetConfig+0x100>)
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <TIM_OC2_SetConfig+0x68>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	4a28      	ldr	r2, [pc, #160]	; (800b728 <TIM_OC2_SetConfig+0x104>)
 800b688:	4293      	cmp	r3, r2
 800b68a:	d10d      	bne.n	800b6a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	011b      	lsls	r3, r3, #4
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	4313      	orrs	r3, r2
 800b69e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	4a1e      	ldr	r2, [pc, #120]	; (800b724 <TIM_OC2_SetConfig+0x100>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d00f      	beq.n	800b6d0 <TIM_OC2_SetConfig+0xac>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a1d      	ldr	r2, [pc, #116]	; (800b728 <TIM_OC2_SetConfig+0x104>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d00b      	beq.n	800b6d0 <TIM_OC2_SetConfig+0xac>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	4a1c      	ldr	r2, [pc, #112]	; (800b72c <TIM_OC2_SetConfig+0x108>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d007      	beq.n	800b6d0 <TIM_OC2_SetConfig+0xac>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a1b      	ldr	r2, [pc, #108]	; (800b730 <TIM_OC2_SetConfig+0x10c>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d003      	beq.n	800b6d0 <TIM_OC2_SetConfig+0xac>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a1a      	ldr	r2, [pc, #104]	; (800b734 <TIM_OC2_SetConfig+0x110>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d113      	bne.n	800b6f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	693a      	ldr	r2, [r7, #16]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	009b      	lsls	r3, r3, #2
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	68fa      	ldr	r2, [r7, #12]
 800b702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	697a      	ldr	r2, [r7, #20]
 800b710:	621a      	str	r2, [r3, #32]
}
 800b712:	bf00      	nop
 800b714:	371c      	adds	r7, #28
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	feff8fff 	.word	0xfeff8fff
 800b724:	40010000 	.word	0x40010000
 800b728:	40010400 	.word	0x40010400
 800b72c:	40014000 	.word	0x40014000
 800b730:	40014400 	.word	0x40014400
 800b734:	40014800 	.word	0x40014800

0800b738 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b738:	b480      	push	{r7}
 800b73a:	b087      	sub	sp, #28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6a1b      	ldr	r3, [r3, #32]
 800b752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b760:	68fa      	ldr	r2, [r7, #12]
 800b762:	4b33      	ldr	r3, [pc, #204]	; (800b830 <TIM_OC3_SetConfig+0xf8>)
 800b764:	4013      	ands	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f023 0303 	bic.w	r3, r3, #3
 800b76e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	68fa      	ldr	r2, [r7, #12]
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b780:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	021b      	lsls	r3, r3, #8
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	4a28      	ldr	r2, [pc, #160]	; (800b834 <TIM_OC3_SetConfig+0xfc>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d003      	beq.n	800b79e <TIM_OC3_SetConfig+0x66>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	4a27      	ldr	r2, [pc, #156]	; (800b838 <TIM_OC3_SetConfig+0x100>)
 800b79a:	4293      	cmp	r3, r2
 800b79c:	d10d      	bne.n	800b7ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b7a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	68db      	ldr	r3, [r3, #12]
 800b7aa:	021b      	lsls	r3, r3, #8
 800b7ac:	697a      	ldr	r2, [r7, #20]
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b7b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a1d      	ldr	r2, [pc, #116]	; (800b834 <TIM_OC3_SetConfig+0xfc>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d00f      	beq.n	800b7e2 <TIM_OC3_SetConfig+0xaa>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a1c      	ldr	r2, [pc, #112]	; (800b838 <TIM_OC3_SetConfig+0x100>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d00b      	beq.n	800b7e2 <TIM_OC3_SetConfig+0xaa>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a1b      	ldr	r2, [pc, #108]	; (800b83c <TIM_OC3_SetConfig+0x104>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d007      	beq.n	800b7e2 <TIM_OC3_SetConfig+0xaa>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a1a      	ldr	r2, [pc, #104]	; (800b840 <TIM_OC3_SetConfig+0x108>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d003      	beq.n	800b7e2 <TIM_OC3_SetConfig+0xaa>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a19      	ldr	r2, [pc, #100]	; (800b844 <TIM_OC3_SetConfig+0x10c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d113      	bne.n	800b80a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b7e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	011b      	lsls	r3, r3, #4
 800b7f8:	693a      	ldr	r2, [r7, #16]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	699b      	ldr	r3, [r3, #24]
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	4313      	orrs	r3, r2
 800b808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	693a      	ldr	r2, [r7, #16]
 800b80e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68fa      	ldr	r2, [r7, #12]
 800b814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	685a      	ldr	r2, [r3, #4]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	621a      	str	r2, [r3, #32]
}
 800b824:	bf00      	nop
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	fffeff8f 	.word	0xfffeff8f
 800b834:	40010000 	.word	0x40010000
 800b838:	40010400 	.word	0x40010400
 800b83c:	40014000 	.word	0x40014000
 800b840:	40014400 	.word	0x40014400
 800b844:	40014800 	.word	0x40014800

0800b848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b870:	68fa      	ldr	r2, [r7, #12]
 800b872:	4b24      	ldr	r3, [pc, #144]	; (800b904 <TIM_OC4_SetConfig+0xbc>)
 800b874:	4013      	ands	r3, r2
 800b876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	021b      	lsls	r3, r3, #8
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4313      	orrs	r3, r2
 800b88a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	031b      	lsls	r3, r3, #12
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a19      	ldr	r2, [pc, #100]	; (800b908 <TIM_OC4_SetConfig+0xc0>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d00f      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x80>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a18      	ldr	r2, [pc, #96]	; (800b90c <TIM_OC4_SetConfig+0xc4>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d00b      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x80>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a17      	ldr	r2, [pc, #92]	; (800b910 <TIM_OC4_SetConfig+0xc8>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d007      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x80>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a16      	ldr	r2, [pc, #88]	; (800b914 <TIM_OC4_SetConfig+0xcc>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d003      	beq.n	800b8c8 <TIM_OC4_SetConfig+0x80>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a15      	ldr	r2, [pc, #84]	; (800b918 <TIM_OC4_SetConfig+0xd0>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d109      	bne.n	800b8dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	695b      	ldr	r3, [r3, #20]
 800b8d4:	019b      	lsls	r3, r3, #6
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	4313      	orrs	r3, r2
 800b8da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	621a      	str	r2, [r3, #32]
}
 800b8f6:	bf00      	nop
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	feff8fff 	.word	0xfeff8fff
 800b908:	40010000 	.word	0x40010000
 800b90c:	40010400 	.word	0x40010400
 800b910:	40014000 	.word	0x40014000
 800b914:	40014400 	.word	0x40014400
 800b918:	40014800 	.word	0x40014800

0800b91c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b087      	sub	sp, #28
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6a1b      	ldr	r3, [r3, #32]
 800b92a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a1b      	ldr	r3, [r3, #32]
 800b936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	4b21      	ldr	r3, [pc, #132]	; (800b9cc <TIM_OC5_SetConfig+0xb0>)
 800b948:	4013      	ands	r3, r2
 800b94a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	4313      	orrs	r3, r2
 800b954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b95c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	689b      	ldr	r3, [r3, #8]
 800b962:	041b      	lsls	r3, r3, #16
 800b964:	693a      	ldr	r2, [r7, #16]
 800b966:	4313      	orrs	r3, r2
 800b968:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4a18      	ldr	r2, [pc, #96]	; (800b9d0 <TIM_OC5_SetConfig+0xb4>)
 800b96e:	4293      	cmp	r3, r2
 800b970:	d00f      	beq.n	800b992 <TIM_OC5_SetConfig+0x76>
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a17      	ldr	r2, [pc, #92]	; (800b9d4 <TIM_OC5_SetConfig+0xb8>)
 800b976:	4293      	cmp	r3, r2
 800b978:	d00b      	beq.n	800b992 <TIM_OC5_SetConfig+0x76>
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	4a16      	ldr	r2, [pc, #88]	; (800b9d8 <TIM_OC5_SetConfig+0xbc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d007      	beq.n	800b992 <TIM_OC5_SetConfig+0x76>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a15      	ldr	r2, [pc, #84]	; (800b9dc <TIM_OC5_SetConfig+0xc0>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d003      	beq.n	800b992 <TIM_OC5_SetConfig+0x76>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a14      	ldr	r2, [pc, #80]	; (800b9e0 <TIM_OC5_SetConfig+0xc4>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d109      	bne.n	800b9a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b998:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	021b      	lsls	r3, r3, #8
 800b9a0:	697a      	ldr	r2, [r7, #20]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	693a      	ldr	r2, [r7, #16]
 800b9be:	621a      	str	r2, [r3, #32]
}
 800b9c0:	bf00      	nop
 800b9c2:	371c      	adds	r7, #28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	fffeff8f 	.word	0xfffeff8f
 800b9d0:	40010000 	.word	0x40010000
 800b9d4:	40010400 	.word	0x40010400
 800b9d8:	40014000 	.word	0x40014000
 800b9dc:	40014400 	.word	0x40014400
 800b9e0:	40014800 	.word	0x40014800

0800b9e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b9e4:	b480      	push	{r7}
 800b9e6:	b087      	sub	sp, #28
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6a1b      	ldr	r3, [r3, #32]
 800b9f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6a1b      	ldr	r3, [r3, #32]
 800b9fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	685b      	ldr	r3, [r3, #4]
 800ba04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	4b22      	ldr	r3, [pc, #136]	; (800ba98 <TIM_OC6_SetConfig+0xb4>)
 800ba10:	4013      	ands	r3, r2
 800ba12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	021b      	lsls	r3, r3, #8
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ba26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	051b      	lsls	r3, r3, #20
 800ba2e:	693a      	ldr	r2, [r7, #16]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a19      	ldr	r2, [pc, #100]	; (800ba9c <TIM_OC6_SetConfig+0xb8>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d00f      	beq.n	800ba5c <TIM_OC6_SetConfig+0x78>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a18      	ldr	r2, [pc, #96]	; (800baa0 <TIM_OC6_SetConfig+0xbc>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d00b      	beq.n	800ba5c <TIM_OC6_SetConfig+0x78>
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a17      	ldr	r2, [pc, #92]	; (800baa4 <TIM_OC6_SetConfig+0xc0>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d007      	beq.n	800ba5c <TIM_OC6_SetConfig+0x78>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a16      	ldr	r2, [pc, #88]	; (800baa8 <TIM_OC6_SetConfig+0xc4>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d003      	beq.n	800ba5c <TIM_OC6_SetConfig+0x78>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	4a15      	ldr	r2, [pc, #84]	; (800baac <TIM_OC6_SetConfig+0xc8>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d109      	bne.n	800ba70 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba5c:	697b      	ldr	r3, [r7, #20]
 800ba5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba62:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	029b      	lsls	r3, r3, #10
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	685a      	ldr	r2, [r3, #4]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	693a      	ldr	r2, [r7, #16]
 800ba88:	621a      	str	r2, [r3, #32]
}
 800ba8a:	bf00      	nop
 800ba8c:	371c      	adds	r7, #28
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	feff8fff 	.word	0xfeff8fff
 800ba9c:	40010000 	.word	0x40010000
 800baa0:	40010400 	.word	0x40010400
 800baa4:	40014000 	.word	0x40014000
 800baa8:	40014400 	.word	0x40014400
 800baac:	40014800 	.word	0x40014800

0800bab0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bab0:	b480      	push	{r7}
 800bab2:	b087      	sub	sp, #28
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	60f8      	str	r0, [r7, #12]
 800bab8:	60b9      	str	r1, [r7, #8]
 800baba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6a1b      	ldr	r3, [r3, #32]
 800bac0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	6a1b      	ldr	r3, [r3, #32]
 800bac6:	f023 0201 	bic.w	r2, r3, #1
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bada:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	011b      	lsls	r3, r3, #4
 800bae0:	693a      	ldr	r2, [r7, #16]
 800bae2:	4313      	orrs	r3, r2
 800bae4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	f023 030a 	bic.w	r3, r3, #10
 800baec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	4313      	orrs	r3, r2
 800baf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	693a      	ldr	r2, [r7, #16]
 800bafa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	697a      	ldr	r2, [r7, #20]
 800bb00:	621a      	str	r2, [r3, #32]
}
 800bb02:	bf00      	nop
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b087      	sub	sp, #28
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	60f8      	str	r0, [r7, #12]
 800bb16:	60b9      	str	r1, [r7, #8]
 800bb18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6a1b      	ldr	r3, [r3, #32]
 800bb1e:	f023 0210 	bic.w	r2, r3, #16
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	6a1b      	ldr	r3, [r3, #32]
 800bb30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	031b      	lsls	r3, r3, #12
 800bb3e:	697a      	ldr	r2, [r7, #20]
 800bb40:	4313      	orrs	r3, r2
 800bb42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	011b      	lsls	r3, r3, #4
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	697a      	ldr	r2, [r7, #20]
 800bb5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	693a      	ldr	r2, [r7, #16]
 800bb60:	621a      	str	r2, [r3, #32]
}
 800bb62:	bf00      	nop
 800bb64:	371c      	adds	r7, #28
 800bb66:	46bd      	mov	sp, r7
 800bb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6c:	4770      	bx	lr
	...

0800bb70 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b085      	sub	sp, #20
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <TIM_ITRx_SetConfig+0x38>)
 800bb84:	4013      	ands	r3, r2
 800bb86:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb88:	683a      	ldr	r2, [r7, #0]
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	f043 0307 	orr.w	r3, r3, #7
 800bb92:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68fa      	ldr	r2, [r7, #12]
 800bb98:	609a      	str	r2, [r3, #8]
}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	ffcfff8f 	.word	0xffcfff8f

0800bbac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b087      	sub	sp, #28
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	607a      	str	r2, [r7, #4]
 800bbb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	689b      	ldr	r3, [r3, #8]
 800bbbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	021a      	lsls	r2, r3, #8
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	431a      	orrs	r2, r3
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	697a      	ldr	r2, [r7, #20]
 800bbd6:	4313      	orrs	r3, r2
 800bbd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	609a      	str	r2, [r3, #8]
}
 800bbe0:	bf00      	nop
 800bbe2:	371c      	adds	r7, #28
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	f003 031f 	and.w	r3, r3, #31
 800bbfe:	2201      	movs	r2, #1
 800bc00:	fa02 f303 	lsl.w	r3, r2, r3
 800bc04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	6a1a      	ldr	r2, [r3, #32]
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	43db      	mvns	r3, r3
 800bc0e:	401a      	ands	r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	6a1a      	ldr	r2, [r3, #32]
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f003 031f 	and.w	r3, r3, #31
 800bc1e:	6879      	ldr	r1, [r7, #4]
 800bc20:	fa01 f303 	lsl.w	r3, r1, r3
 800bc24:	431a      	orrs	r2, r3
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	621a      	str	r2, [r3, #32]
}
 800bc2a:	bf00      	nop
 800bc2c:	371c      	adds	r7, #28
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc34:	4770      	bx	lr
	...

0800bc38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc48:	2b01      	cmp	r3, #1
 800bc4a:	d101      	bne.n	800bc50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	e06d      	b.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2201      	movs	r2, #1
 800bc54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a30      	ldr	r2, [pc, #192]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d004      	beq.n	800bc84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a2f      	ldr	r2, [pc, #188]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d108      	bne.n	800bc96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bc8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	685b      	ldr	r3, [r3, #4]
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4313      	orrs	r3, r2
 800bc94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4313      	orrs	r3, r2
 800bca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68fa      	ldr	r2, [r7, #12]
 800bcae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a20      	ldr	r2, [pc, #128]	; (800bd38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d022      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcc2:	d01d      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a1d      	ldr	r2, [pc, #116]	; (800bd40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d018      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a1c      	ldr	r2, [pc, #112]	; (800bd44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d013      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a1a      	ldr	r2, [pc, #104]	; (800bd48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d00e      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a15      	ldr	r2, [pc, #84]	; (800bd3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bce8:	4293      	cmp	r3, r2
 800bcea:	d009      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a16      	ldr	r2, [pc, #88]	; (800bd4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d004      	beq.n	800bd00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a15      	ldr	r2, [pc, #84]	; (800bd50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d10c      	bne.n	800bd1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	689b      	ldr	r3, [r3, #8]
 800bd0c:	68ba      	ldr	r2, [r7, #8]
 800bd0e:	4313      	orrs	r3, r2
 800bd10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	68ba      	ldr	r2, [r7, #8]
 800bd18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	40010000 	.word	0x40010000
 800bd3c:	40010400 	.word	0x40010400
 800bd40:	40000400 	.word	0x40000400
 800bd44:	40000800 	.word	0x40000800
 800bd48:	40000c00 	.word	0x40000c00
 800bd4c:	40001800 	.word	0x40001800
 800bd50:	40014000 	.word	0x40014000

0800bd54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b085      	sub	sp, #20
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d101      	bne.n	800bd70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd6c:	2302      	movs	r3, #2
 800bd6e:	e065      	b.n	800be3c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	4313      	orrs	r3, r2
 800bd84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	4313      	orrs	r3, r2
 800bda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4313      	orrs	r3, r2
 800bdae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	4313      	orrs	r3, r2
 800bdbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	695b      	ldr	r3, [r3, #20]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	699b      	ldr	r3, [r3, #24]
 800bde4:	041b      	lsls	r3, r3, #16
 800bde6:	4313      	orrs	r3, r2
 800bde8:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a16      	ldr	r2, [pc, #88]	; (800be48 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d004      	beq.n	800bdfe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a14      	ldr	r2, [pc, #80]	; (800be4c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d115      	bne.n	800be2a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be08:	051b      	lsls	r3, r3, #20
 800be0a:	4313      	orrs	r3, r2
 800be0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	69db      	ldr	r3, [r3, #28]
 800be18:	4313      	orrs	r3, r2
 800be1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	6a1b      	ldr	r3, [r3, #32]
 800be26:	4313      	orrs	r3, r2
 800be28:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2200      	movs	r2, #0
 800be36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr
 800be48:	40010000 	.word	0x40010000
 800be4c:	40010400 	.word	0x40010400

0800be50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800be58:	bf00      	nop
 800be5a:	370c      	adds	r7, #12
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr

0800be64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800be6c:	bf00      	nop
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be78:	b480      	push	{r7}
 800be7a:	b083      	sub	sp, #12
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be80:	bf00      	nop
 800be82:	370c      	adds	r7, #12
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e042      	b.n	800bf24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d106      	bne.n	800beb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2200      	movs	r2, #0
 800beac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f7f5 ffd3 	bl	8001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	2224      	movs	r2, #36	; 0x24
 800beba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f022 0201 	bic.w	r2, r2, #1
 800becc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f8ba 	bl	800c048 <UART_SetConfig>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b01      	cmp	r3, #1
 800bed8:	d101      	bne.n	800bede <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800beda:	2301      	movs	r3, #1
 800bedc:	e022      	b.n	800bf24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d002      	beq.n	800beec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f000 fe16 	bl	800cb18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800befa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	689a      	ldr	r2, [r3, #8]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	f042 0201 	orr.w	r2, r2, #1
 800bf1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fe9d 	bl	800cc5c <UART_CheckIdleState>
 800bf22:	4603      	mov	r3, r0
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3708      	adds	r7, #8
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b08a      	sub	sp, #40	; 0x28
 800bf30:	af02      	add	r7, sp, #8
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	603b      	str	r3, [r7, #0]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf42:	2b20      	cmp	r3, #32
 800bf44:	d17b      	bne.n	800c03e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <HAL_UART_Transmit+0x26>
 800bf4c:	88fb      	ldrh	r3, [r7, #6]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d101      	bne.n	800bf56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e074      	b.n	800c040 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2221      	movs	r2, #33	; 0x21
 800bf62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bf66:	f7f6 f9bd 	bl	80022e4 <HAL_GetTick>
 800bf6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	88fa      	ldrh	r2, [r7, #6]
 800bf78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	689b      	ldr	r3, [r3, #8]
 800bf80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf84:	d108      	bne.n	800bf98 <HAL_UART_Transmit+0x6c>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	691b      	ldr	r3, [r3, #16]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d104      	bne.n	800bf98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	61bb      	str	r3, [r7, #24]
 800bf96:	e003      	b.n	800bfa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800bfa0:	e030      	b.n	800c004 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	9300      	str	r3, [sp, #0]
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	2180      	movs	r1, #128	; 0x80
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f000 feff 	bl	800cdb0 <UART_WaitOnFlagUntilTimeout>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d005      	beq.n	800bfc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2220      	movs	r2, #32
 800bfbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e03d      	b.n	800c040 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800bfc4:	69fb      	ldr	r3, [r7, #28]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d10b      	bne.n	800bfe2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	881b      	ldrh	r3, [r3, #0]
 800bfce:	461a      	mov	r2, r3
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bfd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	3302      	adds	r3, #2
 800bfde:	61bb      	str	r3, [r7, #24]
 800bfe0:	e007      	b.n	800bff2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bfe2:	69fb      	ldr	r3, [r7, #28]
 800bfe4:	781a      	ldrb	r2, [r3, #0]
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	3301      	adds	r3, #1
 800bff0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bff8:	b29b      	uxth	r3, r3
 800bffa:	3b01      	subs	r3, #1
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d1c8      	bne.n	800bfa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2200      	movs	r2, #0
 800c018:	2140      	movs	r1, #64	; 0x40
 800c01a:	68f8      	ldr	r0, [r7, #12]
 800c01c:	f000 fec8 	bl	800cdb0 <UART_WaitOnFlagUntilTimeout>
 800c020:	4603      	mov	r3, r0
 800c022:	2b00      	cmp	r3, #0
 800c024:	d005      	beq.n	800c032 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2220      	movs	r2, #32
 800c02a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800c02e:	2303      	movs	r3, #3
 800c030:	e006      	b.n	800c040 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2220      	movs	r2, #32
 800c036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c03a:	2300      	movs	r3, #0
 800c03c:	e000      	b.n	800c040 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c03e:	2302      	movs	r3, #2
  }
}
 800c040:	4618      	mov	r0, r3
 800c042:	3720      	adds	r7, #32
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c04c:	b092      	sub	sp, #72	; 0x48
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	689a      	ldr	r2, [r3, #8]
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	691b      	ldr	r3, [r3, #16]
 800c060:	431a      	orrs	r2, r3
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	695b      	ldr	r3, [r3, #20]
 800c066:	431a      	orrs	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	69db      	ldr	r3, [r3, #28]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	681a      	ldr	r2, [r3, #0]
 800c076:	4bbe      	ldr	r3, [pc, #760]	; (800c370 <UART_SetConfig+0x328>)
 800c078:	4013      	ands	r3, r2
 800c07a:	697a      	ldr	r2, [r7, #20]
 800c07c:	6812      	ldr	r2, [r2, #0]
 800c07e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c080:	430b      	orrs	r3, r1
 800c082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c08e:	697b      	ldr	r3, [r7, #20]
 800c090:	68da      	ldr	r2, [r3, #12]
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4ab3      	ldr	r2, [pc, #716]	; (800c374 <UART_SetConfig+0x32c>)
 800c0a6:	4293      	cmp	r3, r2
 800c0a8:	d004      	beq.n	800c0b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	6a1b      	ldr	r3, [r3, #32]
 800c0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	689a      	ldr	r2, [r3, #8]
 800c0ba:	4baf      	ldr	r3, [pc, #700]	; (800c378 <UART_SetConfig+0x330>)
 800c0bc:	4013      	ands	r3, r2
 800c0be:	697a      	ldr	r2, [r7, #20]
 800c0c0:	6812      	ldr	r2, [r2, #0]
 800c0c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0c4:	430b      	orrs	r3, r1
 800c0c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ce:	f023 010f 	bic.w	r1, r3, #15
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	430a      	orrs	r2, r1
 800c0dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4aa6      	ldr	r2, [pc, #664]	; (800c37c <UART_SetConfig+0x334>)
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d177      	bne.n	800c1d8 <UART_SetConfig+0x190>
 800c0e8:	4ba5      	ldr	r3, [pc, #660]	; (800c380 <UART_SetConfig+0x338>)
 800c0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0f0:	2b28      	cmp	r3, #40	; 0x28
 800c0f2:	d86d      	bhi.n	800c1d0 <UART_SetConfig+0x188>
 800c0f4:	a201      	add	r2, pc, #4	; (adr r2, 800c0fc <UART_SetConfig+0xb4>)
 800c0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fa:	bf00      	nop
 800c0fc:	0800c1a1 	.word	0x0800c1a1
 800c100:	0800c1d1 	.word	0x0800c1d1
 800c104:	0800c1d1 	.word	0x0800c1d1
 800c108:	0800c1d1 	.word	0x0800c1d1
 800c10c:	0800c1d1 	.word	0x0800c1d1
 800c110:	0800c1d1 	.word	0x0800c1d1
 800c114:	0800c1d1 	.word	0x0800c1d1
 800c118:	0800c1d1 	.word	0x0800c1d1
 800c11c:	0800c1a9 	.word	0x0800c1a9
 800c120:	0800c1d1 	.word	0x0800c1d1
 800c124:	0800c1d1 	.word	0x0800c1d1
 800c128:	0800c1d1 	.word	0x0800c1d1
 800c12c:	0800c1d1 	.word	0x0800c1d1
 800c130:	0800c1d1 	.word	0x0800c1d1
 800c134:	0800c1d1 	.word	0x0800c1d1
 800c138:	0800c1d1 	.word	0x0800c1d1
 800c13c:	0800c1b1 	.word	0x0800c1b1
 800c140:	0800c1d1 	.word	0x0800c1d1
 800c144:	0800c1d1 	.word	0x0800c1d1
 800c148:	0800c1d1 	.word	0x0800c1d1
 800c14c:	0800c1d1 	.word	0x0800c1d1
 800c150:	0800c1d1 	.word	0x0800c1d1
 800c154:	0800c1d1 	.word	0x0800c1d1
 800c158:	0800c1d1 	.word	0x0800c1d1
 800c15c:	0800c1b9 	.word	0x0800c1b9
 800c160:	0800c1d1 	.word	0x0800c1d1
 800c164:	0800c1d1 	.word	0x0800c1d1
 800c168:	0800c1d1 	.word	0x0800c1d1
 800c16c:	0800c1d1 	.word	0x0800c1d1
 800c170:	0800c1d1 	.word	0x0800c1d1
 800c174:	0800c1d1 	.word	0x0800c1d1
 800c178:	0800c1d1 	.word	0x0800c1d1
 800c17c:	0800c1c1 	.word	0x0800c1c1
 800c180:	0800c1d1 	.word	0x0800c1d1
 800c184:	0800c1d1 	.word	0x0800c1d1
 800c188:	0800c1d1 	.word	0x0800c1d1
 800c18c:	0800c1d1 	.word	0x0800c1d1
 800c190:	0800c1d1 	.word	0x0800c1d1
 800c194:	0800c1d1 	.word	0x0800c1d1
 800c198:	0800c1d1 	.word	0x0800c1d1
 800c19c:	0800c1c9 	.word	0x0800c1c9
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a6:	e222      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1a8:	2304      	movs	r3, #4
 800c1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ae:	e21e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1b0:	2308      	movs	r3, #8
 800c1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1b6:	e21a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1b8:	2310      	movs	r3, #16
 800c1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1be:	e216      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1c0:	2320      	movs	r3, #32
 800c1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c6:	e212      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1c8:	2340      	movs	r3, #64	; 0x40
 800c1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ce:	e20e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1d0:	2380      	movs	r3, #128	; 0x80
 800c1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d6:	e20a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a69      	ldr	r2, [pc, #420]	; (800c384 <UART_SetConfig+0x33c>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d130      	bne.n	800c244 <UART_SetConfig+0x1fc>
 800c1e2:	4b67      	ldr	r3, [pc, #412]	; (800c380 <UART_SetConfig+0x338>)
 800c1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	2b05      	cmp	r3, #5
 800c1ec:	d826      	bhi.n	800c23c <UART_SetConfig+0x1f4>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <UART_SetConfig+0x1ac>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c20d 	.word	0x0800c20d
 800c1f8:	0800c215 	.word	0x0800c215
 800c1fc:	0800c21d 	.word	0x0800c21d
 800c200:	0800c225 	.word	0x0800c225
 800c204:	0800c22d 	.word	0x0800c22d
 800c208:	0800c235 	.word	0x0800c235
 800c20c:	2300      	movs	r3, #0
 800c20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c212:	e1ec      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c214:	2304      	movs	r3, #4
 800c216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c21a:	e1e8      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c21c:	2308      	movs	r3, #8
 800c21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c222:	e1e4      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c224:	2310      	movs	r3, #16
 800c226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22a:	e1e0      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c22c:	2320      	movs	r3, #32
 800c22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c232:	e1dc      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c234:	2340      	movs	r3, #64	; 0x40
 800c236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23a:	e1d8      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c23c:	2380      	movs	r3, #128	; 0x80
 800c23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c242:	e1d4      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	4a4f      	ldr	r2, [pc, #316]	; (800c388 <UART_SetConfig+0x340>)
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d130      	bne.n	800c2b0 <UART_SetConfig+0x268>
 800c24e:	4b4c      	ldr	r3, [pc, #304]	; (800c380 <UART_SetConfig+0x338>)
 800c250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c252:	f003 0307 	and.w	r3, r3, #7
 800c256:	2b05      	cmp	r3, #5
 800c258:	d826      	bhi.n	800c2a8 <UART_SetConfig+0x260>
 800c25a:	a201      	add	r2, pc, #4	; (adr r2, 800c260 <UART_SetConfig+0x218>)
 800c25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c260:	0800c279 	.word	0x0800c279
 800c264:	0800c281 	.word	0x0800c281
 800c268:	0800c289 	.word	0x0800c289
 800c26c:	0800c291 	.word	0x0800c291
 800c270:	0800c299 	.word	0x0800c299
 800c274:	0800c2a1 	.word	0x0800c2a1
 800c278:	2300      	movs	r3, #0
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e1b6      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c280:	2304      	movs	r3, #4
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e1b2      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c288:	2308      	movs	r3, #8
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e1ae      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c290:	2310      	movs	r3, #16
 800c292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c296:	e1aa      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c298:	2320      	movs	r3, #32
 800c29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c29e:	e1a6      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2a0:	2340      	movs	r3, #64	; 0x40
 800c2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2a6:	e1a2      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2a8:	2380      	movs	r3, #128	; 0x80
 800c2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ae:	e19e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a35      	ldr	r2, [pc, #212]	; (800c38c <UART_SetConfig+0x344>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d130      	bne.n	800c31c <UART_SetConfig+0x2d4>
 800c2ba:	4b31      	ldr	r3, [pc, #196]	; (800c380 <UART_SetConfig+0x338>)
 800c2bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2be:	f003 0307 	and.w	r3, r3, #7
 800c2c2:	2b05      	cmp	r3, #5
 800c2c4:	d826      	bhi.n	800c314 <UART_SetConfig+0x2cc>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <UART_SetConfig+0x284>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c2e5 	.word	0x0800c2e5
 800c2d0:	0800c2ed 	.word	0x0800c2ed
 800c2d4:	0800c2f5 	.word	0x0800c2f5
 800c2d8:	0800c2fd 	.word	0x0800c2fd
 800c2dc:	0800c305 	.word	0x0800c305
 800c2e0:	0800c30d 	.word	0x0800c30d
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e180      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2ec:	2304      	movs	r3, #4
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e17c      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fa:	e178      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c2fc:	2310      	movs	r3, #16
 800c2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c302:	e174      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c304:	2320      	movs	r3, #32
 800c306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c30a:	e170      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c30c:	2340      	movs	r3, #64	; 0x40
 800c30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c312:	e16c      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c314:	2380      	movs	r3, #128	; 0x80
 800c316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c31a:	e168      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1b      	ldr	r2, [pc, #108]	; (800c390 <UART_SetConfig+0x348>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d142      	bne.n	800c3ac <UART_SetConfig+0x364>
 800c326:	4b16      	ldr	r3, [pc, #88]	; (800c380 <UART_SetConfig+0x338>)
 800c328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c32a:	f003 0307 	and.w	r3, r3, #7
 800c32e:	2b05      	cmp	r3, #5
 800c330:	d838      	bhi.n	800c3a4 <UART_SetConfig+0x35c>
 800c332:	a201      	add	r2, pc, #4	; (adr r2, 800c338 <UART_SetConfig+0x2f0>)
 800c334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c338:	0800c351 	.word	0x0800c351
 800c33c:	0800c359 	.word	0x0800c359
 800c340:	0800c361 	.word	0x0800c361
 800c344:	0800c369 	.word	0x0800c369
 800c348:	0800c395 	.word	0x0800c395
 800c34c:	0800c39d 	.word	0x0800c39d
 800c350:	2300      	movs	r3, #0
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e14a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c358:	2304      	movs	r3, #4
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e146      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c360:	2308      	movs	r3, #8
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e142      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c368:	2310      	movs	r3, #16
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e13e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c370:	cfff69f3 	.word	0xcfff69f3
 800c374:	58000c00 	.word	0x58000c00
 800c378:	11fff4ff 	.word	0x11fff4ff
 800c37c:	40011000 	.word	0x40011000
 800c380:	58024400 	.word	0x58024400
 800c384:	40004400 	.word	0x40004400
 800c388:	40004800 	.word	0x40004800
 800c38c:	40004c00 	.word	0x40004c00
 800c390:	40005000 	.word	0x40005000
 800c394:	2320      	movs	r3, #32
 800c396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c39a:	e128      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c39c:	2340      	movs	r3, #64	; 0x40
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e124      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c3a4:	2380      	movs	r3, #128	; 0x80
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e120      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4acb      	ldr	r2, [pc, #812]	; (800c6e0 <UART_SetConfig+0x698>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d176      	bne.n	800c4a4 <UART_SetConfig+0x45c>
 800c3b6:	4bcb      	ldr	r3, [pc, #812]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c3b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3be:	2b28      	cmp	r3, #40	; 0x28
 800c3c0:	d86c      	bhi.n	800c49c <UART_SetConfig+0x454>
 800c3c2:	a201      	add	r2, pc, #4	; (adr r2, 800c3c8 <UART_SetConfig+0x380>)
 800c3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3c8:	0800c46d 	.word	0x0800c46d
 800c3cc:	0800c49d 	.word	0x0800c49d
 800c3d0:	0800c49d 	.word	0x0800c49d
 800c3d4:	0800c49d 	.word	0x0800c49d
 800c3d8:	0800c49d 	.word	0x0800c49d
 800c3dc:	0800c49d 	.word	0x0800c49d
 800c3e0:	0800c49d 	.word	0x0800c49d
 800c3e4:	0800c49d 	.word	0x0800c49d
 800c3e8:	0800c475 	.word	0x0800c475
 800c3ec:	0800c49d 	.word	0x0800c49d
 800c3f0:	0800c49d 	.word	0x0800c49d
 800c3f4:	0800c49d 	.word	0x0800c49d
 800c3f8:	0800c49d 	.word	0x0800c49d
 800c3fc:	0800c49d 	.word	0x0800c49d
 800c400:	0800c49d 	.word	0x0800c49d
 800c404:	0800c49d 	.word	0x0800c49d
 800c408:	0800c47d 	.word	0x0800c47d
 800c40c:	0800c49d 	.word	0x0800c49d
 800c410:	0800c49d 	.word	0x0800c49d
 800c414:	0800c49d 	.word	0x0800c49d
 800c418:	0800c49d 	.word	0x0800c49d
 800c41c:	0800c49d 	.word	0x0800c49d
 800c420:	0800c49d 	.word	0x0800c49d
 800c424:	0800c49d 	.word	0x0800c49d
 800c428:	0800c485 	.word	0x0800c485
 800c42c:	0800c49d 	.word	0x0800c49d
 800c430:	0800c49d 	.word	0x0800c49d
 800c434:	0800c49d 	.word	0x0800c49d
 800c438:	0800c49d 	.word	0x0800c49d
 800c43c:	0800c49d 	.word	0x0800c49d
 800c440:	0800c49d 	.word	0x0800c49d
 800c444:	0800c49d 	.word	0x0800c49d
 800c448:	0800c48d 	.word	0x0800c48d
 800c44c:	0800c49d 	.word	0x0800c49d
 800c450:	0800c49d 	.word	0x0800c49d
 800c454:	0800c49d 	.word	0x0800c49d
 800c458:	0800c49d 	.word	0x0800c49d
 800c45c:	0800c49d 	.word	0x0800c49d
 800c460:	0800c49d 	.word	0x0800c49d
 800c464:	0800c49d 	.word	0x0800c49d
 800c468:	0800c495 	.word	0x0800c495
 800c46c:	2301      	movs	r3, #1
 800c46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c472:	e0bc      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c474:	2304      	movs	r3, #4
 800c476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c47a:	e0b8      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c47c:	2308      	movs	r3, #8
 800c47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c482:	e0b4      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c484:	2310      	movs	r3, #16
 800c486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c48a:	e0b0      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c48c:	2320      	movs	r3, #32
 800c48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c492:	e0ac      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c494:	2340      	movs	r3, #64	; 0x40
 800c496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c49a:	e0a8      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c49c:	2380      	movs	r3, #128	; 0x80
 800c49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4a2:	e0a4      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	4a8f      	ldr	r2, [pc, #572]	; (800c6e8 <UART_SetConfig+0x6a0>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d130      	bne.n	800c510 <UART_SetConfig+0x4c8>
 800c4ae:	4b8d      	ldr	r3, [pc, #564]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4b2:	f003 0307 	and.w	r3, r3, #7
 800c4b6:	2b05      	cmp	r3, #5
 800c4b8:	d826      	bhi.n	800c508 <UART_SetConfig+0x4c0>
 800c4ba:	a201      	add	r2, pc, #4	; (adr r2, 800c4c0 <UART_SetConfig+0x478>)
 800c4bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c0:	0800c4d9 	.word	0x0800c4d9
 800c4c4:	0800c4e1 	.word	0x0800c4e1
 800c4c8:	0800c4e9 	.word	0x0800c4e9
 800c4cc:	0800c4f1 	.word	0x0800c4f1
 800c4d0:	0800c4f9 	.word	0x0800c4f9
 800c4d4:	0800c501 	.word	0x0800c501
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4de:	e086      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c4e0:	2304      	movs	r3, #4
 800c4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e6:	e082      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c4e8:	2308      	movs	r3, #8
 800c4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ee:	e07e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c4f0:	2310      	movs	r3, #16
 800c4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4f6:	e07a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c4f8:	2320      	movs	r3, #32
 800c4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4fe:	e076      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c500:	2340      	movs	r3, #64	; 0x40
 800c502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c506:	e072      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c508:	2380      	movs	r3, #128	; 0x80
 800c50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c50e:	e06e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a75      	ldr	r2, [pc, #468]	; (800c6ec <UART_SetConfig+0x6a4>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d130      	bne.n	800c57c <UART_SetConfig+0x534>
 800c51a:	4b72      	ldr	r3, [pc, #456]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c51e:	f003 0307 	and.w	r3, r3, #7
 800c522:	2b05      	cmp	r3, #5
 800c524:	d826      	bhi.n	800c574 <UART_SetConfig+0x52c>
 800c526:	a201      	add	r2, pc, #4	; (adr r2, 800c52c <UART_SetConfig+0x4e4>)
 800c528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c52c:	0800c545 	.word	0x0800c545
 800c530:	0800c54d 	.word	0x0800c54d
 800c534:	0800c555 	.word	0x0800c555
 800c538:	0800c55d 	.word	0x0800c55d
 800c53c:	0800c565 	.word	0x0800c565
 800c540:	0800c56d 	.word	0x0800c56d
 800c544:	2300      	movs	r3, #0
 800c546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54a:	e050      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c54c:	2304      	movs	r3, #4
 800c54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c552:	e04c      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c554:	2308      	movs	r3, #8
 800c556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c55a:	e048      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c55c:	2310      	movs	r3, #16
 800c55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c562:	e044      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c564:	2320      	movs	r3, #32
 800c566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c56a:	e040      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c56c:	2340      	movs	r3, #64	; 0x40
 800c56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c572:	e03c      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c574:	2380      	movs	r3, #128	; 0x80
 800c576:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c57a:	e038      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a5b      	ldr	r2, [pc, #364]	; (800c6f0 <UART_SetConfig+0x6a8>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d130      	bne.n	800c5e8 <UART_SetConfig+0x5a0>
 800c586:	4b57      	ldr	r3, [pc, #348]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58a:	f003 0307 	and.w	r3, r3, #7
 800c58e:	2b05      	cmp	r3, #5
 800c590:	d826      	bhi.n	800c5e0 <UART_SetConfig+0x598>
 800c592:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <UART_SetConfig+0x550>)
 800c594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c598:	0800c5b1 	.word	0x0800c5b1
 800c59c:	0800c5b9 	.word	0x0800c5b9
 800c5a0:	0800c5c1 	.word	0x0800c5c1
 800c5a4:	0800c5c9 	.word	0x0800c5c9
 800c5a8:	0800c5d1 	.word	0x0800c5d1
 800c5ac:	0800c5d9 	.word	0x0800c5d9
 800c5b0:	2302      	movs	r3, #2
 800c5b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b6:	e01a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5b8:	2304      	movs	r3, #4
 800c5ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5be:	e016      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5c0:	2308      	movs	r3, #8
 800c5c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5c6:	e012      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5c8:	2310      	movs	r3, #16
 800c5ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ce:	e00e      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5d0:	2320      	movs	r3, #32
 800c5d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5d6:	e00a      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5d8:	2340      	movs	r3, #64	; 0x40
 800c5da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5de:	e006      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5e0:	2380      	movs	r3, #128	; 0x80
 800c5e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5e6:	e002      	b.n	800c5ee <UART_SetConfig+0x5a6>
 800c5e8:	2380      	movs	r3, #128	; 0x80
 800c5ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	4a3f      	ldr	r2, [pc, #252]	; (800c6f0 <UART_SetConfig+0x6a8>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	f040 80f8 	bne.w	800c7ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5fa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5fe:	2b20      	cmp	r3, #32
 800c600:	dc46      	bgt.n	800c690 <UART_SetConfig+0x648>
 800c602:	2b02      	cmp	r3, #2
 800c604:	f2c0 8082 	blt.w	800c70c <UART_SetConfig+0x6c4>
 800c608:	3b02      	subs	r3, #2
 800c60a:	2b1e      	cmp	r3, #30
 800c60c:	d87e      	bhi.n	800c70c <UART_SetConfig+0x6c4>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <UART_SetConfig+0x5cc>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c697 	.word	0x0800c697
 800c618:	0800c70d 	.word	0x0800c70d
 800c61c:	0800c69f 	.word	0x0800c69f
 800c620:	0800c70d 	.word	0x0800c70d
 800c624:	0800c70d 	.word	0x0800c70d
 800c628:	0800c70d 	.word	0x0800c70d
 800c62c:	0800c6af 	.word	0x0800c6af
 800c630:	0800c70d 	.word	0x0800c70d
 800c634:	0800c70d 	.word	0x0800c70d
 800c638:	0800c70d 	.word	0x0800c70d
 800c63c:	0800c70d 	.word	0x0800c70d
 800c640:	0800c70d 	.word	0x0800c70d
 800c644:	0800c70d 	.word	0x0800c70d
 800c648:	0800c70d 	.word	0x0800c70d
 800c64c:	0800c6bf 	.word	0x0800c6bf
 800c650:	0800c70d 	.word	0x0800c70d
 800c654:	0800c70d 	.word	0x0800c70d
 800c658:	0800c70d 	.word	0x0800c70d
 800c65c:	0800c70d 	.word	0x0800c70d
 800c660:	0800c70d 	.word	0x0800c70d
 800c664:	0800c70d 	.word	0x0800c70d
 800c668:	0800c70d 	.word	0x0800c70d
 800c66c:	0800c70d 	.word	0x0800c70d
 800c670:	0800c70d 	.word	0x0800c70d
 800c674:	0800c70d 	.word	0x0800c70d
 800c678:	0800c70d 	.word	0x0800c70d
 800c67c:	0800c70d 	.word	0x0800c70d
 800c680:	0800c70d 	.word	0x0800c70d
 800c684:	0800c70d 	.word	0x0800c70d
 800c688:	0800c70d 	.word	0x0800c70d
 800c68c:	0800c6ff 	.word	0x0800c6ff
 800c690:	2b40      	cmp	r3, #64	; 0x40
 800c692:	d037      	beq.n	800c704 <UART_SetConfig+0x6bc>
 800c694:	e03a      	b.n	800c70c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c696:	f7fc fdd7 	bl	8009248 <HAL_RCCEx_GetD3PCLK1Freq>
 800c69a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c69c:	e03c      	b.n	800c718 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c69e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	f7fc fde6 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ac:	e034      	b.n	800c718 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ae:	f107 0318 	add.w	r3, r7, #24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fc ff32 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6b8:	69fb      	ldr	r3, [r7, #28]
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6bc:	e02c      	b.n	800c718 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f003 0320 	and.w	r3, r3, #32
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d016      	beq.n	800c6f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6ca:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <UART_SetConfig+0x69c>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	08db      	lsrs	r3, r3, #3
 800c6d0:	f003 0303 	and.w	r3, r3, #3
 800c6d4:	4a07      	ldr	r2, [pc, #28]	; (800c6f4 <UART_SetConfig+0x6ac>)
 800c6d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6dc:	e01c      	b.n	800c718 <UART_SetConfig+0x6d0>
 800c6de:	bf00      	nop
 800c6e0:	40011400 	.word	0x40011400
 800c6e4:	58024400 	.word	0x58024400
 800c6e8:	40007800 	.word	0x40007800
 800c6ec:	40007c00 	.word	0x40007c00
 800c6f0:	58000c00 	.word	0x58000c00
 800c6f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6f8:	4b9d      	ldr	r3, [pc, #628]	; (800c970 <UART_SetConfig+0x928>)
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fc:	e00c      	b.n	800c718 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6fe:	4b9d      	ldr	r3, [pc, #628]	; (800c974 <UART_SetConfig+0x92c>)
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c702:	e009      	b.n	800c718 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c704:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70a:	e005      	b.n	800c718 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c70c:	2300      	movs	r3, #0
 800c70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c716:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	f000 81de 	beq.w	800cadc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c724:	4a94      	ldr	r2, [pc, #592]	; (800c978 <UART_SetConfig+0x930>)
 800c726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c72a:	461a      	mov	r2, r3
 800c72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c732:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	685a      	ldr	r2, [r3, #4]
 800c738:	4613      	mov	r3, r2
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	4413      	add	r3, r2
 800c73e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c740:	429a      	cmp	r2, r3
 800c742:	d305      	bcc.n	800c750 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	685b      	ldr	r3, [r3, #4]
 800c748:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c74a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d903      	bls.n	800c758 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c756:	e1c1      	b.n	800cadc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c75a:	2200      	movs	r2, #0
 800c75c:	60bb      	str	r3, [r7, #8]
 800c75e:	60fa      	str	r2, [r7, #12]
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c764:	4a84      	ldr	r2, [pc, #528]	; (800c978 <UART_SetConfig+0x930>)
 800c766:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c76a:	b29b      	uxth	r3, r3
 800c76c:	2200      	movs	r2, #0
 800c76e:	603b      	str	r3, [r7, #0]
 800c770:	607a      	str	r2, [r7, #4]
 800c772:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c776:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c77a:	f7f3 fe09 	bl	8000390 <__aeabi_uldivmod>
 800c77e:	4602      	mov	r2, r0
 800c780:	460b      	mov	r3, r1
 800c782:	4610      	mov	r0, r2
 800c784:	4619      	mov	r1, r3
 800c786:	f04f 0200 	mov.w	r2, #0
 800c78a:	f04f 0300 	mov.w	r3, #0
 800c78e:	020b      	lsls	r3, r1, #8
 800c790:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c794:	0202      	lsls	r2, r0, #8
 800c796:	6979      	ldr	r1, [r7, #20]
 800c798:	6849      	ldr	r1, [r1, #4]
 800c79a:	0849      	lsrs	r1, r1, #1
 800c79c:	2000      	movs	r0, #0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	eb12 0804 	adds.w	r8, r2, r4
 800c7a6:	eb43 0905 	adc.w	r9, r3, r5
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	685b      	ldr	r3, [r3, #4]
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	469a      	mov	sl, r3
 800c7b2:	4693      	mov	fp, r2
 800c7b4:	4652      	mov	r2, sl
 800c7b6:	465b      	mov	r3, fp
 800c7b8:	4640      	mov	r0, r8
 800c7ba:	4649      	mov	r1, r9
 800c7bc:	f7f3 fde8 	bl	8000390 <__aeabi_uldivmod>
 800c7c0:	4602      	mov	r2, r0
 800c7c2:	460b      	mov	r3, r1
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7ce:	d308      	bcc.n	800c7e2 <UART_SetConfig+0x79a>
 800c7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7d6:	d204      	bcs.n	800c7e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7de:	60da      	str	r2, [r3, #12]
 800c7e0:	e17c      	b.n	800cadc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c7e8:	e178      	b.n	800cadc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7f2:	f040 80c5 	bne.w	800c980 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c7f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7fa:	2b20      	cmp	r3, #32
 800c7fc:	dc48      	bgt.n	800c890 <UART_SetConfig+0x848>
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	db7b      	blt.n	800c8fa <UART_SetConfig+0x8b2>
 800c802:	2b20      	cmp	r3, #32
 800c804:	d879      	bhi.n	800c8fa <UART_SetConfig+0x8b2>
 800c806:	a201      	add	r2, pc, #4	; (adr r2, 800c80c <UART_SetConfig+0x7c4>)
 800c808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c80c:	0800c897 	.word	0x0800c897
 800c810:	0800c89f 	.word	0x0800c89f
 800c814:	0800c8fb 	.word	0x0800c8fb
 800c818:	0800c8fb 	.word	0x0800c8fb
 800c81c:	0800c8a7 	.word	0x0800c8a7
 800c820:	0800c8fb 	.word	0x0800c8fb
 800c824:	0800c8fb 	.word	0x0800c8fb
 800c828:	0800c8fb 	.word	0x0800c8fb
 800c82c:	0800c8b7 	.word	0x0800c8b7
 800c830:	0800c8fb 	.word	0x0800c8fb
 800c834:	0800c8fb 	.word	0x0800c8fb
 800c838:	0800c8fb 	.word	0x0800c8fb
 800c83c:	0800c8fb 	.word	0x0800c8fb
 800c840:	0800c8fb 	.word	0x0800c8fb
 800c844:	0800c8fb 	.word	0x0800c8fb
 800c848:	0800c8fb 	.word	0x0800c8fb
 800c84c:	0800c8c7 	.word	0x0800c8c7
 800c850:	0800c8fb 	.word	0x0800c8fb
 800c854:	0800c8fb 	.word	0x0800c8fb
 800c858:	0800c8fb 	.word	0x0800c8fb
 800c85c:	0800c8fb 	.word	0x0800c8fb
 800c860:	0800c8fb 	.word	0x0800c8fb
 800c864:	0800c8fb 	.word	0x0800c8fb
 800c868:	0800c8fb 	.word	0x0800c8fb
 800c86c:	0800c8fb 	.word	0x0800c8fb
 800c870:	0800c8fb 	.word	0x0800c8fb
 800c874:	0800c8fb 	.word	0x0800c8fb
 800c878:	0800c8fb 	.word	0x0800c8fb
 800c87c:	0800c8fb 	.word	0x0800c8fb
 800c880:	0800c8fb 	.word	0x0800c8fb
 800c884:	0800c8fb 	.word	0x0800c8fb
 800c888:	0800c8fb 	.word	0x0800c8fb
 800c88c:	0800c8ed 	.word	0x0800c8ed
 800c890:	2b40      	cmp	r3, #64	; 0x40
 800c892:	d02e      	beq.n	800c8f2 <UART_SetConfig+0x8aa>
 800c894:	e031      	b.n	800c8fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c896:	f7fa fd21 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800c89a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c89c:	e033      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c89e:	f7fa fd33 	bl	8007308 <HAL_RCC_GetPCLK2Freq>
 800c8a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c8a4:	e02f      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	f7fc fce2 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8b4:	e027      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8b6:	f107 0318 	add.w	r3, r7, #24
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fc fe2e 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c4:	e01f      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8c6:	4b2d      	ldr	r3, [pc, #180]	; (800c97c <UART_SetConfig+0x934>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d009      	beq.n	800c8e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8d2:	4b2a      	ldr	r3, [pc, #168]	; (800c97c <UART_SetConfig+0x934>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	08db      	lsrs	r3, r3, #3
 800c8d8:	f003 0303 	and.w	r3, r3, #3
 800c8dc:	4a24      	ldr	r2, [pc, #144]	; (800c970 <UART_SetConfig+0x928>)
 800c8de:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8e4:	e00f      	b.n	800c906 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8e6:	4b22      	ldr	r3, [pc, #136]	; (800c970 <UART_SetConfig+0x928>)
 800c8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ea:	e00c      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8ec:	4b21      	ldr	r3, [pc, #132]	; (800c974 <UART_SetConfig+0x92c>)
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f0:	e009      	b.n	800c906 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f8:	e005      	b.n	800c906 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c904:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c908:	2b00      	cmp	r3, #0
 800c90a:	f000 80e7 	beq.w	800cadc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c90e:	697b      	ldr	r3, [r7, #20]
 800c910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c912:	4a19      	ldr	r2, [pc, #100]	; (800c978 <UART_SetConfig+0x930>)
 800c914:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c918:	461a      	mov	r2, r3
 800c91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c91c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c920:	005a      	lsls	r2, r3, #1
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	685b      	ldr	r3, [r3, #4]
 800c926:	085b      	lsrs	r3, r3, #1
 800c928:	441a      	add	r2, r3
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	685b      	ldr	r3, [r3, #4]
 800c92e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c932:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c936:	2b0f      	cmp	r3, #15
 800c938:	d916      	bls.n	800c968 <UART_SetConfig+0x920>
 800c93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c940:	d212      	bcs.n	800c968 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c944:	b29b      	uxth	r3, r3
 800c946:	f023 030f 	bic.w	r3, r3, #15
 800c94a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	085b      	lsrs	r3, r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	f003 0307 	and.w	r3, r3, #7
 800c956:	b29a      	uxth	r2, r3
 800c958:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c95a:	4313      	orrs	r3, r2
 800c95c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c964:	60da      	str	r2, [r3, #12]
 800c966:	e0b9      	b.n	800cadc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c96e:	e0b5      	b.n	800cadc <UART_SetConfig+0xa94>
 800c970:	03d09000 	.word	0x03d09000
 800c974:	003d0900 	.word	0x003d0900
 800c978:	0800daec 	.word	0x0800daec
 800c97c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c980:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c984:	2b20      	cmp	r3, #32
 800c986:	dc49      	bgt.n	800ca1c <UART_SetConfig+0x9d4>
 800c988:	2b00      	cmp	r3, #0
 800c98a:	db7c      	blt.n	800ca86 <UART_SetConfig+0xa3e>
 800c98c:	2b20      	cmp	r3, #32
 800c98e:	d87a      	bhi.n	800ca86 <UART_SetConfig+0xa3e>
 800c990:	a201      	add	r2, pc, #4	; (adr r2, 800c998 <UART_SetConfig+0x950>)
 800c992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c996:	bf00      	nop
 800c998:	0800ca23 	.word	0x0800ca23
 800c99c:	0800ca2b 	.word	0x0800ca2b
 800c9a0:	0800ca87 	.word	0x0800ca87
 800c9a4:	0800ca87 	.word	0x0800ca87
 800c9a8:	0800ca33 	.word	0x0800ca33
 800c9ac:	0800ca87 	.word	0x0800ca87
 800c9b0:	0800ca87 	.word	0x0800ca87
 800c9b4:	0800ca87 	.word	0x0800ca87
 800c9b8:	0800ca43 	.word	0x0800ca43
 800c9bc:	0800ca87 	.word	0x0800ca87
 800c9c0:	0800ca87 	.word	0x0800ca87
 800c9c4:	0800ca87 	.word	0x0800ca87
 800c9c8:	0800ca87 	.word	0x0800ca87
 800c9cc:	0800ca87 	.word	0x0800ca87
 800c9d0:	0800ca87 	.word	0x0800ca87
 800c9d4:	0800ca87 	.word	0x0800ca87
 800c9d8:	0800ca53 	.word	0x0800ca53
 800c9dc:	0800ca87 	.word	0x0800ca87
 800c9e0:	0800ca87 	.word	0x0800ca87
 800c9e4:	0800ca87 	.word	0x0800ca87
 800c9e8:	0800ca87 	.word	0x0800ca87
 800c9ec:	0800ca87 	.word	0x0800ca87
 800c9f0:	0800ca87 	.word	0x0800ca87
 800c9f4:	0800ca87 	.word	0x0800ca87
 800c9f8:	0800ca87 	.word	0x0800ca87
 800c9fc:	0800ca87 	.word	0x0800ca87
 800ca00:	0800ca87 	.word	0x0800ca87
 800ca04:	0800ca87 	.word	0x0800ca87
 800ca08:	0800ca87 	.word	0x0800ca87
 800ca0c:	0800ca87 	.word	0x0800ca87
 800ca10:	0800ca87 	.word	0x0800ca87
 800ca14:	0800ca87 	.word	0x0800ca87
 800ca18:	0800ca79 	.word	0x0800ca79
 800ca1c:	2b40      	cmp	r3, #64	; 0x40
 800ca1e:	d02e      	beq.n	800ca7e <UART_SetConfig+0xa36>
 800ca20:	e031      	b.n	800ca86 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ca22:	f7fa fc5b 	bl	80072dc <HAL_RCC_GetPCLK1Freq>
 800ca26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca28:	e033      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca2a:	f7fa fc6d 	bl	8007308 <HAL_RCC_GetPCLK2Freq>
 800ca2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca30:	e02f      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fc fc1c 	bl	8009274 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca40:	e027      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca42:	f107 0318 	add.w	r3, r7, #24
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7fc fd68 	bl	800951c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca50:	e01f      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca52:	4b2d      	ldr	r3, [pc, #180]	; (800cb08 <UART_SetConfig+0xac0>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f003 0320 	and.w	r3, r3, #32
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d009      	beq.n	800ca72 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca5e:	4b2a      	ldr	r3, [pc, #168]	; (800cb08 <UART_SetConfig+0xac0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	08db      	lsrs	r3, r3, #3
 800ca64:	f003 0303 	and.w	r3, r3, #3
 800ca68:	4a28      	ldr	r2, [pc, #160]	; (800cb0c <UART_SetConfig+0xac4>)
 800ca6a:	fa22 f303 	lsr.w	r3, r2, r3
 800ca6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca70:	e00f      	b.n	800ca92 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca72:	4b26      	ldr	r3, [pc, #152]	; (800cb0c <UART_SetConfig+0xac4>)
 800ca74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca76:	e00c      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca78:	4b25      	ldr	r3, [pc, #148]	; (800cb10 <UART_SetConfig+0xac8>)
 800ca7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca7c:	e009      	b.n	800ca92 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca84:	e005      	b.n	800ca92 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca86:	2300      	movs	r3, #0
 800ca88:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca90:	bf00      	nop
    }

    if (pclk != 0U)
 800ca92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d021      	beq.n	800cadc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca9c:	4a1d      	ldr	r2, [pc, #116]	; (800cb14 <UART_SetConfig+0xacc>)
 800ca9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800caa2:	461a      	mov	r2, r3
 800caa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa6:	fbb3 f2f2 	udiv	r2, r3, r2
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	085b      	lsrs	r3, r3, #1
 800cab0:	441a      	add	r2, r3
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	fbb2 f3f3 	udiv	r3, r2, r3
 800caba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cabe:	2b0f      	cmp	r3, #15
 800cac0:	d909      	bls.n	800cad6 <UART_SetConfig+0xa8e>
 800cac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cac8:	d205      	bcs.n	800cad6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800caca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cacc:	b29a      	uxth	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	60da      	str	r2, [r3, #12]
 800cad4:	e002      	b.n	800cadc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cad6:	2301      	movs	r3, #1
 800cad8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	2201      	movs	r2, #1
 800cae0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cae4:	697b      	ldr	r3, [r7, #20]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	2200      	movs	r2, #0
 800caf0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2200      	movs	r2, #0
 800caf6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800caf8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3748      	adds	r7, #72	; 0x48
 800cb00:	46bd      	mov	sp, r7
 800cb02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cb06:	bf00      	nop
 800cb08:	58024400 	.word	0x58024400
 800cb0c:	03d09000 	.word	0x03d09000
 800cb10:	003d0900 	.word	0x003d0900
 800cb14:	0800daec 	.word	0x0800daec

0800cb18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b083      	sub	sp, #12
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00a      	beq.n	800cb42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb46:	f003 0302 	and.w	r3, r3, #2
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d00a      	beq.n	800cb64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	430a      	orrs	r2, r1
 800cb62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb68:	f003 0304 	and.w	r3, r3, #4
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00a      	beq.n	800cb86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	430a      	orrs	r2, r1
 800cb84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8a:	f003 0308 	and.w	r3, r3, #8
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	430a      	orrs	r2, r1
 800cba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbac:	f003 0310 	and.w	r3, r3, #16
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d00a      	beq.n	800cbca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	430a      	orrs	r2, r1
 800cbc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbce:	f003 0320 	and.w	r3, r3, #32
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d00a      	beq.n	800cbec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	430a      	orrs	r2, r1
 800cbea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01a      	beq.n	800cc2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	430a      	orrs	r2, r1
 800cc0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cc16:	d10a      	bne.n	800cc2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	430a      	orrs	r2, r1
 800cc2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	430a      	orrs	r2, r1
 800cc4e:	605a      	str	r2, [r3, #4]
  }
}
 800cc50:	bf00      	nop
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b098      	sub	sp, #96	; 0x60
 800cc60:	af02      	add	r7, sp, #8
 800cc62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc6c:	f7f5 fb3a 	bl	80022e4 <HAL_GetTick>
 800cc70:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f003 0308 	and.w	r3, r3, #8
 800cc7c:	2b08      	cmp	r3, #8
 800cc7e:	d12f      	bne.n	800cce0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 f88e 	bl	800cdb0 <UART_WaitOnFlagUntilTimeout>
 800cc94:	4603      	mov	r3, r0
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d022      	beq.n	800cce0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca2:	e853 3f00 	ldrex	r3, [r3]
 800cca6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ccae:	653b      	str	r3, [r7, #80]	; 0x50
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	461a      	mov	r2, r3
 800ccb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb8:	647b      	str	r3, [r7, #68]	; 0x44
 800ccba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ccbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccc0:	e841 2300 	strex	r3, r2, [r1]
 800ccc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ccc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d1e6      	bne.n	800cc9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2220      	movs	r2, #32
 800ccd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccdc:	2303      	movs	r3, #3
 800ccde:	e063      	b.n	800cda8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f003 0304 	and.w	r3, r3, #4
 800ccea:	2b04      	cmp	r3, #4
 800ccec:	d149      	bne.n	800cd82 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccf2:	9300      	str	r3, [sp, #0]
 800ccf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 f857 	bl	800cdb0 <UART_WaitOnFlagUntilTimeout>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d03c      	beq.n	800cd82 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd10:	e853 3f00 	ldrex	r3, [r3]
 800cd14:	623b      	str	r3, [r7, #32]
   return(result);
 800cd16:	6a3b      	ldr	r3, [r7, #32]
 800cd18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cd26:	633b      	str	r3, [r7, #48]	; 0x30
 800cd28:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd2e:	e841 2300 	strex	r3, r2, [r1]
 800cd32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d1e6      	bne.n	800cd08 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3308      	adds	r3, #8
 800cd40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	e853 3f00 	ldrex	r3, [r3]
 800cd48:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	f023 0301 	bic.w	r3, r3, #1
 800cd50:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	3308      	adds	r3, #8
 800cd58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd5a:	61fa      	str	r2, [r7, #28]
 800cd5c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd5e:	69b9      	ldr	r1, [r7, #24]
 800cd60:	69fa      	ldr	r2, [r7, #28]
 800cd62:	e841 2300 	strex	r3, r2, [r1]
 800cd66:	617b      	str	r3, [r7, #20]
   return(result);
 800cd68:	697b      	ldr	r3, [r7, #20]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1e5      	bne.n	800cd3a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2220      	movs	r2, #32
 800cd72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd7e:	2303      	movs	r3, #3
 800cd80:	e012      	b.n	800cda8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2220      	movs	r2, #32
 800cd8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2200      	movs	r2, #0
 800cd96:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2200      	movs	r2, #0
 800cda2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cda6:	2300      	movs	r3, #0
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3758      	adds	r7, #88	; 0x58
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	603b      	str	r3, [r7, #0]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdc0:	e049      	b.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cdc2:	69bb      	ldr	r3, [r7, #24]
 800cdc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc8:	d045      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cdca:	f7f5 fa8b 	bl	80022e4 <HAL_GetTick>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	1ad3      	subs	r3, r2, r3
 800cdd4:	69ba      	ldr	r2, [r7, #24]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d302      	bcc.n	800cde0 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d101      	bne.n	800cde4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cde0:	2303      	movs	r3, #3
 800cde2:	e048      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	f003 0304 	and.w	r3, r3, #4
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d031      	beq.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	69db      	ldr	r3, [r3, #28]
 800cdf8:	f003 0308 	and.w	r3, r3, #8
 800cdfc:	2b08      	cmp	r3, #8
 800cdfe:	d110      	bne.n	800ce22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	2208      	movs	r2, #8
 800ce06:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 f839 	bl	800ce80 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	2208      	movs	r2, #8
 800ce12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ce1e:	2301      	movs	r3, #1
 800ce20:	e029      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	69db      	ldr	r3, [r3, #28]
 800ce28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce30:	d111      	bne.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce3c:	68f8      	ldr	r0, [r7, #12]
 800ce3e:	f000 f81f 	bl	800ce80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2220      	movs	r2, #32
 800ce46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce52:	2303      	movs	r3, #3
 800ce54:	e00f      	b.n	800ce76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	69da      	ldr	r2, [r3, #28]
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4013      	ands	r3, r2
 800ce60:	68ba      	ldr	r2, [r7, #8]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	bf0c      	ite	eq
 800ce66:	2301      	moveq	r3, #1
 800ce68:	2300      	movne	r3, #0
 800ce6a:	b2db      	uxtb	r3, r3
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	79fb      	ldrb	r3, [r7, #7]
 800ce70:	429a      	cmp	r2, r3
 800ce72:	d0a6      	beq.n	800cdc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
	...

0800ce80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b095      	sub	sp, #84	; 0x54
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce90:	e853 3f00 	ldrex	r3, [r3]
 800ce94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	461a      	mov	r2, r3
 800cea4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cea6:	643b      	str	r3, [r7, #64]	; 0x40
 800cea8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ceac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ceae:	e841 2300 	strex	r3, r2, [r1]
 800ceb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ceb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d1e6      	bne.n	800ce88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	3308      	adds	r3, #8
 800cec0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cec2:	6a3b      	ldr	r3, [r7, #32]
 800cec4:	e853 3f00 	ldrex	r3, [r3]
 800cec8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceca:	69fa      	ldr	r2, [r7, #28]
 800cecc:	4b1e      	ldr	r3, [pc, #120]	; (800cf48 <UART_EndRxTransfer+0xc8>)
 800cece:	4013      	ands	r3, r2
 800ced0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	3308      	adds	r3, #8
 800ced8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cede:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cee2:	e841 2300 	strex	r3, r2, [r1]
 800cee6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1e5      	bne.n	800ceba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d118      	bne.n	800cf28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	e853 3f00 	ldrex	r3, [r3]
 800cf02:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	f023 0310 	bic.w	r3, r3, #16
 800cf0a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf14:	61bb      	str	r3, [r7, #24]
 800cf16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	6979      	ldr	r1, [r7, #20]
 800cf1a:	69ba      	ldr	r2, [r7, #24]
 800cf1c:	e841 2300 	strex	r3, r2, [r1]
 800cf20:	613b      	str	r3, [r7, #16]
   return(result);
 800cf22:	693b      	ldr	r3, [r7, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e6      	bne.n	800cef6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2220      	movs	r2, #32
 800cf2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf3c:	bf00      	nop
 800cf3e:	3754      	adds	r7, #84	; 0x54
 800cf40:	46bd      	mov	sp, r7
 800cf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf46:	4770      	bx	lr
 800cf48:	effffffe 	.word	0xeffffffe

0800cf4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d101      	bne.n	800cf62 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e027      	b.n	800cfb2 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2201      	movs	r2, #1
 800cf66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2224      	movs	r2, #36	; 0x24
 800cf6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	681a      	ldr	r2, [r3, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f022 0201 	bic.w	r2, r2, #1
 800cf88:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf90:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2220      	movs	r2, #32
 800cfa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3714      	adds	r7, #20
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfce:	2b01      	cmp	r3, #1
 800cfd0:	d101      	bne.n	800cfd6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfd2:	2302      	movs	r3, #2
 800cfd4:	e02d      	b.n	800d032 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2224      	movs	r2, #36	; 0x24
 800cfe2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f022 0201 	bic.w	r2, r2, #1
 800cffc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	689b      	ldr	r3, [r3, #8]
 800d004:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	683a      	ldr	r2, [r7, #0]
 800d00e:	430a      	orrs	r2, r1
 800d010:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f850 	bl	800d0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2220      	movs	r2, #32
 800d024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d030:	2300      	movs	r3, #0
}
 800d032:	4618      	mov	r0, r3
 800d034:	3710      	adds	r7, #16
 800d036:	46bd      	mov	sp, r7
 800d038:	bd80      	pop	{r7, pc}

0800d03a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d03a:	b580      	push	{r7, lr}
 800d03c:	b084      	sub	sp, #16
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d101      	bne.n	800d052 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d04e:	2302      	movs	r3, #2
 800d050:	e02d      	b.n	800d0ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2224      	movs	r2, #36	; 0x24
 800d05e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	f022 0201 	bic.w	r2, r2, #1
 800d078:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 f812 	bl	800d0b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2220      	movs	r2, #32
 800d0a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d0ac:	2300      	movs	r3, #0
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3710      	adds	r7, #16
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
	...

0800d0b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b085      	sub	sp, #20
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d108      	bne.n	800d0da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0d8:	e031      	b.n	800d13e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0da:	2310      	movs	r3, #16
 800d0dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0de:	2310      	movs	r3, #16
 800d0e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	0e5b      	lsrs	r3, r3, #25
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	f003 0307 	and.w	r3, r3, #7
 800d0f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	0f5b      	lsrs	r3, r3, #29
 800d0fa:	b2db      	uxtb	r3, r3
 800d0fc:	f003 0307 	and.w	r3, r3, #7
 800d100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	7b3a      	ldrb	r2, [r7, #12]
 800d106:	4911      	ldr	r1, [pc, #68]	; (800d14c <UARTEx_SetNbDataToProcess+0x94>)
 800d108:	5c8a      	ldrb	r2, [r1, r2]
 800d10a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d10e:	7b3a      	ldrb	r2, [r7, #12]
 800d110:	490f      	ldr	r1, [pc, #60]	; (800d150 <UARTEx_SetNbDataToProcess+0x98>)
 800d112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d114:	fb93 f3f2 	sdiv	r3, r3, r2
 800d118:	b29a      	uxth	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d120:	7bfb      	ldrb	r3, [r7, #15]
 800d122:	7b7a      	ldrb	r2, [r7, #13]
 800d124:	4909      	ldr	r1, [pc, #36]	; (800d14c <UARTEx_SetNbDataToProcess+0x94>)
 800d126:	5c8a      	ldrb	r2, [r1, r2]
 800d128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d12c:	7b7a      	ldrb	r2, [r7, #13]
 800d12e:	4908      	ldr	r1, [pc, #32]	; (800d150 <UARTEx_SetNbDataToProcess+0x98>)
 800d130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d132:	fb93 f3f2 	sdiv	r3, r3, r2
 800d136:	b29a      	uxth	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d13e:	bf00      	nop
 800d140:	3714      	adds	r7, #20
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	0800db04 	.word	0x0800db04
 800d150:	0800db0c 	.word	0x0800db0c

0800d154 <__errno>:
 800d154:	4b01      	ldr	r3, [pc, #4]	; (800d15c <__errno+0x8>)
 800d156:	6818      	ldr	r0, [r3, #0]
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	24000014 	.word	0x24000014

0800d160 <__libc_init_array>:
 800d160:	b570      	push	{r4, r5, r6, lr}
 800d162:	4d0d      	ldr	r5, [pc, #52]	; (800d198 <__libc_init_array+0x38>)
 800d164:	4c0d      	ldr	r4, [pc, #52]	; (800d19c <__libc_init_array+0x3c>)
 800d166:	1b64      	subs	r4, r4, r5
 800d168:	10a4      	asrs	r4, r4, #2
 800d16a:	2600      	movs	r6, #0
 800d16c:	42a6      	cmp	r6, r4
 800d16e:	d109      	bne.n	800d184 <__libc_init_array+0x24>
 800d170:	4d0b      	ldr	r5, [pc, #44]	; (800d1a0 <__libc_init_array+0x40>)
 800d172:	4c0c      	ldr	r4, [pc, #48]	; (800d1a4 <__libc_init_array+0x44>)
 800d174:	f000 fc9c 	bl	800dab0 <_init>
 800d178:	1b64      	subs	r4, r4, r5
 800d17a:	10a4      	asrs	r4, r4, #2
 800d17c:	2600      	movs	r6, #0
 800d17e:	42a6      	cmp	r6, r4
 800d180:	d105      	bne.n	800d18e <__libc_init_array+0x2e>
 800d182:	bd70      	pop	{r4, r5, r6, pc}
 800d184:	f855 3b04 	ldr.w	r3, [r5], #4
 800d188:	4798      	blx	r3
 800d18a:	3601      	adds	r6, #1
 800d18c:	e7ee      	b.n	800d16c <__libc_init_array+0xc>
 800d18e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d192:	4798      	blx	r3
 800d194:	3601      	adds	r6, #1
 800d196:	e7f2      	b.n	800d17e <__libc_init_array+0x1e>
 800d198:	0800db50 	.word	0x0800db50
 800d19c:	0800db50 	.word	0x0800db50
 800d1a0:	0800db50 	.word	0x0800db50
 800d1a4:	0800db54 	.word	0x0800db54

0800d1a8 <memset>:
 800d1a8:	4402      	add	r2, r0
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	4293      	cmp	r3, r2
 800d1ae:	d100      	bne.n	800d1b2 <memset+0xa>
 800d1b0:	4770      	bx	lr
 800d1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1b6:	e7f9      	b.n	800d1ac <memset+0x4>

0800d1b8 <siprintf>:
 800d1b8:	b40e      	push	{r1, r2, r3}
 800d1ba:	b500      	push	{lr}
 800d1bc:	b09c      	sub	sp, #112	; 0x70
 800d1be:	ab1d      	add	r3, sp, #116	; 0x74
 800d1c0:	9002      	str	r0, [sp, #8]
 800d1c2:	9006      	str	r0, [sp, #24]
 800d1c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1c8:	4809      	ldr	r0, [pc, #36]	; (800d1f0 <siprintf+0x38>)
 800d1ca:	9107      	str	r1, [sp, #28]
 800d1cc:	9104      	str	r1, [sp, #16]
 800d1ce:	4909      	ldr	r1, [pc, #36]	; (800d1f4 <siprintf+0x3c>)
 800d1d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1d4:	9105      	str	r1, [sp, #20]
 800d1d6:	6800      	ldr	r0, [r0, #0]
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	a902      	add	r1, sp, #8
 800d1dc:	f000 f876 	bl	800d2cc <_svfiprintf_r>
 800d1e0:	9b02      	ldr	r3, [sp, #8]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	b01c      	add	sp, #112	; 0x70
 800d1e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1ec:	b003      	add	sp, #12
 800d1ee:	4770      	bx	lr
 800d1f0:	24000014 	.word	0x24000014
 800d1f4:	ffff0208 	.word	0xffff0208

0800d1f8 <strcat>:
 800d1f8:	b510      	push	{r4, lr}
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	7814      	ldrb	r4, [r2, #0]
 800d1fe:	4613      	mov	r3, r2
 800d200:	3201      	adds	r2, #1
 800d202:	2c00      	cmp	r4, #0
 800d204:	d1fa      	bne.n	800d1fc <strcat+0x4>
 800d206:	3b01      	subs	r3, #1
 800d208:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d20c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d210:	2a00      	cmp	r2, #0
 800d212:	d1f9      	bne.n	800d208 <strcat+0x10>
 800d214:	bd10      	pop	{r4, pc}

0800d216 <__ssputs_r>:
 800d216:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d21a:	688e      	ldr	r6, [r1, #8]
 800d21c:	429e      	cmp	r6, r3
 800d21e:	4682      	mov	sl, r0
 800d220:	460c      	mov	r4, r1
 800d222:	4690      	mov	r8, r2
 800d224:	461f      	mov	r7, r3
 800d226:	d838      	bhi.n	800d29a <__ssputs_r+0x84>
 800d228:	898a      	ldrh	r2, [r1, #12]
 800d22a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d22e:	d032      	beq.n	800d296 <__ssputs_r+0x80>
 800d230:	6825      	ldr	r5, [r4, #0]
 800d232:	6909      	ldr	r1, [r1, #16]
 800d234:	eba5 0901 	sub.w	r9, r5, r1
 800d238:	6965      	ldr	r5, [r4, #20]
 800d23a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d23e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d242:	3301      	adds	r3, #1
 800d244:	444b      	add	r3, r9
 800d246:	106d      	asrs	r5, r5, #1
 800d248:	429d      	cmp	r5, r3
 800d24a:	bf38      	it	cc
 800d24c:	461d      	movcc	r5, r3
 800d24e:	0553      	lsls	r3, r2, #21
 800d250:	d531      	bpl.n	800d2b6 <__ssputs_r+0xa0>
 800d252:	4629      	mov	r1, r5
 800d254:	f000 fb62 	bl	800d91c <_malloc_r>
 800d258:	4606      	mov	r6, r0
 800d25a:	b950      	cbnz	r0, 800d272 <__ssputs_r+0x5c>
 800d25c:	230c      	movs	r3, #12
 800d25e:	f8ca 3000 	str.w	r3, [sl]
 800d262:	89a3      	ldrh	r3, [r4, #12]
 800d264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d268:	81a3      	strh	r3, [r4, #12]
 800d26a:	f04f 30ff 	mov.w	r0, #4294967295
 800d26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d272:	6921      	ldr	r1, [r4, #16]
 800d274:	464a      	mov	r2, r9
 800d276:	f000 fabd 	bl	800d7f4 <memcpy>
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d280:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d284:	81a3      	strh	r3, [r4, #12]
 800d286:	6126      	str	r6, [r4, #16]
 800d288:	6165      	str	r5, [r4, #20]
 800d28a:	444e      	add	r6, r9
 800d28c:	eba5 0509 	sub.w	r5, r5, r9
 800d290:	6026      	str	r6, [r4, #0]
 800d292:	60a5      	str	r5, [r4, #8]
 800d294:	463e      	mov	r6, r7
 800d296:	42be      	cmp	r6, r7
 800d298:	d900      	bls.n	800d29c <__ssputs_r+0x86>
 800d29a:	463e      	mov	r6, r7
 800d29c:	6820      	ldr	r0, [r4, #0]
 800d29e:	4632      	mov	r2, r6
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	f000 fab5 	bl	800d810 <memmove>
 800d2a6:	68a3      	ldr	r3, [r4, #8]
 800d2a8:	1b9b      	subs	r3, r3, r6
 800d2aa:	60a3      	str	r3, [r4, #8]
 800d2ac:	6823      	ldr	r3, [r4, #0]
 800d2ae:	4433      	add	r3, r6
 800d2b0:	6023      	str	r3, [r4, #0]
 800d2b2:	2000      	movs	r0, #0
 800d2b4:	e7db      	b.n	800d26e <__ssputs_r+0x58>
 800d2b6:	462a      	mov	r2, r5
 800d2b8:	f000 fba4 	bl	800da04 <_realloc_r>
 800d2bc:	4606      	mov	r6, r0
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d1e1      	bne.n	800d286 <__ssputs_r+0x70>
 800d2c2:	6921      	ldr	r1, [r4, #16]
 800d2c4:	4650      	mov	r0, sl
 800d2c6:	f000 fabd 	bl	800d844 <_free_r>
 800d2ca:	e7c7      	b.n	800d25c <__ssputs_r+0x46>

0800d2cc <_svfiprintf_r>:
 800d2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	4698      	mov	r8, r3
 800d2d2:	898b      	ldrh	r3, [r1, #12]
 800d2d4:	061b      	lsls	r3, r3, #24
 800d2d6:	b09d      	sub	sp, #116	; 0x74
 800d2d8:	4607      	mov	r7, r0
 800d2da:	460d      	mov	r5, r1
 800d2dc:	4614      	mov	r4, r2
 800d2de:	d50e      	bpl.n	800d2fe <_svfiprintf_r+0x32>
 800d2e0:	690b      	ldr	r3, [r1, #16]
 800d2e2:	b963      	cbnz	r3, 800d2fe <_svfiprintf_r+0x32>
 800d2e4:	2140      	movs	r1, #64	; 0x40
 800d2e6:	f000 fb19 	bl	800d91c <_malloc_r>
 800d2ea:	6028      	str	r0, [r5, #0]
 800d2ec:	6128      	str	r0, [r5, #16]
 800d2ee:	b920      	cbnz	r0, 800d2fa <_svfiprintf_r+0x2e>
 800d2f0:	230c      	movs	r3, #12
 800d2f2:	603b      	str	r3, [r7, #0]
 800d2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2f8:	e0d1      	b.n	800d49e <_svfiprintf_r+0x1d2>
 800d2fa:	2340      	movs	r3, #64	; 0x40
 800d2fc:	616b      	str	r3, [r5, #20]
 800d2fe:	2300      	movs	r3, #0
 800d300:	9309      	str	r3, [sp, #36]	; 0x24
 800d302:	2320      	movs	r3, #32
 800d304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d308:	f8cd 800c 	str.w	r8, [sp, #12]
 800d30c:	2330      	movs	r3, #48	; 0x30
 800d30e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4b8 <_svfiprintf_r+0x1ec>
 800d312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d316:	f04f 0901 	mov.w	r9, #1
 800d31a:	4623      	mov	r3, r4
 800d31c:	469a      	mov	sl, r3
 800d31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d322:	b10a      	cbz	r2, 800d328 <_svfiprintf_r+0x5c>
 800d324:	2a25      	cmp	r2, #37	; 0x25
 800d326:	d1f9      	bne.n	800d31c <_svfiprintf_r+0x50>
 800d328:	ebba 0b04 	subs.w	fp, sl, r4
 800d32c:	d00b      	beq.n	800d346 <_svfiprintf_r+0x7a>
 800d32e:	465b      	mov	r3, fp
 800d330:	4622      	mov	r2, r4
 800d332:	4629      	mov	r1, r5
 800d334:	4638      	mov	r0, r7
 800d336:	f7ff ff6e 	bl	800d216 <__ssputs_r>
 800d33a:	3001      	adds	r0, #1
 800d33c:	f000 80aa 	beq.w	800d494 <_svfiprintf_r+0x1c8>
 800d340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d342:	445a      	add	r2, fp
 800d344:	9209      	str	r2, [sp, #36]	; 0x24
 800d346:	f89a 3000 	ldrb.w	r3, [sl]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80a2 	beq.w	800d494 <_svfiprintf_r+0x1c8>
 800d350:	2300      	movs	r3, #0
 800d352:	f04f 32ff 	mov.w	r2, #4294967295
 800d356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d35a:	f10a 0a01 	add.w	sl, sl, #1
 800d35e:	9304      	str	r3, [sp, #16]
 800d360:	9307      	str	r3, [sp, #28]
 800d362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d366:	931a      	str	r3, [sp, #104]	; 0x68
 800d368:	4654      	mov	r4, sl
 800d36a:	2205      	movs	r2, #5
 800d36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d370:	4851      	ldr	r0, [pc, #324]	; (800d4b8 <_svfiprintf_r+0x1ec>)
 800d372:	f7f2 ffbd 	bl	80002f0 <memchr>
 800d376:	9a04      	ldr	r2, [sp, #16]
 800d378:	b9d8      	cbnz	r0, 800d3b2 <_svfiprintf_r+0xe6>
 800d37a:	06d0      	lsls	r0, r2, #27
 800d37c:	bf44      	itt	mi
 800d37e:	2320      	movmi	r3, #32
 800d380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d384:	0711      	lsls	r1, r2, #28
 800d386:	bf44      	itt	mi
 800d388:	232b      	movmi	r3, #43	; 0x2b
 800d38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d38e:	f89a 3000 	ldrb.w	r3, [sl]
 800d392:	2b2a      	cmp	r3, #42	; 0x2a
 800d394:	d015      	beq.n	800d3c2 <_svfiprintf_r+0xf6>
 800d396:	9a07      	ldr	r2, [sp, #28]
 800d398:	4654      	mov	r4, sl
 800d39a:	2000      	movs	r0, #0
 800d39c:	f04f 0c0a 	mov.w	ip, #10
 800d3a0:	4621      	mov	r1, r4
 800d3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3a6:	3b30      	subs	r3, #48	; 0x30
 800d3a8:	2b09      	cmp	r3, #9
 800d3aa:	d94e      	bls.n	800d44a <_svfiprintf_r+0x17e>
 800d3ac:	b1b0      	cbz	r0, 800d3dc <_svfiprintf_r+0x110>
 800d3ae:	9207      	str	r2, [sp, #28]
 800d3b0:	e014      	b.n	800d3dc <_svfiprintf_r+0x110>
 800d3b2:	eba0 0308 	sub.w	r3, r0, r8
 800d3b6:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ba:	4313      	orrs	r3, r2
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	46a2      	mov	sl, r4
 800d3c0:	e7d2      	b.n	800d368 <_svfiprintf_r+0x9c>
 800d3c2:	9b03      	ldr	r3, [sp, #12]
 800d3c4:	1d19      	adds	r1, r3, #4
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	9103      	str	r1, [sp, #12]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	bfbb      	ittet	lt
 800d3ce:	425b      	neglt	r3, r3
 800d3d0:	f042 0202 	orrlt.w	r2, r2, #2
 800d3d4:	9307      	strge	r3, [sp, #28]
 800d3d6:	9307      	strlt	r3, [sp, #28]
 800d3d8:	bfb8      	it	lt
 800d3da:	9204      	strlt	r2, [sp, #16]
 800d3dc:	7823      	ldrb	r3, [r4, #0]
 800d3de:	2b2e      	cmp	r3, #46	; 0x2e
 800d3e0:	d10c      	bne.n	800d3fc <_svfiprintf_r+0x130>
 800d3e2:	7863      	ldrb	r3, [r4, #1]
 800d3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3e6:	d135      	bne.n	800d454 <_svfiprintf_r+0x188>
 800d3e8:	9b03      	ldr	r3, [sp, #12]
 800d3ea:	1d1a      	adds	r2, r3, #4
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	9203      	str	r2, [sp, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	bfb8      	it	lt
 800d3f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3f8:	3402      	adds	r4, #2
 800d3fa:	9305      	str	r3, [sp, #20]
 800d3fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4c8 <_svfiprintf_r+0x1fc>
 800d400:	7821      	ldrb	r1, [r4, #0]
 800d402:	2203      	movs	r2, #3
 800d404:	4650      	mov	r0, sl
 800d406:	f7f2 ff73 	bl	80002f0 <memchr>
 800d40a:	b140      	cbz	r0, 800d41e <_svfiprintf_r+0x152>
 800d40c:	2340      	movs	r3, #64	; 0x40
 800d40e:	eba0 000a 	sub.w	r0, r0, sl
 800d412:	fa03 f000 	lsl.w	r0, r3, r0
 800d416:	9b04      	ldr	r3, [sp, #16]
 800d418:	4303      	orrs	r3, r0
 800d41a:	3401      	adds	r4, #1
 800d41c:	9304      	str	r3, [sp, #16]
 800d41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d422:	4826      	ldr	r0, [pc, #152]	; (800d4bc <_svfiprintf_r+0x1f0>)
 800d424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d428:	2206      	movs	r2, #6
 800d42a:	f7f2 ff61 	bl	80002f0 <memchr>
 800d42e:	2800      	cmp	r0, #0
 800d430:	d038      	beq.n	800d4a4 <_svfiprintf_r+0x1d8>
 800d432:	4b23      	ldr	r3, [pc, #140]	; (800d4c0 <_svfiprintf_r+0x1f4>)
 800d434:	bb1b      	cbnz	r3, 800d47e <_svfiprintf_r+0x1b2>
 800d436:	9b03      	ldr	r3, [sp, #12]
 800d438:	3307      	adds	r3, #7
 800d43a:	f023 0307 	bic.w	r3, r3, #7
 800d43e:	3308      	adds	r3, #8
 800d440:	9303      	str	r3, [sp, #12]
 800d442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d444:	4433      	add	r3, r6
 800d446:	9309      	str	r3, [sp, #36]	; 0x24
 800d448:	e767      	b.n	800d31a <_svfiprintf_r+0x4e>
 800d44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d44e:	460c      	mov	r4, r1
 800d450:	2001      	movs	r0, #1
 800d452:	e7a5      	b.n	800d3a0 <_svfiprintf_r+0xd4>
 800d454:	2300      	movs	r3, #0
 800d456:	3401      	adds	r4, #1
 800d458:	9305      	str	r3, [sp, #20]
 800d45a:	4619      	mov	r1, r3
 800d45c:	f04f 0c0a 	mov.w	ip, #10
 800d460:	4620      	mov	r0, r4
 800d462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d466:	3a30      	subs	r2, #48	; 0x30
 800d468:	2a09      	cmp	r2, #9
 800d46a:	d903      	bls.n	800d474 <_svfiprintf_r+0x1a8>
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d0c5      	beq.n	800d3fc <_svfiprintf_r+0x130>
 800d470:	9105      	str	r1, [sp, #20]
 800d472:	e7c3      	b.n	800d3fc <_svfiprintf_r+0x130>
 800d474:	fb0c 2101 	mla	r1, ip, r1, r2
 800d478:	4604      	mov	r4, r0
 800d47a:	2301      	movs	r3, #1
 800d47c:	e7f0      	b.n	800d460 <_svfiprintf_r+0x194>
 800d47e:	ab03      	add	r3, sp, #12
 800d480:	9300      	str	r3, [sp, #0]
 800d482:	462a      	mov	r2, r5
 800d484:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <_svfiprintf_r+0x1f8>)
 800d486:	a904      	add	r1, sp, #16
 800d488:	4638      	mov	r0, r7
 800d48a:	f3af 8000 	nop.w
 800d48e:	1c42      	adds	r2, r0, #1
 800d490:	4606      	mov	r6, r0
 800d492:	d1d6      	bne.n	800d442 <_svfiprintf_r+0x176>
 800d494:	89ab      	ldrh	r3, [r5, #12]
 800d496:	065b      	lsls	r3, r3, #25
 800d498:	f53f af2c 	bmi.w	800d2f4 <_svfiprintf_r+0x28>
 800d49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d49e:	b01d      	add	sp, #116	; 0x74
 800d4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a4:	ab03      	add	r3, sp, #12
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	462a      	mov	r2, r5
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <_svfiprintf_r+0x1f8>)
 800d4ac:	a904      	add	r1, sp, #16
 800d4ae:	4638      	mov	r0, r7
 800d4b0:	f000 f87a 	bl	800d5a8 <_printf_i>
 800d4b4:	e7eb      	b.n	800d48e <_svfiprintf_r+0x1c2>
 800d4b6:	bf00      	nop
 800d4b8:	0800db14 	.word	0x0800db14
 800d4bc:	0800db1e 	.word	0x0800db1e
 800d4c0:	00000000 	.word	0x00000000
 800d4c4:	0800d217 	.word	0x0800d217
 800d4c8:	0800db1a 	.word	0x0800db1a

0800d4cc <_printf_common>:
 800d4cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d0:	4616      	mov	r6, r2
 800d4d2:	4699      	mov	r9, r3
 800d4d4:	688a      	ldr	r2, [r1, #8]
 800d4d6:	690b      	ldr	r3, [r1, #16]
 800d4d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4dc:	4293      	cmp	r3, r2
 800d4de:	bfb8      	it	lt
 800d4e0:	4613      	movlt	r3, r2
 800d4e2:	6033      	str	r3, [r6, #0]
 800d4e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4e8:	4607      	mov	r7, r0
 800d4ea:	460c      	mov	r4, r1
 800d4ec:	b10a      	cbz	r2, 800d4f2 <_printf_common+0x26>
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	6033      	str	r3, [r6, #0]
 800d4f2:	6823      	ldr	r3, [r4, #0]
 800d4f4:	0699      	lsls	r1, r3, #26
 800d4f6:	bf42      	ittt	mi
 800d4f8:	6833      	ldrmi	r3, [r6, #0]
 800d4fa:	3302      	addmi	r3, #2
 800d4fc:	6033      	strmi	r3, [r6, #0]
 800d4fe:	6825      	ldr	r5, [r4, #0]
 800d500:	f015 0506 	ands.w	r5, r5, #6
 800d504:	d106      	bne.n	800d514 <_printf_common+0x48>
 800d506:	f104 0a19 	add.w	sl, r4, #25
 800d50a:	68e3      	ldr	r3, [r4, #12]
 800d50c:	6832      	ldr	r2, [r6, #0]
 800d50e:	1a9b      	subs	r3, r3, r2
 800d510:	42ab      	cmp	r3, r5
 800d512:	dc26      	bgt.n	800d562 <_printf_common+0x96>
 800d514:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d518:	1e13      	subs	r3, r2, #0
 800d51a:	6822      	ldr	r2, [r4, #0]
 800d51c:	bf18      	it	ne
 800d51e:	2301      	movne	r3, #1
 800d520:	0692      	lsls	r2, r2, #26
 800d522:	d42b      	bmi.n	800d57c <_printf_common+0xb0>
 800d524:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d528:	4649      	mov	r1, r9
 800d52a:	4638      	mov	r0, r7
 800d52c:	47c0      	blx	r8
 800d52e:	3001      	adds	r0, #1
 800d530:	d01e      	beq.n	800d570 <_printf_common+0xa4>
 800d532:	6823      	ldr	r3, [r4, #0]
 800d534:	68e5      	ldr	r5, [r4, #12]
 800d536:	6832      	ldr	r2, [r6, #0]
 800d538:	f003 0306 	and.w	r3, r3, #6
 800d53c:	2b04      	cmp	r3, #4
 800d53e:	bf08      	it	eq
 800d540:	1aad      	subeq	r5, r5, r2
 800d542:	68a3      	ldr	r3, [r4, #8]
 800d544:	6922      	ldr	r2, [r4, #16]
 800d546:	bf0c      	ite	eq
 800d548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d54c:	2500      	movne	r5, #0
 800d54e:	4293      	cmp	r3, r2
 800d550:	bfc4      	itt	gt
 800d552:	1a9b      	subgt	r3, r3, r2
 800d554:	18ed      	addgt	r5, r5, r3
 800d556:	2600      	movs	r6, #0
 800d558:	341a      	adds	r4, #26
 800d55a:	42b5      	cmp	r5, r6
 800d55c:	d11a      	bne.n	800d594 <_printf_common+0xc8>
 800d55e:	2000      	movs	r0, #0
 800d560:	e008      	b.n	800d574 <_printf_common+0xa8>
 800d562:	2301      	movs	r3, #1
 800d564:	4652      	mov	r2, sl
 800d566:	4649      	mov	r1, r9
 800d568:	4638      	mov	r0, r7
 800d56a:	47c0      	blx	r8
 800d56c:	3001      	adds	r0, #1
 800d56e:	d103      	bne.n	800d578 <_printf_common+0xac>
 800d570:	f04f 30ff 	mov.w	r0, #4294967295
 800d574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d578:	3501      	adds	r5, #1
 800d57a:	e7c6      	b.n	800d50a <_printf_common+0x3e>
 800d57c:	18e1      	adds	r1, r4, r3
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	2030      	movs	r0, #48	; 0x30
 800d582:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d586:	4422      	add	r2, r4
 800d588:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d58c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d590:	3302      	adds	r3, #2
 800d592:	e7c7      	b.n	800d524 <_printf_common+0x58>
 800d594:	2301      	movs	r3, #1
 800d596:	4622      	mov	r2, r4
 800d598:	4649      	mov	r1, r9
 800d59a:	4638      	mov	r0, r7
 800d59c:	47c0      	blx	r8
 800d59e:	3001      	adds	r0, #1
 800d5a0:	d0e6      	beq.n	800d570 <_printf_common+0xa4>
 800d5a2:	3601      	adds	r6, #1
 800d5a4:	e7d9      	b.n	800d55a <_printf_common+0x8e>
	...

0800d5a8 <_printf_i>:
 800d5a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5ac:	7e0f      	ldrb	r7, [r1, #24]
 800d5ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5b0:	2f78      	cmp	r7, #120	; 0x78
 800d5b2:	4691      	mov	r9, r2
 800d5b4:	4680      	mov	r8, r0
 800d5b6:	460c      	mov	r4, r1
 800d5b8:	469a      	mov	sl, r3
 800d5ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5be:	d807      	bhi.n	800d5d0 <_printf_i+0x28>
 800d5c0:	2f62      	cmp	r7, #98	; 0x62
 800d5c2:	d80a      	bhi.n	800d5da <_printf_i+0x32>
 800d5c4:	2f00      	cmp	r7, #0
 800d5c6:	f000 80d8 	beq.w	800d77a <_printf_i+0x1d2>
 800d5ca:	2f58      	cmp	r7, #88	; 0x58
 800d5cc:	f000 80a3 	beq.w	800d716 <_printf_i+0x16e>
 800d5d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5d8:	e03a      	b.n	800d650 <_printf_i+0xa8>
 800d5da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5de:	2b15      	cmp	r3, #21
 800d5e0:	d8f6      	bhi.n	800d5d0 <_printf_i+0x28>
 800d5e2:	a101      	add	r1, pc, #4	; (adr r1, 800d5e8 <_printf_i+0x40>)
 800d5e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5e8:	0800d641 	.word	0x0800d641
 800d5ec:	0800d655 	.word	0x0800d655
 800d5f0:	0800d5d1 	.word	0x0800d5d1
 800d5f4:	0800d5d1 	.word	0x0800d5d1
 800d5f8:	0800d5d1 	.word	0x0800d5d1
 800d5fc:	0800d5d1 	.word	0x0800d5d1
 800d600:	0800d655 	.word	0x0800d655
 800d604:	0800d5d1 	.word	0x0800d5d1
 800d608:	0800d5d1 	.word	0x0800d5d1
 800d60c:	0800d5d1 	.word	0x0800d5d1
 800d610:	0800d5d1 	.word	0x0800d5d1
 800d614:	0800d761 	.word	0x0800d761
 800d618:	0800d685 	.word	0x0800d685
 800d61c:	0800d743 	.word	0x0800d743
 800d620:	0800d5d1 	.word	0x0800d5d1
 800d624:	0800d5d1 	.word	0x0800d5d1
 800d628:	0800d783 	.word	0x0800d783
 800d62c:	0800d5d1 	.word	0x0800d5d1
 800d630:	0800d685 	.word	0x0800d685
 800d634:	0800d5d1 	.word	0x0800d5d1
 800d638:	0800d5d1 	.word	0x0800d5d1
 800d63c:	0800d74b 	.word	0x0800d74b
 800d640:	682b      	ldr	r3, [r5, #0]
 800d642:	1d1a      	adds	r2, r3, #4
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	602a      	str	r2, [r5, #0]
 800d648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d64c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d650:	2301      	movs	r3, #1
 800d652:	e0a3      	b.n	800d79c <_printf_i+0x1f4>
 800d654:	6820      	ldr	r0, [r4, #0]
 800d656:	6829      	ldr	r1, [r5, #0]
 800d658:	0606      	lsls	r6, r0, #24
 800d65a:	f101 0304 	add.w	r3, r1, #4
 800d65e:	d50a      	bpl.n	800d676 <_printf_i+0xce>
 800d660:	680e      	ldr	r6, [r1, #0]
 800d662:	602b      	str	r3, [r5, #0]
 800d664:	2e00      	cmp	r6, #0
 800d666:	da03      	bge.n	800d670 <_printf_i+0xc8>
 800d668:	232d      	movs	r3, #45	; 0x2d
 800d66a:	4276      	negs	r6, r6
 800d66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d670:	485e      	ldr	r0, [pc, #376]	; (800d7ec <_printf_i+0x244>)
 800d672:	230a      	movs	r3, #10
 800d674:	e019      	b.n	800d6aa <_printf_i+0x102>
 800d676:	680e      	ldr	r6, [r1, #0]
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d67e:	bf18      	it	ne
 800d680:	b236      	sxthne	r6, r6
 800d682:	e7ef      	b.n	800d664 <_printf_i+0xbc>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	6820      	ldr	r0, [r4, #0]
 800d688:	1d19      	adds	r1, r3, #4
 800d68a:	6029      	str	r1, [r5, #0]
 800d68c:	0601      	lsls	r1, r0, #24
 800d68e:	d501      	bpl.n	800d694 <_printf_i+0xec>
 800d690:	681e      	ldr	r6, [r3, #0]
 800d692:	e002      	b.n	800d69a <_printf_i+0xf2>
 800d694:	0646      	lsls	r6, r0, #25
 800d696:	d5fb      	bpl.n	800d690 <_printf_i+0xe8>
 800d698:	881e      	ldrh	r6, [r3, #0]
 800d69a:	4854      	ldr	r0, [pc, #336]	; (800d7ec <_printf_i+0x244>)
 800d69c:	2f6f      	cmp	r7, #111	; 0x6f
 800d69e:	bf0c      	ite	eq
 800d6a0:	2308      	moveq	r3, #8
 800d6a2:	230a      	movne	r3, #10
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6aa:	6865      	ldr	r5, [r4, #4]
 800d6ac:	60a5      	str	r5, [r4, #8]
 800d6ae:	2d00      	cmp	r5, #0
 800d6b0:	bfa2      	ittt	ge
 800d6b2:	6821      	ldrge	r1, [r4, #0]
 800d6b4:	f021 0104 	bicge.w	r1, r1, #4
 800d6b8:	6021      	strge	r1, [r4, #0]
 800d6ba:	b90e      	cbnz	r6, 800d6c0 <_printf_i+0x118>
 800d6bc:	2d00      	cmp	r5, #0
 800d6be:	d04d      	beq.n	800d75c <_printf_i+0x1b4>
 800d6c0:	4615      	mov	r5, r2
 800d6c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6c6:	fb03 6711 	mls	r7, r3, r1, r6
 800d6ca:	5dc7      	ldrb	r7, [r0, r7]
 800d6cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6d0:	4637      	mov	r7, r6
 800d6d2:	42bb      	cmp	r3, r7
 800d6d4:	460e      	mov	r6, r1
 800d6d6:	d9f4      	bls.n	800d6c2 <_printf_i+0x11a>
 800d6d8:	2b08      	cmp	r3, #8
 800d6da:	d10b      	bne.n	800d6f4 <_printf_i+0x14c>
 800d6dc:	6823      	ldr	r3, [r4, #0]
 800d6de:	07de      	lsls	r6, r3, #31
 800d6e0:	d508      	bpl.n	800d6f4 <_printf_i+0x14c>
 800d6e2:	6923      	ldr	r3, [r4, #16]
 800d6e4:	6861      	ldr	r1, [r4, #4]
 800d6e6:	4299      	cmp	r1, r3
 800d6e8:	bfde      	ittt	le
 800d6ea:	2330      	movle	r3, #48	; 0x30
 800d6ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6f4:	1b52      	subs	r2, r2, r5
 800d6f6:	6122      	str	r2, [r4, #16]
 800d6f8:	f8cd a000 	str.w	sl, [sp]
 800d6fc:	464b      	mov	r3, r9
 800d6fe:	aa03      	add	r2, sp, #12
 800d700:	4621      	mov	r1, r4
 800d702:	4640      	mov	r0, r8
 800d704:	f7ff fee2 	bl	800d4cc <_printf_common>
 800d708:	3001      	adds	r0, #1
 800d70a:	d14c      	bne.n	800d7a6 <_printf_i+0x1fe>
 800d70c:	f04f 30ff 	mov.w	r0, #4294967295
 800d710:	b004      	add	sp, #16
 800d712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d716:	4835      	ldr	r0, [pc, #212]	; (800d7ec <_printf_i+0x244>)
 800d718:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d71c:	6829      	ldr	r1, [r5, #0]
 800d71e:	6823      	ldr	r3, [r4, #0]
 800d720:	f851 6b04 	ldr.w	r6, [r1], #4
 800d724:	6029      	str	r1, [r5, #0]
 800d726:	061d      	lsls	r5, r3, #24
 800d728:	d514      	bpl.n	800d754 <_printf_i+0x1ac>
 800d72a:	07df      	lsls	r7, r3, #31
 800d72c:	bf44      	itt	mi
 800d72e:	f043 0320 	orrmi.w	r3, r3, #32
 800d732:	6023      	strmi	r3, [r4, #0]
 800d734:	b91e      	cbnz	r6, 800d73e <_printf_i+0x196>
 800d736:	6823      	ldr	r3, [r4, #0]
 800d738:	f023 0320 	bic.w	r3, r3, #32
 800d73c:	6023      	str	r3, [r4, #0]
 800d73e:	2310      	movs	r3, #16
 800d740:	e7b0      	b.n	800d6a4 <_printf_i+0xfc>
 800d742:	6823      	ldr	r3, [r4, #0]
 800d744:	f043 0320 	orr.w	r3, r3, #32
 800d748:	6023      	str	r3, [r4, #0]
 800d74a:	2378      	movs	r3, #120	; 0x78
 800d74c:	4828      	ldr	r0, [pc, #160]	; (800d7f0 <_printf_i+0x248>)
 800d74e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d752:	e7e3      	b.n	800d71c <_printf_i+0x174>
 800d754:	0659      	lsls	r1, r3, #25
 800d756:	bf48      	it	mi
 800d758:	b2b6      	uxthmi	r6, r6
 800d75a:	e7e6      	b.n	800d72a <_printf_i+0x182>
 800d75c:	4615      	mov	r5, r2
 800d75e:	e7bb      	b.n	800d6d8 <_printf_i+0x130>
 800d760:	682b      	ldr	r3, [r5, #0]
 800d762:	6826      	ldr	r6, [r4, #0]
 800d764:	6961      	ldr	r1, [r4, #20]
 800d766:	1d18      	adds	r0, r3, #4
 800d768:	6028      	str	r0, [r5, #0]
 800d76a:	0635      	lsls	r5, r6, #24
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	d501      	bpl.n	800d774 <_printf_i+0x1cc>
 800d770:	6019      	str	r1, [r3, #0]
 800d772:	e002      	b.n	800d77a <_printf_i+0x1d2>
 800d774:	0670      	lsls	r0, r6, #25
 800d776:	d5fb      	bpl.n	800d770 <_printf_i+0x1c8>
 800d778:	8019      	strh	r1, [r3, #0]
 800d77a:	2300      	movs	r3, #0
 800d77c:	6123      	str	r3, [r4, #16]
 800d77e:	4615      	mov	r5, r2
 800d780:	e7ba      	b.n	800d6f8 <_printf_i+0x150>
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	1d1a      	adds	r2, r3, #4
 800d786:	602a      	str	r2, [r5, #0]
 800d788:	681d      	ldr	r5, [r3, #0]
 800d78a:	6862      	ldr	r2, [r4, #4]
 800d78c:	2100      	movs	r1, #0
 800d78e:	4628      	mov	r0, r5
 800d790:	f7f2 fdae 	bl	80002f0 <memchr>
 800d794:	b108      	cbz	r0, 800d79a <_printf_i+0x1f2>
 800d796:	1b40      	subs	r0, r0, r5
 800d798:	6060      	str	r0, [r4, #4]
 800d79a:	6863      	ldr	r3, [r4, #4]
 800d79c:	6123      	str	r3, [r4, #16]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a4:	e7a8      	b.n	800d6f8 <_printf_i+0x150>
 800d7a6:	6923      	ldr	r3, [r4, #16]
 800d7a8:	462a      	mov	r2, r5
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	4640      	mov	r0, r8
 800d7ae:	47d0      	blx	sl
 800d7b0:	3001      	adds	r0, #1
 800d7b2:	d0ab      	beq.n	800d70c <_printf_i+0x164>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	079b      	lsls	r3, r3, #30
 800d7b8:	d413      	bmi.n	800d7e2 <_printf_i+0x23a>
 800d7ba:	68e0      	ldr	r0, [r4, #12]
 800d7bc:	9b03      	ldr	r3, [sp, #12]
 800d7be:	4298      	cmp	r0, r3
 800d7c0:	bfb8      	it	lt
 800d7c2:	4618      	movlt	r0, r3
 800d7c4:	e7a4      	b.n	800d710 <_printf_i+0x168>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	4632      	mov	r2, r6
 800d7ca:	4649      	mov	r1, r9
 800d7cc:	4640      	mov	r0, r8
 800d7ce:	47d0      	blx	sl
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d09b      	beq.n	800d70c <_printf_i+0x164>
 800d7d4:	3501      	adds	r5, #1
 800d7d6:	68e3      	ldr	r3, [r4, #12]
 800d7d8:	9903      	ldr	r1, [sp, #12]
 800d7da:	1a5b      	subs	r3, r3, r1
 800d7dc:	42ab      	cmp	r3, r5
 800d7de:	dcf2      	bgt.n	800d7c6 <_printf_i+0x21e>
 800d7e0:	e7eb      	b.n	800d7ba <_printf_i+0x212>
 800d7e2:	2500      	movs	r5, #0
 800d7e4:	f104 0619 	add.w	r6, r4, #25
 800d7e8:	e7f5      	b.n	800d7d6 <_printf_i+0x22e>
 800d7ea:	bf00      	nop
 800d7ec:	0800db25 	.word	0x0800db25
 800d7f0:	0800db36 	.word	0x0800db36

0800d7f4 <memcpy>:
 800d7f4:	440a      	add	r2, r1
 800d7f6:	4291      	cmp	r1, r2
 800d7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d7fc:	d100      	bne.n	800d800 <memcpy+0xc>
 800d7fe:	4770      	bx	lr
 800d800:	b510      	push	{r4, lr}
 800d802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d80a:	4291      	cmp	r1, r2
 800d80c:	d1f9      	bne.n	800d802 <memcpy+0xe>
 800d80e:	bd10      	pop	{r4, pc}

0800d810 <memmove>:
 800d810:	4288      	cmp	r0, r1
 800d812:	b510      	push	{r4, lr}
 800d814:	eb01 0402 	add.w	r4, r1, r2
 800d818:	d902      	bls.n	800d820 <memmove+0x10>
 800d81a:	4284      	cmp	r4, r0
 800d81c:	4623      	mov	r3, r4
 800d81e:	d807      	bhi.n	800d830 <memmove+0x20>
 800d820:	1e43      	subs	r3, r0, #1
 800d822:	42a1      	cmp	r1, r4
 800d824:	d008      	beq.n	800d838 <memmove+0x28>
 800d826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d82a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d82e:	e7f8      	b.n	800d822 <memmove+0x12>
 800d830:	4402      	add	r2, r0
 800d832:	4601      	mov	r1, r0
 800d834:	428a      	cmp	r2, r1
 800d836:	d100      	bne.n	800d83a <memmove+0x2a>
 800d838:	bd10      	pop	{r4, pc}
 800d83a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d83e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d842:	e7f7      	b.n	800d834 <memmove+0x24>

0800d844 <_free_r>:
 800d844:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d846:	2900      	cmp	r1, #0
 800d848:	d044      	beq.n	800d8d4 <_free_r+0x90>
 800d84a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d84e:	9001      	str	r0, [sp, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	f1a1 0404 	sub.w	r4, r1, #4
 800d856:	bfb8      	it	lt
 800d858:	18e4      	addlt	r4, r4, r3
 800d85a:	f000 f913 	bl	800da84 <__malloc_lock>
 800d85e:	4a1e      	ldr	r2, [pc, #120]	; (800d8d8 <_free_r+0x94>)
 800d860:	9801      	ldr	r0, [sp, #4]
 800d862:	6813      	ldr	r3, [r2, #0]
 800d864:	b933      	cbnz	r3, 800d874 <_free_r+0x30>
 800d866:	6063      	str	r3, [r4, #4]
 800d868:	6014      	str	r4, [r2, #0]
 800d86a:	b003      	add	sp, #12
 800d86c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d870:	f000 b90e 	b.w	800da90 <__malloc_unlock>
 800d874:	42a3      	cmp	r3, r4
 800d876:	d908      	bls.n	800d88a <_free_r+0x46>
 800d878:	6825      	ldr	r5, [r4, #0]
 800d87a:	1961      	adds	r1, r4, r5
 800d87c:	428b      	cmp	r3, r1
 800d87e:	bf01      	itttt	eq
 800d880:	6819      	ldreq	r1, [r3, #0]
 800d882:	685b      	ldreq	r3, [r3, #4]
 800d884:	1949      	addeq	r1, r1, r5
 800d886:	6021      	streq	r1, [r4, #0]
 800d888:	e7ed      	b.n	800d866 <_free_r+0x22>
 800d88a:	461a      	mov	r2, r3
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	b10b      	cbz	r3, 800d894 <_free_r+0x50>
 800d890:	42a3      	cmp	r3, r4
 800d892:	d9fa      	bls.n	800d88a <_free_r+0x46>
 800d894:	6811      	ldr	r1, [r2, #0]
 800d896:	1855      	adds	r5, r2, r1
 800d898:	42a5      	cmp	r5, r4
 800d89a:	d10b      	bne.n	800d8b4 <_free_r+0x70>
 800d89c:	6824      	ldr	r4, [r4, #0]
 800d89e:	4421      	add	r1, r4
 800d8a0:	1854      	adds	r4, r2, r1
 800d8a2:	42a3      	cmp	r3, r4
 800d8a4:	6011      	str	r1, [r2, #0]
 800d8a6:	d1e0      	bne.n	800d86a <_free_r+0x26>
 800d8a8:	681c      	ldr	r4, [r3, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	6053      	str	r3, [r2, #4]
 800d8ae:	4421      	add	r1, r4
 800d8b0:	6011      	str	r1, [r2, #0]
 800d8b2:	e7da      	b.n	800d86a <_free_r+0x26>
 800d8b4:	d902      	bls.n	800d8bc <_free_r+0x78>
 800d8b6:	230c      	movs	r3, #12
 800d8b8:	6003      	str	r3, [r0, #0]
 800d8ba:	e7d6      	b.n	800d86a <_free_r+0x26>
 800d8bc:	6825      	ldr	r5, [r4, #0]
 800d8be:	1961      	adds	r1, r4, r5
 800d8c0:	428b      	cmp	r3, r1
 800d8c2:	bf04      	itt	eq
 800d8c4:	6819      	ldreq	r1, [r3, #0]
 800d8c6:	685b      	ldreq	r3, [r3, #4]
 800d8c8:	6063      	str	r3, [r4, #4]
 800d8ca:	bf04      	itt	eq
 800d8cc:	1949      	addeq	r1, r1, r5
 800d8ce:	6021      	streq	r1, [r4, #0]
 800d8d0:	6054      	str	r4, [r2, #4]
 800d8d2:	e7ca      	b.n	800d86a <_free_r+0x26>
 800d8d4:	b003      	add	sp, #12
 800d8d6:	bd30      	pop	{r4, r5, pc}
 800d8d8:	24000450 	.word	0x24000450

0800d8dc <sbrk_aligned>:
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	4e0e      	ldr	r6, [pc, #56]	; (800d918 <sbrk_aligned+0x3c>)
 800d8e0:	460c      	mov	r4, r1
 800d8e2:	6831      	ldr	r1, [r6, #0]
 800d8e4:	4605      	mov	r5, r0
 800d8e6:	b911      	cbnz	r1, 800d8ee <sbrk_aligned+0x12>
 800d8e8:	f000 f8bc 	bl	800da64 <_sbrk_r>
 800d8ec:	6030      	str	r0, [r6, #0]
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f000 f8b7 	bl	800da64 <_sbrk_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d00a      	beq.n	800d910 <sbrk_aligned+0x34>
 800d8fa:	1cc4      	adds	r4, r0, #3
 800d8fc:	f024 0403 	bic.w	r4, r4, #3
 800d900:	42a0      	cmp	r0, r4
 800d902:	d007      	beq.n	800d914 <sbrk_aligned+0x38>
 800d904:	1a21      	subs	r1, r4, r0
 800d906:	4628      	mov	r0, r5
 800d908:	f000 f8ac 	bl	800da64 <_sbrk_r>
 800d90c:	3001      	adds	r0, #1
 800d90e:	d101      	bne.n	800d914 <sbrk_aligned+0x38>
 800d910:	f04f 34ff 	mov.w	r4, #4294967295
 800d914:	4620      	mov	r0, r4
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	24000454 	.word	0x24000454

0800d91c <_malloc_r>:
 800d91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d920:	1ccd      	adds	r5, r1, #3
 800d922:	f025 0503 	bic.w	r5, r5, #3
 800d926:	3508      	adds	r5, #8
 800d928:	2d0c      	cmp	r5, #12
 800d92a:	bf38      	it	cc
 800d92c:	250c      	movcc	r5, #12
 800d92e:	2d00      	cmp	r5, #0
 800d930:	4607      	mov	r7, r0
 800d932:	db01      	blt.n	800d938 <_malloc_r+0x1c>
 800d934:	42a9      	cmp	r1, r5
 800d936:	d905      	bls.n	800d944 <_malloc_r+0x28>
 800d938:	230c      	movs	r3, #12
 800d93a:	603b      	str	r3, [r7, #0]
 800d93c:	2600      	movs	r6, #0
 800d93e:	4630      	mov	r0, r6
 800d940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d944:	4e2e      	ldr	r6, [pc, #184]	; (800da00 <_malloc_r+0xe4>)
 800d946:	f000 f89d 	bl	800da84 <__malloc_lock>
 800d94a:	6833      	ldr	r3, [r6, #0]
 800d94c:	461c      	mov	r4, r3
 800d94e:	bb34      	cbnz	r4, 800d99e <_malloc_r+0x82>
 800d950:	4629      	mov	r1, r5
 800d952:	4638      	mov	r0, r7
 800d954:	f7ff ffc2 	bl	800d8dc <sbrk_aligned>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	4604      	mov	r4, r0
 800d95c:	d14d      	bne.n	800d9fa <_malloc_r+0xde>
 800d95e:	6834      	ldr	r4, [r6, #0]
 800d960:	4626      	mov	r6, r4
 800d962:	2e00      	cmp	r6, #0
 800d964:	d140      	bne.n	800d9e8 <_malloc_r+0xcc>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	4631      	mov	r1, r6
 800d96a:	4638      	mov	r0, r7
 800d96c:	eb04 0803 	add.w	r8, r4, r3
 800d970:	f000 f878 	bl	800da64 <_sbrk_r>
 800d974:	4580      	cmp	r8, r0
 800d976:	d13a      	bne.n	800d9ee <_malloc_r+0xd2>
 800d978:	6821      	ldr	r1, [r4, #0]
 800d97a:	3503      	adds	r5, #3
 800d97c:	1a6d      	subs	r5, r5, r1
 800d97e:	f025 0503 	bic.w	r5, r5, #3
 800d982:	3508      	adds	r5, #8
 800d984:	2d0c      	cmp	r5, #12
 800d986:	bf38      	it	cc
 800d988:	250c      	movcc	r5, #12
 800d98a:	4629      	mov	r1, r5
 800d98c:	4638      	mov	r0, r7
 800d98e:	f7ff ffa5 	bl	800d8dc <sbrk_aligned>
 800d992:	3001      	adds	r0, #1
 800d994:	d02b      	beq.n	800d9ee <_malloc_r+0xd2>
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	442b      	add	r3, r5
 800d99a:	6023      	str	r3, [r4, #0]
 800d99c:	e00e      	b.n	800d9bc <_malloc_r+0xa0>
 800d99e:	6822      	ldr	r2, [r4, #0]
 800d9a0:	1b52      	subs	r2, r2, r5
 800d9a2:	d41e      	bmi.n	800d9e2 <_malloc_r+0xc6>
 800d9a4:	2a0b      	cmp	r2, #11
 800d9a6:	d916      	bls.n	800d9d6 <_malloc_r+0xba>
 800d9a8:	1961      	adds	r1, r4, r5
 800d9aa:	42a3      	cmp	r3, r4
 800d9ac:	6025      	str	r5, [r4, #0]
 800d9ae:	bf18      	it	ne
 800d9b0:	6059      	strne	r1, [r3, #4]
 800d9b2:	6863      	ldr	r3, [r4, #4]
 800d9b4:	bf08      	it	eq
 800d9b6:	6031      	streq	r1, [r6, #0]
 800d9b8:	5162      	str	r2, [r4, r5]
 800d9ba:	604b      	str	r3, [r1, #4]
 800d9bc:	4638      	mov	r0, r7
 800d9be:	f104 060b 	add.w	r6, r4, #11
 800d9c2:	f000 f865 	bl	800da90 <__malloc_unlock>
 800d9c6:	f026 0607 	bic.w	r6, r6, #7
 800d9ca:	1d23      	adds	r3, r4, #4
 800d9cc:	1af2      	subs	r2, r6, r3
 800d9ce:	d0b6      	beq.n	800d93e <_malloc_r+0x22>
 800d9d0:	1b9b      	subs	r3, r3, r6
 800d9d2:	50a3      	str	r3, [r4, r2]
 800d9d4:	e7b3      	b.n	800d93e <_malloc_r+0x22>
 800d9d6:	6862      	ldr	r2, [r4, #4]
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	bf0c      	ite	eq
 800d9dc:	6032      	streq	r2, [r6, #0]
 800d9de:	605a      	strne	r2, [r3, #4]
 800d9e0:	e7ec      	b.n	800d9bc <_malloc_r+0xa0>
 800d9e2:	4623      	mov	r3, r4
 800d9e4:	6864      	ldr	r4, [r4, #4]
 800d9e6:	e7b2      	b.n	800d94e <_malloc_r+0x32>
 800d9e8:	4634      	mov	r4, r6
 800d9ea:	6876      	ldr	r6, [r6, #4]
 800d9ec:	e7b9      	b.n	800d962 <_malloc_r+0x46>
 800d9ee:	230c      	movs	r3, #12
 800d9f0:	603b      	str	r3, [r7, #0]
 800d9f2:	4638      	mov	r0, r7
 800d9f4:	f000 f84c 	bl	800da90 <__malloc_unlock>
 800d9f8:	e7a1      	b.n	800d93e <_malloc_r+0x22>
 800d9fa:	6025      	str	r5, [r4, #0]
 800d9fc:	e7de      	b.n	800d9bc <_malloc_r+0xa0>
 800d9fe:	bf00      	nop
 800da00:	24000450 	.word	0x24000450

0800da04 <_realloc_r>:
 800da04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da08:	4680      	mov	r8, r0
 800da0a:	4614      	mov	r4, r2
 800da0c:	460e      	mov	r6, r1
 800da0e:	b921      	cbnz	r1, 800da1a <_realloc_r+0x16>
 800da10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da14:	4611      	mov	r1, r2
 800da16:	f7ff bf81 	b.w	800d91c <_malloc_r>
 800da1a:	b92a      	cbnz	r2, 800da28 <_realloc_r+0x24>
 800da1c:	f7ff ff12 	bl	800d844 <_free_r>
 800da20:	4625      	mov	r5, r4
 800da22:	4628      	mov	r0, r5
 800da24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da28:	f000 f838 	bl	800da9c <_malloc_usable_size_r>
 800da2c:	4284      	cmp	r4, r0
 800da2e:	4607      	mov	r7, r0
 800da30:	d802      	bhi.n	800da38 <_realloc_r+0x34>
 800da32:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da36:	d812      	bhi.n	800da5e <_realloc_r+0x5a>
 800da38:	4621      	mov	r1, r4
 800da3a:	4640      	mov	r0, r8
 800da3c:	f7ff ff6e 	bl	800d91c <_malloc_r>
 800da40:	4605      	mov	r5, r0
 800da42:	2800      	cmp	r0, #0
 800da44:	d0ed      	beq.n	800da22 <_realloc_r+0x1e>
 800da46:	42bc      	cmp	r4, r7
 800da48:	4622      	mov	r2, r4
 800da4a:	4631      	mov	r1, r6
 800da4c:	bf28      	it	cs
 800da4e:	463a      	movcs	r2, r7
 800da50:	f7ff fed0 	bl	800d7f4 <memcpy>
 800da54:	4631      	mov	r1, r6
 800da56:	4640      	mov	r0, r8
 800da58:	f7ff fef4 	bl	800d844 <_free_r>
 800da5c:	e7e1      	b.n	800da22 <_realloc_r+0x1e>
 800da5e:	4635      	mov	r5, r6
 800da60:	e7df      	b.n	800da22 <_realloc_r+0x1e>
	...

0800da64 <_sbrk_r>:
 800da64:	b538      	push	{r3, r4, r5, lr}
 800da66:	4d06      	ldr	r5, [pc, #24]	; (800da80 <_sbrk_r+0x1c>)
 800da68:	2300      	movs	r3, #0
 800da6a:	4604      	mov	r4, r0
 800da6c:	4608      	mov	r0, r1
 800da6e:	602b      	str	r3, [r5, #0]
 800da70:	f7f4 fabc 	bl	8001fec <_sbrk>
 800da74:	1c43      	adds	r3, r0, #1
 800da76:	d102      	bne.n	800da7e <_sbrk_r+0x1a>
 800da78:	682b      	ldr	r3, [r5, #0]
 800da7a:	b103      	cbz	r3, 800da7e <_sbrk_r+0x1a>
 800da7c:	6023      	str	r3, [r4, #0]
 800da7e:	bd38      	pop	{r3, r4, r5, pc}
 800da80:	24000458 	.word	0x24000458

0800da84 <__malloc_lock>:
 800da84:	4801      	ldr	r0, [pc, #4]	; (800da8c <__malloc_lock+0x8>)
 800da86:	f000 b811 	b.w	800daac <__retarget_lock_acquire_recursive>
 800da8a:	bf00      	nop
 800da8c:	2400045c 	.word	0x2400045c

0800da90 <__malloc_unlock>:
 800da90:	4801      	ldr	r0, [pc, #4]	; (800da98 <__malloc_unlock+0x8>)
 800da92:	f000 b80c 	b.w	800daae <__retarget_lock_release_recursive>
 800da96:	bf00      	nop
 800da98:	2400045c 	.word	0x2400045c

0800da9c <_malloc_usable_size_r>:
 800da9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daa0:	1f18      	subs	r0, r3, #4
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	bfbc      	itt	lt
 800daa6:	580b      	ldrlt	r3, [r1, r0]
 800daa8:	18c0      	addlt	r0, r0, r3
 800daaa:	4770      	bx	lr

0800daac <__retarget_lock_acquire_recursive>:
 800daac:	4770      	bx	lr

0800daae <__retarget_lock_release_recursive>:
 800daae:	4770      	bx	lr

0800dab0 <_init>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	bf00      	nop
 800dab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab6:	bc08      	pop	{r3}
 800dab8:	469e      	mov	lr, r3
 800daba:	4770      	bx	lr

0800dabc <_fini>:
 800dabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dabe:	bf00      	nop
 800dac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dac2:	bc08      	pop	{r3}
 800dac4:	469e      	mov	lr, r3
 800dac6:	4770      	bx	lr
